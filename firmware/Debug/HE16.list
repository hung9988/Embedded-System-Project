
HE16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000deb0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001414  0800e050  0800e050  0000f050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f464  0800f464  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800f464  0800f464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f46c  0800f46c  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f46c  0800f46c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f470  0800f470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800f474  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000017a4  200002a0  0800f714  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a44  0800f714  00011a44  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee45  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000557e  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001225  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203d4  00000000  00000000  00037f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f04f  00000000  00000000  00058369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9ca4  00000000  00000000  000773b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013105c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ab8  00000000  00000000  001310a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00137b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e038 	.word	0x0800e038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800e038 	.word	0x0800e038

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void stop_streaming(void);
static void handle_streaming(void);

extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 fb11 	bl	8006c0c <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <cdc_performance_measure+0x56>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fcb9 	bl	8003f6c <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 8000606:	f107 000c 	add.w	r0, r7, #12
 800060a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <cdc_performance_measure+0x60>)
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f00c fbca 	bl	800cda8 <sniprintf>
 8000614:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 8000616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	653a      	str	r2, [r7, #80]	@ 0x50
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000624:	2000      	movs	r0, #0
 8000626:	f006 fb71 	bl	8006d0c <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f006 fba2 	bl	8006d74 <tud_cdc_n_write_flush>
 8000630:	e000      	b.n	8000634 <cdc_performance_measure+0x58>
    return;
 8000632:	bf00      	nop
  tud_cdc_write_flush(); // Make sure data is sent
}
 8000634:	3760      	adds	r7, #96	@ 0x60
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	0800e050 	.word	0x0800e050

08000640 <cdc_task>:

void cdc_task(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f006 fae0 	bl	8006c0c <tud_cdc_n_connected>
 800064c:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 80b8 	beq.w	80007c4 <cdc_task+0x184>
    // Handle streaming if active
    handle_streaming();
 8000654:	f000 f962 	bl	800091c <handle_streaming>
  return tud_cdc_n_available(0);
 8000658:	2000      	movs	r0, #0
 800065a:	f006 fb15 	bl	8006c88 <tud_cdc_n_available>
 800065e:	4603      	mov	r3, r0

    if (tud_cdc_available()) {
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 80b8 	beq.w	80007d6 <cdc_task+0x196>
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 800066e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000672:	2000      	movs	r0, #0
 8000674:	f006 fb1e 	bl	8006cb4 <tud_cdc_n_read>
 8000678:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800067a:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000680:	e091      	b.n	80007a6 <cdc_task+0x166>
        char c = buf[i];
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle Ctrl+C to stop streaming
        if (c == 3) { // Ctrl+C ASCII code
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b03      	cmp	r3, #3
 8000694:	d10c      	bne.n	80006b0 <cdc_task+0x70>
          if (streaming_active) {
 8000696:	4b52      	ldr	r3, [pc, #328]	@ (80007e0 <cdc_task+0x1a0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d07b      	beq.n	8000796 <cdc_task+0x156>
            stop_streaming();
 800069e:	f000 f931 	bl	8000904 <stop_streaming>
            cdc_write_string_chunked("\r\nStreaming stopped\r\n");
 80006a2:	4850      	ldr	r0, [pc, #320]	@ (80007e4 <cdc_task+0x1a4>)
 80006a4:	f000 f8ac 	bl	8000800 <cdc_write_string_chunked>
            cdc_write_string_chunked("Ready> ");
 80006a8:	484f      	ldr	r0, [pc, #316]	@ (80007e8 <cdc_task+0x1a8>)
 80006aa:	f000 f8a9 	bl	8000800 <cdc_write_string_chunked>
 80006ae:	e077      	b.n	80007a0 <cdc_task+0x160>
          }
          continue;
        }

        // Handle backspace
        if (c == '\b' || c == 127) {
 80006b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d003      	beq.n	80006c0 <cdc_task+0x80>
 80006b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80006be:	d114      	bne.n	80006ea <cdc_task+0xaa>
          if (cmd_index > 0 && !streaming_active) {
 80006c0:	4b4a      	ldr	r3, [pc, #296]	@ (80007ec <cdc_task+0x1ac>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d068      	beq.n	800079a <cdc_task+0x15a>
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <cdc_task+0x1a0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d061      	beq.n	800079a <cdc_task+0x15a>
            cmd_index--;
 80006d6:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <cdc_task+0x1ac>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <cdc_task+0x1ac>)
 80006e0:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006e2:	4843      	ldr	r0, [pc, #268]	@ (80007f0 <cdc_task+0x1b0>)
 80006e4:	f000 f88c 	bl	8000800 <cdc_write_string_chunked>
          if (cmd_index > 0 && !streaming_active) {
 80006e8:	e057      	b.n	800079a <cdc_task+0x15a>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ee:	2b0d      	cmp	r3, #13
 80006f0:	d003      	beq.n	80006fa <cdc_task+0xba>
 80006f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d124      	bne.n	8000744 <cdc_task+0x104>
          if (!streaming_active) {
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <cdc_task+0x1a0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d04a      	beq.n	800079e <cdc_task+0x15e>
            cdc_write_string_chunked("\r\n");
 8000708:	483a      	ldr	r0, [pc, #232]	@ (80007f4 <cdc_task+0x1b4>)
 800070a:	f000 f879 	bl	8000800 <cdc_write_string_chunked>
            cmd_buffer[cmd_index] = '\0';
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <cdc_task+0x1ac>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b38      	ldr	r3, [pc, #224]	@ (80007f8 <cdc_task+0x1b8>)
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]

            if (cmd_index > 0) {
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <cdc_task+0x1ac>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <cdc_task+0xee>
              process_command(cmd_buffer);
 8000722:	4835      	ldr	r0, [pc, #212]	@ (80007f8 <cdc_task+0x1b8>)
 8000724:	f000 f9d4 	bl	8000ad0 <process_command>
              cmd_index = 0;
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <cdc_task+0x1ac>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
            }

            if (!streaming_active) {
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <cdc_task+0x1a0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	f083 0301 	eor.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d030      	beq.n	800079e <cdc_task+0x15e>
              cdc_write_string_chunked("Ready> ");
 800073c:	482a      	ldr	r0, [pc, #168]	@ (80007e8 <cdc_task+0x1a8>)
 800073e:	f000 f85f 	bl	8000800 <cdc_write_string_chunked>
          if (!streaming_active) {
 8000742:	e02c      	b.n	800079e <cdc_task+0x15e>
            }
          }
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1 && !streaming_active) {
 8000744:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000748:	2b1f      	cmp	r3, #31
 800074a:	d929      	bls.n	80007a0 <cdc_task+0x160>
 800074c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000750:	2b7e      	cmp	r3, #126	@ 0x7e
 8000752:	d825      	bhi.n	80007a0 <cdc_task+0x160>
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <cdc_task+0x1ac>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b3e      	cmp	r3, #62	@ 0x3e
 800075a:	d821      	bhi.n	80007a0 <cdc_task+0x160>
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <cdc_task+0x1a0>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d01a      	beq.n	80007a0 <cdc_task+0x160>
          cmd_buffer[cmd_index++] = c;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <cdc_task+0x1ac>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	b2d1      	uxtb	r1, r2
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <cdc_task+0x1ac>)
 8000774:	7011      	strb	r1, [r2, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800077c:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <cdc_task+0x1b8>)
 800077e:	5499      	strb	r1, [r3, r2]
 8000780:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000786:	2301      	movs	r3, #1
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 800078a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800078c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800078e:	2000      	movs	r0, #0
 8000790:	f006 fabc 	bl	8006d0c <tud_cdc_n_write>
 8000794:	e004      	b.n	80007a0 <cdc_task+0x160>
          continue;
 8000796:	bf00      	nop
 8000798:	e002      	b.n	80007a0 <cdc_task+0x160>
          if (cmd_index > 0 && !streaming_active) {
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <cdc_task+0x160>
          if (!streaming_active) {
 800079e:	bf00      	nop
      for (uint32_t i = 0; i < count; i++) {
 80007a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007a2:	3301      	adds	r3, #1
 80007a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80007a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007aa:	429a      	cmp	r2, r3
 80007ac:	f4ff af69 	bcc.w	8000682 <cdc_task+0x42>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      if (!streaming_active) {
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <cdc_task+0x1a0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <cdc_task+0x196>
        cdc_write_flush_wait();
 80007be:	f000 f86a 	bl	8000896 <cdc_write_flush_wait>
    // Reset flags when disconnected
    cmd_index = 0;
    streaming_active = false;
    cycle_count_on = 0;
  }
}
 80007c2:	e008      	b.n	80007d6 <cdc_task+0x196>
    cmd_index = 0;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <cdc_task+0x1ac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    streaming_active = false;
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <cdc_task+0x1a0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
    cycle_count_on = 0;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <cdc_task+0x1bc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3760      	adds	r7, #96	@ 0x60
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002fd 	.word	0x200002fd
 80007e4:	0800e06c 	.word	0x0800e06c
 80007e8:	0800e084 	.word	0x0800e084
 80007ec:	200002fc 	.word	0x200002fc
 80007f0:	0800e08c 	.word	0x0800e08c
 80007f4:	0800e090 	.word	0x0800e090
 80007f8:	200002bc 	.word	0x200002bc
 80007fc:	20000cf8 	.word	0x20000cf8

08000800 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if (!str)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d03f      	beq.n	800088e <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fcf0 	bl	80001f4 <strlen>
 8000814:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 800081a:	2338      	movs	r3, #56	@ 0x38
 800081c:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 800081e:	e031      	b.n	8000884 <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4293      	cmp	r3, r2
 800082a:	bf28      	it	cs
 800082c:	4613      	movcs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000830:	e005      	b.n	800083e <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000832:	2100      	movs	r1, #0
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f008 fb76 	bl	8008f28 <tud_task_ext>
}
 800083c:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 800083e:	2000      	movs	r0, #0
 8000840:	f006 fb1a 	bl	8006e78 <tud_cdc_n_write_available>
 8000844:	4602      	mov	r2, r0
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4293      	cmp	r3, r2
 800084a:	d8f2      	bhi.n	8000832 <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	2000      	movs	r0, #0
 800085e:	f006 fa55 	bl	8006d0c <tud_cdc_n_write>
    sent += to_send;
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4413      	add	r3, r2
 8000868:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f006 fb04 	bl	8006e78 <tud_cdc_n_write_available>
 8000870:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4293      	cmp	r3, r2
 8000876:	d803      	bhi.n	8000880 <cdc_write_string_chunked+0x80>
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	429a      	cmp	r2, r3
 800087e:	d301      	bcc.n	8000884 <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 8000880:	f000 f809 	bl	8000896 <cdc_write_flush_wait>
  while (sent < len) {
 8000884:	69fa      	ldr	r2, [r7, #28]
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3c9      	bcc.n	8000820 <cdc_write_string_chunked+0x20>
 800088c:	e000      	b.n	8000890 <cdc_write_string_chunked+0x90>
    return;
 800088e:	bf00      	nop
    }
  }
}
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f006 fa69 	bl	8006d74 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008a6:	e008      	b.n	80008ba <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 80008a8:	2100      	movs	r1, #0
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295
 80008ae:	f008 fb3b 	bl	8008f28 <tud_task_ext>
}
 80008b2:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f006 fadc 	bl	8006e78 <tud_cdc_n_write_available>
 80008c0:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80008c4:	d804      	bhi.n	80008d0 <cdc_write_flush_wait+0x3a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d9eb      	bls.n	80008a8 <cdc_write_flush_wait+0x12>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <start_streaming>:

static void start_streaming(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  streaming_active = true;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <start_streaming+0x20>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
  last_stream_time = HAL_GetTick();
 80008e2:	f003 fb43 	bl	8003f6c <HAL_GetTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <start_streaming+0x24>)
 80008ec:	601a      	str	r2, [r3, #0]
  cdc_write_string_chunked("Starting ADC stream (Press Ctrl+C to stop)...\r\n");
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <start_streaming+0x28>)
 80008f0:	f7ff ff86 	bl	8000800 <cdc_write_string_chunked>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200002fd 	.word	0x200002fd
 80008fc:	20000300 	.word	0x20000300
 8000900:	0800e094 	.word	0x0800e094

08000904 <stop_streaming>:

static void stop_streaming(void) {
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  streaming_active = false;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <stop_streaming+0x14>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200002fd 	.word	0x200002fd

0800091c <handle_streaming>:

static void handle_streaming(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000922:	af00      	add	r7, sp, #0
  if (!streaming_active || !tud_cdc_connected()) {
 8000924:	4b64      	ldr	r3, [pc, #400]	@ (8000ab8 <handle_streaming+0x19c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 80bc 	bne.w	8000aac <handle_streaming+0x190>
  return tud_cdc_n_connected(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f006 f969 	bl	8006c0c <tud_cdc_n_connected>
 800093a:	4603      	mov	r3, r0
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 80b2 	bne.w	8000aac <handle_streaming+0x190>
    return;
  }

  uint32_t current_time = HAL_GetTick();
 8000948:	f003 fb10 	bl	8003f6c <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
 800094e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  // Check if it's time to send data (1ms interval for ~1kHz)
  if (current_time - last_stream_time >= STREAM_INTERVAL_MS) {
 8000952:	4b5a      	ldr	r3, [pc, #360]	@ (8000abc <handle_streaming+0x1a0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2201      	movs	r2, #1
 800095e:	4293      	cmp	r3, r2
 8000960:	f0c0 80a5 	bcc.w	8000aae <handle_streaming+0x192>
    last_stream_time = current_time;
 8000964:	4a55      	ldr	r2, [pc, #340]	@ (8000abc <handle_streaming+0x1a0>)
 8000966:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800096a:	6013      	str	r3, [r2, #0]

    // Build CSV string with all keyboard_keys state.value data
    char csv_buffer[512];
    int pos = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

    // Iterate through the keyboard_keys array and collect state.value for each key
    bool first = true;
 8000972:	2301      	movs	r3, #1
 8000974:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 800097e:	e063      	b.n	8000a48 <handle_streaming+0x12c>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000986:	e04f      	b.n	8000a28 <handle_streaming+0x10c>
        if (!first) {
 8000988:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800098c:	f083 0301 	eor.w	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d011      	beq.n	80009ba <handle_streaming+0x9e>
          pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, ",");
 8000996:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800099a:	463a      	mov	r2, r7
 800099c:	18d0      	adds	r0, r2, r3
 800099e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009a2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80009a6:	4a46      	ldr	r2, [pc, #280]	@ (8000ac0 <handle_streaming+0x1a4>)
 80009a8:	4619      	mov	r1, r3
 80009aa:	f00c f9fd 	bl	800cda8 <sniprintf>
 80009ae:	4602      	mov	r2, r0
 80009b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009b4:	4413      	add	r3, r2
 80009b6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        }
        first = false;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

        // Get the state.value from the current key
        uint16_t value = keyboard_keys[adc_ch][amux_ch].state.value;
 80009c0:	f897 1212 	ldrb.w	r1, [r7, #530]	@ 0x212
 80009c4:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009c8:	483e      	ldr	r0, [pc, #248]	@ (8000ac4 <handle_streaming+0x1a8>)
 80009ca:	461a      	mov	r2, r3
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	441a      	add	r2, r3
 80009d0:	0093      	lsls	r3, r2, #2
 80009d2:	461a      	mov	r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	440b      	add	r3, r1
 80009da:	019b      	lsls	r3, r3, #6
 80009dc:	4413      	add	r3, r2
 80009de:	4403      	add	r3, r0
 80009e0:	3328      	adds	r3, #40	@ 0x28
 80009e2:	79da      	ldrb	r2, [r3, #7]
 80009e4:	7a1b      	ldrb	r3, [r3, #8]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	4313      	orrs	r3, r2
 80009ea:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
        pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "%u", value);
 80009ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009f2:	463a      	mov	r2, r7
 80009f4:	18d0      	adds	r0, r2, r3
 80009f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009fa:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80009fe:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000a02:	4a31      	ldr	r2, [pc, #196]	@ (8000ac8 <handle_streaming+0x1ac>)
 8000a04:	f00c f9d0 	bl	800cda8 <sniprintf>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a0e:	4413      	add	r3, r2
 8000a10:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

        // Safety check to prevent buffer overflow
        if (pos >= sizeof(csv_buffer) - 10) {
 8000a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a18:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000a1c:	d209      	bcs.n	8000a32 <handle_streaming+0x116>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000a1e:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000a22:	3301      	adds	r3, #1
 8000a24:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000a28:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d9ab      	bls.n	8000988 <handle_streaming+0x6c>
 8000a30:	e000      	b.n	8000a34 <handle_streaming+0x118>
          break;
 8000a32:	bf00      	nop
        }
      }
      if (pos >= sizeof(csv_buffer) - 10) {
 8000a34:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a38:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000a3c:	d209      	bcs.n	8000a52 <handle_streaming+0x136>
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000a3e:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8000a42:	3301      	adds	r3, #1
 8000a44:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 8000a48:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d097      	beq.n	8000980 <handle_streaming+0x64>
 8000a50:	e000      	b.n	8000a54 <handle_streaming+0x138>
        break;
 8000a52:	bf00      	nop
      }
    }

    // Add newline
    pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "\r\n");
 8000a54:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a58:	463a      	mov	r2, r7
 8000a5a:	18d0      	adds	r0, r2, r3
 8000a5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a60:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <handle_streaming+0x1b0>)
 8000a66:	4619      	mov	r1, r3
 8000a68:	f00c f99e 	bl	800cda8 <sniprintf>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a72:	4413      	add	r3, r2
 8000a74:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  return tud_cdc_n_write_available(0);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f006 f9fd 	bl	8006e78 <tud_cdc_n_write_available>
 8000a7e:	4602      	mov	r2, r0

    // Send the CSV data
    if (tud_cdc_write_available() >= pos) {
 8000a80:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d312      	bcc.n	8000aae <handle_streaming+0x192>
      tud_cdc_write(csv_buffer, pos);
 8000a88:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a8c:	463a      	mov	r2, r7
 8000a8e:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8000a92:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  return tud_cdc_n_write(0, buffer, bufsize);
 8000a96:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8000a9a:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f006 f934 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f006 f965 	bl	8006d74 <tud_cdc_n_write_flush>
 8000aaa:	e000      	b.n	8000aae <handle_streaming+0x192>
    return;
 8000aac:	bf00      	nop
      tud_cdc_write_flush();
    }
  }
}
 8000aae:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002fd 	.word	0x200002fd
 8000abc:	20000300 	.word	0x20000300
 8000ac0:	0800e0c4 	.word	0x0800e0c4
 8000ac4:	20000310 	.word	0x20000310
 8000ac8:	0800e0c8 	.word	0x0800e0c8
 8000acc:	0800e090 	.word	0x0800e090

08000ad0 <process_command>:

static void process_command(char *cmd) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	@ 0x58
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8000adc:	e018      	b.n	8000b10 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 8000ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b40      	cmp	r3, #64	@ 0x40
 8000ae8:	d90f      	bls.n	8000b0a <process_command+0x3a>
 8000aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b5a      	cmp	r3, #90	@ 0x5a
 8000af4:	d809      	bhi.n	8000b0a <process_command+0x3a>
      cmd[i] += 32;
 8000af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	440b      	add	r3, r1
 8000b04:	3220      	adds	r2, #32
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 8000b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1e0      	bne.n	8000ade <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 8000b1c:	49ad      	ldr	r1, [pc, #692]	@ (8000dd4 <process_command+0x304>)
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f00c f9e6 	bl	800cef0 <strtok>
 8000b24:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8194 	beq.w	8000e56 <process_command+0x386>
    return;

  if (strcmp(token, "help") == 0) {
 8000b2e:	49aa      	ldr	r1, [pc, #680]	@ (8000dd8 <process_command+0x308>)
 8000b30:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b32:	f7ff fb55 	bl	80001e0 <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <process_command+0x72>
    print_help();
 8000b3c:	f000 f99a 	bl	8000e74 <print_help>
 8000b40:	e18a      	b.n	8000e58 <process_command+0x388>
  } else if (strcmp(token, "show") == 0) {
 8000b42:	49a6      	ldr	r1, [pc, #664]	@ (8000ddc <process_command+0x30c>)
 8000b44:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b46:	f7ff fb4b 	bl	80001e0 <strcmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <process_command+0x86>
    print_config();
 8000b50:	f000 f9d6 	bl	8000f00 <print_config>
 8000b54:	e180      	b.n	8000e58 <process_command+0x388>
  } else if (strcmp(token, "stream") == 0) {
 8000b56:	49a2      	ldr	r1, [pc, #648]	@ (8000de0 <process_command+0x310>)
 8000b58:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b5a:	f7ff fb41 	bl	80001e0 <strcmp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <process_command+0x9a>
    start_streaming();
 8000b64:	f7ff feb8 	bl	80008d8 <start_streaming>
 8000b68:	e176      	b.n	8000e58 <process_command+0x388>
  } else if (strcmp(token, "set") == 0) {
 8000b6a:	499e      	ldr	r1, [pc, #632]	@ (8000de4 <process_command+0x314>)
 8000b6c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b6e:	f7ff fb37 	bl	80001e0 <strcmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d118      	bne.n	8000baa <process_command+0xda>
    char *param = strtok(NULL, " ");
 8000b78:	4996      	ldr	r1, [pc, #600]	@ (8000dd4 <process_command+0x304>)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f00c f9b8 	bl	800cef0 <strtok>
 8000b80:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 8000b82:	4994      	ldr	r1, [pc, #592]	@ (8000dd4 <process_command+0x304>)
 8000b84:	2000      	movs	r0, #0
 8000b86:	f00c f9b3 	bl	800cef0 <strtok>
 8000b8a:	6138      	str	r0, [r7, #16]
    if (param && value) {
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <process_command+0xd2>
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <process_command+0xd2>
      set_config_value(param, value);
 8000b98:	6939      	ldr	r1, [r7, #16]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f000 fa04 	bl	8000fa8 <set_config_value>
 8000ba0:	e15a      	b.n	8000e58 <process_command+0x388>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000ba2:	4891      	ldr	r0, [pc, #580]	@ (8000de8 <process_command+0x318>)
 8000ba4:	f7ff fe2c 	bl	8000800 <cdc_write_string_chunked>
 8000ba8:	e156      	b.n	8000e58 <process_command+0x388>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000baa:	4990      	ldr	r1, [pc, #576]	@ (8000dec <process_command+0x31c>)
 8000bac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000bae:	f7ff fb17 	bl	80001e0 <strcmp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11c      	bne.n	8000bf2 <process_command+0x122>
    char *layer_str = strtok(NULL, " ");
 8000bb8:	4986      	ldr	r1, [pc, #536]	@ (8000dd4 <process_command+0x304>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f00c f998 	bl	800cef0 <strtok>
 8000bc0:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d010      	beq.n	8000bea <process_command+0x11a>
      uint8_t layer = atoi(layer_str);
 8000bc8:	69f8      	ldr	r0, [r7, #28]
 8000bca:	f00b ffa2 	bl	800cb12 <atoi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 8000bd2:	7efb      	ldrb	r3, [r7, #27]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d804      	bhi.n	8000be2 <process_command+0x112>
        print_keymap(layer);
 8000bd8:	7efb      	ldrb	r3, [r7, #27]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fa88 	bl	80010f0 <print_keymap>
 8000be0:	e13a      	b.n	8000e58 <process_command+0x388>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 8000be2:	4883      	ldr	r0, [pc, #524]	@ (8000df0 <process_command+0x320>)
 8000be4:	f7ff fe0c 	bl	8000800 <cdc_write_string_chunked>
 8000be8:	e136      	b.n	8000e58 <process_command+0x388>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000bea:	4882      	ldr	r0, [pc, #520]	@ (8000df4 <process_command+0x324>)
 8000bec:	f7ff fe08 	bl	8000800 <cdc_write_string_chunked>
 8000bf0:	e132      	b.n	8000e58 <process_command+0x388>
    }
  } else if (strcmp(token, "setkey") == 0) {
 8000bf2:	4981      	ldr	r1, [pc, #516]	@ (8000df8 <process_command+0x328>)
 8000bf4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000bf6:	f7ff faf3 	bl	80001e0 <strcmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d154      	bne.n	8000caa <process_command+0x1da>
    char *layer_str = strtok(NULL, " ");
 8000c00:	4974      	ldr	r1, [pc, #464]	@ (8000dd4 <process_command+0x304>)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f00c f974 	bl	800cef0 <strtok>
 8000c08:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000c0a:	4972      	ldr	r1, [pc, #456]	@ (8000dd4 <process_command+0x304>)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f00c f96f 	bl	800cef0 <strtok>
 8000c12:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000c14:	496f      	ldr	r1, [pc, #444]	@ (8000dd4 <process_command+0x304>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f00c f96a 	bl	800cef0 <strtok>
 8000c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 8000c1e:	496d      	ldr	r1, [pc, #436]	@ (8000dd4 <process_command+0x304>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f00c f965 	bl	800cef0 <strtok>
 8000c26:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d039      	beq.n	8000ca2 <process_command+0x1d2>
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d036      	beq.n	8000ca2 <process_command+0x1d2>
 8000c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d033      	beq.n	8000ca2 <process_command+0x1d2>
 8000c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d030      	beq.n	8000ca2 <process_command+0x1d2>
      uint8_t layer = atoi(layer_str);
 8000c40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c42:	f00b ff66 	bl	800cb12 <atoi>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 8000c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000c4e:	f00b ff60 	bl	800cb12 <atoi>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 8000c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c5a:	f00b ff5a 	bl	800cb12 <atoi>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 8000c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c66:	f00b ff54 	bl	800cb12 <atoi>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d811      	bhi.n	8000c9a <process_command+0x1ca>
 8000c76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d80d      	bhi.n	8000c9a <process_command+0x1ca>
 8000c7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d809      	bhi.n	8000c9a <process_command+0x1ca>
        set_keymap_value(layer, row, col, value);
 8000c86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c88:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000c8c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000c90:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000c94:	f000 fb72 	bl	800137c <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 8000c98:	e0de      	b.n	8000e58 <process_command+0x388>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000c9a:	4858      	ldr	r0, [pc, #352]	@ (8000dfc <process_command+0x32c>)
 8000c9c:	f7ff fdb0 	bl	8000800 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 8000ca0:	e0da      	b.n	8000e58 <process_command+0x388>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000ca2:	4857      	ldr	r0, [pc, #348]	@ (8000e00 <process_command+0x330>)
 8000ca4:	f7ff fdac 	bl	8000800 <cdc_write_string_chunked>
 8000ca8:	e0d6      	b.n	8000e58 <process_command+0x388>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000caa:	4956      	ldr	r1, [pc, #344]	@ (8000e04 <process_command+0x334>)
 8000cac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000cae:	f7ff fa97 	bl	80001e0 <strcmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8082 	bne.w	8000dbe <process_command+0x2ee>
    char *layer_str = strtok(NULL, " ");
 8000cba:	4946      	ldr	r1, [pc, #280]	@ (8000dd4 <process_command+0x304>)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f00c f917 	bl	800cef0 <strtok>
 8000cc2:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000cc4:	4943      	ldr	r1, [pc, #268]	@ (8000dd4 <process_command+0x304>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f00c f912 	bl	800cef0 <strtok>
 8000ccc:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000cce:	4941      	ldr	r1, [pc, #260]	@ (8000dd4 <process_command+0x304>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f00c f90d 	bl	800cef0 <strtok>
 8000cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d06b      	beq.n	8000db6 <process_command+0x2e6>
 8000cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d068      	beq.n	8000db6 <process_command+0x2e6>
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d065      	beq.n	8000db6 <process_command+0x2e6>
      uint8_t layer = atoi(layer_str);
 8000cea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000cec:	f00b ff11 	bl	800cb12 <atoi>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000cf6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000cf8:	f00b ff0b 	bl	800cb12 <atoi>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000d02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000d04:	f00b ff05 	bl	800cb12 <atoi>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000d0e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d84b      	bhi.n	8000dae <process_command+0x2de>
 8000d16:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d847      	bhi.n	8000dae <process_command+0x2de>
 8000d1e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d843      	bhi.n	8000dae <process_command+0x2de>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000d2c:	4929      	ldr	r1, [pc, #164]	@ (8000dd4 <process_command+0x304>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f00c f8de 	bl	800cef0 <strtok>
 8000d34:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000d36:	e015      	b.n	8000d64 <process_command+0x294>
          values[value_count] = atoi(value_str);
 8000d38:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000d3a:	f00b feea 	bl	800cb12 <atoi>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d44:	b292      	uxth	r2, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	3358      	adds	r3, #88	@ 0x58
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000d50:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d54:	3301      	adds	r3, #1
 8000d56:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000d5a:	491e      	ldr	r1, [pc, #120]	@ (8000dd4 <process_command+0x304>)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f00c f8c7 	bl	800cef0 <strtok>
 8000d62:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d011      	beq.n	8000d8e <process_command+0x2be>
 8000d6a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d9e2      	bls.n	8000d38 <process_command+0x268>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000d72:	e00c      	b.n	8000d8e <process_command+0x2be>
          values[value_count] = ____;
 8000d74:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	3358      	adds	r3, #88	@ 0x58
 8000d7c:	443b      	add	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000d84:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000d8e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d9ee      	bls.n	8000d74 <process_command+0x2a4>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000d9e:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000da2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000da6:	f000 fb45 	bl	8001434 <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000daa:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000dac:	e054      	b.n	8000e58 <process_command+0x388>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000dae:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <process_command+0x32c>)
 8000db0:	f7ff fd26 	bl	8000800 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000db4:	e050      	b.n	8000e58 <process_command+0x388>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <process_command+0x338>)
 8000db8:	f7ff fd22 	bl	8000800 <cdc_write_string_chunked>
 8000dbc:	e04c      	b.n	8000e58 <process_command+0x388>
    }
  } else if (strcmp(token, "save") == 0) {
 8000dbe:	4913      	ldr	r1, [pc, #76]	@ (8000e0c <process_command+0x33c>)
 8000dc0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000dc2:	f7ff fa0d 	bl	80001e0 <strcmp>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d121      	bne.n	8000e10 <process_command+0x340>
    save_config();
 8000dcc:	f000 fbd8 	bl	8001580 <save_config>
 8000dd0:	e042      	b.n	8000e58 <process_command+0x388>
 8000dd2:	bf00      	nop
 8000dd4:	0800e0cc 	.word	0x0800e0cc
 8000dd8:	0800e0d0 	.word	0x0800e0d0
 8000ddc:	0800e0d8 	.word	0x0800e0d8
 8000de0:	0800e0e0 	.word	0x0800e0e0
 8000de4:	0800e0e8 	.word	0x0800e0e8
 8000de8:	0800e0ec 	.word	0x0800e0ec
 8000dec:	0800e110 	.word	0x0800e110
 8000df0:	0800e118 	.word	0x0800e118
 8000df4:	0800e130 	.word	0x0800e130
 8000df8:	0800e148 	.word	0x0800e148
 8000dfc:	0800e150 	.word	0x0800e150
 8000e00:	0800e170 	.word	0x0800e170
 8000e04:	0800e19c 	.word	0x0800e19c
 8000e08:	0800e1a8 	.word	0x0800e1a8
 8000e0c:	0800e1f4 	.word	0x0800e1f4
  } else if (strcmp(token, "load") == 0) {
 8000e10:	4913      	ldr	r1, [pc, #76]	@ (8000e60 <process_command+0x390>)
 8000e12:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000e14:	f7ff f9e4 	bl	80001e0 <strcmp>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <process_command+0x354>
    load_config();
 8000e1e:	f000 fbc3 	bl	80015a8 <load_config>
 8000e22:	e019      	b.n	8000e58 <process_command+0x388>
  } else if (strcmp(token, "reset") == 0) {
 8000e24:	490f      	ldr	r1, [pc, #60]	@ (8000e64 <process_command+0x394>)
 8000e26:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000e28:	f7ff f9da 	bl	80001e0 <strcmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <process_command+0x368>
    reset_config();
 8000e32:	f000 fbc5 	bl	80015c0 <reset_config>
 8000e36:	e00f      	b.n	8000e58 <process_command+0x388>
  } else if (strcmp(token, "cycle") == 0) {
 8000e38:	490b      	ldr	r1, [pc, #44]	@ (8000e68 <process_command+0x398>)
 8000e3a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000e3c:	f7ff f9d0 	bl	80001e0 <strcmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <process_command+0x37e>
    cycle_count_on = 1;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <process_command+0x39c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e004      	b.n	8000e58 <process_command+0x388>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000e4e:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <process_command+0x3a0>)
 8000e50:	f7ff fcd6 	bl	8000800 <cdc_write_string_chunked>
 8000e54:	e000      	b.n	8000e58 <process_command+0x388>
    return;
 8000e56:	bf00      	nop
  }
}
 8000e58:	3758      	adds	r7, #88	@ 0x58
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800e1fc 	.word	0x0800e1fc
 8000e64:	0800e204 	.word	0x0800e204
 8000e68:	0800e20c 	.word	0x0800e20c
 8000e6c:	20000cf8 	.word	0x20000cf8
 8000e70:	0800e214 	.word	0x0800e214

08000e74 <print_help>:

static void print_help(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000e78:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <print_help+0x58>)
 8000e7a:	f7ff fcc1 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000e7e:	4814      	ldr	r0, [pc, #80]	@ (8000ed0 <print_help+0x5c>)
 8000e80:	f7ff fcbe 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000e84:	4813      	ldr	r0, [pc, #76]	@ (8000ed4 <print_help+0x60>)
 8000e86:	f7ff fcbb 	bl	8000800 <cdc_write_string_chunked>
  //  cdc_write_string_chunked("  stream                  - Start streaming ADC values (Ctrl+C to stop)\r\n");
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000e8a:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <print_help+0x64>)
 8000e8c:	f7ff fcb8 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000e90:	4812      	ldr	r0, [pc, #72]	@ (8000edc <print_help+0x68>)
 8000e92:	f7ff fcb5 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000e96:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <print_help+0x6c>)
 8000e98:	f7ff fcb2 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000e9c:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <print_help+0x70>)
 8000e9e:	f7ff fcaf 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000ea2:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <print_help+0x74>)
 8000ea4:	f7ff fcac 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000ea8:	4810      	ldr	r0, [pc, #64]	@ (8000eec <print_help+0x78>)
 8000eaa:	f7ff fca9 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000eae:	4810      	ldr	r0, [pc, #64]	@ (8000ef0 <print_help+0x7c>)
 8000eb0:	f7ff fca6 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000eb4:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <print_help+0x80>)
 8000eb6:	f7ff fca3 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000eba:	480f      	ldr	r0, [pc, #60]	@ (8000ef8 <print_help+0x84>)
 8000ebc:	f7ff fca0 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, tap_timeout\r\n");
 8000ec0:	480e      	ldr	r0, [pc, #56]	@ (8000efc <print_help+0x88>)
 8000ec2:	f7ff fc9d 	bl	8000800 <cdc_write_string_chunked>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800e24c 	.word	0x0800e24c
 8000ed0:	0800e264 	.word	0x0800e264
 8000ed4:	0800e294 	.word	0x0800e294
 8000ed8:	0800e2d0 	.word	0x0800e2d0
 8000edc:	0800e30c 	.word	0x0800e30c
 8000ee0:	0800e340 	.word	0x0800e340
 8000ee4:	0800e384 	.word	0x0800e384
 8000ee8:	0800e3fc 	.word	0x0800e3fc
 8000eec:	0800e438 	.word	0x0800e438
 8000ef0:	0800e474 	.word	0x0800e474
 8000ef4:	0800e4ac 	.word	0x0800e4ac
 8000ef8:	0800e4bc 	.word	0x0800e4bc
 8000efc:	0800e4f8 	.word	0x0800e4f8

08000f00 <print_config>:

static void print_config(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0a0      	sub	sp, #128	@ 0x80
 8000f04:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000f06:	4820      	ldr	r0, [pc, #128]	@ (8000f88 <print_config+0x88>)
 8000f08:	f7ff fc7a 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <print_config+0x8c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4638      	mov	r0, r7
 8000f12:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <print_config+0x90>)
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	f00b ff47 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc6f 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <print_config+0x8c>)
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	4638      	mov	r0, r7
 8000f28:	4a1a      	ldr	r2, [pc, #104]	@ (8000f94 <print_config+0x94>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	f00b ff3c 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fc64 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <print_config+0x8c>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <print_config+0x98>)
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	f00b ff31 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fc59 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <print_config+0x8c>)
 8000f50:	78db      	ldrb	r3, [r3, #3]
 8000f52:	4638      	mov	r0, r7
 8000f54:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <print_config+0x9c>)
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	f00b ff26 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc4e 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <print_config+0x8c>)
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	4638      	mov	r0, r7
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <print_config+0xa0>)
 8000f6c:	2180      	movs	r1, #128	@ 0x80
 8000f6e:	f00b ff1b 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000f72:	463b      	mov	r3, r7
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc43 	bl	8000800 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000f7a:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <print_config+0xa4>)
 8000f7c:	f7ff fc40 	bl	8000800 <cdc_write_string_chunked>
}
 8000f80:	bf00      	nop
 8000f82:	3780      	adds	r7, #128	@ 0x80
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800e520 	.word	0x0800e520
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	0800e53c 	.word	0x0800e53c
 8000f94:	0800e558 	.word	0x0800e558
 8000f98:	0800e570 	.word	0x0800e570
 8000f9c:	0800e588 	.word	0x0800e588
 8000fa0:	0800e5a8 	.word	0x0800e5a8
 8000fa4:	0800e5bc 	.word	0x0800e5bc

08000fa8 <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f00b fdad 	bl	800cb12 <atoi>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000fbc:	4940      	ldr	r1, [pc, #256]	@ (80010c0 <set_config_value+0x118>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f90e 	bl	80001e0 <strcmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <set_config_value+0x11c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <set_config_value+0x11c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f107 000c 	add.w	r0, r7, #12
 8000fda:	4a3b      	ldr	r2, [pc, #236]	@ (80010c8 <set_config_value+0x120>)
 8000fdc:	2140      	movs	r1, #64	@ 0x40
 8000fde:	f00b fee3 	bl	800cda8 <sniprintf>
 8000fe2:	e05e      	b.n	80010a2 <set_config_value+0xfa>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000fe4:	4939      	ldr	r1, [pc, #228]	@ (80010cc <set_config_value+0x124>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff f8fa 	bl	80001e0 <strcmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <set_config_value+0x74>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b33      	ldr	r3, [pc, #204]	@ (80010c4 <set_config_value+0x11c>)
 8000ff8:	705a      	strb	r2, [r3, #1]
    keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000ffa:	f240 2206 	movw	r2, #518	@ 0x206
 8000ffe:	2100      	movs	r1, #0
 8001000:	4830      	ldr	r0, [pc, #192]	@ (80010c4 <set_config_value+0x11c>)
 8001002:	f002 f88f 	bl	8003124 <keyboard_write_config>
    keyboard_init_keys();
 8001006:	f001 f987 	bl	8002318 <keyboard_init_keys>
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 800100a:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <set_config_value+0x11c>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	f107 000c 	add.w	r0, r7, #12
 8001012:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <set_config_value+0x128>)
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	f00b fec7 	bl	800cda8 <sniprintf>
 800101a:	e042      	b.n	80010a2 <set_config_value+0xfa>
  } else if (strcmp(param, "reset_threshold") == 0) {
 800101c:	492d      	ldr	r1, [pc, #180]	@ (80010d4 <set_config_value+0x12c>)
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff f8de 	bl	80001e0 <strcmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <set_config_value+0x9c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 800102a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <set_config_value+0x11c>)
 8001030:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <set_config_value+0x11c>)
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	f107 000c 	add.w	r0, r7, #12
 800103a:	4a27      	ldr	r2, [pc, #156]	@ (80010d8 <set_config_value+0x130>)
 800103c:	2140      	movs	r1, #64	@ 0x40
 800103e:	f00b feb3 	bl	800cda8 <sniprintf>
 8001042:	e02e      	b.n	80010a2 <set_config_value+0xfa>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8001044:	4925      	ldr	r1, [pc, #148]	@ (80010dc <set_config_value+0x134>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <set_config_value+0xc4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8001052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <set_config_value+0x11c>)
 8001058:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <set_config_value+0x11c>)
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	f107 000c 	add.w	r0, r7, #12
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <set_config_value+0x138>)
 8001064:	2140      	movs	r1, #64	@ 0x40
 8001066:	f00b fe9f 	bl	800cda8 <sniprintf>
 800106a:	e01a      	b.n	80010a2 <set_config_value+0xfa>
  } else if (strcmp(param, "tap_timeout") == 0) {
 800106c:	491d      	ldr	r1, [pc, #116]	@ (80010e4 <set_config_value+0x13c>)
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f8b6 	bl	80001e0 <strcmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <set_config_value+0xec>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 800107a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <set_config_value+0x11c>)
 8001080:	809a      	strh	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <set_config_value+0x11c>)
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <set_config_value+0x140>)
 800108c:	2140      	movs	r1, #64	@ 0x40
 800108e:	f00b fe8b 	bl	800cda8 <sniprintf>
 8001092:	e006      	b.n	80010a2 <set_config_value+0xfa>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8001094:	f107 000c 	add.w	r0, r7, #12
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <set_config_value+0x144>)
 800109c:	2140      	movs	r1, #64	@ 0x40
 800109e:	f00b fe83 	bl	800cda8 <sniprintf>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80010a2:	f240 2206 	movw	r2, #518	@ 0x206
 80010a6:	2100      	movs	r1, #0
 80010a8:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <set_config_value+0x11c>)
 80010aa:	f002 f83b 	bl	8003124 <keyboard_write_config>
  cdc_write_string_chunked(buffer);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fba4 	bl	8000800 <cdc_write_string_chunked>
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	@ 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0800e5e4 	.word	0x0800e5e4
 80010c4:	20000000 	.word	0x20000000
 80010c8:	0800e5f8 	.word	0x0800e5f8
 80010cc:	0800e618 	.word	0x0800e618
 80010d0:	0800e628 	.word	0x0800e628
 80010d4:	0800e644 	.word	0x0800e644
 80010d8:	0800e654 	.word	0x0800e654
 80010dc:	0800e670 	.word	0x0800e670
 80010e0:	0800e688 	.word	0x0800e688
 80010e4:	0800e6ac 	.word	0x0800e6ac
 80010e8:	0800e6b8 	.word	0x0800e6b8
 80010ec:	0800e6d0 	.word	0x0800e6d0

080010f0 <print_keymap>:

static void print_keymap(uint8_t layer) {
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4602      	mov	r2, r0
 80010fa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010fe:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001102:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8001104:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001108:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 8001112:	4a91      	ldr	r2, [pc, #580]	@ (8001358 <print_keymap+0x268>)
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	f00b fe47 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 800111a:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb6e 	bl	8000800 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 800112a:	e109      	b.n	8001340 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8001132:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	18d0      	adds	r0, r2, r3
 800113c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001140:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8001144:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8001148:	4a84      	ldr	r2, [pc, #528]	@ (800135c <print_keymap+0x26c>)
 800114a:	f00b fe2d 	bl	800cda8 <sniprintf>
 800114e:	4602      	mov	r2, r0
 8001150:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001154:	4413      	add	r3, r2
 8001156:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800115a:	2300      	movs	r3, #0
 800115c:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001160:	e0cc      	b.n	80012fc <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 800116e:	e020      	b.n	80011b2 <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8001170:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001174:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001178:	7818      	ldrb	r0, [r3, #0]
 800117a:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 800117e:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8001182:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8001186:	4c76      	ldr	r4, [pc, #472]	@ (8001360 <print_keymap+0x270>)
 8001188:	0080      	lsls	r0, r0, #2
 800118a:	4401      	add	r1, r0
 800118c:	0089      	lsls	r1, r1, #2
 800118e:	440a      	add	r2, r1
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4413      	add	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4423      	add	r3, r4
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <print_keymap+0xb8>
          macro_count++;
 800119e:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 80011a2:	3301      	adds	r3, #1
 80011a4:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011a8:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 80011ac:	3301      	adds	r3, #1
 80011ae:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 80011b2:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d9da      	bls.n	8001170 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 80011ba:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d973      	bls.n	80012aa <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 80011c2:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	18d0      	adds	r0, r2, r3
 80011cc:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011d0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80011d4:	4a63      	ldr	r2, [pc, #396]	@ (8001364 <print_keymap+0x274>)
 80011d6:	4619      	mov	r1, r3
 80011d8:	f00b fde6 	bl	800cda8 <sniprintf>
 80011dc:	4602      	mov	r2, r0
 80011de:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011e2:	4413      	add	r3, r2
 80011e4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 80011ee:	e044      	b.n	800127a <print_keymap+0x18a>
          if (i > 0)
 80011f0:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d012      	beq.n	800121e <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 80011f8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011fc:	f107 020c 	add.w	r2, r7, #12
 8001200:	18d0      	adds	r0, r2, r3
 8001202:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001206:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800120a:	4a57      	ldr	r2, [pc, #348]	@ (8001368 <print_keymap+0x278>)
 800120c:	4619      	mov	r1, r3
 800120e:	f00b fdcb 	bl	800cda8 <sniprintf>
 8001212:	4602      	mov	r2, r0
 8001214:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001218:	4413      	add	r3, r2
 800121a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 800121e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	18d4      	adds	r4, r2, r3
 8001228:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800122c:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8001230:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001234:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001238:	7818      	ldrb	r0, [r3, #0]
 800123a:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 800123e:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8001242:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8001246:	4e46      	ldr	r6, [pc, #280]	@ (8001360 <print_keymap+0x270>)
 8001248:	0080      	lsls	r0, r0, #2
 800124a:	4401      	add	r1, r0
 800124c:	0089      	lsls	r1, r1, #2
 800124e:	440a      	add	r2, r1
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4433      	add	r3, r6
 8001258:	88db      	ldrh	r3, [r3, #6]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 800125a:	4a44      	ldr	r2, [pc, #272]	@ (800136c <print_keymap+0x27c>)
 800125c:	4629      	mov	r1, r5
 800125e:	4620      	mov	r0, r4
 8001260:	f00b fda2 	bl	800cda8 <sniprintf>
 8001264:	4602      	mov	r2, r0
 8001266:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800126a:	4413      	add	r3, r2
 800126c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001270:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8001274:	3301      	adds	r3, #1
 8001276:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 800127a:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800127e:	2b03      	cmp	r3, #3
 8001280:	d9b6      	bls.n	80011f0 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 8001282:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001286:	f107 020c 	add.w	r2, r7, #12
 800128a:	18d0      	adds	r0, r2, r3
 800128c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001290:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001294:	4a36      	ldr	r2, [pc, #216]	@ (8001370 <print_keymap+0x280>)
 8001296:	4619      	mov	r1, r3
 8001298:	f00b fd86 	bl	800cda8 <sniprintf>
 800129c:	4602      	mov	r2, r0
 800129e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80012a2:	4413      	add	r3, r2
 80012a4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80012a8:	e023      	b.n	80012f2 <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 80012aa:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80012ae:	f107 020c 	add.w	r2, r7, #12
 80012b2:	18d0      	adds	r0, r2, r3
 80012b4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80012b8:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 80012bc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80012c0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80012c4:	7819      	ldrb	r1, [r3, #0]
 80012c6:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 80012ca:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 80012ce:	4d24      	ldr	r5, [pc, #144]	@ (8001360 <print_keymap+0x270>)
 80012d0:	0089      	lsls	r1, r1, #2
 80012d2:	440a      	add	r2, r1
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	442b      	add	r3, r5
 80012dc:	88db      	ldrh	r3, [r3, #6]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 80012de:	4a25      	ldr	r2, [pc, #148]	@ (8001374 <print_keymap+0x284>)
 80012e0:	4621      	mov	r1, r4
 80012e2:	f00b fd61 	bl	800cda8 <sniprintf>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80012ec:	4413      	add	r3, r2
 80012ee:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80012f2:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 80012f6:	3301      	adds	r3, #1
 80012f8:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 80012fc:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001300:	2b03      	cmp	r3, #3
 8001302:	f67f af2e 	bls.w	8001162 <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 8001306:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800130a:	f107 020c 	add.w	r2, r7, #12
 800130e:	18d0      	adds	r0, r2, r3
 8001310:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001314:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001318:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <print_keymap+0x288>)
 800131a:	4619      	mov	r1, r3
 800131c:	f00b fd44 	bl	800cda8 <sniprintf>
 8001320:	4602      	mov	r2, r0
 8001322:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001326:	4413      	add	r3, r2
 8001328:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fa65 	bl	8000800 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001336:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800133a:	3301      	adds	r3, #1
 800133c:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8001340:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8001344:	2b03      	cmp	r3, #3
 8001346:	f67f aef1 	bls.w	800112c <print_keymap+0x3c>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	bf00      	nop
 8001358:	0800e6e8 	.word	0x0800e6e8
 800135c:	0800e700 	.word	0x0800e700
 8001360:	20000000 	.word	0x20000000
 8001364:	0800e70c 	.word	0x0800e70c
 8001368:	0800e0c4 	.word	0x0800e0c4
 800136c:	0800e0c8 	.word	0x0800e0c8
 8001370:	0800e710 	.word	0x0800e710
 8001374:	0800e714 	.word	0x0800e714
 8001378:	0800e090 	.word	0x0800e090

0800137c <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b099      	sub	sp, #100	@ 0x64
 8001380:	af04      	add	r7, sp, #16
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4603      	mov	r3, r0
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	717b      	strb	r3, [r7, #5]
 8001396:	4613      	mov	r3, r2
 8001398:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 800139a:	79f9      	ldrb	r1, [r7, #7]
 800139c:	79ba      	ldrb	r2, [r7, #6]
 800139e:	797b      	ldrb	r3, [r7, #5]
 80013a0:	4822      	ldr	r0, [pc, #136]	@ (800142c <set_keymap_value+0xb0>)
 80013a2:	0089      	lsls	r1, r1, #2
 80013a4:	440a      	add	r2, r1
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4403      	add	r3, r0
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	80da      	strh	r2, [r3, #6]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80013b8:	e014      	b.n	80013e4 <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 80013ba:	79f8      	ldrb	r0, [r7, #7]
 80013bc:	79b9      	ldrb	r1, [r7, #6]
 80013be:	797a      	ldrb	r2, [r7, #5]
 80013c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013c4:	4c19      	ldr	r4, [pc, #100]	@ (800142c <set_keymap_value+0xb0>)
 80013c6:	0080      	lsls	r0, r0, #2
 80013c8:	4401      	add	r1, r0
 80013ca:	0089      	lsls	r1, r1, #2
 80013cc:	440a      	add	r2, r1
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4423      	add	r3, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 80013da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013de:	3301      	adds	r3, #1
 80013e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80013e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d9e6      	bls.n	80013ba <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80013ec:	f240 2206 	movw	r2, #518	@ 0x206
 80013f0:	2100      	movs	r1, #0
 80013f2:	480e      	ldr	r0, [pc, #56]	@ (800142c <set_keymap_value+0xb0>)
 80013f4:	f001 fe96 	bl	8003124 <keyboard_write_config>
  keyboard_init_keys();
 80013f8:	f000 ff8e 	bl	8002318 <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 80013fc:	79fc      	ldrb	r4, [r7, #7]
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	797a      	ldrb	r2, [r7, #5]
 8001402:	8879      	ldrh	r1, [r7, #2]
 8001404:	f107 000c 	add.w	r0, r7, #12
 8001408:	9102      	str	r1, [sp, #8]
 800140a:	9201      	str	r2, [sp, #4]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4623      	mov	r3, r4
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <set_keymap_value+0xb4>)
 8001412:	2140      	movs	r1, #64	@ 0x40
 8001414:	f00b fcc8 	bl	800cda8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f9ef 	bl	8000800 <cdc_write_string_chunked>
}
 8001422:	bf00      	nop
 8001424:	3754      	adds	r7, #84	@ 0x54
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	0800e71c 	.word	0x0800e71c

08001434 <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b0a8      	sub	sp, #160	@ 0xa0
 8001438:	af02      	add	r7, sp, #8
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
 8001444:	4613      	mov	r3, r2
 8001446:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800144e:	e01a      	b.n	8001486 <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 8001450:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	18d4      	adds	r4, r2, r3
 800145a:	79f8      	ldrb	r0, [r7, #7]
 800145c:	79b9      	ldrb	r1, [r7, #6]
 800145e:	797a      	ldrb	r2, [r7, #5]
 8001460:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001464:	8825      	ldrh	r5, [r4, #0]
 8001466:	4c41      	ldr	r4, [pc, #260]	@ (800156c <set_macro_keymap_value+0x138>)
 8001468:	0080      	lsls	r0, r0, #2
 800146a:	4401      	add	r1, r0
 800146c:	0089      	lsls	r1, r1, #2
 800146e:	440a      	add	r2, r1
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4423      	add	r3, r4
 8001478:	462a      	mov	r2, r5
 800147a:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 800147c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001480:	3301      	adds	r3, #1
 8001482:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8001486:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800148a:	2b03      	cmp	r3, #3
 800148c:	d9e0      	bls.n	8001450 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 800148e:	f240 2206 	movw	r2, #518	@ 0x206
 8001492:	2100      	movs	r1, #0
 8001494:	4835      	ldr	r0, [pc, #212]	@ (800156c <set_macro_keymap_value+0x138>)
 8001496:	f001 fe45 	bl	8003124 <keyboard_write_config>
  keyboard_init_keys();
 800149a:	f000 ff3d 	bl	8002318 <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 800149e:	79f9      	ldrb	r1, [r7, #7]
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	797a      	ldrb	r2, [r7, #5]
 80014a4:	f107 000c 	add.w	r0, r7, #12
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	460b      	mov	r3, r1
 80014ae:	4a30      	ldr	r2, [pc, #192]	@ (8001570 <set_macro_keymap_value+0x13c>)
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	f00b fc79 	bl	800cda8 <sniprintf>
 80014b6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80014c0:	e033      	b.n	800152a <set_macro_keymap_value+0xf6>
    if (i > 0)
 80014c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d012      	beq.n	80014f0 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 80014ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	18d0      	adds	r0, r2, r3
 80014d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014d8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80014dc:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <set_macro_keymap_value+0x140>)
 80014de:	4619      	mov	r1, r3
 80014e0:	f00b fc62 	bl	800cda8 <sniprintf>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014ea:	4413      	add	r3, r2
 80014ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 80014f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014f4:	f107 020c 	add.w	r2, r7, #12
 80014f8:	18d0      	adds	r0, r2, r3
 80014fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014fe:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8001502:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4a1a      	ldr	r2, [pc, #104]	@ (8001578 <set_macro_keymap_value+0x144>)
 8001510:	f00b fc4a 	bl	800cda8 <sniprintf>
 8001514:	4602      	mov	r2, r0
 8001516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800151a:	4413      	add	r3, r2
 800151c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001520:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001524:	3301      	adds	r3, #1
 8001526:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800152a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800152e:	2b03      	cmp	r3, #3
 8001530:	d9c7      	bls.n	80014c2 <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 8001532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	18d0      	adds	r0, r2, r3
 800153c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001540:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <set_macro_keymap_value+0x148>)
 8001546:	4619      	mov	r1, r3
 8001548:	f00b fc2e 	bl	800cda8 <sniprintf>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001552:	4413      	add	r3, r2
 8001554:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f94f 	bl	8000800 <cdc_write_string_chunked>
}
 8001562:	bf00      	nop
 8001564:	3798      	adds	r7, #152	@ 0x98
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000
 8001570:	0800e73c 	.word	0x0800e73c
 8001574:	0800e760 	.word	0x0800e760
 8001578:	0800e0c8 	.word	0x0800e0c8
 800157c:	0800e764 	.word	0x0800e764

08001580 <save_config>:

static void save_config(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001584:	f240 2206 	movw	r2, #518	@ 0x206
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <save_config+0x20>)
 800158c:	f001 fdca 	bl	8003124 <keyboard_write_config>
  keyboard_init_keys();
 8001590:	f000 fec2 	bl	8002318 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <save_config+0x24>)
 8001596:	f7ff f933 	bl	8000800 <cdc_write_string_chunked>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000000 	.word	0x20000000
 80015a4:	0800e768 	.word	0x0800e768

080015a8 <load_config>:

static void load_config(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 80015ac:	f001 fda8 	bl	8003100 <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <load_config+0x14>)
 80015b2:	f7ff f925 	bl	8000800 <cdc_write_string_chunked>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800e788 	.word	0x0800e788

080015c0 <reset_config>:

static void reset_config(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 80015c4:	f240 2206 	movw	r2, #518	@ 0x206
 80015c8:	2100      	movs	r1, #0
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <reset_config+0x24>)
 80015cc:	f001 fdaa 	bl	8003124 <keyboard_write_config>
  keyboard_read_config();
 80015d0:	f001 fd96 	bl	8003100 <keyboard_read_config>
  keyboard_init_keys();
 80015d4:	f000 fea0 	bl	8002318 <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <reset_config+0x28>)
 80015da:	f7ff f911 	bl	8000800 <cdc_write_string_chunked>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	0800e8fc 	.word	0x0800e8fc
 80015e8:	0800e7ac 	.word	0x0800e7ac

080015ec <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	460b      	mov	r3, r1
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d015      	beq.n	8001630 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e002      	b.n	8001610 <tud_cdc_line_state_cb+0x24>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001616:	4293      	cmp	r3, r2
 8001618:	ddf7      	ble.n	800160a <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <tud_cdc_line_state_cb+0x4c>)
 800161c:	f7ff f8f0 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001620:	4806      	ldr	r0, [pc, #24]	@ (800163c <tud_cdc_line_state_cb+0x50>)
 8001622:	f7ff f8ed 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <tud_cdc_line_state_cb+0x54>)
 8001628:	f7ff f8ea 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 800162c:	f7ff f933 	bl	8000896 <cdc_write_flush_wait>
  }
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800e7d0 	.word	0x0800e7d0
 800163c:	0800e7fc 	.word	0x0800e7fc
 8001640:	0800e084 	.word	0x0800e084

08001644 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <hid_task+0x8c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <hid_task+0x16>
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <hid_task+0x90>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d035      	beq.n	80016de <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8001672:	2000      	movs	r0, #0
 8001674:	f005 ffb6 	bl	80075e4 <tud_hid_n_ready>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02f      	beq.n	80016de <hid_task+0x82>
    if (tud_suspended()) {
 800167e:	f007 facd 	bl	8008c1c <tud_suspended>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <hid_task+0x32>
      tud_remote_wakeup();
 8001688:	f007 fadc 	bl	8008c44 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 800168c:	e027      	b.n	80016de <hid_task+0x82>
      if (should_send_consumer_report) {
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <hid_task+0x8c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00f      	beq.n	80016b6 <hid_task+0x5a>
        should_send_consumer_report = 0;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <hid_task+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	2302      	movs	r3, #2
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <hid_task+0x94>)
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	2302      	movs	r3, #2
 80016a6:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	7bf9      	ldrb	r1, [r7, #15]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	2000      	movs	r0, #0
 80016b0:	f005 ffda 	bl	8007668 <tud_hid_n_report>
 80016b4:	e013      	b.n	80016de <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <hid_task+0x90>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00f      	beq.n	80016de <hid_task+0x82>
        should_send_keyboard_report = 0;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <hid_task+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <hid_task+0x98>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	717a      	strb	r2, [r7, #5]
 80016cc:	713b      	strb	r3, [r7, #4]
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <hid_task+0x9c>)
 80016d0:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 80016d2:	793a      	ldrb	r2, [r7, #4]
 80016d4:	7979      	ldrb	r1, [r7, #5]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2000      	movs	r0, #0
 80016da:	f006 f84b 	bl	8007774 <tud_hid_n_keyboard_report>
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000304 	.word	0x20000304
 80016ec:	20000305 	.word	0x20000305
 80016f0:	2000030e 	.word	0x2000030e
 80016f4:	20000306 	.word	0x20000306
 80016f8:	20000308 	.word	0x20000308

080016fc <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	440b      	add	r3, r1
 8001714:	3305      	adds	r3, #5
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	2b03      	cmp	r3, #3
 800171c:	f200 80f7 	bhi.w	800190e <hid_press_key+0x212>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <hid_press_key+0x2c>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800175f 	.word	0x0800175f
 800172c:	08001739 	.word	0x08001739
 8001730:	0800179f 	.word	0x0800179f
 8001734:	080017bd 	.word	0x080017bd
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	440b      	add	r3, r1
 8001744:	88db      	ldrh	r3, [r3, #6]
 8001746:	b29b      	uxth	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b74      	ldr	r3, [pc, #464]	@ (800191c <hid_press_key+0x220>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b72      	ldr	r3, [pc, #456]	@ (800191c <hid_press_key+0x220>)
 8001754:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <hid_press_key+0x224>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
    break;
 800175c:	e0da      	b.n	8001914 <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e018      	b.n	8001796 <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	4a6f      	ldr	r2, [pc, #444]	@ (8001924 <hid_press_key+0x228>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d110      	bne.n	8001790 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	440b      	add	r3, r1
 800177a:	88db      	ldrh	r3, [r3, #6]
 800177c:	b29a      	uxth	r2, r3
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	b2d1      	uxtb	r1, r2
 8001782:	4a68      	ldr	r2, [pc, #416]	@ (8001924 <hid_press_key+0x228>)
 8001784:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8001786:	4b66      	ldr	r3, [pc, #408]	@ (8001920 <hid_press_key+0x224>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
        break;
 800178c:	bf00      	nop
      }
    }
    break;
 800178e:	e0c1      	b.n	8001914 <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	3301      	adds	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d9e3      	bls.n	8001764 <hid_press_key+0x68>
    break;
 800179c:	e0ba      	b.n	8001914 <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	88db      	ldrh	r3, [r3, #6]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <hid_press_key+0x22c>)
 80017b2:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 80017b4:	4b5d      	ldr	r3, [pc, #372]	@ (800192c <hid_press_key+0x230>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
    break;
 80017ba:	e0ab      	b.n	8001914 <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	757b      	strb	r3, [r7, #21]
 80017c4:	e025      	b.n	8001812 <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	7d7b      	ldrb	r3, [r7, #21]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	0058      	lsls	r0, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	4403      	add	r3, r0
 80017d6:	440b      	add	r3, r1
 80017d8:	88db      	ldrh	r3, [r3, #6]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	0058      	lsls	r0, r3, #1
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	4403      	add	r3, r0
 80017f0:	440b      	add	r3, r1
 80017f2:	88db      	ldrh	r3, [r3, #6]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f9a0 	bl	8001b3c <get_bitmask_for_modifier>
 80017fc:	4603      	mov	r3, r0
 80017fe:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001800:	7b7b      	ldrb	r3, [r7, #13]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	3301      	adds	r3, #1
 800180a:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 800180c:	7d7b      	ldrb	r3, [r7, #21]
 800180e:	3301      	adds	r3, #1
 8001810:	757b      	strb	r3, [r7, #21]
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d9d6      	bls.n	80017c6 <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 800181c:	2300      	movs	r3, #0
 800181e:	74fb      	strb	r3, [r7, #19]
 8001820:	e00a      	b.n	8001838 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 8001822:	7cfb      	ldrb	r3, [r7, #19]
 8001824:	4a3f      	ldr	r2, [pc, #252]	@ (8001924 <hid_press_key+0x228>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <hid_press_key+0x136>
        start_slot = i;
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	753b      	strb	r3, [r7, #20]
        break;
 8001830:	e005      	b.n	800183e <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	3301      	adds	r3, #1
 8001836:	74fb      	strb	r3, [r7, #19]
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d9f1      	bls.n	8001822 <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	747b      	strb	r3, [r7, #17]
 8001846:	e00a      	b.n	800185e <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 8001848:	7c7b      	ldrb	r3, [r7, #17]
 800184a:	4a36      	ldr	r2, [pc, #216]	@ (8001924 <hid_press_key+0x228>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <hid_press_key+0x16a>
        available_slots++;
 8001852:	7cbb      	ldrb	r3, [r7, #18]
 8001854:	3301      	adds	r3, #1
 8001856:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001858:	7c7b      	ldrb	r3, [r7, #17]
 800185a:	3301      	adds	r3, #1
 800185c:	747b      	strb	r3, [r7, #17]
 800185e:	7c7b      	ldrb	r3, [r7, #17]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d9f1      	bls.n	8001848 <hid_press_key+0x14c>
 8001864:	e000      	b.n	8001868 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 8001866:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 8001868:	7cba      	ldrb	r2, [r7, #18]
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	429a      	cmp	r2, r3
 800186e:	d350      	bcc.n	8001912 <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001874:	7d3b      	ldrb	r3, [r7, #20]
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e042      	b.n	8001900 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	0058      	lsls	r0, r3, #1
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	4403      	add	r3, r0
 800188a:	440b      	add	r3, r1
 800188c:	88db      	ldrh	r3, [r3, #6]
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d032      	beq.n	80018fa <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	7c3b      	ldrb	r3, [r7, #16]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	0058      	lsls	r0, r3, #1
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	4403      	add	r3, r0
 80018a4:	440b      	add	r3, r1
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f946 	bl	8001b3c <get_bitmask_for_modifier>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <hid_press_key+0x220>)
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <hid_press_key+0x220>)
 80018c6:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <hid_press_key+0x224>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e014      	b.n	80018fa <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	7c3b      	ldrb	r3, [r7, #16]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	0058      	lsls	r0, r3, #1
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	4403      	add	r3, r0
 80018e0:	440b      	add	r3, r1
 80018e2:	88db      	ldrh	r3, [r3, #6]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	b2d1      	uxtb	r1, r2
 80018ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <hid_press_key+0x228>)
 80018ec:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <hid_press_key+0x224>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80018fa:	7c3b      	ldrb	r3, [r7, #16]
 80018fc:	3301      	adds	r3, #1
 80018fe:	743b      	strb	r3, [r7, #16]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d805      	bhi.n	8001912 <hid_press_key+0x216>
 8001906:	7c3b      	ldrb	r3, [r7, #16]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d9b6      	bls.n	800187a <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 800190c:	e001      	b.n	8001912 <hid_press_key+0x216>

  default:
    break;
 800190e:	bf00      	nop
 8001910:	e000      	b.n	8001914 <hid_press_key+0x218>
    break;
 8001912:	bf00      	nop
  }
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000306 	.word	0x20000306
 8001920:	20000305 	.word	0x20000305
 8001924:	20000308 	.word	0x20000308
 8001928:	2000030e 	.word	0x2000030e
 800192c:	20000304 	.word	0x20000304

08001930 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	440b      	add	r3, r1
 8001948:	3305      	adds	r3, #5
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	2b03      	cmp	r3, #3
 8001950:	f200 80a7 	bhi.w	8001aa2 <hid_release_key+0x172>
 8001954:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <hid_release_key+0x2c>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800199b 	.word	0x0800199b
 8001960:	0800196d 	.word	0x0800196d
 8001964:	080019dd 	.word	0x080019dd
 8001968:	080019eb 	.word	0x080019eb
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	440b      	add	r3, r1
 8001978:	88db      	ldrh	r3, [r3, #6]
 800197a:	b29b      	uxth	r3, r3
 800197c:	b25b      	sxtb	r3, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	b25a      	sxtb	r2, r3
 8001982:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <hid_release_key+0x17c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4013      	ands	r3, r2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <hid_release_key+0x17c>)
 8001990:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <hid_release_key+0x180>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
    break;
 8001998:	e084      	b.n	8001aa4 <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e019      	b.n	80019d4 <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4a44      	ldr	r2, [pc, #272]	@ (8001ab4 <hid_release_key+0x184>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	4618      	mov	r0, r3
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	88db      	ldrh	r3, [r3, #6]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d108      	bne.n	80019ce <hid_release_key+0x9e>
        keycodes[i] = 0;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	4a3d      	ldr	r2, [pc, #244]	@ (8001ab4 <hid_release_key+0x184>)
 80019c0:	2100      	movs	r1, #0
 80019c2:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <hid_release_key+0x180>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
        break;
 80019ca:	bf00      	nop
      }
    }
    break;
 80019cc:	e06a      	b.n	8001aa4 <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	3301      	adds	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d9e2      	bls.n	80019a0 <hid_release_key+0x70>
    break;
 80019da:	e063      	b.n	8001aa4 <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <hid_release_key+0x188>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 80019e2:	4b36      	ldr	r3, [pc, #216]	@ (8001abc <hid_release_key+0x18c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
    break;
 80019e8:	e05c      	b.n	8001aa4 <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]
 80019ee:	e054      	b.n	8001a9a <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	0058      	lsls	r0, r3, #1
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	4403      	add	r3, r0
 8001a00:	440b      	add	r3, r1
 8001a02:	88db      	ldrh	r3, [r3, #6]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d044      	beq.n	8001a94 <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	0058      	lsls	r0, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	4403      	add	r3, r0
 8001a1a:	440b      	add	r3, r1
 8001a1c:	88db      	ldrh	r3, [r3, #6]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f88b 	bl	8001b3c <get_bitmask_for_modifier>
 8001a26:	4603      	mov	r3, r0
 8001a28:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001a2a:	7b3b      	ldrb	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00f      	beq.n	8001a50 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001a30:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <hid_release_key+0x17c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <hid_release_key+0x17c>)
 8001a46:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <hid_release_key+0x180>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e021      	b.n	8001a94 <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	737b      	strb	r3, [r7, #13]
 8001a54:	e01b      	b.n	8001a8e <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <hid_release_key+0x184>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	0058      	lsls	r0, r3, #1
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	440b      	add	r3, r1
 8001a70:	88db      	ldrh	r3, [r3, #6]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	429c      	cmp	r4, r3
 8001a76:	d107      	bne.n	8001a88 <hid_release_key+0x158>
              keycodes[i] = 0;
 8001a78:	7b7b      	ldrb	r3, [r7, #13]
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <hid_release_key+0x184>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <hid_release_key+0x180>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
              break;
 8001a86:	e005      	b.n	8001a94 <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	737b      	strb	r3, [r7, #13]
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d9e0      	bls.n	8001a56 <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	3301      	adds	r3, #1
 8001a98:	73bb      	strb	r3, [r7, #14]
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d9a7      	bls.n	80019f0 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 8001aa0:	e000      	b.n	8001aa4 <hid_release_key+0x174>

  default:
    break;
 8001aa2:	bf00      	nop
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	20000306 	.word	0x20000306
 8001ab0:	20000305 	.word	0x20000305
 8001ab4:	20000308 	.word	0x20000308
 8001ab8:	2000030e 	.word	0x2000030e
 8001abc:	20000304 	.word	0x20000304

08001ac0 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	460b      	mov	r3, r1
 8001b06:	71bb      	strb	r3, [r7, #6]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	460b      	mov	r3, r1
 8001b28:	71bb      	strb	r3, [r7, #6]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	3be0      	subs	r3, #224	@ 0xe0
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	d822      	bhi.n	8001b94 <get_bitmask_for_modifier+0x58>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <get_bitmask_for_modifier+0x18>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b75 	.word	0x08001b75
 8001b58:	08001b79 	.word	0x08001b79
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001b81 	.word	0x08001b81
 8001b64:	08001b85 	.word	0x08001b85
 8001b68:	08001b89 	.word	0x08001b89
 8001b6c:	08001b8d 	.word	0x08001b8d
 8001b70:	08001b91 	.word	0x08001b91
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e00e      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e00c      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e00a      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001b80:	2308      	movs	r3, #8
 8001b82:	e008      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001b84:	2310      	movs	r3, #16
 8001b86:	e006      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	e004      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001b8c:	2340      	movs	r3, #64	@ 0x40
 8001b8e:	e002      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	e000      	b.n	8001b96 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001b94:	2300      	movs	r3, #0
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2bff      	cmp	r3, #255	@ 0xff
 8001bb2:	d904      	bls.n	8001bbe <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	e000      	b.n	8001bc0 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001bbe:	2300      	movs	r3, #0
  }
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	4603      	mov	r3, r0
 8001be0:	71bb      	strb	r3, [r7, #6]
 8001be2:	460b      	mov	r3, r1
 8001be4:	717b      	strb	r3, [r7, #5]
 8001be6:	4613      	mov	r3, r2
 8001be8:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001bea:	79f9      	ldrb	r1, [r7, #7]
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	441a      	add	r2, r3
 8001bf4:	0093      	lsls	r3, r2, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	019b      	lsls	r3, r3, #6
 8001c00:	4413      	add	r3, r2
 8001c02:	4a8b      	ldr	r2, [pc, #556]	@ (8001e30 <init_key+0x264>)
 8001c04:	4413      	add	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2200      	movs	r2, #0
 8001c12:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	797a      	ldrb	r2, [r7, #5]
 8001c18:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	793a      	ldrb	r2, [r7, #4]
 8001c1e:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f042 0208 	orr.w	r2, r2, #8
 8001c36:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f042 0207 	orr.w	r2, r2, #7
 8001c40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f062 020b 	orn	r2, r2, #11
 8001c4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8001c50:	2200      	movs	r2, #0
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001c62:	4b74      	ldr	r3, [pc, #464]	@ (8001e34 <init_key+0x268>)
 8001c64:	785a      	ldrb	r2, [r3, #1]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001c6c:	4b71      	ldr	r3, [pc, #452]	@ (8001e34 <init_key+0x268>)
 8001c6e:	785a      	ldrb	r2, [r3, #1]
 8001c70:	4b70      	ldr	r3, [pc, #448]	@ (8001e34 <init_key+0x268>)
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e34 <init_key+0x268>)
 8001c80:	78da      	ldrb	r2, [r3, #3]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]
 8001c8c:	e0c6      	b.n	8001e1c <init_key+0x250>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8001c8e:	7df9      	ldrb	r1, [r7, #23]
 8001c90:	797a      	ldrb	r2, [r7, #5]
 8001c92:	793b      	ldrb	r3, [r7, #4]
 8001c94:	4867      	ldr	r0, [pc, #412]	@ (8001e34 <init_key+0x268>)
 8001c96:	0089      	lsls	r1, r1, #2
 8001c98:	440a      	add	r2, r1
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4403      	add	r3, r0
 8001ca2:	88db      	ldrh	r3, [r3, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b6 	beq.w	8001e16 <init_key+0x24a>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	757b      	strb	r3, [r7, #21]
 8001cb2:	e015      	b.n	8001ce0 <init_key+0x114>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001cb4:	7df8      	ldrb	r0, [r7, #23]
 8001cb6:	7979      	ldrb	r1, [r7, #5]
 8001cb8:	793a      	ldrb	r2, [r7, #4]
 8001cba:	7d7b      	ldrb	r3, [r7, #21]
 8001cbc:	4c5d      	ldr	r4, [pc, #372]	@ (8001e34 <init_key+0x268>)
 8001cbe:	0080      	lsls	r0, r0, #2
 8001cc0:	4401      	add	r1, r0
 8001cc2:	0089      	lsls	r1, r1, #2
 8001cc4:	440a      	add	r2, r1
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4423      	add	r3, r4
 8001cce:	88db      	ldrh	r3, [r3, #6]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <init_key+0x10e>
          macro_count++;
 8001cd4:	7dbb      	ldrb	r3, [r7, #22]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001cda:	7d7b      	ldrb	r3, [r7, #21]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	757b      	strb	r3, [r7, #21]
 8001ce0:	7d7b      	ldrb	r3, [r7, #21]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d9e6      	bls.n	8001cb4 <init_key+0xe8>
        }
      }

      if (macro_count > 1) {
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d92b      	bls.n	8001d44 <init_key+0x178>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001cec:	7dfa      	ldrb	r2, [r7, #23]
 8001cee:	6939      	ldr	r1, [r7, #16]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3305      	adds	r3, #5
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	753b      	strb	r3, [r7, #20]
 8001d02:	e01b      	b.n	8001d3c <init_key+0x170>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001d04:	7dfd      	ldrb	r5, [r7, #23]
 8001d06:	797c      	ldrb	r4, [r7, #5]
 8001d08:	7939      	ldrb	r1, [r7, #4]
 8001d0a:	7d3b      	ldrb	r3, [r7, #20]
 8001d0c:	7dfa      	ldrb	r2, [r7, #23]
 8001d0e:	7d38      	ldrb	r0, [r7, #20]
 8001d10:	4e48      	ldr	r6, [pc, #288]	@ (8001e34 <init_key+0x268>)
 8001d12:	00ad      	lsls	r5, r5, #2
 8001d14:	442c      	add	r4, r5
 8001d16:	00a4      	lsls	r4, r4, #2
 8001d18:	4421      	add	r1, r4
 8001d1a:	0089      	lsls	r1, r1, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4433      	add	r3, r6
 8001d22:	88dc      	ldrh	r4, [r3, #6]
 8001d24:	6939      	ldr	r1, [r7, #16]
 8001d26:	0040      	lsls	r0, r0, #1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4403      	add	r3, r0
 8001d30:	440b      	add	r3, r1
 8001d32:	4622      	mov	r2, r4
 8001d34:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001d36:	7d3b      	ldrb	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	753b      	strb	r3, [r7, #20]
 8001d3c:	7d3b      	ldrb	r3, [r7, #20]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d9e0      	bls.n	8001d04 <init_key+0x138>
 8001d42:	e068      	b.n	8001e16 <init_key+0x24a>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001d44:	7df9      	ldrb	r1, [r7, #23]
 8001d46:	797a      	ldrb	r2, [r7, #5]
 8001d48:	793b      	ldrb	r3, [r7, #4]
 8001d4a:	483a      	ldr	r0, [pc, #232]	@ (8001e34 <init_key+0x268>)
 8001d4c:	0089      	lsls	r1, r1, #2
 8001d4e:	440a      	add	r2, r1
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4403      	add	r3, r0
 8001d58:	88db      	ldrh	r3, [r3, #6]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff22 	bl	8001ba4 <get_usage_consumer_control>
 8001d60:	4603      	mov	r3, r0
 8001d62:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d011      	beq.n	8001d8e <init_key+0x1c2>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001d6a:	7dfa      	ldrb	r2, [r7, #23]
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	3305      	adds	r3, #5
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001d7c:	7dfa      	ldrb	r2, [r7, #23]
 8001d7e:	6939      	ldr	r1, [r7, #16]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	89fa      	ldrh	r2, [r7, #14]
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	e043      	b.n	8001e16 <init_key+0x24a>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001d8e:	7df9      	ldrb	r1, [r7, #23]
 8001d90:	797a      	ldrb	r2, [r7, #5]
 8001d92:	793b      	ldrb	r3, [r7, #4]
 8001d94:	4827      	ldr	r0, [pc, #156]	@ (8001e34 <init_key+0x268>)
 8001d96:	0089      	lsls	r1, r1, #2
 8001d98:	440a      	add	r2, r1
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4403      	add	r3, r0
 8001da2:	88db      	ldrh	r3, [r3, #6]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fec8 	bl	8001b3c <get_bitmask_for_modifier>
 8001dac:	4603      	mov	r3, r0
 8001dae:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001db0:	7b7b      	ldrb	r3, [r7, #13]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d013      	beq.n	8001dde <init_key+0x212>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001db6:	7dfa      	ldrb	r2, [r7, #23]
 8001db8:	6939      	ldr	r1, [r7, #16]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3305      	adds	r3, #5
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001dc8:	7dfa      	ldrb	r2, [r7, #23]
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	6939      	ldr	r1, [r7, #16]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	4602      	mov	r2, r0
 8001dda:	80da      	strh	r2, [r3, #6]
 8001ddc:	e01b      	b.n	8001e16 <init_key+0x24a>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001dde:	7dfa      	ldrb	r2, [r7, #23]
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	3305      	adds	r3, #5
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001df0:	7df8      	ldrb	r0, [r7, #23]
 8001df2:	7979      	ldrb	r1, [r7, #5]
 8001df4:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001df6:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001df8:	4c0e      	ldr	r4, [pc, #56]	@ (8001e34 <init_key+0x268>)
 8001dfa:	0080      	lsls	r0, r0, #2
 8001dfc:	4401      	add	r1, r0
 8001dfe:	0089      	lsls	r1, r1, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4423      	add	r3, r4
 8001e06:	88d8      	ldrh	r0, [r3, #6]
            key->layers[i].value[0] =
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	4602      	mov	r2, r0
 8001e14:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	f67f af35 	bls.w	8001c8e <init_key+0xc2>
          }
        }
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000310 	.word	0x20000310
 8001e34:	20000000 	.word	0x20000000

08001e38 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001e40:	4bab      	ldr	r3, [pc, #684]	@ (80020f0 <update_key_state+0x2b8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <update_key_state+0x20>
 8001e48:	f001 f9f4 	bl	8003234 <keyboard_read_adc>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001e52:	330f      	adds	r3, #15
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	e002      	b.n	8001e5e <update_key_state+0x26>
 8001e58:	f001 f9ec 	bl	8003234 <keyboard_read_adc>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b13      	cmp	r3, #19
 8001e6a:	d82f      	bhi.n	8001ecc <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001e6c:	4ba1      	ldr	r3, [pc, #644]	@ (80020f4 <update_key_state+0x2bc>)
 8001e6e:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	ee17 3a90 	vmov	r3, s15
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e10c      	b.n	80020e6 <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001ecc:	893a      	ldrh	r2, [r7, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d929      	bls.n	8001f2e <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001eda:	4b87      	ldr	r3, [pc, #540]	@ (80020f8 <update_key_state+0x2c0>)
 8001edc:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ee2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f18:	ee17 3a90 	vmov	r3, s15
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d117      	bne.n	8001f6a <update_key_state+0x132>
 8001f3a:	893b      	ldrh	r3, [r7, #8]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b0a      	subs	r3, #10
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	db0e      	blt.n	8001f6a <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	78db      	ldrb	r3, [r3, #3]
 8001f50:	2b0e      	cmp	r3, #14
 8001f52:	d904      	bls.n	8001f5e <update_key_state+0x126>
      key->is_idle = 1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	711a      	strb	r2, [r3, #4]
      return 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e0c3      	b.n	80020e6 <update_key_state+0x2ae>
    }
    key->idle_counter++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78db      	ldrb	r3, [r3, #3]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001f6a:	893b      	ldrh	r3, [r7, #8]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b0a      	subs	r3, #10
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	db06      	blt.n	8001f8a <update_key_state+0x152>
    state.distance = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001f88:	e00f      	b.n	8001faa <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	893b      	ldrh	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b0a      	subs	r3, #10
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001faa:	897a      	ldrh	r2, [r7, #10]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d903      	bls.n	8001fc0 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001fb8:	897a      	ldrh	r2, [r7, #10]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b3c      	subs	r3, #60	@ 0x3c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	db04      	blt.n	8001fdc <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001fdc:	897b      	ldrh	r3, [r7, #10]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8001fec:	b292      	uxth	r2, r2
 8001fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <update_key_state+0x2c0>)
 8001ff8:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002018:	edd7 7a06 	vldr	s15, [r7, #24]
 800201c:	ee06 3a90 	vmov	s13, r3
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8002030:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203c:	edc7 7a00 	vstr	s15, [r7]
 8002040:	783b      	ldrb	r3, [r7, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8002046:	7cba      	ldrb	r2, [r7, #18]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	b25b      	sxtb	r3, r3
 8002054:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd18      	ble.n	8002092 <update_key_state+0x25a>
 8002060:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002064:	2b00      	cmp	r3, #0
 8002066:	dd14      	ble.n	8002092 <update_key_state+0x25a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00f      	beq.n	8002092 <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8002090:	e01c      	b.n	80020cc <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8002098:	2b00      	cmp	r3, #0
 800209a:	da17      	bge.n	80020cc <update_key_state+0x294>
 800209c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da13      	bge.n	80020cc <update_key_state+0x294>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80020bc:	2bff      	cmp	r3, #255	@ 0xff
 80020be:	d005      	beq.n	80020cc <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	cb03      	ldmia	r3!, {r0, r1}
 80020d8:	6010      	str	r0, [r2, #0]
 80020da:	6051      	str	r1, [r2, #4]
 80020dc:	8819      	ldrh	r1, [r3, #0]
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	8111      	strh	r1, [r2, #8]
 80020e2:	7293      	strb	r3, [r2, #10]
  return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000
 80020f4:	3f19999a 	.word	0x3f19999a
 80020f8:	3f4ccccd 	.word	0x3f4ccccd

080020fc <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8002108:	f001 f8aa 	bl	8003260 <keyboard_get_time>
 800210c:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800211a:	429a      	cmp	r2, r3
 800211c:	bf8c      	ite	hi
 800211e:	2301      	movhi	r3, #1
 8002120:	2300      	movls	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002132:	429a      	cmp	r2, r3
 8002134:	bf34      	ite	cc
 8002136:	2301      	movcc	r3, #1
 8002138:	2300      	movcs	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002156:	4619      	mov	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4a5d      	ldr	r2, [pc, #372]	@ (80022e0 <update_key_actuation+0x1e4>)
 800216a:	7892      	ldrb	r2, [r2, #2]
 800216c:	4413      	add	r3, r2
 800216e:	4299      	cmp	r1, r3
 8002170:	bfcc      	ite	gt
 8002172:	2301      	movgt	r3, #1
 8002174:	2300      	movle	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002188:	4619      	mov	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002190:	1acb      	subs	r3, r1, r3
 8002192:	429a      	cmp	r2, r3
 8002194:	bfb4      	ite	lt
 8002196:	2301      	movlt	r3, #1
 8002198:	2300      	movge	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a4:	3b01      	subs	r3, #1
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	f200 808f 	bhi.w	80022ca <update_key_actuation+0x1ce>
 80021ac:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <update_key_actuation+0xb8>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	08002275 	.word	0x08002275
 80021b8:	08002287 	.word	0x08002287
 80021bc:	080021c5 	.word	0x080021c5
 80021c0:	08002203 	.word	0x08002203

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8081 	beq.w	80022ce <update_key_actuation+0x1d2>
      if (key->layers[_TAP_LAYER].value[0]) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80021e0:	e00b      	b.n	80021fa <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <update_key_actuation+0x1e8>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fa81 	bl	80016fc <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    break;
 8002200:	e065      	b.n	80022ce <update_key_actuation+0x1d2>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8002202:	7c7b      	ldrb	r3, [r7, #17]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <update_key_actuation+0x116>
      key->actuation.status = STATUS_RESET;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 8002210:	e062      	b.n	80022d8 <update_key_actuation+0x1dc>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d025      	beq.n	8002264 <update_key_actuation+0x168>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800221e:	2b01      	cmp	r3, #1
 8002220:	d120      	bne.n	8002264 <update_key_actuation+0x168>
 8002222:	7c3b      	ldrb	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01d      	beq.n	8002264 <update_key_actuation+0x168>
      if (key->layers[_TAP_LAYER].value[0]) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <update_key_actuation+0x148>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 800223c:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <update_key_actuation+0x1e8>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e00b      	b.n	800225c <update_key_actuation+0x160>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 800224c:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <update_key_actuation+0x1e8>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fa50 	bl	80016fc <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8002262:	e036      	b.n	80022d2 <update_key_actuation+0x1d6>
    } else if (is_before_reset_offset) {
 8002264:	7cbb      	ldrb	r3, [r7, #18]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d033      	beq.n	80022d2 <update_key_actuation+0x1d6>
      key->actuation.status = STATUS_RESET;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 8002272:	e02e      	b.n	80022d2 <update_key_actuation+0x1d6>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 800227c:	2101      	movs	r1, #1
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fb56 	bl	8001930 <hid_release_key>
    break;
 8002284:	e028      	b.n	80022d8 <update_key_actuation+0x1dc>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8002286:	7cbb      	ldrb	r3, [r7, #18]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <update_key_actuation+0x1a4>
      key->actuation.status = STATUS_RESET;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fb49 	bl	8001930 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 800229e:	e01a      	b.n	80022d6 <update_key_actuation+0x1da>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <update_key_actuation+0x1da>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d112      	bne.n	80022d6 <update_key_actuation+0x1da>
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00f      	beq.n	80022d6 <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fb34 	bl	8001930 <hid_release_key>
    break;
 80022c8:	e005      	b.n	80022d6 <update_key_actuation+0x1da>

  default:
    break;
 80022ca:	bf00      	nop
 80022cc:	e004      	b.n	80022d8 <update_key_actuation+0x1dc>
    break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <update_key_actuation+0x1dc>
    break;
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <update_key_actuation+0x1dc>
    break;
 80022d6:	bf00      	nop
  }
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000754 	.word	0x20000754

080022e8 <update_key>:

void update_key(struct key *key) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fda1 	bl	8001e38 <update_key_state>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <update_key+0x2c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fef9 	bl	80020fc <update_key_actuation>
 800230a:	e000      	b.n	800230e <update_key+0x26>
    return;
 800230c:	bf00      	nop
}
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000cf4 	.word	0x20000cf4

08002318 <keyboard_init_keys>:

void keyboard_init_keys() {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  	keyboard_read_config();
 800231e:	f000 feef 	bl	8003100 <keyboard_read_config>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002322:	2300      	movs	r3, #0
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	e027      	b.n	8002378 <keyboard_init_keys+0x60>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002328:	2300      	movs	r3, #0
 800232a:	71bb      	strb	r3, [r7, #6]
 800232c:	e01e      	b.n	800236c <keyboard_init_keys+0x54>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800232e:	79fa      	ldrb	r2, [r7, #7]
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	4915      	ldr	r1, [pc, #84]	@ (8002388 <keyboard_init_keys+0x70>)
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	4413      	add	r3, r2
 8002338:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800233c:	2bff      	cmp	r3, #255	@ 0xff
 800233e:	d012      	beq.n	8002366 <keyboard_init_keys+0x4e>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	4910      	ldr	r1, [pc, #64]	@ (8002388 <keyboard_init_keys+0x70>)
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4413      	add	r3, r2
 800234a:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <keyboard_init_keys+0x70>)
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	7859      	ldrb	r1, [r3, #1]
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	f7ff fc33 	bl	8001bcc <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	3301      	adds	r3, #1
 800236a:	71bb      	strb	r3, [r7, #6]
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d9dd      	bls.n	800232e <keyboard_init_keys+0x16>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	3301      	adds	r3, #1
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d9d4      	bls.n	8002328 <keyboard_init_keys+0x10>
      }
    }
  }
}
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800eb04 	.word	0x0800eb04

0800238c <keyboard_task>:

void keyboard_task() {
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002392:	f000 ff65 	bl	8003260 <keyboard_get_time>
 8002396:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8002398:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <keyboard_task+0x1a4>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e039      	b.n	8002418 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 ff00 	bl	80031ac <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80023ac:	2300      	movs	r3, #0
 80023ae:	73bb      	strb	r3, [r7, #14]
 80023b0:	e02c      	b.n	800240c <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80023b2:	7bb9      	ldrb	r1, [r7, #14]
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	485f      	ldr	r0, [pc, #380]	@ (8002534 <keyboard_task+0x1a8>)
 80023b8:	461a      	mov	r2, r3
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	441a      	add	r2, r3
 80023be:	0093      	lsls	r3, r2, #2
 80023c0:	461a      	mov	r2, r3
 80023c2:	460b      	mov	r3, r1
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	440b      	add	r3, r1
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	4413      	add	r3, r2
 80023cc:	4403      	add	r3, r0
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 ff10 	bl	80031fc <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80023dc:	7bb9      	ldrb	r1, [r7, #14]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	461a      	mov	r2, r3
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	441a      	add	r2, r3
 80023e6:	0093      	lsls	r3, r2, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	460b      	mov	r3, r1
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	440b      	add	r3, r1
 80023f0:	019b      	lsls	r3, r3, #6
 80023f2:	4413      	add	r3, r2
 80023f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002534 <keyboard_task+0x1a8>)
 80023f6:	4413      	add	r3, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff75 	bl	80022e8 <update_key>

      keyboard_close_adc();
 80023fe:	f000 ff25 	bl	800324c <keyboard_close_adc>
 8002402:	e000      	b.n	8002406 <keyboard_task+0x7a>
        continue;
 8002404:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002406:	7bbb      	ldrb	r3, [r7, #14]
 8002408:	3301      	adds	r3, #1
 800240a:	73bb      	strb	r3, [r7, #14]
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0cf      	beq.n	80023b2 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d9c2      	bls.n	80023a4 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800241e:	2300      	movs	r3, #0
 8002420:	737b      	strb	r3, [r7, #13]
 8002422:	e077      	b.n	8002514 <keyboard_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002424:	2300      	movs	r3, #0
 8002426:	733b      	strb	r3, [r7, #12]
 8002428:	e06e      	b.n	8002508 <keyboard_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800242a:	7b39      	ldrb	r1, [r7, #12]
 800242c:	7b7b      	ldrb	r3, [r7, #13]
 800242e:	4841      	ldr	r0, [pc, #260]	@ (8002534 <keyboard_task+0x1a8>)
 8002430:	461a      	mov	r2, r3
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	441a      	add	r2, r3
 8002436:	0093      	lsls	r3, r2, #2
 8002438:	461a      	mov	r2, r3
 800243a:	460b      	mov	r3, r1
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	440b      	add	r3, r1
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	4413      	add	r3, r2
 8002444:	4403      	add	r3, r0
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d059      	beq.n	8002500 <keyboard_task+0x174>
 800244c:	7b39      	ldrb	r1, [r7, #12]
 800244e:	7b7b      	ldrb	r3, [r7, #13]
 8002450:	4838      	ldr	r0, [pc, #224]	@ (8002534 <keyboard_task+0x1a8>)
 8002452:	461a      	mov	r2, r3
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	441a      	add	r2, r3
 8002458:	0093      	lsls	r3, r2, #2
 800245a:	461a      	mov	r2, r3
 800245c:	460b      	mov	r3, r1
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	440b      	add	r3, r1
 8002462:	019b      	lsls	r3, r3, #6
 8002464:	4413      	add	r3, r2
 8002466:	4403      	add	r3, r0
 8002468:	333c      	adds	r3, #60	@ 0x3c
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d147      	bne.n	8002500 <keyboard_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002470:	7b39      	ldrb	r1, [r7, #12]
 8002472:	7b7b      	ldrb	r3, [r7, #13]
 8002474:	461a      	mov	r2, r3
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	441a      	add	r2, r3
 800247a:	0093      	lsls	r3, r2, #2
 800247c:	461a      	mov	r2, r3
 800247e:	460b      	mov	r3, r1
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	4413      	add	r3, r2
 8002488:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <keyboard_task+0x1a8>)
 800248a:	4413      	add	r3, r2
 800248c:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249a:	429a      	cmp	r2, r3
 800249c:	bf34      	ite	cc
 800249e:	2301      	movcc	r3, #1
 80024a0:	2300      	movcs	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80024a6:	f000 fedb 	bl	8003260 <keyboard_get_time>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	4a21      	ldr	r2, [pc, #132]	@ (8002538 <keyboard_task+0x1ac>)
 80024b4:	8892      	ldrh	r2, [r2, #4]
 80024b6:	4293      	cmp	r3, r2
 80024b8:	bf94      	ite	ls
 80024ba:	2301      	movls	r3, #1
 80024bc:	2300      	movhi	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <keyboard_task+0x154>
 80024c8:	78bb      	ldrb	r3, [r7, #2]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <keyboard_task+0x154>
        key->actuation.status = STATUS_TAP;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 80024d6:	2101      	movs	r1, #1
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff f90f 	bl	80016fc <hid_press_key>
 80024de:	e010      	b.n	8002502 <keyboard_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 80024e0:	78bb      	ldrb	r3, [r7, #2]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <keyboard_task+0x162>
 80024e6:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <keyboard_task+0x1a4>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <keyboard_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 80024f6:	2100      	movs	r1, #0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff f8ff 	bl	80016fc <hid_press_key>
 80024fe:	e000      	b.n	8002502 <keyboard_task+0x176>
        continue;
 8002500:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002502:	7b3b      	ldrb	r3, [r7, #12]
 8002504:	3301      	adds	r3, #1
 8002506:	733b      	strb	r3, [r7, #12]
 8002508:	7b3b      	ldrb	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d08d      	beq.n	800242a <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800250e:	7b7b      	ldrb	r3, [r7, #13]
 8002510:	3301      	adds	r3, #1
 8002512:	737b      	strb	r3, [r7, #13]
 8002514:	7b7b      	ldrb	r3, [r7, #13]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d984      	bls.n	8002424 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800251a:	f000 fea1 	bl	8003260 <keyboard_get_time>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <keyboard_task+0x1b0>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000754 	.word	0x20000754
 8002534:	20000310 	.word	0x20000310
 8002538:	20000000 	.word	0x20000000
 800253c:	20000750 	.word	0x20000750

08002540 <snaptap_task>:

void snaptap_task() {
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002546:	f000 fe8b 	bl	8003260 <keyboard_get_time>
 800254a:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 800254c:	4b8b      	ldr	r3, [pc, #556]	@ (800277c <snaptap_task+0x23c>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002552:	2300      	movs	r3, #0
 8002554:	77fb      	strb	r3, [r7, #31]
 8002556:	e039      	b.n	80025cc <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fe26 	bl	80031ac <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002560:	2300      	movs	r3, #0
 8002562:	77bb      	strb	r3, [r7, #30]
 8002564:	e02c      	b.n	80025c0 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8002566:	7fb9      	ldrb	r1, [r7, #30]
 8002568:	7ffb      	ldrb	r3, [r7, #31]
 800256a:	4885      	ldr	r0, [pc, #532]	@ (8002780 <snaptap_task+0x240>)
 800256c:	461a      	mov	r2, r3
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	441a      	add	r2, r3
 8002572:	0093      	lsls	r3, r2, #2
 8002574:	461a      	mov	r2, r3
 8002576:	460b      	mov	r3, r1
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	440b      	add	r3, r1
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	4413      	add	r3, r2
 8002580:	4403      	add	r3, r0
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002588:	7fbb      	ldrb	r3, [r7, #30]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fe36 	bl	80031fc <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002590:	7fb9      	ldrb	r1, [r7, #30]
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	461a      	mov	r2, r3
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	441a      	add	r2, r3
 800259a:	0093      	lsls	r3, r2, #2
 800259c:	461a      	mov	r2, r3
 800259e:	460b      	mov	r3, r1
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	440b      	add	r3, r1
 80025a4:	019b      	lsls	r3, r3, #6
 80025a6:	4413      	add	r3, r2
 80025a8:	4a75      	ldr	r2, [pc, #468]	@ (8002780 <snaptap_task+0x240>)
 80025aa:	4413      	add	r3, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe9b 	bl	80022e8 <update_key>

      keyboard_close_adc();
 80025b2:	f000 fe4b 	bl	800324c <keyboard_close_adc>
 80025b6:	e000      	b.n	80025ba <snaptap_task+0x7a>
        continue;
 80025b8:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80025ba:	7fbb      	ldrb	r3, [r7, #30]
 80025bc:	3301      	adds	r3, #1
 80025be:	77bb      	strb	r3, [r7, #30]
 80025c0:	7fbb      	ldrb	r3, [r7, #30]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0cf      	beq.n	8002566 <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
 80025c8:	3301      	adds	r3, #1
 80025ca:	77fb      	strb	r3, [r7, #31]
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	d9c2      	bls.n	8002558 <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	777b      	strb	r3, [r7, #29]
 80025d6:	e077      	b.n	80026c8 <snaptap_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	773b      	strb	r3, [r7, #28]
 80025dc:	e06e      	b.n	80026bc <snaptap_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80025de:	7f39      	ldrb	r1, [r7, #28]
 80025e0:	7f7b      	ldrb	r3, [r7, #29]
 80025e2:	4867      	ldr	r0, [pc, #412]	@ (8002780 <snaptap_task+0x240>)
 80025e4:	461a      	mov	r2, r3
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	441a      	add	r2, r3
 80025ea:	0093      	lsls	r3, r2, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	460b      	mov	r3, r1
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	4413      	add	r3, r2
 80025f8:	4403      	add	r3, r0
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d059      	beq.n	80026b4 <snaptap_task+0x174>
 8002600:	7f39      	ldrb	r1, [r7, #28]
 8002602:	7f7b      	ldrb	r3, [r7, #29]
 8002604:	485e      	ldr	r0, [pc, #376]	@ (8002780 <snaptap_task+0x240>)
 8002606:	461a      	mov	r2, r3
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	441a      	add	r2, r3
 800260c:	0093      	lsls	r3, r2, #2
 800260e:	461a      	mov	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	4413      	add	r3, r2
 800261a:	4403      	add	r3, r0
 800261c:	333c      	adds	r3, #60	@ 0x3c
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d147      	bne.n	80026b4 <snaptap_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002624:	7f39      	ldrb	r1, [r7, #28]
 8002626:	7f7b      	ldrb	r3, [r7, #29]
 8002628:	461a      	mov	r2, r3
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	441a      	add	r2, r3
 800262e:	0093      	lsls	r3, r2, #2
 8002630:	461a      	mov	r2, r3
 8002632:	460b      	mov	r3, r1
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	440b      	add	r3, r1
 8002638:	019b      	lsls	r3, r3, #6
 800263a:	4413      	add	r3, r2
 800263c:	4a50      	ldr	r2, [pc, #320]	@ (8002780 <snaptap_task+0x240>)
 800263e:	4413      	add	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264e:	429a      	cmp	r2, r3
 8002650:	bf34      	ite	cc
 8002652:	2301      	movcc	r3, #1
 8002654:	2300      	movcs	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 800265a:	f000 fe01 	bl	8003260 <keyboard_get_time>
 800265e:	4602      	mov	r2, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a47      	ldr	r2, [pc, #284]	@ (8002784 <snaptap_task+0x244>)
 8002668:	8892      	ldrh	r2, [r2, #4]
 800266a:	4293      	cmp	r3, r2
 800266c:	bf94      	ite	ls
 800266e:	2301      	movls	r3, #1
 8002670:	2300      	movhi	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <snaptap_task+0x154>
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <snaptap_task+0x154>
        key->actuation.status = STATUS_TAP;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 800268a:	2101      	movs	r1, #1
 800268c:	68b8      	ldr	r0, [r7, #8]
 800268e:	f7ff f835 	bl	80016fc <hid_press_key>
 8002692:	e010      	b.n	80026b6 <snaptap_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <snaptap_task+0x162>
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <snaptap_task+0x23c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <snaptap_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 80026aa:	2100      	movs	r1, #0
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f7ff f825 	bl	80016fc <hid_press_key>
 80026b2:	e000      	b.n	80026b6 <snaptap_task+0x176>
        continue;
 80026b4:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80026b6:	7f3b      	ldrb	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	773b      	strb	r3, [r7, #28]
 80026bc:	7f3b      	ldrb	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d08d      	beq.n	80025de <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80026c2:	7f7b      	ldrb	r3, [r7, #29]
 80026c4:	3301      	adds	r3, #1
 80026c6:	777b      	strb	r3, [r7, #29]
 80026c8:	7f7b      	ldrb	r3, [r7, #29]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	d984      	bls.n	80025d8 <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 80026ce:	f000 fdc7 	bl	8003260 <keyboard_get_time>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002788 <snaptap_task+0x248>)
 80026da:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  uint32_t latest_triggered_time = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
  static struct key* new_pressed_key = NULL;
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	75fb      	strb	r3, [r7, #23]
 80026e4:	e02e      	b.n	8002744 <snaptap_task+0x204>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80026e6:	2300      	movs	r3, #0
 80026e8:	75bb      	strb	r3, [r7, #22]
 80026ea:	e025      	b.n	8002738 <snaptap_task+0x1f8>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 80026ec:	7db9      	ldrb	r1, [r7, #22]
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	461a      	mov	r2, r3
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	441a      	add	r2, r3
 80026f6:	0093      	lsls	r3, r2, #2
 80026f8:	461a      	mov	r2, r3
 80026fa:	460b      	mov	r3, r1
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	440b      	add	r3, r1
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	4413      	add	r3, r2
 8002704:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <snaptap_task+0x240>)
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00f      	beq.n	8002732 <snaptap_task+0x1f2>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002718:	2b02      	cmp	r3, #2
 800271a:	d10a      	bne.n	8002732 <snaptap_task+0x1f2>
              if (key->actuation.triggered_at >= latest_triggered_time) {
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	429a      	cmp	r2, r3
 8002724:	d805      	bhi.n	8002732 <snaptap_task+0x1f2>
                  latest_triggered_time = key->actuation.triggered_at;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	61bb      	str	r3, [r7, #24]
                  new_pressed_key = key;
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <snaptap_task+0x24c>)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6013      	str	r3, [r2, #0]
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002732:	7dbb      	ldrb	r3, [r7, #22]
 8002734:	3301      	adds	r3, #1
 8002736:	75bb      	strb	r3, [r7, #22]
 8002738:	7dbb      	ldrb	r3, [r7, #22]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0d6      	beq.n	80026ec <snaptap_task+0x1ac>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	3301      	adds	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d9cd      	bls.n	80026e6 <snaptap_task+0x1a6>
          }
      }
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <snaptap_task+0x24c>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <snaptap_task+0x250>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d00d      	beq.n	8002772 <snaptap_task+0x232>
      if (current_pressed_key) {
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <snaptap_task+0x250>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <snaptap_task+0x22a>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 800275e:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <snaptap_task+0x250>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f8e3 	bl	8001930 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <snaptap_task+0x24c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <snaptap_task+0x250>)
 8002770:	6013      	str	r3, [r2, #0]
  }
}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000754 	.word	0x20000754
 8002780:	20000310 	.word	0x20000310
 8002784:	20000000 	.word	0x20000000
 8002788:	20000750 	.word	0x20000750
 800278c:	20000758 	.word	0x20000758
 8002790:	2000075c 	.word	0x2000075c

08002794 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b0b6      	sub	sp, #216	@ 0xd8
 8002798:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279a:	f001 fb81 	bl	8003ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279e:	f000 fb47 	bl	8002e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a2:	f000 fc5b 	bl	800305c <MX_GPIO_Init>
  MX_ADC1_Init();
 80027a6:	f000 fbab 	bl	8002f00 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027aa:	f000 fc29 	bl	8003000 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80027ae:	f000 fbf9 	bl	8002fa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 80027b2:	4bbd      	ldr	r3, [pc, #756]	@ (8002aa8 <main+0x314>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027b8:	4bbb      	ldr	r3, [pc, #748]	@ (8002aa8 <main+0x314>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 80027be:	f7ff fdab 	bl	8002318 <keyboard_init_keys>
  ssd1306_Init();
 80027c2:	f000 fd91 	bl	80032e8 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 80027c6:	4bb9      	ldr	r3, [pc, #740]	@ (8002aac <main+0x318>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 80027cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027d0:	4619      	mov	r1, r3
 80027d2:	2000      	movs	r0, #0
 80027d4:	f009 fff6 	bl	800c7c4 <tusb_rhport_init>
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 80027d8:	f001 fbc8 	bl	8003f6c <HAL_GetTick>
 80027dc:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  tud_task_ext(UINT32_MAX, false);
 80027e0:	2100      	movs	r1, #0
 80027e2:	f04f 30ff 	mov.w	r0, #4294967295
 80027e6:	f006 fb9f 	bl	8008f28 <tud_task_ext>
}
 80027ea:	bf00      	nop
    tud_task();
    

    struct key *mode_key = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    struct key *layer_key = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027fe:	e032      	b.n	8002866 <main+0xd2>
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002806:	e025      	b.n	8002854 <main+0xc0>
            struct key *k = &keyboard_keys[adc][amux];
 8002808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800280c:	461a      	mov	r2, r3
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	441a      	add	r2, r3
 8002812:	0093      	lsls	r3, r2, #2
 8002814:	461a      	mov	r2, r3
 8002816:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800281a:	460b      	mov	r3, r1
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	440b      	add	r3, r1
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	4413      	add	r3, r2
 8002824:	4aa2      	ldr	r2, [pc, #648]	@ (8002ab0 <main+0x31c>)
 8002826:	4413      	add	r3, r2
 8002828:	673b      	str	r3, [r7, #112]	@ 0x70
            if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 800282a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800282c:	88db      	ldrh	r3, [r3, #6]
 800282e:	b29b      	uxth	r3, r3
 8002830:	2bf0      	cmp	r3, #240	@ 0xf0
 8002832:	d102      	bne.n	800283a <main+0xa6>
                mode_key = k;
 8002834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002836:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            }
            if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 800283a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	b29b      	uxth	r3, r3
 8002840:	2bf1      	cmp	r3, #241	@ 0xf1
 8002842:	d102      	bne.n	800284a <main+0xb6>
                layer_key = k;
 8002844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 800284a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800284e:	3301      	adds	r3, #1
 8002850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002858:	2b0f      	cmp	r3, #15
 800285a:	ddd5      	ble.n	8002808 <main+0x74>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002860:	3301      	adds	r3, #1
 8002862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286a:	2b00      	cmp	r3, #0
 800286c:	ddc8      	ble.n	8002800 <main+0x6c>
            }
        }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 800286e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <main+0xf2>
 8002876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287e:	2b02      	cmp	r3, #2
 8002880:	d101      	bne.n	8002886 <main+0xf2>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <main+0xf4>
 8002886:	2300      	movs	r3, #0
 8002888:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 800288c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <main+0x110>
 8002894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289c:	2b02      	cmp	r3, #2
 800289e:	d101      	bne.n	80028a4 <main+0x110>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <main+0x112>
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    if (mode_key_pressed && !last_mode_key_pressed) {
 80028aa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d033      	beq.n	800291a <main+0x186>
 80028b2:	4b80      	ldr	r3, [pc, #512]	@ (8002ab4 <main+0x320>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12f      	bne.n	800291a <main+0x186>
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <main+0x324>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <main+0x324>)
 80028cc:	701a      	strb	r2, [r3, #0]
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 80028ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab8 <main+0x324>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <main+0x162>
 80028d6:	4b79      	ldr	r3, [pc, #484]	@ (8002abc <main+0x328>)
 80028d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80028e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 80028e4:	2211      	movs	r2, #17
 80028e6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80028ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 fa0d 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80028f2:	bf00      	nop
 80028f4:	e00e      	b.n	8002914 <main+0x180>
 80028f6:	4b72      	ldr	r3, [pc, #456]	@ (8002ac0 <main+0x32c>)
 80028f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002902:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 8002904:	2210      	movs	r2, #16
 8002906:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800290a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800290c:	4618      	mov	r0, r3
 800290e:	f004 f9fd 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002912:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002914:	2000      	movs	r0, #0
 8002916:	f004 fa2d 	bl	8006d74 <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 800291a:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800291e:	2b00      	cmp	r3, #0
 8002920:	d046      	beq.n	80029b0 <main+0x21c>
 8002922:	4b68      	ldr	r3, [pc, #416]	@ (8002ac4 <main+0x330>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d142      	bne.n	80029b0 <main+0x21c>
        // Toggle tuần tự giữa BASE, ALT, ALT2
        if (current_layer == _BASE_LAYER) {
 800292a:	4b67      	ldr	r3, [pc, #412]	@ (8002ac8 <main+0x334>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d112      	bne.n	8002958 <main+0x1c4>
            current_layer = _ALT_LAYER;
 8002932:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <main+0x334>)
 8002934:	2202      	movs	r2, #2
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <main+0x338>)
 800293a:	657b      	str	r3, [r7, #84]	@ 0x54
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 8002946:	220c      	movs	r2, #12
 8002948:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800294c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800294e:	4618      	mov	r0, r3
 8002950:	f004 f9dc 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002954:	bf00      	nop
 8002956:	e028      	b.n	80029aa <main+0x216>
            tud_cdc_write_str("Layer: ALT\r\n");
        } else if (current_layer == _ALT_LAYER) {
 8002958:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac8 <main+0x334>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d112      	bne.n	8002986 <main+0x1f2>
            current_layer = _ALT_LAYER_2;
 8002960:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <main+0x334>)
 8002962:	2203      	movs	r2, #3
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4b5a      	ldr	r3, [pc, #360]	@ (8002ad0 <main+0x33c>)
 8002968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002972:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 8002974:	220d      	movs	r2, #13
 8002976:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800297a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f9c5 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002982:	bf00      	nop
 8002984:	e011      	b.n	80029aa <main+0x216>
            tud_cdc_write_str("Layer: ALT2\r\n");
        } else {
            current_layer = _BASE_LAYER;
 8002986:	4b50      	ldr	r3, [pc, #320]	@ (8002ac8 <main+0x334>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	4b51      	ldr	r3, [pc, #324]	@ (8002ad4 <main+0x340>)
 800298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002990:	2300      	movs	r3, #0
 8002992:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 800299a:	220d      	movs	r2, #13
 800299c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80029a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 f9b2 	bl	8006d0c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80029a8:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f004 f9e2 	bl	8006d74 <tud_cdc_n_write_flush>
            tud_cdc_write_str("Layer: BASE\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 80029b0:	4a40      	ldr	r2, [pc, #256]	@ (8002ab4 <main+0x320>)
 80029b2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80029b6:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 80029b8:	4a42      	ldr	r2, [pc, #264]	@ (8002ac4 <main+0x330>)
 80029ba:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80029be:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 80029c0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <main+0x324>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <main+0x23a>
        keyboard_task();
 80029c8:	f7ff fce0 	bl	800238c <keyboard_task>
 80029cc:	e001      	b.n	80029d2 <main+0x23e>
    } else {
    	snaptap_task();
 80029ce:	f7ff fdb7 	bl	8002540 <snaptap_task>
    }
//
//    keyboard_task();

    hid_task();
 80029d2:	f7fe fe43 	bl	800165c <hid_task>
    cdc_task();
 80029d6:	f7fd fe33 	bl	8000640 <cdc_task>



    ssd1306_Fill(White);
 80029da:	2001      	movs	r0, #1
 80029dc:	f000 fcee 	bl	80033bc <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 80029e0:	2101      	movs	r1, #1
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 ff7a 	bl	80038dc <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	233f      	movs	r3, #63	@ 0x3f
 80029ee:	227f      	movs	r2, #127	@ 0x7f
 80029f0:	2100      	movs	r1, #0
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 ff0a 	bl	800380c <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2320      	movs	r3, #32
 80029fe:	227f      	movs	r2, #127	@ 0x7f
 8002a00:	2120      	movs	r1, #32
 8002a02:	2026      	movs	r0, #38	@ 0x26
 8002a04:	f000 fe96 	bl	8003734 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	233f      	movs	r3, #63	@ 0x3f
 8002a0e:	2226      	movs	r2, #38	@ 0x26
 8002a10:	2100      	movs	r1, #0
 8002a12:	2026      	movs	r0, #38	@ 0x26
 8002a14:	f000 fe8e 	bl	8003734 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a1e:	e016      	b.n	8002a4e <main+0x2ba>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002a20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	3326      	adds	r3, #38	@ 0x26
 8002a2e:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8002a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	233f      	movs	r3, #63	@ 0x3f
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f000 fe78 	bl	8003734 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	dde4      	ble.n	8002a20 <main+0x28c>
    }

    int mod_y = 2;
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const int mod_line_height = 10;
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8002a62:	2322      	movs	r3, #34	@ 0x22
 8002a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8002a68:	2336      	movs	r3, #54	@ 0x36
 8002a6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    int label_row_top = 2;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    int percent_row_top = label_row_bot - 11;
 8002a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a78:	3b0b      	subs	r3, #11
 8002a7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char keycodes[6][4] = {0};
 8002a7e:	f107 0318 	add.w	r3, r7, #24
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa6:	e0ea      	b.n	8002c7e <main+0x4ea>
 8002aa8:	20000ce0 	.word	0x20000ce0
 8002aac:	0800e8c4 	.word	0x0800e8c4
 8002ab0:	20000310 	.word	0x20000310
 8002ab4:	20000cf1 	.word	0x20000cf1
 8002ab8:	20000cf0 	.word	0x20000cf0
 8002abc:	0800e824 	.word	0x0800e824
 8002ac0:	0800e838 	.word	0x0800e838
 8002ac4:	20000cf2 	.word	0x20000cf2
 8002ac8:	20000cf4 	.word	0x20000cf4
 8002acc:	0800e84c 	.word	0x0800e84c
 8002ad0:	0800e85c 	.word	0x0800e85c
 8002ad4:	0800e86c 	.word	0x0800e86c
            struct key* k = &keyboard_keys[0][amux];
 8002ad8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4ac5      	ldr	r2, [pc, #788]	@ (8002dfc <main+0x668>)
 8002ae6:	4413      	add	r3, r2
 8002ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002af0:	2b0e      	cmp	r3, #14
 8002af2:	d967      	bls.n	8002bc4 <main+0x430>
 8002af4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002af6:	795b      	ldrb	r3, [r3, #5]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d163      	bne.n	8002bc4 <main+0x430>
            	uint16_t bitmask = *(uint16_t *)k->layers[_BASE_LAYER].value;
 8002afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002afe:	799a      	ldrb	r2, [r3, #6]
 8002b00:	79db      	ldrb	r3, [r3, #7]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
                const char* label = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (bitmask == 0b00000001) label = "LCtrl";
 8002b10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d103      	bne.n	8002b20 <main+0x38c>
 8002b18:	4bb9      	ldr	r3, [pc, #740]	@ (8002e00 <main+0x66c>)
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b1e:	e036      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b00000010) label = "LShift";
 8002b20:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d103      	bne.n	8002b30 <main+0x39c>
 8002b28:	4bb6      	ldr	r3, [pc, #728]	@ (8002e04 <main+0x670>)
 8002b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b2e:	e02e      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b00000100) label = "LAlt";
 8002b30:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d103      	bne.n	8002b40 <main+0x3ac>
 8002b38:	4bb3      	ldr	r3, [pc, #716]	@ (8002e08 <main+0x674>)
 8002b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b3e:	e026      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b00001000) label = "LGUI";
 8002b40:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d103      	bne.n	8002b50 <main+0x3bc>
 8002b48:	4bb0      	ldr	r3, [pc, #704]	@ (8002e0c <main+0x678>)
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b4e:	e01e      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b00010000) label = "RCtrl";
 8002b50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d103      	bne.n	8002b60 <main+0x3cc>
 8002b58:	4bad      	ldr	r3, [pc, #692]	@ (8002e10 <main+0x67c>)
 8002b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b5e:	e016      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b00100000) label = "RShift";
 8002b60:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d103      	bne.n	8002b70 <main+0x3dc>
 8002b68:	4baa      	ldr	r3, [pc, #680]	@ (8002e14 <main+0x680>)
 8002b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b6e:	e00e      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b01000000) label = "RAlt";
 8002b70:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b74:	2b40      	cmp	r3, #64	@ 0x40
 8002b76:	d103      	bne.n	8002b80 <main+0x3ec>
 8002b78:	4ba7      	ldr	r3, [pc, #668]	@ (8002e18 <main+0x684>)
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b7e:	e006      	b.n	8002b8e <main+0x3fa>
                else if (bitmask == 0b10000000) label = "RGUI";
 8002b80:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002b84:	2b80      	cmp	r3, #128	@ 0x80
 8002b86:	d102      	bne.n	8002b8e <main+0x3fa>
 8002b88:	4ba4      	ldr	r3, [pc, #656]	@ (8002e1c <main+0x688>)
 8002b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (label) {
 8002b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d06d      	beq.n	8002c72 <main+0x4de>
                    ssd1306_SetCursor(2, mod_y);
 8002b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f000 fdb0 	bl	8003704 <ssd1306_SetCursor>
                    ssd1306_WriteString(label, Font_6x8, Black);
 8002ba4:	4b9e      	ldr	r3, [pc, #632]	@ (8002e20 <main+0x68c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002bb0:	f000 fd82 	bl	80036b8 <ssd1306_WriteString>
                    mod_y += mod_line_height;
 8002bb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002bc2:	e056      	b.n	8002c72 <main+0x4de>
                }
            }

            else if (k->state.filtered_distance_8bits >= 15 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 8002bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bc6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002bca:	2b0e      	cmp	r3, #14
 8002bcc:	d952      	bls.n	8002c74 <main+0x4e0>
 8002bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	dc4e      	bgt.n	8002c74 <main+0x4e0>
 8002bd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bd8:	795b      	ldrb	r3, [r3, #5]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d14a      	bne.n	8002c74 <main+0x4e0>
            	keycodes[tracker][0] = '0';
 8002bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	33d0      	adds	r3, #208	@ 0xd0
 8002be6:	443b      	add	r3, r7
 8002be8:	2230      	movs	r2, #48	@ 0x30
 8002bea:	f803 2cb8 	strb.w	r2, [r3, #-184]
                keycodes[tracker][1] = 'x';
 8002bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	33d0      	adds	r3, #208	@ 0xd0
 8002bf6:	443b      	add	r3, r7
 8002bf8:	2278      	movs	r2, #120	@ 0x78
 8002bfa:	f803 2cb7 	strb.w	r2, [r3, #-183]
               	keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 8002bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	dc05      	bgt.n	8002c12 <main+0x47e>
 8002c06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3330      	adds	r3, #48	@ 0x30
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	e004      	b.n	8002c1c <main+0x488>
 8002c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3337      	adds	r3, #55	@ 0x37
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	33d0      	adds	r3, #208	@ 0xd0
 8002c24:	443b      	add	r3, r7
 8002c26:	f803 2cb6 	strb.w	r2, [r3, #-182]
                keycodes[tracker][3] = '\0';
 8002c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	33d0      	adds	r3, #208	@ 0xd0
 8002c32:	443b      	add	r3, r7
 8002c34:	2200      	movs	r2, #0
 8002c36:	f803 2cb5 	strb.w	r2, [r3, #-181]

                key_percents[tracker] = (k->state.filtered_distance_8bits * 100) / 254;
 8002c3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002c40:	461a      	mov	r2, r3
 8002c42:	2364      	movs	r3, #100	@ 0x64
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a76      	ldr	r2, [pc, #472]	@ (8002e24 <main+0x690>)
 8002c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4e:	441a      	add	r2, r3
 8002c50:	11d2      	asrs	r2, r2, #7
 8002c52:	17db      	asrs	r3, r3, #31
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	b2d9      	uxtb	r1, r3
 8002c58:	f107 0210 	add.w	r2, r7, #16
 8002c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c60:	4413      	add	r3, r2
 8002c62:	460a      	mov	r2, r1
 8002c64:	701a      	strb	r2, [r3, #0]
                tracker++;
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c70:	e000      	b.n	8002c74 <main+0x4e0>
            if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002c72:	bf00      	nop
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f77f af28 	ble.w	8002ad8 <main+0x344>
            }
        }

    for (int i = 1; i <= 3; i++) {
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c8e:	e04f      	b.n	8002d30 <main+0x59c>
      if (keycodes[i - 1][0] != '\0') {
 8002c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c94:	3b01      	subs	r3, #1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	33d0      	adds	r3, #208	@ 0xd0
 8002c9a:	443b      	add	r3, r7
 8002c9c:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d040      	beq.n	8002d26 <main+0x592>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8002ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ca8:	1e5a      	subs	r2, r3, #1
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	332a      	adds	r3, #42	@ 0x2a
 8002cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        ssd1306_SetCursor(x, label_row_top);
 8002cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fd1c 	bl	8003704 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	f107 0218 	add.w	r2, r7, #24
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	18d0      	adds	r0, r2, r3
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <main+0x68c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce2:	f000 fce9 	bl	80036b8 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cea:	3b01      	subs	r3, #1
 8002cec:	33d0      	adds	r3, #208	@ 0xd0
 8002cee:	443b      	add	r3, r7
 8002cf0:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	494b      	ldr	r1, [pc, #300]	@ (8002e28 <main+0x694>)
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f00a f889 	bl	800ce14 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 8002d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fcf7 	bl	8003704 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002d16:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <main+0x68c>)
 8002d18:	f107 0008 	add.w	r0, r7, #8
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	9200      	str	r2, [sp, #0]
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	f000 fcc9 	bl	80036b8 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8002d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	ddab      	ble.n	8002c90 <main+0x4fc>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d3e:	e04d      	b.n	8002ddc <main+0x648>
      if (keycodes[i - 1][0] != '\0') {
 8002d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d44:	3b01      	subs	r3, #1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	33d0      	adds	r3, #208	@ 0xd0
 8002d4a:	443b      	add	r3, r7
 8002d4c:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d03e      	beq.n	8002dd2 <main+0x63e>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d58:	1f1a      	subs	r2, r3, #4
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	332a      	adds	r3, #42	@ 0x2a
 8002d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_bot);
 8002d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fcc4 	bl	8003704 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d80:	3b01      	subs	r3, #1
 8002d82:	f107 0218 	add.w	r2, r7, #24
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d0      	adds	r0, r2, r3
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <main+0x68c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	9200      	str	r2, [sp, #0]
 8002d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d92:	f000 fc91 	bl	80036b8 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	33d0      	adds	r3, #208	@ 0xd0
 8002d9e:	443b      	add	r3, r7
 8002da0:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002da4:	461a      	mov	r2, r3
 8002da6:	463b      	mov	r3, r7
 8002da8:	491f      	ldr	r1, [pc, #124]	@ (8002e28 <main+0x694>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00a f832 	bl	800ce14 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fca0 	bl	8003704 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002dc4:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <main+0x68c>)
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	9200      	str	r2, [sp, #0]
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	f000 fc73 	bl	80036b8 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8002dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	ddad      	ble.n	8002d40 <main+0x5ac>
      }
    }

    ssd1306_UpdateScreen();
 8002de4:	f000 fb02 	bl	80033ec <ssd1306_UpdateScreen>
    if (cycle_count_on){
 8002de8:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <main+0x698>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f43f acf3 	beq.w	80027d8 <main+0x44>
    cdc_performance_measure(start_at);
 8002df2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002df6:	f7fd fbf1 	bl	80005dc <cdc_performance_measure>
  while (1) {
 8002dfa:	e4ed      	b.n	80027d8 <main+0x44>
 8002dfc:	20000310 	.word	0x20000310
 8002e00:	0800e87c 	.word	0x0800e87c
 8002e04:	0800e884 	.word	0x0800e884
 8002e08:	0800e88c 	.word	0x0800e88c
 8002e0c:	0800e894 	.word	0x0800e894
 8002e10:	0800e89c 	.word	0x0800e89c
 8002e14:	0800e8a4 	.word	0x0800e8a4
 8002e18:	0800e8ac 	.word	0x0800e8ac
 8002e1c:	0800e8b4 	.word	0x0800e8b4
 8002e20:	0800f124 	.word	0x0800f124
 8002e24:	81020409 	.word	0x81020409
 8002e28:	0800e8bc 	.word	0x0800e8bc
 8002e2c:	20000cf8 	.word	0x20000cf8

08002e30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b094      	sub	sp, #80	@ 0x50
 8002e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e36:	f107 0320 	add.w	r3, r7, #32
 8002e3a:	2230      	movs	r2, #48	@ 0x30
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f00a f84d 	bl	800cede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <SystemClock_Config+0xc8>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ef8 <SystemClock_Config+0xc8>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e64:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <SystemClock_Config+0xc8>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e70:	2300      	movs	r3, #0
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <SystemClock_Config+0xcc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a20      	ldr	r2, [pc, #128]	@ (8002efc <SystemClock_Config+0xcc>)
 8002e7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <SystemClock_Config+0xcc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e96:	2302      	movs	r3, #2
 8002e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002ea0:	230d      	movs	r3, #13
 8002ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ea4:	23a8      	movs	r3, #168	@ 0xa8
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002eac:	2307      	movs	r3, #7
 8002eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fef5 	bl	8005ca4 <HAL_RCC_OscConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <SystemClock_Config+0x94>
    Error_Handler();
 8002ec0:	f000 f9d5 	bl	800326e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f957 	bl	8006194 <HAL_RCC_ClockConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SystemClock_Config+0xc0>
    Error_Handler();
 8002eec:	f000 f9bf 	bl	800326e <Error_Handler>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3750      	adds	r7, #80	@ 0x50
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000

08002f00 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002f12:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <MX_ADC1_Init+0x9c>)
 8002f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f18:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f32:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f3a:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f42:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <MX_ADC1_Init+0xa0>)
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002f60:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f62:	f001 f833 	bl	8003fcc <HAL_ADC_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_ADC1_Init+0x70>
    Error_Handler();
 8002f6c:	f000 f97f 	bl	800326e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f70:	2309      	movs	r3, #9
 8002f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002f7c:	463b      	mov	r3, r7
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <MX_ADC1_Init+0x98>)
 8002f82:	f001 f9e7 	bl	8004354 <HAL_ADC_ConfigChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_ADC1_Init+0x90>
    Error_Handler();
 8002f8c:	f000 f96f 	bl	800326e <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000760 	.word	0x20000760
 8002f9c:	40012000 	.word	0x40012000
 8002fa0:	0f000001 	.word	0x0f000001

08002fa4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002faa:	4a13      	ldr	r2, [pc, #76]	@ (8002ff8 <MX_I2C1_Init+0x54>)
 8002fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fb0:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <MX_I2C1_Init+0x58>)
 8002fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fce:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fd4:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <MX_I2C1_Init+0x50>)
 8002fe2:	f002 f8a3 	bl	800512c <HAL_I2C_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002fec:	f000 f93f 	bl	800326e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200007a8 	.word	0x200007a8
 8002ff8:	40005400 	.word	0x40005400
 8002ffc:	00061a80 	.word	0x00061a80

08003000 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003006:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800300a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800300e:	2204      	movs	r2, #4
 8003010:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003012:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003014:	2202      	movs	r2, #2
 8003016:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003020:	2202      	movs	r2, #2
 8003022:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003038:	2200      	movs	r2, #0
 800303a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800303e:	2200      	movs	r2, #0
 8003040:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8003042:	4805      	ldr	r0, [pc, #20]	@ (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003044:	f002 fd1f 	bl	8005a86 <HAL_PCD_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 800304e:	f000 f90e 	bl	800326e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200007fc 	.word	0x200007fc

0800305c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 800307c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a18      	ldr	r2, [pc, #96]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <MX_GPIO_Init+0x9c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80030c6:	2200      	movs	r2, #0
 80030c8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80030cc:	480b      	ldr	r0, [pc, #44]	@ (80030fc <MX_GPIO_Init+0xa0>)
 80030ce:	f002 f813 	bl	80050f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80030d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80030d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	4619      	mov	r1, r3
 80030ea:	4804      	ldr	r0, [pc, #16]	@ (80030fc <MX_GPIO_Init+0xa0>)
 80030ec:	f001 fe80 	bl	8004df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020400 	.word	0x40020400

08003100 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8003104:	4a05      	ldr	r2, [pc, #20]	@ (800311c <keyboard_read_config+0x1c>)
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <keyboard_read_config+0x20>)
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f240 2306 	movw	r3, #518	@ 0x206
 8003110:	461a      	mov	r2, r3
 8003112:	f009 ffbc 	bl	800d08e <memcpy>
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000000 	.word	0x20000000
 8003120:	08040000 	.word	0x08040000

08003124 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8003124:	b5b0      	push	{r4, r5, r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	f240 2205 	movw	r2, #517	@ 0x205
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <keyboard_write_config+0x1e>
    return 0;
 800313e:	2300      	movs	r3, #0
 8003140:	e02d      	b.n	800319e <keyboard_write_config+0x7a>
  }

  HAL_FLASH_Unlock();
 8003142:	f001 fc9b 	bl	8004a7c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <keyboard_write_config+0x84>)
 8003148:	22b3      	movs	r2, #179	@ 0xb3
 800314a:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 800314c:	2102      	movs	r1, #2
 800314e:	2006      	movs	r0, #6
 8003150:	f001 fe06 	bl	8004d60 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	81fb      	strh	r3, [r7, #14]
 8003158:	e01a      	b.n	8003190 <keyboard_write_config+0x6c>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003160:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8003164:	4619      	mov	r1, r3
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2200      	movs	r2, #0
 8003172:	461c      	mov	r4, r3
 8003174:	4615      	mov	r5, r2
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	2000      	movs	r0, #0
 800317c:	f001 fc2a 	bl	80049d4 <HAL_FLASH_Program>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <keyboard_write_config+0x66>
      HAL_FLASH_Lock();
 8003186:	f001 fc9b 	bl	8004ac0 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 800318a:	89fb      	ldrh	r3, [r7, #14]
 800318c:	3301      	adds	r3, #1
 800318e:	81fb      	strh	r3, [r7, #14]
 8003190:	89fa      	ldrh	r2, [r7, #14]
 8003192:	883b      	ldrh	r3, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3e0      	bcc.n	800315a <keyboard_write_config+0x36>
    };
  }
  HAL_FLASH_Lock();
 8003198:	f001 fc92 	bl	8004ac0 <HAL_FLASH_Lock>
  return 1;
 800319c:	2301      	movs	r3, #1
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdb0      	pop	{r4, r5, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00

080031ac <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e013      	b.n	80031e4 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	4a0d      	ldr	r2, [pc, #52]	@ (80031f4 <keyboard_select_amux+0x48>)
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	b299      	uxth	r1, r3
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	fa42 f303 	asr.w	r3, r2, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <keyboard_select_amux+0x4c>)
 80031da:	f001 ff8d 	bl	80050f8 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3301      	adds	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d9e8      	bls.n	80031bc <keyboard_select_amux+0x10>
  }
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0800eb24 	.word	0x0800eb24
 80031f8:	40020400 	.word	0x40020400

080031fc <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8003206:	2209      	movs	r2, #9
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <keyboard_select_adc+0x30>)
 800320a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 800320c:	4907      	ldr	r1, [pc, #28]	@ (800322c <keyboard_select_adc+0x30>)
 800320e:	4808      	ldr	r0, [pc, #32]	@ (8003230 <keyboard_select_adc+0x34>)
 8003210:	f001 f8a0 	bl	8004354 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8003214:	4806      	ldr	r0, [pc, #24]	@ (8003230 <keyboard_select_adc+0x34>)
 8003216:	f000 ff1d 	bl	8004054 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 800321a:	2101      	movs	r1, #1
 800321c:	4804      	ldr	r0, [pc, #16]	@ (8003230 <keyboard_select_adc+0x34>)
 800321e:	f001 f800 	bl	8004222 <HAL_ADC_PollForConversion>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000ce0 	.word	0x20000ce0
 8003230:	20000760 	.word	0x20000760

08003234 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8003238:	4803      	ldr	r0, [pc, #12]	@ (8003248 <keyboard_read_adc+0x14>)
 800323a:	f001 f87d 	bl	8004338 <HAL_ADC_GetValue>
 800323e:	4603      	mov	r3, r0
 8003240:	b29b      	uxth	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000760 	.word	0x20000760

0800324c <keyboard_close_adc>:

void keyboard_close_adc() {
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8003250:	4802      	ldr	r0, [pc, #8]	@ (800325c <keyboard_close_adc+0x10>)
 8003252:	f000 ffb3 	bl	80041bc <HAL_ADC_Stop>
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000760 	.word	0x20000760

08003260 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003264:	f000 fe82 	bl	8003f6c <HAL_GetTick>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	bd80      	pop	{r7, pc}

0800326e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003272:	b672      	cpsid	i
}
 8003274:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <Error_Handler+0x8>

0800327a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af04      	add	r7, sp, #16
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, OLED_TIMEOUT_MS);
 8003292:	230a      	movs	r3, #10
 8003294:	9302      	str	r3, [sp, #8]
 8003296:	2301      	movs	r3, #1
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	1dfb      	adds	r3, r7, #7
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2301      	movs	r3, #1
 80032a0:	2200      	movs	r2, #0
 80032a2:	2178      	movs	r1, #120	@ 0x78
 80032a4:	4803      	ldr	r0, [pc, #12]	@ (80032b4 <ssd1306_WriteCommand+0x2c>)
 80032a6:	f002 f885 	bl	80053b4 <HAL_I2C_Mem_Write>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200007a8 	.word	0x200007a8

080032b8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af04      	add	r7, sp, #16
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, OLED_TIMEOUT_MS);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	220a      	movs	r2, #10
 80032c8:	9202      	str	r2, [sp, #8]
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2301      	movs	r3, #1
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	2178      	movs	r1, #120	@ 0x78
 80032d6:	4803      	ldr	r0, [pc, #12]	@ (80032e4 <ssd1306_WriteData+0x2c>)
 80032d8:	f002 f86c 	bl	80053b4 <HAL_I2C_Mem_Write>
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200007a8 	.word	0x200007a8

080032e8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80032ec:	f7ff ffc5 	bl	800327a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80032f0:	2064      	movs	r0, #100	@ 0x64
 80032f2:	f000 fe47 	bl	8003f84 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80032f6:	2000      	movs	r0, #0
 80032f8:	f000 fad2 	bl	80038a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80032fc:	2020      	movs	r0, #32
 80032fe:	f7ff ffc3 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff ffc0 	bl	8003288 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003308:	20b0      	movs	r0, #176	@ 0xb0
 800330a:	f7ff ffbd 	bl	8003288 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800330e:	20c0      	movs	r0, #192	@ 0xc0
 8003310:	f7ff ffba 	bl	8003288 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff ffb7 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800331a:	2010      	movs	r0, #16
 800331c:	f7ff ffb4 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003320:	2040      	movs	r0, #64	@ 0x40
 8003322:	f7ff ffb1 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003326:	20ff      	movs	r0, #255	@ 0xff
 8003328:	f000 faa7 	bl	800387a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 800332c:	20a0      	movs	r0, #160	@ 0xa0
 800332e:	f7ff ffab 	bl	8003288 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 8003332:	20a7      	movs	r0, #167	@ 0xa7
 8003334:	f7ff ffa8 	bl	8003288 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003338:	20a8      	movs	r0, #168	@ 0xa8
 800333a:	f7ff ffa5 	bl	8003288 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800333e:	203f      	movs	r0, #63	@ 0x3f
 8003340:	f7ff ffa2 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003344:	20a4      	movs	r0, #164	@ 0xa4
 8003346:	f7ff ff9f 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800334a:	20d3      	movs	r0, #211	@ 0xd3
 800334c:	f7ff ff9c 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003350:	2000      	movs	r0, #0
 8003352:	f7ff ff99 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003356:	20d5      	movs	r0, #213	@ 0xd5
 8003358:	f7ff ff96 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800335c:	20f0      	movs	r0, #240	@ 0xf0
 800335e:	f7ff ff93 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003362:	20d9      	movs	r0, #217	@ 0xd9
 8003364:	f7ff ff90 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003368:	2022      	movs	r0, #34	@ 0x22
 800336a:	f7ff ff8d 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800336e:	20da      	movs	r0, #218	@ 0xda
 8003370:	f7ff ff8a 	bl	8003288 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003374:	2012      	movs	r0, #18
 8003376:	f7ff ff87 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800337a:	20db      	movs	r0, #219	@ 0xdb
 800337c:	f7ff ff84 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003380:	2020      	movs	r0, #32
 8003382:	f7ff ff81 	bl	8003288 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003386:	208d      	movs	r0, #141	@ 0x8d
 8003388:	f7ff ff7e 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800338c:	2014      	movs	r0, #20
 800338e:	f7ff ff7b 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003392:	2001      	movs	r0, #1
 8003394:	f000 fa84 	bl	80038a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003398:	2000      	movs	r0, #0
 800339a:	f000 f80f 	bl	80033bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800339e:	f000 f825 	bl	80033ec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <ssd1306_Init+0xd0>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <ssd1306_Init+0xd0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80033ae:	4b02      	ldr	r3, [pc, #8]	@ (80033b8 <ssd1306_Init+0xd0>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	711a      	strb	r2, [r3, #4]
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000cfc 	.word	0x20000cfc

080033bc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <ssd1306_Fill+0x14>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <ssd1306_Fill+0x16>
 80033d0:	23ff      	movs	r3, #255	@ 0xff
 80033d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d6:	4619      	mov	r1, r3
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <ssd1306_Fill+0x2c>)
 80033da:	f009 fd80 	bl	800cede <memset>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000d04 	.word	0x20000d04

080033ec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
uint8_t SSD1306_Buffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};
uint8_t SSD1306_LastBuffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};

void ssd1306_UpdateScreen(void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
    int anyPageChanged = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e06a      	b.n	80034d2 <ssd1306_UpdateScreen+0xe6>
        uint16_t base = page * SSD1306_WIDTH;
 80033fc:	7efb      	ldrb	r3, [r7, #27]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	01db      	lsls	r3, r3, #7
 8003402:	813b      	strh	r3, [r7, #8]
        int pageChanged = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
        int firstChanged = -1, lastChanged = -1;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	60fb      	str	r3, [r7, #12]

        // Find the first and last changed column in this page
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 8003414:	2300      	movs	r3, #0
 8003416:	817b      	strh	r3, [r7, #10]
 8003418:	e018      	b.n	800344c <ssd1306_UpdateScreen+0x60>
            uint16_t index = base + col;
 800341a:	893a      	ldrh	r2, [r7, #8]
 800341c:	897b      	ldrh	r3, [r7, #10]
 800341e:	4413      	add	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
            if (SSD1306_Buffer[index] != SSD1306_LastBuffer[index]) {
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	4a2f      	ldr	r2, [pc, #188]	@ (80034e4 <ssd1306_UpdateScreen+0xf8>)
 8003426:	5cd2      	ldrb	r2, [r2, r3]
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	492f      	ldr	r1, [pc, #188]	@ (80034e8 <ssd1306_UpdateScreen+0xfc>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	429a      	cmp	r2, r3
 8003430:	d009      	beq.n	8003446 <ssd1306_UpdateScreen+0x5a>
                if (firstChanged == -1) firstChanged = col;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d101      	bne.n	800343e <ssd1306_UpdateScreen+0x52>
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	613b      	str	r3, [r7, #16]
                lastChanged = col;
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	60fb      	str	r3, [r7, #12]
                pageChanged = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	3301      	adds	r3, #1
 800344a:	817b      	strh	r3, [r7, #10]
 800344c:	897b      	ldrh	r3, [r7, #10]
 800344e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003450:	d9e3      	bls.n	800341a <ssd1306_UpdateScreen+0x2e>
            }
        }

        if (!pageChanged)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d038      	beq.n	80034ca <ssd1306_UpdateScreen+0xde>
            continue;
        anyPageChanged = 1;
 8003458:	2301      	movs	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]

        // Write only the changed columns in this page
        ssd1306_WriteCommand(0xB0 + page);
 800345c:	7efb      	ldrb	r3, [r7, #27]
 800345e:	3b50      	subs	r3, #80	@ 0x50
 8003460:	b2db      	uxtb	r3, r3
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff10 	bl	8003288 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + ((firstChanged + SSD1306_X_OFFSET_LOWER) & 0x0F));
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff08 	bl	8003288 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + (((firstChanged + SSD1306_X_OFFSET_LOWER) >> 4) & 0x07));
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	111b      	asrs	r3, r3, #4
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3310      	adds	r3, #16
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fefd 	bl	8003288 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <ssd1306_UpdateScreen+0xf8>)
 8003496:	1898      	adds	r0, r3, r2
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7ff ff09 	bl	80032b8 <ssd1306_WriteData>

        // Copy new page data to last buffer for the changed range
        memcpy(&SSD1306_LastBuffer[base + firstChanged], &SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 80034a6:	893a      	ldrh	r2, [r7, #8]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	4a0e      	ldr	r2, [pc, #56]	@ (80034e8 <ssd1306_UpdateScreen+0xfc>)
 80034ae:	1898      	adds	r0, r3, r2
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a0b      	ldr	r2, [pc, #44]	@ (80034e4 <ssd1306_UpdateScreen+0xf8>)
 80034b8:	1899      	adds	r1, r3, r2
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	461a      	mov	r2, r3
 80034c4:	f009 fde3 	bl	800d08e <memcpy>
 80034c8:	e000      	b.n	80034cc <ssd1306_UpdateScreen+0xe0>
            continue;
 80034ca:	bf00      	nop
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 80034cc:	7efb      	ldrb	r3, [r7, #27]
 80034ce:	3301      	adds	r3, #1
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	7efb      	ldrb	r3, [r7, #27]
 80034d4:	2b07      	cmp	r3, #7
 80034d6:	d991      	bls.n	80033fc <ssd1306_UpdateScreen+0x10>
    }
    // If nothing changed, skip the update entirely
    if (!anyPageChanged) {
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
        return;
    }
}
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000d04 	.word	0x20000d04
 80034e8:	20001104 	.word	0x20001104

080034ec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
 80034f6:	460b      	mov	r3, r1
 80034f8:	71bb      	strb	r3, [r7, #6]
 80034fa:	4613      	mov	r3, r2
 80034fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db3d      	blt.n	8003582 <ssd1306_DrawPixel+0x96>
 8003506:	79bb      	ldrb	r3, [r7, #6]
 8003508:	2b3f      	cmp	r3, #63	@ 0x3f
 800350a:	d83a      	bhi.n	8003582 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800350c:	797b      	ldrb	r3, [r7, #5]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d11a      	bne.n	8003548 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003512:	79fa      	ldrb	r2, [r7, #7]
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	b2d8      	uxtb	r0, r3
 800351a:	4603      	mov	r3, r0
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4413      	add	r3, r2
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <ssd1306_DrawPixel+0xa4>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	b25a      	sxtb	r2, r3
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	b25b      	sxtb	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b259      	sxtb	r1, r3
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	4603      	mov	r3, r0
 800353c:	01db      	lsls	r3, r3, #7
 800353e:	4413      	add	r3, r2
 8003540:	b2c9      	uxtb	r1, r1
 8003542:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <ssd1306_DrawPixel+0xa4>)
 8003544:	54d1      	strb	r1, [r2, r3]
 8003546:	e01d      	b.n	8003584 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003548:	79fa      	ldrb	r2, [r7, #7]
 800354a:	79bb      	ldrb	r3, [r7, #6]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	b2d8      	uxtb	r0, r3
 8003550:	4603      	mov	r3, r0
 8003552:	01db      	lsls	r3, r3, #7
 8003554:	4413      	add	r3, r2
 8003556:	4a0e      	ldr	r2, [pc, #56]	@ (8003590 <ssd1306_DrawPixel+0xa4>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	b25a      	sxtb	r2, r3
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	b25b      	sxtb	r3, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	b25b      	sxtb	r3, r3
 800356e:	4013      	ands	r3, r2
 8003570:	b259      	sxtb	r1, r3
 8003572:	79fa      	ldrb	r2, [r7, #7]
 8003574:	4603      	mov	r3, r0
 8003576:	01db      	lsls	r3, r3, #7
 8003578:	4413      	add	r3, r2
 800357a:	b2c9      	uxtb	r1, r1
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <ssd1306_DrawPixel+0xa4>)
 800357e:	54d1      	strb	r1, [r2, r3]
 8003580:	e000      	b.n	8003584 <ssd1306_DrawPixel+0x98>
        return;
 8003582:	bf00      	nop
    }
}
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000d04 	.word	0x20000d04

08003594 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	4604      	mov	r4, r0
 800359c:	4638      	mov	r0, r7
 800359e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80035a2:	4623      	mov	r3, r4
 80035a4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b1f      	cmp	r3, #31
 80035aa:	d902      	bls.n	80035b2 <ssd1306_WriteChar+0x1e>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80035b0:	d901      	bls.n	80035b6 <ssd1306_WriteChar+0x22>
        return 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e079      	b.n	80036aa <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <ssd1306_WriteChar+0x34>
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3b20      	subs	r3, #32
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	e000      	b.n	80035ca <ssd1306_WriteChar+0x36>
 80035c8:	783b      	ldrb	r3, [r7, #0]
 80035ca:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	4413      	add	r3, r2
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	dc06      	bgt.n	80035e8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80035da:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 80035dc:	885b      	ldrh	r3, [r3, #2]
 80035de:	461a      	mov	r2, r3
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	dd01      	ble.n	80035ec <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e05e      	b.n	80036aa <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	e04d      	b.n	800368e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	3b20      	subs	r3, #32
 80035f8:	7879      	ldrb	r1, [r7, #1]
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	440b      	add	r3, r1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e036      	b.n	8003680 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d013      	beq.n	800364a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003622:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4413      	add	r3, r2
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 8003632:	885b      	ldrh	r3, [r3, #2]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4413      	add	r3, r2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff ff52 	bl	80034ec <ssd1306_DrawPixel>
 8003648:	e017      	b.n	800367a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800364a:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4413      	add	r3, r2
 8003656:	b2d8      	uxtb	r0, r3
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 800365a:	885b      	ldrh	r3, [r3, #2]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4413      	add	r3, r2
 8003664:	b2d9      	uxtb	r1, r3
 8003666:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	f7ff ff39 	bl	80034ec <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3301      	adds	r3, #1
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3c4      	bcc.n	8003612 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	787b      	ldrb	r3, [r7, #1]
 8003690:	461a      	mov	r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4293      	cmp	r3, r2
 8003696:	d3ac      	bcc.n	80035f2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <ssd1306_WriteChar+0x120>)
 80036a6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	@ 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000cfc 	.word	0x20000cfc

080036b8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4638      	mov	r0, r7
 80036c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80036c6:	e013      	b.n	80036f0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	7818      	ldrb	r0, [r3, #0]
 80036cc:	7e3b      	ldrb	r3, [r7, #24]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	463b      	mov	r3, r7
 80036d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d4:	f7ff ff5e 	bl	8003594 <ssd1306_WriteChar>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d002      	beq.n	80036ea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	e008      	b.n	80036fc <ssd1306_WriteString+0x44>
        }
        str++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3301      	adds	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e7      	bne.n	80036c8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	781b      	ldrb	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	460a      	mov	r2, r1
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	b29a      	uxth	r2, r3
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <ssd1306_SetCursor+0x2c>)
 800371a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800371c:	79bb      	ldrb	r3, [r7, #6]
 800371e:	b29a      	uxth	r2, r3
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <ssd1306_SetCursor+0x2c>)
 8003722:	805a      	strh	r2, [r3, #2]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000cfc 	.word	0x20000cfc

08003734 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	461a      	mov	r2, r3
 8003742:	4623      	mov	r3, r4
 8003744:	71fb      	strb	r3, [r7, #7]
 8003746:	4603      	mov	r3, r0
 8003748:	71bb      	strb	r3, [r7, #6]
 800374a:	460b      	mov	r3, r1
 800374c:	717b      	strb	r3, [r7, #5]
 800374e:	4613      	mov	r3, r2
 8003750:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003752:	797a      	ldrb	r2, [r7, #5]
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bfb8      	it	lt
 800375c:	425b      	neglt	r3, r3
 800375e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003760:	793a      	ldrb	r2, [r7, #4]
 8003762:	79bb      	ldrb	r3, [r7, #6]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfb8      	it	lt
 800376a:	425b      	neglt	r3, r3
 800376c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800376e:	79fa      	ldrb	r2, [r7, #7]
 8003770:	797b      	ldrb	r3, [r7, #5]
 8003772:	429a      	cmp	r2, r3
 8003774:	d201      	bcs.n	800377a <ssd1306_Line+0x46>
 8003776:	2301      	movs	r3, #1
 8003778:	e001      	b.n	800377e <ssd1306_Line+0x4a>
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003780:	79ba      	ldrb	r2, [r7, #6]
 8003782:	793b      	ldrb	r3, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d201      	bcs.n	800378c <ssd1306_Line+0x58>
 8003788:	2301      	movs	r3, #1
 800378a:	e001      	b.n	8003790 <ssd1306_Line+0x5c>
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800379a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800379e:	7939      	ldrb	r1, [r7, #4]
 80037a0:	797b      	ldrb	r3, [r7, #5]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fea2 	bl	80034ec <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80037a8:	e024      	b.n	80037f4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80037aa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80037ae:	79b9      	ldrb	r1, [r7, #6]
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fe9a 	bl	80034ec <ssd1306_DrawPixel>
        error2 = error * 2;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	425b      	negs	r3, r3
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	dd08      	ble.n	80037da <ssd1306_Line+0xa6>
            error -= deltaY;
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	4413      	add	r3, r2
 80037d8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	429a      	cmp	r2, r3
 80037e0:	da08      	bge.n	80037f4 <ssd1306_Line+0xc0>
            error += deltaX;
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	4413      	add	r3, r2
 80037f2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80037f4:	79fa      	ldrb	r2, [r7, #7]
 80037f6:	797b      	ldrb	r3, [r7, #5]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1d6      	bne.n	80037aa <ssd1306_Line+0x76>
 80037fc:	79ba      	ldrb	r2, [r7, #6]
 80037fe:	793b      	ldrb	r3, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d1d2      	bne.n	80037aa <ssd1306_Line+0x76>
        }
    }
    return;
 8003804:	bf00      	nop
}
 8003806:	3724      	adds	r7, #36	@ 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af02      	add	r7, sp, #8
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	71fb      	strb	r3, [r7, #7]
 800381e:	4603      	mov	r3, r0
 8003820:	71bb      	strb	r3, [r7, #6]
 8003822:	460b      	mov	r3, r1
 8003824:	717b      	strb	r3, [r7, #5]
 8003826:	4613      	mov	r3, r2
 8003828:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800382a:	79bc      	ldrb	r4, [r7, #6]
 800382c:	797a      	ldrb	r2, [r7, #5]
 800382e:	79b9      	ldrb	r1, [r7, #6]
 8003830:	79f8      	ldrb	r0, [r7, #7]
 8003832:	7e3b      	ldrb	r3, [r7, #24]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4623      	mov	r3, r4
 8003838:	f7ff ff7c 	bl	8003734 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800383c:	793c      	ldrb	r4, [r7, #4]
 800383e:	797a      	ldrb	r2, [r7, #5]
 8003840:	79b9      	ldrb	r1, [r7, #6]
 8003842:	7978      	ldrb	r0, [r7, #5]
 8003844:	7e3b      	ldrb	r3, [r7, #24]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4623      	mov	r3, r4
 800384a:	f7ff ff73 	bl	8003734 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800384e:	793c      	ldrb	r4, [r7, #4]
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	7939      	ldrb	r1, [r7, #4]
 8003854:	7978      	ldrb	r0, [r7, #5]
 8003856:	7e3b      	ldrb	r3, [r7, #24]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4623      	mov	r3, r4
 800385c:	f7ff ff6a 	bl	8003734 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003860:	79bc      	ldrb	r4, [r7, #6]
 8003862:	79fa      	ldrb	r2, [r7, #7]
 8003864:	7939      	ldrb	r1, [r7, #4]
 8003866:	79f8      	ldrb	r0, [r7, #7]
 8003868:	7e3b      	ldrb	r3, [r7, #24]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4623      	mov	r3, r4
 800386e:	f7ff ff61 	bl	8003734 <ssd1306_Line>

    return;
 8003872:	bf00      	nop
}
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bd90      	pop	{r4, r7, pc}

0800387a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003884:	2381      	movs	r3, #129	@ 0x81
 8003886:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fcfc 	bl	8003288 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fcf8 	bl	8003288 <ssd1306_WriteCommand>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80038b0:	23af      	movs	r3, #175	@ 0xaf
 80038b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <ssd1306_SetDisplayOn+0x38>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	715a      	strb	r2, [r3, #5]
 80038ba:	e004      	b.n	80038c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80038bc:	23ae      	movs	r3, #174	@ 0xae
 80038be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <ssd1306_SetDisplayOn+0x38>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fcdd 	bl	8003288 <ssd1306_WriteCommand>
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000cfc 	.word	0x20000cfc

080038dc <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	460a      	mov	r2, r1
 80038e6:	71fb      	strb	r3, [r7, #7]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 80038f2:	20a1      	movs	r0, #161	@ 0xa1
 80038f4:	f7ff fcc8 	bl	8003288 <ssd1306_WriteCommand>
 80038f8:	e002      	b.n	8003900 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 80038fa:	20a0      	movs	r0, #160	@ 0xa0
 80038fc:	f7ff fcc4 	bl	8003288 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8003900:	79bb      	ldrb	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 8003906:	20c8      	movs	r0, #200	@ 0xc8
 8003908:	f7ff fcbe 	bl	8003288 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 800390c:	e002      	b.n	8003914 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 800390e:	20c0      	movs	r0, #192	@ 0xc0
 8003910:	f7ff fcba 	bl	8003288 <ssd1306_WriteCommand>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <HAL_MspInit+0x4c>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	4a0f      	ldr	r2, [pc, #60]	@ (8003968 <HAL_MspInit+0x4c>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003930:	6453      	str	r3, [r2, #68]	@ 0x44
 8003932:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <HAL_MspInit+0x4c>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_MspInit+0x4c>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	4a08      	ldr	r2, [pc, #32]	@ (8003968 <HAL_MspInit+0x4c>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	@ 0x40
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_MspInit+0x4c>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <HAL_ADC_MspInit+0x7c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d127      	bne.n	80039de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399c:	6453      	str	r3, [r2, #68]	@ 0x44
 800399e:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	4a0e      	ldr	r2, [pc, #56]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <HAL_ADC_MspInit+0x80>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039c6:	2302      	movs	r3, #2
 80039c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ca:	2303      	movs	r3, #3
 80039cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	4619      	mov	r1, r3
 80039d8:	4805      	ldr	r0, [pc, #20]	@ (80039f0 <HAL_ADC_MspInit+0x84>)
 80039da:	f001 fa09 	bl	8004df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039de:	bf00      	nop
 80039e0:	3728      	adds	r7, #40	@ 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40012000 	.word	0x40012000
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020400 	.word	0x40020400

080039f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a19      	ldr	r2, [pc, #100]	@ (8003a78 <HAL_I2C_MspInit+0x84>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d12b      	bne.n	8003a6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4a17      	ldr	r2, [pc, #92]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a32:	23c0      	movs	r3, #192	@ 0xc0
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a36:	2312      	movs	r3, #18
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a42:	2304      	movs	r3, #4
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	480c      	ldr	r0, [pc, #48]	@ (8003a80 <HAL_I2C_MspInit+0x8c>)
 8003a4e:	f001 f9cf 	bl	8004df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_I2C_MspInit+0x88>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a6e:	bf00      	nop
 8003a70:	3728      	adds	r7, #40	@ 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40005400 	.word	0x40005400
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020400 	.word	0x40020400

08003a84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa4:	d13a      	bne.n	8003b1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	4a1d      	ldr	r2, [pc, #116]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ac2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ad4:	230a      	movs	r3, #10
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4619      	mov	r1, r3
 8003ade:	4812      	ldr	r0, [pc, #72]	@ (8003b28 <HAL_PCD_MspInit+0xa4>)
 8003ae0:	f001 f986 	bl	8004df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aee:	6353      	str	r3, [r2, #52]	@ 0x34
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003afe:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b00:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_PCD_MspInit+0xa0>)
 8003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	2043      	movs	r0, #67	@ 0x43
 8003b12:	f000 ff28 	bl	8004966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003b16:	2043      	movs	r0, #67	@ 0x43
 8003b18:	f000 ff41 	bl	800499e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003b1c:	bf00      	nop
 8003b1e:	3728      	adds	r7, #40	@ 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020000 	.word	0x40020000

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8003b30:	bf00      	nop
 8003b32:	e7fd      	b.n	8003b30 <NMI_Handler+0x4>

08003b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003b38:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b3a:	bf00      	nop
 8003b3c:	e7fd      	b.n	8003b3a <HardFault_Handler+0x6>

08003b3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b42:	bf00      	nop
 8003b44:	e7fd      	b.n	8003b42 <MemManage_Handler+0x4>

08003b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <BusFault_Handler+0x4>

08003b4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <UsageFault_Handler+0x4>

08003b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b84:	f000 f9de 	bl	8003f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <SysTick_Handler+0x18>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a02      	ldr	r2, [pc, #8]	@ (8003b98 <SysTick_Handler+0x18>)
 8003b90:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20001504 	.word	0x20001504

08003b9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f008 fa25 	bl	800bff0 <dcd_int_handler>
	return;
 8003ba6:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  return 1;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_kill>:

int _kill(int pid, int sig)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bc4:	f009 fa36 	bl	800d034 <__errno>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2216      	movs	r2, #22
 8003bcc:	601a      	str	r2, [r3, #0]
  return -1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_exit>:

void _exit (int status)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003be2:	f04f 31ff 	mov.w	r1, #4294967295
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffe7 	bl	8003bba <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <_exit+0x12>

08003bf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e00a      	b.n	8003c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c02:	f3af 8000 	nop.w
 8003c06:	4601      	mov	r1, r0
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	60ba      	str	r2, [r7, #8]
 8003c0e:	b2ca      	uxtb	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3301      	adds	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	dbf0      	blt.n	8003c02 <_read+0x12>
  }

  return len;
 8003c20:	687b      	ldr	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e009      	b.n	8003c50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	60ba      	str	r2, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	dbf1      	blt.n	8003c3c <_write+0x12>
  }
  return len;
 8003c58:	687b      	ldr	r3, [r7, #4]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_close>:

int _close(int file)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_isatty>:

int _isatty(int file)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <_sbrk+0x5c>)
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <_sbrk+0x60>)
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce0:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <_sbrk+0x64>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <_sbrk+0x64>)
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <_sbrk+0x68>)
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d207      	bcs.n	8003d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cfc:	f009 f99a 	bl	800d034 <__errno>
 8003d00:	4603      	mov	r3, r0
 8003d02:	220c      	movs	r2, #12
 8003d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e009      	b.n	8003d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d0c:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <_sbrk+0x64>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	4a05      	ldr	r2, [pc, #20]	@ (8003d30 <_sbrk+0x64>)
 8003d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20020000 	.word	0x20020000
 8003d2c:	00000400 	.word	0x00000400
 8003d30:	20001508 	.word	0x20001508
 8003d34:	20001a48 	.word	0x20001a48

08003d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <SystemInit+0x20>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	4a05      	ldr	r2, [pc, #20]	@ (8003d58 <SystemInit+0x20>)
 8003d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003d60:	4b02      	ldr	r3, [pc, #8]	@ (8003d6c <tud_descriptor_device_cb+0x10>)
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	0800f148 	.word	0x0800f148

08003d70 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8003d7a:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <tud_hid_descriptor_report_cb+0x18>)
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	0800f15c 	.word	0x0800f15c

08003d8c <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8003d96:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <tud_descriptor_configuration_cb+0x18>)
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	0800f1b8 	.word	0x0800f1b8

08003da8 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	460a      	mov	r2, r1
 8003db2:	71fb      	strb	r3, [r7, #7]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003dbe:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <tud_descriptor_string_cb+0x9c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <tud_descriptor_string_cb+0xa0>)
 8003dc8:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e027      	b.n	8003e20 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d901      	bls.n	8003dda <tud_descriptor_string_cb+0x32>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e02f      	b.n	8003e3a <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	@ (8003e44 <tud_descriptor_string_cb+0x9c>)
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003de4:	68b8      	ldr	r0, [r7, #8]
 8003de6:	f7fc fa05 	bl	80001f4 <strlen>
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d901      	bls.n	8003df8 <tud_descriptor_string_cb+0x50>
 8003df4:	231f      	movs	r3, #31
 8003df6:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73bb      	strb	r3, [r7, #14]
 8003dfc:	e00c      	b.n	8003e18 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8003dfe:	7bbb      	ldrb	r3, [r7, #14]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4413      	add	r3, r2
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	7bbb      	ldrb	r3, [r7, #14]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <tud_descriptor_string_cb+0xa0>)
 8003e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003e12:	7bbb      	ldrb	r3, [r7, #14]
 8003e14:	3301      	adds	r3, #1
 8003e16:	73bb      	strb	r3, [r7, #14]
 8003e18:	7bba      	ldrb	r2, [r7, #14]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3ee      	bcc.n	8003dfe <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <tud_descriptor_string_cb+0xa0>)
 8003e36:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003e38:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <tud_descriptor_string_cb+0xa0>)
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000020c 	.word	0x2000020c
 8003e48:	2000150c 	.word	0x2000150c

08003e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e50:	f7ff ff72 	bl	8003d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e54:	480c      	ldr	r0, [pc, #48]	@ (8003e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e56:	490d      	ldr	r1, [pc, #52]	@ (8003e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e58:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e5c:	e002      	b.n	8003e64 <LoopCopyDataInit>

08003e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e62:	3304      	adds	r3, #4

08003e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e68:	d3f9      	bcc.n	8003e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e70:	e001      	b.n	8003e76 <LoopFillZerobss>

08003e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e74:	3204      	adds	r2, #4

08003e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e78:	d3fb      	bcc.n	8003e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e7a:	f009 f8e1 	bl	800d040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e7e:	f7fe fc89 	bl	8002794 <main>
  bx  lr    
 8003e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e8c:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003e90:	0800f474 	.word	0x0800f474
  ldr r2, =_sbss
 8003e94:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003e98:	20001a44 	.word	0x20001a44

08003e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e9c:	e7fe      	b.n	8003e9c <ADC_IRQHandler>
	...

08003ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <HAL_Init+0x40>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee0 <HAL_Init+0x40>)
 8003eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_Init+0x40>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_Init+0x40>)
 8003eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ebc:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_Init+0x40>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a07      	ldr	r2, [pc, #28]	@ (8003ee0 <HAL_Init+0x40>)
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f000 fd41 	bl	8004950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ece:	200f      	movs	r0, #15
 8003ed0:	f000 f808 	bl	8003ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ed4:	f7ff fd22 	bl	800391c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00

08003ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_InitTick+0x54>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_InitTick+0x58>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fd59 	bl	80049ba <HAL_SYSTICK_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00e      	b.n	8003f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d80a      	bhi.n	8003f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f000 fd21 	bl	8004966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f24:	4a06      	ldr	r2, [pc, #24]	@ (8003f40 <HAL_InitTick+0x5c>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000208 	.word	0x20000208
 8003f3c:	20000228 	.word	0x20000228
 8003f40:	20000224 	.word	0x20000224

08003f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_IncTick+0x20>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000228 	.word	0x20000228
 8003f68:	2000154c 	.word	0x2000154c

08003f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <HAL_GetTick+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2000154c 	.word	0x2000154c

08003f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7ff ffee 	bl	8003f6c <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d005      	beq.n	8003faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_Delay+0x44>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003faa:	bf00      	nop
 8003fac:	f7ff ffde 	bl	8003f6c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d8f7      	bhi.n	8003fac <HAL_Delay+0x28>
  {
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000228 	.word	0x20000228

08003fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e033      	b.n	800404a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fcbe 	bl	800396c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004012:	f023 0302 	bic.w	r3, r3, #2
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 faca 	bl	80045b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40
 800403a:	e001      	b.n	8004040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_ADC_Start+0x1a>
 800406a:	2302      	movs	r3, #2
 800406c:	e097      	b.n	800419e <HAL_ADC_Start+0x14a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d018      	beq.n	80040b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004094:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <HAL_ADC_Start+0x158>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a45      	ldr	r2, [pc, #276]	@ (80041b0 <HAL_ADC_Start+0x15c>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9a      	lsrs	r2, r3, #18
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80040a8:	e002      	b.n	80040b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f9      	bne.n	80040aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d15f      	bne.n	8004184 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004102:	d106      	bne.n	8004112 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f023 0206 	bic.w	r2, r3, #6
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004110:	e002      	b.n	8004118 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004120:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_ADC_Start+0x160>)
 8004122:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800412c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d129      	bne.n	800419c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	e020      	b.n	800419c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <HAL_ADC_Start+0x164>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d11b      	bne.n	800419c <HAL_ADC_Start+0x148>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d114      	bne.n	800419c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	e00b      	b.n	800419c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000208 	.word	0x20000208
 80041b0:	431bde83 	.word	0x431bde83
 80041b4:	40012300 	.word	0x40012300
 80041b8:	40012000 	.word	0x40012000

080041bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Stop+0x16>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e021      	b.n	8004216 <HAL_ADC_Stop+0x5a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d113      	bne.n	8004268 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800424a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424e:	d10b      	bne.n	8004268 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e063      	b.n	8004330 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004268:	f7ff fe80 	bl	8003f6c <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800426e:	e021      	b.n	80042b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d01d      	beq.n	80042b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_ADC_PollForConversion+0x6c>
 800427e:	f7ff fe75 	bl	8003f6c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d212      	bcs.n	80042b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d00b      	beq.n	80042b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e03d      	b.n	8004330 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d1d6      	bne.n	8004270 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0212 	mvn.w	r2, #18
 80042ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d123      	bne.n	800432e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11f      	bne.n	800432e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d111      	bne.n	800432e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x1c>
 800436c:	2302      	movs	r3, #2
 800436e:	e113      	b.n	8004598 <HAL_ADC_ConfigChannel+0x244>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b09      	cmp	r3, #9
 800437e:	d925      	bls.n	80043cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	3b1e      	subs	r3, #30
 8004396:	2207      	movs	r2, #7
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43da      	mvns	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	400a      	ands	r2, r1
 80043a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	4618      	mov	r0, r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4403      	add	r3, r0
 80043be:	3b1e      	subs	r3, #30
 80043c0:	409a      	lsls	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e022      	b.n	8004412 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6919      	ldr	r1, [r3, #16]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	2207      	movs	r2, #7
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43da      	mvns	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	400a      	ands	r2, r1
 80043ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6919      	ldr	r1, [r3, #16]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4618      	mov	r0, r3
 8004402:	4603      	mov	r3, r0
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4403      	add	r3, r0
 8004408:	409a      	lsls	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d824      	bhi.n	8004464 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	3b05      	subs	r3, #5
 800442c:	221f      	movs	r2, #31
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	400a      	ands	r2, r1
 800443a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	4618      	mov	r0, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	3b05      	subs	r3, #5
 8004456:	fa00 f203 	lsl.w	r2, r0, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	635a      	str	r2, [r3, #52]	@ 0x34
 8004462:	e04c      	b.n	80044fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d824      	bhi.n	80044b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b23      	subs	r3, #35	@ 0x23
 800447e:	221f      	movs	r2, #31
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43da      	mvns	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	400a      	ands	r2, r1
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	3b23      	subs	r3, #35	@ 0x23
 80044a8:	fa00 f203 	lsl.w	r2, r0, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b4:	e023      	b.n	80044fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	3b41      	subs	r3, #65	@ 0x41
 80044c8:	221f      	movs	r2, #31
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43da      	mvns	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	400a      	ands	r2, r1
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	3b41      	subs	r3, #65	@ 0x41
 80044f2:	fa00 f203 	lsl.w	r2, r0, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044fe:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <HAL_ADC_ConfigChannel+0x250>)
 8004500:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a28      	ldr	r2, [pc, #160]	@ (80045a8 <HAL_ADC_ConfigChannel+0x254>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10f      	bne.n	800452c <HAL_ADC_ConfigChannel+0x1d8>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b12      	cmp	r3, #18
 8004512:	d10b      	bne.n	800452c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_ADC_ConfigChannel+0x254>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d12b      	bne.n	800458e <HAL_ADC_ConfigChannel+0x23a>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <HAL_ADC_ConfigChannel+0x258>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x1f4>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b11      	cmp	r3, #17
 8004546:	d122      	bne.n	800458e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a11      	ldr	r2, [pc, #68]	@ (80045ac <HAL_ADC_ConfigChannel+0x258>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d111      	bne.n	800458e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <HAL_ADC_ConfigChannel+0x25c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a11      	ldr	r2, [pc, #68]	@ (80045b4 <HAL_ADC_ConfigChannel+0x260>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	0c9a      	lsrs	r2, r3, #18
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004580:	e002      	b.n	8004588 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3b01      	subs	r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f9      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40012300 	.word	0x40012300
 80045a8:	40012000 	.word	0x40012000
 80045ac:	10000012 	.word	0x10000012
 80045b0:	20000208 	.word	0x20000208
 80045b4:	431bde83 	.word	0x431bde83

080045b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c0:	4b79      	ldr	r3, [pc, #484]	@ (80047a8 <ADC_Init+0x1f0>)
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	021a      	lsls	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <ADC_Init+0x1f4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800465e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6899      	ldr	r1, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	e00f      	b.n	80046b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0202 	bic.w	r2, r2, #2
 80046c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7e1b      	ldrb	r3, [r3, #24]
 80046d0:	005a      	lsls	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004702:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	3b01      	subs	r3, #1
 8004710:	035a      	lsls	r2, r3, #13
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	e007      	b.n	800472c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	3b01      	subs	r3, #1
 8004748:	051a      	lsls	r2, r3, #20
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6899      	ldr	r1, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800476e:	025a      	lsls	r2, r3, #9
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6899      	ldr	r1, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	029a      	lsls	r2, r3, #10
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012300 	.word	0x40012300
 80047ac:	0f000001 	.word	0x0f000001

080047b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e2:	4a04      	ldr	r2, [pc, #16]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	60d3      	str	r3, [r2, #12]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4907      	ldr	r1, [pc, #28]	@ (800484c <__NVIC_EnableIRQ+0x38>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db0a      	blt.n	800487a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	490c      	ldr	r1, [pc, #48]	@ (800489c <__NVIC_SetPriority+0x4c>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	0112      	lsls	r2, r2, #4
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	440b      	add	r3, r1
 8004874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004878:	e00a      	b.n	8004890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4908      	ldr	r1, [pc, #32]	@ (80048a0 <__NVIC_SetPriority+0x50>)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	3b04      	subs	r3, #4
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	440b      	add	r3, r1
 800488e:	761a      	strb	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000e100 	.word	0xe000e100
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	@ 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf28      	it	cs
 80048c2:	2304      	movcs	r3, #4
 80048c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d902      	bls.n	80048d4 <NVIC_EncodePriority+0x30>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3b03      	subs	r3, #3
 80048d2:	e000      	b.n	80048d6 <NVIC_EncodePriority+0x32>
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	401a      	ands	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43d9      	mvns	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	4313      	orrs	r3, r2
         );
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	@ 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b01      	subs	r3, #1
 8004918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800491c:	d301      	bcc.n	8004922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800491e:	2301      	movs	r3, #1
 8004920:	e00f      	b.n	8004942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004922:	4a0a      	ldr	r2, [pc, #40]	@ (800494c <SysTick_Config+0x40>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492a:	210f      	movs	r1, #15
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	f7ff ff8e 	bl	8004850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <SysTick_Config+0x40>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493a:	4b04      	ldr	r3, [pc, #16]	@ (800494c <SysTick_Config+0x40>)
 800493c:	2207      	movs	r2, #7
 800493e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	e000e010 	.word	0xe000e010

08004950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff29 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004978:	f7ff ff3e 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 800497c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff ff8e 	bl	80048a4 <NVIC_EncodePriority>
 8004988:	4602      	mov	r2, r0
 800498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff5d 	bl	8004850 <__NVIC_SetPriority>
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff31 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffa2 	bl	800490c <SysTick_Config>
 80049c8:	4603      	mov	r3, r0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049e6:	4b23      	ldr	r3, [pc, #140]	@ (8004a74 <HAL_FLASH_Program+0xa0>)
 80049e8:	7e1b      	ldrb	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_FLASH_Program+0x1e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e03b      	b.n	8004a6a <HAL_FLASH_Program+0x96>
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_FLASH_Program+0xa0>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80049fc:	f000 f870 	bl	8004ae0 <FLASH_WaitForLastOperation>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d12b      	bne.n	8004a62 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004a10:	783b      	ldrb	r3, [r7, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f000 f91b 	bl	8004c50 <FLASH_Program_Byte>
 8004a1a:	e016      	b.n	8004a4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004a22:	883b      	ldrh	r3, [r7, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f000 f8ee 	bl	8004c08 <FLASH_Program_HalfWord>
 8004a2c:	e00d      	b.n	8004a4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d105      	bne.n	8004a40 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f000 f8c3 	bl	8004bc4 <FLASH_Program_Word>
 8004a3e:	e004      	b.n	8004a4a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a44:	68b8      	ldr	r0, [r7, #8]
 8004a46:	f000 f88b 	bl	8004b60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a4e:	f000 f847 	bl	8004ae0 <FLASH_WaitForLastOperation>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <HAL_FLASH_Program+0xa4>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	4a07      	ldr	r2, [pc, #28]	@ (8004a78 <HAL_FLASH_Program+0xa4>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_FLASH_Program+0xa0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20001550 	.word	0x20001550
 8004a78:	40023c00 	.word	0x40023c00

08004a7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a86:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_FLASH_Unlock+0x38>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da0b      	bge.n	8004aa6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_FLASH_Unlock+0x38>)
 8004a90:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <HAL_FLASH_Unlock+0x3c>)
 8004a92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <HAL_FLASH_Unlock+0x38>)
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <HAL_FLASH_Unlock+0x40>)
 8004a98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_FLASH_Unlock+0x38>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	da01      	bge.n	8004aa6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40023c00 	.word	0x40023c00
 8004ab8:	45670123 	.word	0x45670123
 8004abc:	cdef89ab 	.word	0xcdef89ab

08004ac0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_FLASH_Lock+0x1c>)
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	4a04      	ldr	r2, [pc, #16]	@ (8004adc <HAL_FLASH_Lock+0x1c>)
 8004aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ace:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40023c00 	.word	0x40023c00

08004ae0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <FLASH_WaitForLastOperation+0x78>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004af2:	f7ff fa3b 	bl	8003f6c <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004af8:	e010      	b.n	8004b1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d00c      	beq.n	8004b1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <FLASH_WaitForLastOperation+0x38>
 8004b08:	f7ff fa30 	bl	8003f6c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d201      	bcs.n	8004b1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e019      	b.n	8004b50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <FLASH_WaitForLastOperation+0x7c>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e8      	bne.n	8004afa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b28:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <FLASH_WaitForLastOperation+0x7c>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b34:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <FLASH_WaitForLastOperation+0x7c>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b3a:	4b08      	ldr	r3, [pc, #32]	@ (8004b5c <FLASH_WaitForLastOperation+0x7c>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b46:	f000 f8a5 	bl	8004c94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
  
}  
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20001550 	.word	0x20001550
 8004b5c:	40023c00 	.word	0x40023c00

08004b60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b6c:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	4a13      	ldr	r2, [pc, #76]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b78:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	4a10      	ldr	r2, [pc, #64]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b84:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <FLASH_Program_DoubleWord+0x60>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b96:	f3bf 8f6f 	isb	sy
}
 8004b9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	000a      	movs	r2, r1
 8004baa:	2300      	movs	r3, #0
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	3104      	adds	r1, #4
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	40023c00 	.word	0x40023c00

08004bc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004be4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004be6:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	4a06      	ldr	r2, [pc, #24]	@ (8004c04 <FLASH_Program_Word+0x40>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40023c00 	.word	0x40023c00

08004c08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a0c      	ldr	r2, [pc, #48]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a06      	ldr	r2, [pc, #24]	@ (8004c4c <FLASH_Program_HalfWord+0x44>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	801a      	strh	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4a0b      	ldr	r2, [pc, #44]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c6a:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <FLASH_Program_Byte+0x40>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	701a      	strb	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023c00 	.word	0x40023c00

08004c94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c98:	4b2f      	ldr	r3, [pc, #188]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004cae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004cb0:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004cb6:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f043 0308 	orr.w	r3, r3, #8
 8004cca:	4a24      	ldr	r2, [pc, #144]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004ccc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004cce:	4b22      	ldr	r3, [pc, #136]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004cd4:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004cea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cec:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cee:	2240      	movs	r2, #64	@ 0x40
 8004cf0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cf2:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004cfe:	4b17      	ldr	r3, [pc, #92]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d0a:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004d10:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	4a0d      	ldr	r2, [pc, #52]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f043 0320 	orr.w	r3, r3, #32
 8004d44:	4a05      	ldr	r2, [pc, #20]	@ (8004d5c <FLASH_SetErrorCode+0xc8>)
 8004d46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <FLASH_SetErrorCode+0xc4>)
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	60da      	str	r2, [r3, #12]
  }
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	20001550 	.word	0x20001550

08004d60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e010      	b.n	8004d9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d103      	bne.n	8004d8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e009      	b.n	8004d9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d103      	bne.n	8004d98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e002      	b.n	8004d9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004d98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004daa:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	490f      	ldr	r1, [pc, #60]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dbc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004dc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004dd4:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <FLASH_Erase_Sector+0x8c>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dde:	6113      	str	r3, [r2, #16]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40023c00 	.word	0x40023c00

08004df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e159      	b.n	80050c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	f040 8148 	bne.w	80050ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d005      	beq.n	8004e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d130      	bne.n	8004ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e78:	2201      	movs	r2, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 0201 	and.w	r2, r3, #1
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d017      	beq.n	8004ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	2203      	movs	r2, #3
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d123      	bne.n	8004f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	08da      	lsrs	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3208      	adds	r2, #8
 8004ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	220f      	movs	r2, #15
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	08da      	lsrs	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3208      	adds	r2, #8
 8004f2e:	69b9      	ldr	r1, [r7, #24]
 8004f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	2203      	movs	r2, #3
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0203 	and.w	r2, r3, #3
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a2 	beq.w	80050ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	4b57      	ldr	r3, [pc, #348]	@ (80050d8 <HAL_GPIO_Init+0x2e8>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	4a56      	ldr	r2, [pc, #344]	@ (80050d8 <HAL_GPIO_Init+0x2e8>)
 8004f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f86:	4b54      	ldr	r3, [pc, #336]	@ (80050d8 <HAL_GPIO_Init+0x2e8>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f92:	4a52      	ldr	r2, [pc, #328]	@ (80050dc <HAL_GPIO_Init+0x2ec>)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	089b      	lsrs	r3, r3, #2
 8004f98:	3302      	adds	r3, #2
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	220f      	movs	r2, #15
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a49      	ldr	r2, [pc, #292]	@ (80050e0 <HAL_GPIO_Init+0x2f0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d019      	beq.n	8004ff2 <HAL_GPIO_Init+0x202>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a48      	ldr	r2, [pc, #288]	@ (80050e4 <HAL_GPIO_Init+0x2f4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_GPIO_Init+0x1fe>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a47      	ldr	r2, [pc, #284]	@ (80050e8 <HAL_GPIO_Init+0x2f8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00d      	beq.n	8004fea <HAL_GPIO_Init+0x1fa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a46      	ldr	r2, [pc, #280]	@ (80050ec <HAL_GPIO_Init+0x2fc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <HAL_GPIO_Init+0x1f6>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a45      	ldr	r2, [pc, #276]	@ (80050f0 <HAL_GPIO_Init+0x300>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d101      	bne.n	8004fe2 <HAL_GPIO_Init+0x1f2>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e008      	b.n	8004ff4 <HAL_GPIO_Init+0x204>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e006      	b.n	8004ff4 <HAL_GPIO_Init+0x204>
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e004      	b.n	8004ff4 <HAL_GPIO_Init+0x204>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e002      	b.n	8004ff4 <HAL_GPIO_Init+0x204>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <HAL_GPIO_Init+0x204>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	f002 0203 	and.w	r2, r2, #3
 8004ffa:	0092      	lsls	r2, r2, #2
 8004ffc:	4093      	lsls	r3, r2
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005004:	4935      	ldr	r1, [pc, #212]	@ (80050dc <HAL_GPIO_Init+0x2ec>)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	3302      	adds	r3, #2
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005012:	4b38      	ldr	r3, [pc, #224]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005036:	4a2f      	ldr	r2, [pc, #188]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800503c:	4b2d      	ldr	r3, [pc, #180]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005060:	4a24      	ldr	r2, [pc, #144]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005066:	4b23      	ldr	r3, [pc, #140]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800508a:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005090:	4b18      	ldr	r3, [pc, #96]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b4:	4a0f      	ldr	r2, [pc, #60]	@ (80050f4 <HAL_GPIO_Init+0x304>)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b0f      	cmp	r3, #15
 80050c4:	f67f aea2 	bls.w	8004e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	3724      	adds	r7, #36	@ 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40013800 	.word	0x40013800
 80050e0:	40020000 	.word	0x40020000
 80050e4:	40020400 	.word	0x40020400
 80050e8:	40020800 	.word	0x40020800
 80050ec:	40020c00 	.word	0x40020c00
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40013c00 	.word	0x40013c00

080050f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
 8005104:	4613      	mov	r3, r2
 8005106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800510e:	887a      	ldrh	r2, [r7, #2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005114:	e003      	b.n	800511e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	619a      	str	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e12b      	b.n	8005396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fe fc4e 	bl	80039f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800517e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800518e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005190:	f001 f9b8 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8005194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4a81      	ldr	r2, [pc, #516]	@ (80053a0 <HAL_I2C_Init+0x274>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d807      	bhi.n	80051b0 <HAL_I2C_Init+0x84>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a80      	ldr	r2, [pc, #512]	@ (80053a4 <HAL_I2C_Init+0x278>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bf94      	ite	ls
 80051a8:	2301      	movls	r3, #1
 80051aa:	2300      	movhi	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e006      	b.n	80051be <HAL_I2C_Init+0x92>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a7d      	ldr	r2, [pc, #500]	@ (80053a8 <HAL_I2C_Init+0x27c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bf94      	ite	ls
 80051b8:	2301      	movls	r3, #1
 80051ba:	2300      	movhi	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0e7      	b.n	8005396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a78      	ldr	r2, [pc, #480]	@ (80053ac <HAL_I2C_Init+0x280>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0c9b      	lsrs	r3, r3, #18
 80051d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a6a      	ldr	r2, [pc, #424]	@ (80053a0 <HAL_I2C_Init+0x274>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d802      	bhi.n	8005200 <HAL_I2C_Init+0xd4>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3301      	adds	r3, #1
 80051fe:	e009      	b.n	8005214 <HAL_I2C_Init+0xe8>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a69      	ldr	r2, [pc, #420]	@ (80053b0 <HAL_I2C_Init+0x284>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	3301      	adds	r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	430b      	orrs	r3, r1
 800521a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005226:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	495c      	ldr	r1, [pc, #368]	@ (80053a0 <HAL_I2C_Init+0x274>)
 8005230:	428b      	cmp	r3, r1
 8005232:	d819      	bhi.n	8005268 <HAL_I2C_Init+0x13c>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e59      	subs	r1, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005248:	400b      	ands	r3, r1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_I2C_Init+0x138>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1e59      	subs	r1, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fbb1 f3f3 	udiv	r3, r1, r3
 800525c:	3301      	adds	r3, #1
 800525e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005262:	e051      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005264:	2304      	movs	r3, #4
 8005266:	e04f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d111      	bne.n	8005294 <HAL_I2C_Init+0x168>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e012      	b.n	80052ba <HAL_I2C_Init+0x18e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e58      	subs	r0, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	0099      	lsls	r1, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052aa:	3301      	adds	r3, #1
 80052ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Init+0x196>
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10e      	bne.n	80052e8 <HAL_I2C_Init+0x1bc>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1e58      	subs	r0, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	440b      	add	r3, r1
 80052d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e6:	e00f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	6809      	ldr	r1, [r1, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005336:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6911      	ldr	r1, [r2, #16]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	000186a0 	.word	0x000186a0
 80053a4:	001e847f 	.word	0x001e847f
 80053a8:	003d08ff 	.word	0x003d08ff
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	10624dd3 	.word	0x10624dd3

080053b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	460b      	mov	r3, r1
 80053c8:	813b      	strh	r3, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ce:	f7fe fdcd 	bl	8003f6c <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 80d9 	bne.w	8005594 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2319      	movs	r3, #25
 80053e8:	2201      	movs	r2, #1
 80053ea:	496d      	ldr	r1, [pc, #436]	@ (80055a0 <HAL_I2C_Mem_Write+0x1ec>)
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f971 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
 80053fa:	e0cc      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_I2C_Mem_Write+0x56>
 8005406:	2302      	movs	r3, #2
 8005408:	e0c5      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d007      	beq.n	8005430 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800543e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2221      	movs	r2, #33	@ 0x21
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a4d      	ldr	r2, [pc, #308]	@ (80055a4 <HAL_I2C_Mem_Write+0x1f0>)
 8005470:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005472:	88f8      	ldrh	r0, [r7, #6]
 8005474:	893a      	ldrh	r2, [r7, #8]
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4603      	mov	r3, r0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f890 	bl	80055a8 <I2C_RequestMemoryWrite>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d052      	beq.n	8005534 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e081      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa36 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d107      	bne.n	80054ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e06b      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d11b      	bne.n	8005534 <HAL_I2C_Mem_Write+0x180>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d017      	beq.n	8005534 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1aa      	bne.n	8005492 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fa29 	bl	8005998 <I2C_WaitOnBTFFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	2b04      	cmp	r3, #4
 8005552:	d107      	bne.n	8005564 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e016      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	00100002 	.word	0x00100002
 80055a4:	ffff0000 	.word	0xffff0000

080055a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	817b      	strh	r3, [r7, #10]
 80055ba:	460b      	mov	r3, r1
 80055bc:	813b      	strh	r3, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2200      	movs	r2, #0
 80055da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f878 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f8:	d103      	bne.n	8005602 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e05f      	b.n	80056c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005614:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	492d      	ldr	r1, [pc, #180]	@ (80056d0 <I2C_RequestMemoryWrite+0x128>)
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f8d3 	bl	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e04c      	b.n	80056c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005644:	6a39      	ldr	r1, [r7, #32]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f95e 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00d      	beq.n	800566e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b04      	cmp	r3, #4
 8005658:	d107      	bne.n	800566a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005668:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e02b      	b.n	80056c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005674:	893b      	ldrh	r3, [r7, #8]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]
 800567e:	e021      	b.n	80056c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	b29b      	uxth	r3, r3
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f938 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e005      	b.n	80056c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ba:	893b      	ldrh	r3, [r7, #8]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	00010002 	.word	0x00010002

080056d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e4:	e048      	b.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d044      	beq.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fe fc3d 	bl	8003f6c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d139      	bne.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10d      	bne.n	800572a <I2C_WaitOnFlagUntilTimeout+0x56>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	43da      	mvns	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	e00c      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x70>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	43da      	mvns	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4013      	ands	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	429a      	cmp	r2, r3
 8005748:	d116      	bne.n	8005778 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e023      	b.n	80057c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10d      	bne.n	800579e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	e00c      	b.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d093      	beq.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d6:	e071      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e6:	d123      	bne.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e067      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d041      	beq.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7fe fb98 	bl	8003f6c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d136      	bne.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10c      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e00b      	b.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e021      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10c      	bne.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	43da      	mvns	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e00b      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f af6d 	bne.w	80057d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005914:	e034      	b.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f886 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e034      	b.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d028      	beq.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fe fb1d 	bl	8003f6c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11d      	bne.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b80      	cmp	r3, #128	@ 0x80
 8005950:	d016      	beq.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e007      	b.n	8005990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598a:	2b80      	cmp	r3, #128	@ 0x80
 800598c:	d1c3      	bne.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a4:	e034      	b.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f83e 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e034      	b.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d028      	beq.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fe fad5 	bl	8003f6c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11d      	bne.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d016      	beq.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d1c3      	bne.n	80059a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3e:	d11b      	bne.n	8005a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	f043 0204 	orr.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af02      	add	r7, sp, #8
 8005a8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e101      	b.n	8005c9c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fd ffe6 	bl	8003a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2203      	movs	r2, #3
 8005abc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac6:	d102      	bne.n	8005ace <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fd8e 	bl	80065f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7c1a      	ldrb	r2, [r3, #16]
 8005ae0:	f88d 2000 	strb.w	r2, [sp]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae8:	f000 fd20 	bl	800652c <USB_CoreInit>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0ce      	b.n	8005c9c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fd86 	bl	8006616 <USB_SetCurrentMode>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0bf      	b.n	8005c9c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e04a      	b.n	8005bb8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3315      	adds	r3, #21
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3314      	adds	r3, #20
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b4a:	7bfa      	ldrb	r2, [r7, #15]
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	b298      	uxth	r0, r3
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	332e      	adds	r3, #46	@ 0x2e
 8005b5e:	4602      	mov	r2, r0
 8005b60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b62:	7bfa      	ldrb	r2, [r7, #15]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	3318      	adds	r3, #24
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	331c      	adds	r3, #28
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b8a:	7bfa      	ldrb	r2, [r7, #15]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3320      	adds	r3, #32
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	3324      	adds	r3, #36	@ 0x24
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3af      	bcc.n	8005b22 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
 8005bc6:	e044      	b.n	8005c52 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bc8:	7bfa      	ldrb	r2, [r7, #15]
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bde:	7bfa      	ldrb	r2, [r7, #15]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005bf0:	7bfa      	ldrb	r2, [r7, #15]
 8005bf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bf4:	7bfa      	ldrb	r2, [r7, #15]
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c0a:	7bfa      	ldrb	r2, [r7, #15]
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	7bfa      	ldrb	r2, [r7, #15]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3b5      	bcc.n	8005bc8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7c1a      	ldrb	r2, [r3, #16]
 8005c64:	f88d 2000 	strb.w	r2, [sp]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c6c:	f000 fd20 	bl	80066b0 <USB_DevInit>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e00c      	b.n	8005c9c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fee8 	bl	8006a6a <USB_DevDisconnect>

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e267      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d075      	beq.n	8005dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc2:	4b88      	ldr	r3, [pc, #544]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d00c      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cce:	4b85      	ldr	r3, [pc, #532]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d112      	bne.n	8005d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cda:	4b82      	ldr	r3, [pc, #520]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce6:	d10b      	bne.n	8005d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d05b      	beq.n	8005dac <HAL_RCC_OscConfig+0x108>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d157      	bne.n	8005dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e242      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d08:	d106      	bne.n	8005d18 <HAL_RCC_OscConfig+0x74>
 8005d0a:	4b76      	ldr	r3, [pc, #472]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a75      	ldr	r2, [pc, #468]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e01d      	b.n	8005d54 <HAL_RCC_OscConfig+0xb0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d20:	d10c      	bne.n	8005d3c <HAL_RCC_OscConfig+0x98>
 8005d22:	4b70      	ldr	r3, [pc, #448]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6f      	ldr	r2, [pc, #444]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6c      	ldr	r2, [pc, #432]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e00b      	b.n	8005d54 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	4b69      	ldr	r3, [pc, #420]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a68      	ldr	r2, [pc, #416]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4b66      	ldr	r3, [pc, #408]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a65      	ldr	r2, [pc, #404]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d013      	beq.n	8005d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fe f906 	bl	8003f6c <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d64:	f7fe f902 	bl	8003f6c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	@ 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e207      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d76:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0xc0>
 8005d82:	e014      	b.n	8005dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d84:	f7fe f8f2 	bl	8003f6c <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d8c:	f7fe f8ee 	bl	8003f6c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	@ 0x64
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e1f3      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9e:	4b51      	ldr	r3, [pc, #324]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0xe8>
 8005daa:	e000      	b.n	8005dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d063      	beq.n	8005e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dba:	4b4a      	ldr	r3, [pc, #296]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d11c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd2:	4b44      	ldr	r3, [pc, #272]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d116      	bne.n	8005e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	4b41      	ldr	r3, [pc, #260]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_RCC_OscConfig+0x152>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e1c7      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4937      	ldr	r1, [pc, #220]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0a:	e03a      	b.n	8005e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d020      	beq.n	8005e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e14:	4b34      	ldr	r3, [pc, #208]	@ (8005ee8 <HAL_RCC_OscConfig+0x244>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fe f8a7 	bl	8003f6c <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e22:	f7fe f8a3 	bl	8003f6c <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e1a8      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4925      	ldr	r1, [pc, #148]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]
 8005e54:	e015      	b.n	8005e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e56:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <HAL_RCC_OscConfig+0x244>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fe f886 	bl	8003f6c <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e64:	f7fe f882 	bl	8003f6c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e187      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d036      	beq.n	8005efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e96:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <HAL_RCC_OscConfig+0x248>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f866 	bl	8003f6c <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea4:	f7fe f862 	bl	8003f6c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e167      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee4 <HAL_RCC_OscConfig+0x240>)
 8005eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0f0      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x200>
 8005ec2:	e01b      	b.n	8005efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ec4:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <HAL_RCC_OscConfig+0x248>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eca:	f7fe f84f 	bl	8003f6c <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed0:	e00e      	b.n	8005ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ed2:	f7fe f84b 	bl	8003f6c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d907      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e150      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	42470000 	.word	0x42470000
 8005eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef0:	4b88      	ldr	r3, [pc, #544]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ea      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8097 	beq.w	8006038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f0e:	4b81      	ldr	r3, [pc, #516]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	4a7c      	ldr	r2, [pc, #496]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3a:	4b77      	ldr	r3, [pc, #476]	@ (8006118 <HAL_RCC_OscConfig+0x474>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d118      	bne.n	8005f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f46:	4b74      	ldr	r3, [pc, #464]	@ (8006118 <HAL_RCC_OscConfig+0x474>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a73      	ldr	r2, [pc, #460]	@ (8006118 <HAL_RCC_OscConfig+0x474>)
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f52:	f7fe f80b 	bl	8003f6c <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5a:	f7fe f807 	bl	8003f6c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e10c      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006118 <HAL_RCC_OscConfig+0x474>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCC_OscConfig+0x2ea>
 8005f80:	4b64      	ldr	r3, [pc, #400]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f84:	4a63      	ldr	r2, [pc, #396]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f8c:	e01c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x324>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x30c>
 8005f96:	4b5f      	ldr	r3, [pc, #380]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	f043 0304 	orr.w	r3, r3, #4
 8005fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCC_OscConfig+0x324>
 8005fb0:	4b58      	ldr	r3, [pc, #352]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb4:	4a57      	ldr	r2, [pc, #348]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f023 0301 	bic.w	r3, r3, #1
 8005fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbc:	4b55      	ldr	r3, [pc, #340]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc0:	4a54      	ldr	r2, [pc, #336]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	f023 0304 	bic.w	r3, r3, #4
 8005fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd0:	f7fd ffcc 	bl	8003f6c <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd8:	f7fd ffc8 	bl	8003f6c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0cb      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fee:	4b49      	ldr	r3, [pc, #292]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0ee      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x334>
 8005ffa:	e014      	b.n	8006026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffc:	f7fd ffb6 	bl	8003f6c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006002:	e00a      	b.n	800601a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006004:	f7fd ffb2 	bl	8003f6c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e0b5      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601a:	4b3e      	ldr	r3, [pc, #248]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ee      	bne.n	8006004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800602c:	4b39      	ldr	r3, [pc, #228]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	4a38      	ldr	r2, [pc, #224]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8006032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 80a1 	beq.w	8006184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006042:	4b34      	ldr	r3, [pc, #208]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 030c 	and.w	r3, r3, #12
 800604a:	2b08      	cmp	r3, #8
 800604c:	d05c      	beq.n	8006108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d141      	bne.n	80060da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006056:	4b31      	ldr	r3, [pc, #196]	@ (800611c <HAL_RCC_OscConfig+0x478>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fd ff86 	bl	8003f6c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd ff82 	bl	8003f6c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e087      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	3b01      	subs	r3, #1
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	491b      	ldr	r1, [pc, #108]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ac:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <HAL_RCC_OscConfig+0x478>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fd ff5b 	bl	8003f6c <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ba:	f7fd ff57 	bl	8003f6c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e05c      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060cc:	4b11      	ldr	r3, [pc, #68]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x416>
 80060d8:	e054      	b.n	8006184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060da:	4b10      	ldr	r3, [pc, #64]	@ (800611c <HAL_RCC_OscConfig+0x478>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fd ff44 	bl	8003f6c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fd ff40 	bl	8003f6c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e045      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <HAL_RCC_OscConfig+0x470>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x444>
 8006106:	e03d      	b.n	8006184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d107      	bne.n	8006120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e038      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
 8006114:	40023800 	.word	0x40023800
 8006118:	40007000 	.word	0x40007000
 800611c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <HAL_RCC_OscConfig+0x4ec>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d028      	beq.n	8006180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d121      	bne.n	8006180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d11a      	bne.n	8006180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006158:	4293      	cmp	r3, r2
 800615a:	d111      	bne.n	8006180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	3b01      	subs	r3, #1
 800616a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d107      	bne.n	8006180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800

08006194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0cc      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061a8:	4b68      	ldr	r3, [pc, #416]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d90c      	bls.n	80061d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b65      	ldr	r3, [pc, #404]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b63      	ldr	r3, [pc, #396]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0b8      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061e8:	4b59      	ldr	r3, [pc, #356]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a58      	ldr	r2, [pc, #352]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006200:	4b53      	ldr	r3, [pc, #332]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4a52      	ldr	r2, [pc, #328]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800620a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620c:	4b50      	ldr	r3, [pc, #320]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	494d      	ldr	r1, [pc, #308]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d044      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d107      	bne.n	8006242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006232:	4b47      	ldr	r3, [pc, #284]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d119      	bne.n	8006272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e07f      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d003      	beq.n	8006252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624e:	2b03      	cmp	r3, #3
 8006250:	d107      	bne.n	8006262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006252:	4b3f      	ldr	r3, [pc, #252]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e06f      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006262:	4b3b      	ldr	r3, [pc, #236]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e067      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006272:	4b37      	ldr	r3, [pc, #220]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 0203 	bic.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4934      	ldr	r1, [pc, #208]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006284:	f7fd fe72 	bl	8003f6c <HAL_GetTick>
 8006288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628c:	f7fd fe6e 	bl	8003f6c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e04f      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 020c 	and.w	r2, r3, #12
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d1eb      	bne.n	800628c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b4:	4b25      	ldr	r3, [pc, #148]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d20c      	bcs.n	80062dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c2:	4b22      	ldr	r3, [pc, #136]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ca:	4b20      	ldr	r3, [pc, #128]	@ (800634c <HAL_RCC_ClockConfig+0x1b8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d001      	beq.n	80062dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e032      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062e8:	4b19      	ldr	r3, [pc, #100]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4916      	ldr	r1, [pc, #88]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006306:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	490e      	ldr	r1, [pc, #56]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800631a:	f000 f821 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 800631e:	4602      	mov	r2, r0
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	490a      	ldr	r1, [pc, #40]	@ (8006354 <HAL_RCC_ClockConfig+0x1c0>)
 800632c:	5ccb      	ldrb	r3, [r1, r3]
 800632e:	fa22 f303 	lsr.w	r3, r2, r3
 8006332:	4a09      	ldr	r2, [pc, #36]	@ (8006358 <HAL_RCC_ClockConfig+0x1c4>)
 8006334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006336:	4b09      	ldr	r3, [pc, #36]	@ (800635c <HAL_RCC_ClockConfig+0x1c8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd fdd2 	bl	8003ee4 <HAL_InitTick>

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40023c00 	.word	0x40023c00
 8006350:	40023800 	.word	0x40023800
 8006354:	0800f130 	.word	0x0800f130
 8006358:	20000208 	.word	0x20000208
 800635c:	20000224 	.word	0x20000224

08006360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006364:	b090      	sub	sp, #64	@ 0x40
 8006366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	637b      	str	r3, [r7, #52]	@ 0x34
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006370:	2300      	movs	r3, #0
 8006372:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006378:	4b59      	ldr	r3, [pc, #356]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 030c 	and.w	r3, r3, #12
 8006380:	2b08      	cmp	r3, #8
 8006382:	d00d      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006384:	2b08      	cmp	r3, #8
 8006386:	f200 80a1 	bhi.w	80064cc <HAL_RCC_GetSysClockFreq+0x16c>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x34>
 800638e:	2b04      	cmp	r3, #4
 8006390:	d003      	beq.n	800639a <HAL_RCC_GetSysClockFreq+0x3a>
 8006392:	e09b      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006394:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006396:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006398:	e09b      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800639a:	4b53      	ldr	r3, [pc, #332]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800639c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800639e:	e098      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a0:	4b4f      	ldr	r3, [pc, #316]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063aa:	4b4d      	ldr	r3, [pc, #308]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d028      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b6:	4b4a      	ldr	r3, [pc, #296]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	2200      	movs	r2, #0
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063c8:	2100      	movs	r1, #0
 80063ca:	4b47      	ldr	r3, [pc, #284]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063cc:	fb03 f201 	mul.w	r2, r3, r1
 80063d0:	2300      	movs	r3, #0
 80063d2:	fb00 f303 	mul.w	r3, r0, r3
 80063d6:	4413      	add	r3, r2
 80063d8:	4a43      	ldr	r2, [pc, #268]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063da:	fba0 1202 	umull	r1, r2, r0, r2
 80063de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063e0:	460a      	mov	r2, r1
 80063e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e6:	4413      	add	r3, r2
 80063e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ec:	2200      	movs	r2, #0
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	61fa      	str	r2, [r7, #28]
 80063f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063fa:	f7f9 ff59 	bl	80002b0 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4613      	mov	r3, r2
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006406:	e053      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006408:	4b35      	ldr	r3, [pc, #212]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	2200      	movs	r2, #0
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	617a      	str	r2, [r7, #20]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800641a:	f04f 0b00 	mov.w	fp, #0
 800641e:	4652      	mov	r2, sl
 8006420:	465b      	mov	r3, fp
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	0159      	lsls	r1, r3, #5
 800642c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006430:	0150      	lsls	r0, r2, #5
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	ebb2 080a 	subs.w	r8, r2, sl
 800643a:	eb63 090b 	sbc.w	r9, r3, fp
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800644a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800644e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006452:	ebb2 0408 	subs.w	r4, r2, r8
 8006456:	eb63 0509 	sbc.w	r5, r3, r9
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	00eb      	lsls	r3, r5, #3
 8006464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006468:	00e2      	lsls	r2, r4, #3
 800646a:	4614      	mov	r4, r2
 800646c:	461d      	mov	r5, r3
 800646e:	eb14 030a 	adds.w	r3, r4, sl
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	eb45 030b 	adc.w	r3, r5, fp
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006486:	4629      	mov	r1, r5
 8006488:	028b      	lsls	r3, r1, #10
 800648a:	4621      	mov	r1, r4
 800648c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006490:	4621      	mov	r1, r4
 8006492:	028a      	lsls	r2, r1, #10
 8006494:	4610      	mov	r0, r2
 8006496:	4619      	mov	r1, r3
 8006498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649a:	2200      	movs	r2, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	60fa      	str	r2, [r7, #12]
 80064a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a4:	f7f9 ff04 	bl	80002b0 <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4613      	mov	r3, r2
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	3301      	adds	r3, #1
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80064c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80064ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3740      	adds	r7, #64	@ 0x40
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064de:	bf00      	nop
 80064e0:	40023800 	.word	0x40023800
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	018cba80 	.word	0x018cba80

080064ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f0:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f2:	681b      	ldr	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000208 	.word	0x20000208

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006508:	f7ff fff0 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0a9b      	lsrs	r3, r3, #10
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4903      	ldr	r1, [pc, #12]	@ (8006528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40023800 	.word	0x40023800
 8006528:	0800f140 	.word	0x0800f140

0800652c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800652c:	b084      	sub	sp, #16
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	f107 001c 	add.w	r0, r7, #28
 800653a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800653e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006542:	2b01      	cmp	r3, #1
 8006544:	d123      	bne.n	800658e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800655a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800656e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006572:	2b01      	cmp	r3, #1
 8006574:	d105      	bne.n	8006582 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 faa0 	bl	8006ac8 <USB_CoreReset>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
 800658c:	e01b      	b.n	80065c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa94 	bl	8006ac8 <USB_CoreReset>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80065b8:	e005      	b.n	80065c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065c6:	7fbb      	ldrb	r3, [r7, #30]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10b      	bne.n	80065e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f043 0206 	orr.w	r2, r3, #6
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065f0:	b004      	add	sp, #16
 80065f2:	4770      	bx	lr

080065f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 0201 	bic.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d115      	bne.n	8006664 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006644:	200a      	movs	r0, #10
 8006646:	f7fd fc9d 	bl	8003f84 <HAL_Delay>
      ms += 10U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	330a      	adds	r3, #10
 800664e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa2b 	bl	8006aac <USB_GetMode>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d01e      	beq.n	800669a <USB_SetCurrentMode+0x84>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006660:	d9f0      	bls.n	8006644 <USB_SetCurrentMode+0x2e>
 8006662:	e01a      	b.n	800669a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d115      	bne.n	8006696 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006676:	200a      	movs	r0, #10
 8006678:	f7fd fc84 	bl	8003f84 <HAL_Delay>
      ms += 10U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	330a      	adds	r3, #10
 8006680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa12 	bl	8006aac <USB_GetMode>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <USB_SetCurrentMode+0x84>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2bc7      	cmp	r3, #199	@ 0xc7
 8006692:	d9f0      	bls.n	8006676 <USB_SetCurrentMode+0x60>
 8006694:	e001      	b.n	800669a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e005      	b.n	80066a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2bc8      	cmp	r3, #200	@ 0xc8
 800669e:	d101      	bne.n	80066a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066b0:	b084      	sub	sp, #16
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e009      	b.n	80066e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3340      	adds	r3, #64	@ 0x40
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0e      	cmp	r3, #14
 80066e8:	d9f2      	bls.n	80066d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d11c      	bne.n	800672c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006722:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	@ 0x38
 800672a:	e00b      	b.n	8006744 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006730:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006750:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10d      	bne.n	8006774 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f968 	bl	8006a38 <USB_SetDevSpeed>
 8006768:	e008      	b.n	800677c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800676a:	2101      	movs	r1, #1
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f963 	bl	8006a38 <USB_SetDevSpeed>
 8006772:	e003      	b.n	800677c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006774:	2103      	movs	r1, #3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f95e 	bl	8006a38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800677c:	2110      	movs	r1, #16
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8fa 	bl	8006978 <USB_FlushTxFifo>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f924 	bl	80069dc <USB_FlushRxFifo>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b0:	461a      	mov	r2, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067bc:	461a      	mov	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	e043      	b.n	8006850 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067de:	d118      	bne.n	8006812 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e013      	b.n	8006824 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e008      	b.n	8006824 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	461a      	mov	r2, r3
 8006844:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3301      	adds	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006854:	461a      	mov	r2, r3
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4293      	cmp	r3, r2
 800685a:	d3b5      	bcc.n	80067c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e043      	b.n	80068ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006878:	d118      	bne.n	80068ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e013      	b.n	80068be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	461a      	mov	r2, r3
 80068a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e008      	b.n	80068be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068ee:	461a      	mov	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d3b5      	bcc.n	8006862 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006908:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006916:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f043 0210 	orr.w	r2, r3, #16
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <USB_DevInit+0x2c4>)
 8006932:	4313      	orrs	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006938:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f043 0208 	orr.w	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800694c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	803c3800 	.word	0x803c3800

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006992:	d901      	bls.n	8006998 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01b      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf2      	bge.n	8006986 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	019b      	lsls	r3, r3, #6
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069bc:	d901      	bls.n	80069c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e006      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d0f0      	beq.n	80069b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f4:	d901      	bls.n	80069fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e018      	b.n	8006a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	daf2      	bge.n	80069e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2210      	movs	r2, #16
 8006a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a18:	d901      	bls.n	8006a1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e006      	b.n	8006a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d0f0      	beq.n	8006a0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a98:	f043 0302 	orr.w	r3, r3, #2
 8006a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ae0:	d901      	bls.n	8006ae6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e01b      	b.n	8006b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	daf2      	bge.n	8006ad4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b0a:	d901      	bls.n	8006b10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e006      	b.n	8006b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d0f0      	beq.n	8006afe <USB_CoreReset+0x36>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	22e8      	movs	r2, #232	@ 0xe8
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
 8006b42:	4a30      	ldr	r2, [pc, #192]	@ (8006c04 <_prep_out_transaction+0xd8>)
 8006b44:	4413      	add	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	01db      	lsls	r3, r3, #7
 8006b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006c08 <_prep_out_transaction+0xdc>)
 8006b4e:	4413      	add	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8006b52:	f002 f851 	bl	8008bf8 <tud_mounted>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <_prep_out_transaction+0x44>
 8006b5c:	f002 f85e 	bl	8008c1c <tud_suspended>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f083 0301 	eor.w	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <_prep_out_transaction+0x44>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <_prep_out_transaction+0x46>
 8006b70:	2300      	movs	r3, #0
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8006b78:	f083 0301 	eor.w	r3, r3, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <_prep_out_transaction+0x5e>
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	78db      	ldrb	r3, [r3, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <_prep_out_transaction+0x62>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e035      	b.n	8006bfa <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3310      	adds	r3, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 feab 	bl	80088ee <tu_fifo_remaining>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8006b9c:	897b      	ldrh	r3, [r7, #10]
 8006b9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ba0:	d801      	bhi.n	8006ba6 <_prep_out_transaction+0x7a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e029      	b.n	8006bfa <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	78da      	ldrb	r2, [r3, #3]
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f003 fb44 	bl	800a23c <usbd_edpt_claim>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f083 0301 	eor.w	r3, r3, #1
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <_prep_out_transaction+0x98>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e01a      	b.n	8006bfa <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fe90 	bl	80088ee <tu_fifo_remaining>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bd6:	d908      	bls.n	8006bea <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	78d9      	ldrb	r1, [r3, #3]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	7df8      	ldrb	r0, [r7, #23]
 8006be0:	2340      	movs	r3, #64	@ 0x40
 8006be2:	f003 fb7b 	bl	800a2dc <usbd_edpt_xfer>
 8006be6:	4603      	mov	r3, r0
 8006be8:	e007      	b.n	8006bfa <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	78da      	ldrb	r2, [r3, #3]
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f003 fb4a 	bl	800a28c <usbd_edpt_release>
    return false;
 8006bf8:	2300      	movs	r3, #0
  }
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20001570 	.word	0x20001570
 8006c08:	20001658 	.word	0x20001658

08006c0c <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	71fb      	strb	r3, [r7, #7]
 8006c16:	f001 ffef 	bl	8008bf8 <tud_mounted>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <tud_cdc_n_connected+0x28>
 8006c20:	f001 fffc 	bl	8008c1c <tud_suspended>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f083 0301 	eor.w	r3, r3, #1
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <tud_cdc_n_connected+0x28>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <tud_cdc_n_connected+0x2a>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d019      	beq.n	8006c74 <tud_cdc_n_connected+0x68>
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	4a10      	ldr	r2, [pc, #64]	@ (8006c84 <tud_cdc_n_connected+0x78>)
 8006c44:	21e8      	movs	r1, #232	@ 0xe8
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	2300      	movs	r3, #0
 8006c54:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bf14      	ite	ne
 8006c66:	2301      	movne	r3, #1
 8006c68:	2300      	moveq	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <tud_cdc_n_connected+0x68>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <tud_cdc_n_connected+0x6a>
 8006c74:	2300      	movs	r3, #0
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20001570 	.word	0x20001570

08006c88 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	22e8      	movs	r2, #232	@ 0xe8
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	4a04      	ldr	r2, [pc, #16]	@ (8006cb0 <tud_cdc_n_available+0x28>)
 8006c9e:	4413      	add	r3, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fdaf 	bl	8008804 <tu_fifo_count>
 8006ca6:	4603      	mov	r3, r0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20001570 	.word	0x20001570

08006cb4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	22e8      	movs	r2, #232	@ 0xe8
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	4a0f      	ldr	r2, [pc, #60]	@ (8006d08 <tud_cdc_n_read+0x54>)
 8006ccc:	4413      	add	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f103 0010 	add.w	r0, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d802      	bhi.n	8006ce6 <tud_cdc_n_read+0x32>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	e001      	b.n	8006cea <tud_cdc_n_read+0x36>
 8006ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cea:	461a      	mov	r2, r3
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	f001 fe5a 	bl	80089a6 <tu_fifo_read_n>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff17 	bl	8006b2c <_prep_out_transaction>
  return num_read;
 8006cfe:	693b      	ldr	r3, [r7, #16]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20001570 	.word	0x20001570

08006d0c <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	22e8      	movs	r2, #232	@ 0xe8
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	4a13      	ldr	r2, [pc, #76]	@ (8006d70 <tud_cdc_n_write+0x64>)
 8006d24:	4413      	add	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f103 001c 	add.w	r0, r3, #28
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d802      	bhi.n	8006d3e <tud_cdc_n_write+0x32>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	e001      	b.n	8006d42 <tud_cdc_n_write+0x36>
 8006d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d42:	461a      	mov	r2, r3
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	f001 fe95 	bl	8008a74 <tu_fifo_write_n>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	331c      	adds	r3, #28
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fd56 	bl	8008804 <tu_fifo_count>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d5c:	d903      	bls.n	8006d66 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f807 	bl	8006d74 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8006d66:	8a7b      	ldrh	r3, [r7, #18]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20001570 	.word	0x20001570

08006d74 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	22e8      	movs	r2, #232	@ 0xe8
 8006d82:	fb02 f303 	mul.w	r3, r2, r3
 8006d86:	4a39      	ldr	r2, [pc, #228]	@ (8006e6c <tud_cdc_n_write_flush+0xf8>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	01db      	lsls	r3, r3, #7
 8006d90:	4a37      	ldr	r2, [pc, #220]	@ (8006e70 <tud_cdc_n_write_flush+0xfc>)
 8006d92:	4413      	add	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	f001 ff2f 	bl	8008bf8 <tud_mounted>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <tud_cdc_n_write_flush+0x40>
 8006da0:	f001 ff3c 	bl	8008c1c <tud_suspended>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f083 0301 	eor.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <tud_cdc_n_write_flush+0x40>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <tud_cdc_n_write_flush+0x42>
 8006db4:	2300      	movs	r3, #0
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8006dbc:	f083 0301 	eor.w	r3, r3, #1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <tud_cdc_n_write_flush+0x56>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e04c      	b.n	8006e64 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	331c      	adds	r3, #28
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fd18 	bl	8008804 <tu_fifo_count>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e042      	b.n	8006e64 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	789a      	ldrb	r2, [r3, #2]
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f003 fa26 	bl	800a23c <usbd_edpt_claim>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f083 0301 	eor.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <tud_cdc_n_write_flush+0x8c>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e031      	b.n	8006e64 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f103 001c 	add.w	r0, r3, #28
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3340      	adds	r3, #64	@ 0x40
 8006e0a:	2240      	movs	r2, #64	@ 0x40
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f001 fdca 	bl	80089a6 <tu_fifo_read_n>
 8006e12:	4603      	mov	r3, r0
 8006e14:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006e16:	89bb      	ldrh	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	7899      	ldrb	r1, [r3, #2]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	7bf8      	ldrb	r0, [r7, #15]
 8006e2a:	f003 fa57 	bl	800a2dc <usbd_edpt_xfer>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f083 0301 	eor.w	r3, r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <tud_cdc_n_write_flush+0xdc>
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e74 <tud_cdc_n_write_flush+0x100>)
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d000      	beq.n	8006e4c <tud_cdc_n_write_flush+0xd8>
 8006e4a:	be00      	bkpt	0x0000
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e009      	b.n	8006e64 <tud_cdc_n_write_flush+0xf0>
    return count;
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	e007      	b.n	8006e64 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	789a      	ldrb	r2, [r3, #2]
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f003 fa15 	bl	800a28c <usbd_edpt_release>
    return 0;
 8006e62:	2300      	movs	r3, #0
  }
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20001570 	.word	0x20001570
 8006e70:	20001658 	.word	0x20001658
 8006e74:	e000edf0 	.word	0xe000edf0

08006e78 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	22e8      	movs	r2, #232	@ 0xe8
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	3318      	adds	r3, #24
 8006e8c:	4a05      	ldr	r2, [pc, #20]	@ (8006ea4 <tud_cdc_n_write_available+0x2c>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 fd2b 	bl	80088ee <tu_fifo_remaining>
 8006e98:	4603      	mov	r3, r0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20001570 	.word	0x20001570

08006ea8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006eae:	22e8      	movs	r2, #232	@ 0xe8
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4824      	ldr	r0, [pc, #144]	@ (8006f44 <cdcd_init+0x9c>)
 8006eb4:	f006 f813 	bl	800cede <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006eb8:	2300      	movs	r3, #0
 8006eba:	71fb      	strb	r3, [r7, #7]
 8006ebc:	e03a      	b.n	8006f34 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	22e8      	movs	r2, #232	@ 0xe8
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f44 <cdcd_init+0x9c>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	22ff      	movs	r2, #255	@ 0xff
 8006ed0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006ed8:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2200      	movs	r2, #0
 8006ede:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f103 0010 	add.w	r0, r3, #16
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2301      	movs	r3, #1
 8006efe:	2240      	movs	r2, #64	@ 0x40
 8006f00:	f000 ffee 	bl	8007ee0 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f103 001c 	add.w	r0, r3, #28
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006f10:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <cdcd_init+0xa0>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bf14      	ite	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	2300      	moveq	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2301      	movs	r3, #1
 8006f28:	2280      	movs	r2, #128	@ 0x80
 8006f2a:	f000 ffd9 	bl	8007ee0 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	3301      	adds	r3, #1
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0c1      	beq.n	8006ebe <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20001570 	.word	0x20001570
 8006f48:	2000022c 	.word	0x2000022c

08006f4c <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006f50:	2301      	movs	r3, #1
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	e037      	b.n	8006fdc <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	22e8      	movs	r2, #232	@ 0xe8
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <cdcd_reset+0x90>)
 8006f76:	4413      	add	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006f7a:	2205      	movs	r2, #5
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f005 ffad 	bl	800cede <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006f84:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff0 <cdcd_reset+0x94>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3310      	adds	r3, #16
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fd90 	bl	8008abc <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006f9c:	4b14      	ldr	r3, [pc, #80]	@ (8006ff0 <cdcd_reset+0x94>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	331c      	adds	r3, #28
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fd84 	bl	8008abc <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f103 021c 	add.w	r2, r3, #28
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <cdcd_reset+0x94>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f001 fd84 	bl	8008ade <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c4      	beq.n	8006f6c <cdcd_reset+0x10>
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20001570 	.word	0x20001570
 8006ff0:	2000022c 	.word	0x2000022c

08006ff4 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b09a      	sub	sp, #104	@ 0x68
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
 8007000:	4613      	mov	r3, r2
 8007002:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	795b      	ldrb	r3, [r3, #5]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d103      	bne.n	8007014 <cdcd_open+0x20>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	799b      	ldrb	r3, [r3, #6]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d001      	beq.n	8007018 <cdcd_open+0x24>
 8007014:	2300      	movs	r3, #0
 8007016:	e0da      	b.n	80071ce <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8007018:	2300      	movs	r3, #0
 800701a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800701e:	e010      	b.n	8007042 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8007020:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007024:	22e8      	movs	r2, #232	@ 0xe8
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	4a6b      	ldr	r2, [pc, #428]	@ (80071d8 <cdcd_open+0x1e4>)
 800702c:	4413      	add	r3, r2
 800702e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8007030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007032:	789b      	ldrb	r3, [r3, #2]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8007038:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800703c:	3301      	adds	r3, #1
 800703e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007042:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0ea      	beq.n	8007020 <cdcd_open+0x2c>
 800704a:	e000      	b.n	800704e <cdcd_open+0x5a>
      break;
 800704c:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 800704e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <cdcd_open+0x78>
 8007056:	4b61      	ldr	r3, [pc, #388]	@ (80071dc <cdcd_open+0x1e8>)
 8007058:	647b      	str	r3, [r7, #68]	@ 0x44
 800705a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d000      	beq.n	8007068 <cdcd_open+0x74>
 8007066:	be00      	bkpt	0x0000
 8007068:	2300      	movs	r3, #0
 800706a:	e0b0      	b.n	80071ce <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	789a      	ldrb	r2, [r3, #2]
 8007070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007072:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8007074:	2309      	movs	r3, #9
 8007076:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800707e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708a:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 800708c:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 800708e:	e013      	b.n	80070b8 <cdcd_open+0xc4>
 8007090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007092:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8007098:	461a      	mov	r2, r3
 800709a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800709e:	4413      	add	r3, r2
 80070a0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80070b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80070b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	3301      	adds	r3, #1
 80070c0:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80070c2:	2b24      	cmp	r3, #36	@ 0x24
 80070c4:	d104      	bne.n	80070d0 <cdcd_open+0xdc>
 80070c6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80070ca:	88bb      	ldrh	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d9df      	bls.n	8007090 <cdcd_open+0x9c>
 80070d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	3301      	adds	r3, #1
 80070d8:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d12f      	bne.n	800713e <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070e6:	4618      	mov	r0, r3
 80070e8:	f003 f862 	bl	800a1b0 <usbd_edpt_open>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f083 0301 	eor.w	r3, r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <cdcd_open+0x11a>
 80070f8:	4b38      	ldr	r3, [pc, #224]	@ (80071dc <cdcd_open+0x1e8>)
 80070fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d000      	beq.n	800710a <cdcd_open+0x116>
 8007108:	be00      	bkpt	0x0000
 800710a:	2300      	movs	r3, #0
 800710c:	e05f      	b.n	80071ce <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800710e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007110:	789a      	ldrb	r2, [r3, #2]
 8007112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007114:	705a      	strb	r2, [r3, #1]
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800711e:	461a      	mov	r2, r3
 8007120:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007124:	4413      	add	r3, r2
 8007126:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800712a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800713c:	657b      	str	r3, [r7, #84]	@ 0x54
 800713e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007140:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	3301      	adds	r3, #1
 8007146:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8007148:	2b04      	cmp	r3, #4
 800714a:	d139      	bne.n	80071c0 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 800714c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714e:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8007150:	2b0a      	cmp	r3, #10
 8007152:	d135      	bne.n	80071c0 <cdcd_open+0x1cc>
 8007154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007156:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800715c:	461a      	mov	r2, r3
 800715e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007162:	4413      	add	r3, r2
 8007164:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8007168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800717a:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 800717c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800717e:	3303      	adds	r3, #3
 8007180:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007182:	3202      	adds	r2, #2
 8007184:	79f8      	ldrb	r0, [r7, #7]
 8007186:	9201      	str	r2, [sp, #4]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2302      	movs	r3, #2
 800718c:	2202      	movs	r2, #2
 800718e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007190:	f002 ffa6 	bl	800a0e0 <usbd_open_edpt_pair>
 8007194:	4603      	mov	r3, r0
 8007196:	f083 0301 	eor.w	r3, r3, #1
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <cdcd_open+0x1c2>
 80071a0:	4b0e      	ldr	r3, [pc, #56]	@ (80071dc <cdcd_open+0x1e8>)
 80071a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d000      	beq.n	80071b2 <cdcd_open+0x1be>
 80071b0:	be00      	bkpt	0x0000
 80071b2:	2300      	movs	r3, #0
 80071b4:	e00b      	b.n	80071ce <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80071b6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80071ba:	330e      	adds	r3, #14
 80071bc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80071c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fcb1 	bl	8006b2c <_prep_out_transaction>

  return drv_len;
 80071ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3760      	adds	r7, #96	@ 0x60
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20001570 	.word	0x20001570
 80071dc:	e000edf0 	.word	0xe000edf0

080071e0 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	@ 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	603a      	str	r2, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
 80071ec:	460b      	mov	r3, r1
 80071ee:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d001      	beq.n	8007202 <cdcd_control_xfer_cb+0x22>
 80071fe:	2300      	movs	r3, #0
 8007200:	e0e6      	b.n	80073d0 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007202:	2300      	movs	r3, #0
 8007204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007208:	e014      	b.n	8007234 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 800720a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800720e:	22e8      	movs	r2, #232	@ 0xe8
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	4a70      	ldr	r2, [pc, #448]	@ (80073d8 <cdcd_control_xfer_cb+0x1f8>)
 8007216:	4413      	add	r3, r2
 8007218:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	889b      	ldrh	r3, [r3, #4]
 8007224:	b29b      	uxth	r3, r3
 8007226:	429a      	cmp	r2, r3
 8007228:	d009      	beq.n	800723e <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800722a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800722e:	3301      	adds	r3, #1
 8007230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0e6      	beq.n	800720a <cdcd_control_xfer_cb+0x2a>
 800723c:	e000      	b.n	8007240 <cdcd_control_xfer_cb+0x60>
      break;
 800723e:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8007240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <cdcd_control_xfer_cb+0x6c>
 8007248:	2300      	movs	r3, #0
 800724a:	e0c1      	b.n	80073d0 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	3b20      	subs	r3, #32
 8007252:	2b03      	cmp	r3, #3
 8007254:	f200 80b2 	bhi.w	80073bc <cdcd_control_xfer_cb+0x1dc>
 8007258:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <cdcd_control_xfer_cb+0x80>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007271 	.word	0x08007271
 8007264:	080072ad 	.word	0x080072ad
 8007268:	080072c7 	.word	0x080072c7
 800726c:	0800738b 	.word	0x0800738b
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8007270:	79bb      	ldrb	r3, [r7, #6]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d108      	bne.n	8007288 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	f103 0208 	add.w	r2, r3, #8
 800727c:	79f8      	ldrb	r0, [r7, #7]
 800727e:	2307      	movs	r3, #7
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	f003 fa13 	bl	800a6ac <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8007286:	e09b      	b.n	80073c0 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007288:	79bb      	ldrb	r3, [r7, #6]
 800728a:	2b03      	cmp	r3, #3
 800728c:	f040 8098 	bne.w	80073c0 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8007290:	4b52      	ldr	r3, [pc, #328]	@ (80073dc <cdcd_control_xfer_cb+0x1fc>)
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8094 	beq.w	80073c0 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f103 0208 	add.w	r2, r3, #8
 800729e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a2:	4611      	mov	r1, r2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f3af 8000 	nop.w
      break;
 80072aa:	e089      	b.n	80073c0 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80072ac:	79bb      	ldrb	r3, [r7, #6]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	f040 8088 	bne.w	80073c4 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f103 0208 	add.w	r2, r3, #8
 80072ba:	79f8      	ldrb	r0, [r7, #7]
 80072bc:	2307      	movs	r3, #7
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	f003 f9f4 	bl	800a6ac <tud_control_xfer>
      }
      break;
 80072c4:	e07e      	b.n	80073c4 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80072c6:	79bb      	ldrb	r3, [r7, #6]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d105      	bne.n	80072d8 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f003 f979 	bl	800a5c8 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80072d6:	e077      	b.n	80073c8 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 80072d8:	79bb      	ldrb	r3, [r7, #6]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d174      	bne.n	80073c8 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	b29b      	uxth	r3, r3
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	fa22 f303 	lsr.w	r3, r2, r3
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	bf14      	ite	ne
 800731e:	2301      	movne	r3, #1
 8007320:	2300      	moveq	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b29b      	uxth	r3, r3
 800732c:	b2da      	uxtb	r2, r3
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8007332:	4b2b      	ldr	r3, [pc, #172]	@ (80073e0 <cdcd_control_xfer_cb+0x200>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d013      	beq.n	8007368 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f103 021c 	add.w	r2, r3, #28
 8007346:	7ffb      	ldrb	r3, [r7, #31]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f083 0301 	eor.w	r3, r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f001 fbbc 	bl	8008ade <tu_fifo_set_overwritable>
 8007366:	e005      	b.n	8007374 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	331c      	adds	r3, #28
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fbb5 	bl	8008ade <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8007374:	4b1b      	ldr	r3, [pc, #108]	@ (80073e4 <cdcd_control_xfer_cb+0x204>)
 8007376:	2b00      	cmp	r3, #0
 8007378:	d026      	beq.n	80073c8 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 800737a:	7fba      	ldrb	r2, [r7, #30]
 800737c:	7ff9      	ldrb	r1, [r7, #31]
 800737e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007382:	4618      	mov	r0, r3
 8007384:	f7fa f932 	bl	80015ec <tud_cdc_line_state_cb>
      break;
 8007388:	e01e      	b.n	80073c8 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 800738a:	79bb      	ldrb	r3, [r7, #6]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d105      	bne.n	800739c <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f003 f917 	bl	800a5c8 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 800739a:	e017      	b.n	80073cc <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 800739c:	79bb      	ldrb	r3, [r7, #6]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d114      	bne.n	80073cc <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80073a2:	4b11      	ldr	r3, [pc, #68]	@ (80073e8 <cdcd_control_xfer_cb+0x208>)
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f3af 8000 	nop.w
      break;
 80073ba:	e007      	b.n	80073cc <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80073bc:	2300      	movs	r3, #0
 80073be:	e007      	b.n	80073d0 <cdcd_control_xfer_cb+0x1f0>
      break;
 80073c0:	bf00      	nop
 80073c2:	e004      	b.n	80073ce <cdcd_control_xfer_cb+0x1ee>
      break;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <cdcd_control_xfer_cb+0x1ee>
      break;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <cdcd_control_xfer_cb+0x1ee>
      break;
 80073cc:	bf00      	nop
  }

  return true;
 80073ce:	2301      	movs	r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3728      	adds	r7, #40	@ 0x28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20001570 	.word	0x20001570
 80073dc:	00000000 	.word	0x00000000
 80073e0:	2000022c 	.word	0x2000022c
 80073e4:	080015ed 	.word	0x080015ed
 80073e8:	00000000 	.word	0x00000000

080073ec <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4603      	mov	r3, r0
 80073f6:	71fb      	strb	r3, [r7, #7]
 80073f8:	460b      	mov	r3, r1
 80073fa:	71bb      	strb	r3, [r7, #6]
 80073fc:	4613      	mov	r3, r2
 80073fe:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007400:	2300      	movs	r3, #0
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e013      	b.n	800742e <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8007406:	7ffb      	ldrb	r3, [r7, #31]
 8007408:	22e8      	movs	r2, #232	@ 0xe8
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	4a5f      	ldr	r2, [pc, #380]	@ (800758c <cdcd_xfer_cb+0x1a0>)
 8007410:	4413      	add	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	78db      	ldrb	r3, [r3, #3]
 8007418:	79ba      	ldrb	r2, [r7, #6]
 800741a:	429a      	cmp	r2, r3
 800741c:	d00a      	beq.n	8007434 <cdcd_xfer_cb+0x48>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	79ba      	ldrb	r2, [r7, #6]
 8007424:	429a      	cmp	r2, r3
 8007426:	d005      	beq.n	8007434 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007428:	7ffb      	ldrb	r3, [r7, #31]
 800742a:	3301      	adds	r3, #1
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	7ffb      	ldrb	r3, [r7, #31]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0e8      	beq.n	8007406 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8007434:	7ffb      	ldrb	r3, [r7, #31]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <cdcd_xfer_cb+0x64>
 800743a:	4b55      	ldr	r3, [pc, #340]	@ (8007590 <cdcd_xfer_cb+0x1a4>)
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d000      	beq.n	800744c <cdcd_xfer_cb+0x60>
 800744a:	be00      	bkpt	0x0000
 800744c:	2300      	movs	r3, #0
 800744e:	e098      	b.n	8007582 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8007450:	7ffb      	ldrb	r3, [r7, #31]
 8007452:	01db      	lsls	r3, r3, #7
 8007454:	4a4f      	ldr	r2, [pc, #316]	@ (8007594 <cdcd_xfer_cb+0x1a8>)
 8007456:	4413      	add	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	78db      	ldrb	r3, [r3, #3]
 800745e:	79ba      	ldrb	r2, [r7, #6]
 8007460:	429a      	cmp	r2, r3
 8007462:	d148      	bne.n	80074f6 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	3310      	adds	r3, #16
 8007468:	6939      	ldr	r1, [r7, #16]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	b292      	uxth	r2, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fb00 	bl	8008a74 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8007474:	4b48      	ldr	r3, [pc, #288]	@ (8007598 <cdcd_xfer_cb+0x1ac>)
 8007476:	2b00      	cmp	r3, #0
 8007478:	d027      	beq.n	80074ca <cdcd_xfer_cb+0xde>
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	2bff      	cmp	r3, #255	@ 0xff
 8007480:	d023      	beq.n	80074ca <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e01c      	b.n	80074c2 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	795a      	ldrb	r2, [r3, #5]
 800748c:	6939      	ldr	r1, [r7, #16]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	440b      	add	r3, r1
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d111      	bne.n	80074bc <cdcd_xfer_cb+0xd0>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	3310      	adds	r3, #16
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f9e3 	bl	8008868 <tu_fifo_empty>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f083 0301 	eor.w	r3, r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	795a      	ldrb	r2, [r3, #5]
 80074b2:	7ffb      	ldrb	r3, [r7, #31]
 80074b4:	4611      	mov	r1, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3301      	adds	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3de      	bcc.n	8007488 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80074ca:	4b34      	ldr	r3, [pc, #208]	@ (800759c <cdcd_xfer_cb+0x1b0>)
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <cdcd_xfer_cb+0x102>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	3310      	adds	r3, #16
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 f9c7 	bl	8008868 <tu_fifo_empty>
 80074da:	4603      	mov	r3, r0
 80074dc:	f083 0301 	eor.w	r3, r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80074e6:	7ffb      	ldrb	r3, [r7, #31]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fa f8ab 	bl	8001644 <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80074ee:	7ffb      	ldrb	r3, [r7, #31]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fb1b 	bl	8006b2c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	789b      	ldrb	r3, [r3, #2]
 80074fa:	79ba      	ldrb	r2, [r7, #6]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d13f      	bne.n	8007580 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8007500:	4b27      	ldr	r3, [pc, #156]	@ (80075a0 <cdcd_xfer_cb+0x1b4>)
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8007506:	7ffb      	ldrb	r3, [r7, #31]
 8007508:	4618      	mov	r0, r3
 800750a:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800750e:	7ffb      	ldrb	r3, [r7, #31]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fc2f 	bl	8006d74 <tud_cdc_n_write_flush>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d131      	bne.n	8007580 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	331c      	adds	r3, #28
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f96f 	bl	8008804 <tu_fifo_count>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d129      	bne.n	8007580 <cdcd_xfer_cb+0x194>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d026      	beq.n	8007580 <cdcd_xfer_cb+0x194>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007538:	2b00      	cmp	r3, #0
 800753a:	d121      	bne.n	8007580 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	789a      	ldrb	r2, [r3, #2]
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f002 fe79 	bl	800a23c <usbd_edpt_claim>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d017      	beq.n	8007580 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	7899      	ldrb	r1, [r3, #2]
 8007554:	79f8      	ldrb	r0, [r7, #7]
 8007556:	2300      	movs	r3, #0
 8007558:	2200      	movs	r2, #0
 800755a:	f002 febf 	bl	800a2dc <usbd_edpt_xfer>
 800755e:	4603      	mov	r3, r0
 8007560:	f083 0301 	eor.w	r3, r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <cdcd_xfer_cb+0x194>
 800756a:	4b09      	ldr	r3, [pc, #36]	@ (8007590 <cdcd_xfer_cb+0x1a4>)
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d000      	beq.n	800757c <cdcd_xfer_cb+0x190>
 800757a:	be00      	bkpt	0x0000
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8007580:	2301      	movs	r3, #1
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20001570 	.word	0x20001570
 8007590:	e000edf0 	.word	0xe000edf0
 8007594:	20001658 	.word	0x20001658
 8007598:	00000000 	.word	0x00000000
 800759c:	08001645 	.word	0x08001645
 80075a0:	00000000 	.word	0x00000000

080075a4 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	460a      	mov	r2, r1
 80075ae:	71fb      	strb	r3, [r7, #7]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80075b4:	2301      	movs	r3, #1
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	603a      	str	r2, [r7, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	4603      	mov	r3, r0
 80075ce:	71fb      	strb	r3, [r7, #7]
 80075d0:	460b      	mov	r3, r1
 80075d2:	71bb      	strb	r3, [r7, #6]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	491b      	ldr	r1, [pc, #108]	@ (8007664 <tud_hid_n_ready+0x80>)
 80075f6:	4613      	mov	r3, r2
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	3301      	adds	r3, #1
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	73bb      	strb	r3, [r7, #14]
 8007606:	f001 faf7 	bl	8008bf8 <tud_mounted>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <tud_hid_n_ready+0x40>
 8007610:	f001 fb04 	bl	8008c1c <tud_suspended>
 8007614:	4603      	mov	r3, r0
 8007616:	f083 0301 	eor.w	r3, r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <tud_hid_n_ready+0x40>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <tud_hid_n_ready+0x42>
 8007624:	2300      	movs	r3, #0
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 800762c:	2b00      	cmp	r3, #0
 800762e:	d010      	beq.n	8007652 <tud_hid_n_ready+0x6e>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00d      	beq.n	8007652 <tud_hid_n_ready+0x6e>
 8007636:	7bba      	ldrb	r2, [r7, #14]
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f002 fec3 	bl	800a3c8 <usbd_edpt_busy>
 8007642:	4603      	mov	r3, r0
 8007644:	f083 0301 	eor.w	r3, r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <tud_hid_n_ready+0x6e>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <tud_hid_n_ready+0x70>
 8007652:	2300      	movs	r3, #0
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200016d8 	.word	0x200016d8

08007668 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	@ 0x38
 800766c:	af00      	add	r7, sp, #0
 800766e:	603a      	str	r2, [r7, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	4603      	mov	r3, r0
 8007674:	71fb      	strb	r3, [r7, #7]
 8007676:	460b      	mov	r3, r1
 8007678:	71bb      	strb	r3, [r7, #6]
 800767a:	4613      	mov	r3, r2
 800767c:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <tud_hid_n_report+0x20>
 8007684:	2300      	movs	r3, #0
 8007686:	e06d      	b.n	8007764 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 800768e:	79fa      	ldrb	r2, [r7, #7]
 8007690:	4613      	mov	r3, r2
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a34      	ldr	r2, [pc, #208]	@ (800776c <tud_hid_n_report+0x104>)
 800769a:	4413      	add	r3, r2
 800769c:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 800769e:	79fa      	ldrb	r2, [r7, #7]
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4a31      	ldr	r2, [pc, #196]	@ (8007770 <tud_hid_n_report+0x108>)
 80076aa:	4413      	add	r3, r2
 80076ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	785a      	ldrb	r2, [r3, #1]
 80076b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f002 fdbf 	bl	800a23c <usbd_edpt_claim>
 80076be:	4603      	mov	r3, r0
 80076c0:	f083 0301 	eor.w	r3, r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <tud_hid_n_report+0x66>
 80076ca:	2300      	movs	r3, #0
 80076cc:	e04a      	b.n	8007764 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80076ce:	79bb      	ldrb	r3, [r7, #6]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d021      	beq.n	8007718 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	79ba      	ldrb	r2, [r7, #6]
 80076d8:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	3310      	adds	r3, #16
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	88bb      	ldrh	r3, [r7, #4]
 80076e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076e4:	220f      	movs	r2, #15
 80076e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	623a      	str	r2, [r7, #32]
 80076ec:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 80076ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d202      	bcs.n	80076fc <tud_hid_n_report+0x94>
    return -1;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e005      	b.n	8007708 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	6a39      	ldr	r1, [r7, #32]
 8007700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007702:	f005 fcc4 	bl	800d08e <memcpy>
  return 0;
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <tud_hid_n_report+0xa8>
 800770c:	2300      	movs	r3, #0
 800770e:	e029      	b.n	8007764 <tud_hid_n_report+0xfc>
    len++;
 8007710:	88bb      	ldrh	r3, [r7, #4]
 8007712:	3301      	adds	r3, #1
 8007714:	80bb      	strh	r3, [r7, #4]
 8007716:	e01a      	b.n	800774e <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8007718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771a:	f103 0210 	add.w	r2, r3, #16
 800771e:	88bb      	ldrh	r3, [r7, #4]
 8007720:	61ba      	str	r2, [r7, #24]
 8007722:	2210      	movs	r2, #16
 8007724:	617a      	str	r2, [r7, #20]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	613a      	str	r2, [r7, #16]
 800772a:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	429a      	cmp	r2, r3
 8007732:	d202      	bcs.n	800773a <tud_hid_n_report+0xd2>
    return -1;
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	e005      	b.n	8007746 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	6939      	ldr	r1, [r7, #16]
 800773e:	69b8      	ldr	r0, [r7, #24]
 8007740:	f005 fca5 	bl	800d08e <memcpy>
  return 0;
 8007744:	2300      	movs	r3, #0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <tud_hid_n_report+0xe6>
 800774a:	2300      	movs	r3, #0
 800774c:	e00a      	b.n	8007764 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	7859      	ldrb	r1, [r3, #1]
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	f103 0210 	add.w	r2, r3, #16
 8007758:	88bb      	ldrh	r3, [r7, #4]
 800775a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800775e:	f002 fdbd 	bl	800a2dc <usbd_edpt_xfer>
 8007762:	4603      	mov	r3, r0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3738      	adds	r7, #56	@ 0x38
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	200016d8 	.word	0x200016d8
 8007770:	200016e4 	.word	0x200016e4

08007774 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	4603      	mov	r3, r0
 800777e:	71fb      	strb	r3, [r7, #7]
 8007780:	460b      	mov	r3, r1
 8007782:	71bb      	strb	r3, [r7, #6]
 8007784:	4613      	mov	r3, r2
 8007786:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8007788:	797b      	ldrb	r3, [r7, #5]
 800778a:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f107 030a 	add.w	r3, r7, #10
 800779c:	6811      	ldr	r1, [r2, #0]
 800779e:	6019      	str	r1, [r3, #0]
 80077a0:	8892      	ldrh	r2, [r2, #4]
 80077a2:	809a      	strh	r2, [r3, #4]
 80077a4:	e007      	b.n	80077b6 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	3302      	adds	r3, #2
 80077ac:	2206      	movs	r2, #6
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f005 fb94 	bl	800cede <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80077b6:	f107 0208 	add.w	r2, r7, #8
 80077ba:	79b9      	ldrb	r1, [r7, #6]
 80077bc:	79f8      	ldrb	r0, [r7, #7]
 80077be:	2308      	movs	r3, #8
 80077c0:	f7ff ff52 	bl	8007668 <tud_hid_n_report>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80077ce:	b580      	push	{r7, lr}
 80077d0:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80077d2:	2000      	movs	r0, #0
 80077d4:	f000 f80a 	bl	80077ec <hidd_reset>
}
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}

080077dc <hidd_deinit>:

bool hidd_deinit(void) {
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  return true;
 80077e0:	2301      	movs	r3, #1
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80077f6:	220c      	movs	r2, #12
 80077f8:	2100      	movs	r1, #0
 80077fa:	4803      	ldr	r0, [pc, #12]	@ (8007808 <hidd_reset+0x1c>)
 80077fc:	f005 fb6f 	bl	800cede <memset>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200016d8 	.word	0x200016d8

0800780c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 800780c:	b580      	push	{r7, lr}
 800780e:	b094      	sub	sp, #80	@ 0x50
 8007810:	af02      	add	r7, sp, #8
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
 8007818:	4613      	mov	r3, r2
 800781a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	795b      	ldrb	r3, [r3, #5]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d001      	beq.n	8007828 <hidd_open+0x1c>
 8007824:	2300      	movs	r3, #0
 8007826:	e0ce      	b.n	80079c6 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	791b      	ldrb	r3, [r3, #4]
 800782c:	461a      	mov	r2, r3
 800782e:	00d2      	lsls	r2, r2, #3
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007834:	3312      	adds	r3, #18
 8007836:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800783a:	88ba      	ldrh	r2, [r7, #4]
 800783c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007840:	429a      	cmp	r2, r3
 8007842:	d20a      	bcs.n	800785a <hidd_open+0x4e>
 8007844:	4b62      	ldr	r3, [pc, #392]	@ (80079d0 <hidd_open+0x1c4>)
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d000      	beq.n	8007856 <hidd_open+0x4a>
 8007854:	be00      	bkpt	0x0000
 8007856:	2300      	movs	r3, #0
 8007858:	e0b5      	b.n	80079c6 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800785a:	2300      	movs	r3, #0
 800785c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007860:	e011      	b.n	8007886 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8007862:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007866:	4613      	mov	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4a59      	ldr	r2, [pc, #356]	@ (80079d4 <hidd_open+0x1c8>)
 8007870:	4413      	add	r3, r2
 8007872:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8007874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800787c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007880:	3301      	adds	r3, #1
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0e9      	beq.n	8007862 <hidd_open+0x56>
 800788e:	e000      	b.n	8007892 <hidd_open+0x86>
      break;
 8007890:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8007892:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <hidd_open+0xa4>
 800789a:	4b4d      	ldr	r3, [pc, #308]	@ (80079d0 <hidd_open+0x1c4>)
 800789c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d000      	beq.n	80078ac <hidd_open+0xa0>
 80078aa:	be00      	bkpt	0x0000
 80078ac:	2300      	movs	r3, #0
 80078ae:	e08a      	b.n	80079c6 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80078b0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80078b4:	4613      	mov	r3, r2
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	4413      	add	r3, r2
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4a46      	ldr	r2, [pc, #280]	@ (80079d8 <hidd_open+0x1cc>)
 80078be:	4413      	add	r3, r2
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80078d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	3301      	adds	r3, #1
 80078e2:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80078e4:	2b21      	cmp	r3, #33	@ 0x21
 80078e6:	d00a      	beq.n	80078fe <hidd_open+0xf2>
 80078e8:	4b39      	ldr	r3, [pc, #228]	@ (80079d0 <hidd_open+0x1c4>)
 80078ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d000      	beq.n	80078fa <hidd_open+0xee>
 80078f8:	be00      	bkpt	0x0000
 80078fa:	2300      	movs	r3, #0
 80078fc:	e063      	b.n	80079c6 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80078fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007902:	609a      	str	r2, [r3, #8]
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007916:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	7919      	ldrb	r1, [r3, #4]
 800791c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800791e:	3302      	adds	r3, #2
 8007920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007922:	3201      	adds	r2, #1
 8007924:	79f8      	ldrb	r0, [r7, #7]
 8007926:	9201      	str	r2, [sp, #4]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2303      	movs	r3, #3
 800792c:	460a      	mov	r2, r1
 800792e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007930:	f002 fbd6 	bl	800a0e0 <usbd_open_edpt_pair>
 8007934:	4603      	mov	r3, r0
 8007936:	f083 0301 	eor.w	r3, r3, #1
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <hidd_open+0x14a>
 8007940:	4b23      	ldr	r3, [pc, #140]	@ (80079d0 <hidd_open+0x1c4>)
 8007942:	633b      	str	r3, [r7, #48]	@ 0x30
 8007944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d000      	beq.n	8007952 <hidd_open+0x146>
 8007950:	be00      	bkpt	0x0000
 8007952:	2300      	movs	r3, #0
 8007954:	e037      	b.n	80079c6 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	799b      	ldrb	r3, [r3, #6]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d103      	bne.n	8007966 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	79da      	ldrb	r2, [r3, #7]
 8007962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007964:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8007966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007968:	2201      	movs	r2, #1
 800796a:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	789a      	ldrb	r2, [r3, #2]
 8007970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007972:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8007974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	3307      	adds	r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	881a      	ldrh	r2, [r3, #0]
 8007980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007982:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8007984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007986:	789b      	ldrb	r3, [r3, #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 800798c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798e:	7899      	ldrb	r1, [r3, #2]
 8007990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007992:	f103 0220 	add.w	r2, r3, #32
 8007996:	79f8      	ldrb	r0, [r7, #7]
 8007998:	2310      	movs	r3, #16
 800799a:	f002 fc9f 	bl	800a2dc <usbd_edpt_xfer>
 800799e:	4603      	mov	r3, r0
 80079a0:	f083 0301 	eor.w	r3, r3, #1
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <hidd_open+0x1b6>
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <hidd_open+0x1c4>)
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d000      	beq.n	80079bc <hidd_open+0x1b0>
 80079ba:	be00      	bkpt	0x0000
 80079bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80079c0:	e001      	b.n	80079c6 <hidd_open+0x1ba>
  }

  return drv_len;
 80079c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3748      	adds	r7, #72	@ 0x48
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	e000edf0 	.word	0xe000edf0
 80079d4:	200016d8 	.word	0x200016d8
 80079d8:	200016e4 	.word	0x200016e4

080079dc <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b094      	sub	sp, #80	@ 0x50
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	4603      	mov	r3, r0
 80079e4:	603a      	str	r2, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
 80079e8:	460b      	mov	r3, r1
 80079ea:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d001      	beq.n	80079fe <hidd_control_xfer_cb+0x22>
 80079fa:	2300      	movs	r3, #0
 80079fc:	e1d6      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	889b      	ldrh	r3, [r3, #4]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007a08:	2300      	movs	r3, #0
 8007a0a:	77bb      	strb	r3, [r7, #30]
 8007a0c:	e00f      	b.n	8007a2e <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8007a0e:	7fba      	ldrb	r2, [r7, #30]
 8007a10:	498f      	ldr	r1, [pc, #572]	@ (8007c50 <hidd_control_xfer_cb+0x274>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	7ffa      	ldrb	r2, [r7, #31]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d101      	bne.n	8007a28 <hidd_control_xfer_cb+0x4c>
      return i;
 8007a24:	7fbb      	ldrb	r3, [r7, #30]
 8007a26:	e006      	b.n	8007a36 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007a28:	7fbb      	ldrb	r3, [r7, #30]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	77bb      	strb	r3, [r7, #30]
 8007a2e:	7fbb      	ldrb	r3, [r7, #30]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0ec      	beq.n	8007a0e <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007a34:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007a36:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007a3a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <hidd_control_xfer_cb+0x6a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	e1b2      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007a46:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4a7f      	ldr	r2, [pc, #508]	@ (8007c50 <hidd_control_xfer_cb+0x274>)
 8007a54:	4413      	add	r3, r2
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007a58:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	4a7b      	ldr	r2, [pc, #492]	@ (8007c54 <hidd_control_xfer_cb+0x278>)
 8007a66:	4413      	add	r3, r2
 8007a68:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d145      	bne.n	8007b04 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8007a78:	79bb      	ldrb	r3, [r7, #6]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	f040 8195 	bne.w	8007daa <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	885b      	ldrh	r3, [r3, #2]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a88:	8bbb      	ldrh	r3, [r7, #28]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b06      	cmp	r3, #6
 8007a9a:	d11b      	bne.n	8007ad4 <hidd_control_xfer_cb+0xf8>
 8007a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa0:	2b21      	cmp	r3, #33	@ 0x21
 8007aa2:	d117      	bne.n	8007ad4 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <hidd_control_xfer_cb+0xd4>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e17d      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	79f8      	ldrb	r0, [r7, #7]
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	f002 fdf5 	bl	800a6ac <tud_control_xfer>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f083 0301 	eor.w	r3, r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 816d 	beq.w	8007daa <hidd_control_xfer_cb+0x3ce>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e16b      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d111      	bne.n	8007b00 <hidd_control_xfer_cb+0x124>
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ae0:	2b22      	cmp	r3, #34	@ 0x22
 8007ae2:	d10d      	bne.n	8007b00 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8007ae4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fc f941 	bl	8003d70 <tud_hid_descriptor_report_cb>
 8007aee:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	889b      	ldrh	r3, [r3, #4]
 8007af4:	79f8      	ldrb	r0, [r7, #7]
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	f002 fdd7 	bl	800a6ac <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007afe:	e154      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8007b00:	2300      	movs	r3, #0
 8007b02:	e153      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	f040 813e 	bne.w	8007d90 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	2b0a      	cmp	r3, #10
 8007b1c:	f200 8136 	bhi.w	8007d8c <hidd_control_xfer_cb+0x3b0>
 8007b20:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <hidd_control_xfer_cb+0x14c>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	08007d2b 	.word	0x08007d2b
 8007b30:	08007d41 	.word	0x08007d41
 8007b34:	08007d8d 	.word	0x08007d8d
 8007b38:	08007d8d 	.word	0x08007d8d
 8007b3c:	08007d8d 	.word	0x08007d8d
 8007b40:	08007d8d 	.word	0x08007d8d
 8007b44:	08007d8d 	.word	0x08007d8d
 8007b48:	08007c2b 	.word	0x08007c2b
 8007b4c:	08007ce5 	.word	0x08007ce5
 8007b50:	08007d57 	.word	0x08007d57
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007b54:	79bb      	ldrb	r3, [r7, #6]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	f040 811c 	bne.w	8007d94 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	885b      	ldrh	r3, [r3, #2]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	82bb      	strh	r3, [r7, #20]
 8007b64:	8abb      	ldrh	r3, [r7, #20]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	885b      	ldrh	r3, [r3, #2]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007b78:	8afb      	ldrh	r3, [r7, #22]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	88db      	ldrh	r3, [r3, #6]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	837b      	strh	r3, [r7, #26]
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007b90:	8b7a      	ldrh	r2, [r7, #26]
 8007b92:	8b3b      	ldrh	r3, [r7, #24]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bf28      	it	cs
 8007b98:	4613      	movcs	r3, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8007ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <hidd_control_xfer_cb+0x1fa>
 8007bae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d90f      	bls.n	8007bd6 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8007bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bbc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007bc0:	701a      	strb	r2, [r3, #0]
            req_len--;
 8007bc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8007bcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8007bd6:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007bda:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007bde:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bea:	f7f9 ff85 	bl	8001af8 <tud_hid_get_report_cb>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8007bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <hidd_control_xfer_cb+0x23e>
 8007c04:	4b14      	ldr	r3, [pc, #80]	@ (8007c58 <hidd_control_xfer_cb+0x27c>)
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d000      	beq.n	8007c16 <hidd_control_xfer_cb+0x23a>
 8007c14:	be00      	bkpt	0x0000
 8007c16:	2300      	movs	r3, #0
 8007c18:	e0c8      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8007c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c20:	79f8      	ldrb	r0, [r7, #7]
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	f002 fd42 	bl	800a6ac <tud_control_xfer>
        }
        break;
 8007c28:	e0b4      	b.n	8007d94 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007c2a:	79bb      	ldrb	r3, [r7, #6]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d115      	bne.n	8007c5c <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	88db      	ldrh	r3, [r3, #6]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d901      	bls.n	8007c3e <hidd_control_xfer_cb+0x262>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e0b6      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	79f8      	ldrb	r0, [r7, #7]
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	f002 fd2f 	bl	800a6ac <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8007c4e:	e0a3      	b.n	8007d98 <hidd_control_xfer_cb+0x3bc>
 8007c50:	200016d8 	.word	0x200016d8
 8007c54:	200016e4 	.word	0x200016e4
 8007c58:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8007c5c:	79bb      	ldrb	r3, [r7, #6]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	f040 809a 	bne.w	8007d98 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	885b      	ldrh	r3, [r3, #2]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007c6c:	89bb      	ldrh	r3, [r7, #12]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	88db      	ldrh	r3, [r3, #6]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	827b      	strh	r3, [r7, #18]
 8007c94:	2310      	movs	r3, #16
 8007c96:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007c98:	8a7a      	ldrh	r2, [r7, #18]
 8007c9a:	8a3b      	ldrh	r3, [r7, #16]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bf28      	it	cs
 8007ca0:	4613      	movcs	r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8007ca6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <hidd_control_xfer_cb+0x2f0>
 8007cae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d90b      	bls.n	8007ccc <hidd_control_xfer_cb+0x2f0>
 8007cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d105      	bne.n	8007ccc <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8007cc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8007ccc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007cd0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007cd4:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007cd8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	f7f9 ff1c 	bl	8001b1a <tud_hid_set_report_cb>
        break;
 8007ce2:	e059      	b.n	8007d98 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007ce4:	79bb      	ldrb	r3, [r7, #6]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d158      	bne.n	8007d9c <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007cf2:	897b      	ldrh	r3, [r7, #10]
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfc:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d00:	79da      	ldrb	r2, [r3, #7]
 8007d02:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fc4b 	bl	80075a4 <tud_hid_set_idle_cb>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	f083 0301 	eor.w	r3, r3, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <hidd_control_xfer_cb+0x342>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e046      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 fc50 	bl	800a5c8 <tud_control_status>
        }
        break;
 8007d28:	e038      	b.n	8007d9c <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d2a:	79bb      	ldrb	r3, [r7, #6]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d137      	bne.n	8007da0 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8007d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d32:	1dda      	adds	r2, r3, #7
 8007d34:	79f8      	ldrb	r0, [r7, #7]
 8007d36:	2301      	movs	r3, #1
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	f002 fcb7 	bl	800a6ac <tud_control_xfer>
        }
        break;
 8007d3e:	e02f      	b.n	8007da0 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d40:	79bb      	ldrb	r3, [r7, #6]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d12e      	bne.n	8007da4 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d48:	1d9a      	adds	r2, r3, #6
 8007d4a:	79f8      	ldrb	r0, [r7, #7]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	f002 fcac 	bl	800a6ac <tud_control_xfer>
        }
        break;
 8007d54:	e026      	b.n	8007da4 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d56:	79bb      	ldrb	r3, [r7, #6]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d105      	bne.n	8007d68 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f002 fc31 	bl	800a5c8 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8007d66:	e01f      	b.n	8007da8 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8007d68:	79bb      	ldrb	r3, [r7, #6]
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d11c      	bne.n	8007da8 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d78:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7c:	799a      	ldrb	r2, [r3, #6]
 8007d7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f9 fe9b 	bl	8001ac0 <tud_hid_set_protocol_cb>
        break;
 8007d8a:	e00d      	b.n	8007da8 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e00d      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8007d90:	2300      	movs	r3, #0
 8007d92:	e00b      	b.n	8007dac <hidd_control_xfer_cb+0x3d0>
        break;
 8007d94:	bf00      	nop
 8007d96:	e008      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e006      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
        break;
 8007d9c:	bf00      	nop
 8007d9e:	e004      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
        break;
 8007da0:	bf00      	nop
 8007da2:	e002      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
        break;
 8007da4:	bf00      	nop
 8007da6:	e000      	b.n	8007daa <hidd_control_xfer_cb+0x3ce>
        break;
 8007da8:	bf00      	nop
  }

  return true;
 8007daa:	2301      	movs	r3, #1
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3748      	adds	r7, #72	@ 0x48
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	@ 0x28
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	71fb      	strb	r3, [r7, #7]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	71bb      	strb	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007dc8:	2300      	movs	r3, #0
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e014      	b.n	8007df8 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8007dce:	7ffa      	ldrb	r2, [r7, #31]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ed4 <hidd_xfer_cb+0x120>)
 8007dda:	4413      	add	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	789b      	ldrb	r3, [r3, #2]
 8007de2:	79ba      	ldrb	r2, [r7, #6]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d00a      	beq.n	8007dfe <hidd_xfer_cb+0x4a>
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	79ba      	ldrb	r2, [r7, #6]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d005      	beq.n	8007dfe <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
 8007df4:	3301      	adds	r3, #1
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	7ffb      	ldrb	r3, [r7, #31]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0e7      	beq.n	8007dce <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8007dfe:	7ffb      	ldrb	r3, [r7, #31]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <hidd_xfer_cb+0x66>
 8007e04:	4b34      	ldr	r3, [pc, #208]	@ (8007ed8 <hidd_xfer_cb+0x124>)
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d000      	beq.n	8007e16 <hidd_xfer_cb+0x62>
 8007e14:	be00      	bkpt	0x0000
 8007e16:	2300      	movs	r3, #0
 8007e18:	e057      	b.n	8007eca <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007e1a:	7ffa      	ldrb	r2, [r7, #31]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4413      	add	r3, r2
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	4a2d      	ldr	r2, [pc, #180]	@ (8007edc <hidd_xfer_cb+0x128>)
 8007e26:	4413      	add	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	79ba      	ldrb	r2, [r7, #6]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d116      	bne.n	8007e62 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007e34:	797b      	ldrb	r3, [r7, #5]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f103 0110 	add.w	r1, r3, #16
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7f9 fe48 	bl	8001adc <tud_hid_report_complete_cb>
 8007e4c:	e03c      	b.n	8007ec8 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f103 0210 	add.w	r2, r3, #16
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	7ff8      	ldrb	r0, [r7, #31]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	f7ff fbb1 	bl	80075c2 <tud_hid_report_failed_cb>
 8007e60:	e032      	b.n	8007ec8 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007e62:	797b      	ldrb	r3, [r7, #5]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10c      	bne.n	8007e82 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f103 0220 	add.w	r2, r3, #32
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	7ff8      	ldrb	r0, [r7, #31]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	2202      	movs	r2, #2
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	f7f9 fe4d 	bl	8001b1a <tud_hid_set_report_cb>
 8007e80:	e008      	b.n	8007e94 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f103 0220 	add.w	r2, r3, #32
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	7ff8      	ldrb	r0, [r7, #31]
 8007e8e:	2102      	movs	r1, #2
 8007e90:	f7ff fb97 	bl	80075c2 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	7899      	ldrb	r1, [r3, #2]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f103 0220 	add.w	r2, r3, #32
 8007e9e:	79f8      	ldrb	r0, [r7, #7]
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f002 fa1b 	bl	800a2dc <usbd_edpt_xfer>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f083 0301 	eor.w	r3, r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <hidd_xfer_cb+0x114>
 8007eb2:	4b09      	ldr	r3, [pc, #36]	@ (8007ed8 <hidd_xfer_cb+0x124>)
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d000      	beq.n	8007ec4 <hidd_xfer_cb+0x110>
 8007ec2:	be00      	bkpt	0x0000
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e000      	b.n	8007eca <hidd_xfer_cb+0x116>
  }

  return true;
 8007ec8:	2301      	movs	r3, #1
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200016d8 	.word	0x200016d8
 8007ed8:	e000edf0 	.word	0xe000edf0
 8007edc:	200016e4 	.word	0x200016e4

08007ee0 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	460b      	mov	r3, r1
 8007ef0:	80fb      	strh	r3, [r7, #6]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007efc:	d901      	bls.n	8007f02 <tu_fifo_config+0x22>
 8007efe:	2300      	movs	r3, #0
 8007f00:	e01b      	b.n	8007f3a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007f0e:	88bb      	ldrh	r3, [r7, #4]
 8007f10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f14:	b299      	uxth	r1, r3
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	88d3      	ldrh	r3, [r2, #6]
 8007f1a:	f361 030e 	bfi	r3, r1, #0, #15
 8007f1e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	79d3      	ldrb	r3, [r2, #7]
 8007f24:	7e39      	ldrb	r1, [r7, #24]
 8007f26:	f361 13c7 	bfi	r3, r1, #7, #1
 8007f2a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007f38:	2301      	movs	r3, #1
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b08a      	sub	sp, #40	@ 0x28
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	4613      	mov	r3, r2
 8007f52:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	089b      	lsrs	r3, r3, #2
 8007f5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007f5e:	e00b      	b.n	8007f78 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	61ba      	str	r2, [r7, #24]
 8007f68:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	601a      	str	r2, [r3, #0]
}
 8007f70:	bf00      	nop
    ff_buf += 4;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3304      	adds	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007f78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f7a:	1e5a      	subs	r2, r3, #1
 8007f7c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1ee      	bne.n	8007f60 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007f8c:	7ffb      	ldrb	r3, [r7, #31]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007f98:	7ffa      	ldrb	r2, [r7, #31]
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f005 f874 	bl	800d08e <memcpy>
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	3728      	adds	r7, #40	@ 0x28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b08a      	sub	sp, #40	@ 0x28
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007fc6:	e008      	b.n	8007fda <_ff_pull_const_addr+0x2c>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007fda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fdc:	1e5a      	subs	r2, r3, #1
 8007fde:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f1      	bne.n	8007fc8 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007fee:	7ffb      	ldrb	r3, [r7, #31]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007ff8:	7ffa      	ldrb	r2, [r7, #31]
 8007ffa:	f107 0314 	add.w	r3, r7, #20
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f005 f844 	bl	800d08e <memcpy>

    *reg_tx = tmp32;
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	601a      	str	r2, [r3, #0]
  }
}
 800800c:	bf00      	nop
 800800e:	3728      	adds	r7, #40	@ 0x28
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	88fa      	ldrh	r2, [r7, #6]
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	88c9      	ldrh	r1, [r1, #6]
 800802c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008030:	b289      	uxth	r1, r1
 8008032:	fb01 f202 	mul.w	r2, r1, r2
 8008036:	1898      	adds	r0, r3, r2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	88db      	ldrh	r3, [r3, #6]
 800803c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008040:	b29b      	uxth	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	f005 f822 	bl	800d08e <memcpy>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b08e      	sub	sp, #56	@ 0x38
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	4611      	mov	r1, r2
 800805e:	461a      	mov	r2, r3
 8008060:	460b      	mov	r3, r1
 8008062:	80fb      	strh	r3, [r7, #6]
 8008064:	4613      	mov	r3, r2
 8008066:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	889a      	ldrh	r2, [r3, #4]
 800806c:	88bb      	ldrh	r3, [r7, #4]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	88db      	ldrh	r3, [r3, #6]
 800807e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008082:	b29b      	uxth	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008088:	fb13 f302 	smulbb	r3, r3, r2
 800808c:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008096:	b29b      	uxth	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800809c:	fb13 f302 	smulbb	r3, r3, r2
 80080a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	88ba      	ldrh	r2, [r7, #4]
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	88c9      	ldrh	r1, [r1, #6]
 80080ac:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80080b0:	b289      	uxth	r1, r1
 80080b2:	fb01 f202 	mul.w	r2, r1, r2
 80080b6:	4413      	add	r3, r2
 80080b8:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80080ba:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <_ff_push_n+0x76>
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d022      	beq.n	800810c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80080c6:	e09e      	b.n	8008206 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80080c8:	88fa      	ldrh	r2, [r7, #6]
 80080ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d80d      	bhi.n	80080ec <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80080d0:	88fb      	ldrh	r3, [r7, #6]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	88d2      	ldrh	r2, [r2, #6]
 80080d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080da:	b292      	uxth	r2, r2
 80080dc:	fb02 f303 	mul.w	r3, r2, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	68b9      	ldr	r1, [r7, #8]
 80080e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e6:	f004 ffd2 	bl	800d08e <memcpy>
      break;
 80080ea:	e08c      	b.n	8008206 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80080ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080ee:	461a      	mov	r2, r3
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080f4:	f004 ffcb 	bl	800d08e <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4413      	add	r3, r2
 8008102:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008104:	4619      	mov	r1, r3
 8008106:	f004 ffc2 	bl	800d08e <memcpy>
      break;
 800810a:	e07c      	b.n	8008206 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008110:	429a      	cmp	r2, r3
 8008112:	d80f      	bhi.n	8008134 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	88db      	ldrh	r3, [r3, #6]
 8008118:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	fb13 f302 	smulbb	r3, r3, r2
 8008126:	b29b      	uxth	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812e:	f7ff ff0a 	bl	8007f46 <_ff_push_const_addr>
      break;
 8008132:	e067      	b.n	8008204 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8008134:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800813c:	8c3b      	ldrh	r3, [r7, #32]
 800813e:	461a      	mov	r2, r3
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008144:	f7ff feff 	bl	8007f46 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8008148:	8c3b      	ldrh	r3, [r7, #32]
 800814a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814c:	4413      	add	r3, r2
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8008150:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0303 	and.w	r3, r3, #3
 8008158:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800815c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008160:	2b00      	cmp	r3, #0
 8008162:	d043      	beq.n	80081ec <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8008168:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800816c:	b29b      	uxth	r3, r3
 800816e:	f1c3 0304 	rsb	r3, r3, #4
 8008172:	b29a      	uxth	r2, r3
 8008174:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008176:	837b      	strh	r3, [r7, #26]
 8008178:	4613      	mov	r3, r2
 800817a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800817c:	8b7a      	ldrh	r2, [r7, #26]
 800817e:	8b3b      	ldrh	r3, [r7, #24]
 8008180:	4293      	cmp	r3, r2
 8008182:	bf28      	it	cs
 8008184:	4613      	movcs	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800818c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008190:	b29b      	uxth	r3, r3
 8008192:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80081a4:	e007      	b.n	80081b6 <_ff_push_n+0x164>
 80081a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081a8:	1c53      	adds	r3, r2, #1
 80081aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	1c59      	adds	r1, r3, #1
 80081b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80081b2:	7812      	ldrb	r2, [r2, #0]
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081ba:	1e5a      	subs	r2, r3, #1
 80081bc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f0      	bne.n	80081a6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80081ca:	e007      	b.n	80081dc <_ff_push_n+0x18a>
 80081cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ce:	1c53      	adds	r3, r2, #1
 80081d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	1c59      	adds	r1, r3, #1
 80081d6:	6339      	str	r1, [r7, #48]	@ 0x30
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80081e0:	1e5a      	subs	r2, r3, #1
 80081e2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f0      	bne.n	80081cc <_ff_push_n+0x17a>
 80081ea:	e002      	b.n	80081f2 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80081f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <_ff_push_n+0x1b2>
 80081f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081fa:	461a      	mov	r2, r3
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008200:	f7ff fea1 	bl	8007f46 <_ff_push_const_addr>
      break;
 8008204:	bf00      	nop
  }
}
 8008206:	bf00      	nop
 8008208:	3738      	adds	r7, #56	@ 0x38
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	4613      	mov	r3, r2
 800821a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	88c9      	ldrh	r1, [r1, #6]
 8008226:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800822a:	b289      	uxth	r1, r1
 800822c:	fb01 f202 	mul.w	r2, r1, r2
 8008230:	1899      	adds	r1, r3, r2
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	88db      	ldrh	r3, [r3, #6]
 8008236:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800823a:	b29b      	uxth	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	68b8      	ldr	r0, [r7, #8]
 8008240:	f004 ff25 	bl	800d08e <memcpy>
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08e      	sub	sp, #56	@ 0x38
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	80fb      	strh	r3, [r7, #6]
 800825e:	4613      	mov	r3, r2
 8008260:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	889a      	ldrh	r2, [r3, #4]
 8008266:	88bb      	ldrh	r3, [r7, #4]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	88db      	ldrh	r3, [r3, #6]
 8008278:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800827c:	b29b      	uxth	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008282:	fb13 f302 	smulbb	r3, r3, r2
 8008286:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	88db      	ldrh	r3, [r3, #6]
 800828c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008296:	fb13 f302 	smulbb	r3, r3, r2
 800829a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	88ba      	ldrh	r2, [r7, #4]
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	88c9      	ldrh	r1, [r1, #6]
 80082a6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80082aa:	b289      	uxth	r1, r1
 80082ac:	fb01 f202 	mul.w	r2, r1, r2
 80082b0:	4413      	add	r3, r2
 80082b2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80082b4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <_ff_pull_n+0x76>
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d022      	beq.n	8008306 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80082c0:	e0a0      	b.n	8008404 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d80d      	bhi.n	80082e6 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	88d2      	ldrh	r2, [r2, #6]
 80082d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082d4:	b292      	uxth	r2, r2
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082de:	68b8      	ldr	r0, [r7, #8]
 80082e0:	f004 fed5 	bl	800d08e <memcpy>
    break;
 80082e4:	e08e      	b.n	8008404 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80082e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082e8:	461a      	mov	r2, r3
 80082ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082ec:	68b8      	ldr	r0, [r7, #8]
 80082ee:	f004 fece 	bl	800d08e <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80082f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	18d0      	adds	r0, r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80082fe:	4619      	mov	r1, r3
 8008300:	f004 fec5 	bl	800d08e <memcpy>
    break;
 8008304:	e07e      	b.n	8008404 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8008306:	88fa      	ldrh	r2, [r7, #6]
 8008308:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800830a:	429a      	cmp	r2, r3
 800830c:	d80f      	bhi.n	800832e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008316:	b29b      	uxth	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	fb13 f302 	smulbb	r3, r3, r2
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008326:	68b8      	ldr	r0, [r7, #8]
 8008328:	f7ff fe41 	bl	8007fae <_ff_pull_const_addr>
    break;
 800832c:	e069      	b.n	8008402 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800832e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8008336:	8c3b      	ldrh	r3, [r7, #32]
 8008338:	461a      	mov	r2, r3
 800833a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800833c:	68b8      	ldr	r0, [r7, #8]
 800833e:	f7ff fe36 	bl	8007fae <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8008342:	8c3b      	ldrh	r3, [r7, #32]
 8008344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008346:	4413      	add	r3, r2
 8008348:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800834a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8008356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800835a:	2b00      	cmp	r3, #0
 800835c:	d045      	beq.n	80083ea <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8008362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008366:	b29b      	uxth	r3, r3
 8008368:	f1c3 0304 	rsb	r3, r3, #4
 800836c:	b29a      	uxth	r2, r3
 800836e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008370:	837b      	strh	r3, [r7, #26]
 8008372:	4613      	mov	r3, r2
 8008374:	833b      	strh	r3, [r7, #24]
 8008376:	8b7a      	ldrh	r2, [r7, #26]
 8008378:	8b3b      	ldrh	r3, [r7, #24]
 800837a:	4293      	cmp	r3, r2
 800837c:	bf28      	it	cs
 800837e:	4613      	movcs	r3, r2
 8008380:	b29b      	uxth	r3, r3
 8008382:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8008386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800838a:	b29b      	uxth	r3, r3
 800838c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8008396:	f107 0314 	add.w	r3, r7, #20
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 800839c:	e007      	b.n	80083ae <_ff_pull_n+0x162>
 800839e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a0:	1c53      	adds	r3, r2, #1
 80083a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083b2:	1e5a      	subs	r2, r3, #1
 80083b4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f0      	bne.n	800839e <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80083c2:	e007      	b.n	80083d4 <_ff_pull_n+0x188>
 80083c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c6:	1c53      	adds	r3, r2, #1
 80083c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083cc:	1c59      	adds	r1, r3, #1
 80083ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083d8:	1e5a      	subs	r2, r3, #1
 80083da:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f0      	bne.n	80083c4 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e002      	b.n	80083f0 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80083f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <_ff_pull_n+0x1b6>
 80083f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083f8:	461a      	mov	r2, r3
 80083fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083fc:	68b8      	ldr	r0, [r7, #8]
 80083fe:	f7ff fdd6 	bl	8007fae <_ff_pull_const_addr>
    break;
 8008402:	bf00      	nop
  }
}
 8008404:	bf00      	nop
 8008406:	3738      	adds	r7, #56	@ 0x38
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	80fb      	strh	r3, [r7, #6]
 8008416:	460b      	mov	r3, r1
 8008418:	80bb      	strh	r3, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800841e:	88ba      	ldrh	r2, [r7, #4]
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	4413      	add	r3, r2
 8008424:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8008426:	88ba      	ldrh	r2, [r7, #4]
 8008428:	89fb      	ldrh	r3, [r7, #14]
 800842a:	429a      	cmp	r2, r3
 800842c:	d804      	bhi.n	8008438 <advance_index+0x2c>
 800842e:	89fa      	ldrh	r2, [r7, #14]
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	429a      	cmp	r2, r3
 8008436:	db08      	blt.n	800844a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b29b      	uxth	r3, r3
 800843e:	425b      	negs	r3, r3
 8008440:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8008442:	89fa      	ldrh	r2, [r7, #14]
 8008444:	89bb      	ldrh	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800844a:	89fb      	ldrh	r3, [r7, #14]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	@ 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4611      	mov	r1, r2
 8008464:	461a      	mov	r2, r3
 8008466:	460b      	mov	r3, r1
 8008468:	80fb      	strh	r3, [r7, #6]
 800846a:	4613      	mov	r3, r2
 800846c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	889b      	ldrh	r3, [r3, #4]
 8008472:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	843b      	strh	r3, [r7, #32]
 8008478:	88bb      	ldrh	r3, [r7, #4]
 800847a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800847c:	8c3a      	ldrh	r2, [r7, #32]
 800847e:	8bfb      	ldrh	r3, [r7, #30]
 8008480:	429a      	cmp	r2, r3
 8008482:	d304      	bcc.n	800848e <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008484:	8c3a      	ldrh	r2, [r7, #32]
 8008486:	8bfb      	ldrh	r3, [r7, #30]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	b29b      	uxth	r3, r3
 800848c:	e008      	b.n	80084a0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800848e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	8c39      	ldrh	r1, [r7, #32]
 8008496:	8bfb      	ldrh	r3, [r7, #30]
 8008498:	1acb      	subs	r3, r1, r3
 800849a:	b29b      	uxth	r3, r3
 800849c:	4413      	add	r3, r2
 800849e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80084a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80084a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <_tu_fifo_peek+0x54>
 80084a8:	2300      	movs	r3, #0
 80084aa:	e037      	b.n	800851c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	889b      	ldrh	r3, [r3, #4]
 80084b0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d91b      	bls.n	80084ee <_tu_fifo_peek+0x96>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	8afa      	ldrh	r2, [r7, #22]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d305      	bcc.n	80084d4 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	889b      	ldrh	r3, [r3, #4]
 80084cc:	8afa      	ldrh	r2, [r7, #22]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	82bb      	strh	r3, [r7, #20]
 80084d2:	e004      	b.n	80084de <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	889a      	ldrh	r2, [r3, #4]
 80084d8:	8afb      	ldrh	r3, [r7, #22]
 80084da:	4413      	add	r3, r2
 80084dc:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	8aba      	ldrh	r2, [r7, #20]
 80084e2:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80084e4:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80084e6:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	889b      	ldrh	r3, [r3, #4]
 80084ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	827b      	strh	r3, [r7, #18]
 80084f4:	88bb      	ldrh	r3, [r7, #4]
 80084f6:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80084f8:	e003      	b.n	8008502 <_tu_fifo_peek+0xaa>
 80084fa:	8a3a      	ldrh	r2, [r7, #16]
 80084fc:	8a7b      	ldrh	r3, [r7, #18]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	823b      	strh	r3, [r7, #16]
 8008502:	8a7a      	ldrh	r2, [r7, #18]
 8008504:	8a3b      	ldrh	r3, [r7, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d9f7      	bls.n	80084fa <_tu_fifo_peek+0xa2>
  return idx;
 800850a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800850c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800850e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008510:	461a      	mov	r2, r3
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe7a 	bl	800820e <_ff_pull>

  return true;
 800851a:	2301      	movs	r3, #1
}
 800851c:	4618      	mov	r0, r3
 800851e:	3728      	adds	r7, #40	@ 0x28
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	@ 0x30
 8008528:	af02      	add	r7, sp, #8
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4611      	mov	r1, r2
 8008530:	461a      	mov	r2, r3
 8008532:	460b      	mov	r3, r1
 8008534:	80fb      	strh	r3, [r7, #6]
 8008536:	4613      	mov	r3, r2
 8008538:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	889b      	ldrh	r3, [r3, #4]
 800853e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008540:	88bb      	ldrh	r3, [r7, #4]
 8008542:	843b      	strh	r3, [r7, #32]
 8008544:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008546:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008548:	8c3a      	ldrh	r2, [r7, #32]
 800854a:	8bfb      	ldrh	r3, [r7, #30]
 800854c:	429a      	cmp	r2, r3
 800854e:	d304      	bcc.n	800855a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008550:	8c3a      	ldrh	r2, [r7, #32]
 8008552:	8bfb      	ldrh	r3, [r7, #30]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	b29b      	uxth	r3, r3
 8008558:	e008      	b.n	800856c <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800855a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	8c39      	ldrh	r1, [r7, #32]
 8008562:	8bfb      	ldrh	r3, [r7, #30]
 8008564:	1acb      	subs	r3, r1, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	4413      	add	r3, r2
 800856a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800856c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800856e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <_tu_fifo_peek_n+0x54>
 8008574:	2300      	movs	r3, #0
 8008576:	e041      	b.n	80085fc <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	889b      	ldrh	r3, [r3, #4]
 800857c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800857e:	429a      	cmp	r2, r3
 8008580:	d91b      	bls.n	80085ba <_tu_fifo_peek_n+0x96>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	88bb      	ldrh	r3, [r7, #4]
 8008588:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	8afa      	ldrh	r2, [r7, #22]
 8008590:	429a      	cmp	r2, r3
 8008592:	d305      	bcc.n	80085a0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	889b      	ldrh	r3, [r3, #4]
 8008598:	8afa      	ldrh	r2, [r7, #22]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	82bb      	strh	r3, [r7, #20]
 800859e:	e004      	b.n	80085aa <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	889a      	ldrh	r2, [r3, #4]
 80085a4:	8afb      	ldrh	r3, [r7, #22]
 80085a6:	4413      	add	r3, r2
 80085a8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	8aba      	ldrh	r2, [r7, #20]
 80085ae:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80085b0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80085b2:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	889b      	ldrh	r3, [r3, #4]
 80085b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80085ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80085bc:	88fb      	ldrh	r3, [r7, #6]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d201      	bcs.n	80085c6 <_tu_fifo_peek_n+0xa2>
 80085c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085c4:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	889b      	ldrh	r3, [r3, #4]
 80085ca:	827b      	strh	r3, [r7, #18]
 80085cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085ce:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80085d0:	e003      	b.n	80085da <_tu_fifo_peek_n+0xb6>
 80085d2:	8a3a      	ldrh	r2, [r7, #16]
 80085d4:	8a7b      	ldrh	r3, [r7, #18]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	823b      	strh	r3, [r7, #16]
 80085da:	8a7a      	ldrh	r2, [r7, #18]
 80085dc:	8a3b      	ldrh	r3, [r7, #16]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d9f7      	bls.n	80085d2 <_tu_fifo_peek_n+0xae>
  return idx;
 80085e2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80085e4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80085e6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80085e8:	88fa      	ldrh	r2, [r7, #6]
 80085ea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	460b      	mov	r3, r1
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fe29 	bl	800824c <_ff_pull_n>

  return n;
 80085fa:	88fb      	ldrh	r3, [r7, #6]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3728      	adds	r7, #40	@ 0x28
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b092      	sub	sp, #72	@ 0x48
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	460b      	mov	r3, r1
 8008614:	80fb      	strh	r3, [r7, #6]
 8008616:	4613      	mov	r3, r2
 8008618:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <_tu_fifo_write_n+0x20>
 8008620:	2300      	movs	r3, #0
 8008622:	e0bc      	b.n	800879e <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	891b      	ldrh	r3, [r3, #8]
 8008628:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	895b      	ldrh	r3, [r3, #10]
 800862e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	79db      	ldrb	r3, [r3, #7]
 8008638:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f083 0301 	eor.w	r3, r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d036      	beq.n	80086b6 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	889b      	ldrh	r3, [r3, #4]
 800864c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800864e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008650:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008652:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008654:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008656:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008658:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800865a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800865c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800865e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008660:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8008662:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008664:	8c3b      	ldrh	r3, [r7, #32]
 8008666:	429a      	cmp	r2, r3
 8008668:	d304      	bcc.n	8008674 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800866a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800866c:	8c3b      	ldrh	r3, [r7, #32]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	b29b      	uxth	r3, r3
 8008672:	e008      	b.n	8008686 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800867c:	8c3b      	ldrh	r3, [r7, #32]
 800867e:	1acb      	subs	r3, r1, r3
 8008680:	b29b      	uxth	r3, r3
 8008682:	4413      	add	r3, r2
 8008684:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008686:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8008688:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800868a:	8bfb      	ldrh	r3, [r7, #30]
 800868c:	429a      	cmp	r2, r3
 800868e:	d904      	bls.n	800869a <_tu_fifo_write_n+0x96>
 8008690:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008692:	8bfb      	ldrh	r3, [r7, #30]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	b29b      	uxth	r3, r3
 8008698:	e000      	b.n	800869c <_tu_fifo_write_n+0x98>
 800869a:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800869c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80086a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80086a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80086a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80086a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bf28      	it	cs
 80086ae:	4613      	movcs	r3, r2
 80086b0:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80086b2:	80fb      	strh	r3, [r7, #6]
 80086b4:	e04b      	b.n	800874e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	88fa      	ldrh	r2, [r7, #6]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d317      	bcc.n	80086f0 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80086c0:	797b      	ldrb	r3, [r7, #5]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10e      	bne.n	80086e4 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	8892      	ldrh	r2, [r2, #4]
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	88d2      	ldrh	r2, [r2, #6]
 80086d2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086d6:	b292      	uxth	r2, r2
 80086d8:	fb02 f303 	mul.w	r3, r2, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	4413      	add	r3, r2
 80086e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	889b      	ldrh	r3, [r3, #4]
 80086e8:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80086ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80086ee:	e02e      	b.n	800874e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	889b      	ldrh	r3, [r3, #4]
 80086f4:	83bb      	strh	r3, [r7, #28]
 80086f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086f8:	837b      	strh	r3, [r7, #26]
 80086fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086fc:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80086fe:	8b7a      	ldrh	r2, [r7, #26]
 8008700:	8b3b      	ldrh	r3, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d304      	bcc.n	8008710 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8008706:	8b7a      	ldrh	r2, [r7, #26]
 8008708:	8b3b      	ldrh	r3, [r7, #24]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	b29b      	uxth	r3, r3
 800870e:	e008      	b.n	8008722 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008710:	8bbb      	ldrh	r3, [r7, #28]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	8b79      	ldrh	r1, [r7, #26]
 8008718:	8b3b      	ldrh	r3, [r7, #24]
 800871a:	1acb      	subs	r3, r1, r3
 800871c:	b29b      	uxth	r3, r3
 800871e:	4413      	add	r3, r2
 8008720:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008722:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008724:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	441a      	add	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	889b      	ldrh	r3, [r3, #4]
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	429a      	cmp	r2, r3
 8008732:	db0c      	blt.n	800874e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8898      	ldrh	r0, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	889a      	ldrh	r2, [r3, #4]
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	b29a      	uxth	r2, r3
 8008742:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008744:	4619      	mov	r1, r3
 8008746:	f7ff fe61 	bl	800840c <advance_index>
 800874a:	4603      	mov	r3, r0
 800874c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d023      	beq.n	800879c <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	889b      	ldrh	r3, [r3, #4]
 8008758:	82fb      	strh	r3, [r7, #22]
 800875a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800875c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800875e:	e003      	b.n	8008768 <_tu_fifo_write_n+0x164>
 8008760:	8aba      	ldrh	r2, [r7, #20]
 8008762:	8afb      	ldrh	r3, [r7, #22]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	82bb      	strh	r3, [r7, #20]
 8008768:	8afa      	ldrh	r2, [r7, #22]
 800876a:	8abb      	ldrh	r3, [r7, #20]
 800876c:	429a      	cmp	r2, r3
 800876e:	d9f7      	bls.n	8008760 <_tu_fifo_write_n+0x15c>
  return idx;
 8008770:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008772:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8008774:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	797b      	ldrb	r3, [r7, #5]
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	460b      	mov	r3, r1
 800877e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fc66 	bl	8008052 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fe3c 	bl	800840c <advance_index>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 800879c:	88fb      	ldrh	r3, [r7, #6]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3740      	adds	r7, #64	@ 0x40
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af02      	add	r7, sp, #8
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	4611      	mov	r1, r2
 80087b2:	461a      	mov	r2, r3
 80087b4:	460b      	mov	r3, r1
 80087b6:	80fb      	strh	r3, [r7, #6]
 80087b8:	4613      	mov	r3, r2
 80087ba:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	891b      	ldrh	r3, [r3, #8]
 80087c0:	b298      	uxth	r0, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	895b      	ldrh	r3, [r3, #10]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	88f9      	ldrh	r1, [r7, #6]
 80087ca:	797a      	ldrb	r2, [r7, #5]
 80087cc:	9201      	str	r2, [sp, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4603      	mov	r3, r0
 80087d2:	460a      	mov	r2, r1
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff fea4 	bl	8008524 <_tu_fifo_peek_n>
 80087dc:	4603      	mov	r3, r0
 80087de:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8898      	ldrh	r0, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	895b      	ldrh	r3, [r3, #10]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	4619      	mov	r1, r3
 80087ee:	f7ff fe0d 	bl	800840c <advance_index>
 80087f2:	4603      	mov	r3, r0
 80087f4:	461a      	mov	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80087fa:	88fb      	ldrh	r3, [r7, #6]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8899      	ldrh	r1, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	891b      	ldrh	r3, [r3, #8]
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	895b      	ldrh	r3, [r3, #10]
 800881a:	b29b      	uxth	r3, r3
 800881c:	8279      	strh	r1, [r7, #18]
 800881e:	823a      	strh	r2, [r7, #16]
 8008820:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8008822:	8a3a      	ldrh	r2, [r7, #16]
 8008824:	89fb      	ldrh	r3, [r7, #14]
 8008826:	429a      	cmp	r2, r3
 8008828:	d304      	bcc.n	8008834 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800882a:	8a3a      	ldrh	r2, [r7, #16]
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	b29b      	uxth	r3, r3
 8008832:	e008      	b.n	8008846 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008834:	8a7b      	ldrh	r3, [r7, #18]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	8a39      	ldrh	r1, [r7, #16]
 800883c:	89fb      	ldrh	r3, [r7, #14]
 800883e:	1acb      	subs	r3, r1, r3
 8008840:	b29b      	uxth	r3, r3
 8008842:	4413      	add	r3, r2
 8008844:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	8892      	ldrh	r2, [r2, #4]
 800884a:	82fb      	strh	r3, [r7, #22]
 800884c:	4613      	mov	r3, r2
 800884e:	82bb      	strh	r3, [r7, #20]
 8008850:	8afa      	ldrh	r2, [r7, #22]
 8008852:	8abb      	ldrh	r3, [r7, #20]
 8008854:	4293      	cmp	r3, r2
 8008856:	bf28      	it	cs
 8008858:	4613      	movcs	r3, r2
 800885a:	b29b      	uxth	r3, r3
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	891b      	ldrh	r3, [r3, #8]
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	895b      	ldrh	r3, [r3, #10]
 800887a:	b29b      	uxth	r3, r3
 800887c:	429a      	cmp	r2, r3
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8899      	ldrh	r1, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	891b      	ldrh	r3, [r3, #8]
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	895b      	ldrh	r3, [r3, #10]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	81f9      	strh	r1, [r7, #14]
 80088ac:	81ba      	strh	r2, [r7, #12]
 80088ae:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 80088b0:	89ba      	ldrh	r2, [r7, #12]
 80088b2:	897b      	ldrh	r3, [r7, #10]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d304      	bcc.n	80088c2 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80088b8:	89ba      	ldrh	r2, [r7, #12]
 80088ba:	897b      	ldrh	r3, [r7, #10]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	e008      	b.n	80088d4 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80088c2:	89fb      	ldrh	r3, [r7, #14]
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	89b9      	ldrh	r1, [r7, #12]
 80088ca:	897b      	ldrh	r3, [r7, #10]
 80088cc:	1acb      	subs	r3, r1, r3
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	8892      	ldrh	r2, [r2, #4]
 80088d8:	4293      	cmp	r3, r2
 80088da:	bf2c      	ite	cs
 80088dc:	2301      	movcs	r3, #1
 80088de:	2300      	movcc	r3, #0
 80088e0:	b2db      	uxtb	r3, r3
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	8899      	ldrh	r1, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	891b      	ldrh	r3, [r3, #8]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	895b      	ldrh	r3, [r3, #10]
 8008904:	b29b      	uxth	r3, r3
 8008906:	82f9      	strh	r1, [r7, #22]
 8008908:	82ba      	strh	r2, [r7, #20]
 800890a:	827b      	strh	r3, [r7, #18]
 800890c:	8afb      	ldrh	r3, [r7, #22]
 800890e:	823b      	strh	r3, [r7, #16]
 8008910:	8abb      	ldrh	r3, [r7, #20]
 8008912:	81fb      	strh	r3, [r7, #14]
 8008914:	8a7b      	ldrh	r3, [r7, #18]
 8008916:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8008918:	89fa      	ldrh	r2, [r7, #14]
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	429a      	cmp	r2, r3
 800891e:	d304      	bcc.n	800892a <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8008920:	89fa      	ldrh	r2, [r7, #14]
 8008922:	89bb      	ldrh	r3, [r7, #12]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	e008      	b.n	800893c <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800892a:	8a3b      	ldrh	r3, [r7, #16]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	89f9      	ldrh	r1, [r7, #14]
 8008932:	89bb      	ldrh	r3, [r7, #12]
 8008934:	1acb      	subs	r3, r1, r3
 8008936:	b29b      	uxth	r3, r3
 8008938:	4413      	add	r3, r2
 800893a:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800893c:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800893e:	8afa      	ldrh	r2, [r7, #22]
 8008940:	897b      	ldrh	r3, [r7, #10]
 8008942:	429a      	cmp	r2, r3
 8008944:	d904      	bls.n	8008950 <tu_fifo_remaining+0x62>
 8008946:	8afa      	ldrh	r2, [r7, #22]
 8008948:	897b      	ldrh	r3, [r7, #10]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	e000      	b.n	8008952 <tu_fifo_remaining+0x64>
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	895b      	ldrh	r3, [r3, #10]
 8008972:	b29b      	uxth	r3, r3
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fd6e 	bl	8008458 <_tu_fifo_peek>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8898      	ldrh	r0, [r3, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	895b      	ldrh	r3, [r3, #10]
 8008988:	b29b      	uxth	r3, r3
 800898a:	7bfa      	ldrb	r2, [r7, #15]
 800898c:	b292      	uxth	r2, r2
 800898e:	4619      	mov	r1, r3
 8008990:	f7ff fd3c 	bl	800840c <advance_index>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80089b4:	88fa      	ldrh	r2, [r7, #6]
 80089b6:	2300      	movs	r3, #0
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff fef3 	bl	80087a6 <_tu_fifo_read_n>
 80089c0:	4603      	mov	r3, r0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	2301      	movs	r3, #1
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fee1 	bl	80087a6 <_tu_fifo_read_n>
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	891b      	ldrh	r3, [r3, #8]
 80089fc:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff ff47 	bl	8008892 <tu_fifo_full>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00c      	beq.n	8008a24 <tu_fifo_write+0x36>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	79db      	ldrb	r3, [r3, #7]
 8008a0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f083 0301 	eor.w	r3, r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <tu_fifo_write+0x36>
  {
    ret = false;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
 8008a22:	e022      	b.n	8008a6a <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	889b      	ldrh	r3, [r3, #4]
 8008a28:	823b      	strh	r3, [r7, #16]
 8008a2a:	8abb      	ldrh	r3, [r7, #20]
 8008a2c:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8008a2e:	e003      	b.n	8008a38 <tu_fifo_write+0x4a>
 8008a30:	89fa      	ldrh	r2, [r7, #14]
 8008a32:	8a3b      	ldrh	r3, [r7, #16]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	81fb      	strh	r3, [r7, #14]
 8008a38:	8a3a      	ldrh	r2, [r7, #16]
 8008a3a:	89fb      	ldrh	r3, [r7, #14]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d9f7      	bls.n	8008a30 <tu_fifo_write+0x42>
  return idx;
 8008a40:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008a42:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008a44:	8a7b      	ldrh	r3, [r7, #18]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fae2 	bl	8008014 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	889b      	ldrh	r3, [r3, #4]
 8008a54:	8ab9      	ldrh	r1, [r7, #20]
 8008a56:	2201      	movs	r2, #1
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fcd7 	bl	800840c <advance_index>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	811a      	strh	r2, [r3, #8]

    ret = true;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	2300      	movs	r3, #0
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff fdbb 	bl	8008604 <_tu_fifo_write_n>
 8008a8e:	4603      	mov	r3, r0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff fda9 	bl	8008604 <_tu_fifo_write_n>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8008ad0:	2301      	movs	r3, #1
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	79db      	ldrb	r3, [r3, #7]
 8008aee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d101      	bne.n	8008afe <tu_fifo_set_overwritable+0x20>
    return true;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e006      	b.n	8008b0c <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	79d3      	ldrb	r3, [r2, #7]
 8008b02:	78f9      	ldrb	r1, [r7, #3]
 8008b04:	f361 13c7 	bfi	r3, r1, #7, #1
 8008b08:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008b0a:	2301      	movs	r3, #1
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	71fb      	strb	r3, [r7, #7]
 8008b24:	4613      	mov	r3, r2
 8008b26:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  return NULL;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  return NULL;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8008b8e:	b480      	push	{r7}
 8008b90:	af00      	add	r7, sp, #0
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8008bb2:	b480      	push	{r7}
 8008bb4:	af00      	add	r7, sp, #0
}
 8008bb6:	bf00      	nop
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	603a      	str	r2, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8008be8:	2301      	movs	r3, #1
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <tud_mounted+0x20>)
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bf14      	ite	ne
 8008c06:	2301      	movne	r3, #1
 8008c08:	2300      	moveq	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20001714 	.word	0x20001714

08008c1c <tud_suspended>:

bool tud_suspended(void) {
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <tud_suspended+0x24>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bf14      	ite	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	2300      	moveq	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20001714 	.word	0x20001714

08008c44 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8008c48:	4b0f      	ldr	r3, [pc, #60]	@ (8008c88 <tud_remote_wakeup+0x44>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00d      	beq.n	8008c72 <tud_remote_wakeup+0x2e>
 8008c56:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <tud_remote_wakeup+0x44>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	f003 0310 	and.w	r3, r3, #16
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <tud_remote_wakeup+0x2e>
 8008c64:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <tud_remote_wakeup+0x44>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <tud_remote_wakeup+0x32>
 8008c72:	2300      	movs	r3, #0
 8008c74:	e005      	b.n	8008c82 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8008c76:	4b05      	ldr	r3, [pc, #20]	@ (8008c8c <tud_remote_wakeup+0x48>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f002 fba4 	bl	800b3c8 <dcd_remote_wakeup>
  return true;
 8008c80:	2301      	movs	r3, #1
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20001714 	.word	0x20001714
 8008c8c:	2000022d 	.word	0x2000022d

08008c90 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8008c94:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <tud_inited+0x1c>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2bff      	cmp	r3, #255	@ 0xff
 8008c9a:	bf14      	ite	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	2300      	moveq	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	2000022d 	.word	0x2000022d

08008cb0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08c      	sub	sp, #48	@ 0x30
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8008cbc:	f7ff ffe8 	bl	8008c90 <tud_inited>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e09e      	b.n	8008e08 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <tud_rhport_init+0x36>
 8008cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8008e10 <tud_rhport_init+0x160>)
 8008cd2:	61bb      	str	r3, [r7, #24]
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d000      	beq.n	8008ce2 <tud_rhport_init+0x32>
 8008ce0:	be00      	bkpt	0x0000
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e090      	b.n	8008e08 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8008ce6:	222c      	movs	r2, #44	@ 0x2c
 8008ce8:	2100      	movs	r1, #0
 8008cea:	484a      	ldr	r0, [pc, #296]	@ (8008e14 <tud_rhport_init+0x164>)
 8008cec:	f004 f8f7 	bl	800cede <memset>
  _usbd_queued_setup = 0;
 8008cf0:	4b49      	ldr	r3, [pc, #292]	@ (8008e18 <tud_rhport_init+0x168>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	4b49      	ldr	r3, [pc, #292]	@ (8008e1c <tud_rhport_init+0x16c>)
 8008cf8:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8008cfa:	bf00      	nop
 8008cfc:	4b48      	ldr	r3, [pc, #288]	@ (8008e20 <tud_rhport_init+0x170>)
 8008cfe:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fed9 	bl	8008abc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8008d0a:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8008d0c:	4a45      	ldr	r2, [pc, #276]	@ (8008e24 <tud_rhport_init+0x174>)
 8008d0e:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8008d10:	4b44      	ldr	r3, [pc, #272]	@ (8008e24 <tud_rhport_init+0x174>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <tud_rhport_init+0x7e>
 8008d18:	4b3d      	ldr	r3, [pc, #244]	@ (8008e10 <tud_rhport_init+0x160>)
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d000      	beq.n	8008d2a <tud_rhport_init+0x7a>
 8008d28:	be00      	bkpt	0x0000
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e06c      	b.n	8008e08 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8008d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e28 <tud_rhport_init+0x178>)
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008d34:	483d      	ldr	r0, [pc, #244]	@ (8008e2c <tud_rhport_init+0x17c>)
 8008d36:	f3af 8000 	nop.w
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e30 <tud_rhport_init+0x180>)
 8008d3e:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008d46:	e03a      	b.n	8008dbe <tud_rhport_init+0x10e>
 8008d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d4c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008d52:	4b36      	ldr	r3, [pc, #216]	@ (8008e2c <tud_rhport_init+0x17c>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	7bfa      	ldrb	r2, [r7, #15]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d206      	bcs.n	8008d6a <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008d5c:	4b34      	ldr	r3, [pc, #208]	@ (8008e30 <tud_rhport_init+0x180>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	015b      	lsls	r3, r3, #5
 8008d64:	4413      	add	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]
 8008d68:	e00d      	b.n	8008d86 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008d6a:	4b30      	ldr	r3, [pc, #192]	@ (8008e2c <tud_rhport_init+0x17c>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	db07      	blt.n	8008d86 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	4a2c      	ldr	r2, [pc, #176]	@ (8008e2c <tud_rhport_init+0x17c>)
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	1a9b      	subs	r3, r3, r2
 8008d7e:	015b      	lsls	r3, r3, #5
 8008d80:	4a2c      	ldr	r2, [pc, #176]	@ (8008e34 <tud_rhport_init+0x184>)
 8008d82:	4413      	add	r3, r2
 8008d84:	60bb      	str	r3, [r7, #8]
  return driver;
 8008d86:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8008d88:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <tud_rhport_init+0xe8>
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <tud_rhport_init+0xfe>
 8008d98:	4b1d      	ldr	r3, [pc, #116]	@ (8008e10 <tud_rhport_init+0x160>)
 8008d9a:	623b      	str	r3, [r7, #32]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d000      	beq.n	8008daa <tud_rhport_init+0xfa>
 8008da8:	be00      	bkpt	0x0000
 8008daa:	2300      	movs	r3, #0
 8008dac:	e02c      	b.n	8008e08 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008db8:	3301      	adds	r3, #1
 8008dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <tud_rhport_init+0x17c>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	dabd      	bge.n	8008d48 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e38 <tud_rhport_init+0x188>)
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f002 f9cc 	bl	800b174 <dcd_init>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f083 0301 	eor.w	r3, r3, #1
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <tud_rhport_init+0x14e>
 8008de8:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <tud_rhport_init+0x160>)
 8008dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d000      	beq.n	8008dfa <tud_rhport_init+0x14a>
 8008df8:	be00      	bkpt	0x0000
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e004      	b.n	8008e08 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 fa55 	bl	800b2b0 <dcd_int_enable>

  return true;
 8008e06:	2301      	movs	r3, #1
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3730      	adds	r7, #48	@ 0x30
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	e000edf0 	.word	0xe000edf0
 8008e14:	20001714 	.word	0x20001714
 8008e18:	20001740 	.word	0x20001740
 8008e1c:	20000230 	.word	0x20000230
 8008e20:	20000234 	.word	0x20000234
 8008e24:	2000180c 	.word	0x2000180c
 8008e28:	00000000 	.word	0x00000000
 8008e2c:	20001748 	.word	0x20001748
 8008e30:	20001744 	.word	0x20001744
 8008e34:	0800f220 	.word	0x0800f220
 8008e38:	2000022d 	.word	0x2000022d

08008e3c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008e46:	2300      	movs	r3, #0
 8008e48:	77fb      	strb	r3, [r7, #31]
 8008e4a:	e034      	b.n	8008eb6 <configuration_reset+0x7a>
 8008e4c:	7ffb      	ldrb	r3, [r7, #31]
 8008e4e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008e54:	4b25      	ldr	r3, [pc, #148]	@ (8008eec <configuration_reset+0xb0>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	7cfa      	ldrb	r2, [r7, #19]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d206      	bcs.n	8008e6c <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8008e5e:	4b24      	ldr	r3, [pc, #144]	@ (8008ef0 <configuration_reset+0xb4>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	7cfb      	ldrb	r3, [r7, #19]
 8008e64:	015b      	lsls	r3, r3, #5
 8008e66:	4413      	add	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e00d      	b.n	8008e88 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008eec <configuration_reset+0xb0>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	7cfb      	ldrb	r3, [r7, #19]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	db07      	blt.n	8008e88 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008e78:	7cfb      	ldrb	r3, [r7, #19]
 8008e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008eec <configuration_reset+0xb0>)
 8008e7c:	7812      	ldrb	r2, [r2, #0]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	015b      	lsls	r3, r3, #5
 8008e82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef4 <configuration_reset+0xb8>)
 8008e84:	4413      	add	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  return driver;
 8008e88:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8008e8a:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <configuration_reset+0x6a>
 8008e92:	4b19      	ldr	r3, [pc, #100]	@ (8008ef8 <configuration_reset+0xbc>)
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01f      	beq.n	8008ee2 <configuration_reset+0xa6>
 8008ea2:	be00      	bkpt	0x0000
 8008ea4:	e01d      	b.n	8008ee2 <configuration_reset+0xa6>
    driver->reset(rhport);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	79fa      	ldrb	r2, [r7, #7]
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008eb0:	7ffb      	ldrb	r3, [r7, #31]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	77fb      	strb	r3, [r7, #31]
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <configuration_reset+0xb0>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	7ffb      	ldrb	r3, [r7, #31]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	dac4      	bge.n	8008e4c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8008ec2:	222c      	movs	r2, #44	@ 0x2c
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	480d      	ldr	r0, [pc, #52]	@ (8008efc <configuration_reset+0xc0>)
 8008ec8:	f004 f809 	bl	800cede <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008ecc:	2210      	movs	r2, #16
 8008ece:	21ff      	movs	r1, #255	@ 0xff
 8008ed0:	480b      	ldr	r0, [pc, #44]	@ (8008f00 <configuration_reset+0xc4>)
 8008ed2:	f004 f804 	bl	800cede <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008ed6:	220c      	movs	r2, #12
 8008ed8:	21ff      	movs	r1, #255	@ 0xff
 8008eda:	480a      	ldr	r0, [pc, #40]	@ (8008f04 <configuration_reset+0xc8>)
 8008edc:	f003 ffff 	bl	800cede <memset>
 8008ee0:	e000      	b.n	8008ee4 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008ee2:	bf00      	nop
}
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20001748 	.word	0x20001748
 8008ef0:	20001744 	.word	0x20001744
 8008ef4:	0800f220 	.word	0x0800f220
 8008ef8:	e000edf0 	.word	0xe000edf0
 8008efc:	20001714 	.word	0x20001714
 8008f00:	20001718 	.word	0x20001718
 8008f04:	20001728 	.word	0x20001728

08008f08 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff ff91 	bl	8008e3c <configuration_reset>
  usbd_control_reset();
 8008f1a:	f001 fc37 	bl	800a78c <usbd_control_reset>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008f28:	b590      	push	{r4, r7, lr}
 8008f2a:	b093      	sub	sp, #76	@ 0x4c
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008f34:	f7ff feac 	bl	8008c90 <tud_inited>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f083 0301 	eor.w	r3, r3, #1
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8189 	bne.w	8009258 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008f46:	4bb1      	ldr	r3, [pc, #708]	@ (800920c <tud_task_ext+0x2e4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4c:	f107 030c 	add.w	r3, r7, #12
 8008f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	3304      	adds	r3, #4
 8008f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7ff fcfa 	bl	800895e <tu_fifo_read>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2001      	movs	r0, #1
 8008f76:	4798      	blx	r3

  return success;
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f7c:	f083 0301 	eor.w	r3, r3, #1
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 816a 	bne.w	800925c <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008f88:	7b7b      	ldrb	r3, [r7, #13]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	2b07      	cmp	r3, #7
 8008f8e:	f200 814b 	bhi.w	8009228 <tud_task_ext+0x300>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <tud_task_ext+0x70>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fb9 	.word	0x08008fb9
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	080091dd 	.word	0x080091dd
 8008fa4:	0800918f 	.word	0x0800918f
 8008fa8:	080091b9 	.word	0x080091b9
 8008fac:	08008fd7 	.word	0x08008fd7
 8008fb0:	08009087 	.word	0x08009087
 8008fb4:	080091cd 	.word	0x080091cd
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008fb8:	7b3b      	ldrb	r3, [r7, #12]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff ffa4 	bl	8008f08 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008fc0:	7c3a      	ldrb	r2, [r7, #16]
 8008fc2:	4b93      	ldr	r3, [pc, #588]	@ (8009210 <tud_task_ext+0x2e8>)
 8008fc4:	709a      	strb	r2, [r3, #2]
        break;
 8008fc6:	e146      	b.n	8009256 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008fc8:	7b3b      	ldrb	r3, [r7, #12]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff ff9c 	bl	8008f08 <usbd_reset>
        tud_umount_cb();
 8008fd0:	f7ff fddd 	bl	8008b8e <tud_umount_cb>
        break;
 8008fd4:	e13f      	b.n	8009256 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008fd6:	4b8f      	ldr	r3, [pc, #572]	@ (8009214 <tud_task_ext+0x2ec>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <tud_task_ext+0xce>
 8008fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8009218 <tud_task_ext+0x2f0>)
 8008fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 8137 	beq.w	8009260 <tud_task_ext+0x338>
 8008ff2:	be00      	bkpt	0x0000
 8008ff4:	e134      	b.n	8009260 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008ff6:	4b87      	ldr	r3, [pc, #540]	@ (8009214 <tud_task_ext+0x2ec>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	4b84      	ldr	r3, [pc, #528]	@ (8009214 <tud_task_ext+0x2ec>)
 8009002:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8009004:	4b83      	ldr	r3, [pc, #524]	@ (8009214 <tud_task_ext+0x2ec>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 8116 	bne.w	800923c <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8009010:	4a7f      	ldr	r2, [pc, #508]	@ (8009210 <tud_task_ext+0x2e8>)
 8009012:	7813      	ldrb	r3, [r2, #0]
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800901a:	4a7d      	ldr	r2, [pc, #500]	@ (8009210 <tud_task_ext+0x2e8>)
 800901c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8009028:	4a79      	ldr	r2, [pc, #484]	@ (8009210 <tud_task_ext+0x2e8>)
 800902a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800902e:	f023 0304 	bic.w	r3, r3, #4
 8009032:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8009036:	4a76      	ldr	r2, [pc, #472]	@ (8009210 <tud_task_ext+0x2e8>)
 8009038:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800903c:	f023 0301 	bic.w	r3, r3, #1
 8009040:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8009044:	4a72      	ldr	r2, [pc, #456]	@ (8009210 <tud_task_ext+0x2e8>)
 8009046:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800904a:	f023 0304 	bic.w	r3, r3, #4
 800904e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8009052:	7b3a      	ldrb	r2, [r7, #12]
 8009054:	f107 030c 	add.w	r3, r7, #12
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f000 f91f 	bl	80092a0 <process_control_request>
 8009062:	4603      	mov	r3, r0
 8009064:	f083 0301 	eor.w	r3, r3, #1
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80e8 	beq.w	8009240 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8009070:	7b3b      	ldrb	r3, [r7, #12]
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f002 fb7b 	bl	800b770 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800907a:	7b3b      	ldrb	r3, [r7, #12]
 800907c:	2180      	movs	r1, #128	@ 0x80
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fb76 	bl	800b770 <dcd_edpt_stall>
        }
        break;
 8009084:	e0dc      	b.n	8009240 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8009086:	7c3b      	ldrb	r3, [r7, #16]
 8009088:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800908c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009090:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009094:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800909c:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 800909e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80090a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80090a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80090aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090ae:	09db      	lsrs	r3, r3, #7
 80090b0:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80090b2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80090b6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80090ba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80090be:	4954      	ldr	r1, [pc, #336]	@ (8009210 <tud_task_ext+0x2e8>)
 80090c0:	0052      	lsls	r2, r2, #1
 80090c2:	440a      	add	r2, r1
 80090c4:	4413      	add	r3, r2
 80090c6:	f103 0220 	add.w	r2, r3, #32
 80090ca:	7813      	ldrb	r3, [r2, #0]
 80090cc:	f023 0301 	bic.w	r3, r3, #1
 80090d0:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80090d2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80090d6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80090da:	494d      	ldr	r1, [pc, #308]	@ (8009210 <tud_task_ext+0x2e8>)
 80090dc:	0052      	lsls	r2, r2, #1
 80090de:	440a      	add	r2, r1
 80090e0:	4413      	add	r3, r2
 80090e2:	f103 0220 	add.w	r2, r3, #32
 80090e6:	7813      	ldrb	r3, [r2, #0]
 80090e8:	f023 0304 	bic.w	r3, r3, #4
 80090ec:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 80090ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d107      	bne.n	8009106 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80090f6:	7b38      	ldrb	r0, [r7, #12]
 80090f8:	7c7a      	ldrb	r2, [r7, #17]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8009100:	f001 fb7a 	bl	800a7f8 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8009104:	e0a7      	b.n	8009256 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8009106:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800910a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800910e:	4940      	ldr	r1, [pc, #256]	@ (8009210 <tud_task_ext+0x2e8>)
 8009110:	0052      	lsls	r2, r2, #1
 8009112:	440a      	add	r2, r1
 8009114:	4413      	add	r3, r2
 8009116:	3314      	adds	r3, #20
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8009122:	4b3e      	ldr	r3, [pc, #248]	@ (800921c <tud_task_ext+0x2f4>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800912a:	429a      	cmp	r2, r3
 800912c:	d207      	bcs.n	800913e <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 800912e:	4b3c      	ldr	r3, [pc, #240]	@ (8009220 <tud_task_ext+0x2f8>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009136:	015b      	lsls	r3, r3, #5
 8009138:	4413      	add	r3, r2
 800913a:	623b      	str	r3, [r7, #32]
 800913c:	e00f      	b.n	800915e <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800913e:	4b37      	ldr	r3, [pc, #220]	@ (800921c <tud_task_ext+0x2f4>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009148:	429a      	cmp	r2, r3
 800914a:	db08      	blt.n	800915e <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800914c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009150:	4a32      	ldr	r2, [pc, #200]	@ (800921c <tud_task_ext+0x2f4>)
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	015b      	lsls	r3, r3, #5
 8009158:	4a32      	ldr	r2, [pc, #200]	@ (8009224 <tud_task_ext+0x2fc>)
 800915a:	4413      	add	r3, r2
 800915c:	623b      	str	r3, [r7, #32]
  return driver;
 800915e:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8009160:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8009162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <tud_task_ext+0x254>
 8009168:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <tud_task_ext+0x2f0>)
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800916c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d075      	beq.n	8009264 <tud_task_ext+0x33c>
 8009178:	be00      	bkpt	0x0000
 800917a:	e073      	b.n	8009264 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800917c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800917e:	699c      	ldr	r4, [r3, #24]
 8009180:	7b38      	ldrb	r0, [r7, #12]
 8009182:	7c7a      	ldrb	r2, [r7, #17]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800918a:	47a0      	blx	r4
        break;
 800918c:	e063      	b.n	8009256 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 800918e:	4b20      	ldr	r3, [pc, #128]	@ (8009210 <tud_task_ext+0x2e8>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d053      	beq.n	8009244 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800919c:	4b1c      	ldr	r3, [pc, #112]	@ (8009210 <tud_task_ext+0x2e8>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bf14      	ite	ne
 80091aa:	2301      	movne	r3, #1
 80091ac:	2300      	moveq	r3, #0
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fcf3 	bl	8008b9c <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80091b6:	e045      	b.n	8009244 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80091b8:	4b15      	ldr	r3, [pc, #84]	@ (8009210 <tud_task_ext+0x2e8>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d040      	beq.n	8009248 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80091c6:	f7ff fcf4 	bl	8008bb2 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80091ca:	e03d      	b.n	8009248 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d03c      	beq.n	800924c <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	4610      	mov	r0, r2
 80091d8:	4798      	blx	r3
        }
        break;
 80091da:	e037      	b.n	800924c <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80091dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009210 <tud_task_ext+0x2e8>)
 80091de:	78db      	ldrb	r3, [r3, #3]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	2300      	movs	r3, #0
 80091e6:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80091e8:	7efb      	ldrb	r3, [r7, #27]
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d026      	beq.n	8009250 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff fc95 	bl	8008b34 <tud_sof_cb>
        }
      break;
 800920a:	e021      	b.n	8009250 <tud_task_ext+0x328>
 800920c:	2000180c 	.word	0x2000180c
 8009210:	20001714 	.word	0x20001714
 8009214:	20001740 	.word	0x20001740
 8009218:	e000edf0 	.word	0xe000edf0
 800921c:	20001748 	.word	0x20001748
 8009220:	20001744 	.word	0x20001744
 8009224:	0800f220 	.word	0x0800f220

      default:
        TU_BREAKPOINT();
 8009228:	4b10      	ldr	r3, [pc, #64]	@ (800926c <tud_task_ext+0x344>)
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34
 800922c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00d      	beq.n	8009254 <tud_task_ext+0x32c>
 8009238:	be00      	bkpt	0x0000
        break;
 800923a:	e00b      	b.n	8009254 <tud_task_ext+0x32c>
          break;
 800923c:	bf00      	nop
 800923e:	e682      	b.n	8008f46 <tud_task_ext+0x1e>
        break;
 8009240:	bf00      	nop
 8009242:	e680      	b.n	8008f46 <tud_task_ext+0x1e>
        break;
 8009244:	bf00      	nop
 8009246:	e67e      	b.n	8008f46 <tud_task_ext+0x1e>
        break;
 8009248:	bf00      	nop
 800924a:	e67c      	b.n	8008f46 <tud_task_ext+0x1e>
        break;
 800924c:	bf00      	nop
 800924e:	e67a      	b.n	8008f46 <tud_task_ext+0x1e>
      break;
 8009250:	bf00      	nop
 8009252:	e678      	b.n	8008f46 <tud_task_ext+0x1e>
        break;
 8009254:	bf00      	nop
  while (1) {
 8009256:	e676      	b.n	8008f46 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8009258:	bf00      	nop
 800925a:	e004      	b.n	8009266 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800925c:	bf00      	nop
 800925e:	e002      	b.n	8009266 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8009260:	bf00      	nop
 8009262:	e000      	b.n	8009266 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8009264:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8009266:	374c      	adds	r7, #76	@ 0x4c
 8009268:	46bd      	mov	sp, r7
 800926a:	bd90      	pop	{r4, r7, pc}
 800926c:	e000edf0 	.word	0xe000edf0

08009270 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	4618      	mov	r0, r3
 8009284:	f001 fa8e 	bl	800a7a4 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	7bf8      	ldrb	r0, [r7, #15]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	2101      	movs	r1, #1
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b09a      	sub	sp, #104	@ 0x68
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80092ac:	2000      	movs	r0, #0
 80092ae:	f001 fa79 	bl	800a7a4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b60      	cmp	r3, #96	@ 0x60
 80092be:	d10a      	bne.n	80092d6 <process_control_request+0x36>
 80092c0:	4ba5      	ldr	r3, [pc, #660]	@ (8009558 <process_control_request+0x2b8>)
 80092c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d000      	beq.n	80092d2 <process_control_request+0x32>
 80092d0:	be00      	bkpt	0x0000
 80092d2:	2300      	movs	r3, #0
 80092d4:	e2bb      	b.n	800984e <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b40      	cmp	r3, #64	@ 0x40
 80092e2:	d10a      	bne.n	80092fa <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80092e4:	489d      	ldr	r0, [pc, #628]	@ (800955c <process_control_request+0x2bc>)
 80092e6:	f001 fa5d 	bl	800a7a4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fc65 	bl	8008bc0 <tud_vendor_control_xfer_cb>
 80092f6:	4603      	mov	r3, r0
 80092f8:	e2a9      	b.n	800984e <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	f000 81ca 	beq.w	800969e <process_control_request+0x3fe>
 800930a:	2b02      	cmp	r3, #2
 800930c:	f300 8292 	bgt.w	8009834 <process_control_request+0x594>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <process_control_request+0x7c>
 8009314:	2b01      	cmp	r3, #1
 8009316:	f000 8151 	beq.w	80095bc <process_control_request+0x31c>
 800931a:	e28b      	b.n	8009834 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b20      	cmp	r3, #32
 8009328:	d143      	bne.n	80093b2 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	889b      	ldrh	r3, [r3, #4]
 800932e:	b29b      	uxth	r3, r3
 8009330:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009332:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800933a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d901      	bls.n	8009346 <process_control_request+0xa6>
 8009342:	2300      	movs	r3, #0
 8009344:	e283      	b.n	800984e <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009346:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800934a:	4a85      	ldr	r2, [pc, #532]	@ (8009560 <process_control_request+0x2c0>)
 800934c:	4413      	add	r3, r2
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8009358:	4b82      	ldr	r3, [pc, #520]	@ (8009564 <process_control_request+0x2c4>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8009360:	429a      	cmp	r2, r3
 8009362:	d207      	bcs.n	8009374 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8009364:	4b80      	ldr	r3, [pc, #512]	@ (8009568 <process_control_request+0x2c8>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800936c:	015b      	lsls	r3, r3, #5
 800936e:	4413      	add	r3, r2
 8009370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009372:	e00f      	b.n	8009394 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009374:	4b7b      	ldr	r3, [pc, #492]	@ (8009564 <process_control_request+0x2c4>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800937e:	429a      	cmp	r2, r3
 8009380:	db08      	blt.n	8009394 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009382:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009386:	4a77      	ldr	r2, [pc, #476]	@ (8009564 <process_control_request+0x2c4>)
 8009388:	7812      	ldrb	r2, [r2, #0]
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	015b      	lsls	r3, r3, #5
 800938e:	4a77      	ldr	r2, [pc, #476]	@ (800956c <process_control_request+0x2cc>)
 8009390:	4413      	add	r3, r2
 8009392:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009396:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <process_control_request+0x102>
 800939e:	2300      	movs	r3, #0
 80093a0:	e255      	b.n	800984e <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff ff61 	bl	8009270 <invoke_class_control>
 80093ae:	4603      	mov	r3, r0
 80093b0:	e24d      	b.n	800984e <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80093c0:	4b65      	ldr	r3, [pc, #404]	@ (8009558 <process_control_request+0x2b8>)
 80093c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d000      	beq.n	80093d2 <process_control_request+0x132>
 80093d0:	be00      	bkpt	0x0000
        return false;
 80093d2:	2300      	movs	r3, #0
 80093d4:	e23b      	b.n	800984e <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b09      	cmp	r3, #9
 80093dc:	f200 80e1 	bhi.w	80095a2 <process_control_request+0x302>
 80093e0:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <process_control_request+0x148>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	08009571 	.word	0x08009571
 80093ec:	08009535 	.word	0x08009535
 80093f0:	080095a3 	.word	0x080095a3
 80093f4:	0800950f 	.word	0x0800950f
 80093f8:	080095a3 	.word	0x080095a3
 80093fc:	08009411 	.word	0x08009411
 8009400:	080094f5 	.word	0x080094f5
 8009404:	080095a3 	.word	0x080095a3
 8009408:	08009435 	.word	0x08009435
 800940c:	0800944d 	.word	0x0800944d
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8009410:	6838      	ldr	r0, [r7, #0]
 8009412:	f001 f9d7 	bl	800a7c4 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	885b      	ldrh	r3, [r3, #2]
 800941a:	b29b      	uxth	r3, r3
 800941c:	b2da      	uxtb	r2, r3
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f001 ff94 	bl	800b350 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8009428:	4a4d      	ldr	r2, [pc, #308]	@ (8009560 <process_control_request+0x2c0>)
 800942a:	7813      	ldrb	r3, [r2, #0]
 800942c:	f043 0302 	orr.w	r3, r3, #2
 8009430:	7013      	strb	r3, [r2, #0]
        break;
 8009432:	e0c2      	b.n	80095ba <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8009434:	4b4a      	ldr	r3, [pc, #296]	@ (8009560 <process_control_request+0x2c0>)
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800943c:	f107 0213 	add.w	r2, r7, #19
 8009440:	79f8      	ldrb	r0, [r7, #7]
 8009442:	2301      	movs	r3, #1
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	f001 f931 	bl	800a6ac <tud_control_xfer>
        }
        break;
 800944a:	e0b6      	b.n	80095ba <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	885b      	ldrh	r3, [r3, #2]
 8009450:	b29b      	uxth	r3, r3
 8009452:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8009456:	4b42      	ldr	r3, [pc, #264]	@ (8009560 <process_control_request+0x2c0>)
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009460:	429a      	cmp	r2, r3
 8009462:	d041      	beq.n	80094e8 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8009464:	4b3e      	ldr	r3, [pc, #248]	@ (8009560 <process_control_request+0x2c0>)
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f002 f832 	bl	800b4dc <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	4618      	mov	r0, r3
 800947c:	f002 f896 	bl	800b5ac <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8009480:	4b37      	ldr	r3, [pc, #220]	@ (8009560 <process_control_request+0x2c0>)
 8009482:	789b      	ldrb	r3, [r3, #2]
 8009484:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff fcd6 	bl	8008e3c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8009490:	4a33      	ldr	r2, [pc, #204]	@ (8009560 <process_control_request+0x2c0>)
 8009492:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009496:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8009498:	4a31      	ldr	r2, [pc, #196]	@ (8009560 <process_control_request+0x2c0>)
 800949a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800949e:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80094a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01d      	beq.n	80094e4 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80094a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 f9d5 	bl	8009860 <process_set_config>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00d      	beq.n	80094de <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80094c2:	4b25      	ldr	r3, [pc, #148]	@ (8009558 <process_control_request+0x2b8>)
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d000      	beq.n	80094d4 <process_control_request+0x234>
 80094d2:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80094d4:	4b22      	ldr	r3, [pc, #136]	@ (8009560 <process_control_request+0x2c0>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	705a      	strb	r2, [r3, #1]
                return false;
 80094da:	2300      	movs	r3, #0
 80094dc:	e1b7      	b.n	800984e <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80094de:	f7ff fb4f 	bl	8008b80 <tud_mount_cb>
 80094e2:	e001      	b.n	80094e8 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 80094e4:	f7ff fb53 	bl	8008b8e <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f86b 	bl	800a5c8 <tud_control_status>
        }
        break;
 80094f2:	e062      	b.n	80095ba <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fae5 	bl	8009ac8 <process_get_descriptor>
 80094fe:	4603      	mov	r3, r0
 8009500:	f083 0301 	eor.w	r3, r3, #1
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d056      	beq.n	80095b8 <process_control_request+0x318>
 800950a:	2300      	movs	r3, #0
 800950c:	e19f      	b.n	800984e <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	885b      	ldrh	r3, [r3, #2]
 8009512:	b29b      	uxth	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d10b      	bne.n	8009530 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8009518:	4a11      	ldr	r2, [pc, #68]	@ (8009560 <process_control_request+0x2c0>)
 800951a:	7813      	ldrb	r3, [r2, #0]
 800951c:	f043 0308 	orr.w	r3, r3, #8
 8009520:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f84e 	bl	800a5c8 <tud_control_status>
            break;
 800952c:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800952e:	e044      	b.n	80095ba <process_control_request+0x31a>
            default: return false;
 8009530:	2300      	movs	r3, #0
 8009532:	e18c      	b.n	800984e <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	885b      	ldrh	r3, [r3, #2]
 8009538:	b29b      	uxth	r3, r3
 800953a:	2b01      	cmp	r3, #1
 800953c:	d001      	beq.n	8009542 <process_control_request+0x2a2>
 800953e:	2300      	movs	r3, #0
 8009540:	e185      	b.n	800984e <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8009542:	4a07      	ldr	r2, [pc, #28]	@ (8009560 <process_control_request+0x2c0>)
 8009544:	7813      	ldrb	r3, [r2, #0]
 8009546:	f023 0308 	bic.w	r3, r3, #8
 800954a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f001 f839 	bl	800a5c8 <tud_control_status>
        break;
 8009556:	e030      	b.n	80095ba <process_control_request+0x31a>
 8009558:	e000edf0 	.word	0xe000edf0
 800955c:	08008bc1 	.word	0x08008bc1
 8009560:	20001714 	.word	0x20001714
 8009564:	20001748 	.word	0x20001748
 8009568:	20001744 	.word	0x20001744
 800956c:	0800f220 	.word	0x0800f220

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8009570:	4b94      	ldr	r3, [pc, #592]	@ (80097c4 <process_control_request+0x524>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	4b91      	ldr	r3, [pc, #580]	@ (80097c4 <process_control_request+0x524>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	089b      	lsrs	r3, r3, #2
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	b29b      	uxth	r3, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	b29b      	uxth	r3, r3
 8009590:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8009592:	f107 0210 	add.w	r2, r7, #16
 8009596:	79f8      	ldrb	r0, [r7, #7]
 8009598:	2302      	movs	r3, #2
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	f001 f886 	bl	800a6ac <tud_control_xfer>
          break;
 80095a0:	e00b      	b.n	80095ba <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80095a2:	4b89      	ldr	r3, [pc, #548]	@ (80097c8 <process_control_request+0x528>)
 80095a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d000      	beq.n	80095b4 <process_control_request+0x314>
 80095b2:	be00      	bkpt	0x0000
 80095b4:	2300      	movs	r3, #0
 80095b6:	e14a      	b.n	800984e <process_control_request+0x5ae>
        break;
 80095b8:	bf00      	nop
      }
    break;
 80095ba:	e147      	b.n	800984c <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	889b      	ldrh	r3, [r3, #4]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80095c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80095cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095d0:	2b0f      	cmp	r3, #15
 80095d2:	d901      	bls.n	80095d8 <process_control_request+0x338>
 80095d4:	2300      	movs	r3, #0
 80095d6:	e13a      	b.n	800984e <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80095d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095dc:	4a79      	ldr	r2, [pc, #484]	@ (80097c4 <process_control_request+0x524>)
 80095de:	4413      	add	r3, r2
 80095e0:	791b      	ldrb	r3, [r3, #4]
 80095e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80095ea:	4b78      	ldr	r3, [pc, #480]	@ (80097cc <process_control_request+0x52c>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d207      	bcs.n	8009606 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80095f6:	4b76      	ldr	r3, [pc, #472]	@ (80097d0 <process_control_request+0x530>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095fe:	015b      	lsls	r3, r3, #5
 8009600:	4413      	add	r3, r2
 8009602:	623b      	str	r3, [r7, #32]
 8009604:	e00f      	b.n	8009626 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009606:	4b71      	ldr	r3, [pc, #452]	@ (80097cc <process_control_request+0x52c>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009610:	429a      	cmp	r2, r3
 8009612:	db08      	blt.n	8009626 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009614:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009618:	4a6c      	ldr	r2, [pc, #432]	@ (80097cc <process_control_request+0x52c>)
 800961a:	7812      	ldrb	r2, [r2, #0]
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	015b      	lsls	r3, r3, #5
 8009620:	4a6c      	ldr	r2, [pc, #432]	@ (80097d4 <process_control_request+0x534>)
 8009622:	4413      	add	r3, r2
 8009624:	623b      	str	r3, [r7, #32]
  return driver;
 8009626:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009628:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800962a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <process_control_request+0x394>
 8009630:	2300      	movs	r3, #0
 8009632:	e10c      	b.n	800984e <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff fe18 	bl	8009270 <invoke_class_control>
 8009640:	4603      	mov	r3, r0
 8009642:	f083 0301 	eor.w	r3, r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80fe 	beq.w	800984a <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <process_control_request+0x3c0>
 800965c:	2300      	movs	r3, #0
 800965e:	e0f6      	b.n	800984e <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	3b0a      	subs	r3, #10
 8009666:	2b01      	cmp	r3, #1
 8009668:	d816      	bhi.n	8009698 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800966a:	2000      	movs	r0, #0
 800966c:	f001 f89a 	bl	800a7a4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	2b0a      	cmp	r3, #10
 8009676:	d109      	bne.n	800968c <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800967c:	f107 020f 	add.w	r2, r7, #15
 8009680:	79f8      	ldrb	r0, [r7, #7]
 8009682:	2301      	movs	r3, #1
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	f001 f811 	bl	800a6ac <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 800968a:	e007      	b.n	800969c <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 ff99 	bl	800a5c8 <tud_control_status>
          break;
 8009696:	e001      	b.n	800969c <process_control_request+0x3fc>

          default: return false;
 8009698:	2300      	movs	r3, #0
 800969a:	e0d8      	b.n	800984e <process_control_request+0x5ae>
        }
      }
      break;
 800969c:	e0d5      	b.n	800984a <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	889b      	ldrh	r3, [r3, #4]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	83bb      	strh	r3, [r7, #28]
 80096a6:	8bbb      	ldrh	r3, [r7, #28]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096b2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80096b4:	7fbb      	ldrb	r3, [r7, #30]
 80096b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ba:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80096bc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80096c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096c4:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80096c6:	7ffb      	ldrb	r3, [r7, #31]
 80096c8:	09db      	lsrs	r3, r3, #7
 80096ca:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80096cc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80096d0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80096d4:	2b05      	cmp	r3, #5
 80096d6:	d90a      	bls.n	80096ee <process_control_request+0x44e>
 80096d8:	4b3b      	ldr	r3, [pc, #236]	@ (80097c8 <process_control_request+0x528>)
 80096da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d000      	beq.n	80096ea <process_control_request+0x44a>
 80096e8:	be00      	bkpt	0x0000
 80096ea:	2300      	movs	r3, #0
 80096ec:	e0af      	b.n	800984e <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80096ee:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80096f2:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80096f6:	4933      	ldr	r1, [pc, #204]	@ (80097c4 <process_control_request+0x524>)
 80096f8:	0052      	lsls	r2, r2, #1
 80096fa:	440a      	add	r2, r1
 80096fc:	4413      	add	r3, r2
 80096fe:	3314      	adds	r3, #20
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8009708:	4b30      	ldr	r3, [pc, #192]	@ (80097cc <process_control_request+0x52c>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	7efa      	ldrb	r2, [r7, #27]
 800970e:	429a      	cmp	r2, r3
 8009710:	d206      	bcs.n	8009720 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8009712:	4b2f      	ldr	r3, [pc, #188]	@ (80097d0 <process_control_request+0x530>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	7efb      	ldrb	r3, [r7, #27]
 8009718:	015b      	lsls	r3, r3, #5
 800971a:	4413      	add	r3, r2
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	e00d      	b.n	800973c <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009720:	4b2a      	ldr	r3, [pc, #168]	@ (80097cc <process_control_request+0x52c>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	7efb      	ldrb	r3, [r7, #27]
 8009728:	429a      	cmp	r2, r3
 800972a:	db07      	blt.n	800973c <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800972c:	7efb      	ldrb	r3, [r7, #27]
 800972e:	4a27      	ldr	r2, [pc, #156]	@ (80097cc <process_control_request+0x52c>)
 8009730:	7812      	ldrb	r2, [r2, #0]
 8009732:	1a9b      	subs	r3, r3, r2
 8009734:	015b      	lsls	r3, r3, #5
 8009736:	4a27      	ldr	r2, [pc, #156]	@ (80097d4 <process_control_request+0x534>)
 8009738:	4413      	add	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
  return driver;
 800973c:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800973e:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 800974e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <process_control_request+0x4b8>
 8009754:	2300      	movs	r3, #0
 8009756:	e07a      	b.n	800984e <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fd86 	bl	8009270 <invoke_class_control>
 8009764:	4603      	mov	r3, r0
 8009766:	e072      	b.n	800984e <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d017      	beq.n	80097a0 <process_control_request+0x500>
 8009770:	2b03      	cmp	r3, #3
 8009772:	dc52      	bgt.n	800981a <process_control_request+0x57a>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <process_control_request+0x4de>
 8009778:	2b01      	cmp	r3, #1
 800977a:	d011      	beq.n	80097a0 <process_control_request+0x500>
 800977c:	e04d      	b.n	800981a <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800977e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fec8 	bl	800a51c <usbd_edpt_stalled>
 800978c:	4603      	mov	r3, r0
 800978e:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8009790:	f107 020c 	add.w	r2, r7, #12
 8009794:	79f8      	ldrb	r0, [r7, #7]
 8009796:	2302      	movs	r3, #2
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	f000 ff87 	bl	800a6ac <tud_control_xfer>
          }
          break;
 800979e:	e048      	b.n	8009832 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d11d      	bne.n	80097e6 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	785b      	ldrb	r3, [r3, #1]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d112      	bne.n	80097d8 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80097b2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fe70 	bl	800a4a0 <usbd_edpt_clear_stall>
 80097c0:	e011      	b.n	80097e6 <process_control_request+0x546>
 80097c2:	bf00      	nop
 80097c4:	20001714 	.word	0x20001714
 80097c8:	e000edf0 	.word	0xe000edf0
 80097cc:	20001748 	.word	0x20001748
 80097d0:	20001744 	.word	0x20001744
 80097d4:	0800f220 	.word	0x0800f220
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80097d8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fe1f 	bl	800a424 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80097e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d021      	beq.n	8009830 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fd3c 	bl	8009270 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80097f8:	2000      	movs	r0, #0
 80097fa:	f000 ffd3 	bl	800a7a4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80097fe:	4b16      	ldr	r3, [pc, #88]	@ (8009858 <process_control_request+0x5b8>)
 8009800:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009804:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d110      	bne.n	8009830 <process_control_request+0x590>
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fed8 	bl	800a5c8 <tud_control_status>
            }
          }
          break;
 8009818:	e00a      	b.n	8009830 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800981a:	4b10      	ldr	r3, [pc, #64]	@ (800985c <process_control_request+0x5bc>)
 800981c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800981e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d000      	beq.n	800982c <process_control_request+0x58c>
 800982a:	be00      	bkpt	0x0000
            return false;
 800982c:	2300      	movs	r3, #0
 800982e:	e00e      	b.n	800984e <process_control_request+0x5ae>
          break;
 8009830:	bf00      	nop
        }
      }
    }
    break;
 8009832:	e00b      	b.n	800984c <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009834:	4b09      	ldr	r3, [pc, #36]	@ (800985c <process_control_request+0x5bc>)
 8009836:	637b      	str	r3, [r7, #52]	@ 0x34
 8009838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d000      	beq.n	8009846 <process_control_request+0x5a6>
 8009844:	be00      	bkpt	0x0000
      return false;
 8009846:	2300      	movs	r3, #0
 8009848:	e001      	b.n	800984e <process_control_request+0x5ae>
      break;
 800984a:	bf00      	nop
  }

  return true;
 800984c:	2301      	movs	r3, #1
}
 800984e:	4618      	mov	r0, r3
 8009850:	3768      	adds	r7, #104	@ 0x68
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001714 	.word	0x20001714
 800985c:	e000edf0 	.word	0xe000edf0

08009860 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b096      	sub	sp, #88	@ 0x58
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	460a      	mov	r2, r1
 800986a:	71fb      	strb	r3, [r7, #7]
 800986c:	4613      	mov	r3, r2
 800986e:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8009870:	79bb      	ldrb	r3, [r7, #6]
 8009872:	3b01      	subs	r3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	4618      	mov	r0, r3
 8009878:	f7fa fa88 	bl	8003d8c <tud_descriptor_configuration_cb>
 800987c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 800987e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <process_set_config+0x2c>
 8009884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d00a      	beq.n	80098a2 <process_set_config+0x42>
 800988c:	4b87      	ldr	r3, [pc, #540]	@ (8009aac <process_set_config+0x24c>)
 800988e:	623b      	str	r3, [r7, #32]
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d000      	beq.n	800989e <process_set_config+0x3e>
 800989c:	be00      	bkpt	0x0000
 800989e:	2300      	movs	r3, #0
 80098a0:	e100      	b.n	8009aa4 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80098a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a4:	79db      	ldrb	r3, [r3, #7]
 80098a6:	115b      	asrs	r3, r3, #5
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	b2d9      	uxtb	r1, r3
 80098ae:	4a80      	ldr	r2, [pc, #512]	@ (8009ab0 <process_set_config+0x250>)
 80098b0:	7813      	ldrb	r3, [r2, #0]
 80098b2:	f361 1304 	bfi	r3, r1, #4, #1
 80098b6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80098b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ba:	79db      	ldrb	r3, [r3, #7]
 80098bc:	119b      	asrs	r3, r3, #6
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	b2d9      	uxtb	r1, r3
 80098c4:	4a7a      	ldr	r2, [pc, #488]	@ (8009ab0 <process_set_config+0x250>)
 80098c6:	7813      	ldrb	r3, [r2, #0]
 80098c8:	f361 1345 	bfi	r3, r1, #5, #1
 80098cc:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80098ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d0:	3309      	adds	r3, #9
 80098d2:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80098d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d6:	885b      	ldrh	r3, [r3, #2]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098de:	4413      	add	r3, r2
 80098e0:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80098e2:	e0d9      	b.n	8009a98 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80098ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ec:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	3301      	adds	r3, #1
 80098f2:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80098f4:	2b0b      	cmp	r3, #11
 80098f6:	d10f      	bne.n	8009918 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80098f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098fa:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80098fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fe:	78db      	ldrb	r3, [r3, #3]
 8009900:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009906:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8009916:	657b      	str	r3, [r7, #84]	@ 0x54
 8009918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800991a:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3301      	adds	r3, #1
 8009920:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8009922:	2b04      	cmp	r3, #4
 8009924:	d00a      	beq.n	800993c <process_set_config+0xdc>
 8009926:	4b61      	ldr	r3, [pc, #388]	@ (8009aac <process_set_config+0x24c>)
 8009928:	627b      	str	r3, [r7, #36]	@ 0x24
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d000      	beq.n	8009938 <process_set_config+0xd8>
 8009936:	be00      	bkpt	0x0000
 8009938:	2300      	movs	r3, #0
 800993a:	e0b3      	b.n	8009aa4 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 800993c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800993e:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8009940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800994e:	e089      	b.n	8009a64 <process_set_config+0x204>
 8009950:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009954:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800995a:	4b56      	ldr	r3, [pc, #344]	@ (8009ab4 <process_set_config+0x254>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	7bfa      	ldrb	r2, [r7, #15]
 8009960:	429a      	cmp	r2, r3
 8009962:	d206      	bcs.n	8009972 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8009964:	4b54      	ldr	r3, [pc, #336]	@ (8009ab8 <process_set_config+0x258>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	015b      	lsls	r3, r3, #5
 800996c:	4413      	add	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
 8009970:	e00d      	b.n	800998e <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009972:	4b50      	ldr	r3, [pc, #320]	@ (8009ab4 <process_set_config+0x254>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	429a      	cmp	r2, r3
 800997c:	db07      	blt.n	800998e <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	4a4c      	ldr	r2, [pc, #304]	@ (8009ab4 <process_set_config+0x254>)
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	1a9b      	subs	r3, r3, r2
 8009986:	015b      	lsls	r3, r3, #5
 8009988:	4a4c      	ldr	r2, [pc, #304]	@ (8009abc <process_set_config+0x25c>)
 800998a:	4413      	add	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]
  return driver;
 800998e:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8009990:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <process_set_config+0x14e>
 8009998:	4b44      	ldr	r3, [pc, #272]	@ (8009aac <process_set_config+0x24c>)
 800999a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d000      	beq.n	80099aa <process_set_config+0x14a>
 80099a8:	be00      	bkpt	0x0000
 80099aa:	2300      	movs	r3, #0
 80099ac:	e07a      	b.n	8009aa4 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80099ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80099b4:	79f8      	ldrb	r0, [r7, #7]
 80099b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099b8:	4798      	blx	r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80099be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d94a      	bls.n	8009a5a <process_set_config+0x1fa>
 80099c4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d846      	bhi.n	8009a5a <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80099cc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d107      	bne.n	80099e4 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	4a39      	ldr	r2, [pc, #228]	@ (8009ac0 <process_set_config+0x260>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d102      	bne.n	80099e4 <process_set_config+0x184>
 80099de:	2302      	movs	r3, #2
 80099e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80099ea:	e024      	b.n	8009a36 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80099ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ee:	789a      	ldrb	r2, [r3, #2]
 80099f0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80099f4:	4413      	add	r3, r2
 80099f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80099fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80099fe:	4a2c      	ldr	r2, [pc, #176]	@ (8009ab0 <process_set_config+0x250>)
 8009a00:	4413      	add	r3, r2
 8009a02:	791b      	ldrb	r3, [r3, #4]
 8009a04:	2bff      	cmp	r3, #255	@ 0xff
 8009a06:	d00a      	beq.n	8009a1e <process_set_config+0x1be>
 8009a08:	4b28      	ldr	r3, [pc, #160]	@ (8009aac <process_set_config+0x24c>)
 8009a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d000      	beq.n	8009a1a <process_set_config+0x1ba>
 8009a18:	be00      	bkpt	0x0000
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e042      	b.n	8009aa4 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8009a1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009a22:	4a23      	ldr	r2, [pc, #140]	@ (8009ab0 <process_set_config+0x250>)
 8009a24:	4413      	add	r3, r2
 8009a26:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009a2a:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009a2c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009a30:	3301      	adds	r3, #1
 8009a32:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009a36:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009a3a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d3d4      	bcc.n	80099ec <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8009a42:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a4a:	481e      	ldr	r0, [pc, #120]	@ (8009ac4 <process_set_config+0x264>)
 8009a4c:	f003 f81c 	bl	800ca88 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8009a50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a54:	4413      	add	r3, r2
 8009a56:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009a58:	e00c      	b.n	8009a74 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009a5a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a5e:	3301      	adds	r3, #1
 8009a60:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009a64:	4b13      	ldr	r3, [pc, #76]	@ (8009ab4 <process_set_config+0x254>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f6bf af6e 	bge.w	8009950 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8009a74:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <process_set_config+0x254>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	da0a      	bge.n	8009a98 <process_set_config+0x238>
 8009a82:	4b0a      	ldr	r3, [pc, #40]	@ (8009aac <process_set_config+0x24c>)
 8009a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d000      	beq.n	8009a94 <process_set_config+0x234>
 8009a92:	be00      	bkpt	0x0000
 8009a94:	2300      	movs	r3, #0
 8009a96:	e005      	b.n	8009aa4 <process_set_config+0x244>
  while( p_desc < desc_end )
 8009a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	f4ff af21 	bcc.w	80098e4 <process_set_config+0x84>
  }

  return true;
 8009aa2:	2301      	movs	r3, #1
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3758      	adds	r7, #88	@ 0x58
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	e000edf0 	.word	0xe000edf0
 8009ab0:	20001714 	.word	0x20001714
 8009ab4:	20001748 	.word	0x20001748
 8009ab8:	20001744 	.word	0x20001744
 8009abc:	0800f220 	.word	0x0800f220
 8009ac0:	08006ff5 	.word	0x08006ff5
 8009ac4:	20001728 	.word	0x20001728

08009ac8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b094      	sub	sp, #80	@ 0x50
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	885b      	ldrh	r3, [r3, #2]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8009adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	885b      	ldrh	r3, [r3, #2]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009af0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009af8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009afc:	3b01      	subs	r3, #1
 8009afe:	2b0e      	cmp	r3, #14
 8009b00:	f200 80b4 	bhi.w	8009c6c <process_get_descriptor+0x1a4>
 8009b04:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <process_get_descriptor+0x44>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b49 	.word	0x08009b49
 8009b10:	08009bad 	.word	0x08009bad
 8009b14:	08009c13 	.word	0x08009c13
 8009b18:	08009c6d 	.word	0x08009c6d
 8009b1c:	08009c6d 	.word	0x08009c6d
 8009b20:	08009c47 	.word	0x08009c47
 8009b24:	08009bad 	.word	0x08009bad
 8009b28:	08009c6d 	.word	0x08009c6d
 8009b2c:	08009c6d 	.word	0x08009c6d
 8009b30:	08009c6d 	.word	0x08009c6d
 8009b34:	08009c6d 	.word	0x08009c6d
 8009b38:	08009c6d 	.word	0x08009c6d
 8009b3c:	08009c6d 	.word	0x08009c6d
 8009b40:	08009c6d 	.word	0x08009c6d
 8009b44:	08009b7b 	.word	0x08009b7b
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009b48:	f7fa f908 	bl	8003d5c <tud_descriptor_device_cb>
 8009b4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <process_get_descriptor+0xa2>
 8009b54:	4b48      	ldr	r3, [pc, #288]	@ (8009c78 <process_get_descriptor+0x1b0>)
 8009b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d000      	beq.n	8009b66 <process_get_descriptor+0x9e>
 8009b64:	be00      	bkpt	0x0000
 8009b66:	2300      	movs	r3, #0
 8009b68:	e081      	b.n	8009c6e <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8009b6a:	79f8      	ldrb	r0, [r7, #7]
 8009b6c:	2312      	movs	r3, #18
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	f000 fd9b 	bl	800a6ac <tud_control_xfer>
 8009b76:	4603      	mov	r3, r0
 8009b78:	e079      	b.n	8009c6e <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8009b7a:	f7fe ffe5 	bl	8008b48 <tud_descriptor_bos_cb>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8009b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <process_get_descriptor+0xc4>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e070      	b.n	8009c6e <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8009b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b8e:	3302      	adds	r3, #2
 8009b90:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8009b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ba0:	79f8      	ldrb	r0, [r7, #7]
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	f000 fd82 	bl	800a6ac <tud_control_xfer>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e060      	b.n	8009c6e <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8009bac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d114      	bne.n	8009bde <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8009bb4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fa f8e7 	bl	8003d8c <tud_descriptor_configuration_cb>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8009bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d116      	bne.n	8009bf6 <process_get_descriptor+0x12e>
 8009bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8009c78 <process_get_descriptor+0x1b0>)
 8009bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d000      	beq.n	8009bda <process_get_descriptor+0x112>
 8009bd8:	be00      	bkpt	0x0000
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e047      	b.n	8009c6e <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8009bde:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe ffc0 	bl	8008b68 <tud_descriptor_other_speed_configuration_cb>
 8009be8:	4603      	mov	r3, r0
 8009bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8009bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <process_get_descriptor+0x12e>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e03b      	b.n	8009c6e <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8009bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8009c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c04:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c06:	79f8      	ldrb	r0, [r7, #7]
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	f000 fd4f 	bl	800a6ac <tud_control_xfer>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	e02d      	b.n	8009c6e <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fa f8c2 	bl	8003da8 <tud_descriptor_string_cb>
 8009c24:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8009c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <process_get_descriptor+0x168>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e01e      	b.n	8009c6e <process_get_descriptor+0x1a6>
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009c38:	79f8      	ldrb	r0, [r7, #7]
 8009c3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	f000 fd35 	bl	800a6ac <tud_control_xfer>
 8009c42:	4603      	mov	r3, r0
 8009c44:	e013      	b.n	8009c6e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8009c46:	f7fe ff87 	bl	8008b58 <tud_descriptor_device_qualifier_cb>
 8009c4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <process_get_descriptor+0x18e>
 8009c52:	2300      	movs	r3, #0
 8009c54:	e00b      	b.n	8009c6e <process_get_descriptor+0x1a6>
 8009c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8009c5e:	79f8      	ldrb	r0, [r7, #7]
 8009c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	f000 fd22 	bl	800a6ac <tud_control_xfer>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	e000      	b.n	8009c6e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8009c6c:	2300      	movs	r3, #0
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3750      	adds	r7, #80	@ 0x50
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	e000edf0 	.word	0xe000edf0

08009c7c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b0a0      	sub	sp, #128	@ 0x80
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	3b02      	subs	r3, #2
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	f200 8175 	bhi.w	8009f84 <dcd_event_handler+0x308>
 8009c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <dcd_event_handler+0x24>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009d25 	.word	0x08009d25
 8009ca8:	08009ce1 	.word	0x08009ce1
 8009cac:	08009d03 	.word	0x08009d03
 8009cb0:	08009f51 	.word	0x08009f51
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8009cb4:	4aac      	ldr	r2, [pc, #688]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009cb6:	7813      	ldrb	r3, [r2, #0]
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8009cbe:	4aaa      	ldr	r2, [pc, #680]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009cc0:	7813      	ldrb	r3, [r2, #0]
 8009cc2:	f023 0302 	bic.w	r3, r3, #2
 8009cc6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8009cc8:	4ba7      	ldr	r3, [pc, #668]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8009cce:	4aa6      	ldr	r2, [pc, #664]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009cd0:	7813      	ldrb	r3, [r2, #0]
 8009cd2:	f023 0304 	bic.w	r3, r3, #4
 8009cd6:	7013      	strb	r3, [r2, #0]
      send = true;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009cde:	e15a      	b.n	8009f96 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8009ce0:	4ba1      	ldr	r3, [pc, #644]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 814e 	beq.w	8009f8c <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8009cf0:	4a9d      	ldr	r2, [pc, #628]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009cf2:	7813      	ldrb	r3, [r2, #0]
 8009cf4:	f043 0304 	orr.w	r3, r3, #4
 8009cf8:	7013      	strb	r3, [r2, #0]
        send = true;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009d00:	e144      	b.n	8009f8c <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8009d02:	4b99      	ldr	r3, [pc, #612]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 813f 	beq.w	8009f90 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8009d12:	4a95      	ldr	r2, [pc, #596]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009d14:	7813      	ldrb	r3, [r2, #0]
 8009d16:	f023 0304 	bic.w	r3, r3, #4
 8009d1a:	7013      	strb	r3, [r2, #0]
        send = true;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009d22:	e135      	b.n	8009f90 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009d2a:	e039      	b.n	8009da0 <dcd_event_handler+0x124>
 8009d2c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009d38:	4b8c      	ldr	r3, [pc, #560]	@ (8009f6c <dcd_event_handler+0x2f0>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d207      	bcs.n	8009d54 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009d44:	4b8a      	ldr	r3, [pc, #552]	@ (8009f70 <dcd_event_handler+0x2f4>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d4c:	015b      	lsls	r3, r3, #5
 8009d4e:	4413      	add	r3, r2
 8009d50:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d52:	e00f      	b.n	8009d74 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009d54:	4b85      	ldr	r3, [pc, #532]	@ (8009f6c <dcd_event_handler+0x2f0>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	db08      	blt.n	8009d74 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009d62:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d66:	4a81      	ldr	r2, [pc, #516]	@ (8009f6c <dcd_event_handler+0x2f0>)
 8009d68:	7812      	ldrb	r2, [r2, #0]
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	015b      	lsls	r3, r3, #5
 8009d6e:	4a81      	ldr	r2, [pc, #516]	@ (8009f74 <dcd_event_handler+0x2f8>)
 8009d70:	4413      	add	r3, r2
 8009d72:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8009d74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8009d76:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8009d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <dcd_event_handler+0x11a>
 8009d7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8009d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	7810      	ldrb	r0, [r2, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6852      	ldr	r2, [r2, #4]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009d96:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009da0:	4b72      	ldr	r3, [pc, #456]	@ (8009f6c <dcd_event_handler+0x2f0>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009daa:	429a      	cmp	r2, r3
 8009dac:	dabe      	bge.n	8009d2c <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8009dae:	4b6e      	ldr	r3, [pc, #440]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05a      	beq.n	8009e72 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8009dbc:	4a6a      	ldr	r2, [pc, #424]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009dbe:	7813      	ldrb	r3, [r2, #0]
 8009dc0:	f023 0304 	bic.w	r3, r3, #4
 8009dc4:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009dc6:	f107 0314 	add.w	r3, r7, #20
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	609a      	str	r2, [r3, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	753b      	strb	r3, [r7, #20]
 8009dd8:	2305      	movs	r3, #5
 8009dda:	757b      	strb	r3, [r7, #21]
 8009ddc:	f107 0314 	add.w	r3, r7, #20
 8009de0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009de8:	4b63      	ldr	r3, [pc, #396]	@ (8009f78 <dcd_event_handler+0x2fc>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009df2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009df6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dfe:	f083 0301 	eor.w	r3, r3, #1
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e12:	3304      	adds	r3, #4
 8009e14:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fde9 	bl	80089ee <tu_fifo_write>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009e22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e26:	f083 0301 	eor.w	r3, r3, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2001      	movs	r0, #1
 8009e36:	4798      	blx	r3
  }

  return success;
 8009e38:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009e3c:	f083 0301 	eor.w	r3, r3, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d009      	beq.n	8009e5a <dcd_event_handler+0x1de>
 8009e46:	4b4d      	ldr	r3, [pc, #308]	@ (8009f7c <dcd_event_handler+0x300>)
 8009e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00c      	beq.n	8009e70 <dcd_event_handler+0x1f4>
 8009e56:	be00      	bkpt	0x0000
 8009e58:	e00a      	b.n	8009e70 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e5c:	7818      	ldrb	r0, [r3, #0]
 8009e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	4619      	mov	r1, r3
 8009e64:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f7fe fe55 	bl	8008b18 <tud_event_hook_cb>
  return true;
 8009e6e:	e000      	b.n	8009e72 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009e70:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009e72:	4b3d      	ldr	r3, [pc, #244]	@ (8009f68 <dcd_event_handler+0x2ec>)
 8009e74:	78db      	ldrb	r3, [r3, #3]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009e80:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009e84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e86:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bf14      	ite	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	2300      	moveq	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d07b      	beq.n	8009f94 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	605a      	str	r2, [r3, #4]
 8009ea6:	609a      	str	r2, [r3, #8]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	723b      	strb	r3, [r7, #8]
 8009eae:	2303      	movs	r3, #3
 8009eb0:	727b      	strb	r3, [r7, #9]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	f107 0308 	add.w	r3, r7, #8
 8009ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8009f78 <dcd_event_handler+0x2fc>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ece:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009ed2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009eda:	f083 0301 	eor.w	r3, r3, #1
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eee:	3304      	adds	r3, #4
 8009ef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fd7b 	bl	80089ee <tu_fifo_write>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009efe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009f02:	f083 0301 	eor.w	r3, r3, #1
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2001      	movs	r0, #1
 8009f12:	4798      	blx	r3
  return success;
 8009f14:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009f18:	f083 0301 	eor.w	r3, r3, #1
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <dcd_event_handler+0x2ba>
 8009f22:	4b16      	ldr	r3, [pc, #88]	@ (8009f7c <dcd_event_handler+0x300>)
 8009f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00c      	beq.n	8009f4c <dcd_event_handler+0x2d0>
 8009f32:	be00      	bkpt	0x0000
 8009f34:	e00a      	b.n	8009f4c <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f38:	7818      	ldrb	r0, [r3, #0]
 8009f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009f44:	461a      	mov	r2, r3
 8009f46:	f7fe fde7 	bl	8008b18 <tud_event_hook_cb>
  return true;
 8009f4a:	e000      	b.n	8009f4e <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009f4c:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009f4e:	e021      	b.n	8009f94 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009f50:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <dcd_event_handler+0x304>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	3301      	adds	r3, #1
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	4b09      	ldr	r3, [pc, #36]	@ (8009f80 <dcd_event_handler+0x304>)
 8009f5c:	701a      	strb	r2, [r3, #0]
      send = true;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009f64:	e017      	b.n	8009f96 <dcd_event_handler+0x31a>
 8009f66:	bf00      	nop
 8009f68:	20001714 	.word	0x20001714
 8009f6c:	20001748 	.word	0x20001748
 8009f70:	20001744 	.word	0x20001744
 8009f74:	0800f220 	.word	0x0800f220
 8009f78:	2000180c 	.word	0x2000180c
 8009f7c:	e000edf0 	.word	0xe000edf0
 8009f80:	20001740 	.word	0x20001740

    default:
      send = true;
 8009f84:	2301      	movs	r3, #1
 8009f86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009f8a:	e004      	b.n	8009f96 <dcd_event_handler+0x31a>
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e002      	b.n	8009f96 <dcd_event_handler+0x31a>
      break;
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <dcd_event_handler+0x31a>
      break;
 8009f94:	bf00      	nop
  }

  if (send) {
 8009f96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d049      	beq.n	800a032 <dcd_event_handler+0x3b6>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009fa8:	4b24      	ldr	r3, [pc, #144]	@ (800a03c <dcd_event_handler+0x3c0>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009fba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fbe:	f083 0301 	eor.w	r3, r3, #1
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2000      	movs	r0, #0
 8009fce:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fd09 	bl	80089ee <tu_fifo_write>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fe6:	f083 0301 	eor.w	r3, r3, #1
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	4798      	blx	r3
  return success;
 8009ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ffc:	f083 0301 	eor.w	r3, r3, #1
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d009      	beq.n	800a01a <dcd_event_handler+0x39e>
 800a006:	4b0e      	ldr	r3, [pc, #56]	@ (800a040 <dcd_event_handler+0x3c4>)
 800a008:	623b      	str	r3, [r7, #32]
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00c      	beq.n	800a030 <dcd_event_handler+0x3b4>
 800a016:	be00      	bkpt	0x0000
 800a018:	e00a      	b.n	800a030 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	7818      	ldrb	r0, [r3, #0]
 800a01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	4619      	mov	r1, r3
 800a024:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a028:	461a      	mov	r2, r3
 800a02a:	f7fe fd75 	bl	8008b18 <tud_event_hook_cb>
  return true;
 800a02e:	e000      	b.n	800a032 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a030:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800a032:	bf00      	nop
 800a034:	3780      	adds	r7, #128	@ 0x80
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	2000180c 	.word	0x2000180c
 800a040:	e000edf0 	.word	0xe000edf0

0800a044 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800a054:	4b07      	ldr	r3, [pc, #28]	@ (800a074 <usbd_int_set+0x30>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 f929 	bl	800b2b0 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800a05e:	e004      	b.n	800a06a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 800a060:	4b04      	ldr	r3, [pc, #16]	@ (800a074 <usbd_int_set+0x30>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f001 f94b 	bl	800b300 <dcd_int_disable>
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	2000022d 	.word	0x2000022d

0800a078 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
 800a082:	4b09      	ldr	r3, [pc, #36]	@ (800a0a8 <usbd_spin_lock+0x30>)
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	f083 0301 	eor.w	r3, r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2000      	movs	r0, #0
 800a09c:	4798      	blx	r3
}
 800a09e:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000230 	.word	0x20000230

0800a0ac <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
 800a0b6:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <usbd_spin_unlock+0x30>)
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	f083 0301 	eor.w	r3, r3, #1
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	4798      	blx	r3
}
 800a0d2:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 800a0d4:	bf00      	nop
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000230 	.word	0x20000230

0800a0e0 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08a      	sub	sp, #40	@ 0x28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6039      	str	r1, [r7, #0]
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	71bb      	strb	r3, [r7, #6]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0fc:	e04d      	b.n	800a19a <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	2b05      	cmp	r3, #5
 800a108:	d108      	bne.n	800a11c <usbd_open_edpt_pair+0x3c>
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	78db      	ldrb	r3, [r3, #3]
 800a10e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a112:	b2db      	uxtb	r3, r3
 800a114:	461a      	mov	r2, r3
 800a116:	797b      	ldrb	r3, [r7, #5]
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00a      	beq.n	800a132 <usbd_open_edpt_pair+0x52>
 800a11c:	4b23      	ldr	r3, [pc, #140]	@ (800a1ac <usbd_open_edpt_pair+0xcc>)
 800a11e:	61bb      	str	r3, [r7, #24]
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d000      	beq.n	800a12e <usbd_open_edpt_pair+0x4e>
 800a12c:	be00      	bkpt	0x0000
 800a12e:	2300      	movs	r3, #0
 800a130:	e038      	b.n	800a1a4 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	6a39      	ldr	r1, [r7, #32]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f83a 	bl	800a1b0 <usbd_edpt_open>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f083 0301 	eor.w	r3, r3, #1
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <usbd_open_edpt_pair+0x7e>
 800a148:	4b18      	ldr	r3, [pc, #96]	@ (800a1ac <usbd_open_edpt_pair+0xcc>)
 800a14a:	61fb      	str	r3, [r7, #28]
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d000      	beq.n	800a15a <usbd_open_edpt_pair+0x7a>
 800a158:	be00      	bkpt	0x0000
 800a15a:	2300      	movs	r3, #0
 800a15c:	e022      	b.n	800a1a4 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	789b      	ldrb	r3, [r3, #2]
 800a162:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	09db      	lsrs	r3, r3, #7
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d104      	bne.n	800a178 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	789a      	ldrb	r2, [r3, #2]
 800a172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	e003      	b.n	800a180 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	789a      	ldrb	r2, [r3, #2]
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800a192:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	3301      	adds	r3, #1
 800a198:	627b      	str	r3, [r7, #36]	@ 0x24
 800a19a:	79bb      	ldrb	r3, [r7, #6]
 800a19c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	dbad      	blt.n	800a0fe <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800a1a2:	2301      	movs	r3, #1
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3728      	adds	r7, #40	@ 0x28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000edf0 	.word	0xe000edf0

0800a1b0 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800a1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a230 <usbd_edpt_open+0x80>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	789b      	ldrb	r3, [r3, #2]
 800a1c6:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	d90a      	bls.n	800a1ea <usbd_edpt_open+0x3a>
 800a1d4:	4b17      	ldr	r3, [pc, #92]	@ (800a234 <usbd_edpt_open+0x84>)
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d000      	beq.n	800a1e6 <usbd_edpt_open+0x36>
 800a1e4:	be00      	bkpt	0x0000
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e01d      	b.n	800a226 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800a1ea:	4b13      	ldr	r3, [pc, #76]	@ (800a238 <usbd_edpt_open+0x88>)
 800a1ec:	789b      	ldrb	r3, [r3, #2]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6838      	ldr	r0, [r7, #0]
 800a1f4:	f002 fbae 	bl	800c954 <tu_edpt_validate>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f083 0301 	eor.w	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00a      	beq.n	800a21a <usbd_edpt_open+0x6a>
 800a204:	4b0b      	ldr	r3, [pc, #44]	@ (800a234 <usbd_edpt_open+0x84>)
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d000      	beq.n	800a216 <usbd_edpt_open+0x66>
 800a214:	be00      	bkpt	0x0000
 800a216:	2300      	movs	r3, #0
 800a218:	e005      	b.n	800a226 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 800a21a:	79fb      	ldrb	r3, [r7, #7]
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f992 	bl	800b548 <dcd_edpt_open>
 800a224:	4603      	mov	r3, r0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	2000022d 	.word	0x2000022d
 800a234:	e000edf0 	.word	0xe000edf0
 800a238:	20001714 	.word	0x20001714

0800a23c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	460a      	mov	r2, r1
 800a246:	71fb      	strb	r3, [r7, #7]
 800a248:	4613      	mov	r3, r2
 800a24a:	71bb      	strb	r3, [r7, #6]
 800a24c:	79bb      	ldrb	r3, [r7, #6]
 800a24e:	73bb      	strb	r3, [r7, #14]
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a256:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a258:	75fb      	strb	r3, [r7, #23]
 800a25a:	79bb      	ldrb	r3, [r7, #6]
 800a25c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	09db      	lsrs	r3, r3, #7
 800a262:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a264:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a266:	7dfa      	ldrb	r2, [r7, #23]
 800a268:	7dbb      	ldrb	r3, [r7, #22]
 800a26a:	0052      	lsls	r2, r2, #1
 800a26c:	4413      	add	r3, r2
 800a26e:	3320      	adds	r3, #32
 800a270:	4a05      	ldr	r2, [pc, #20]	@ (800a288 <usbd_edpt_claim+0x4c>)
 800a272:	4413      	add	r3, r2
 800a274:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800a276:	2100      	movs	r1, #0
 800a278:	6938      	ldr	r0, [r7, #16]
 800a27a:	f002 fb07 	bl	800c88c <tu_edpt_claim>
 800a27e:	4603      	mov	r3, r0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20001714 	.word	0x20001714

0800a28c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	460a      	mov	r2, r1
 800a296:	71fb      	strb	r3, [r7, #7]
 800a298:	4613      	mov	r3, r2
 800a29a:	71bb      	strb	r3, [r7, #6]
 800a29c:	79bb      	ldrb	r3, [r7, #6]
 800a29e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a2a8:	75fb      	strb	r3, [r7, #23]
 800a2aa:	79bb      	ldrb	r3, [r7, #6]
 800a2ac:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	09db      	lsrs	r3, r3, #7
 800a2b2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a2b4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a2b6:	7dfa      	ldrb	r2, [r7, #23]
 800a2b8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ba:	0052      	lsls	r2, r2, #1
 800a2bc:	4413      	add	r3, r2
 800a2be:	3320      	adds	r3, #32
 800a2c0:	4a05      	ldr	r2, [pc, #20]	@ (800a2d8 <usbd_edpt_release+0x4c>)
 800a2c2:	4413      	add	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	6938      	ldr	r0, [r7, #16]
 800a2ca:	f002 fb19 	bl	800c900 <tu_edpt_release>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20001714 	.word	0x20001714

0800a2dc <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	603a      	str	r2, [r7, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	71bb      	strb	r3, [r7, #6]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800a2f2:	4b32      	ldr	r3, [pc, #200]	@ (800a3bc <usbd_edpt_xfer+0xe0>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
 800a2f8:	79bb      	ldrb	r3, [r7, #6]
 800a2fa:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a2fc:	7abb      	ldrb	r3, [r7, #10]
 800a2fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a302:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a304:	75fb      	strb	r3, [r7, #23]
 800a306:	79bb      	ldrb	r3, [r7, #6]
 800a308:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	09db      	lsrs	r3, r3, #7
 800a30e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a310:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800a312:	7dfa      	ldrb	r2, [r7, #23]
 800a314:	7dbb      	ldrb	r3, [r7, #22]
 800a316:	492a      	ldr	r1, [pc, #168]	@ (800a3c0 <usbd_edpt_xfer+0xe4>)
 800a318:	0052      	lsls	r2, r2, #1
 800a31a:	440a      	add	r2, r1
 800a31c:	4413      	add	r3, r2
 800a31e:	3320      	adds	r3, #32
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00a      	beq.n	800a342 <usbd_edpt_xfer+0x66>
 800a32c:	4b25      	ldr	r3, [pc, #148]	@ (800a3c4 <usbd_edpt_xfer+0xe8>)
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d000      	beq.n	800a33e <usbd_edpt_xfer+0x62>
 800a33c:	be00      	bkpt	0x0000
 800a33e:	2300      	movs	r3, #0
 800a340:	e038      	b.n	800a3b4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a342:	7dfa      	ldrb	r2, [r7, #23]
 800a344:	7dbb      	ldrb	r3, [r7, #22]
 800a346:	491e      	ldr	r1, [pc, #120]	@ (800a3c0 <usbd_edpt_xfer+0xe4>)
 800a348:	0052      	lsls	r2, r2, #1
 800a34a:	440a      	add	r2, r1
 800a34c:	4413      	add	r3, r2
 800a34e:	f103 0220 	add.w	r2, r3, #32
 800a352:	7813      	ldrb	r3, [r2, #0]
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a35a:	88bb      	ldrh	r3, [r7, #4]
 800a35c:	79b9      	ldrb	r1, [r7, #6]
 800a35e:	79f8      	ldrb	r0, [r7, #7]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	f001 f9b5 	bl	800b6d0 <dcd_edpt_xfer>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <usbd_edpt_xfer+0x94>
    return true;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e021      	b.n	800a3b4 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a370:	7dfa      	ldrb	r2, [r7, #23]
 800a372:	7dbb      	ldrb	r3, [r7, #22]
 800a374:	4912      	ldr	r1, [pc, #72]	@ (800a3c0 <usbd_edpt_xfer+0xe4>)
 800a376:	0052      	lsls	r2, r2, #1
 800a378:	440a      	add	r2, r1
 800a37a:	4413      	add	r3, r2
 800a37c:	f103 0220 	add.w	r2, r3, #32
 800a380:	7813      	ldrb	r3, [r2, #0]
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a388:	7dfa      	ldrb	r2, [r7, #23]
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
 800a38c:	490c      	ldr	r1, [pc, #48]	@ (800a3c0 <usbd_edpt_xfer+0xe4>)
 800a38e:	0052      	lsls	r2, r2, #1
 800a390:	440a      	add	r2, r1
 800a392:	4413      	add	r3, r2
 800a394:	f103 0220 	add.w	r2, r3, #32
 800a398:	7813      	ldrb	r3, [r2, #0]
 800a39a:	f023 0304 	bic.w	r3, r3, #4
 800a39e:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a3a0:	4b08      	ldr	r3, [pc, #32]	@ (800a3c4 <usbd_edpt_xfer+0xe8>)
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d000      	beq.n	800a3b2 <usbd_edpt_xfer+0xd6>
 800a3b0:	be00      	bkpt	0x0000
    return false;
 800a3b2:	2300      	movs	r3, #0
  }
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	2000022d 	.word	0x2000022d
 800a3c0:	20001714 	.word	0x20001714
 800a3c4:	e000edf0 	.word	0xe000edf0

0800a3c8 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	71fb      	strb	r3, [r7, #7]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71bb      	strb	r3, [r7, #6]
 800a3d8:	79bb      	ldrb	r3, [r7, #6]
 800a3da:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a3dc:	7b3b      	ldrb	r3, [r7, #12]
 800a3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3e2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	79bb      	ldrb	r3, [r7, #6]
 800a3e8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a3ea:	7b7b      	ldrb	r3, [r7, #13]
 800a3ec:	09db      	lsrs	r3, r3, #7
 800a3ee:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a3f0:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a3f2:	7bfa      	ldrb	r2, [r7, #15]
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	490a      	ldr	r1, [pc, #40]	@ (800a420 <usbd_edpt_busy+0x58>)
 800a3f8:	0052      	lsls	r2, r2, #1
 800a3fa:	440a      	add	r2, r1
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3320      	adds	r3, #32
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20001714 	.word	0x20001714

0800a424 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	460a      	mov	r2, r1
 800a42e:	71fb      	strb	r3, [r7, #7]
 800a430:	4613      	mov	r3, r2
 800a432:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a434:	4b18      	ldr	r3, [pc, #96]	@ (800a498 <usbd_edpt_stall+0x74>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	71fb      	strb	r3, [r7, #7]
 800a43a:	79bb      	ldrb	r3, [r7, #6]
 800a43c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a43e:	7b3b      	ldrb	r3, [r7, #12]
 800a440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a444:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a446:	73fb      	strb	r3, [r7, #15]
 800a448:	79bb      	ldrb	r3, [r7, #6]
 800a44a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a44c:	7b7b      	ldrb	r3, [r7, #13]
 800a44e:	09db      	lsrs	r3, r3, #7
 800a450:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a452:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a454:	79ba      	ldrb	r2, [r7, #6]
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f001 f988 	bl	800b770 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a460:	7bfa      	ldrb	r2, [r7, #15]
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	490d      	ldr	r1, [pc, #52]	@ (800a49c <usbd_edpt_stall+0x78>)
 800a466:	0052      	lsls	r2, r2, #1
 800a468:	440a      	add	r2, r1
 800a46a:	4413      	add	r3, r2
 800a46c:	f103 0220 	add.w	r2, r3, #32
 800a470:	7813      	ldrb	r3, [r2, #0]
 800a472:	f043 0302 	orr.w	r3, r3, #2
 800a476:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	4907      	ldr	r1, [pc, #28]	@ (800a49c <usbd_edpt_stall+0x78>)
 800a47e:	0052      	lsls	r2, r2, #1
 800a480:	440a      	add	r2, r1
 800a482:	4413      	add	r3, r2
 800a484:	f103 0220 	add.w	r2, r3, #32
 800a488:	7813      	ldrb	r3, [r2, #0]
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	7013      	strb	r3, [r2, #0]
}
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	2000022d 	.word	0x2000022d
 800a49c:	20001714 	.word	0x20001714

0800a4a0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	460a      	mov	r2, r1
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a4b0:	4b18      	ldr	r3, [pc, #96]	@ (800a514 <usbd_edpt_clear_stall+0x74>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	71fb      	strb	r3, [r7, #7]
 800a4b6:	79bb      	ldrb	r3, [r7, #6]
 800a4b8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a4ba:	7b3b      	ldrb	r3, [r7, #12]
 800a4bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a4c2:	73fb      	strb	r3, [r7, #15]
 800a4c4:	79bb      	ldrb	r3, [r7, #6]
 800a4c6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a4c8:	7b7b      	ldrb	r3, [r7, #13]
 800a4ca:	09db      	lsrs	r3, r3, #7
 800a4cc:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a4ce:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a4d0:	79ba      	ldrb	r2, [r7, #6]
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f001 f980 	bl	800b7dc <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a4dc:	7bfa      	ldrb	r2, [r7, #15]
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	490d      	ldr	r1, [pc, #52]	@ (800a518 <usbd_edpt_clear_stall+0x78>)
 800a4e2:	0052      	lsls	r2, r2, #1
 800a4e4:	440a      	add	r2, r1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f103 0220 	add.w	r2, r3, #32
 800a4ec:	7813      	ldrb	r3, [r2, #0]
 800a4ee:	f023 0302 	bic.w	r3, r3, #2
 800a4f2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a4f4:	7bfa      	ldrb	r2, [r7, #15]
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	4907      	ldr	r1, [pc, #28]	@ (800a518 <usbd_edpt_clear_stall+0x78>)
 800a4fa:	0052      	lsls	r2, r2, #1
 800a4fc:	440a      	add	r2, r1
 800a4fe:	4413      	add	r3, r2
 800a500:	f103 0220 	add.w	r2, r3, #32
 800a504:	7813      	ldrb	r3, [r2, #0]
 800a506:	f023 0301 	bic.w	r3, r3, #1
 800a50a:	7013      	strb	r3, [r2, #0]
}
 800a50c:	bf00      	nop
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	2000022d 	.word	0x2000022d
 800a518:	20001714 	.word	0x20001714

0800a51c <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	460a      	mov	r2, r1
 800a526:	71fb      	strb	r3, [r7, #7]
 800a528:	4613      	mov	r3, r2
 800a52a:	71bb      	strb	r3, [r7, #6]
 800a52c:	79bb      	ldrb	r3, [r7, #6]
 800a52e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a530:	7b3b      	ldrb	r3, [r7, #12]
 800a532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a536:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a538:	73fb      	strb	r3, [r7, #15]
 800a53a:	79bb      	ldrb	r3, [r7, #6]
 800a53c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a53e:	7b7b      	ldrb	r3, [r7, #13]
 800a540:	09db      	lsrs	r3, r3, #7
 800a542:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a544:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a546:	7bfa      	ldrb	r2, [r7, #15]
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	490a      	ldr	r1, [pc, #40]	@ (800a574 <usbd_edpt_stalled+0x58>)
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	440a      	add	r2, r1
 800a550:	4413      	add	r3, r2
 800a552:	3320      	adds	r3, #32
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf14      	ite	ne
 800a560:	2301      	movne	r3, #1
 800a562:	2300      	moveq	r3, #0
 800a564:	b2db      	uxtb	r3, r3
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20001714 	.word	0x20001714

0800a578 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	6039      	str	r1, [r7, #0]
 800a582:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <status_stage_xact+0x1e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e000      	b.n	800a5b0 <status_stage_xact+0x20>
 800a5ae:	2380      	movs	r3, #128	@ 0x80
 800a5b0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a5b2:	7bf9      	ldrb	r1, [r7, #15]
 800a5b4:	79f8      	ldrb	r0, [r7, #7]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f7ff fe8f 	bl	800a2dc <usbd_edpt_xfer>
 800a5be:	4603      	mov	r3, r0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	6039      	str	r1, [r7, #0]
 800a5d2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a604 <tud_control_status+0x3c>)
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	6810      	ldr	r0, [r2, #0]
 800a5da:	6851      	ldr	r1, [r2, #4]
 800a5dc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a5de:	4b09      	ldr	r3, [pc, #36]	@ (800a604 <tud_control_status+0x3c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a5e4:	4b07      	ldr	r3, [pc, #28]	@ (800a604 <tud_control_status+0x3c>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a5ea:	4b06      	ldr	r3, [pc, #24]	@ (800a604 <tud_control_status+0x3c>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff ffcb 	bl	800a590 <status_stage_xact>
 800a5fa:	4603      	mov	r3, r0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20001810 	.word	0x20001810

0800a608 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a612:	4b24      	ldr	r3, [pc, #144]	@ (800a6a4 <data_stage_xact+0x9c>)
 800a614:	899a      	ldrh	r2, [r3, #12]
 800a616:	4b23      	ldr	r3, [pc, #140]	@ (800a6a4 <data_stage_xact+0x9c>)
 800a618:	89db      	ldrh	r3, [r3, #14]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	837b      	strh	r3, [r7, #26]
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a624:	8b7a      	ldrh	r2, [r7, #26]
 800a626:	8b3b      	ldrh	r3, [r7, #24]
 800a628:	4293      	cmp	r3, r2
 800a62a:	bf28      	it	cs
 800a62c:	4613      	movcs	r3, r2
 800a62e:	b29b      	uxth	r3, r3
 800a630:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a632:	2300      	movs	r3, #0
 800a634:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a636:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a4 <data_stage_xact+0x9c>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01e      	beq.n	800a682 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a644:	2380      	movs	r3, #128	@ 0x80
 800a646:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a648:	8bbb      	ldrh	r3, [r7, #28]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d019      	beq.n	800a682 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a64e:	4b15      	ldr	r3, [pc, #84]	@ (800a6a4 <data_stage_xact+0x9c>)
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	8bbb      	ldrh	r3, [r7, #28]
 800a654:	4914      	ldr	r1, [pc, #80]	@ (800a6a8 <data_stage_xact+0xa0>)
 800a656:	6179      	str	r1, [r7, #20]
 800a658:	2140      	movs	r1, #64	@ 0x40
 800a65a:	6139      	str	r1, [r7, #16]
 800a65c:	60fa      	str	r2, [r7, #12]
 800a65e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d202      	bcs.n	800a66e <data_stage_xact+0x66>
    return -1;
 800a668:	f04f 33ff 	mov.w	r3, #4294967295
 800a66c:	e005      	b.n	800a67a <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	68f9      	ldr	r1, [r7, #12]
 800a672:	6978      	ldr	r0, [r7, #20]
 800a674:	f002 fd0b 	bl	800d08e <memcpy>
  return 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <data_stage_xact+0x7a>
 800a67e:	2300      	movs	r3, #0
 800a680:	e00b      	b.n	800a69a <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a682:	8bbb      	ldrh	r3, [r7, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <data_stage_xact+0x84>
 800a688:	4a07      	ldr	r2, [pc, #28]	@ (800a6a8 <data_stage_xact+0xa0>)
 800a68a:	e000      	b.n	800a68e <data_stage_xact+0x86>
 800a68c:	2200      	movs	r2, #0
 800a68e:	8bbb      	ldrh	r3, [r7, #28]
 800a690:	7ff9      	ldrb	r1, [r7, #31]
 800a692:	79f8      	ldrb	r0, [r7, #7]
 800a694:	f7ff fe22 	bl	800a2dc <usbd_edpt_xfer>
 800a698:	4603      	mov	r3, r0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3720      	adds	r7, #32
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20001810 	.word	0x20001810
 800a6a8:	20001824 	.word	0x20001824

0800a6ac <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a6c0:	4b30      	ldr	r3, [pc, #192]	@ (800a784 <tud_control_xfer+0xd8>)
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	6810      	ldr	r0, [r2, #0]
 800a6c6:	6851      	ldr	r1, [r2, #4]
 800a6c8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a6ca:	4a2e      	ldr	r2, [pc, #184]	@ (800a784 <tud_control_xfer+0xd8>)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a6d0:	4b2c      	ldr	r3, [pc, #176]	@ (800a784 <tud_control_xfer+0xd8>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	88db      	ldrh	r3, [r3, #6]
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	89bb      	ldrh	r3, [r7, #12]
 800a6de:	827b      	strh	r3, [r7, #18]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a6e4:	8a7a      	ldrh	r2, [r7, #18]
 800a6e6:	8a3b      	ldrh	r3, [r7, #16]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	bf28      	it	cs
 800a6ec:	4613      	movcs	r3, r2
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	4b24      	ldr	r3, [pc, #144]	@ (800a784 <tud_control_xfer+0xd8>)
 800a6f2:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	88db      	ldrh	r3, [r3, #6]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d026      	beq.n	800a74c <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a6fe:	4b21      	ldr	r3, [pc, #132]	@ (800a784 <tud_control_xfer+0xd8>)
 800a700:	899b      	ldrh	r3, [r3, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00d      	beq.n	800a722 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <tud_control_xfer+0x76>
 800a70c:	4b1e      	ldr	r3, [pc, #120]	@ (800a788 <tud_control_xfer+0xdc>)
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d000      	beq.n	800a71e <tud_control_xfer+0x72>
 800a71c:	be00      	bkpt	0x0000
 800a71e:	2300      	movs	r3, #0
 800a720:	e02b      	b.n	800a77a <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff ff6f 	bl	800a608 <data_stage_xact>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f083 0301 	eor.w	r3, r3, #1
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d020      	beq.n	800a778 <tud_control_xfer+0xcc>
 800a736:	4b14      	ldr	r3, [pc, #80]	@ (800a788 <tud_control_xfer+0xdc>)
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d000      	beq.n	800a748 <tud_control_xfer+0x9c>
 800a746:	be00      	bkpt	0x0000
 800a748:	2300      	movs	r3, #0
 800a74a:	e016      	b.n	800a77a <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff ff1d 	bl	800a590 <status_stage_xact>
 800a756:	4603      	mov	r3, r0
 800a758:	f083 0301 	eor.w	r3, r3, #1
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <tud_control_xfer+0xcc>
 800a762:	4b09      	ldr	r3, [pc, #36]	@ (800a788 <tud_control_xfer+0xdc>)
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d000      	beq.n	800a774 <tud_control_xfer+0xc8>
 800a772:	be00      	bkpt	0x0000
 800a774:	2300      	movs	r3, #0
 800a776:	e000      	b.n	800a77a <tud_control_xfer+0xce>
  }

  return true;
 800a778:	2301      	movs	r3, #1
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20001810 	.word	0x20001810
 800a788:	e000edf0 	.word	0xe000edf0

0800a78c <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a790:	2214      	movs	r2, #20
 800a792:	2100      	movs	r1, #0
 800a794:	4802      	ldr	r0, [pc, #8]	@ (800a7a0 <usbd_control_reset+0x14>)
 800a796:	f002 fba2 	bl	800cede <memset>
}
 800a79a:	bf00      	nop
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20001810 	.word	0x20001810

0800a7a4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a7ac:	4a04      	ldr	r2, [pc, #16]	@ (800a7c0 <usbd_control_set_complete_callback+0x1c>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6113      	str	r3, [r2, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	20001810 	.word	0x20001810

0800a7c4 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a7cc:	4b09      	ldr	r3, [pc, #36]	@ (800a7f4 <usbd_control_set_request+0x30>)
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6810      	ldr	r0, [r2, #0]
 800a7d2:	6851      	ldr	r1, [r2, #4]
 800a7d4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a7d6:	4b07      	ldr	r3, [pc, #28]	@ (800a7f4 <usbd_control_set_request+0x30>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a7dc:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <usbd_control_set_request+0x30>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a7e2:	4b04      	ldr	r3, [pc, #16]	@ (800a7f4 <usbd_control_set_request+0x30>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	819a      	strh	r2, [r3, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	20001810 	.word	0x20001810

0800a7f8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	4603      	mov	r3, r0
 800a802:	71fb      	strb	r3, [r7, #7]
 800a804:	460b      	mov	r3, r1
 800a806:	71bb      	strb	r3, [r7, #6]
 800a808:	4613      	mov	r3, r2
 800a80a:	717b      	strb	r3, [r7, #5]
 800a80c:	79bb      	ldrb	r3, [r7, #6]
 800a80e:	73fb      	strb	r3, [r7, #15]
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	09db      	lsrs	r3, r3, #7
 800a814:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a816:	4a4f      	ldr	r2, [pc, #316]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a818:	7812      	ldrb	r2, [r2, #0]
 800a81a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	4293      	cmp	r3, r2
 800a822:	d01e      	beq.n	800a862 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00a      	beq.n	800a840 <usbd_control_xfer_cb+0x48>
 800a82a:	4b4b      	ldr	r3, [pc, #300]	@ (800a958 <usbd_control_xfer_cb+0x160>)
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d000      	beq.n	800a83c <usbd_control_xfer_cb+0x44>
 800a83a:	be00      	bkpt	0x0000
 800a83c:	2300      	movs	r3, #0
 800a83e:	e084      	b.n	800a94a <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	4944      	ldr	r1, [pc, #272]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff fe97 	bl	800a578 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a84a:	4b42      	ldr	r3, [pc, #264]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a852:	4b40      	ldr	r3, [pc, #256]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	79f8      	ldrb	r0, [r7, #7]
 800a858:	4a3e      	ldr	r2, [pc, #248]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a85a:	2103      	movs	r1, #3
 800a85c:	4798      	blx	r3
    }

    return true;
 800a85e:	2301      	movs	r3, #1
 800a860:	e073      	b.n	800a94a <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a862:	4b3c      	ldr	r3, [pc, #240]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10c      	bne.n	800a88a <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a870:	4b38      	ldr	r3, [pc, #224]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <usbd_control_xfer_cb+0x84>
 800a878:	2300      	movs	r3, #0
 800a87a:	e066      	b.n	800a94a <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a87c:	4b35      	ldr	r3, [pc, #212]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	4936      	ldr	r1, [pc, #216]	@ (800a95c <usbd_control_xfer_cb+0x164>)
 800a884:	4618      	mov	r0, r3
 800a886:	f002 fc02 	bl	800d08e <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a88a:	4b32      	ldr	r3, [pc, #200]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a88c:	89da      	ldrh	r2, [r3, #14]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	4413      	add	r3, r2
 800a894:	b29a      	uxth	r2, r3
 800a896:	4b2f      	ldr	r3, [pc, #188]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a898:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a89a:	4b2e      	ldr	r3, [pc, #184]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	4a2c      	ldr	r2, [pc, #176]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8a4:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a8a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8a8:	88da      	ldrh	r2, [r3, #6]
 800a8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8ac:	89db      	ldrh	r3, [r3, #14]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d002      	beq.n	800a8b8 <usbd_control_xfer_cb+0xc0>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8b6:	d831      	bhi.n	800a91c <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a8bc:	4b25      	ldr	r3, [pc, #148]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d007      	beq.n	800a8d4 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a8c4:	4b23      	ldr	r3, [pc, #140]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	79f8      	ldrb	r0, [r7, #7]
 800a8ca:	4a22      	ldr	r2, [pc, #136]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8cc:	2102      	movs	r1, #2
 800a8ce:	4798      	blx	r3
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a8d4:	7ffb      	ldrb	r3, [r7, #31]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d015      	beq.n	800a906 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	491d      	ldr	r1, [pc, #116]	@ (800a954 <usbd_control_xfer_cb+0x15c>)
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fe56 	bl	800a590 <status_stage_xact>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f083 0301 	eor.w	r3, r3, #1
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d02a      	beq.n	800a946 <usbd_control_xfer_cb+0x14e>
 800a8f0:	4b19      	ldr	r3, [pc, #100]	@ (800a958 <usbd_control_xfer_cb+0x160>)
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d000      	beq.n	800a902 <usbd_control_xfer_cb+0x10a>
 800a900:	be00      	bkpt	0x0000
 800a902:	2300      	movs	r3, #0
 800a904:	e021      	b.n	800a94a <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 ff30 	bl	800b770 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2180      	movs	r1, #128	@ 0x80
 800a914:	4618      	mov	r0, r3
 800a916:	f000 ff2b 	bl	800b770 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a91a:	e014      	b.n	800a946 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fe72 	bl	800a608 <data_stage_xact>
 800a924:	4603      	mov	r3, r0
 800a926:	f083 0301 	eor.w	r3, r3, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00b      	beq.n	800a948 <usbd_control_xfer_cb+0x150>
 800a930:	4b09      	ldr	r3, [pc, #36]	@ (800a958 <usbd_control_xfer_cb+0x160>)
 800a932:	61bb      	str	r3, [r7, #24]
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d000      	beq.n	800a942 <usbd_control_xfer_cb+0x14a>
 800a940:	be00      	bkpt	0x0000
 800a942:	2300      	movs	r3, #0
 800a944:	e001      	b.n	800a94a <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a946:	bf00      	nop
  }

  return true;
 800a948:	2301      	movs	r3, #1
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20001810 	.word	0x20001810
 800a958:	e000edf0 	.word	0xe000edf0
 800a95c:	20001824 	.word	0x20001824

0800a960 <__NVIC_EnableIRQ>:
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a96a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	db0b      	blt.n	800a98a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	f003 021f 	and.w	r2, r3, #31
 800a978:	4907      	ldr	r1, [pc, #28]	@ (800a998 <__NVIC_EnableIRQ+0x38>)
 800a97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a97e:	095b      	lsrs	r3, r3, #5
 800a980:	2001      	movs	r0, #1
 800a982:	fa00 f202 	lsl.w	r2, r0, r2
 800a986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	e000e100 	.word	0xe000e100

0800a99c <__NVIC_DisableIRQ>:
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	db12      	blt.n	800a9d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	f003 021f 	and.w	r2, r3, #31
 800a9b4:	490a      	ldr	r1, [pc, #40]	@ (800a9e0 <__NVIC_DisableIRQ+0x44>)
 800a9b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ba:	095b      	lsrs	r3, r3, #5
 800a9bc:	2001      	movs	r0, #1
 800a9be:	fa00 f202 	lsl.w	r2, r0, r2
 800a9c2:	3320      	adds	r3, #32
 800a9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a9c8:	f3bf 8f4f 	dsb	sy
}
 800a9cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a9ce:	f3bf 8f6f 	isb	sy
}
 800a9d2:	bf00      	nop
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	e000e100 	.word	0xe000e100

0800a9e4 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	71fb      	strb	r3, [r7, #7]
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a9f2:	7afb      	ldrb	r3, [r7, #11]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	4a13      	ldr	r2, [pc, #76]	@ (800aa4c <dma_setup_prepare+0x68>)
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	4413      	add	r3, r2
 800aa04:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa06:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0c:	4a10      	ldr	r2, [pc, #64]	@ (800aa50 <dma_setup_prepare+0x6c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d904      	bls.n	800aa1c <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db10      	blt.n	800aa3e <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4a0d      	ldr	r2, [pc, #52]	@ (800aa54 <dma_setup_prepare+0x70>)
 800aa20:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800aa24:	4a0c      	ldr	r2, [pc, #48]	@ (800aa58 <dma_setup_prepare+0x74>)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800aa32:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800aa3c:	e000      	b.n	800aa40 <dma_setup_prepare+0x5c>
      return;
 800aa3e:	bf00      	nop
}
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	0800f260 	.word	0x0800f260
 800aa50:	4f543009 	.word	0x4f543009
 800aa54:	20080008 	.word	0x20080008
 800aa58:	200018ec 	.word	0x200018ec

0800aa5c <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800aa5c:	b480      	push	{r7}
 800aa5e:	b091      	sub	sp, #68	@ 0x44
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	71fb      	strb	r3, [r7, #7]
 800aa66:	460b      	mov	r3, r1
 800aa68:	71bb      	strb	r3, [r7, #6]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80bb      	strh	r3, [r7, #4]
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa72:	7e7b      	ldrb	r3, [r7, #25]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <dfifo_alloc+0x20>
    rhport = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa7c:	7e7b      	ldrb	r3, [r7, #25]
 800aa7e:	4a65      	ldr	r2, [pc, #404]	@ (800ac14 <dfifo_alloc+0x1b8>)
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	4413      	add	r3, r2
 800aa84:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa86:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	4a61      	ldr	r2, [pc, #388]	@ (800ac14 <dfifo_alloc+0x1b8>)
 800aa8e:	4413      	add	r3, r2
 800aa90:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800aa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa94:	7a1b      	ldrb	r3, [r3, #8]
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800aa9a:	79bb      	ldrb	r3, [r7, #6]
 800aa9c:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa9e:	7ebb      	ldrb	r3, [r7, #26]
 800aaa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaa4:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800aaa6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800aaaa:	79bb      	ldrb	r3, [r7, #6]
 800aaac:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aaae:	7efb      	ldrb	r3, [r7, #27]
 800aab0:	09db      	lsrs	r3, r3, #7
 800aab2:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800aab4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800aab8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800aabc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d30a      	bcc.n	800aada <dfifo_alloc+0x7e>
 800aac4:	4b54      	ldr	r3, [pc, #336]	@ (800ac18 <dfifo_alloc+0x1bc>)
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d000      	beq.n	800aad6 <dfifo_alloc+0x7a>
 800aad4:	be00      	bkpt	0x0000
 800aad6:	2300      	movs	r3, #0
 800aad8:	e095      	b.n	800ac06 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800aada:	88bb      	ldrh	r3, [r7, #4]
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	2304      	movs	r3, #4
 800aae0:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	4413      	add	r3, r2
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800aaf2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d12a      	bne.n	800ab50 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800aafa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	81fb      	strh	r3, [r7, #14]
 800ab02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab06:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800ab08:	89fb      	ldrh	r3, [r7, #14]
 800ab0a:	089b      	lsrs	r3, r3, #2
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f103 0208 	add.w	r2, r3, #8
 800ab12:	7b7b      	ldrb	r3, [r7, #13]
 800ab14:	4413      	add	r3, r2
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800ab1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d26d      	bcs.n	800ac04 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800ab28:	4b3c      	ldr	r3, [pc, #240]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800ab2a:	889b      	ldrh	r3, [r3, #4]
 800ab2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d90a      	bls.n	800ab48 <dfifo_alloc+0xec>
 800ab32:	4b39      	ldr	r3, [pc, #228]	@ (800ac18 <dfifo_alloc+0x1bc>)
 800ab34:	623b      	str	r3, [r7, #32]
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d000      	beq.n	800ab44 <dfifo_alloc+0xe8>
 800ab42:	be00      	bkpt	0x0000
 800ab44:	2300      	movs	r3, #0
 800ab46:	e05e      	b.n	800ac06 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800ab48:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab4e:	e059      	b.n	800ac04 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800ab50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab52:	7a5b      	ldrb	r3, [r3, #9]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d016      	beq.n	800ab86 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800ab58:	4b30      	ldr	r3, [pc, #192]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800ab5a:	799a      	ldrb	r2, [r3, #6]
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5e:	7a5b      	ldrb	r3, [r3, #9]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d30a      	bcc.n	800ab7a <dfifo_alloc+0x11e>
 800ab64:	4b2c      	ldr	r3, [pc, #176]	@ (800ac18 <dfifo_alloc+0x1bc>)
 800ab66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d000      	beq.n	800ab76 <dfifo_alloc+0x11a>
 800ab74:	be00      	bkpt	0x0000
 800ab76:	2300      	movs	r3, #0
 800ab78:	e045      	b.n	800ac06 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800ab7a:	4b28      	ldr	r3, [pc, #160]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800ab7c:	799b      	ldrb	r3, [r3, #6]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	4b26      	ldr	r3, [pc, #152]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800ab84:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d102      	bne.n	800ab98 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800ab92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800ab98:	4b20      	ldr	r3, [pc, #128]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800ab9a:	889b      	ldrh	r3, [r3, #4]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	4413      	add	r3, r2
 800aba6:	4299      	cmp	r1, r3
 800aba8:	d20a      	bcs.n	800abc0 <dfifo_alloc+0x164>
 800abaa:	4b1b      	ldr	r3, [pc, #108]	@ (800ac18 <dfifo_alloc+0x1bc>)
 800abac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d000      	beq.n	800abbc <dfifo_alloc+0x160>
 800abba:	be00      	bkpt	0x0000
 800abbc:	2300      	movs	r3, #0
 800abbe:	e022      	b.n	800ac06 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800abc0:	4b16      	ldr	r3, [pc, #88]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800abc2:	889a      	ldrh	r2, [r3, #4]
 800abc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	b29a      	uxth	r2, r3
 800abca:	4b14      	ldr	r3, [pc, #80]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800abcc:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800abce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d108      	bne.n	800abe8 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800abd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	4a10      	ldr	r2, [pc, #64]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800abdc:	8892      	ldrh	r2, [r2, #4]
 800abde:	4313      	orrs	r3, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	629a      	str	r2, [r3, #40]	@ 0x28
 800abe6:	e00d      	b.n	800ac04 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800abe8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	4a0b      	ldr	r2, [pc, #44]	@ (800ac1c <dfifo_alloc+0x1c0>)
 800abee:	8892      	ldrh	r2, [r2, #4]
 800abf0:	431a      	orrs	r2, r3
 800abf2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4611      	mov	r1, r2
 800abfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abfc:	3340      	adds	r3, #64	@ 0x40
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800ac04:	2301      	movs	r3, #1
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3744      	adds	r7, #68	@ 0x44
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	0800f260 	.word	0x0800f260
 800ac18:	e000edf0 	.word	0xe000edf0
 800ac1c:	200018e4 	.word	0x200018e4

0800ac20 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	011b      	lsls	r3, r3, #4
 800ac2e:	4a27      	ldr	r2, [pc, #156]	@ (800accc <dfifo_device_init+0xac>)
 800ac30:	4413      	add	r3, r2
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ac38:	7b3b      	ldrb	r3, [r7, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <dfifo_device_init+0x22>
    rhport = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ac42:	7b3b      	ldrb	r3, [r7, #12]
 800ac44:	4a21      	ldr	r2, [pc, #132]	@ (800accc <dfifo_device_init+0xac>)
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	4413      	add	r3, r2
 800ac4a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ac4c:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	7a1b      	ldrb	r3, [r3, #8]
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	81fa      	strh	r2, [r7, #14]
 800ac56:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800ac58:	89fb      	ldrh	r3, [r7, #14]
 800ac5a:	089b      	lsrs	r3, r3, #2
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f103 0208 	add.w	r2, r3, #8
 800ac62:	7b7b      	ldrb	r3, [r7, #13]
 800ac64:	4413      	add	r3, r2
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac7a:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ac7c:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800ac7e:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	089b      	lsrs	r3, r3, #2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	4b11      	ldr	r3, [pc, #68]	@ (800acd0 <dfifo_device_init+0xb0>)
 800ac8a:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800ac92:	4b0f      	ldr	r3, [pc, #60]	@ (800acd0 <dfifo_device_init+0xb0>)
 800ac94:	889a      	ldrh	r2, [r3, #4]
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	7a1b      	ldrb	r3, [r3, #8]
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	4b0b      	ldr	r3, [pc, #44]	@ (800acd0 <dfifo_device_init+0xb0>)
 800aca4:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800aca6:	4b0a      	ldr	r3, [pc, #40]	@ (800acd0 <dfifo_device_init+0xb0>)
 800aca8:	889b      	ldrh	r3, [r3, #4]
 800acaa:	461a      	mov	r2, r3
 800acac:	4613      	mov	r3, r2
 800acae:	041b      	lsls	r3, r3, #16
 800acb0:	441a      	add	r2, r3
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2240      	movs	r2, #64	@ 0x40
 800acba:	2180      	movs	r1, #128	@ 0x80
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fecd 	bl	800aa5c <dfifo_alloc>
}
 800acc2:	bf00      	nop
 800acc4:	3720      	adds	r7, #32
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	0800f260 	.word	0x0800f260
 800acd0:	200018e4 	.word	0x200018e4

0800acd4 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800acd4:	b480      	push	{r7}
 800acd6:	b08b      	sub	sp, #44	@ 0x2c
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ace4:	7c7b      	ldrb	r3, [r7, #17]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <edpt_activate+0x1a>
    rhport = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800acee:	7c7b      	ldrb	r3, [r7, #17]
 800acf0:	4a45      	ldr	r2, [pc, #276]	@ (800ae08 <edpt_activate+0x134>)
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	4413      	add	r3, r2
 800acf6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800acf8:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	789b      	ldrb	r3, [r3, #2]
 800acfe:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ad00:	7cbb      	ldrb	r3, [r7, #18]
 800ad02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	789b      	ldrb	r3, [r3, #2]
 800ad10:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ad12:	7cfb      	ldrb	r3, [r7, #19]
 800ad14:	09db      	lsrs	r3, r3, #7
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800ad1c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ad20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad24:	0052      	lsls	r2, r2, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	4a38      	ldr	r2, [pc, #224]	@ (800ae0c <edpt_activate+0x138>)
 800ad2c:	4413      	add	r3, r2
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	889b      	ldrh	r3, [r3, #4]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad3e:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	799a      	ldrb	r2, [r3, #6]
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	895b      	ldrh	r3, [r3, #10]
 800ad54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	89bb      	ldrh	r3, [r7, #12]
 800ad5c:	f362 030a 	bfi	r3, r2, #0, #11
 800ad60:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800ad62:	7b7b      	ldrb	r3, [r7, #13]
 800ad64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad68:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	78db      	ldrb	r3, [r3, #3]
 800ad6e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	f362 0383 	bfi	r3, r2, #2, #2
 800ad7a:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	78db      	ldrb	r3, [r3, #3]
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d003      	beq.n	800ad92 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	f043 0310 	orr.w	r3, r3, #16
 800ad90:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800ad92:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d108      	bne.n	800adac <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800ad9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad9e:	f003 030f 	and.w	r3, r3, #15
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	89fb      	ldrh	r3, [r7, #14]
 800ada6:	f362 1389 	bfi	r3, r2, #6, #4
 800adaa:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800adac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	bf14      	ite	ne
 800adb4:	2301      	movne	r3, #1
 800adb6:	2300      	moveq	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	461a      	mov	r2, r3
 800adbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adc0:	0112      	lsls	r2, r2, #4
 800adc2:	4413      	add	r3, r2
 800adc4:	3348      	adds	r3, #72	@ 0x48
 800adc6:	015b      	lsls	r3, r3, #5
 800adc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adca:	4413      	add	r3, r2
 800adcc:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800adda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adde:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800ade2:	2901      	cmp	r1, #1
 800ade4:	d101      	bne.n	800adea <edpt_activate+0x116>
 800ade6:	2100      	movs	r1, #0
 800ade8:	e000      	b.n	800adec <edpt_activate+0x118>
 800adea:	2110      	movs	r1, #16
 800adec:	440b      	add	r3, r1
 800adee:	2101      	movs	r1, #1
 800adf0:	fa01 f303 	lsl.w	r3, r1, r3
 800adf4:	431a      	orrs	r2, r3
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800adfc:	bf00      	nop
 800adfe:	372c      	adds	r7, #44	@ 0x2c
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	0800f260 	.word	0x0800f260
 800ae0c:	20001864 	.word	0x20001864

0800ae10 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800ae10:	b480      	push	{r7}
 800ae12:	b089      	sub	sp, #36	@ 0x24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	71fb      	strb	r3, [r7, #7]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	71bb      	strb	r3, [r7, #6]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	717b      	strb	r3, [r7, #5]
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ae26:	7c7b      	ldrb	r3, [r7, #17]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <edpt_disable+0x20>
    rhport = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ae30:	7c7b      	ldrb	r3, [r7, #17]
 800ae32:	4a5b      	ldr	r2, [pc, #364]	@ (800afa0 <edpt_disable+0x190>)
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	79bb      	ldrb	r3, [r7, #6]
 800ae3e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ae40:	7cbb      	ldrb	r3, [r7, #18]
 800ae42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae46:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800ae48:	76fb      	strb	r3, [r7, #27]
 800ae4a:	79bb      	ldrb	r3, [r7, #6]
 800ae4c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ae4e:	7cfb      	ldrb	r3, [r7, #19]
 800ae50:	09db      	lsrs	r3, r3, #7
 800ae52:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800ae54:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ae56:	7ebb      	ldrb	r3, [r7, #26]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	bf14      	ite	ne
 800ae5c:	2301      	movne	r3, #1
 800ae5e:	2300      	moveq	r3, #0
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	461a      	mov	r2, r3
 800ae64:	7efb      	ldrb	r3, [r7, #27]
 800ae66:	0112      	lsls	r2, r2, #4
 800ae68:	4413      	add	r3, r2
 800ae6a:	3348      	adds	r3, #72	@ 0x48
 800ae6c:	015b      	lsls	r3, r3, #5
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800ae74:	7ebb      	ldrb	r3, [r7, #26]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d149      	bne.n	800af0e <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800ae7a:	7efb      	ldrb	r3, [r7, #27]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <edpt_disable+0x78>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	db0d      	blt.n	800aea4 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	797a      	ldrb	r2, [r7, #5]
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	d002      	beq.n	800ae98 <edpt_disable+0x88>
 800ae92:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800ae96:	e001      	b.n	800ae9c <edpt_disable+0x8c>
 800ae98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e022      	b.n	800aeea <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800aeb0:	bf00      	nop
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f9      	beq.n	800aeb2 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	797a      	ldrb	r2, [r7, #5]
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d001      	beq.n	800aecc <edpt_disable+0xbc>
 800aec8:	4a36      	ldr	r2, [pc, #216]	@ (800afa4 <edpt_disable+0x194>)
 800aeca:	e001      	b.n	800aed0 <edpt_disable+0xc0>
 800aecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aed0:	431a      	orrs	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800aed6:	bf00      	nop
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0f9      	beq.n	800aed8 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2202      	movs	r2, #2
 800aee8:	609a      	str	r2, [r3, #8]
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	7efb      	ldrb	r3, [r7, #27]
 800aef0:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800aef2:	7afb      	ldrb	r3, [r7, #11]
 800aef4:	019b      	lsls	r3, r3, #6
 800aef6:	f043 0220 	orr.w	r2, r3, #32
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800aefe:	bf00      	nop
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f9      	bne.n	800af00 <edpt_disable+0xf0>
}
 800af0c:	e041      	b.n	800af92 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800af0e:	7efb      	ldrb	r3, [r7, #27]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <edpt_disable+0x10c>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	db0c      	blt.n	800af36 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	797a      	ldrb	r2, [r7, #5]
 800af22:	2a00      	cmp	r2, #0
 800af24:	d002      	beq.n	800af2c <edpt_disable+0x11c>
 800af26:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800af2a:	e000      	b.n	800af2e <edpt_disable+0x11e>
 800af2c:	2200      	movs	r2, #0
 800af2e:	431a      	orrs	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	e02d      	b.n	800af92 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800af46:	bf00      	nop
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0f9      	beq.n	800af48 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	797a      	ldrb	r2, [r7, #5]
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	d001      	beq.n	800af62 <edpt_disable+0x152>
 800af5e:	4a11      	ldr	r2, [pc, #68]	@ (800afa4 <edpt_disable+0x194>)
 800af60:	e001      	b.n	800af66 <edpt_disable+0x156>
 800af62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800af66:	431a      	orrs	r2, r3
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800af6c:	bf00      	nop
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f9      	beq.n	800af6e <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2202      	movs	r2, #2
 800af7e:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af86:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3724      	adds	r7, #36	@ 0x24
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	0800f260 	.word	0x0800f260
 800afa4:	40200000 	.word	0x40200000

0800afa8 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b090      	sub	sp, #64	@ 0x40
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]
 800afb2:	460b      	mov	r3, r1
 800afb4:	71bb      	strb	r3, [r7, #6]
 800afb6:	4613      	mov	r3, r2
 800afb8:	717b      	strb	r3, [r7, #5]
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800afc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <edpt_schedule_packets+0x26>
    rhport = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800afce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800afd2:	4a65      	ldr	r2, [pc, #404]	@ (800b168 <edpt_schedule_packets+0x1c0>)
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	4413      	add	r3, r2
 800afd8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800afda:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800afdc:	79ba      	ldrb	r2, [r7, #6]
 800afde:	797b      	ldrb	r3, [r7, #5]
 800afe0:	0052      	lsls	r2, r2, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	4a61      	ldr	r2, [pc, #388]	@ (800b16c <edpt_schedule_packets+0x1c4>)
 800afe8:	4413      	add	r3, r2
 800afea:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800afec:	797b      	ldrb	r3, [r7, #5]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	bf14      	ite	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	2300      	moveq	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	79bb      	ldrb	r3, [r7, #6]
 800affc:	0112      	lsls	r2, r2, #4
 800affe:	4413      	add	r3, r2
 800b000:	3348      	adds	r3, #72	@ 0x48
 800b002:	015b      	lsls	r3, r3, #5
 800b004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b006:	4413      	add	r3, r2
 800b008:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800b00a:	79bb      	ldrb	r3, [r7, #6]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11c      	bne.n	800b04a <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800b010:	797b      	ldrb	r3, [r7, #5]
 800b012:	4a57      	ldr	r2, [pc, #348]	@ (800b170 <edpt_schedule_packets+0x1c8>)
 800b014:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01a:	895b      	ldrh	r3, [r3, #10]
 800b01c:	853a      	strh	r2, [r7, #40]	@ 0x28
 800b01e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b020:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b022:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b024:	4293      	cmp	r3, r2
 800b026:	bf28      	it	cs
 800b028:	4613      	movcs	r3, r2
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800b02e:	797b      	ldrb	r3, [r7, #5]
 800b030:	4a4f      	ldr	r2, [pc, #316]	@ (800b170 <edpt_schedule_packets+0x1c8>)
 800b032:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b036:	797b      	ldrb	r3, [r7, #5]
 800b038:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b03a:	1a8a      	subs	r2, r1, r2
 800b03c:	b291      	uxth	r1, r2
 800b03e:	4a4c      	ldr	r2, [pc, #304]	@ (800b170 <edpt_schedule_packets+0x1c8>)
 800b040:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800b044:	2301      	movs	r3, #1
 800b046:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b048:	e014      	b.n	800b074 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800b04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04c:	891b      	ldrh	r3, [r3, #8]
 800b04e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800b050:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b054:	8952      	ldrh	r2, [r2, #10]
 800b056:	623b      	str	r3, [r7, #32]
 800b058:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800b05a:	6a3a      	ldr	r2, [r7, #32]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	4413      	add	r3, r2
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800b06a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800b070:	2301      	movs	r3, #1
 800b072:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800b078:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b07a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f362 0312 	bfi	r3, r2, #0, #19
 800b084:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800b086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	8afb      	ldrh	r3, [r7, #22]
 800b090:	f362 03cc 	bfi	r3, r2, #3, #10
 800b094:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09a:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800b0a2:	7cfb      	ldrb	r3, [r7, #19]
 800b0a4:	f043 0304 	orr.w	r3, r3, #4
 800b0a8:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800b0aa:	7cfb      	ldrb	r3, [r7, #19]
 800b0ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b0:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800b0b2:	7cbb      	ldrb	r3, [r7, #18]
 800b0b4:	f003 030c 	and.w	r3, r3, #12
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b04      	cmp	r3, #4
 800b0bc:	d11a      	bne.n	800b0f4 <edpt_schedule_packets+0x14c>
 800b0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c0:	7b1b      	ldrb	r3, [r3, #12]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d116      	bne.n	800b0f4 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b0cc:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800b0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800b0e2:	7cfb      	ldrb	r3, [r7, #19]
 800b0e4:	f043 0310 	orr.w	r3, r3, #16
 800b0e8:	74fb      	strb	r3, [r7, #19]
 800b0ea:	e003      	b.n	800b0f4 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800b0ec:	7cfb      	ldrb	r3, [r7, #19]
 800b0ee:	f043 0320 	orr.w	r3, r3, #32
 800b0f2:	74fb      	strb	r3, [r7, #19]
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0fc:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b0fe:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800b100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800b104:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d015      	beq.n	800b138 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b10c:	797b      	ldrb	r3, [r7, #5]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d109      	bne.n	800b126 <edpt_schedule_packets+0x17e>
 800b112:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800b118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7fd fd5c 	bl	8008bde <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800b126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800b136:	e013      	b.n	800b160 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b13e:	797b      	ldrb	r3, [r7, #5]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d10d      	bne.n	800b160 <edpt_schedule_packets+0x1b8>
 800b144:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b150:	79ba      	ldrb	r2, [r7, #6]
 800b152:	2101      	movs	r1, #1
 800b154:	fa01 f202 	lsl.w	r2, r1, r2
 800b158:	431a      	orrs	r2, r3
 800b15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800b160:	bf00      	nop
 800b162:	3740      	adds	r7, #64	@ 0x40
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	0800f260 	.word	0x0800f260
 800b16c:	20001864 	.word	0x20001864
 800b170:	200018e4 	.word	0x200018e4

0800b174 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	@ 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	6039      	str	r1, [r7, #0]
 800b17e:	71fb      	strb	r3, [r7, #7]
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <dcd_init+0x1a>
    rhport = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	4a43      	ldr	r2, [pc, #268]	@ (800b2a0 <dcd_init+0x12c>)
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	4413      	add	r3, r2
 800b196:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b198:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800b19a:	2208      	movs	r2, #8
 800b19c:	2100      	movs	r1, #0
 800b19e:	4841      	ldr	r0, [pc, #260]	@ (800b2a4 <dcd_init+0x130>)
 800b1a0:	f001 fe9d 	bl	800cede <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1a8:	f001 f9c6 	bl	800c538 <dwc2_core_is_highspeed>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1ba:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b1bc:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800b1be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800b1c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1c6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f001 f9d1 	bl	800c574 <dwc2_core_init>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f083 0301 	eor.w	r3, r3, #1
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <dcd_init+0x80>
 800b1de:	4b32      	ldr	r3, [pc, #200]	@ (800b2a8 <dcd_init+0x134>)
 800b1e0:	61fb      	str	r3, [r7, #28]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d000      	beq.n	800b1f0 <dcd_init+0x7c>
 800b1ee:	be00      	bkpt	0x0000
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e050      	b.n	800b296 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800b1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b1fa:	f023 0303 	bic.w	r3, r3, #3
 800b1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800b200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00d      	beq.n	800b224 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b20c:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800b20e:	7b3b      	ldrb	r3, [r7, #12]
 800b210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b80      	cmp	r3, #128	@ 0x80
 800b218:	d108      	bne.n	800b22c <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b222:	e003      	b.n	800b22c <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800b224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b226:	f043 0303 	orr.w	r3, r3, #3
 800b22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	f043 0304 	orr.w	r3, r3, #4
 800b232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b238:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f92a 	bl	800b498 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b24c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b252:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800b254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800b25c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800b264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b266:	699a      	ldr	r2, [r3, #24]
 800b268:	4b10      	ldr	r3, [pc, #64]	@ (800b2ac <dcd_init+0x138>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b26e:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800b270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b27c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	6a3a      	ldr	r2, [r7, #32]
 800b28a:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f8e0 	bl	800b454 <dcd_connect>
  return true;
 800b294:	2301      	movs	r3, #1
}
 800b296:	4618      	mov	r0, r3
 800b298:	3730      	adds	r7, #48	@ 0x30
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800f260 	.word	0x0800f260
 800b2a4:	200018e4 	.word	0x200018e4
 800b2a8:	e000edf0 	.word	0xe000edf0
 800b2ac:	80003804 	.word	0x80003804

0800b2b0 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	73fb      	strb	r3, [r7, #15]
 800b2be:	2301      	movs	r3, #1
 800b2c0:	73bb      	strb	r3, [r7, #14]
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b2fc <dcd_int_enable+0x4c>)
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b2d4:	7b7b      	ldrb	r3, [r7, #13]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800b2da:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff fb3e 	bl	800a960 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800b2e4:	e004      	b.n	800b2f0 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800b2e6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fb56 	bl	800a99c <__NVIC_DisableIRQ>
}
 800b2f0:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800b2f2:	bf00      	nop
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	0800f260 	.word	0x0800f260

0800b300 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	71fb      	strb	r3, [r7, #7]
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	2301      	movs	r3, #1
 800b310:	73bb      	strb	r3, [r7, #14]
 800b312:	2300      	movs	r3, #0
 800b314:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	4a0c      	ldr	r2, [pc, #48]	@ (800b34c <dcd_int_disable+0x4c>)
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	4413      	add	r3, r2
 800b31e:	3304      	adds	r3, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b324:	7b7b      	ldrb	r3, [r7, #13]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b32a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fb16 	bl	800a960 <__NVIC_EnableIRQ>
}
 800b334:	e004      	b.n	800b340 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b336:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff fb2e 	bl	800a99c <__NVIC_DisableIRQ>
}
 800b340:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	0800f260 	.word	0x0800f260

0800b350 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	460a      	mov	r2, r1
 800b35a:	71fb      	strb	r3, [r7, #7]
 800b35c:	4613      	mov	r3, r2
 800b35e:	71bb      	strb	r3, [r7, #6]
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b364:	7a7b      	ldrb	r3, [r7, #9]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <dcd_set_address+0x1e>
    rhport = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b36e:	7a7b      	ldrb	r3, [r7, #9]
 800b370:	4a14      	ldr	r2, [pc, #80]	@ (800b3c4 <dcd_set_address+0x74>)
 800b372:	011b      	lsls	r3, r3, #4
 800b374:	4413      	add	r3, r2
 800b376:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b378:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b380:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b384:	79bb      	ldrb	r3, [r7, #6]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	431a      	orrs	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b390:	2300      	movs	r3, #0
 800b392:	72fb      	strb	r3, [r7, #11]
 800b394:	2301      	movs	r3, #1
 800b396:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b398:	7abb      	ldrb	r3, [r7, #10]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <dcd_set_address+0x54>
 800b39e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b3a2:	e000      	b.n	800b3a6 <dcd_set_address+0x56>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	b25b      	sxtb	r3, r3
 800b3ae:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b3b0:	79f8      	ldrb	r0, [r7, #7]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f000 f98b 	bl	800b6d0 <dcd_edpt_xfer>
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800f260 	.word	0x0800f260

0800b3c8 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	4a19      	ldr	r2, [pc, #100]	@ (800b448 <dcd_remote_wakeup+0x80>)
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	4413      	add	r3, r2
 800b3e8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b3ea:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b3f2:	f043 0201 	orr.w	r2, r3, #1
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2208      	movs	r2, #8
 800b400:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	f043 0208 	orr.w	r2, r3, #8
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b40e:	4b0f      	ldr	r3, [pc, #60]	@ (800b44c <dcd_remote_wakeup+0x84>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a0f      	ldr	r2, [pc, #60]	@ (800b450 <dcd_remote_wakeup+0x88>)
 800b414:	fba2 2303 	umull	r2, r3, r2, r3
 800b418:	099b      	lsrs	r3, r3, #6
 800b41a:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b41c:	e000      	b.n	800b420 <dcd_remote_wakeup+0x58>
 800b41e:	bf00      	nop
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	1e5a      	subs	r2, r3, #1
 800b424:	613a      	str	r2, [r7, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1f9      	bne.n	800b41e <dcd_remote_wakeup+0x56>
}
 800b42a:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b432:	f023 0201 	bic.w	r2, r3, #1
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b43c:	bf00      	nop
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	0800f260 	.word	0x0800f260
 800b44c:	20000208 	.word	0x20000208
 800b450:	10624dd3 	.word	0x10624dd3

0800b454 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	71fb      	strb	r3, [r7, #7]
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <dcd_connect+0x18>
    rhport = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	4a09      	ldr	r2, [pc, #36]	@ (800b494 <dcd_connect+0x40>)
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	4413      	add	r3, r2
 800b474:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b476:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b47e:	f023 0202 	bic.w	r2, r3, #2
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	0800f260 	.word	0x0800f260

0800b498 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	71fb      	strb	r3, [r7, #7]
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <dcd_disconnect+0x18>
    rhport = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4b0:	7afb      	ldrb	r3, [r7, #11]
 800b4b2:	4a09      	ldr	r2, [pc, #36]	@ (800b4d8 <dcd_disconnect+0x40>)
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b4ba:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b4c2:	f043 0202 	orr.w	r2, r3, #2
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b4cc:	bf00      	nop
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	0800f260 	.word	0x0800f260

0800b4dc <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	460a      	mov	r2, r1
 800b4e6:	71fb      	strb	r3, [r7, #7]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	71bb      	strb	r3, [r7, #6]
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <dcd_sof_enable+0x1e>
    rhport = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	4a10      	ldr	r2, [pc, #64]	@ (800b540 <dcd_sof_enable+0x64>)
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	4413      	add	r3, r2
 800b502:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b504:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b506:	4a0f      	ldr	r2, [pc, #60]	@ (800b544 <dcd_sof_enable+0x68>)
 800b508:	79bb      	ldrb	r3, [r7, #6]
 800b50a:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b50c:	79bb      	ldrb	r3, [r7, #6]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2208      	movs	r2, #8
 800b516:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	f043 0208 	orr.w	r2, r3, #8
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b524:	e005      	b.n	800b532 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f023 0208 	bic.w	r2, r3, #8
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	619a      	str	r2, [r3, #24]
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	0800f260 	.word	0x0800f260
 800b544:	200018e4 	.word	0x200018e4

0800b548 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	7899      	ldrb	r1, [r3, #2]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	889b      	ldrh	r3, [r3, #4]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b566:	b29a      	uxth	r2, r3
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fa76 	bl	800aa5c <dfifo_alloc>
 800b570:	4603      	mov	r3, r0
 800b572:	f083 0301 	eor.w	r3, r3, #1
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <dcd_edpt_open+0x4a>
 800b57c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <dcd_edpt_open+0x60>)
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0301 	and.w	r3, r3, #1
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d000      	beq.n	800b58e <dcd_edpt_open+0x46>
 800b58c:	be00      	bkpt	0x0000
 800b58e:	2300      	movs	r3, #0
 800b590:	e005      	b.n	800b59e <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fb9c 	bl	800acd4 <edpt_activate>
  return true;
 800b59c:	2301      	movs	r3, #1
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	e000edf0 	.word	0xe000edf0

0800b5ac <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	@ 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	4a3f      	ldr	r2, [pc, #252]	@ (800b6c4 <dcd_edpt_close_all+0x118>)
 800b5c8:	011b      	lsls	r3, r3, #4
 800b5ca:	4413      	add	r3, r2
 800b5cc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b5ce:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	4a3c      	ldr	r2, [pc, #240]	@ (800b6c4 <dcd_edpt_close_all+0x118>)
 800b5d4:	011b      	lsls	r3, r3, #4
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3308      	adds	r3, #8
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b5de:	2000      	movs	r0, #0
 800b5e0:	f7fe fd4a 	bl	800a078 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b5e4:	4b38      	ldr	r3, [pc, #224]	@ (800b6c8 <dcd_edpt_close_all+0x11c>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b5f0:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5fa:	e034      	b.n	800b666 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b602:	e027      	b.n	800b654 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b604:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b60c:	0112      	lsls	r2, r2, #4
 800b60e:	4413      	add	r3, r2
 800b610:	3348      	adds	r3, #72	@ 0x48
 800b612:	015b      	lsls	r3, r3, #5
 800b614:	6a3a      	ldr	r2, [r7, #32]
 800b616:	4413      	add	r3, r2
 800b618:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	da05      	bge.n	800b62e <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b62e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b632:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b636:	f1c3 0301 	rsb	r3, r3, #1
 800b63a:	4924      	ldr	r1, [pc, #144]	@ (800b6cc <dcd_edpt_close_all+0x120>)
 800b63c:	0052      	lsls	r2, r2, #1
 800b63e:	4413      	add	r3, r2
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	440b      	add	r3, r1
 800b644:	330a      	adds	r3, #10
 800b646:	2200      	movs	r2, #0
 800b648:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b64a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b64e:	3301      	adds	r3, #1
 800b650:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d9d3      	bls.n	800b604 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b65c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b660:	3301      	adds	r3, #1
 800b662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b666:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b66a:	7ffb      	ldrb	r3, [r7, #31]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d3c5      	bcc.n	800b5fc <dcd_edpt_close_all+0x50>
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	2310      	movs	r3, #16
 800b676:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	019b      	lsls	r3, r3, #6
 800b67c:	f043 0220 	orr.w	r2, r3, #32
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b684:	bf00      	nop
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f9      	bne.n	800b686 <dcd_edpt_close_all+0xda>
}
 800b692:	bf00      	nop
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2210      	movs	r2, #16
 800b69c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b69e:	bf00      	nop
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0310 	and.w	r3, r3, #16
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1f9      	bne.n	800b6a0 <dcd_edpt_close_all+0xf4>
}
 800b6ac:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fab5 	bl	800ac20 <dfifo_device_init>

  usbd_spin_unlock(false);
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	f7fe fcf8 	bl	800a0ac <usbd_spin_unlock>
}
 800b6bc:	bf00      	nop
 800b6be:	3728      	adds	r7, #40	@ 0x28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	0800f260 	.word	0x0800f260
 800b6c8:	200018e4 	.word	0x200018e4
 800b6cc:	20001864 	.word	0x20001864

0800b6d0 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	603a      	str	r2, [r7, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4603      	mov	r3, r0
 800b6dc:	71fb      	strb	r3, [r7, #7]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	71bb      	strb	r3, [r7, #6]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	80bb      	strh	r3, [r7, #4]
 800b6e6:	79bb      	ldrb	r3, [r7, #6]
 800b6e8:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f0:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b6f2:	75bb      	strb	r3, [r7, #22]
 800b6f4:	79bb      	ldrb	r3, [r7, #6]
 800b6f6:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	09db      	lsrs	r3, r3, #7
 800b6fc:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b6fe:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b700:	7dba      	ldrb	r2, [r7, #22]
 800b702:	7d7b      	ldrb	r3, [r7, #21]
 800b704:	0052      	lsls	r2, r2, #1
 800b706:	4413      	add	r3, r2
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	4a17      	ldr	r2, [pc, #92]	@ (800b768 <dcd_edpt_xfer+0x98>)
 800b70c:	4413      	add	r3, r2
 800b70e:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b710:	2000      	movs	r0, #0
 800b712:	f7fe fcb1 	bl	800a078 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	895b      	ldrh	r3, [r3, #10]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b71e:	2300      	movs	r3, #0
 800b720:	75fb      	strb	r3, [r7, #23]
 800b722:	e018      	b.n	800b756 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2200      	movs	r2, #0
 800b72e:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	88ba      	ldrh	r2, [r7, #4]
 800b734:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b736:	7dbb      	ldrb	r3, [r7, #22]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d104      	bne.n	800b746 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b73c:	7d7b      	ldrb	r3, [r7, #21]
 800b73e:	490b      	ldr	r1, [pc, #44]	@ (800b76c <dcd_edpt_xfer+0x9c>)
 800b740:	88ba      	ldrh	r2, [r7, #4]
 800b742:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b746:	7d7a      	ldrb	r2, [r7, #21]
 800b748:	7db9      	ldrb	r1, [r7, #22]
 800b74a:	79fb      	ldrb	r3, [r7, #7]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fc2b 	bl	800afa8 <edpt_schedule_packets>
    ret = true;
 800b752:	2301      	movs	r3, #1
 800b754:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b756:	2000      	movs	r0, #0
 800b758:	f7fe fca8 	bl	800a0ac <usbd_spin_unlock>

  return ret;
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20001864 	.word	0x20001864
 800b76c:	200018e4 	.word	0x200018e4

0800b770 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	460a      	mov	r2, r1
 800b77a:	71fb      	strb	r3, [r7, #7]
 800b77c:	4613      	mov	r3, r2
 800b77e:	71bb      	strb	r3, [r7, #6]
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b784:	7cbb      	ldrb	r3, [r7, #18]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b78e:	7cbb      	ldrb	r3, [r7, #18]
 800b790:	4a11      	ldr	r2, [pc, #68]	@ (800b7d8 <dcd_edpt_stall+0x68>)
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	4413      	add	r3, r2
 800b796:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b798:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b79a:	79b9      	ldrb	r1, [r7, #6]
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff fb35 	bl	800ae10 <edpt_disable>
 800b7a6:	79bb      	ldrb	r3, [r7, #6]
 800b7a8:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b7aa:	7cfb      	ldrb	r3, [r7, #19]
 800b7ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7b0:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10b      	bne.n	800b7ce <dcd_edpt_stall+0x5e>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7be:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b7c0:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff f90b 	bl	800a9e4 <dma_setup_prepare>
  }
}
 800b7ce:	bf00      	nop
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800f260 	.word	0x0800f260

0800b7dc <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	460a      	mov	r2, r1
 800b7e6:	71fb      	strb	r3, [r7, #7]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	71bb      	strb	r3, [r7, #6]
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7f0:	7a7b      	ldrb	r3, [r7, #9]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b7fa:	7a7b      	ldrb	r3, [r7, #9]
 800b7fc:	4a19      	ldr	r2, [pc, #100]	@ (800b864 <dcd_edpt_clear_stall+0x88>)
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	4413      	add	r3, r2
 800b802:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	79bb      	ldrb	r3, [r7, #6]
 800b808:	72bb      	strb	r3, [r7, #10]
 800b80a:	7abb      	ldrb	r3, [r7, #10]
 800b80c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b810:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b812:	74fb      	strb	r3, [r7, #19]
 800b814:	79bb      	ldrb	r3, [r7, #6]
 800b816:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b818:	7afb      	ldrb	r3, [r7, #11]
 800b81a:	09db      	lsrs	r3, r3, #7
 800b81c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b81e:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b820:	7cbb      	ldrb	r3, [r7, #18]
 800b822:	2b01      	cmp	r3, #1
 800b824:	bf14      	ite	ne
 800b826:	2301      	movne	r3, #1
 800b828:	2300      	moveq	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	7cfb      	ldrb	r3, [r7, #19]
 800b830:	0112      	lsls	r2, r2, #4
 800b832:	4413      	add	r3, r2
 800b834:	3348      	adds	r3, #72	@ 0x48
 800b836:	015b      	lsls	r3, r3, #5
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	4413      	add	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	601a      	str	r2, [r3, #0]
}
 800b856:	bf00      	nop
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	0800f260 	.word	0x0800f260

0800b868 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08e      	sub	sp, #56	@ 0x38
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	71fb      	strb	r3, [r7, #7]
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <handle_bus_reset+0x1e>
    rhport = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b88a:	4a6a      	ldr	r2, [pc, #424]	@ (800ba34 <handle_bus_reset+0x1cc>)
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	4413      	add	r3, r2
 800b890:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b892:	633b      	str	r3, [r7, #48]	@ 0x30
 800b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b896:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b89c:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b89e:	7a7b      	ldrb	r3, [r7, #9]
 800b8a0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b8ae:	2280      	movs	r2, #128	@ 0x80
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4861      	ldr	r0, [pc, #388]	@ (800ba38 <handle_bus_reset+0x1d0>)
 800b8b4:	f001 fb13 	bl	800cede <memset>

  _dcd_data.sof_en = false;
 800b8b8:	4b60      	ldr	r3, [pc, #384]	@ (800ba3c <handle_bus_reset+0x1d4>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b8be:	4b5f      	ldr	r3, [pc, #380]	@ (800ba3c <handle_bus_reset+0x1d4>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8ca:	e014      	b.n	800b8f6 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b8cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8d2:	3358      	adds	r3, #88	@ 0x58
 800b8d4:	015b      	lsls	r3, r3, #5
 800b8d6:	4413      	add	r3, r2
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8de:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b8e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8e4:	3358      	adds	r3, #88	@ 0x58
 800b8e6:	015b      	lsls	r3, r3, #5
 800b8e8:	440b      	add	r3, r1
 800b8ea:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b8ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8f6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d3e4      	bcc.n	800b8cc <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b902:	2300      	movs	r3, #0
 800b904:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b908:	e01d      	b.n	800b946 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b90a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b90e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b910:	3348      	adds	r3, #72	@ 0x48
 800b912:	015b      	lsls	r3, r3, #5
 800b914:	4413      	add	r3, r2
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	da0f      	bge.n	800b93c <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b91c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b922:	3348      	adds	r3, #72	@ 0x48
 800b924:	015b      	lsls	r3, r3, #5
 800b926:	4413      	add	r3, r2
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b92e:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b932:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b934:	3348      	adds	r3, #72	@ 0x48
 800b936:	015b      	lsls	r3, r3, #5
 800b938:	440b      	add	r3, r1
 800b93a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b93c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b940:	3301      	adds	r3, #1
 800b942:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b946:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b94a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b94e:	429a      	cmp	r2, r3
 800b950:	d3db      	bcc.n	800b90a <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b954:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b958:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95e:	2209      	movs	r2, #9
 800b960:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	2209      	movs	r2, #9
 800b968:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96e:	61bb      	str	r3, [r7, #24]
 800b970:	2310      	movs	r3, #16
 800b972:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	019b      	lsls	r3, r3, #6
 800b978:	f043 0220 	orr.w	r2, r3, #32
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b980:	bf00      	nop
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f9      	bne.n	800b982 <handle_bus_reset+0x11a>
}
 800b98e:	bf00      	nop
 800b990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b992:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	2210      	movs	r2, #16
 800b998:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b99a:	bf00      	nop
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	f003 0310 	and.w	r3, r3, #16
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1f9      	bne.n	800b99c <handle_bus_reset+0x134>
}
 800b9a8:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff f937 	bl	800ac20 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b9b8:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b9ba:	8a3b      	ldrh	r3, [r7, #16]
 800b9bc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b9c0:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9cc:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b9d0:	f023 0203 	bic.w	r2, r3, #3
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b9e0:	f023 0203 	bic.w	r2, r3, #3
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <handle_bus_reset+0x1d0>)
 800b9ec:	2240      	movs	r2, #64	@ 0x40
 800b9ee:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b9f0:	4b11      	ldr	r3, [pc, #68]	@ (800ba38 <handle_bus_reset+0x1d0>)
 800b9f2:	2240      	movs	r2, #64	@ 0x40
 800b9f4:	835a      	strh	r2, [r3, #26]
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9fe:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ba00:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe ffeb 	bl	800a9e4 <dma_setup_prepare>
 800ba0e:	e007      	b.n	800ba20 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba12:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800ba16:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800ba20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800ba28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2a:	619a      	str	r2, [r3, #24]
}
 800ba2c:	bf00      	nop
 800ba2e:	3738      	adds	r7, #56	@ 0x38
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	0800f260 	.word	0x0800f260
 800ba38:	20001864 	.word	0x20001864
 800ba3c:	200018e4 	.word	0x200018e4

0800ba40 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	@ 0x28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	71fb      	strb	r3, [r7, #7]
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba4e:	7ffb      	ldrb	r3, [r7, #31]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <handle_enum_done+0x18>
    rhport = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba58:	7ffb      	ldrb	r3, [r7, #31]
 800ba5a:	4a1b      	ldr	r2, [pc, #108]	@ (800bac8 <handle_enum_done+0x88>)
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	4413      	add	r3, r2
 800ba60:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800ba62:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ba6a:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800ba6c:	7e3b      	ldrb	r3, [r7, #24]
 800ba6e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <handle_enum_done+0x3e>
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d004      	beq.n	800ba86 <handle_enum_done+0x46>
 800ba7c:	e007      	b.n	800ba8e <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800ba7e:	2302      	movs	r3, #2
 800ba80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba84:	e007      	b.n	800ba96 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800ba86:	2301      	movs	r3, #1
 800ba88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba8c:	e003      	b.n	800ba96 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba94:	bf00      	nop
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	77bb      	strb	r3, [r7, #30]
 800ba9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba9e:	777b      	strb	r3, [r7, #29]
 800baa0:	2301      	movs	r3, #1
 800baa2:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800baa4:	7fbb      	ldrb	r3, [r7, #30]
 800baa6:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800baa8:	2301      	movs	r3, #1
 800baaa:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800baac:	7f7b      	ldrb	r3, [r7, #29]
 800baae:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800bab0:	7f3a      	ldrb	r2, [r7, #28]
 800bab2:	f107 030c 	add.w	r3, r7, #12
 800bab6:	4611      	mov	r1, r2
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe f8df 	bl	8009c7c <dcd_event_handler>
}
 800babe:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800bac0:	bf00      	nop
 800bac2:	3728      	adds	r7, #40	@ 0x28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	0800f260 	.word	0x0800f260

0800bacc <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08c      	sub	sp, #48	@ 0x30
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	71fb      	strb	r3, [r7, #7]
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bada:	7cfb      	ldrb	r3, [r7, #19]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bae4:	7cfb      	ldrb	r3, [r7, #19]
 800bae6:	4a49      	ldr	r2, [pc, #292]	@ (800bc0c <handle_rxflvl_irq+0x140>)
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	4413      	add	r3, r2
 800baec:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800baee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baf6:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800baf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800bafe:	7b3b      	ldrb	r3, [r7, #12]
 800bb00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800bb0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb0e:	3358      	adds	r3, #88	@ 0x58
 800bb10:	015b      	lsls	r3, r3, #5
 800bb12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb14:	4413      	add	r3, r2
 800bb16:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	3b01      	subs	r3, #1
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d86a      	bhi.n	800bbfc <handle_rxflvl_irq+0x130>
 800bb26:	a201      	add	r2, pc, #4	@ (adr r2, 800bb2c <handle_rxflvl_irq+0x60>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bbfd 	.word	0x0800bbfd
 800bb30:	0800bb6b 	.word	0x0800bb6b
 800bb34:	0800bbfd 	.word	0x0800bbfd
 800bb38:	0800bb5d 	.word	0x0800bb5d
 800bb3c:	0800bbfd 	.word	0x0800bbfd
 800bb40:	0800bb45 	.word	0x0800bb45
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800bb44:	4b32      	ldr	r3, [pc, #200]	@ (800bc10 <handle_rxflvl_irq+0x144>)
 800bb46:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	3304      	adds	r3, #4
 800bb54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb56:	6812      	ldr	r2, [r2, #0]
 800bb58:	601a      	str	r2, [r3, #0]
      break;
 800bb5a:	e052      	b.n	800bc02 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	611a      	str	r2, [r3, #16]
      break;
 800bb68:	e04b      	b.n	800bc02 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800bb6a:	89bb      	ldrh	r3, [r7, #12]
 800bb6c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800bb74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb78:	015b      	lsls	r3, r3, #5
 800bb7a:	4a26      	ldr	r2, [pc, #152]	@ (800bc14 <handle_rxflvl_irq+0x148>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800bb80:	8b7b      	ldrh	r3, [r7, #26]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d03c      	beq.n	800bc00 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d007      	beq.n	800bb9e <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	8b7a      	ldrh	r2, [r7, #26]
 800bb94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fc ff7e 	bl	8008a98 <tu_fifo_write_n_const_addr_full_words>
 800bb9c:	e00c      	b.n	800bbb8 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	8b7a      	ldrh	r2, [r7, #26]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bba8:	f000 fd70 	bl	800c68c <dfifo_read_packet>
          xfer->buffer += byte_count;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	8b7b      	ldrh	r3, [r7, #26]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	895b      	ldrh	r3, [r3, #10]
 800bbbc:	8b7a      	ldrh	r2, [r7, #26]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d21e      	bcs.n	800bc00 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	891a      	ldrh	r2, [r3, #8]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800bbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	891a      	ldrh	r2, [r3, #8]
 800bbe8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc18 <handle_rxflvl_irq+0x14c>)
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800bbf4:	4b08      	ldr	r3, [pc, #32]	@ (800bc18 <handle_rxflvl_irq+0x14c>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800bbfa:	e001      	b.n	800bc00 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800bbfc:	bf00      	nop
 800bbfe:	e000      	b.n	800bc02 <handle_rxflvl_irq+0x136>
      break;
 800bc00:	bf00      	nop
  }
}
 800bc02:	bf00      	nop
 800bc04:	3730      	adds	r7, #48	@ 0x30
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0800f260 	.word	0x0800f260
 800bc10:	200018ec 	.word	0x200018ec
 800bc14:	20001864 	.word	0x20001864
 800bc18:	200018e4 	.word	0x200018e4

0800bc1c <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08e      	sub	sp, #56	@ 0x38
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	603a      	str	r2, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800bc2c:	783b      	ldrb	r3, [r7, #0]
 800bc2e:	f003 0308 	and.w	r3, r3, #8
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01c      	beq.n	800bc72 <handle_epout_slave+0x56>
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800bc3e:	4b34      	ldr	r3, [pc, #208]	@ (800bd10 <handle_epout_slave+0xf4>)
 800bc40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bc48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bc4c:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800bc4e:	2306      	movs	r3, #6
 800bc50:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800bc52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc54:	f107 0318 	add.w	r3, r7, #24
 800bc58:	6810      	ldr	r0, [r2, #0]
 800bc5a:	6851      	ldr	r1, [r2, #4]
 800bc5c:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800bc5e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800bc62:	f107 0314 	add.w	r3, r7, #20
 800bc66:	4611      	mov	r1, r2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe f807 	bl	8009c7c <dcd_event_handler>
}
 800bc6e:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800bc70:	e04a      	b.n	800bd08 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800bc72:	783b      	ldrb	r3, [r7, #0]
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d044      	beq.n	800bd08 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800bc7e:	783b      	ldrb	r3, [r7, #0]
 800bc80:	f003 0320 	and.w	r3, r3, #32
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d13e      	bne.n	800bd08 <handle_epout_slave+0xec>
 800bc8a:	787b      	ldrb	r3, [r7, #1]
 800bc8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d138      	bne.n	800bd08 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800bc96:	79bb      	ldrb	r3, [r7, #6]
 800bc98:	015b      	lsls	r3, r3, #5
 800bc9a:	4a1e      	ldr	r2, [pc, #120]	@ (800bd14 <handle_epout_slave+0xf8>)
 800bc9c:	4413      	add	r3, r2
 800bc9e:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800bca0:	79bb      	ldrb	r3, [r7, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <handle_epout_slave+0xa0>
 800bca6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd18 <handle_epout_slave+0xfc>)
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d006      	beq.n	800bcbc <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800bcae:	79b9      	ldrb	r1, [r7, #6]
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff f977 	bl	800afa8 <edpt_schedule_packets>
 800bcba:	e025      	b.n	800bd08 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bcbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbe:	891b      	ldrh	r3, [r3, #8]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bcc8:	79bb      	ldrb	r3, [r7, #6]
 800bcca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bcce:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bcdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bce0:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bce2:	2307      	movs	r3, #7
 800bce4:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800bce6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bcea:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800bcf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bcf4:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800bcf6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bcfa:	f107 0308 	add.w	r3, r7, #8
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd ffbb 	bl	8009c7c <dcd_event_handler>
}
 800bd06:	bf00      	nop
      }
    }
  }
}
 800bd08:	3738      	adds	r7, #56	@ 0x38
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	200018ec 	.word	0x200018ec
 800bd14:	20001864 	.word	0x20001864
 800bd18:	200018e4 	.word	0x200018e4

0800bd1c <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b092      	sub	sp, #72	@ 0x48
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	603a      	str	r2, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	71bb      	strb	r3, [r7, #6]
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bd32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <handle_epin_slave+0x24>
    rhport = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bd40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd44:	4a64      	ldr	r2, [pc, #400]	@ (800bed8 <handle_epin_slave+0x1bc>)
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	4413      	add	r3, r2
 800bd4a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bd4c:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800bd4e:	79bb      	ldrb	r3, [r7, #6]
 800bd50:	3348      	adds	r3, #72	@ 0x48
 800bd52:	015b      	lsls	r3, r3, #5
 800bd54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd56:	4413      	add	r3, r2
 800bd58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800bd5a:	79bb      	ldrb	r3, [r7, #6]
 800bd5c:	015b      	lsls	r3, r3, #5
 800bd5e:	3310      	adds	r3, #16
 800bd60:	4a5e      	ldr	r2, [pc, #376]	@ (800bedc <handle_epin_slave+0x1c0>)
 800bd62:	4413      	add	r3, r2
 800bd64:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800bd66:	783b      	ldrb	r3, [r7, #0]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d037      	beq.n	800bde2 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800bd72:	79bb      	ldrb	r3, [r7, #6]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <handle_epin_slave+0x72>
 800bd78:	4b59      	ldr	r3, [pc, #356]	@ (800bee0 <handle_epin_slave+0x1c4>)
 800bd7a:	885b      	ldrh	r3, [r3, #2]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d006      	beq.n	800bd8e <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800bd80:	79b9      	ldrb	r1, [r7, #6]
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	2201      	movs	r2, #1
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff f90e 	bl	800afa8 <edpt_schedule_packets>
 800bd8c:	e029      	b.n	800bde2 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bd8e:	79bb      	ldrb	r3, [r7, #6]
 800bd90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd94:	b2d9      	uxtb	r1, r3
 800bd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd98:	891b      	ldrh	r3, [r3, #8]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bda2:	460b      	mov	r3, r1
 800bda4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bda8:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800bdb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bdba:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bdbc:	2307      	movs	r3, #7
 800bdbe:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800bdc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bdc4:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800bdca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bdce:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800bdd0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bdd4:	f107 0310 	add.w	r3, r7, #16
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fd ff4e 	bl	8009c7c <dcd_event_handler>
}
 800bde0:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800bde2:	783b      	ldrb	r3, [r7, #0]
 800bde4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d070      	beq.n	800bed0 <handle_epin_slave+0x1b4>
 800bdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bdf4:	79ba      	ldrb	r2, [r7, #6]
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	fa01 f202 	lsl.w	r2, r1, r2
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d066      	beq.n	800bed0 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800be02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800be08:	89fb      	ldrh	r3, [r7, #14]
 800be0a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800be0e:	b29b      	uxth	r3, r3
 800be10:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800be12:	2300      	movs	r3, #0
 800be14:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be18:	e03f      	b.n	800be9a <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800be1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be26:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	895a      	ldrh	r2, [r3, #10]
 800be2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800be2e:	843b      	strh	r3, [r7, #32]
 800be30:	4613      	mov	r3, r2
 800be32:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800be34:	8c3a      	ldrh	r2, [r7, #32]
 800be36:	8bfb      	ldrh	r3, [r7, #30]
 800be38:	4293      	cmp	r3, r2
 800be3a:	bf28      	it	cs
 800be3c:	4613      	movcs	r3, r2
 800be3e:	b29b      	uxth	r3, r3
 800be40:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800be42:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800be44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	0099      	lsls	r1, r3, #2
 800be4a:	4b26      	ldr	r3, [pc, #152]	@ (800bee4 <handle_epin_slave+0x1c8>)
 800be4c:	400b      	ands	r3, r1
 800be4e:	429a      	cmp	r2, r3
 800be50:	d829      	bhi.n	800bea6 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00d      	beq.n	800be76 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800be5a:	79bb      	ldrb	r3, [r7, #6]
 800be5c:	3301      	adds	r3, #1
 800be5e:	031b      	lsls	r3, r3, #12
 800be60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be62:	4413      	add	r3, r2
 800be64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800be6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fc fdab 	bl	80089ca <tu_fifo_read_n_const_addr_full_words>
 800be74:	e00c      	b.n	800be90 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800be76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be7c:	79b9      	ldrb	r1, [r7, #6]
 800be7e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800be80:	f000 fc55 	bl	800c72e <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800be84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be8a:	441a      	add	r2, r3
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800be90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be94:	3301      	adds	r3, #1
 800be96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be9a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d3ba      	bcc.n	800be1a <handle_epin_slave+0xfe>
 800bea4:	e000      	b.n	800bea8 <handle_epin_slave+0x18c>
        break;
 800bea6:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800bea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10b      	bne.n	800bed0 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800beb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beba:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bebe:	79ba      	ldrb	r2, [r7, #6]
 800bec0:	2101      	movs	r1, #1
 800bec2:	fa01 f202 	lsl.w	r2, r1, r2
 800bec6:	43d2      	mvns	r2, r2
 800bec8:	401a      	ands	r2, r3
 800beca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800becc:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800bed0:	bf00      	nop
 800bed2:	3748      	adds	r7, #72	@ 0x48
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	0800f260 	.word	0x0800f260
 800bedc:	20001864 	.word	0x20001864
 800bee0:	200018e4 	.word	0x200018e4
 800bee4:	0003fffc 	.word	0x0003fffc

0800bee8 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08e      	sub	sp, #56	@ 0x38
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	460a      	mov	r2, r1
 800bef2:	71fb      	strb	r3, [r7, #7]
 800bef4:	4613      	mov	r3, r2
 800bef6:	71bb      	strb	r3, [r7, #6]
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800befc:	7efb      	ldrb	r3, [r7, #27]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <handle_ep_irq+0x1e>
    rhport = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bf06:	7efb      	ldrb	r3, [r7, #27]
 800bf08:	4a38      	ldr	r2, [pc, #224]	@ (800bfec <handle_ep_irq+0x104>)
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	4413      	add	r3, r2
 800bf0e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bf10:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf1a:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bf1c:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800bf1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf24:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf2a:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800bf2c:	7c7b      	ldrb	r3, [r7, #17]
 800bf2e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800bf38:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800bf3c:	79bb      	ldrb	r3, [r7, #6]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <handle_ep_irq+0x5e>
 800bf42:	2300      	movs	r3, #0
 800bf44:	e000      	b.n	800bf48 <handle_ep_irq+0x60>
 800bf46:	2310      	movs	r3, #16
 800bf48:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800bf4c:	79bb      	ldrb	r3, [r7, #6]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	bf14      	ite	ne
 800bf52:	2301      	movne	r3, #1
 800bf54:	2300      	moveq	r3, #0
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	025b      	lsls	r3, r3, #9
 800bf5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf60:	4413      	add	r3, r2
 800bf62:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bf64:	2300      	movs	r3, #0
 800bf66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf6a:	e034      	b.n	800bfd6 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bf72:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bf76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf7a:	440b      	add	r3, r1
 800bf7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d021      	beq.n	800bfcc <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bf88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf8c:	015b      	lsls	r3, r3, #5
 800bf8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf90:	4413      	add	r3, r2
 800bf92:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9e:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800bfa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d111      	bne.n	800bfcc <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bfa8:	79bb      	ldrb	r3, [r7, #6]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d107      	bne.n	800bfbe <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800bfae:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff feb0 	bl	800bd1c <handle_epin_slave>
 800bfbc:	e006      	b.n	800bfcc <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bfbe:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff fe28 	bl	800bc1c <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bfcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bfd6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bfda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d3c4      	bcc.n	800bf6c <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	3738      	adds	r7, #56	@ 0x38
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	0800f260 	.word	0x0800f260

0800bff0 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b098      	sub	sp, #96	@ 0x60
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]
 800bffa:	79fb      	ldrb	r3, [r7, #7]
 800bffc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c000:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <dcd_int_handler+0x1e>
    rhport = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c00e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c012:	4a80      	ldr	r2, [pc, #512]	@ (800c214 <dcd_int_handler+0x224>)
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4413      	add	r3, r2
 800c018:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c01a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800c01c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800c022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c028:	4013      	ands	r3, r2
 800c02a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800c02c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c02e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00d      	beq.n	800c052 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800c036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c038:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c03c:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800c03e:	2001      	movs	r0, #1
 800c040:	f7fe f81a 	bl	800a078 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800c044:	79fb      	ldrb	r3, [r7, #7]
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff fc0e 	bl	800b868 <handle_bus_reset>
    usbd_spin_unlock(true);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f7fe f82d 	bl	800a0ac <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800c052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d007      	beq.n	800c06c <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800c05c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c05e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c062:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800c064:	79fb      	ldrb	r3, [r7, #7]
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fcea 	bl	800ba40 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800c06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c06e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c072:	2b00      	cmp	r3, #0
 800c074:	d01d      	beq.n	800c0b2 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800c076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c078:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c07c:	615a      	str	r2, [r3, #20]
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800c084:	2304      	movs	r3, #4
 800c086:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800c08a:	2301      	movs	r3, #1
 800c08c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800c090:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c094:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800c098:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800c09c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800c0a0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800c0a4:	f107 0320 	add.w	r3, r7, #32
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fd fde6 	bl	8009c7c <dcd_event_handler>
}
 800c0b0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800c0b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	da1d      	bge.n	800c0f4 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800c0b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0be:	615a      	str	r2, [r3, #20]
 800c0c0:	79fb      	ldrb	r3, [r7, #7]
 800c0c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c0c6:	2305      	movs	r3, #5
 800c0c8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800c0d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c0d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800c0da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800c0e2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c0e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fd fdc5 	bl	8009c7c <dcd_event_handler>
}
 800c0f2:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800c0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f6:	f003 0304 	and.w	r3, r3, #4
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d022      	beq.n	800c144 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800c0fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800c104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d017      	beq.n	800c13e <dcd_int_handler+0x14e>
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800c114:	2302      	movs	r3, #2
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800c120:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800c124:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800c126:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c12a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800c12c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	4611      	mov	r1, r2
 800c136:	4618      	mov	r0, r3
 800c138:	f7fd fda0 	bl	8009c7c <dcd_event_handler>
}
 800c13c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800c13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c142:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800c144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c146:	f003 0308 	and.w	r3, r3, #8
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d02e      	beq.n	800c1ac <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800c14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c150:	2208      	movs	r2, #8
 800c152:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800c154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c156:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800c15a:	0a1b      	lsrs	r3, r3, #8
 800c15c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c160:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800c162:	4b2d      	ldr	r3, [pc, #180]	@ (800c218 <dcd_int_handler+0x228>)
 800c164:	79db      	ldrb	r3, [r3, #7]
 800c166:	f083 0301 	eor.w	r3, r3, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800c170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	f023 0208 	bic.w	r2, r3, #8
 800c178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c17a:	619a      	str	r2, [r3, #24]
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c186:	2301      	movs	r3, #1
 800c188:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800c18c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800c190:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800c192:	2303      	movs	r3, #3
 800c194:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800c196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c198:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800c19a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd fd69 	bl	8009c7c <dcd_event_handler>
}
 800c1aa:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800c1ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ae:	f003 0310 	and.w	r3, r3, #16
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d015      	beq.n	800c1e2 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800c1b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	f023 0210 	bic.w	r2, r3, #16
 800c1be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1c0:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff fc81 	bl	800bacc <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800c1ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	f003 0310 	and.w	r3, r3, #16
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1f5      	bne.n	800c1c2 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800c1d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	f043 0210 	orr.w	r2, r3, #16
 800c1de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1e0:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800c1e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff fe79 	bl	800bee8 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800c1f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d004      	beq.n	800c20a <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	2101      	movs	r1, #1
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fe6f 	bl	800bee8 <handle_ep_irq>
  }
}
 800c20a:	bf00      	nop
 800c20c:	3760      	adds	r7, #96	@ 0x60
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	0800f260 	.word	0x0800f260
 800c218:	200018e4 	.word	0x200018e4

0800c21c <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d106      	bne.n	800c23c <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c232:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800c23a:	e005      	b.n	800c248 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c240:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d152      	bne.n	800c30c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800c266:	4b2c      	ldr	r3, [pc, #176]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a2c      	ldr	r2, [pc, #176]	@ (800c31c <dwc2_phy_update+0xc8>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d302      	bcc.n	800c276 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800c270:	2306      	movs	r3, #6
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e041      	b.n	800c2fa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800c276:	4b28      	ldr	r3, [pc, #160]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a29      	ldr	r2, [pc, #164]	@ (800c320 <dwc2_phy_update+0xcc>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d902      	bls.n	800c286 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800c280:	2307      	movs	r3, #7
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e039      	b.n	800c2fa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800c286:	4b24      	ldr	r3, [pc, #144]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a26      	ldr	r2, [pc, #152]	@ (800c324 <dwc2_phy_update+0xd0>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d302      	bcc.n	800c296 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800c290:	2308      	movs	r3, #8
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e031      	b.n	800c2fa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800c296:	4b20      	ldr	r3, [pc, #128]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a23      	ldr	r2, [pc, #140]	@ (800c328 <dwc2_phy_update+0xd4>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d902      	bls.n	800c2a6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800c2a0:	2309      	movs	r3, #9
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	e029      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800c2a6:	4b1c      	ldr	r3, [pc, #112]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a20      	ldr	r2, [pc, #128]	@ (800c32c <dwc2_phy_update+0xd8>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d902      	bls.n	800c2b6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800c2b0:	230a      	movs	r3, #10
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	e021      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800c2b6:	4b18      	ldr	r3, [pc, #96]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a1d      	ldr	r2, [pc, #116]	@ (800c330 <dwc2_phy_update+0xdc>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d902      	bls.n	800c2c6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800c2c0:	230b      	movs	r3, #11
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	e019      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800c2c6:	4b14      	ldr	r3, [pc, #80]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a1a      	ldr	r2, [pc, #104]	@ (800c334 <dwc2_phy_update+0xe0>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d302      	bcc.n	800c2d6 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800c2d0:	230c      	movs	r3, #12
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e011      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800c2d6:	4b10      	ldr	r3, [pc, #64]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a17      	ldr	r2, [pc, #92]	@ (800c338 <dwc2_phy_update+0xe4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d302      	bcc.n	800c2e6 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800c2e0:	230d      	movs	r3, #13
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e009      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c318 <dwc2_phy_update+0xc4>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a14      	ldr	r2, [pc, #80]	@ (800c33c <dwc2_phy_update+0xe8>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d302      	bcc.n	800c2f6 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800c2f0:	230e      	movs	r3, #14
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	e001      	b.n	800c2fa <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800c2f6:	230f      	movs	r3, #15
 800c2f8:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	029b      	lsls	r3, r3, #10
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	60da      	str	r2, [r3, #12]
  }
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	20000208 	.word	0x20000208
 800c31c:	01e84800 	.word	0x01e84800
 800c320:	01a39ddf 	.word	0x01a39ddf
 800c324:	016e3600 	.word	0x016e3600
 800c328:	014ca43f 	.word	0x014ca43f
 800c32c:	01312cff 	.word	0x01312cff
 800c330:	011a499f 	.word	0x011a499f
 800c334:	01067380 	.word	0x01067380
 800c338:	00f42400 	.word	0x00f42400
 800c33c:	00e4e1c0 	.word	0x00e4e1c0

0800c340 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	f043 0201 	orr.w	r2, r3, #1
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c358:	b29b      	uxth	r3, r3
 800c35a:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c35e:	4293      	cmp	r3, r2
 800c360:	d807      	bhi.n	800c372 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c362:	bf00      	nop
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f9      	bne.n	800c364 <reset_core+0x24>
 800c370:	e010      	b.n	800c394 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c372:	bf00      	nop
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0f9      	beq.n	800c374 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c388:	f023 0301 	bic.w	r3, r3, #1
 800c38c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c394:	bf00      	nop
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dafb      	bge.n	800c396 <reset_core+0x56>
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff ff26 	bl	800c21c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff ffb5 	bl	800c340 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c3dc:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c3e4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff ff30 	bl	800c254 <dwc2_phy_update>
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c40e:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c414:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c41c:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c41e:	7c3b      	ldrb	r3, [r7, #16]
 800c420:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b80      	cmp	r3, #128	@ 0x80
 800c428:	d114      	bne.n	800c454 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	f043 0310 	orr.w	r3, r3, #16
 800c430:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f023 0308 	bic.w	r3, r3, #8
 800c438:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c440:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c448:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c450:	617b      	str	r3, [r7, #20]
 800c452:	e012      	b.n	800c47a <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f023 0310 	bic.w	r3, r3, #16
 800c45a:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c45c:	7b7b      	ldrb	r3, [r7, #13]
 800c45e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f043 0308 	orr.w	r3, r3, #8
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e003      	b.n	800c47a <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f023 0308 	bic.w	r3, r3, #8
 800c478:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c480:	7c3b      	ldrb	r3, [r7, #16]
 800c482:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c486:	b2db      	uxtb	r3, r3
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff fec6 	bl	800c21c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff ff55 	bl	800c340 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c49c:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c49e:	7b7b      	ldrb	r3, [r7, #13]
 800c4a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d002      	beq.n	800c4b0 <phy_hs_init+0xb4>
 800c4aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c4ae:	e001      	b.n	800c4b4 <phy_hs_init+0xb8>
 800c4b0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c4c0:	7c3b      	ldrb	r3, [r7, #16]
 800c4c2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff fec2 	bl	800c254 <dwc2_phy_update>
}
 800c4d0:	bf00      	nop
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4e4:	0c1b      	lsrs	r3, r3, #16
 800c4e6:	041b      	lsls	r3, r3, #16
 800c4e8:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a0e      	ldr	r2, [pc, #56]	@ (800c528 <check_dwc2+0x50>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d012      	beq.n	800c518 <check_dwc2+0x40>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c52c <check_dwc2+0x54>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00e      	beq.n	800c518 <check_dwc2+0x40>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c530 <check_dwc2+0x58>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d00a      	beq.n	800c518 <check_dwc2+0x40>
 800c502:	4b0c      	ldr	r3, [pc, #48]	@ (800c534 <check_dwc2+0x5c>)
 800c504:	60bb      	str	r3, [r7, #8]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d000      	beq.n	800c514 <check_dwc2+0x3c>
 800c512:	be00      	bkpt	0x0000
 800c514:	2300      	movs	r3, #0
 800c516:	e000      	b.n	800c51a <check_dwc2+0x42>
#endif

  return true;
 800c518:	2301      	movs	r3, #1
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	4f540000 	.word	0x4f540000
 800c52c:	55310000 	.word	0x55310000
 800c530:	55320000 	.word	0x55320000
 800c534:	e000edf0 	.word	0xe000edf0

0800c538 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c544:	78fb      	ldrb	r3, [r7, #3]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d101      	bne.n	800c54e <dwc2_core_is_highspeed+0x16>
    return false;
 800c54a:	2300      	movs	r3, #0
 800c54c:	e00b      	b.n	800c566 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c552:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c554:	7b3b      	ldrb	r3, [r7, #12]
 800c556:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bf14      	ite	ne
 800c560:	2301      	movne	r3, #1
 800c562:	2300      	moveq	r3, #0
 800c564:	b2db      	uxtb	r3, r3
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
	...

0800c574 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	71fb      	strb	r3, [r7, #7]
 800c57e:	460b      	mov	r3, r1
 800c580:	71bb      	strb	r3, [r7, #6]
 800c582:	4613      	mov	r3, r2
 800c584:	717b      	strb	r3, [r7, #5]
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <dwc2_core_init+0x20>
    rhport = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	4a3b      	ldr	r2, [pc, #236]	@ (800c684 <dwc2_core_init+0x110>)
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c59e:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c5a0:	69f8      	ldr	r0, [r7, #28]
 800c5a2:	f7ff ff99 	bl	800c4d8 <check_dwc2>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f083 0301 	eor.w	r3, r3, #1
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00a      	beq.n	800c5c8 <dwc2_core_init+0x54>
 800c5b2:	4b35      	ldr	r3, [pc, #212]	@ (800c688 <dwc2_core_init+0x114>)
 800c5b4:	61bb      	str	r3, [r7, #24]
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d000      	beq.n	800c5c4 <dwc2_core_init+0x50>
 800c5c2:	be00      	bkpt	0x0000
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e058      	b.n	800c67a <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f023 0201 	bic.w	r2, r3, #1
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c5d4:	79bb      	ldrb	r3, [r7, #6]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d003      	beq.n	800c5e2 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c5da:	69f8      	ldr	r0, [r7, #28]
 800c5dc:	f7ff ff0e 	bl	800c3fc <phy_hs_init>
 800c5e0:	e002      	b.n	800c5e8 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c5e2:	69f8      	ldr	r0, [r7, #28]
 800c5e4:	f7ff fee2 	bl	800c3ac <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f043 0207 	orr.w	r2, r3, #7
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c5fa:	f023 020f 	bic.w	r2, r3, #15
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	2310      	movs	r3, #16
 800c60a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	019b      	lsls	r3, r3, #6
 800c610:	f043 0220 	orr.w	r2, r3, #32
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c618:	bf00      	nop
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	f003 0320 	and.w	r3, r3, #32
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f9      	bne.n	800c61a <dwc2_core_init+0xa6>
}
 800c626:	bf00      	nop
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2210      	movs	r2, #16
 800c630:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c632:	bf00      	nop
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	f003 0310 	and.w	r3, r3, #16
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1f9      	bne.n	800c634 <dwc2_core_init+0xc0>
}
 800c640:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	f04f 32ff 	mov.w	r2, #4294967295
 800c650:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	2200      	movs	r2, #0
 800c656:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c658:	797b      	ldrb	r3, [r7, #5]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d006      	beq.n	800c66c <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	609a      	str	r2, [r3, #8]
 800c66a:	e005      	b.n	800c678 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	f043 0210 	orr.w	r2, r3, #16
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c678:	2301      	movs	r3, #1
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3720      	adds	r7, #32
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	0800f270 	.word	0x0800f270
 800c688:	e000edf0 	.word	0xe000edf0

0800c68c <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c68c:	b480      	push	{r7}
 800c68e:	b08f      	sub	sp, #60	@ 0x3c
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	4613      	mov	r3, r2
 800c698:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6a0:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	089b      	lsrs	r3, r3, #2
 800c6a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c6a8:	e00b      	b.n	800c6c2 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6b2:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	6a3a      	ldr	r2, [r7, #32]
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
    dst += 4;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c6c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6c4:	1e5a      	subs	r2, r3, #1
 800c6c6:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ee      	bne.n	800c6aa <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c6cc:	88fb      	ldrh	r3, [r7, #6]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c6d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d020      	beq.n	800c722 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d907      	bls.n	800c70a <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c700:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	0a12      	lsrs	r2, r2, #8
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c70a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d907      	bls.n	800c722 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	3302      	adds	r3, #2
 800c716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c718:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	0c12      	lsrs	r2, r2, #16
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c722:	bf00      	nop
 800c724:	373c      	adds	r7, #60	@ 0x3c
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c72e:	b480      	push	{r7}
 800c730:	b08b      	sub	sp, #44	@ 0x2c
 800c732:	af00      	add	r7, sp, #0
 800c734:	60f8      	str	r0, [r7, #12]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	461a      	mov	r2, r3
 800c73a:	460b      	mov	r3, r1
 800c73c:	72fb      	strb	r3, [r7, #11]
 800c73e:	4613      	mov	r3, r2
 800c740:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c742:	7afb      	ldrb	r3, [r7, #11]
 800c744:	3301      	adds	r3, #1
 800c746:	031b      	lsls	r3, r3, #12
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c74e:	893b      	ldrh	r3, [r7, #8]
 800c750:	089b      	lsrs	r3, r3, #2
 800c752:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c754:	e008      	b.n	800c768 <dfifo_write_packet+0x3a>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	601a      	str	r2, [r3, #0]
    src += 4;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3304      	adds	r3, #4
 800c766:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c768:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c76a:	1e5a      	subs	r2, r3, #1
 800c76c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1f1      	bne.n	800c756 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c772:	893b      	ldrh	r3, [r7, #8]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c77c:	7efb      	ldrb	r3, [r7, #27]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d019      	beq.n	800c7b6 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c788:	7efb      	ldrb	r3, [r7, #27]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d906      	bls.n	800c79c <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3301      	adds	r3, #1
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	021b      	lsls	r3, r3, #8
 800c796:	6a3a      	ldr	r2, [r7, #32]
 800c798:	4313      	orrs	r3, r2
 800c79a:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c79c:	7efb      	ldrb	r3, [r7, #27]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d906      	bls.n	800c7b0 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3302      	adds	r3, #2
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	041b      	lsls	r3, r3, #16
 800c7aa:	6a3a      	ldr	r2, [r7, #32]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	6a3a      	ldr	r2, [r7, #32]
 800c7b4:	601a      	str	r2, [r3, #0]
  }
}
 800c7b6:	bf00      	nop
 800c7b8:	372c      	adds	r7, #44	@ 0x2c
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6039      	str	r1, [r7, #0]
 800c7ce:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d11f      	bne.n	800c816 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	723b      	strb	r3, [r7, #8]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	f7fc fa63 	bl	8008cb0 <tud_rhport_init>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f083 0301 	eor.w	r3, r3, #1
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <tusb_rhport_init+0x48>
 800c7f6:	4b23      	ldr	r3, [pc, #140]	@ (800c884 <tusb_rhport_init+0xc0>)
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d000      	beq.n	800c808 <tusb_rhport_init+0x44>
 800c806:	be00      	bkpt	0x0000
 800c808:	2300      	movs	r3, #0
 800c80a:	e036      	b.n	800c87a <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c80c:	4b1e      	ldr	r3, [pc, #120]	@ (800c888 <tusb_rhport_init+0xc4>)
 800c80e:	2201      	movs	r2, #1
 800c810:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c812:	2301      	movs	r3, #1
 800c814:	e031      	b.n	800c87a <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d803      	bhi.n	800c824 <tusb_rhport_init+0x60>
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <tusb_rhport_init+0x76>
 800c824:	4b17      	ldr	r3, [pc, #92]	@ (800c884 <tusb_rhport_init+0xc0>)
 800c826:	613b      	str	r3, [r7, #16]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	d000      	beq.n	800c836 <tusb_rhport_init+0x72>
 800c834:	be00      	bkpt	0x0000
 800c836:	2300      	movs	r3, #0
 800c838:	e01f      	b.n	800c87a <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	7811      	ldrb	r1, [r2, #0]
 800c840:	4a11      	ldr	r2, [pc, #68]	@ (800c888 <tusb_rhport_init+0xc4>)
 800c842:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d115      	bne.n	800c878 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	4618      	mov	r0, r3
 800c852:	f7fc fa2d 	bl	8008cb0 <tud_rhport_init>
 800c856:	4603      	mov	r3, r0
 800c858:	f083 0301 	eor.w	r3, r3, #1
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00a      	beq.n	800c878 <tusb_rhport_init+0xb4>
 800c862:	4b08      	ldr	r3, [pc, #32]	@ (800c884 <tusb_rhport_init+0xc0>)
 800c864:	617b      	str	r3, [r7, #20]
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d000      	beq.n	800c874 <tusb_rhport_init+0xb0>
 800c872:	be00      	bkpt	0x0000
 800c874:	2300      	movs	r3, #0
 800c876:	e000      	b.n	800c87a <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c878:	2301      	movs	r3, #1
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	e000edf0 	.word	0xe000edf0
 800c888:	200018f4 	.word	0x200018f4

0800c88c <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d106      	bne.n	800c8b2 <tu_edpt_claim+0x26>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d001      	beq.n	800c8b6 <tu_edpt_claim+0x2a>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e01e      	b.n	800c8f4 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d108      	bne.n	800c8d6 <tu_edpt_claim+0x4a>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <tu_edpt_claim+0x4a>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <tu_edpt_claim+0x4c>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73fb      	strb	r3, [r7, #15]
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	7813      	ldrb	r3, [r2, #0]
 800c8ec:	f043 0304 	orr.w	r3, r3, #4
 800c8f0:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b01      	cmp	r3, #1
 800c916:	d108      	bne.n	800c92a <tu_edpt_release+0x2a>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <tu_edpt_release+0x2a>
 800c926:	2301      	movs	r3, #1
 800c928:	e000      	b.n	800c92c <tu_edpt_release+0x2c>
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7813      	ldrb	r3, [r2, #0]
 800c940:	f023 0304 	bic.w	r3, r3, #4
 800c944:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c954:	b480      	push	{r7}
 800c956:	b08b      	sub	sp, #44	@ 0x2c
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
 800c960:	4613      	mov	r3, r2
 800c962:	70bb      	strb	r3, [r7, #2]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	889b      	ldrh	r3, [r3, #4]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c972:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c974:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	78db      	ldrb	r3, [r3, #3]
 800c97a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b03      	cmp	r3, #3
 800c982:	d059      	beq.n	800ca38 <tu_edpt_validate+0xe4>
 800c984:	2b03      	cmp	r3, #3
 800c986:	dc6e      	bgt.n	800ca66 <tu_edpt_validate+0x112>
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d002      	beq.n	800c992 <tu_edpt_validate+0x3e>
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d018      	beq.n	800c9c2 <tu_edpt_validate+0x6e>
 800c990:	e069      	b.n	800ca66 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c992:	78fb      	ldrb	r3, [r7, #3]
 800c994:	2b02      	cmp	r3, #2
 800c996:	d102      	bne.n	800c99e <tu_edpt_validate+0x4a>
 800c998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c99c:	e001      	b.n	800c9a2 <tu_edpt_validate+0x4e>
 800c99e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c9a2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c9a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c9a6:	8a7b      	ldrh	r3, [r7, #18]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d95e      	bls.n	800ca6a <tu_edpt_validate+0x116>
 800c9ac:	4b35      	ldr	r3, [pc, #212]	@ (800ca84 <tu_edpt_validate+0x130>)
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d000      	beq.n	800c9be <tu_edpt_validate+0x6a>
 800c9bc:	be00      	bkpt	0x0000
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e059      	b.n	800ca76 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c9c2:	78fb      	ldrb	r3, [r7, #3]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d10e      	bne.n	800c9e6 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c9c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9ce:	d04e      	beq.n	800ca6e <tu_edpt_validate+0x11a>
 800c9d0:	4b2c      	ldr	r3, [pc, #176]	@ (800ca84 <tu_edpt_validate+0x130>)
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d000      	beq.n	800c9e2 <tu_edpt_validate+0x8e>
 800c9e0:	be00      	bkpt	0x0000
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e047      	b.n	800ca76 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c9e6:	78bb      	ldrb	r3, [r7, #2]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00e      	beq.n	800ca0a <tu_edpt_validate+0xb6>
 800c9ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f2:	d10a      	bne.n	800ca0a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca00:	711a      	strb	r2, [r3, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800ca06:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800ca08:	e031      	b.n	800ca6e <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800ca0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d02e      	beq.n	800ca6e <tu_edpt_validate+0x11a>
 800ca10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca12:	2b10      	cmp	r3, #16
 800ca14:	d02b      	beq.n	800ca6e <tu_edpt_validate+0x11a>
 800ca16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca18:	2b20      	cmp	r3, #32
 800ca1a:	d028      	beq.n	800ca6e <tu_edpt_validate+0x11a>
 800ca1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca1e:	2b40      	cmp	r3, #64	@ 0x40
 800ca20:	d025      	beq.n	800ca6e <tu_edpt_validate+0x11a>
 800ca22:	4b18      	ldr	r3, [pc, #96]	@ (800ca84 <tu_edpt_validate+0x130>)
 800ca24:	61bb      	str	r3, [r7, #24]
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d000      	beq.n	800ca34 <tu_edpt_validate+0xe0>
 800ca32:	be00      	bkpt	0x0000
 800ca34:	2300      	movs	r3, #0
 800ca36:	e01e      	b.n	800ca76 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ca38:	78fb      	ldrb	r3, [r7, #3]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d102      	bne.n	800ca44 <tu_edpt_validate+0xf0>
 800ca3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca42:	e000      	b.n	800ca46 <tu_edpt_validate+0xf2>
 800ca44:	2340      	movs	r3, #64	@ 0x40
 800ca46:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ca48:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ca4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d910      	bls.n	800ca72 <tu_edpt_validate+0x11e>
 800ca50:	4b0c      	ldr	r3, [pc, #48]	@ (800ca84 <tu_edpt_validate+0x130>)
 800ca52:	623b      	str	r3, [r7, #32]
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d000      	beq.n	800ca62 <tu_edpt_validate+0x10e>
 800ca60:	be00      	bkpt	0x0000
 800ca62:	2300      	movs	r3, #0
 800ca64:	e007      	b.n	800ca76 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e005      	b.n	800ca76 <tu_edpt_validate+0x122>
      break;
 800ca6a:	bf00      	nop
 800ca6c:	e002      	b.n	800ca74 <tu_edpt_validate+0x120>
      break;
 800ca6e:	bf00      	nop
 800ca70:	e000      	b.n	800ca74 <tu_edpt_validate+0x120>
      break;
 800ca72:	bf00      	nop
  }

  return true;
 800ca74:	2301      	movs	r3, #1
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	372c      	adds	r7, #44	@ 0x2c
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	e000edf0 	.word	0xe000edf0

0800ca88 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ca88:	b480      	push	{r7}
 800ca8a:	b08d      	sub	sp, #52	@ 0x34
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4611      	mov	r1, r2
 800ca94:	461a      	mov	r2, r3
 800ca96:	460b      	mov	r3, r1
 800ca98:	80fb      	strh	r3, [r7, #6]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800caa2:	88fb      	ldrh	r3, [r7, #6]
 800caa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caa6:	4413      	add	r3, r2
 800caa8:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800caaa:	e027      	b.n	800cafc <tu_edpt_bind_driver+0x74>
 800caac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caae:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	3301      	adds	r3, #1
 800cab4:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800cab6:	2b05      	cmp	r3, #5
 800cab8:	d116      	bne.n	800cae8 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	789b      	ldrb	r3, [r3, #2]
 800cabe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800cac8:	7fbb      	ldrb	r3, [r7, #30]
 800caca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cace:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cada:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800cadc:	7ffa      	ldrb	r2, [r7, #31]
 800cade:	09d2      	lsrs	r2, r2, #7
 800cae0:	b2d2      	uxtb	r2, r2
 800cae2:	4611      	mov	r1, r2
 800cae4:	797a      	ldrb	r2, [r7, #5]
 800cae6:	545a      	strb	r2, [r3, r1]
 800cae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caea:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800cafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800cafc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d3d3      	bcc.n	800caac <tu_edpt_bind_driver+0x24>
  }
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3734      	adds	r7, #52	@ 0x34
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr

0800cb12 <atoi>:
 800cb12:	220a      	movs	r2, #10
 800cb14:	2100      	movs	r1, #0
 800cb16:	f000 b87b 	b.w	800cc10 <strtol>
	...

0800cb1c <_strtol_l.isra.0>:
 800cb1c:	2b24      	cmp	r3, #36	@ 0x24
 800cb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb22:	4686      	mov	lr, r0
 800cb24:	4690      	mov	r8, r2
 800cb26:	d801      	bhi.n	800cb2c <_strtol_l.isra.0+0x10>
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d106      	bne.n	800cb3a <_strtol_l.isra.0+0x1e>
 800cb2c:	f000 fa82 	bl	800d034 <__errno>
 800cb30:	2316      	movs	r3, #22
 800cb32:	6003      	str	r3, [r0, #0]
 800cb34:	2000      	movs	r0, #0
 800cb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3a:	4834      	ldr	r0, [pc, #208]	@ (800cc0c <_strtol_l.isra.0+0xf0>)
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	462a      	mov	r2, r5
 800cb40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb44:	5d06      	ldrb	r6, [r0, r4]
 800cb46:	f016 0608 	ands.w	r6, r6, #8
 800cb4a:	d1f8      	bne.n	800cb3e <_strtol_l.isra.0+0x22>
 800cb4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb4e:	d110      	bne.n	800cb72 <_strtol_l.isra.0+0x56>
 800cb50:	782c      	ldrb	r4, [r5, #0]
 800cb52:	2601      	movs	r6, #1
 800cb54:	1c95      	adds	r5, r2, #2
 800cb56:	f033 0210 	bics.w	r2, r3, #16
 800cb5a:	d115      	bne.n	800cb88 <_strtol_l.isra.0+0x6c>
 800cb5c:	2c30      	cmp	r4, #48	@ 0x30
 800cb5e:	d10d      	bne.n	800cb7c <_strtol_l.isra.0+0x60>
 800cb60:	782a      	ldrb	r2, [r5, #0]
 800cb62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb66:	2a58      	cmp	r2, #88	@ 0x58
 800cb68:	d108      	bne.n	800cb7c <_strtol_l.isra.0+0x60>
 800cb6a:	786c      	ldrb	r4, [r5, #1]
 800cb6c:	3502      	adds	r5, #2
 800cb6e:	2310      	movs	r3, #16
 800cb70:	e00a      	b.n	800cb88 <_strtol_l.isra.0+0x6c>
 800cb72:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb74:	bf04      	itt	eq
 800cb76:	782c      	ldrbeq	r4, [r5, #0]
 800cb78:	1c95      	addeq	r5, r2, #2
 800cb7a:	e7ec      	b.n	800cb56 <_strtol_l.isra.0+0x3a>
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1f6      	bne.n	800cb6e <_strtol_l.isra.0+0x52>
 800cb80:	2c30      	cmp	r4, #48	@ 0x30
 800cb82:	bf14      	ite	ne
 800cb84:	230a      	movne	r3, #10
 800cb86:	2308      	moveq	r3, #8
 800cb88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cb8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb90:	2200      	movs	r2, #0
 800cb92:	fbbc f9f3 	udiv	r9, ip, r3
 800cb96:	4610      	mov	r0, r2
 800cb98:	fb03 ca19 	mls	sl, r3, r9, ip
 800cb9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cba0:	2f09      	cmp	r7, #9
 800cba2:	d80f      	bhi.n	800cbc4 <_strtol_l.isra.0+0xa8>
 800cba4:	463c      	mov	r4, r7
 800cba6:	42a3      	cmp	r3, r4
 800cba8:	dd1b      	ble.n	800cbe2 <_strtol_l.isra.0+0xc6>
 800cbaa:	1c57      	adds	r7, r2, #1
 800cbac:	d007      	beq.n	800cbbe <_strtol_l.isra.0+0xa2>
 800cbae:	4581      	cmp	r9, r0
 800cbb0:	d314      	bcc.n	800cbdc <_strtol_l.isra.0+0xc0>
 800cbb2:	d101      	bne.n	800cbb8 <_strtol_l.isra.0+0x9c>
 800cbb4:	45a2      	cmp	sl, r4
 800cbb6:	db11      	blt.n	800cbdc <_strtol_l.isra.0+0xc0>
 800cbb8:	fb00 4003 	mla	r0, r0, r3, r4
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc2:	e7eb      	b.n	800cb9c <_strtol_l.isra.0+0x80>
 800cbc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cbc8:	2f19      	cmp	r7, #25
 800cbca:	d801      	bhi.n	800cbd0 <_strtol_l.isra.0+0xb4>
 800cbcc:	3c37      	subs	r4, #55	@ 0x37
 800cbce:	e7ea      	b.n	800cba6 <_strtol_l.isra.0+0x8a>
 800cbd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cbd4:	2f19      	cmp	r7, #25
 800cbd6:	d804      	bhi.n	800cbe2 <_strtol_l.isra.0+0xc6>
 800cbd8:	3c57      	subs	r4, #87	@ 0x57
 800cbda:	e7e4      	b.n	800cba6 <_strtol_l.isra.0+0x8a>
 800cbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe0:	e7ed      	b.n	800cbbe <_strtol_l.isra.0+0xa2>
 800cbe2:	1c53      	adds	r3, r2, #1
 800cbe4:	d108      	bne.n	800cbf8 <_strtol_l.isra.0+0xdc>
 800cbe6:	2322      	movs	r3, #34	@ 0x22
 800cbe8:	f8ce 3000 	str.w	r3, [lr]
 800cbec:	4660      	mov	r0, ip
 800cbee:	f1b8 0f00 	cmp.w	r8, #0
 800cbf2:	d0a0      	beq.n	800cb36 <_strtol_l.isra.0+0x1a>
 800cbf4:	1e69      	subs	r1, r5, #1
 800cbf6:	e006      	b.n	800cc06 <_strtol_l.isra.0+0xea>
 800cbf8:	b106      	cbz	r6, 800cbfc <_strtol_l.isra.0+0xe0>
 800cbfa:	4240      	negs	r0, r0
 800cbfc:	f1b8 0f00 	cmp.w	r8, #0
 800cc00:	d099      	beq.n	800cb36 <_strtol_l.isra.0+0x1a>
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	d1f6      	bne.n	800cbf4 <_strtol_l.isra.0+0xd8>
 800cc06:	f8c8 1000 	str.w	r1, [r8]
 800cc0a:	e794      	b.n	800cb36 <_strtol_l.isra.0+0x1a>
 800cc0c:	0800f281 	.word	0x0800f281

0800cc10 <strtol>:
 800cc10:	4613      	mov	r3, r2
 800cc12:	460a      	mov	r2, r1
 800cc14:	4601      	mov	r1, r0
 800cc16:	4802      	ldr	r0, [pc, #8]	@ (800cc20 <strtol+0x10>)
 800cc18:	6800      	ldr	r0, [r0, #0]
 800cc1a:	f7ff bf7f 	b.w	800cb1c <_strtol_l.isra.0>
 800cc1e:	bf00      	nop
 800cc20:	20000250 	.word	0x20000250

0800cc24 <std>:
 800cc24:	2300      	movs	r3, #0
 800cc26:	b510      	push	{r4, lr}
 800cc28:	4604      	mov	r4, r0
 800cc2a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc32:	6083      	str	r3, [r0, #8]
 800cc34:	8181      	strh	r1, [r0, #12]
 800cc36:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc38:	81c2      	strh	r2, [r0, #14]
 800cc3a:	6183      	str	r3, [r0, #24]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	2208      	movs	r2, #8
 800cc40:	305c      	adds	r0, #92	@ 0x5c
 800cc42:	f000 f94c 	bl	800cede <memset>
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <std+0x58>)
 800cc48:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <std+0x5c>)
 800cc4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <std+0x60>)
 800cc50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc52:	4b0d      	ldr	r3, [pc, #52]	@ (800cc88 <std+0x64>)
 800cc54:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc56:	4b0d      	ldr	r3, [pc, #52]	@ (800cc8c <std+0x68>)
 800cc58:	6224      	str	r4, [r4, #32]
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	d006      	beq.n	800cc6c <std+0x48>
 800cc5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc62:	4294      	cmp	r4, r2
 800cc64:	d002      	beq.n	800cc6c <std+0x48>
 800cc66:	33d0      	adds	r3, #208	@ 0xd0
 800cc68:	429c      	cmp	r4, r3
 800cc6a:	d105      	bne.n	800cc78 <std+0x54>
 800cc6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc74:	f000 ba08 	b.w	800d088 <__retarget_lock_init_recursive>
 800cc78:	bd10      	pop	{r4, pc}
 800cc7a:	bf00      	nop
 800cc7c:	0800ce59 	.word	0x0800ce59
 800cc80:	0800ce7b 	.word	0x0800ce7b
 800cc84:	0800ceb3 	.word	0x0800ceb3
 800cc88:	0800ced7 	.word	0x0800ced7
 800cc8c:	200018f8 	.word	0x200018f8

0800cc90 <stdio_exit_handler>:
 800cc90:	4a02      	ldr	r2, [pc, #8]	@ (800cc9c <stdio_exit_handler+0xc>)
 800cc92:	4903      	ldr	r1, [pc, #12]	@ (800cca0 <stdio_exit_handler+0x10>)
 800cc94:	4803      	ldr	r0, [pc, #12]	@ (800cca4 <stdio_exit_handler+0x14>)
 800cc96:	f000 b869 	b.w	800cd6c <_fwalk_sglue>
 800cc9a:	bf00      	nop
 800cc9c:	20000244 	.word	0x20000244
 800cca0:	0800dc3d 	.word	0x0800dc3d
 800cca4:	20000254 	.word	0x20000254

0800cca8 <cleanup_stdio>:
 800cca8:	6841      	ldr	r1, [r0, #4]
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	@ (800ccdc <cleanup_stdio+0x34>)
 800ccac:	4299      	cmp	r1, r3
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	d001      	beq.n	800ccb8 <cleanup_stdio+0x10>
 800ccb4:	f000 ffc2 	bl	800dc3c <_fflush_r>
 800ccb8:	68a1      	ldr	r1, [r4, #8]
 800ccba:	4b09      	ldr	r3, [pc, #36]	@ (800cce0 <cleanup_stdio+0x38>)
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	d002      	beq.n	800ccc6 <cleanup_stdio+0x1e>
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f000 ffbb 	bl	800dc3c <_fflush_r>
 800ccc6:	68e1      	ldr	r1, [r4, #12]
 800ccc8:	4b06      	ldr	r3, [pc, #24]	@ (800cce4 <cleanup_stdio+0x3c>)
 800ccca:	4299      	cmp	r1, r3
 800cccc:	d004      	beq.n	800ccd8 <cleanup_stdio+0x30>
 800ccce:	4620      	mov	r0, r4
 800ccd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd4:	f000 bfb2 	b.w	800dc3c <_fflush_r>
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	bf00      	nop
 800ccdc:	200018f8 	.word	0x200018f8
 800cce0:	20001960 	.word	0x20001960
 800cce4:	200019c8 	.word	0x200019c8

0800cce8 <global_stdio_init.part.0>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	4b0b      	ldr	r3, [pc, #44]	@ (800cd18 <global_stdio_init.part.0+0x30>)
 800ccec:	4c0b      	ldr	r4, [pc, #44]	@ (800cd1c <global_stdio_init.part.0+0x34>)
 800ccee:	4a0c      	ldr	r2, [pc, #48]	@ (800cd20 <global_stdio_init.part.0+0x38>)
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2104      	movs	r1, #4
 800ccf8:	f7ff ff94 	bl	800cc24 <std>
 800ccfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd00:	2201      	movs	r2, #1
 800cd02:	2109      	movs	r1, #9
 800cd04:	f7ff ff8e 	bl	800cc24 <std>
 800cd08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd12:	2112      	movs	r1, #18
 800cd14:	f7ff bf86 	b.w	800cc24 <std>
 800cd18:	20001a30 	.word	0x20001a30
 800cd1c:	200018f8 	.word	0x200018f8
 800cd20:	0800cc91 	.word	0x0800cc91

0800cd24 <__sfp_lock_acquire>:
 800cd24:	4801      	ldr	r0, [pc, #4]	@ (800cd2c <__sfp_lock_acquire+0x8>)
 800cd26:	f000 b9b0 	b.w	800d08a <__retarget_lock_acquire_recursive>
 800cd2a:	bf00      	nop
 800cd2c:	20001a39 	.word	0x20001a39

0800cd30 <__sfp_lock_release>:
 800cd30:	4801      	ldr	r0, [pc, #4]	@ (800cd38 <__sfp_lock_release+0x8>)
 800cd32:	f000 b9ab 	b.w	800d08c <__retarget_lock_release_recursive>
 800cd36:	bf00      	nop
 800cd38:	20001a39 	.word	0x20001a39

0800cd3c <__sinit>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	f7ff fff0 	bl	800cd24 <__sfp_lock_acquire>
 800cd44:	6a23      	ldr	r3, [r4, #32]
 800cd46:	b11b      	cbz	r3, 800cd50 <__sinit+0x14>
 800cd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd4c:	f7ff bff0 	b.w	800cd30 <__sfp_lock_release>
 800cd50:	4b04      	ldr	r3, [pc, #16]	@ (800cd64 <__sinit+0x28>)
 800cd52:	6223      	str	r3, [r4, #32]
 800cd54:	4b04      	ldr	r3, [pc, #16]	@ (800cd68 <__sinit+0x2c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1f5      	bne.n	800cd48 <__sinit+0xc>
 800cd5c:	f7ff ffc4 	bl	800cce8 <global_stdio_init.part.0>
 800cd60:	e7f2      	b.n	800cd48 <__sinit+0xc>
 800cd62:	bf00      	nop
 800cd64:	0800cca9 	.word	0x0800cca9
 800cd68:	20001a30 	.word	0x20001a30

0800cd6c <_fwalk_sglue>:
 800cd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	4607      	mov	r7, r0
 800cd72:	4688      	mov	r8, r1
 800cd74:	4614      	mov	r4, r2
 800cd76:	2600      	movs	r6, #0
 800cd78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd7c:	f1b9 0901 	subs.w	r9, r9, #1
 800cd80:	d505      	bpl.n	800cd8e <_fwalk_sglue+0x22>
 800cd82:	6824      	ldr	r4, [r4, #0]
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	d1f7      	bne.n	800cd78 <_fwalk_sglue+0xc>
 800cd88:	4630      	mov	r0, r6
 800cd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d907      	bls.n	800cda4 <_fwalk_sglue+0x38>
 800cd94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	d003      	beq.n	800cda4 <_fwalk_sglue+0x38>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4638      	mov	r0, r7
 800cda0:	47c0      	blx	r8
 800cda2:	4306      	orrs	r6, r0
 800cda4:	3568      	adds	r5, #104	@ 0x68
 800cda6:	e7e9      	b.n	800cd7c <_fwalk_sglue+0x10>

0800cda8 <sniprintf>:
 800cda8:	b40c      	push	{r2, r3}
 800cdaa:	b530      	push	{r4, r5, lr}
 800cdac:	4b18      	ldr	r3, [pc, #96]	@ (800ce10 <sniprintf+0x68>)
 800cdae:	1e0c      	subs	r4, r1, #0
 800cdb0:	681d      	ldr	r5, [r3, #0]
 800cdb2:	b09d      	sub	sp, #116	@ 0x74
 800cdb4:	da08      	bge.n	800cdc8 <sniprintf+0x20>
 800cdb6:	238b      	movs	r3, #139	@ 0x8b
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbe:	b01d      	add	sp, #116	@ 0x74
 800cdc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc4:	b002      	add	sp, #8
 800cdc6:	4770      	bx	lr
 800cdc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cdcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cdd6:	bf14      	ite	ne
 800cdd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cddc:	4623      	moveq	r3, r4
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	9307      	str	r3, [sp, #28]
 800cde2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cde6:	9002      	str	r0, [sp, #8]
 800cde8:	9006      	str	r0, [sp, #24]
 800cdea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdf0:	ab21      	add	r3, sp, #132	@ 0x84
 800cdf2:	a902      	add	r1, sp, #8
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	f000 fad2 	bl	800d3a0 <_svfiprintf_r>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	bfbc      	itt	lt
 800ce00:	238b      	movlt	r3, #139	@ 0x8b
 800ce02:	602b      	strlt	r3, [r5, #0]
 800ce04:	2c00      	cmp	r4, #0
 800ce06:	d0da      	beq.n	800cdbe <sniprintf+0x16>
 800ce08:	9b02      	ldr	r3, [sp, #8]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e7d6      	b.n	800cdbe <sniprintf+0x16>
 800ce10:	20000250 	.word	0x20000250

0800ce14 <siprintf>:
 800ce14:	b40e      	push	{r1, r2, r3}
 800ce16:	b510      	push	{r4, lr}
 800ce18:	b09d      	sub	sp, #116	@ 0x74
 800ce1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ce1c:	9002      	str	r0, [sp, #8]
 800ce1e:	9006      	str	r0, [sp, #24]
 800ce20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce24:	480a      	ldr	r0, [pc, #40]	@ (800ce50 <siprintf+0x3c>)
 800ce26:	9107      	str	r1, [sp, #28]
 800ce28:	9104      	str	r1, [sp, #16]
 800ce2a:	490a      	ldr	r1, [pc, #40]	@ (800ce54 <siprintf+0x40>)
 800ce2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce30:	9105      	str	r1, [sp, #20]
 800ce32:	2400      	movs	r4, #0
 800ce34:	a902      	add	r1, sp, #8
 800ce36:	6800      	ldr	r0, [r0, #0]
 800ce38:	9301      	str	r3, [sp, #4]
 800ce3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce3c:	f000 fab0 	bl	800d3a0 <_svfiprintf_r>
 800ce40:	9b02      	ldr	r3, [sp, #8]
 800ce42:	701c      	strb	r4, [r3, #0]
 800ce44:	b01d      	add	sp, #116	@ 0x74
 800ce46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce4a:	b003      	add	sp, #12
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000250 	.word	0x20000250
 800ce54:	ffff0208 	.word	0xffff0208

0800ce58 <__sread>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce60:	f000 f8c4 	bl	800cfec <_read_r>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	bfab      	itete	ge
 800ce68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce6c:	181b      	addge	r3, r3, r0
 800ce6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce72:	bfac      	ite	ge
 800ce74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce76:	81a3      	strhlt	r3, [r4, #12]
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <__swrite>:
 800ce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	461f      	mov	r7, r3
 800ce80:	898b      	ldrh	r3, [r1, #12]
 800ce82:	05db      	lsls	r3, r3, #23
 800ce84:	4605      	mov	r5, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	4616      	mov	r6, r2
 800ce8a:	d505      	bpl.n	800ce98 <__swrite+0x1e>
 800ce8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce90:	2302      	movs	r3, #2
 800ce92:	2200      	movs	r2, #0
 800ce94:	f000 f898 	bl	800cfc8 <_lseek_r>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cea2:	81a3      	strh	r3, [r4, #12]
 800cea4:	4632      	mov	r2, r6
 800cea6:	463b      	mov	r3, r7
 800cea8:	4628      	mov	r0, r5
 800ceaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	f000 b8af 	b.w	800d010 <_write_r>

0800ceb2 <__sseek>:
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceba:	f000 f885 	bl	800cfc8 <_lseek_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	bf15      	itete	ne
 800cec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cece:	81a3      	strheq	r3, [r4, #12]
 800ced0:	bf18      	it	ne
 800ced2:	81a3      	strhne	r3, [r4, #12]
 800ced4:	bd10      	pop	{r4, pc}

0800ced6 <__sclose>:
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 b865 	b.w	800cfa8 <_close_r>

0800cede <memset>:
 800cede:	4402      	add	r2, r0
 800cee0:	4603      	mov	r3, r0
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d100      	bne.n	800cee8 <memset+0xa>
 800cee6:	4770      	bx	lr
 800cee8:	f803 1b01 	strb.w	r1, [r3], #1
 800ceec:	e7f9      	b.n	800cee2 <memset+0x4>
	...

0800cef0 <strtok>:
 800cef0:	4b16      	ldr	r3, [pc, #88]	@ (800cf4c <strtok+0x5c>)
 800cef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef6:	681f      	ldr	r7, [r3, #0]
 800cef8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cefa:	4605      	mov	r5, r0
 800cefc:	460e      	mov	r6, r1
 800cefe:	b9ec      	cbnz	r4, 800cf3c <strtok+0x4c>
 800cf00:	2050      	movs	r0, #80	@ 0x50
 800cf02:	f000 f93b 	bl	800d17c <malloc>
 800cf06:	4602      	mov	r2, r0
 800cf08:	6478      	str	r0, [r7, #68]	@ 0x44
 800cf0a:	b920      	cbnz	r0, 800cf16 <strtok+0x26>
 800cf0c:	4b10      	ldr	r3, [pc, #64]	@ (800cf50 <strtok+0x60>)
 800cf0e:	4811      	ldr	r0, [pc, #68]	@ (800cf54 <strtok+0x64>)
 800cf10:	215b      	movs	r1, #91	@ 0x5b
 800cf12:	f000 f8cb 	bl	800d0ac <__assert_func>
 800cf16:	e9c0 4400 	strd	r4, r4, [r0]
 800cf1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cf1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cf22:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cf26:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cf2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cf2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cf32:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cf36:	6184      	str	r4, [r0, #24]
 800cf38:	7704      	strb	r4, [r0, #28]
 800cf3a:	6244      	str	r4, [r0, #36]	@ 0x24
 800cf3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	2301      	movs	r3, #1
 800cf44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	f000 b806 	b.w	800cf58 <__strtok_r>
 800cf4c:	20000250 	.word	0x20000250
 800cf50:	0800f381 	.word	0x0800f381
 800cf54:	0800f398 	.word	0x0800f398

0800cf58 <__strtok_r>:
 800cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	b908      	cbnz	r0, 800cf62 <__strtok_r+0xa>
 800cf5e:	6814      	ldr	r4, [r2, #0]
 800cf60:	b144      	cbz	r4, 800cf74 <__strtok_r+0x1c>
 800cf62:	4620      	mov	r0, r4
 800cf64:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cf68:	460f      	mov	r7, r1
 800cf6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cf6e:	b91e      	cbnz	r6, 800cf78 <__strtok_r+0x20>
 800cf70:	b965      	cbnz	r5, 800cf8c <__strtok_r+0x34>
 800cf72:	6015      	str	r5, [r2, #0]
 800cf74:	2000      	movs	r0, #0
 800cf76:	e005      	b.n	800cf84 <__strtok_r+0x2c>
 800cf78:	42b5      	cmp	r5, r6
 800cf7a:	d1f6      	bne.n	800cf6a <__strtok_r+0x12>
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1f0      	bne.n	800cf62 <__strtok_r+0xa>
 800cf80:	6014      	str	r4, [r2, #0]
 800cf82:	7003      	strb	r3, [r0, #0]
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	461c      	mov	r4, r3
 800cf88:	e00c      	b.n	800cfa4 <__strtok_r+0x4c>
 800cf8a:	b91d      	cbnz	r5, 800cf94 <__strtok_r+0x3c>
 800cf8c:	4627      	mov	r7, r4
 800cf8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf92:	460e      	mov	r6, r1
 800cf94:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cf98:	42ab      	cmp	r3, r5
 800cf9a:	d1f6      	bne.n	800cf8a <__strtok_r+0x32>
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0f2      	beq.n	800cf86 <__strtok_r+0x2e>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	703b      	strb	r3, [r7, #0]
 800cfa4:	6014      	str	r4, [r2, #0]
 800cfa6:	e7ed      	b.n	800cf84 <__strtok_r+0x2c>

0800cfa8 <_close_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d06      	ldr	r5, [pc, #24]	@ (800cfc4 <_close_r+0x1c>)
 800cfac:	2300      	movs	r3, #0
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	602b      	str	r3, [r5, #0]
 800cfb4:	f7f6 fe55 	bl	8003c62 <_close>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_close_r+0x1a>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_close_r+0x1a>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20001a34 	.word	0x20001a34

0800cfc8 <_lseek_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d07      	ldr	r5, [pc, #28]	@ (800cfe8 <_lseek_r+0x20>)
 800cfcc:	4604      	mov	r4, r0
 800cfce:	4608      	mov	r0, r1
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	602a      	str	r2, [r5, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7f6 fe6a 	bl	8003cb0 <_lseek>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_lseek_r+0x1e>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_lseek_r+0x1e>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20001a34 	.word	0x20001a34

0800cfec <_read_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	@ (800d00c <_read_r+0x20>)
 800cff0:	4604      	mov	r4, r0
 800cff2:	4608      	mov	r0, r1
 800cff4:	4611      	mov	r1, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	602a      	str	r2, [r5, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	f7f6 fdf8 	bl	8003bf0 <_read>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_read_r+0x1e>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_read_r+0x1e>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20001a34 	.word	0x20001a34

0800d010 <_write_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d07      	ldr	r5, [pc, #28]	@ (800d030 <_write_r+0x20>)
 800d014:	4604      	mov	r4, r0
 800d016:	4608      	mov	r0, r1
 800d018:	4611      	mov	r1, r2
 800d01a:	2200      	movs	r2, #0
 800d01c:	602a      	str	r2, [r5, #0]
 800d01e:	461a      	mov	r2, r3
 800d020:	f7f6 fe03 	bl	8003c2a <_write>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d102      	bne.n	800d02e <_write_r+0x1e>
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	b103      	cbz	r3, 800d02e <_write_r+0x1e>
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	20001a34 	.word	0x20001a34

0800d034 <__errno>:
 800d034:	4b01      	ldr	r3, [pc, #4]	@ (800d03c <__errno+0x8>)
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	20000250 	.word	0x20000250

0800d040 <__libc_init_array>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	4d0d      	ldr	r5, [pc, #52]	@ (800d078 <__libc_init_array+0x38>)
 800d044:	4c0d      	ldr	r4, [pc, #52]	@ (800d07c <__libc_init_array+0x3c>)
 800d046:	1b64      	subs	r4, r4, r5
 800d048:	10a4      	asrs	r4, r4, #2
 800d04a:	2600      	movs	r6, #0
 800d04c:	42a6      	cmp	r6, r4
 800d04e:	d109      	bne.n	800d064 <__libc_init_array+0x24>
 800d050:	4d0b      	ldr	r5, [pc, #44]	@ (800d080 <__libc_init_array+0x40>)
 800d052:	4c0c      	ldr	r4, [pc, #48]	@ (800d084 <__libc_init_array+0x44>)
 800d054:	f000 fff0 	bl	800e038 <_init>
 800d058:	1b64      	subs	r4, r4, r5
 800d05a:	10a4      	asrs	r4, r4, #2
 800d05c:	2600      	movs	r6, #0
 800d05e:	42a6      	cmp	r6, r4
 800d060:	d105      	bne.n	800d06e <__libc_init_array+0x2e>
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	f855 3b04 	ldr.w	r3, [r5], #4
 800d068:	4798      	blx	r3
 800d06a:	3601      	adds	r6, #1
 800d06c:	e7ee      	b.n	800d04c <__libc_init_array+0xc>
 800d06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d072:	4798      	blx	r3
 800d074:	3601      	adds	r6, #1
 800d076:	e7f2      	b.n	800d05e <__libc_init_array+0x1e>
 800d078:	0800f46c 	.word	0x0800f46c
 800d07c:	0800f46c 	.word	0x0800f46c
 800d080:	0800f46c 	.word	0x0800f46c
 800d084:	0800f470 	.word	0x0800f470

0800d088 <__retarget_lock_init_recursive>:
 800d088:	4770      	bx	lr

0800d08a <__retarget_lock_acquire_recursive>:
 800d08a:	4770      	bx	lr

0800d08c <__retarget_lock_release_recursive>:
 800d08c:	4770      	bx	lr

0800d08e <memcpy>:
 800d08e:	440a      	add	r2, r1
 800d090:	4291      	cmp	r1, r2
 800d092:	f100 33ff 	add.w	r3, r0, #4294967295
 800d096:	d100      	bne.n	800d09a <memcpy+0xc>
 800d098:	4770      	bx	lr
 800d09a:	b510      	push	{r4, lr}
 800d09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a4:	4291      	cmp	r1, r2
 800d0a6:	d1f9      	bne.n	800d09c <memcpy+0xe>
 800d0a8:	bd10      	pop	{r4, pc}
	...

0800d0ac <__assert_func>:
 800d0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	4b09      	ldr	r3, [pc, #36]	@ (800d0d8 <__assert_func+0x2c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	68d8      	ldr	r0, [r3, #12]
 800d0ba:	b14c      	cbz	r4, 800d0d0 <__assert_func+0x24>
 800d0bc:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <__assert_func+0x30>)
 800d0be:	9100      	str	r1, [sp, #0]
 800d0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0c4:	4906      	ldr	r1, [pc, #24]	@ (800d0e0 <__assert_func+0x34>)
 800d0c6:	462b      	mov	r3, r5
 800d0c8:	f000 fde0 	bl	800dc8c <fiprintf>
 800d0cc:	f000 feae 	bl	800de2c <abort>
 800d0d0:	4b04      	ldr	r3, [pc, #16]	@ (800d0e4 <__assert_func+0x38>)
 800d0d2:	461c      	mov	r4, r3
 800d0d4:	e7f3      	b.n	800d0be <__assert_func+0x12>
 800d0d6:	bf00      	nop
 800d0d8:	20000250 	.word	0x20000250
 800d0dc:	0800f3f2 	.word	0x0800f3f2
 800d0e0:	0800f3ff 	.word	0x0800f3ff
 800d0e4:	0800f42d 	.word	0x0800f42d

0800d0e8 <_free_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	2900      	cmp	r1, #0
 800d0ee:	d041      	beq.n	800d174 <_free_r+0x8c>
 800d0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f4:	1f0c      	subs	r4, r1, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bfb8      	it	lt
 800d0fa:	18e4      	addlt	r4, r4, r3
 800d0fc:	f000 f8e8 	bl	800d2d0 <__malloc_lock>
 800d100:	4a1d      	ldr	r2, [pc, #116]	@ (800d178 <_free_r+0x90>)
 800d102:	6813      	ldr	r3, [r2, #0]
 800d104:	b933      	cbnz	r3, 800d114 <_free_r+0x2c>
 800d106:	6063      	str	r3, [r4, #4]
 800d108:	6014      	str	r4, [r2, #0]
 800d10a:	4628      	mov	r0, r5
 800d10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d110:	f000 b8e4 	b.w	800d2dc <__malloc_unlock>
 800d114:	42a3      	cmp	r3, r4
 800d116:	d908      	bls.n	800d12a <_free_r+0x42>
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	1821      	adds	r1, r4, r0
 800d11c:	428b      	cmp	r3, r1
 800d11e:	bf01      	itttt	eq
 800d120:	6819      	ldreq	r1, [r3, #0]
 800d122:	685b      	ldreq	r3, [r3, #4]
 800d124:	1809      	addeq	r1, r1, r0
 800d126:	6021      	streq	r1, [r4, #0]
 800d128:	e7ed      	b.n	800d106 <_free_r+0x1e>
 800d12a:	461a      	mov	r2, r3
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	b10b      	cbz	r3, 800d134 <_free_r+0x4c>
 800d130:	42a3      	cmp	r3, r4
 800d132:	d9fa      	bls.n	800d12a <_free_r+0x42>
 800d134:	6811      	ldr	r1, [r2, #0]
 800d136:	1850      	adds	r0, r2, r1
 800d138:	42a0      	cmp	r0, r4
 800d13a:	d10b      	bne.n	800d154 <_free_r+0x6c>
 800d13c:	6820      	ldr	r0, [r4, #0]
 800d13e:	4401      	add	r1, r0
 800d140:	1850      	adds	r0, r2, r1
 800d142:	4283      	cmp	r3, r0
 800d144:	6011      	str	r1, [r2, #0]
 800d146:	d1e0      	bne.n	800d10a <_free_r+0x22>
 800d148:	6818      	ldr	r0, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	6053      	str	r3, [r2, #4]
 800d14e:	4408      	add	r0, r1
 800d150:	6010      	str	r0, [r2, #0]
 800d152:	e7da      	b.n	800d10a <_free_r+0x22>
 800d154:	d902      	bls.n	800d15c <_free_r+0x74>
 800d156:	230c      	movs	r3, #12
 800d158:	602b      	str	r3, [r5, #0]
 800d15a:	e7d6      	b.n	800d10a <_free_r+0x22>
 800d15c:	6820      	ldr	r0, [r4, #0]
 800d15e:	1821      	adds	r1, r4, r0
 800d160:	428b      	cmp	r3, r1
 800d162:	bf04      	itt	eq
 800d164:	6819      	ldreq	r1, [r3, #0]
 800d166:	685b      	ldreq	r3, [r3, #4]
 800d168:	6063      	str	r3, [r4, #4]
 800d16a:	bf04      	itt	eq
 800d16c:	1809      	addeq	r1, r1, r0
 800d16e:	6021      	streq	r1, [r4, #0]
 800d170:	6054      	str	r4, [r2, #4]
 800d172:	e7ca      	b.n	800d10a <_free_r+0x22>
 800d174:	bd38      	pop	{r3, r4, r5, pc}
 800d176:	bf00      	nop
 800d178:	20001a40 	.word	0x20001a40

0800d17c <malloc>:
 800d17c:	4b02      	ldr	r3, [pc, #8]	@ (800d188 <malloc+0xc>)
 800d17e:	4601      	mov	r1, r0
 800d180:	6818      	ldr	r0, [r3, #0]
 800d182:	f000 b825 	b.w	800d1d0 <_malloc_r>
 800d186:	bf00      	nop
 800d188:	20000250 	.word	0x20000250

0800d18c <sbrk_aligned>:
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	4e0f      	ldr	r6, [pc, #60]	@ (800d1cc <sbrk_aligned+0x40>)
 800d190:	460c      	mov	r4, r1
 800d192:	6831      	ldr	r1, [r6, #0]
 800d194:	4605      	mov	r5, r0
 800d196:	b911      	cbnz	r1, 800d19e <sbrk_aligned+0x12>
 800d198:	f000 fe38 	bl	800de0c <_sbrk_r>
 800d19c:	6030      	str	r0, [r6, #0]
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f000 fe33 	bl	800de0c <_sbrk_r>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	d103      	bne.n	800d1b2 <sbrk_aligned+0x26>
 800d1aa:	f04f 34ff 	mov.w	r4, #4294967295
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
 800d1b2:	1cc4      	adds	r4, r0, #3
 800d1b4:	f024 0403 	bic.w	r4, r4, #3
 800d1b8:	42a0      	cmp	r0, r4
 800d1ba:	d0f8      	beq.n	800d1ae <sbrk_aligned+0x22>
 800d1bc:	1a21      	subs	r1, r4, r0
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f000 fe24 	bl	800de0c <_sbrk_r>
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d1f2      	bne.n	800d1ae <sbrk_aligned+0x22>
 800d1c8:	e7ef      	b.n	800d1aa <sbrk_aligned+0x1e>
 800d1ca:	bf00      	nop
 800d1cc:	20001a3c 	.word	0x20001a3c

0800d1d0 <_malloc_r>:
 800d1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	1ccd      	adds	r5, r1, #3
 800d1d6:	f025 0503 	bic.w	r5, r5, #3
 800d1da:	3508      	adds	r5, #8
 800d1dc:	2d0c      	cmp	r5, #12
 800d1de:	bf38      	it	cc
 800d1e0:	250c      	movcc	r5, #12
 800d1e2:	2d00      	cmp	r5, #0
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	db01      	blt.n	800d1ec <_malloc_r+0x1c>
 800d1e8:	42a9      	cmp	r1, r5
 800d1ea:	d904      	bls.n	800d1f6 <_malloc_r+0x26>
 800d1ec:	230c      	movs	r3, #12
 800d1ee:	6033      	str	r3, [r6, #0]
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2cc <_malloc_r+0xfc>
 800d1fa:	f000 f869 	bl	800d2d0 <__malloc_lock>
 800d1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800d202:	461c      	mov	r4, r3
 800d204:	bb44      	cbnz	r4, 800d258 <_malloc_r+0x88>
 800d206:	4629      	mov	r1, r5
 800d208:	4630      	mov	r0, r6
 800d20a:	f7ff ffbf 	bl	800d18c <sbrk_aligned>
 800d20e:	1c43      	adds	r3, r0, #1
 800d210:	4604      	mov	r4, r0
 800d212:	d158      	bne.n	800d2c6 <_malloc_r+0xf6>
 800d214:	f8d8 4000 	ldr.w	r4, [r8]
 800d218:	4627      	mov	r7, r4
 800d21a:	2f00      	cmp	r7, #0
 800d21c:	d143      	bne.n	800d2a6 <_malloc_r+0xd6>
 800d21e:	2c00      	cmp	r4, #0
 800d220:	d04b      	beq.n	800d2ba <_malloc_r+0xea>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	4639      	mov	r1, r7
 800d226:	4630      	mov	r0, r6
 800d228:	eb04 0903 	add.w	r9, r4, r3
 800d22c:	f000 fdee 	bl	800de0c <_sbrk_r>
 800d230:	4581      	cmp	r9, r0
 800d232:	d142      	bne.n	800d2ba <_malloc_r+0xea>
 800d234:	6821      	ldr	r1, [r4, #0]
 800d236:	1a6d      	subs	r5, r5, r1
 800d238:	4629      	mov	r1, r5
 800d23a:	4630      	mov	r0, r6
 800d23c:	f7ff ffa6 	bl	800d18c <sbrk_aligned>
 800d240:	3001      	adds	r0, #1
 800d242:	d03a      	beq.n	800d2ba <_malloc_r+0xea>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	442b      	add	r3, r5
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	f8d8 3000 	ldr.w	r3, [r8]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	bb62      	cbnz	r2, 800d2ac <_malloc_r+0xdc>
 800d252:	f8c8 7000 	str.w	r7, [r8]
 800d256:	e00f      	b.n	800d278 <_malloc_r+0xa8>
 800d258:	6822      	ldr	r2, [r4, #0]
 800d25a:	1b52      	subs	r2, r2, r5
 800d25c:	d420      	bmi.n	800d2a0 <_malloc_r+0xd0>
 800d25e:	2a0b      	cmp	r2, #11
 800d260:	d917      	bls.n	800d292 <_malloc_r+0xc2>
 800d262:	1961      	adds	r1, r4, r5
 800d264:	42a3      	cmp	r3, r4
 800d266:	6025      	str	r5, [r4, #0]
 800d268:	bf18      	it	ne
 800d26a:	6059      	strne	r1, [r3, #4]
 800d26c:	6863      	ldr	r3, [r4, #4]
 800d26e:	bf08      	it	eq
 800d270:	f8c8 1000 	streq.w	r1, [r8]
 800d274:	5162      	str	r2, [r4, r5]
 800d276:	604b      	str	r3, [r1, #4]
 800d278:	4630      	mov	r0, r6
 800d27a:	f000 f82f 	bl	800d2dc <__malloc_unlock>
 800d27e:	f104 000b 	add.w	r0, r4, #11
 800d282:	1d23      	adds	r3, r4, #4
 800d284:	f020 0007 	bic.w	r0, r0, #7
 800d288:	1ac2      	subs	r2, r0, r3
 800d28a:	bf1c      	itt	ne
 800d28c:	1a1b      	subne	r3, r3, r0
 800d28e:	50a3      	strne	r3, [r4, r2]
 800d290:	e7af      	b.n	800d1f2 <_malloc_r+0x22>
 800d292:	6862      	ldr	r2, [r4, #4]
 800d294:	42a3      	cmp	r3, r4
 800d296:	bf0c      	ite	eq
 800d298:	f8c8 2000 	streq.w	r2, [r8]
 800d29c:	605a      	strne	r2, [r3, #4]
 800d29e:	e7eb      	b.n	800d278 <_malloc_r+0xa8>
 800d2a0:	4623      	mov	r3, r4
 800d2a2:	6864      	ldr	r4, [r4, #4]
 800d2a4:	e7ae      	b.n	800d204 <_malloc_r+0x34>
 800d2a6:	463c      	mov	r4, r7
 800d2a8:	687f      	ldr	r7, [r7, #4]
 800d2aa:	e7b6      	b.n	800d21a <_malloc_r+0x4a>
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d1fb      	bne.n	800d2ac <_malloc_r+0xdc>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	6053      	str	r3, [r2, #4]
 800d2b8:	e7de      	b.n	800d278 <_malloc_r+0xa8>
 800d2ba:	230c      	movs	r3, #12
 800d2bc:	6033      	str	r3, [r6, #0]
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f000 f80c 	bl	800d2dc <__malloc_unlock>
 800d2c4:	e794      	b.n	800d1f0 <_malloc_r+0x20>
 800d2c6:	6005      	str	r5, [r0, #0]
 800d2c8:	e7d6      	b.n	800d278 <_malloc_r+0xa8>
 800d2ca:	bf00      	nop
 800d2cc:	20001a40 	.word	0x20001a40

0800d2d0 <__malloc_lock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	@ (800d2d8 <__malloc_lock+0x8>)
 800d2d2:	f7ff beda 	b.w	800d08a <__retarget_lock_acquire_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20001a38 	.word	0x20001a38

0800d2dc <__malloc_unlock>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	@ (800d2e4 <__malloc_unlock+0x8>)
 800d2de:	f7ff bed5 	b.w	800d08c <__retarget_lock_release_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	20001a38 	.word	0x20001a38

0800d2e8 <__ssputs_r>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	688e      	ldr	r6, [r1, #8]
 800d2ee:	461f      	mov	r7, r3
 800d2f0:	42be      	cmp	r6, r7
 800d2f2:	680b      	ldr	r3, [r1, #0]
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	4690      	mov	r8, r2
 800d2fa:	d82d      	bhi.n	800d358 <__ssputs_r+0x70>
 800d2fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d304:	d026      	beq.n	800d354 <__ssputs_r+0x6c>
 800d306:	6965      	ldr	r5, [r4, #20]
 800d308:	6909      	ldr	r1, [r1, #16]
 800d30a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d30e:	eba3 0901 	sub.w	r9, r3, r1
 800d312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d316:	1c7b      	adds	r3, r7, #1
 800d318:	444b      	add	r3, r9
 800d31a:	106d      	asrs	r5, r5, #1
 800d31c:	429d      	cmp	r5, r3
 800d31e:	bf38      	it	cc
 800d320:	461d      	movcc	r5, r3
 800d322:	0553      	lsls	r3, r2, #21
 800d324:	d527      	bpl.n	800d376 <__ssputs_r+0x8e>
 800d326:	4629      	mov	r1, r5
 800d328:	f7ff ff52 	bl	800d1d0 <_malloc_r>
 800d32c:	4606      	mov	r6, r0
 800d32e:	b360      	cbz	r0, 800d38a <__ssputs_r+0xa2>
 800d330:	6921      	ldr	r1, [r4, #16]
 800d332:	464a      	mov	r2, r9
 800d334:	f7ff feab 	bl	800d08e <memcpy>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	6126      	str	r6, [r4, #16]
 800d346:	6165      	str	r5, [r4, #20]
 800d348:	444e      	add	r6, r9
 800d34a:	eba5 0509 	sub.w	r5, r5, r9
 800d34e:	6026      	str	r6, [r4, #0]
 800d350:	60a5      	str	r5, [r4, #8]
 800d352:	463e      	mov	r6, r7
 800d354:	42be      	cmp	r6, r7
 800d356:	d900      	bls.n	800d35a <__ssputs_r+0x72>
 800d358:	463e      	mov	r6, r7
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	4632      	mov	r2, r6
 800d35e:	4641      	mov	r1, r8
 800d360:	f000 fd3a 	bl	800ddd8 <memmove>
 800d364:	68a3      	ldr	r3, [r4, #8]
 800d366:	1b9b      	subs	r3, r3, r6
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	4433      	add	r3, r6
 800d36e:	6023      	str	r3, [r4, #0]
 800d370:	2000      	movs	r0, #0
 800d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d376:	462a      	mov	r2, r5
 800d378:	f000 fd5f 	bl	800de3a <_realloc_r>
 800d37c:	4606      	mov	r6, r0
 800d37e:	2800      	cmp	r0, #0
 800d380:	d1e0      	bne.n	800d344 <__ssputs_r+0x5c>
 800d382:	6921      	ldr	r1, [r4, #16]
 800d384:	4650      	mov	r0, sl
 800d386:	f7ff feaf 	bl	800d0e8 <_free_r>
 800d38a:	230c      	movs	r3, #12
 800d38c:	f8ca 3000 	str.w	r3, [sl]
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d396:	81a3      	strh	r3, [r4, #12]
 800d398:	f04f 30ff 	mov.w	r0, #4294967295
 800d39c:	e7e9      	b.n	800d372 <__ssputs_r+0x8a>
	...

0800d3a0 <_svfiprintf_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4698      	mov	r8, r3
 800d3a6:	898b      	ldrh	r3, [r1, #12]
 800d3a8:	061b      	lsls	r3, r3, #24
 800d3aa:	b09d      	sub	sp, #116	@ 0x74
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	4614      	mov	r4, r2
 800d3b2:	d510      	bpl.n	800d3d6 <_svfiprintf_r+0x36>
 800d3b4:	690b      	ldr	r3, [r1, #16]
 800d3b6:	b973      	cbnz	r3, 800d3d6 <_svfiprintf_r+0x36>
 800d3b8:	2140      	movs	r1, #64	@ 0x40
 800d3ba:	f7ff ff09 	bl	800d1d0 <_malloc_r>
 800d3be:	6028      	str	r0, [r5, #0]
 800d3c0:	6128      	str	r0, [r5, #16]
 800d3c2:	b930      	cbnz	r0, 800d3d2 <_svfiprintf_r+0x32>
 800d3c4:	230c      	movs	r3, #12
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	b01d      	add	sp, #116	@ 0x74
 800d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d2:	2340      	movs	r3, #64	@ 0x40
 800d3d4:	616b      	str	r3, [r5, #20]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3da:	2320      	movs	r3, #32
 800d3dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3e4:	2330      	movs	r3, #48	@ 0x30
 800d3e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d584 <_svfiprintf_r+0x1e4>
 800d3ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3ee:	f04f 0901 	mov.w	r9, #1
 800d3f2:	4623      	mov	r3, r4
 800d3f4:	469a      	mov	sl, r3
 800d3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3fa:	b10a      	cbz	r2, 800d400 <_svfiprintf_r+0x60>
 800d3fc:	2a25      	cmp	r2, #37	@ 0x25
 800d3fe:	d1f9      	bne.n	800d3f4 <_svfiprintf_r+0x54>
 800d400:	ebba 0b04 	subs.w	fp, sl, r4
 800d404:	d00b      	beq.n	800d41e <_svfiprintf_r+0x7e>
 800d406:	465b      	mov	r3, fp
 800d408:	4622      	mov	r2, r4
 800d40a:	4629      	mov	r1, r5
 800d40c:	4638      	mov	r0, r7
 800d40e:	f7ff ff6b 	bl	800d2e8 <__ssputs_r>
 800d412:	3001      	adds	r0, #1
 800d414:	f000 80a7 	beq.w	800d566 <_svfiprintf_r+0x1c6>
 800d418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d41a:	445a      	add	r2, fp
 800d41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d41e:	f89a 3000 	ldrb.w	r3, [sl]
 800d422:	2b00      	cmp	r3, #0
 800d424:	f000 809f 	beq.w	800d566 <_svfiprintf_r+0x1c6>
 800d428:	2300      	movs	r3, #0
 800d42a:	f04f 32ff 	mov.w	r2, #4294967295
 800d42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d432:	f10a 0a01 	add.w	sl, sl, #1
 800d436:	9304      	str	r3, [sp, #16]
 800d438:	9307      	str	r3, [sp, #28]
 800d43a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d43e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d440:	4654      	mov	r4, sl
 800d442:	2205      	movs	r2, #5
 800d444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d448:	484e      	ldr	r0, [pc, #312]	@ (800d584 <_svfiprintf_r+0x1e4>)
 800d44a:	f7f2 fee1 	bl	8000210 <memchr>
 800d44e:	9a04      	ldr	r2, [sp, #16]
 800d450:	b9d8      	cbnz	r0, 800d48a <_svfiprintf_r+0xea>
 800d452:	06d0      	lsls	r0, r2, #27
 800d454:	bf44      	itt	mi
 800d456:	2320      	movmi	r3, #32
 800d458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d45c:	0711      	lsls	r1, r2, #28
 800d45e:	bf44      	itt	mi
 800d460:	232b      	movmi	r3, #43	@ 0x2b
 800d462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d466:	f89a 3000 	ldrb.w	r3, [sl]
 800d46a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d46c:	d015      	beq.n	800d49a <_svfiprintf_r+0xfa>
 800d46e:	9a07      	ldr	r2, [sp, #28]
 800d470:	4654      	mov	r4, sl
 800d472:	2000      	movs	r0, #0
 800d474:	f04f 0c0a 	mov.w	ip, #10
 800d478:	4621      	mov	r1, r4
 800d47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d47e:	3b30      	subs	r3, #48	@ 0x30
 800d480:	2b09      	cmp	r3, #9
 800d482:	d94b      	bls.n	800d51c <_svfiprintf_r+0x17c>
 800d484:	b1b0      	cbz	r0, 800d4b4 <_svfiprintf_r+0x114>
 800d486:	9207      	str	r2, [sp, #28]
 800d488:	e014      	b.n	800d4b4 <_svfiprintf_r+0x114>
 800d48a:	eba0 0308 	sub.w	r3, r0, r8
 800d48e:	fa09 f303 	lsl.w	r3, r9, r3
 800d492:	4313      	orrs	r3, r2
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	46a2      	mov	sl, r4
 800d498:	e7d2      	b.n	800d440 <_svfiprintf_r+0xa0>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	1d19      	adds	r1, r3, #4
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	9103      	str	r1, [sp, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bfbb      	ittet	lt
 800d4a6:	425b      	neglt	r3, r3
 800d4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800d4ac:	9307      	strge	r3, [sp, #28]
 800d4ae:	9307      	strlt	r3, [sp, #28]
 800d4b0:	bfb8      	it	lt
 800d4b2:	9204      	strlt	r2, [sp, #16]
 800d4b4:	7823      	ldrb	r3, [r4, #0]
 800d4b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4b8:	d10a      	bne.n	800d4d0 <_svfiprintf_r+0x130>
 800d4ba:	7863      	ldrb	r3, [r4, #1]
 800d4bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4be:	d132      	bne.n	800d526 <_svfiprintf_r+0x186>
 800d4c0:	9b03      	ldr	r3, [sp, #12]
 800d4c2:	1d1a      	adds	r2, r3, #4
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	9203      	str	r2, [sp, #12]
 800d4c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4cc:	3402      	adds	r4, #2
 800d4ce:	9305      	str	r3, [sp, #20]
 800d4d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d594 <_svfiprintf_r+0x1f4>
 800d4d4:	7821      	ldrb	r1, [r4, #0]
 800d4d6:	2203      	movs	r2, #3
 800d4d8:	4650      	mov	r0, sl
 800d4da:	f7f2 fe99 	bl	8000210 <memchr>
 800d4de:	b138      	cbz	r0, 800d4f0 <_svfiprintf_r+0x150>
 800d4e0:	9b04      	ldr	r3, [sp, #16]
 800d4e2:	eba0 000a 	sub.w	r0, r0, sl
 800d4e6:	2240      	movs	r2, #64	@ 0x40
 800d4e8:	4082      	lsls	r2, r0
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	3401      	adds	r4, #1
 800d4ee:	9304      	str	r3, [sp, #16]
 800d4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f4:	4824      	ldr	r0, [pc, #144]	@ (800d588 <_svfiprintf_r+0x1e8>)
 800d4f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4fa:	2206      	movs	r2, #6
 800d4fc:	f7f2 fe88 	bl	8000210 <memchr>
 800d500:	2800      	cmp	r0, #0
 800d502:	d036      	beq.n	800d572 <_svfiprintf_r+0x1d2>
 800d504:	4b21      	ldr	r3, [pc, #132]	@ (800d58c <_svfiprintf_r+0x1ec>)
 800d506:	bb1b      	cbnz	r3, 800d550 <_svfiprintf_r+0x1b0>
 800d508:	9b03      	ldr	r3, [sp, #12]
 800d50a:	3307      	adds	r3, #7
 800d50c:	f023 0307 	bic.w	r3, r3, #7
 800d510:	3308      	adds	r3, #8
 800d512:	9303      	str	r3, [sp, #12]
 800d514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d516:	4433      	add	r3, r6
 800d518:	9309      	str	r3, [sp, #36]	@ 0x24
 800d51a:	e76a      	b.n	800d3f2 <_svfiprintf_r+0x52>
 800d51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d520:	460c      	mov	r4, r1
 800d522:	2001      	movs	r0, #1
 800d524:	e7a8      	b.n	800d478 <_svfiprintf_r+0xd8>
 800d526:	2300      	movs	r3, #0
 800d528:	3401      	adds	r4, #1
 800d52a:	9305      	str	r3, [sp, #20]
 800d52c:	4619      	mov	r1, r3
 800d52e:	f04f 0c0a 	mov.w	ip, #10
 800d532:	4620      	mov	r0, r4
 800d534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d538:	3a30      	subs	r2, #48	@ 0x30
 800d53a:	2a09      	cmp	r2, #9
 800d53c:	d903      	bls.n	800d546 <_svfiprintf_r+0x1a6>
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0c6      	beq.n	800d4d0 <_svfiprintf_r+0x130>
 800d542:	9105      	str	r1, [sp, #20]
 800d544:	e7c4      	b.n	800d4d0 <_svfiprintf_r+0x130>
 800d546:	fb0c 2101 	mla	r1, ip, r1, r2
 800d54a:	4604      	mov	r4, r0
 800d54c:	2301      	movs	r3, #1
 800d54e:	e7f0      	b.n	800d532 <_svfiprintf_r+0x192>
 800d550:	ab03      	add	r3, sp, #12
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	462a      	mov	r2, r5
 800d556:	4b0e      	ldr	r3, [pc, #56]	@ (800d590 <_svfiprintf_r+0x1f0>)
 800d558:	a904      	add	r1, sp, #16
 800d55a:	4638      	mov	r0, r7
 800d55c:	f3af 8000 	nop.w
 800d560:	1c42      	adds	r2, r0, #1
 800d562:	4606      	mov	r6, r0
 800d564:	d1d6      	bne.n	800d514 <_svfiprintf_r+0x174>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	065b      	lsls	r3, r3, #25
 800d56a:	f53f af2d 	bmi.w	800d3c8 <_svfiprintf_r+0x28>
 800d56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d570:	e72c      	b.n	800d3cc <_svfiprintf_r+0x2c>
 800d572:	ab03      	add	r3, sp, #12
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	462a      	mov	r2, r5
 800d578:	4b05      	ldr	r3, [pc, #20]	@ (800d590 <_svfiprintf_r+0x1f0>)
 800d57a:	a904      	add	r1, sp, #16
 800d57c:	4638      	mov	r0, r7
 800d57e:	f000 f9bb 	bl	800d8f8 <_printf_i>
 800d582:	e7ed      	b.n	800d560 <_svfiprintf_r+0x1c0>
 800d584:	0800f42e 	.word	0x0800f42e
 800d588:	0800f438 	.word	0x0800f438
 800d58c:	00000000 	.word	0x00000000
 800d590:	0800d2e9 	.word	0x0800d2e9
 800d594:	0800f434 	.word	0x0800f434

0800d598 <__sfputc_r>:
 800d598:	6893      	ldr	r3, [r2, #8]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	b410      	push	{r4}
 800d5a0:	6093      	str	r3, [r2, #8]
 800d5a2:	da08      	bge.n	800d5b6 <__sfputc_r+0x1e>
 800d5a4:	6994      	ldr	r4, [r2, #24]
 800d5a6:	42a3      	cmp	r3, r4
 800d5a8:	db01      	blt.n	800d5ae <__sfputc_r+0x16>
 800d5aa:	290a      	cmp	r1, #10
 800d5ac:	d103      	bne.n	800d5b6 <__sfputc_r+0x1e>
 800d5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b2:	f000 bb7d 	b.w	800dcb0 <__swbuf_r>
 800d5b6:	6813      	ldr	r3, [r2, #0]
 800d5b8:	1c58      	adds	r0, r3, #1
 800d5ba:	6010      	str	r0, [r2, #0]
 800d5bc:	7019      	strb	r1, [r3, #0]
 800d5be:	4608      	mov	r0, r1
 800d5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <__sfputs_r>:
 800d5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c8:	4606      	mov	r6, r0
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	4614      	mov	r4, r2
 800d5ce:	18d5      	adds	r5, r2, r3
 800d5d0:	42ac      	cmp	r4, r5
 800d5d2:	d101      	bne.n	800d5d8 <__sfputs_r+0x12>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e007      	b.n	800d5e8 <__sfputs_r+0x22>
 800d5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5dc:	463a      	mov	r2, r7
 800d5de:	4630      	mov	r0, r6
 800d5e0:	f7ff ffda 	bl	800d598 <__sfputc_r>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d1f3      	bne.n	800d5d0 <__sfputs_r+0xa>
 800d5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5ec <_vfiprintf_r>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	460d      	mov	r5, r1
 800d5f2:	b09d      	sub	sp, #116	@ 0x74
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	4698      	mov	r8, r3
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	b118      	cbz	r0, 800d604 <_vfiprintf_r+0x18>
 800d5fc:	6a03      	ldr	r3, [r0, #32]
 800d5fe:	b90b      	cbnz	r3, 800d604 <_vfiprintf_r+0x18>
 800d600:	f7ff fb9c 	bl	800cd3c <__sinit>
 800d604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d606:	07d9      	lsls	r1, r3, #31
 800d608:	d405      	bmi.n	800d616 <_vfiprintf_r+0x2a>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	059a      	lsls	r2, r3, #22
 800d60e:	d402      	bmi.n	800d616 <_vfiprintf_r+0x2a>
 800d610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d612:	f7ff fd3a 	bl	800d08a <__retarget_lock_acquire_recursive>
 800d616:	89ab      	ldrh	r3, [r5, #12]
 800d618:	071b      	lsls	r3, r3, #28
 800d61a:	d501      	bpl.n	800d620 <_vfiprintf_r+0x34>
 800d61c:	692b      	ldr	r3, [r5, #16]
 800d61e:	b99b      	cbnz	r3, 800d648 <_vfiprintf_r+0x5c>
 800d620:	4629      	mov	r1, r5
 800d622:	4630      	mov	r0, r6
 800d624:	f000 fb82 	bl	800dd2c <__swsetup_r>
 800d628:	b170      	cbz	r0, 800d648 <_vfiprintf_r+0x5c>
 800d62a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d62c:	07dc      	lsls	r4, r3, #31
 800d62e:	d504      	bpl.n	800d63a <_vfiprintf_r+0x4e>
 800d630:	f04f 30ff 	mov.w	r0, #4294967295
 800d634:	b01d      	add	sp, #116	@ 0x74
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63a:	89ab      	ldrh	r3, [r5, #12]
 800d63c:	0598      	lsls	r0, r3, #22
 800d63e:	d4f7      	bmi.n	800d630 <_vfiprintf_r+0x44>
 800d640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d642:	f7ff fd23 	bl	800d08c <__retarget_lock_release_recursive>
 800d646:	e7f3      	b.n	800d630 <_vfiprintf_r+0x44>
 800d648:	2300      	movs	r3, #0
 800d64a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d64c:	2320      	movs	r3, #32
 800d64e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d652:	f8cd 800c 	str.w	r8, [sp, #12]
 800d656:	2330      	movs	r3, #48	@ 0x30
 800d658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d808 <_vfiprintf_r+0x21c>
 800d65c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d660:	f04f 0901 	mov.w	r9, #1
 800d664:	4623      	mov	r3, r4
 800d666:	469a      	mov	sl, r3
 800d668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66c:	b10a      	cbz	r2, 800d672 <_vfiprintf_r+0x86>
 800d66e:	2a25      	cmp	r2, #37	@ 0x25
 800d670:	d1f9      	bne.n	800d666 <_vfiprintf_r+0x7a>
 800d672:	ebba 0b04 	subs.w	fp, sl, r4
 800d676:	d00b      	beq.n	800d690 <_vfiprintf_r+0xa4>
 800d678:	465b      	mov	r3, fp
 800d67a:	4622      	mov	r2, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	4630      	mov	r0, r6
 800d680:	f7ff ffa1 	bl	800d5c6 <__sfputs_r>
 800d684:	3001      	adds	r0, #1
 800d686:	f000 80a7 	beq.w	800d7d8 <_vfiprintf_r+0x1ec>
 800d68a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d68c:	445a      	add	r2, fp
 800d68e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d690:	f89a 3000 	ldrb.w	r3, [sl]
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 809f 	beq.w	800d7d8 <_vfiprintf_r+0x1ec>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a4:	f10a 0a01 	add.w	sl, sl, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9307      	str	r3, [sp, #28]
 800d6ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6b2:	4654      	mov	r4, sl
 800d6b4:	2205      	movs	r2, #5
 800d6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ba:	4853      	ldr	r0, [pc, #332]	@ (800d808 <_vfiprintf_r+0x21c>)
 800d6bc:	f7f2 fda8 	bl	8000210 <memchr>
 800d6c0:	9a04      	ldr	r2, [sp, #16]
 800d6c2:	b9d8      	cbnz	r0, 800d6fc <_vfiprintf_r+0x110>
 800d6c4:	06d1      	lsls	r1, r2, #27
 800d6c6:	bf44      	itt	mi
 800d6c8:	2320      	movmi	r3, #32
 800d6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ce:	0713      	lsls	r3, r2, #28
 800d6d0:	bf44      	itt	mi
 800d6d2:	232b      	movmi	r3, #43	@ 0x2b
 800d6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6de:	d015      	beq.n	800d70c <_vfiprintf_r+0x120>
 800d6e0:	9a07      	ldr	r2, [sp, #28]
 800d6e2:	4654      	mov	r4, sl
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f04f 0c0a 	mov.w	ip, #10
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f0:	3b30      	subs	r3, #48	@ 0x30
 800d6f2:	2b09      	cmp	r3, #9
 800d6f4:	d94b      	bls.n	800d78e <_vfiprintf_r+0x1a2>
 800d6f6:	b1b0      	cbz	r0, 800d726 <_vfiprintf_r+0x13a>
 800d6f8:	9207      	str	r2, [sp, #28]
 800d6fa:	e014      	b.n	800d726 <_vfiprintf_r+0x13a>
 800d6fc:	eba0 0308 	sub.w	r3, r0, r8
 800d700:	fa09 f303 	lsl.w	r3, r9, r3
 800d704:	4313      	orrs	r3, r2
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	46a2      	mov	sl, r4
 800d70a:	e7d2      	b.n	800d6b2 <_vfiprintf_r+0xc6>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	1d19      	adds	r1, r3, #4
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	9103      	str	r1, [sp, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfbb      	ittet	lt
 800d718:	425b      	neglt	r3, r3
 800d71a:	f042 0202 	orrlt.w	r2, r2, #2
 800d71e:	9307      	strge	r3, [sp, #28]
 800d720:	9307      	strlt	r3, [sp, #28]
 800d722:	bfb8      	it	lt
 800d724:	9204      	strlt	r2, [sp, #16]
 800d726:	7823      	ldrb	r3, [r4, #0]
 800d728:	2b2e      	cmp	r3, #46	@ 0x2e
 800d72a:	d10a      	bne.n	800d742 <_vfiprintf_r+0x156>
 800d72c:	7863      	ldrb	r3, [r4, #1]
 800d72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d730:	d132      	bne.n	800d798 <_vfiprintf_r+0x1ac>
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	1d1a      	adds	r2, r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	9203      	str	r2, [sp, #12]
 800d73a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d73e:	3402      	adds	r4, #2
 800d740:	9305      	str	r3, [sp, #20]
 800d742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d818 <_vfiprintf_r+0x22c>
 800d746:	7821      	ldrb	r1, [r4, #0]
 800d748:	2203      	movs	r2, #3
 800d74a:	4650      	mov	r0, sl
 800d74c:	f7f2 fd60 	bl	8000210 <memchr>
 800d750:	b138      	cbz	r0, 800d762 <_vfiprintf_r+0x176>
 800d752:	9b04      	ldr	r3, [sp, #16]
 800d754:	eba0 000a 	sub.w	r0, r0, sl
 800d758:	2240      	movs	r2, #64	@ 0x40
 800d75a:	4082      	lsls	r2, r0
 800d75c:	4313      	orrs	r3, r2
 800d75e:	3401      	adds	r4, #1
 800d760:	9304      	str	r3, [sp, #16]
 800d762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d766:	4829      	ldr	r0, [pc, #164]	@ (800d80c <_vfiprintf_r+0x220>)
 800d768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d76c:	2206      	movs	r2, #6
 800d76e:	f7f2 fd4f 	bl	8000210 <memchr>
 800d772:	2800      	cmp	r0, #0
 800d774:	d03f      	beq.n	800d7f6 <_vfiprintf_r+0x20a>
 800d776:	4b26      	ldr	r3, [pc, #152]	@ (800d810 <_vfiprintf_r+0x224>)
 800d778:	bb1b      	cbnz	r3, 800d7c2 <_vfiprintf_r+0x1d6>
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	3307      	adds	r3, #7
 800d77e:	f023 0307 	bic.w	r3, r3, #7
 800d782:	3308      	adds	r3, #8
 800d784:	9303      	str	r3, [sp, #12]
 800d786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d788:	443b      	add	r3, r7
 800d78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d78c:	e76a      	b.n	800d664 <_vfiprintf_r+0x78>
 800d78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d792:	460c      	mov	r4, r1
 800d794:	2001      	movs	r0, #1
 800d796:	e7a8      	b.n	800d6ea <_vfiprintf_r+0xfe>
 800d798:	2300      	movs	r3, #0
 800d79a:	3401      	adds	r4, #1
 800d79c:	9305      	str	r3, [sp, #20]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f04f 0c0a 	mov.w	ip, #10
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7aa:	3a30      	subs	r2, #48	@ 0x30
 800d7ac:	2a09      	cmp	r2, #9
 800d7ae:	d903      	bls.n	800d7b8 <_vfiprintf_r+0x1cc>
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d0c6      	beq.n	800d742 <_vfiprintf_r+0x156>
 800d7b4:	9105      	str	r1, [sp, #20]
 800d7b6:	e7c4      	b.n	800d742 <_vfiprintf_r+0x156>
 800d7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7bc:	4604      	mov	r4, r0
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e7f0      	b.n	800d7a4 <_vfiprintf_r+0x1b8>
 800d7c2:	ab03      	add	r3, sp, #12
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	462a      	mov	r2, r5
 800d7c8:	4b12      	ldr	r3, [pc, #72]	@ (800d814 <_vfiprintf_r+0x228>)
 800d7ca:	a904      	add	r1, sp, #16
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f3af 8000 	nop.w
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	1c78      	adds	r0, r7, #1
 800d7d6:	d1d6      	bne.n	800d786 <_vfiprintf_r+0x19a>
 800d7d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7da:	07d9      	lsls	r1, r3, #31
 800d7dc:	d405      	bmi.n	800d7ea <_vfiprintf_r+0x1fe>
 800d7de:	89ab      	ldrh	r3, [r5, #12]
 800d7e0:	059a      	lsls	r2, r3, #22
 800d7e2:	d402      	bmi.n	800d7ea <_vfiprintf_r+0x1fe>
 800d7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7e6:	f7ff fc51 	bl	800d08c <__retarget_lock_release_recursive>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	065b      	lsls	r3, r3, #25
 800d7ee:	f53f af1f 	bmi.w	800d630 <_vfiprintf_r+0x44>
 800d7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7f4:	e71e      	b.n	800d634 <_vfiprintf_r+0x48>
 800d7f6:	ab03      	add	r3, sp, #12
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	462a      	mov	r2, r5
 800d7fc:	4b05      	ldr	r3, [pc, #20]	@ (800d814 <_vfiprintf_r+0x228>)
 800d7fe:	a904      	add	r1, sp, #16
 800d800:	4630      	mov	r0, r6
 800d802:	f000 f879 	bl	800d8f8 <_printf_i>
 800d806:	e7e4      	b.n	800d7d2 <_vfiprintf_r+0x1e6>
 800d808:	0800f42e 	.word	0x0800f42e
 800d80c:	0800f438 	.word	0x0800f438
 800d810:	00000000 	.word	0x00000000
 800d814:	0800d5c7 	.word	0x0800d5c7
 800d818:	0800f434 	.word	0x0800f434

0800d81c <_printf_common>:
 800d81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d820:	4616      	mov	r6, r2
 800d822:	4698      	mov	r8, r3
 800d824:	688a      	ldr	r2, [r1, #8]
 800d826:	690b      	ldr	r3, [r1, #16]
 800d828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d82c:	4293      	cmp	r3, r2
 800d82e:	bfb8      	it	lt
 800d830:	4613      	movlt	r3, r2
 800d832:	6033      	str	r3, [r6, #0]
 800d834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d838:	4607      	mov	r7, r0
 800d83a:	460c      	mov	r4, r1
 800d83c:	b10a      	cbz	r2, 800d842 <_printf_common+0x26>
 800d83e:	3301      	adds	r3, #1
 800d840:	6033      	str	r3, [r6, #0]
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	0699      	lsls	r1, r3, #26
 800d846:	bf42      	ittt	mi
 800d848:	6833      	ldrmi	r3, [r6, #0]
 800d84a:	3302      	addmi	r3, #2
 800d84c:	6033      	strmi	r3, [r6, #0]
 800d84e:	6825      	ldr	r5, [r4, #0]
 800d850:	f015 0506 	ands.w	r5, r5, #6
 800d854:	d106      	bne.n	800d864 <_printf_common+0x48>
 800d856:	f104 0a19 	add.w	sl, r4, #25
 800d85a:	68e3      	ldr	r3, [r4, #12]
 800d85c:	6832      	ldr	r2, [r6, #0]
 800d85e:	1a9b      	subs	r3, r3, r2
 800d860:	42ab      	cmp	r3, r5
 800d862:	dc26      	bgt.n	800d8b2 <_printf_common+0x96>
 800d864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d868:	6822      	ldr	r2, [r4, #0]
 800d86a:	3b00      	subs	r3, #0
 800d86c:	bf18      	it	ne
 800d86e:	2301      	movne	r3, #1
 800d870:	0692      	lsls	r2, r2, #26
 800d872:	d42b      	bmi.n	800d8cc <_printf_common+0xb0>
 800d874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d878:	4641      	mov	r1, r8
 800d87a:	4638      	mov	r0, r7
 800d87c:	47c8      	blx	r9
 800d87e:	3001      	adds	r0, #1
 800d880:	d01e      	beq.n	800d8c0 <_printf_common+0xa4>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6922      	ldr	r2, [r4, #16]
 800d886:	f003 0306 	and.w	r3, r3, #6
 800d88a:	2b04      	cmp	r3, #4
 800d88c:	bf02      	ittt	eq
 800d88e:	68e5      	ldreq	r5, [r4, #12]
 800d890:	6833      	ldreq	r3, [r6, #0]
 800d892:	1aed      	subeq	r5, r5, r3
 800d894:	68a3      	ldr	r3, [r4, #8]
 800d896:	bf0c      	ite	eq
 800d898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d89c:	2500      	movne	r5, #0
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	bfc4      	itt	gt
 800d8a2:	1a9b      	subgt	r3, r3, r2
 800d8a4:	18ed      	addgt	r5, r5, r3
 800d8a6:	2600      	movs	r6, #0
 800d8a8:	341a      	adds	r4, #26
 800d8aa:	42b5      	cmp	r5, r6
 800d8ac:	d11a      	bne.n	800d8e4 <_printf_common+0xc8>
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	e008      	b.n	800d8c4 <_printf_common+0xa8>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	4641      	mov	r1, r8
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	47c8      	blx	r9
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d103      	bne.n	800d8c8 <_printf_common+0xac>
 800d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	e7c6      	b.n	800d85a <_printf_common+0x3e>
 800d8cc:	18e1      	adds	r1, r4, r3
 800d8ce:	1c5a      	adds	r2, r3, #1
 800d8d0:	2030      	movs	r0, #48	@ 0x30
 800d8d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8d6:	4422      	add	r2, r4
 800d8d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8e0:	3302      	adds	r3, #2
 800d8e2:	e7c7      	b.n	800d874 <_printf_common+0x58>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	4641      	mov	r1, r8
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	47c8      	blx	r9
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	d0e6      	beq.n	800d8c0 <_printf_common+0xa4>
 800d8f2:	3601      	adds	r6, #1
 800d8f4:	e7d9      	b.n	800d8aa <_printf_common+0x8e>
	...

0800d8f8 <_printf_i>:
 800d8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8fc:	7e0f      	ldrb	r7, [r1, #24]
 800d8fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d900:	2f78      	cmp	r7, #120	@ 0x78
 800d902:	4691      	mov	r9, r2
 800d904:	4680      	mov	r8, r0
 800d906:	460c      	mov	r4, r1
 800d908:	469a      	mov	sl, r3
 800d90a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d90e:	d807      	bhi.n	800d920 <_printf_i+0x28>
 800d910:	2f62      	cmp	r7, #98	@ 0x62
 800d912:	d80a      	bhi.n	800d92a <_printf_i+0x32>
 800d914:	2f00      	cmp	r7, #0
 800d916:	f000 80d1 	beq.w	800dabc <_printf_i+0x1c4>
 800d91a:	2f58      	cmp	r7, #88	@ 0x58
 800d91c:	f000 80b8 	beq.w	800da90 <_printf_i+0x198>
 800d920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d928:	e03a      	b.n	800d9a0 <_printf_i+0xa8>
 800d92a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d92e:	2b15      	cmp	r3, #21
 800d930:	d8f6      	bhi.n	800d920 <_printf_i+0x28>
 800d932:	a101      	add	r1, pc, #4	@ (adr r1, 800d938 <_printf_i+0x40>)
 800d934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d938:	0800d991 	.word	0x0800d991
 800d93c:	0800d9a5 	.word	0x0800d9a5
 800d940:	0800d921 	.word	0x0800d921
 800d944:	0800d921 	.word	0x0800d921
 800d948:	0800d921 	.word	0x0800d921
 800d94c:	0800d921 	.word	0x0800d921
 800d950:	0800d9a5 	.word	0x0800d9a5
 800d954:	0800d921 	.word	0x0800d921
 800d958:	0800d921 	.word	0x0800d921
 800d95c:	0800d921 	.word	0x0800d921
 800d960:	0800d921 	.word	0x0800d921
 800d964:	0800daa3 	.word	0x0800daa3
 800d968:	0800d9cf 	.word	0x0800d9cf
 800d96c:	0800da5d 	.word	0x0800da5d
 800d970:	0800d921 	.word	0x0800d921
 800d974:	0800d921 	.word	0x0800d921
 800d978:	0800dac5 	.word	0x0800dac5
 800d97c:	0800d921 	.word	0x0800d921
 800d980:	0800d9cf 	.word	0x0800d9cf
 800d984:	0800d921 	.word	0x0800d921
 800d988:	0800d921 	.word	0x0800d921
 800d98c:	0800da65 	.word	0x0800da65
 800d990:	6833      	ldr	r3, [r6, #0]
 800d992:	1d1a      	adds	r2, r3, #4
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6032      	str	r2, [r6, #0]
 800d998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d99c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e09c      	b.n	800dade <_printf_i+0x1e6>
 800d9a4:	6833      	ldr	r3, [r6, #0]
 800d9a6:	6820      	ldr	r0, [r4, #0]
 800d9a8:	1d19      	adds	r1, r3, #4
 800d9aa:	6031      	str	r1, [r6, #0]
 800d9ac:	0606      	lsls	r6, r0, #24
 800d9ae:	d501      	bpl.n	800d9b4 <_printf_i+0xbc>
 800d9b0:	681d      	ldr	r5, [r3, #0]
 800d9b2:	e003      	b.n	800d9bc <_printf_i+0xc4>
 800d9b4:	0645      	lsls	r5, r0, #25
 800d9b6:	d5fb      	bpl.n	800d9b0 <_printf_i+0xb8>
 800d9b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9bc:	2d00      	cmp	r5, #0
 800d9be:	da03      	bge.n	800d9c8 <_printf_i+0xd0>
 800d9c0:	232d      	movs	r3, #45	@ 0x2d
 800d9c2:	426d      	negs	r5, r5
 800d9c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9c8:	4858      	ldr	r0, [pc, #352]	@ (800db2c <_printf_i+0x234>)
 800d9ca:	230a      	movs	r3, #10
 800d9cc:	e011      	b.n	800d9f2 <_printf_i+0xfa>
 800d9ce:	6821      	ldr	r1, [r4, #0]
 800d9d0:	6833      	ldr	r3, [r6, #0]
 800d9d2:	0608      	lsls	r0, r1, #24
 800d9d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9d8:	d402      	bmi.n	800d9e0 <_printf_i+0xe8>
 800d9da:	0649      	lsls	r1, r1, #25
 800d9dc:	bf48      	it	mi
 800d9de:	b2ad      	uxthmi	r5, r5
 800d9e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9e2:	4852      	ldr	r0, [pc, #328]	@ (800db2c <_printf_i+0x234>)
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	bf14      	ite	ne
 800d9e8:	230a      	movne	r3, #10
 800d9ea:	2308      	moveq	r3, #8
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9f2:	6866      	ldr	r6, [r4, #4]
 800d9f4:	60a6      	str	r6, [r4, #8]
 800d9f6:	2e00      	cmp	r6, #0
 800d9f8:	db05      	blt.n	800da06 <_printf_i+0x10e>
 800d9fa:	6821      	ldr	r1, [r4, #0]
 800d9fc:	432e      	orrs	r6, r5
 800d9fe:	f021 0104 	bic.w	r1, r1, #4
 800da02:	6021      	str	r1, [r4, #0]
 800da04:	d04b      	beq.n	800da9e <_printf_i+0x1a6>
 800da06:	4616      	mov	r6, r2
 800da08:	fbb5 f1f3 	udiv	r1, r5, r3
 800da0c:	fb03 5711 	mls	r7, r3, r1, r5
 800da10:	5dc7      	ldrb	r7, [r0, r7]
 800da12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da16:	462f      	mov	r7, r5
 800da18:	42bb      	cmp	r3, r7
 800da1a:	460d      	mov	r5, r1
 800da1c:	d9f4      	bls.n	800da08 <_printf_i+0x110>
 800da1e:	2b08      	cmp	r3, #8
 800da20:	d10b      	bne.n	800da3a <_printf_i+0x142>
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	07df      	lsls	r7, r3, #31
 800da26:	d508      	bpl.n	800da3a <_printf_i+0x142>
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	6861      	ldr	r1, [r4, #4]
 800da2c:	4299      	cmp	r1, r3
 800da2e:	bfde      	ittt	le
 800da30:	2330      	movle	r3, #48	@ 0x30
 800da32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da3a:	1b92      	subs	r2, r2, r6
 800da3c:	6122      	str	r2, [r4, #16]
 800da3e:	f8cd a000 	str.w	sl, [sp]
 800da42:	464b      	mov	r3, r9
 800da44:	aa03      	add	r2, sp, #12
 800da46:	4621      	mov	r1, r4
 800da48:	4640      	mov	r0, r8
 800da4a:	f7ff fee7 	bl	800d81c <_printf_common>
 800da4e:	3001      	adds	r0, #1
 800da50:	d14a      	bne.n	800dae8 <_printf_i+0x1f0>
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	b004      	add	sp, #16
 800da58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	f043 0320 	orr.w	r3, r3, #32
 800da62:	6023      	str	r3, [r4, #0]
 800da64:	4832      	ldr	r0, [pc, #200]	@ (800db30 <_printf_i+0x238>)
 800da66:	2778      	movs	r7, #120	@ 0x78
 800da68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	6831      	ldr	r1, [r6, #0]
 800da70:	061f      	lsls	r7, r3, #24
 800da72:	f851 5b04 	ldr.w	r5, [r1], #4
 800da76:	d402      	bmi.n	800da7e <_printf_i+0x186>
 800da78:	065f      	lsls	r7, r3, #25
 800da7a:	bf48      	it	mi
 800da7c:	b2ad      	uxthmi	r5, r5
 800da7e:	6031      	str	r1, [r6, #0]
 800da80:	07d9      	lsls	r1, r3, #31
 800da82:	bf44      	itt	mi
 800da84:	f043 0320 	orrmi.w	r3, r3, #32
 800da88:	6023      	strmi	r3, [r4, #0]
 800da8a:	b11d      	cbz	r5, 800da94 <_printf_i+0x19c>
 800da8c:	2310      	movs	r3, #16
 800da8e:	e7ad      	b.n	800d9ec <_printf_i+0xf4>
 800da90:	4826      	ldr	r0, [pc, #152]	@ (800db2c <_printf_i+0x234>)
 800da92:	e7e9      	b.n	800da68 <_printf_i+0x170>
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	f023 0320 	bic.w	r3, r3, #32
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	e7f6      	b.n	800da8c <_printf_i+0x194>
 800da9e:	4616      	mov	r6, r2
 800daa0:	e7bd      	b.n	800da1e <_printf_i+0x126>
 800daa2:	6833      	ldr	r3, [r6, #0]
 800daa4:	6825      	ldr	r5, [r4, #0]
 800daa6:	6961      	ldr	r1, [r4, #20]
 800daa8:	1d18      	adds	r0, r3, #4
 800daaa:	6030      	str	r0, [r6, #0]
 800daac:	062e      	lsls	r6, r5, #24
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	d501      	bpl.n	800dab6 <_printf_i+0x1be>
 800dab2:	6019      	str	r1, [r3, #0]
 800dab4:	e002      	b.n	800dabc <_printf_i+0x1c4>
 800dab6:	0668      	lsls	r0, r5, #25
 800dab8:	d5fb      	bpl.n	800dab2 <_printf_i+0x1ba>
 800daba:	8019      	strh	r1, [r3, #0]
 800dabc:	2300      	movs	r3, #0
 800dabe:	6123      	str	r3, [r4, #16]
 800dac0:	4616      	mov	r6, r2
 800dac2:	e7bc      	b.n	800da3e <_printf_i+0x146>
 800dac4:	6833      	ldr	r3, [r6, #0]
 800dac6:	1d1a      	adds	r2, r3, #4
 800dac8:	6032      	str	r2, [r6, #0]
 800daca:	681e      	ldr	r6, [r3, #0]
 800dacc:	6862      	ldr	r2, [r4, #4]
 800dace:	2100      	movs	r1, #0
 800dad0:	4630      	mov	r0, r6
 800dad2:	f7f2 fb9d 	bl	8000210 <memchr>
 800dad6:	b108      	cbz	r0, 800dadc <_printf_i+0x1e4>
 800dad8:	1b80      	subs	r0, r0, r6
 800dada:	6060      	str	r0, [r4, #4]
 800dadc:	6863      	ldr	r3, [r4, #4]
 800dade:	6123      	str	r3, [r4, #16]
 800dae0:	2300      	movs	r3, #0
 800dae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dae6:	e7aa      	b.n	800da3e <_printf_i+0x146>
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	4632      	mov	r2, r6
 800daec:	4649      	mov	r1, r9
 800daee:	4640      	mov	r0, r8
 800daf0:	47d0      	blx	sl
 800daf2:	3001      	adds	r0, #1
 800daf4:	d0ad      	beq.n	800da52 <_printf_i+0x15a>
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	079b      	lsls	r3, r3, #30
 800dafa:	d413      	bmi.n	800db24 <_printf_i+0x22c>
 800dafc:	68e0      	ldr	r0, [r4, #12]
 800dafe:	9b03      	ldr	r3, [sp, #12]
 800db00:	4298      	cmp	r0, r3
 800db02:	bfb8      	it	lt
 800db04:	4618      	movlt	r0, r3
 800db06:	e7a6      	b.n	800da56 <_printf_i+0x15e>
 800db08:	2301      	movs	r3, #1
 800db0a:	4632      	mov	r2, r6
 800db0c:	4649      	mov	r1, r9
 800db0e:	4640      	mov	r0, r8
 800db10:	47d0      	blx	sl
 800db12:	3001      	adds	r0, #1
 800db14:	d09d      	beq.n	800da52 <_printf_i+0x15a>
 800db16:	3501      	adds	r5, #1
 800db18:	68e3      	ldr	r3, [r4, #12]
 800db1a:	9903      	ldr	r1, [sp, #12]
 800db1c:	1a5b      	subs	r3, r3, r1
 800db1e:	42ab      	cmp	r3, r5
 800db20:	dcf2      	bgt.n	800db08 <_printf_i+0x210>
 800db22:	e7eb      	b.n	800dafc <_printf_i+0x204>
 800db24:	2500      	movs	r5, #0
 800db26:	f104 0619 	add.w	r6, r4, #25
 800db2a:	e7f5      	b.n	800db18 <_printf_i+0x220>
 800db2c:	0800f43f 	.word	0x0800f43f
 800db30:	0800f450 	.word	0x0800f450

0800db34 <__sflush_r>:
 800db34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	0716      	lsls	r6, r2, #28
 800db3e:	4605      	mov	r5, r0
 800db40:	460c      	mov	r4, r1
 800db42:	d454      	bmi.n	800dbee <__sflush_r+0xba>
 800db44:	684b      	ldr	r3, [r1, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	dc02      	bgt.n	800db50 <__sflush_r+0x1c>
 800db4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	dd48      	ble.n	800dbe2 <__sflush_r+0xae>
 800db50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db52:	2e00      	cmp	r6, #0
 800db54:	d045      	beq.n	800dbe2 <__sflush_r+0xae>
 800db56:	2300      	movs	r3, #0
 800db58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db5c:	682f      	ldr	r7, [r5, #0]
 800db5e:	6a21      	ldr	r1, [r4, #32]
 800db60:	602b      	str	r3, [r5, #0]
 800db62:	d030      	beq.n	800dbc6 <__sflush_r+0x92>
 800db64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	0759      	lsls	r1, r3, #29
 800db6a:	d505      	bpl.n	800db78 <__sflush_r+0x44>
 800db6c:	6863      	ldr	r3, [r4, #4]
 800db6e:	1ad2      	subs	r2, r2, r3
 800db70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db72:	b10b      	cbz	r3, 800db78 <__sflush_r+0x44>
 800db74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db76:	1ad2      	subs	r2, r2, r3
 800db78:	2300      	movs	r3, #0
 800db7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db7c:	6a21      	ldr	r1, [r4, #32]
 800db7e:	4628      	mov	r0, r5
 800db80:	47b0      	blx	r6
 800db82:	1c43      	adds	r3, r0, #1
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	d106      	bne.n	800db96 <__sflush_r+0x62>
 800db88:	6829      	ldr	r1, [r5, #0]
 800db8a:	291d      	cmp	r1, #29
 800db8c:	d82b      	bhi.n	800dbe6 <__sflush_r+0xb2>
 800db8e:	4a2a      	ldr	r2, [pc, #168]	@ (800dc38 <__sflush_r+0x104>)
 800db90:	40ca      	lsrs	r2, r1
 800db92:	07d6      	lsls	r6, r2, #31
 800db94:	d527      	bpl.n	800dbe6 <__sflush_r+0xb2>
 800db96:	2200      	movs	r2, #0
 800db98:	6062      	str	r2, [r4, #4]
 800db9a:	04d9      	lsls	r1, r3, #19
 800db9c:	6922      	ldr	r2, [r4, #16]
 800db9e:	6022      	str	r2, [r4, #0]
 800dba0:	d504      	bpl.n	800dbac <__sflush_r+0x78>
 800dba2:	1c42      	adds	r2, r0, #1
 800dba4:	d101      	bne.n	800dbaa <__sflush_r+0x76>
 800dba6:	682b      	ldr	r3, [r5, #0]
 800dba8:	b903      	cbnz	r3, 800dbac <__sflush_r+0x78>
 800dbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800dbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbae:	602f      	str	r7, [r5, #0]
 800dbb0:	b1b9      	cbz	r1, 800dbe2 <__sflush_r+0xae>
 800dbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbb6:	4299      	cmp	r1, r3
 800dbb8:	d002      	beq.n	800dbc0 <__sflush_r+0x8c>
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f7ff fa94 	bl	800d0e8 <_free_r>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbc4:	e00d      	b.n	800dbe2 <__sflush_r+0xae>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4628      	mov	r0, r5
 800dbca:	47b0      	blx	r6
 800dbcc:	4602      	mov	r2, r0
 800dbce:	1c50      	adds	r0, r2, #1
 800dbd0:	d1c9      	bne.n	800db66 <__sflush_r+0x32>
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0c6      	beq.n	800db66 <__sflush_r+0x32>
 800dbd8:	2b1d      	cmp	r3, #29
 800dbda:	d001      	beq.n	800dbe0 <__sflush_r+0xac>
 800dbdc:	2b16      	cmp	r3, #22
 800dbde:	d11e      	bne.n	800dc1e <__sflush_r+0xea>
 800dbe0:	602f      	str	r7, [r5, #0]
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	e022      	b.n	800dc2c <__sflush_r+0xf8>
 800dbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbea:	b21b      	sxth	r3, r3
 800dbec:	e01b      	b.n	800dc26 <__sflush_r+0xf2>
 800dbee:	690f      	ldr	r7, [r1, #16]
 800dbf0:	2f00      	cmp	r7, #0
 800dbf2:	d0f6      	beq.n	800dbe2 <__sflush_r+0xae>
 800dbf4:	0793      	lsls	r3, r2, #30
 800dbf6:	680e      	ldr	r6, [r1, #0]
 800dbf8:	bf08      	it	eq
 800dbfa:	694b      	ldreq	r3, [r1, #20]
 800dbfc:	600f      	str	r7, [r1, #0]
 800dbfe:	bf18      	it	ne
 800dc00:	2300      	movne	r3, #0
 800dc02:	eba6 0807 	sub.w	r8, r6, r7
 800dc06:	608b      	str	r3, [r1, #8]
 800dc08:	f1b8 0f00 	cmp.w	r8, #0
 800dc0c:	dde9      	ble.n	800dbe2 <__sflush_r+0xae>
 800dc0e:	6a21      	ldr	r1, [r4, #32]
 800dc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dc12:	4643      	mov	r3, r8
 800dc14:	463a      	mov	r2, r7
 800dc16:	4628      	mov	r0, r5
 800dc18:	47b0      	blx	r6
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	dc08      	bgt.n	800dc30 <__sflush_r+0xfc>
 800dc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc26:	81a3      	strh	r3, [r4, #12]
 800dc28:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc30:	4407      	add	r7, r0
 800dc32:	eba8 0800 	sub.w	r8, r8, r0
 800dc36:	e7e7      	b.n	800dc08 <__sflush_r+0xd4>
 800dc38:	20400001 	.word	0x20400001

0800dc3c <_fflush_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	690b      	ldr	r3, [r1, #16]
 800dc40:	4605      	mov	r5, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	b913      	cbnz	r3, 800dc4c <_fflush_r+0x10>
 800dc46:	2500      	movs	r5, #0
 800dc48:	4628      	mov	r0, r5
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	b118      	cbz	r0, 800dc56 <_fflush_r+0x1a>
 800dc4e:	6a03      	ldr	r3, [r0, #32]
 800dc50:	b90b      	cbnz	r3, 800dc56 <_fflush_r+0x1a>
 800dc52:	f7ff f873 	bl	800cd3c <__sinit>
 800dc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f3      	beq.n	800dc46 <_fflush_r+0xa>
 800dc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc60:	07d0      	lsls	r0, r2, #31
 800dc62:	d404      	bmi.n	800dc6e <_fflush_r+0x32>
 800dc64:	0599      	lsls	r1, r3, #22
 800dc66:	d402      	bmi.n	800dc6e <_fflush_r+0x32>
 800dc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc6a:	f7ff fa0e 	bl	800d08a <__retarget_lock_acquire_recursive>
 800dc6e:	4628      	mov	r0, r5
 800dc70:	4621      	mov	r1, r4
 800dc72:	f7ff ff5f 	bl	800db34 <__sflush_r>
 800dc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc78:	07da      	lsls	r2, r3, #31
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	d4e4      	bmi.n	800dc48 <_fflush_r+0xc>
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	059b      	lsls	r3, r3, #22
 800dc82:	d4e1      	bmi.n	800dc48 <_fflush_r+0xc>
 800dc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc86:	f7ff fa01 	bl	800d08c <__retarget_lock_release_recursive>
 800dc8a:	e7dd      	b.n	800dc48 <_fflush_r+0xc>

0800dc8c <fiprintf>:
 800dc8c:	b40e      	push	{r1, r2, r3}
 800dc8e:	b503      	push	{r0, r1, lr}
 800dc90:	4601      	mov	r1, r0
 800dc92:	ab03      	add	r3, sp, #12
 800dc94:	4805      	ldr	r0, [pc, #20]	@ (800dcac <fiprintf+0x20>)
 800dc96:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc9a:	6800      	ldr	r0, [r0, #0]
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	f7ff fca5 	bl	800d5ec <_vfiprintf_r>
 800dca2:	b002      	add	sp, #8
 800dca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dca8:	b003      	add	sp, #12
 800dcaa:	4770      	bx	lr
 800dcac:	20000250 	.word	0x20000250

0800dcb0 <__swbuf_r>:
 800dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb2:	460e      	mov	r6, r1
 800dcb4:	4614      	mov	r4, r2
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	b118      	cbz	r0, 800dcc2 <__swbuf_r+0x12>
 800dcba:	6a03      	ldr	r3, [r0, #32]
 800dcbc:	b90b      	cbnz	r3, 800dcc2 <__swbuf_r+0x12>
 800dcbe:	f7ff f83d 	bl	800cd3c <__sinit>
 800dcc2:	69a3      	ldr	r3, [r4, #24]
 800dcc4:	60a3      	str	r3, [r4, #8]
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	071a      	lsls	r2, r3, #28
 800dcca:	d501      	bpl.n	800dcd0 <__swbuf_r+0x20>
 800dccc:	6923      	ldr	r3, [r4, #16]
 800dcce:	b943      	cbnz	r3, 800dce2 <__swbuf_r+0x32>
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f000 f82a 	bl	800dd2c <__swsetup_r>
 800dcd8:	b118      	cbz	r0, 800dce2 <__swbuf_r+0x32>
 800dcda:	f04f 37ff 	mov.w	r7, #4294967295
 800dcde:	4638      	mov	r0, r7
 800dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	6922      	ldr	r2, [r4, #16]
 800dce6:	1a98      	subs	r0, r3, r2
 800dce8:	6963      	ldr	r3, [r4, #20]
 800dcea:	b2f6      	uxtb	r6, r6
 800dcec:	4283      	cmp	r3, r0
 800dcee:	4637      	mov	r7, r6
 800dcf0:	dc05      	bgt.n	800dcfe <__swbuf_r+0x4e>
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f7ff ffa1 	bl	800dc3c <_fflush_r>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1ed      	bne.n	800dcda <__swbuf_r+0x2a>
 800dcfe:	68a3      	ldr	r3, [r4, #8]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	60a3      	str	r3, [r4, #8]
 800dd04:	6823      	ldr	r3, [r4, #0]
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	6022      	str	r2, [r4, #0]
 800dd0a:	701e      	strb	r6, [r3, #0]
 800dd0c:	6962      	ldr	r2, [r4, #20]
 800dd0e:	1c43      	adds	r3, r0, #1
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d004      	beq.n	800dd1e <__swbuf_r+0x6e>
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	07db      	lsls	r3, r3, #31
 800dd18:	d5e1      	bpl.n	800dcde <__swbuf_r+0x2e>
 800dd1a:	2e0a      	cmp	r6, #10
 800dd1c:	d1df      	bne.n	800dcde <__swbuf_r+0x2e>
 800dd1e:	4621      	mov	r1, r4
 800dd20:	4628      	mov	r0, r5
 800dd22:	f7ff ff8b 	bl	800dc3c <_fflush_r>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d0d9      	beq.n	800dcde <__swbuf_r+0x2e>
 800dd2a:	e7d6      	b.n	800dcda <__swbuf_r+0x2a>

0800dd2c <__swsetup_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4b29      	ldr	r3, [pc, #164]	@ (800ddd4 <__swsetup_r+0xa8>)
 800dd30:	4605      	mov	r5, r0
 800dd32:	6818      	ldr	r0, [r3, #0]
 800dd34:	460c      	mov	r4, r1
 800dd36:	b118      	cbz	r0, 800dd40 <__swsetup_r+0x14>
 800dd38:	6a03      	ldr	r3, [r0, #32]
 800dd3a:	b90b      	cbnz	r3, 800dd40 <__swsetup_r+0x14>
 800dd3c:	f7fe fffe 	bl	800cd3c <__sinit>
 800dd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd44:	0719      	lsls	r1, r3, #28
 800dd46:	d422      	bmi.n	800dd8e <__swsetup_r+0x62>
 800dd48:	06da      	lsls	r2, r3, #27
 800dd4a:	d407      	bmi.n	800dd5c <__swsetup_r+0x30>
 800dd4c:	2209      	movs	r2, #9
 800dd4e:	602a      	str	r2, [r5, #0]
 800dd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd54:	81a3      	strh	r3, [r4, #12]
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5a:	e033      	b.n	800ddc4 <__swsetup_r+0x98>
 800dd5c:	0758      	lsls	r0, r3, #29
 800dd5e:	d512      	bpl.n	800dd86 <__swsetup_r+0x5a>
 800dd60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd62:	b141      	cbz	r1, 800dd76 <__swsetup_r+0x4a>
 800dd64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd68:	4299      	cmp	r1, r3
 800dd6a:	d002      	beq.n	800dd72 <__swsetup_r+0x46>
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7ff f9bb 	bl	800d0e8 <_free_r>
 800dd72:	2300      	movs	r3, #0
 800dd74:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	6063      	str	r3, [r4, #4]
 800dd82:	6923      	ldr	r3, [r4, #16]
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	89a3      	ldrh	r3, [r4, #12]
 800dd88:	f043 0308 	orr.w	r3, r3, #8
 800dd8c:	81a3      	strh	r3, [r4, #12]
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	b94b      	cbnz	r3, 800dda6 <__swsetup_r+0x7a>
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd9c:	d003      	beq.n	800dda6 <__swsetup_r+0x7a>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4628      	mov	r0, r5
 800dda2:	f000 f89e 	bl	800dee2 <__smakebuf_r>
 800dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddaa:	f013 0201 	ands.w	r2, r3, #1
 800ddae:	d00a      	beq.n	800ddc6 <__swsetup_r+0x9a>
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	60a2      	str	r2, [r4, #8]
 800ddb4:	6962      	ldr	r2, [r4, #20]
 800ddb6:	4252      	negs	r2, r2
 800ddb8:	61a2      	str	r2, [r4, #24]
 800ddba:	6922      	ldr	r2, [r4, #16]
 800ddbc:	b942      	cbnz	r2, 800ddd0 <__swsetup_r+0xa4>
 800ddbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddc2:	d1c5      	bne.n	800dd50 <__swsetup_r+0x24>
 800ddc4:	bd38      	pop	{r3, r4, r5, pc}
 800ddc6:	0799      	lsls	r1, r3, #30
 800ddc8:	bf58      	it	pl
 800ddca:	6962      	ldrpl	r2, [r4, #20]
 800ddcc:	60a2      	str	r2, [r4, #8]
 800ddce:	e7f4      	b.n	800ddba <__swsetup_r+0x8e>
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	e7f7      	b.n	800ddc4 <__swsetup_r+0x98>
 800ddd4:	20000250 	.word	0x20000250

0800ddd8 <memmove>:
 800ddd8:	4288      	cmp	r0, r1
 800ddda:	b510      	push	{r4, lr}
 800dddc:	eb01 0402 	add.w	r4, r1, r2
 800dde0:	d902      	bls.n	800dde8 <memmove+0x10>
 800dde2:	4284      	cmp	r4, r0
 800dde4:	4623      	mov	r3, r4
 800dde6:	d807      	bhi.n	800ddf8 <memmove+0x20>
 800dde8:	1e43      	subs	r3, r0, #1
 800ddea:	42a1      	cmp	r1, r4
 800ddec:	d008      	beq.n	800de00 <memmove+0x28>
 800ddee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddf6:	e7f8      	b.n	800ddea <memmove+0x12>
 800ddf8:	4402      	add	r2, r0
 800ddfa:	4601      	mov	r1, r0
 800ddfc:	428a      	cmp	r2, r1
 800ddfe:	d100      	bne.n	800de02 <memmove+0x2a>
 800de00:	bd10      	pop	{r4, pc}
 800de02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de0a:	e7f7      	b.n	800ddfc <memmove+0x24>

0800de0c <_sbrk_r>:
 800de0c:	b538      	push	{r3, r4, r5, lr}
 800de0e:	4d06      	ldr	r5, [pc, #24]	@ (800de28 <_sbrk_r+0x1c>)
 800de10:	2300      	movs	r3, #0
 800de12:	4604      	mov	r4, r0
 800de14:	4608      	mov	r0, r1
 800de16:	602b      	str	r3, [r5, #0]
 800de18:	f7f5 ff58 	bl	8003ccc <_sbrk>
 800de1c:	1c43      	adds	r3, r0, #1
 800de1e:	d102      	bne.n	800de26 <_sbrk_r+0x1a>
 800de20:	682b      	ldr	r3, [r5, #0]
 800de22:	b103      	cbz	r3, 800de26 <_sbrk_r+0x1a>
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	bd38      	pop	{r3, r4, r5, pc}
 800de28:	20001a34 	.word	0x20001a34

0800de2c <abort>:
 800de2c:	b508      	push	{r3, lr}
 800de2e:	2006      	movs	r0, #6
 800de30:	f000 f8bc 	bl	800dfac <raise>
 800de34:	2001      	movs	r0, #1
 800de36:	f7f5 fed0 	bl	8003bda <_exit>

0800de3a <_realloc_r>:
 800de3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de3e:	4607      	mov	r7, r0
 800de40:	4614      	mov	r4, r2
 800de42:	460d      	mov	r5, r1
 800de44:	b921      	cbnz	r1, 800de50 <_realloc_r+0x16>
 800de46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de4a:	4611      	mov	r1, r2
 800de4c:	f7ff b9c0 	b.w	800d1d0 <_malloc_r>
 800de50:	b92a      	cbnz	r2, 800de5e <_realloc_r+0x24>
 800de52:	f7ff f949 	bl	800d0e8 <_free_r>
 800de56:	4625      	mov	r5, r4
 800de58:	4628      	mov	r0, r5
 800de5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5e:	f000 f8e3 	bl	800e028 <_malloc_usable_size_r>
 800de62:	4284      	cmp	r4, r0
 800de64:	4606      	mov	r6, r0
 800de66:	d802      	bhi.n	800de6e <_realloc_r+0x34>
 800de68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de6c:	d8f4      	bhi.n	800de58 <_realloc_r+0x1e>
 800de6e:	4621      	mov	r1, r4
 800de70:	4638      	mov	r0, r7
 800de72:	f7ff f9ad 	bl	800d1d0 <_malloc_r>
 800de76:	4680      	mov	r8, r0
 800de78:	b908      	cbnz	r0, 800de7e <_realloc_r+0x44>
 800de7a:	4645      	mov	r5, r8
 800de7c:	e7ec      	b.n	800de58 <_realloc_r+0x1e>
 800de7e:	42b4      	cmp	r4, r6
 800de80:	4622      	mov	r2, r4
 800de82:	4629      	mov	r1, r5
 800de84:	bf28      	it	cs
 800de86:	4632      	movcs	r2, r6
 800de88:	f7ff f901 	bl	800d08e <memcpy>
 800de8c:	4629      	mov	r1, r5
 800de8e:	4638      	mov	r0, r7
 800de90:	f7ff f92a 	bl	800d0e8 <_free_r>
 800de94:	e7f1      	b.n	800de7a <_realloc_r+0x40>

0800de96 <__swhatbuf_r>:
 800de96:	b570      	push	{r4, r5, r6, lr}
 800de98:	460c      	mov	r4, r1
 800de9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9e:	2900      	cmp	r1, #0
 800dea0:	b096      	sub	sp, #88	@ 0x58
 800dea2:	4615      	mov	r5, r2
 800dea4:	461e      	mov	r6, r3
 800dea6:	da0d      	bge.n	800dec4 <__swhatbuf_r+0x2e>
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800deae:	f04f 0100 	mov.w	r1, #0
 800deb2:	bf14      	ite	ne
 800deb4:	2340      	movne	r3, #64	@ 0x40
 800deb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800deba:	2000      	movs	r0, #0
 800debc:	6031      	str	r1, [r6, #0]
 800debe:	602b      	str	r3, [r5, #0]
 800dec0:	b016      	add	sp, #88	@ 0x58
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
 800dec4:	466a      	mov	r2, sp
 800dec6:	f000 f879 	bl	800dfbc <_fstat_r>
 800deca:	2800      	cmp	r0, #0
 800decc:	dbec      	blt.n	800dea8 <__swhatbuf_r+0x12>
 800dece:	9901      	ldr	r1, [sp, #4]
 800ded0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ded4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ded8:	4259      	negs	r1, r3
 800deda:	4159      	adcs	r1, r3
 800dedc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dee0:	e7eb      	b.n	800deba <__swhatbuf_r+0x24>

0800dee2 <__smakebuf_r>:
 800dee2:	898b      	ldrh	r3, [r1, #12]
 800dee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dee6:	079d      	lsls	r5, r3, #30
 800dee8:	4606      	mov	r6, r0
 800deea:	460c      	mov	r4, r1
 800deec:	d507      	bpl.n	800defe <__smakebuf_r+0x1c>
 800deee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800def2:	6023      	str	r3, [r4, #0]
 800def4:	6123      	str	r3, [r4, #16]
 800def6:	2301      	movs	r3, #1
 800def8:	6163      	str	r3, [r4, #20]
 800defa:	b003      	add	sp, #12
 800defc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defe:	ab01      	add	r3, sp, #4
 800df00:	466a      	mov	r2, sp
 800df02:	f7ff ffc8 	bl	800de96 <__swhatbuf_r>
 800df06:	9f00      	ldr	r7, [sp, #0]
 800df08:	4605      	mov	r5, r0
 800df0a:	4639      	mov	r1, r7
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7ff f95f 	bl	800d1d0 <_malloc_r>
 800df12:	b948      	cbnz	r0, 800df28 <__smakebuf_r+0x46>
 800df14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df18:	059a      	lsls	r2, r3, #22
 800df1a:	d4ee      	bmi.n	800defa <__smakebuf_r+0x18>
 800df1c:	f023 0303 	bic.w	r3, r3, #3
 800df20:	f043 0302 	orr.w	r3, r3, #2
 800df24:	81a3      	strh	r3, [r4, #12]
 800df26:	e7e2      	b.n	800deee <__smakebuf_r+0xc>
 800df28:	89a3      	ldrh	r3, [r4, #12]
 800df2a:	6020      	str	r0, [r4, #0]
 800df2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df38:	b15b      	cbz	r3, 800df52 <__smakebuf_r+0x70>
 800df3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 f84e 	bl	800dfe0 <_isatty_r>
 800df44:	b128      	cbz	r0, 800df52 <__smakebuf_r+0x70>
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	f023 0303 	bic.w	r3, r3, #3
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	81a3      	strh	r3, [r4, #12]
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	431d      	orrs	r5, r3
 800df56:	81a5      	strh	r5, [r4, #12]
 800df58:	e7cf      	b.n	800defa <__smakebuf_r+0x18>

0800df5a <_raise_r>:
 800df5a:	291f      	cmp	r1, #31
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4605      	mov	r5, r0
 800df60:	460c      	mov	r4, r1
 800df62:	d904      	bls.n	800df6e <_raise_r+0x14>
 800df64:	2316      	movs	r3, #22
 800df66:	6003      	str	r3, [r0, #0]
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	bd38      	pop	{r3, r4, r5, pc}
 800df6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df70:	b112      	cbz	r2, 800df78 <_raise_r+0x1e>
 800df72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df76:	b94b      	cbnz	r3, 800df8c <_raise_r+0x32>
 800df78:	4628      	mov	r0, r5
 800df7a:	f000 f853 	bl	800e024 <_getpid_r>
 800df7e:	4622      	mov	r2, r4
 800df80:	4601      	mov	r1, r0
 800df82:	4628      	mov	r0, r5
 800df84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df88:	f000 b83a 	b.w	800e000 <_kill_r>
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d00a      	beq.n	800dfa6 <_raise_r+0x4c>
 800df90:	1c59      	adds	r1, r3, #1
 800df92:	d103      	bne.n	800df9c <_raise_r+0x42>
 800df94:	2316      	movs	r3, #22
 800df96:	6003      	str	r3, [r0, #0]
 800df98:	2001      	movs	r0, #1
 800df9a:	e7e7      	b.n	800df6c <_raise_r+0x12>
 800df9c:	2100      	movs	r1, #0
 800df9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	4798      	blx	r3
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	e7e0      	b.n	800df6c <_raise_r+0x12>
	...

0800dfac <raise>:
 800dfac:	4b02      	ldr	r3, [pc, #8]	@ (800dfb8 <raise+0xc>)
 800dfae:	4601      	mov	r1, r0
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	f7ff bfd2 	b.w	800df5a <_raise_r>
 800dfb6:	bf00      	nop
 800dfb8:	20000250 	.word	0x20000250

0800dfbc <_fstat_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	4d07      	ldr	r5, [pc, #28]	@ (800dfdc <_fstat_r+0x20>)
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4608      	mov	r0, r1
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	602b      	str	r3, [r5, #0]
 800dfca:	f7f5 fe56 	bl	8003c7a <_fstat>
 800dfce:	1c43      	adds	r3, r0, #1
 800dfd0:	d102      	bne.n	800dfd8 <_fstat_r+0x1c>
 800dfd2:	682b      	ldr	r3, [r5, #0]
 800dfd4:	b103      	cbz	r3, 800dfd8 <_fstat_r+0x1c>
 800dfd6:	6023      	str	r3, [r4, #0]
 800dfd8:	bd38      	pop	{r3, r4, r5, pc}
 800dfda:	bf00      	nop
 800dfdc:	20001a34 	.word	0x20001a34

0800dfe0 <_isatty_r>:
 800dfe0:	b538      	push	{r3, r4, r5, lr}
 800dfe2:	4d06      	ldr	r5, [pc, #24]	@ (800dffc <_isatty_r+0x1c>)
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	602b      	str	r3, [r5, #0]
 800dfec:	f7f5 fe55 	bl	8003c9a <_isatty>
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	d102      	bne.n	800dffa <_isatty_r+0x1a>
 800dff4:	682b      	ldr	r3, [r5, #0]
 800dff6:	b103      	cbz	r3, 800dffa <_isatty_r+0x1a>
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	bd38      	pop	{r3, r4, r5, pc}
 800dffc:	20001a34 	.word	0x20001a34

0800e000 <_kill_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d07      	ldr	r5, [pc, #28]	@ (800e020 <_kill_r+0x20>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	4611      	mov	r1, r2
 800e00c:	602b      	str	r3, [r5, #0]
 800e00e:	f7f5 fdd4 	bl	8003bba <_kill>
 800e012:	1c43      	adds	r3, r0, #1
 800e014:	d102      	bne.n	800e01c <_kill_r+0x1c>
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	b103      	cbz	r3, 800e01c <_kill_r+0x1c>
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	bd38      	pop	{r3, r4, r5, pc}
 800e01e:	bf00      	nop
 800e020:	20001a34 	.word	0x20001a34

0800e024 <_getpid_r>:
 800e024:	f7f5 bdc1 	b.w	8003baa <_getpid>

0800e028 <_malloc_usable_size_r>:
 800e028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e02c:	1f18      	subs	r0, r3, #4
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bfbc      	itt	lt
 800e032:	580b      	ldrlt	r3, [r1, r0]
 800e034:	18c0      	addlt	r0, r0, r3
 800e036:	4770      	bx	lr

0800e038 <_init>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	bf00      	nop
 800e03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e03e:	bc08      	pop	{r3}
 800e040:	469e      	mov	lr, r3
 800e042:	4770      	bx	lr

0800e044 <_fini>:
 800e044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e046:	bf00      	nop
 800e048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04a:	bc08      	pop	{r3}
 800e04c:	469e      	mov	lr, r3
 800e04e:	4770      	bx	lr
