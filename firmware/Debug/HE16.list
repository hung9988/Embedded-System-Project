
HE16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000f1a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d08c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000cbc  0800d22c  0800d22c  0000e22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800dee8  0800dee8  0000f1a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800dee8  0800dee8  0000eee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800def0  0800def0  0000f1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800def0  0800def0  0000eef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800def4  0800def4  0000eef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001a0  20000000  0800def8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001270  200001a0  0800e098  0000f1a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001410  0800e098  0000f410  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e163  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053d2  00000000  00000000  0002d333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001223  00000000  00000000  00033dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020111  00000000  00000000  00034feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e324  00000000  00000000  000550fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9a74  00000000  00000000  00073420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ce94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a40  00000000  00000000  0012ced8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00133918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d214 	.word	0x0800d214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	0800d214 	.word	0x0800d214

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_task>:

  tud_cdc_write(msg, len);
  tud_cdc_write_flush(); // Make sure data is sent
}

void cdc_task(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f005 fc22 	bl	8005e2c <tud_cdc_n_connected>
 80005e8:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f000 80b8 	beq.w	8000760 <cdc_task+0x184>
    // Handle streaming if active
    handle_streaming();
 80005f0:	f000 f95c 	bl	80008ac <handle_streaming>
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f005 fc57 	bl	8005ea8 <tud_cdc_n_available>
 80005fa:	4603      	mov	r3, r0

    if (tud_cdc_available()) {
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f000 80b5 	beq.w	800076c <cdc_task+0x190>
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	657b      	str	r3, [r7, #84]	@ 0x54
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
TU_ATTR_ALWAYS_INLINE static inline int32_t tud_cdc_read_char(void) {
  return tud_cdc_n_read_char(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_read(void* buffer, uint32_t bufsize) {
  return tud_cdc_n_read(0, buffer, bufsize);
 800060a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800060c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800060e:	2000      	movs	r0, #0
 8000610:	f005 fc60 	bl	8005ed4 <tud_cdc_n_read>
 8000614:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000616:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800061c:	e091      	b.n	8000742 <cdc_task+0x166>
        char c = buf[i];
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle Ctrl+C to stop streaming
        if (c == 3) { // Ctrl+C ASCII code
 800062a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10c      	bne.n	800064c <cdc_task+0x70>
          if (streaming_active) {
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <cdc_task+0x198>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d07b      	beq.n	8000732 <cdc_task+0x156>
            stop_streaming();
 800063a:	f000 f92b 	bl	8000894 <stop_streaming>
            cdc_write_string_chunked("\r\nStreaming stopped\r\n");
 800063e:	484e      	ldr	r0, [pc, #312]	@ (8000778 <cdc_task+0x19c>)
 8000640:	f000 f8a6 	bl	8000790 <cdc_write_string_chunked>
            cdc_write_string_chunked("Ready> ");
 8000644:	484d      	ldr	r0, [pc, #308]	@ (800077c <cdc_task+0x1a0>)
 8000646:	f000 f8a3 	bl	8000790 <cdc_write_string_chunked>
 800064a:	e077      	b.n	800073c <cdc_task+0x160>
          }
          continue;
        }

        // Handle backspace
        if (c == '\b' || c == 127) {
 800064c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000650:	2b08      	cmp	r3, #8
 8000652:	d003      	beq.n	800065c <cdc_task+0x80>
 8000654:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000658:	2b7f      	cmp	r3, #127	@ 0x7f
 800065a:	d114      	bne.n	8000686 <cdc_task+0xaa>
          if (cmd_index > 0 && !streaming_active) {
 800065c:	4b48      	ldr	r3, [pc, #288]	@ (8000780 <cdc_task+0x1a4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d068      	beq.n	8000736 <cdc_task+0x15a>
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <cdc_task+0x198>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d061      	beq.n	8000736 <cdc_task+0x15a>
            cmd_index--;
 8000672:	4b43      	ldr	r3, [pc, #268]	@ (8000780 <cdc_task+0x1a4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b41      	ldr	r3, [pc, #260]	@ (8000780 <cdc_task+0x1a4>)
 800067c:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 800067e:	4841      	ldr	r0, [pc, #260]	@ (8000784 <cdc_task+0x1a8>)
 8000680:	f000 f886 	bl	8000790 <cdc_write_string_chunked>
          if (cmd_index > 0 && !streaming_active) {
 8000684:	e057      	b.n	8000736 <cdc_task+0x15a>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b0d      	cmp	r3, #13
 800068c:	d003      	beq.n	8000696 <cdc_task+0xba>
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b0a      	cmp	r3, #10
 8000694:	d124      	bne.n	80006e0 <cdc_task+0x104>
          if (!streaming_active) {
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <cdc_task+0x198>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f083 0301 	eor.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d04a      	beq.n	800073a <cdc_task+0x15e>
            cdc_write_string_chunked("\r\n");
 80006a4:	4838      	ldr	r0, [pc, #224]	@ (8000788 <cdc_task+0x1ac>)
 80006a6:	f000 f873 	bl	8000790 <cdc_write_string_chunked>
            cmd_buffer[cmd_index] = '\0';
 80006aa:	4b35      	ldr	r3, [pc, #212]	@ (8000780 <cdc_task+0x1a4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b36      	ldr	r3, [pc, #216]	@ (800078c <cdc_task+0x1b0>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	5499      	strb	r1, [r3, r2]

            if (cmd_index > 0) {
 80006b6:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <cdc_task+0x1a4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <cdc_task+0xee>
              process_command(cmd_buffer);
 80006be:	4833      	ldr	r0, [pc, #204]	@ (800078c <cdc_task+0x1b0>)
 80006c0:	f000 f9cc 	bl	8000a5c <process_command>
              cmd_index = 0;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <cdc_task+0x1a4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
            }

            if (!streaming_active) {
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <cdc_task+0x198>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d030      	beq.n	800073a <cdc_task+0x15e>
              cdc_write_string_chunked("Ready> ");
 80006d8:	4828      	ldr	r0, [pc, #160]	@ (800077c <cdc_task+0x1a0>)
 80006da:	f000 f859 	bl	8000790 <cdc_write_string_chunked>
          if (!streaming_active) {
 80006de:	e02c      	b.n	800073a <cdc_task+0x15e>
            }
          }
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1 && !streaming_active) {
 80006e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006e4:	2b1f      	cmp	r3, #31
 80006e6:	d929      	bls.n	800073c <cdc_task+0x160>
 80006e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80006ee:	d825      	bhi.n	800073c <cdc_task+0x160>
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <cdc_task+0x1a4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80006f6:	d821      	bhi.n	800073c <cdc_task+0x160>
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <cdc_task+0x198>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d01a      	beq.n	800073c <cdc_task+0x160>
          cmd_buffer[cmd_index++] = c;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <cdc_task+0x1a4>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	b2d1      	uxtb	r1, r2
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <cdc_task+0x1a4>)
 8000710:	7011      	strb	r1, [r2, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <cdc_task+0x1b0>)
 800071a:	5499      	strb	r1, [r3, r2]
 800071c:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000722:	2301      	movs	r3, #1
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000728:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800072a:	2000      	movs	r0, #0
 800072c:	f005 fbfe 	bl	8005f2c <tud_cdc_n_write>
 8000730:	e004      	b.n	800073c <cdc_task+0x160>
          continue;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <cdc_task+0x160>
          if (cmd_index > 0 && !streaming_active) {
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <cdc_task+0x160>
          if (!streaming_active) {
 800073a:	bf00      	nop
      for (uint32_t i = 0; i < count; i++) {
 800073c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800073e:	3301      	adds	r3, #1
 8000740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000742:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000746:	429a      	cmp	r2, r3
 8000748:	f4ff af69 	bcc.w	800061e <cdc_task+0x42>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      if (!streaming_active) {
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <cdc_task+0x198>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f083 0301 	eor.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d008      	beq.n	800076c <cdc_task+0x190>
        cdc_write_flush_wait();
 800075a:	f000 f864 	bl	8000826 <cdc_write_flush_wait>
  } else {
    // Reset flags when disconnected
    cmd_index = 0;
    streaming_active = false;
  }
}
 800075e:	e005      	b.n	800076c <cdc_task+0x190>
    cmd_index = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <cdc_task+0x1a4>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    streaming_active = false;
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <cdc_task+0x198>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3760      	adds	r7, #96	@ 0x60
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200001fd 	.word	0x200001fd
 8000778:	0800d248 	.word	0x0800d248
 800077c:	0800d260 	.word	0x0800d260
 8000780:	200001fc 	.word	0x200001fc
 8000784:	0800d268 	.word	0x0800d268
 8000788:	0800d26c 	.word	0x0800d26c
 800078c:	200001bc 	.word	0x200001bc

08000790 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (!str)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d03f      	beq.n	800081e <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fd28 	bl	80001f4 <strlen>
 80007a4:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 80007aa:	2338      	movs	r3, #56	@ 0x38
 80007ac:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 80007ae:	e031      	b.n	8000814 <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	bf28      	it	cs
 80007bc:	4613      	movcs	r3, r2
 80007be:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 80007c0:	e005      	b.n	80007ce <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80007c2:	2100      	movs	r1, #0
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f007 fcbe 	bl	8008148 <tud_task_ext>
}
 80007cc:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f005 fc62 	bl	8006098 <tud_cdc_n_write_available>
 80007d4:	4602      	mov	r2, r0
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	4293      	cmp	r3, r2
 80007da:	d8f2      	bhi.n	80007c2 <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	4413      	add	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	2000      	movs	r0, #0
 80007ee:	f005 fb9d 	bl	8005f2c <tud_cdc_n_write>
    sent += to_send;
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f005 fc4c 	bl	8006098 <tud_cdc_n_write_available>
 8000800:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4293      	cmp	r3, r2
 8000806:	d803      	bhi.n	8000810 <cdc_write_string_chunked+0x80>
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	d301      	bcc.n	8000814 <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 8000810:	f000 f809 	bl	8000826 <cdc_write_flush_wait>
  while (sent < len) {
 8000814:	69fa      	ldr	r2, [r7, #28]
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3c9      	bcc.n	80007b0 <cdc_write_string_chunked+0x20>
 800081c:	e000      	b.n	8000820 <cdc_write_string_chunked+0x90>
    return;
 800081e:	bf00      	nop
    }
  }
}
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800082c:	2000      	movs	r0, #0
 800082e:	f005 fbb1 	bl	8005f94 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 8000836:	e008      	b.n	800084a <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000838:	2100      	movs	r1, #0
 800083a:	f04f 30ff 	mov.w	r0, #4294967295
 800083e:	f007 fc83 	bl	8008148 <tud_task_ext>
}
 8000842:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 800084a:	2000      	movs	r0, #0
 800084c:	f005 fc24 	bl	8006098 <tud_cdc_n_write_available>
 8000850:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 8000852:	2b7f      	cmp	r3, #127	@ 0x7f
 8000854:	d804      	bhi.n	8000860 <cdc_write_flush_wait+0x3a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f242 720f 	movw	r2, #9999	@ 0x270f
 800085c:	4293      	cmp	r3, r2
 800085e:	d9eb      	bls.n	8000838 <cdc_write_flush_wait+0x12>
  }
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <start_streaming>:

static void start_streaming(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  streaming_active = true;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <start_streaming+0x20>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
  last_stream_time = HAL_GetTick();
 8000872:	f002 fc8b 	bl	800318c <HAL_GetTick>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <start_streaming+0x24>)
 800087c:	601a      	str	r2, [r3, #0]
  cdc_write_string_chunked("Starting ADC stream (Press Ctrl+C to stop)...\r\n");
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <start_streaming+0x28>)
 8000880:	f7ff ff86 	bl	8000790 <cdc_write_string_chunked>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001fd 	.word	0x200001fd
 800088c:	20000200 	.word	0x20000200
 8000890:	0800d270 	.word	0x0800d270

08000894 <stop_streaming>:

static void stop_streaming(void) {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  streaming_active = false;
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <stop_streaming+0x14>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200001fd 	.word	0x200001fd

080008ac <handle_streaming>:

static void handle_streaming(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80008b2:	af00      	add	r7, sp, #0
  if (!streaming_active || !tud_cdc_connected()) {
 80008b4:	4b63      	ldr	r3, [pc, #396]	@ (8000a44 <handle_streaming+0x198>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 80ba 	bne.w	8000a38 <handle_streaming+0x18c>
  return tud_cdc_n_connected(0);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f005 fab1 	bl	8005e2c <tud_cdc_n_connected>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f083 0301 	eor.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 80b0 	bne.w	8000a38 <handle_streaming+0x18c>
    return;
  }

  uint32_t current_time = HAL_GetTick();
 80008d8:	f002 fc58 	bl	800318c <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  // Check if it's time to send data (1ms interval for ~1kHz)
  if (current_time - last_stream_time >= STREAM_INTERVAL_MS) {
 80008e2:	4b59      	ldr	r3, [pc, #356]	@ (8000a48 <handle_streaming+0x19c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2201      	movs	r2, #1
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f0c0 80a3 	bcc.w	8000a3a <handle_streaming+0x18e>
    last_stream_time = current_time;
 80008f4:	4a54      	ldr	r2, [pc, #336]	@ (8000a48 <handle_streaming+0x19c>)
 80008f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80008fa:	6013      	str	r3, [r2, #0]

    // Build CSV string with all keyboard_keys state.value data
    char csv_buffer[512];
    int pos = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

    // Iterate through the keyboard_keys array and collect state.value for each key
    bool first = true;
 8000902:	2301      	movs	r3, #1
 8000904:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 800090e:	e061      	b.n	80009d4 <handle_streaming+0x128>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000916:	e04d      	b.n	80009b4 <handle_streaming+0x108>
        if (!first) {
 8000918:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800091c:	f083 0301 	eor.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d011      	beq.n	800094a <handle_streaming+0x9e>
          pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, ",");
 8000926:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800092a:	463a      	mov	r2, r7
 800092c:	18d0      	adds	r0, r2, r3
 800092e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000932:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000936:	4a45      	ldr	r2, [pc, #276]	@ (8000a4c <handle_streaming+0x1a0>)
 8000938:	4619      	mov	r1, r3
 800093a:	f00b fb45 	bl	800bfc8 <sniprintf>
 800093e:	4602      	mov	r2, r0
 8000940:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000944:	4413      	add	r3, r2
 8000946:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        }
        first = false;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

        // Get the state.value from the current key
        uint16_t value = keyboard_keys[adc_ch][amux_ch].state.value;
 8000950:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8000954:	f897 2211 	ldrb.w	r2, [r7, #529]	@ 0x211
 8000958:	493d      	ldr	r1, [pc, #244]	@ (8000a50 <handle_streaming+0x1a4>)
 800095a:	2032      	movs	r0, #50	@ 0x32
 800095c:	fb00 f202 	mul.w	r2, r0, r2
 8000960:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000964:	fb00 f303 	mul.w	r3, r0, r3
 8000968:	4413      	add	r3, r2
 800096a:	440b      	add	r3, r1
 800096c:	3318      	adds	r3, #24
 800096e:	795a      	ldrb	r2, [r3, #5]
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	4313      	orrs	r3, r2
 8000976:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
        pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "%u", value);
 800097a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800097e:	463a      	mov	r2, r7
 8000980:	18d0      	adds	r0, r2, r3
 8000982:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000986:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800098a:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800098e:	4a31      	ldr	r2, [pc, #196]	@ (8000a54 <handle_streaming+0x1a8>)
 8000990:	f00b fb1a 	bl	800bfc8 <sniprintf>
 8000994:	4602      	mov	r2, r0
 8000996:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800099a:	4413      	add	r3, r2
 800099c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

        // Safety check to prevent buffer overflow
        if (pos >= sizeof(csv_buffer) - 10) {
 80009a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009a4:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80009a8:	d209      	bcs.n	80009be <handle_streaming+0x112>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 80009aa:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009ae:	3301      	adds	r3, #1
 80009b0:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 80009b4:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d9ad      	bls.n	8000918 <handle_streaming+0x6c>
 80009bc:	e000      	b.n	80009c0 <handle_streaming+0x114>
          break;
 80009be:	bf00      	nop
        }
      }
      if (pos >= sizeof(csv_buffer) - 10) {
 80009c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009c4:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80009c8:	d209      	bcs.n	80009de <handle_streaming+0x132>
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 80009ca:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80009ce:	3301      	adds	r3, #1
 80009d0:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80009d4:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d099      	beq.n	8000910 <handle_streaming+0x64>
 80009dc:	e000      	b.n	80009e0 <handle_streaming+0x134>
        break;
 80009de:	bf00      	nop
      }
    }

    // Add newline
    pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "\r\n");
 80009e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009e4:	463a      	mov	r2, r7
 80009e6:	18d0      	adds	r0, r2, r3
 80009e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80009f0:	4a19      	ldr	r2, [pc, #100]	@ (8000a58 <handle_streaming+0x1ac>)
 80009f2:	4619      	mov	r1, r3
 80009f4:	f00b fae8 	bl	800bfc8 <sniprintf>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009fe:	4413      	add	r3, r2
 8000a00:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  return tud_cdc_n_write_available(0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f005 fb47 	bl	8006098 <tud_cdc_n_write_available>
 8000a0a:	4602      	mov	r2, r0

    // Send the CSV data
    if (tud_cdc_write_available() >= pos) {
 8000a0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d312      	bcc.n	8000a3a <handle_streaming+0x18e>
      tud_cdc_write(csv_buffer, pos);
 8000a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a18:	463a      	mov	r2, r7
 8000a1a:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8000a1e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  return tud_cdc_n_write(0, buffer, bufsize);
 8000a22:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8000a26:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f005 fa7e 	bl	8005f2c <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f005 faaf 	bl	8005f94 <tud_cdc_n_write_flush>
 8000a36:	e000      	b.n	8000a3a <handle_streaming+0x18e>
    return;
 8000a38:	bf00      	nop
      tud_cdc_write_flush();
    }
  }
}
 8000a3a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001fd 	.word	0x200001fd
 8000a48:	20000200 	.word	0x20000200
 8000a4c:	0800d2a0 	.word	0x0800d2a0
 8000a50:	20000210 	.word	0x20000210
 8000a54:	0800d2a4 	.word	0x0800d2a4
 8000a58:	0800d26c 	.word	0x0800d26c

08000a5c <process_command>:

static void process_command(char *cmd) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b096      	sub	sp, #88	@ 0x58
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a68:	e018      	b.n	8000a9c <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 8000a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b40      	cmp	r3, #64	@ 0x40
 8000a74:	d90f      	bls.n	8000a96 <process_command+0x3a>
 8000a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a80:	d809      	bhi.n	8000a96 <process_command+0x3a>
      cmd[i] += 32;
 8000a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	440b      	add	r3, r1
 8000a90:	3220      	adds	r2, #32
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 8000a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a98:	3301      	adds	r3, #1
 8000a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e0      	bne.n	8000a6a <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 8000aa8:	49ad      	ldr	r1, [pc, #692]	@ (8000d60 <process_command+0x304>)
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f00b fb0e 	bl	800c0cc <strtok>
 8000ab0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 8189 	beq.w	8000dcc <process_command+0x370>
    return;

  if (strcmp(token, "help") == 0) {
 8000aba:	49aa      	ldr	r1, [pc, #680]	@ (8000d64 <process_command+0x308>)
 8000abc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000abe:	f7ff fb8f 	bl	80001e0 <strcmp>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <process_command+0x72>
    print_help();
 8000ac8:	f000 f98a 	bl	8000de0 <print_help>
 8000acc:	e17f      	b.n	8000dce <process_command+0x372>
  } else if (strcmp(token, "show") == 0) {
 8000ace:	49a6      	ldr	r1, [pc, #664]	@ (8000d68 <process_command+0x30c>)
 8000ad0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ad2:	f7ff fb85 	bl	80001e0 <strcmp>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <process_command+0x86>
    print_config();
 8000adc:	f000 f9ca 	bl	8000e74 <print_config>
 8000ae0:	e175      	b.n	8000dce <process_command+0x372>
  } else if (strcmp(token, "stream") == 0) {
 8000ae2:	49a2      	ldr	r1, [pc, #648]	@ (8000d6c <process_command+0x310>)
 8000ae4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ae6:	f7ff fb7b 	bl	80001e0 <strcmp>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <process_command+0x9a>
    start_streaming();
 8000af0:	f7ff feba 	bl	8000868 <start_streaming>
 8000af4:	e16b      	b.n	8000dce <process_command+0x372>
  } else if (strcmp(token, "set") == 0) {
 8000af6:	499e      	ldr	r1, [pc, #632]	@ (8000d70 <process_command+0x314>)
 8000af8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000afa:	f7ff fb71 	bl	80001e0 <strcmp>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d118      	bne.n	8000b36 <process_command+0xda>
    char *param = strtok(NULL, " ");
 8000b04:	4996      	ldr	r1, [pc, #600]	@ (8000d60 <process_command+0x304>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f00b fae0 	bl	800c0cc <strtok>
 8000b0c:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 8000b0e:	4994      	ldr	r1, [pc, #592]	@ (8000d60 <process_command+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f00b fadb 	bl	800c0cc <strtok>
 8000b16:	6138      	str	r0, [r7, #16]
    if (param && value) {
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <process_command+0xd2>
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <process_command+0xd2>
      set_config_value(param, value);
 8000b24:	6939      	ldr	r1, [r7, #16]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f000 f9f8 	bl	8000f1c <set_config_value>
 8000b2c:	e14f      	b.n	8000dce <process_command+0x372>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000b2e:	4891      	ldr	r0, [pc, #580]	@ (8000d74 <process_command+0x318>)
 8000b30:	f7ff fe2e 	bl	8000790 <cdc_write_string_chunked>
 8000b34:	e14b      	b.n	8000dce <process_command+0x372>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000b36:	4990      	ldr	r1, [pc, #576]	@ (8000d78 <process_command+0x31c>)
 8000b38:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b3a:	f7ff fb51 	bl	80001e0 <strcmp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d11c      	bne.n	8000b7e <process_command+0x122>
    char *layer_str = strtok(NULL, " ");
 8000b44:	4986      	ldr	r1, [pc, #536]	@ (8000d60 <process_command+0x304>)
 8000b46:	2000      	movs	r0, #0
 8000b48:	f00b fac0 	bl	800c0cc <strtok>
 8000b4c:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d010      	beq.n	8000b76 <process_command+0x11a>
      uint8_t layer = atoi(layer_str);
 8000b54:	69f8      	ldr	r0, [r7, #28]
 8000b56:	f00b f8ec 	bl	800bd32 <atoi>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 8000b5e:	7efb      	ldrb	r3, [r7, #27]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d804      	bhi.n	8000b6e <process_command+0x112>
        print_keymap(layer);
 8000b64:	7efb      	ldrb	r3, [r7, #27]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fa6e 	bl	8001048 <print_keymap>
 8000b6c:	e12f      	b.n	8000dce <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 8000b6e:	4883      	ldr	r0, [pc, #524]	@ (8000d7c <process_command+0x320>)
 8000b70:	f7ff fe0e 	bl	8000790 <cdc_write_string_chunked>
 8000b74:	e12b      	b.n	8000dce <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000b76:	4882      	ldr	r0, [pc, #520]	@ (8000d80 <process_command+0x324>)
 8000b78:	f7ff fe0a 	bl	8000790 <cdc_write_string_chunked>
 8000b7c:	e127      	b.n	8000dce <process_command+0x372>
    }
  } else if (strcmp(token, "setkey") == 0) {
 8000b7e:	4981      	ldr	r1, [pc, #516]	@ (8000d84 <process_command+0x328>)
 8000b80:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b82:	f7ff fb2d 	bl	80001e0 <strcmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d154      	bne.n	8000c36 <process_command+0x1da>
    char *layer_str = strtok(NULL, " ");
 8000b8c:	4974      	ldr	r1, [pc, #464]	@ (8000d60 <process_command+0x304>)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f00b fa9c 	bl	800c0cc <strtok>
 8000b94:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000b96:	4972      	ldr	r1, [pc, #456]	@ (8000d60 <process_command+0x304>)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f00b fa97 	bl	800c0cc <strtok>
 8000b9e:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000ba0:	496f      	ldr	r1, [pc, #444]	@ (8000d60 <process_command+0x304>)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f00b fa92 	bl	800c0cc <strtok>
 8000ba8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 8000baa:	496d      	ldr	r1, [pc, #436]	@ (8000d60 <process_command+0x304>)
 8000bac:	2000      	movs	r0, #0
 8000bae:	f00b fa8d 	bl	800c0cc <strtok>
 8000bb2:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d039      	beq.n	8000c2e <process_command+0x1d2>
 8000bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d036      	beq.n	8000c2e <process_command+0x1d2>
 8000bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d033      	beq.n	8000c2e <process_command+0x1d2>
 8000bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d030      	beq.n	8000c2e <process_command+0x1d2>
      uint8_t layer = atoi(layer_str);
 8000bcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000bce:	f00b f8b0 	bl	800bd32 <atoi>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 8000bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000bda:	f00b f8aa 	bl	800bd32 <atoi>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 8000be4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000be6:	f00b f8a4 	bl	800bd32 <atoi>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 8000bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bf2:	f00b f89e 	bl	800bd32 <atoi>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d811      	bhi.n	8000c26 <process_command+0x1ca>
 8000c02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d80d      	bhi.n	8000c26 <process_command+0x1ca>
 8000c0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d809      	bhi.n	8000c26 <process_command+0x1ca>
        set_keymap_value(layer, row, col, value);
 8000c12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c14:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000c18:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000c1c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000c20:	f000 fb58 	bl	80012d4 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 8000c24:	e0d3      	b.n	8000dce <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000c26:	4858      	ldr	r0, [pc, #352]	@ (8000d88 <process_command+0x32c>)
 8000c28:	f7ff fdb2 	bl	8000790 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 8000c2c:	e0cf      	b.n	8000dce <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000c2e:	4857      	ldr	r0, [pc, #348]	@ (8000d8c <process_command+0x330>)
 8000c30:	f7ff fdae 	bl	8000790 <cdc_write_string_chunked>
 8000c34:	e0cb      	b.n	8000dce <process_command+0x372>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000c36:	4956      	ldr	r1, [pc, #344]	@ (8000d90 <process_command+0x334>)
 8000c38:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000c3a:	f7ff fad1 	bl	80001e0 <strcmp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 8082 	bne.w	8000d4a <process_command+0x2ee>
    char *layer_str = strtok(NULL, " ");
 8000c46:	4946      	ldr	r1, [pc, #280]	@ (8000d60 <process_command+0x304>)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f00b fa3f 	bl	800c0cc <strtok>
 8000c4e:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000c50:	4943      	ldr	r1, [pc, #268]	@ (8000d60 <process_command+0x304>)
 8000c52:	2000      	movs	r0, #0
 8000c54:	f00b fa3a 	bl	800c0cc <strtok>
 8000c58:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000c5a:	4941      	ldr	r1, [pc, #260]	@ (8000d60 <process_command+0x304>)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f00b fa35 	bl	800c0cc <strtok>
 8000c62:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d06b      	beq.n	8000d42 <process_command+0x2e6>
 8000c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d068      	beq.n	8000d42 <process_command+0x2e6>
 8000c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d065      	beq.n	8000d42 <process_command+0x2e6>
      uint8_t layer = atoi(layer_str);
 8000c76:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c78:	f00b f85b 	bl	800bd32 <atoi>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000c82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c84:	f00b f855 	bl	800bd32 <atoi>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000c8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000c90:	f00b f84f 	bl	800bd32 <atoi>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000c9a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d84b      	bhi.n	8000d3a <process_command+0x2de>
 8000ca2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d847      	bhi.n	8000d3a <process_command+0x2de>
 8000caa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d843      	bhi.n	8000d3a <process_command+0x2de>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000cb8:	4929      	ldr	r1, [pc, #164]	@ (8000d60 <process_command+0x304>)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f00b fa06 	bl	800c0cc <strtok>
 8000cc0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000cc2:	e015      	b.n	8000cf0 <process_command+0x294>
          values[value_count] = atoi(value_str);
 8000cc4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000cc6:	f00b f834 	bl	800bd32 <atoi>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	3358      	adds	r3, #88	@ 0x58
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000cdc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000ce6:	491e      	ldr	r1, [pc, #120]	@ (8000d60 <process_command+0x304>)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f00b f9ef 	bl	800c0cc <strtok>
 8000cee:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d011      	beq.n	8000d1a <process_command+0x2be>
 8000cf6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d9e2      	bls.n	8000cc4 <process_command+0x268>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000cfe:	e00c      	b.n	8000d1a <process_command+0x2be>
          values[value_count] = ____;
 8000d00:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	3358      	adds	r3, #88	@ 0x58
 8000d08:	443b      	add	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000d10:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d14:	3301      	adds	r3, #1
 8000d16:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000d1a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d9ee      	bls.n	8000d00 <process_command+0x2a4>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000d2a:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000d2e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000d32:	f000 fb2b 	bl	800138c <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000d36:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000d38:	e049      	b.n	8000dce <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <process_command+0x32c>)
 8000d3c:	f7ff fd28 	bl	8000790 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000d40:	e045      	b.n	8000dce <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000d42:	4814      	ldr	r0, [pc, #80]	@ (8000d94 <process_command+0x338>)
 8000d44:	f7ff fd24 	bl	8000790 <cdc_write_string_chunked>
 8000d48:	e041      	b.n	8000dce <process_command+0x372>
    }
  } else if (strcmp(token, "save") == 0) {
 8000d4a:	4913      	ldr	r1, [pc, #76]	@ (8000d98 <process_command+0x33c>)
 8000d4c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000d4e:	f7ff fa47 	bl	80001e0 <strcmp>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d121      	bne.n	8000d9c <process_command+0x340>
    save_config();
 8000d58:	f000 fbbe 	bl	80014d8 <save_config>
 8000d5c:	e037      	b.n	8000dce <process_command+0x372>
 8000d5e:	bf00      	nop
 8000d60:	0800d2a8 	.word	0x0800d2a8
 8000d64:	0800d2ac 	.word	0x0800d2ac
 8000d68:	0800d2b4 	.word	0x0800d2b4
 8000d6c:	0800d2bc 	.word	0x0800d2bc
 8000d70:	0800d2c4 	.word	0x0800d2c4
 8000d74:	0800d2c8 	.word	0x0800d2c8
 8000d78:	0800d2ec 	.word	0x0800d2ec
 8000d7c:	0800d2f4 	.word	0x0800d2f4
 8000d80:	0800d30c 	.word	0x0800d30c
 8000d84:	0800d324 	.word	0x0800d324
 8000d88:	0800d32c 	.word	0x0800d32c
 8000d8c:	0800d34c 	.word	0x0800d34c
 8000d90:	0800d378 	.word	0x0800d378
 8000d94:	0800d384 	.word	0x0800d384
 8000d98:	0800d3d0 	.word	0x0800d3d0
  } else if (strcmp(token, "load") == 0) {
 8000d9c:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <process_command+0x378>)
 8000d9e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000da0:	f7ff fa1e 	bl	80001e0 <strcmp>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <process_command+0x354>
    load_config();
 8000daa:	f000 fba9 	bl	8001500 <load_config>
 8000dae:	e00e      	b.n	8000dce <process_command+0x372>
  } else if (strcmp(token, "reset") == 0) {
 8000db0:	4909      	ldr	r1, [pc, #36]	@ (8000dd8 <process_command+0x37c>)
 8000db2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000db4:	f7ff fa14 	bl	80001e0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <process_command+0x368>
    reset_config();
 8000dbe:	f000 fbab 	bl	8001518 <reset_config>
 8000dc2:	e004      	b.n	8000dce <process_command+0x372>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <process_command+0x380>)
 8000dc6:	f7ff fce3 	bl	8000790 <cdc_write_string_chunked>
 8000dca:	e000      	b.n	8000dce <process_command+0x372>
    return;
 8000dcc:	bf00      	nop
  }
}
 8000dce:	3758      	adds	r7, #88	@ 0x58
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0800d3d8 	.word	0x0800d3d8
 8000dd8:	0800d3e0 	.word	0x0800d3e0
 8000ddc:	0800d3e8 	.word	0x0800d3e8

08000de0 <print_help>:

static void print_help(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000de4:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <print_help+0x5c>)
 8000de6:	f7ff fcd3 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000dea:	4815      	ldr	r0, [pc, #84]	@ (8000e40 <print_help+0x60>)
 8000dec:	f7ff fcd0 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000df0:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <print_help+0x64>)
 8000df2:	f7ff fccd 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  stream                  - Start streaming ADC values (Ctrl+C to stop)\r\n");
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <print_help+0x68>)
 8000df8:	f7ff fcca 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <print_help+0x6c>)
 8000dfe:	f7ff fcc7 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000e02:	4813      	ldr	r0, [pc, #76]	@ (8000e50 <print_help+0x70>)
 8000e04:	f7ff fcc4 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000e08:	4812      	ldr	r0, [pc, #72]	@ (8000e54 <print_help+0x74>)
 8000e0a:	f7ff fcc1 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000e0e:	4812      	ldr	r0, [pc, #72]	@ (8000e58 <print_help+0x78>)
 8000e10:	f7ff fcbe 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000e14:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <print_help+0x7c>)
 8000e16:	f7ff fcbb 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000e1a:	4811      	ldr	r0, [pc, #68]	@ (8000e60 <print_help+0x80>)
 8000e1c:	f7ff fcb8 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000e20:	4810      	ldr	r0, [pc, #64]	@ (8000e64 <print_help+0x84>)
 8000e22:	f7ff fcb5 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000e26:	4810      	ldr	r0, [pc, #64]	@ (8000e68 <print_help+0x88>)
 8000e28:	f7ff fcb2 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000e2c:	480f      	ldr	r0, [pc, #60]	@ (8000e6c <print_help+0x8c>)
 8000e2e:	f7ff fcaf 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, tap_timeout\r\n");
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <print_help+0x90>)
 8000e34:	f7ff fcac 	bl	8000790 <cdc_write_string_chunked>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	0800d420 	.word	0x0800d420
 8000e40:	0800d438 	.word	0x0800d438
 8000e44:	0800d468 	.word	0x0800d468
 8000e48:	0800d4a4 	.word	0x0800d4a4
 8000e4c:	0800d4f0 	.word	0x0800d4f0
 8000e50:	0800d52c 	.word	0x0800d52c
 8000e54:	0800d560 	.word	0x0800d560
 8000e58:	0800d5a4 	.word	0x0800d5a4
 8000e5c:	0800d61c 	.word	0x0800d61c
 8000e60:	0800d658 	.word	0x0800d658
 8000e64:	0800d694 	.word	0x0800d694
 8000e68:	0800d6cc 	.word	0x0800d6cc
 8000e6c:	0800d6dc 	.word	0x0800d6dc
 8000e70:	0800d718 	.word	0x0800d718

08000e74 <print_config>:

static void print_config(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0a0      	sub	sp, #128	@ 0x80
 8000e78:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000e7a:	4820      	ldr	r0, [pc, #128]	@ (8000efc <print_config+0x88>)
 8000e7c:	f7ff fc88 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <print_config+0x8c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4638      	mov	r0, r7
 8000e86:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <print_config+0x90>)
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	f00b f89d 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fc7d 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <print_config+0x8c>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f08 <print_config+0x94>)
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	f00b f892 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc72 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <print_config+0x8c>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <print_config+0x98>)
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	f00b f887 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc67 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <print_config+0x8c>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <print_config+0x9c>)
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	f00b f87c 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc5c 	bl	8000790 <cdc_write_string_chunked>


  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <print_config+0x8c>)
 8000eda:	88db      	ldrh	r3, [r3, #6]
 8000edc:	4638      	mov	r0, r7
 8000ede:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <print_config+0xa0>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	f00b f871 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fc51 	bl	8000790 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000eee:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <print_config+0xa4>)
 8000ef0:	f7ff fc4e 	bl	8000790 <cdc_write_string_chunked>
}
 8000ef4:	bf00      	nop
 8000ef6:	3780      	adds	r7, #128	@ 0x80
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0800d740 	.word	0x0800d740
 8000f00:	20000000 	.word	0x20000000
 8000f04:	0800d75c 	.word	0x0800d75c
 8000f08:	0800d778 	.word	0x0800d778
 8000f0c:	0800d790 	.word	0x0800d790
 8000f10:	0800d7a8 	.word	0x0800d7a8
 8000f14:	0800d7c8 	.word	0x0800d7c8
 8000f18:	0800d7dc 	.word	0x0800d7dc

08000f1c <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	@ 0x50
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f00a ff03 	bl	800bd32 <atoi>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000f30:	4939      	ldr	r1, [pc, #228]	@ (8001018 <set_config_value+0xfc>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff f954 	bl	80001e0 <strcmp>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <set_config_value+0x100>)
 8000f44:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000f46:	4b35      	ldr	r3, [pc, #212]	@ (800101c <set_config_value+0x100>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f107 000c 	add.w	r0, r7, #12
 8000f4e:	4a34      	ldr	r2, [pc, #208]	@ (8001020 <set_config_value+0x104>)
 8000f50:	2140      	movs	r1, #64	@ 0x40
 8000f52:	f00b f839 	bl	800bfc8 <sniprintf>
 8000f56:	e056      	b.n	8001006 <set_config_value+0xea>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000f58:	4932      	ldr	r1, [pc, #200]	@ (8001024 <set_config_value+0x108>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f940 	bl	80001e0 <strcmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <set_config_value+0x64>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <set_config_value+0x100>)
 8000f6c:	705a      	strb	r2, [r3, #1]
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <set_config_value+0x100>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	f107 000c 	add.w	r0, r7, #12
 8000f76:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <set_config_value+0x10c>)
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	f00b f825 	bl	800bfc8 <sniprintf>
 8000f7e:	e042      	b.n	8001006 <set_config_value+0xea>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000f80:	492a      	ldr	r1, [pc, #168]	@ (800102c <set_config_value+0x110>)
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff f92c 	bl	80001e0 <strcmp>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <set_config_value+0x8c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <set_config_value+0x100>)
 8000f94:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <set_config_value+0x100>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	f107 000c 	add.w	r0, r7, #12
 8000f9e:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <set_config_value+0x114>)
 8000fa0:	2140      	movs	r1, #64	@ 0x40
 8000fa2:	f00b f811 	bl	800bfc8 <sniprintf>
 8000fa6:	e02e      	b.n	8001006 <set_config_value+0xea>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000fa8:	4922      	ldr	r1, [pc, #136]	@ (8001034 <set_config_value+0x118>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff f918 	bl	80001e0 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <set_config_value+0xb4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b18      	ldr	r3, [pc, #96]	@ (800101c <set_config_value+0x100>)
 8000fbc:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <set_config_value+0x100>)
 8000fc0:	78db      	ldrb	r3, [r3, #3]
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <set_config_value+0x11c>)
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	f00a fffd 	bl	800bfc8 <sniprintf>
 8000fce:	e01a      	b.n	8001006 <set_config_value+0xea>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000fd0:	491a      	ldr	r1, [pc, #104]	@ (800103c <set_config_value+0x120>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff f904 	bl	80001e0 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <set_config_value+0xdc>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <set_config_value+0x100>)
 8000fe4:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <set_config_value+0x100>)
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	f107 000c 	add.w	r0, r7, #12
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <set_config_value+0x124>)
 8000ff0:	2140      	movs	r1, #64	@ 0x40
 8000ff2:	f00a ffe9 	bl	800bfc8 <sniprintf>
 8000ff6:	e006      	b.n	8001006 <set_config_value+0xea>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000ff8:	f107 000c 	add.w	r0, r7, #12
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <set_config_value+0x128>)
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	f00a ffe1 	bl	800bfc8 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fbc0 	bl	8000790 <cdc_write_string_chunked>
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	@ 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800d804 	.word	0x0800d804
 800101c:	20000000 	.word	0x20000000
 8001020:	0800d818 	.word	0x0800d818
 8001024:	0800d838 	.word	0x0800d838
 8001028:	0800d848 	.word	0x0800d848
 800102c:	0800d864 	.word	0x0800d864
 8001030:	0800d874 	.word	0x0800d874
 8001034:	0800d890 	.word	0x0800d890
 8001038:	0800d8a8 	.word	0x0800d8a8
 800103c:	0800d8cc 	.word	0x0800d8cc
 8001040:	0800d8d8 	.word	0x0800d8d8
 8001044:	0800d8f0 	.word	0x0800d8f0

08001048 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800104e:	af00      	add	r7, sp, #0
 8001050:	4602      	mov	r2, r0
 8001052:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001056:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800105a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 800105c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001060:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 800106a:	4a91      	ldr	r2, [pc, #580]	@ (80012b0 <print_keymap+0x268>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	f00a ffab 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001072:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb8a 	bl	8000790 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8001082:	e109      	b.n	8001298 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 800108a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	18d0      	adds	r0, r2, r3
 8001094:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001098:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800109c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a0:	4a84      	ldr	r2, [pc, #528]	@ (80012b4 <print_keymap+0x26c>)
 80010a2:	f00a ff91 	bl	800bfc8 <sniprintf>
 80010a6:	4602      	mov	r2, r0
 80010a8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80010ac:	4413      	add	r3, r2
 80010ae:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 80010b8:	e0cc      	b.n	8001254 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 80010c6:	e020      	b.n	800110a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 80010c8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010cc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80010d0:	7818      	ldrb	r0, [r3, #0]
 80010d2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 80010d6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 80010da:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 80010de:	4c76      	ldr	r4, [pc, #472]	@ (80012b8 <print_keymap+0x270>)
 80010e0:	0080      	lsls	r0, r0, #2
 80010e2:	4401      	add	r1, r0
 80010e4:	0089      	lsls	r1, r1, #2
 80010e6:	440a      	add	r2, r1
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3304      	adds	r3, #4
 80010ee:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <print_keymap+0xb8>
          macro_count++;
 80010f6:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 80010fa:	3301      	adds	r3, #1
 80010fc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001100:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8001104:	3301      	adds	r3, #1
 8001106:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 800110a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9da      	bls.n	80010c8 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8001112:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8001116:	2b01      	cmp	r3, #1
 8001118:	d973      	bls.n	8001202 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 800111a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001128:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800112c:	4a63      	ldr	r2, [pc, #396]	@ (80012bc <print_keymap+0x274>)
 800112e:	4619      	mov	r1, r3
 8001130:	f00a ff4a 	bl	800bfc8 <sniprintf>
 8001134:	4602      	mov	r2, r0
 8001136:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800113a:	4413      	add	r3, r2
 800113c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8001146:	e044      	b.n	80011d2 <print_keymap+0x18a>
          if (i > 0)
 8001148:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d012      	beq.n	8001176 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8001150:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800115e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001162:	4a57      	ldr	r2, [pc, #348]	@ (80012c0 <print_keymap+0x278>)
 8001164:	4619      	mov	r1, r3
 8001166:	f00a ff2f 	bl	800bfc8 <sniprintf>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001170:	4413      	add	r3, r2
 8001172:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8001176:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	18d4      	adds	r4, r2, r3
 8001180:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001184:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8001188:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800118c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001190:	7818      	ldrb	r0, [r3, #0]
 8001192:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8001196:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 800119a:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800119e:	4e46      	ldr	r6, [pc, #280]	@ (80012b8 <print_keymap+0x270>)
 80011a0:	0080      	lsls	r0, r0, #2
 80011a2:	4401      	add	r1, r0
 80011a4:	0089      	lsls	r1, r1, #2
 80011a6:	440a      	add	r2, r1
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 80011b2:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <print_keymap+0x27c>)
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f00a ff06 	bl	800bfc8 <sniprintf>
 80011bc:	4602      	mov	r2, r0
 80011be:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011c2:	4413      	add	r3, r2
 80011c4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011c8:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80011cc:	3301      	adds	r3, #1
 80011ce:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 80011d2:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d9b6      	bls.n	8001148 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 80011da:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011de:	f107 020c 	add.w	r2, r7, #12
 80011e2:	18d0      	adds	r0, r2, r3
 80011e4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80011ec:	4a36      	ldr	r2, [pc, #216]	@ (80012c8 <print_keymap+0x280>)
 80011ee:	4619      	mov	r1, r3
 80011f0:	f00a feea 	bl	800bfc8 <sniprintf>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011fa:	4413      	add	r3, r2
 80011fc:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001200:	e023      	b.n	800124a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001202:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	18d0      	adds	r0, r2, r3
 800120c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001210:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001214:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001218:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800121c:	7819      	ldrb	r1, [r3, #0]
 800121e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001222:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001226:	4d24      	ldr	r5, [pc, #144]	@ (80012b8 <print_keymap+0x270>)
 8001228:	0089      	lsls	r1, r1, #2
 800122a:	440a      	add	r2, r1
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4413      	add	r3, r2
 8001230:	3301      	adds	r3, #1
 8001232:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001236:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <print_keymap+0x284>)
 8001238:	4621      	mov	r1, r4
 800123a:	f00a fec5 	bl	800bfc8 <sniprintf>
 800123e:	4602      	mov	r2, r0
 8001240:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001244:	4413      	add	r3, r2
 8001246:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800124a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800124e:	3301      	adds	r3, #1
 8001250:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001254:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001258:	2b03      	cmp	r3, #3
 800125a:	f67f af2e 	bls.w	80010ba <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800125e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001262:	f107 020c 	add.w	r2, r7, #12
 8001266:	18d0      	adds	r0, r2, r3
 8001268:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800126c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001270:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <print_keymap+0x288>)
 8001272:	4619      	mov	r1, r3
 8001274:	f00a fea8 	bl	800bfc8 <sniprintf>
 8001278:	4602      	mov	r2, r0
 800127a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800127e:	4413      	add	r3, r2
 8001280:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa81 	bl	8000790 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800128e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8001292:	3301      	adds	r3, #1
 8001294:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8001298:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800129c:	2b03      	cmp	r3, #3
 800129e:	f67f aef1 	bls.w	8001084 <print_keymap+0x3c>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800d908 	.word	0x0800d908
 80012b4:	0800d920 	.word	0x0800d920
 80012b8:	20000000 	.word	0x20000000
 80012bc:	0800d92c 	.word	0x0800d92c
 80012c0:	0800d2a0 	.word	0x0800d2a0
 80012c4:	0800d2a4 	.word	0x0800d2a4
 80012c8:	0800d930 	.word	0x0800d930
 80012cc:	0800d934 	.word	0x0800d934
 80012d0:	0800d26c 	.word	0x0800d26c

080012d4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b099      	sub	sp, #100	@ 0x64
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	4603      	mov	r3, r0
 80012e8:	71bb      	strb	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	717b      	strb	r3, [r7, #5]
 80012ee:	4613      	mov	r3, r2
 80012f0:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 80012f2:	79f9      	ldrb	r1, [r7, #7]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	4822      	ldr	r0, [pc, #136]	@ (8001384 <set_keymap_value+0xb0>)
 80012fa:	0089      	lsls	r1, r1, #2
 80012fc:	440a      	add	r2, r1
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	3301      	adds	r3, #1
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800130a:	2301      	movs	r3, #1
 800130c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001310:	e014      	b.n	800133c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001312:	79f8      	ldrb	r0, [r7, #7]
 8001314:	79b9      	ldrb	r1, [r7, #6]
 8001316:	797a      	ldrb	r2, [r7, #5]
 8001318:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800131c:	4c19      	ldr	r4, [pc, #100]	@ (8001384 <set_keymap_value+0xb0>)
 800131e:	0080      	lsls	r0, r0, #2
 8001320:	4401      	add	r1, r0
 8001322:	0089      	lsls	r1, r1, #2
 8001324:	440a      	add	r2, r1
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	2200      	movs	r2, #0
 800132e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001332:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001336:	3301      	adds	r3, #1
 8001338:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800133c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001340:	2b03      	cmp	r3, #3
 8001342:	d9e6      	bls.n	8001312 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001344:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001348:	2100      	movs	r1, #0
 800134a:	480e      	ldr	r0, [pc, #56]	@ (8001384 <set_keymap_value+0xb0>)
 800134c:	f001 fa38 	bl	80027c0 <keyboard_write_config>
  keyboard_init_keys();
 8001350:	f000 ff7c 	bl	800224c <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001354:	79fc      	ldrb	r4, [r7, #7]
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	797a      	ldrb	r2, [r7, #5]
 800135a:	8879      	ldrh	r1, [r7, #2]
 800135c:	f107 000c 	add.w	r0, r7, #12
 8001360:	9102      	str	r1, [sp, #8]
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <set_keymap_value+0xb4>)
 800136a:	2140      	movs	r1, #64	@ 0x40
 800136c:	f00a fe2c 	bl	800bfc8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa0b 	bl	8000790 <cdc_write_string_chunked>
}
 800137a:	bf00      	nop
 800137c:	3754      	adds	r7, #84	@ 0x54
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	0800d93c 	.word	0x0800d93c

0800138c <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b0a8      	sub	sp, #160	@ 0xa0
 8001390:	af02      	add	r7, sp, #8
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	460b      	mov	r3, r1
 800139a:	71bb      	strb	r3, [r7, #6]
 800139c:	4613      	mov	r3, r2
 800139e:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80013a6:	e01a      	b.n	80013de <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80013a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	18d4      	adds	r4, r2, r3
 80013b2:	79f8      	ldrb	r0, [r7, #7]
 80013b4:	79b9      	ldrb	r1, [r7, #6]
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013bc:	8825      	ldrh	r5, [r4, #0]
 80013be:	4c41      	ldr	r4, [pc, #260]	@ (80014c4 <set_macro_keymap_value+0x138>)
 80013c0:	0080      	lsls	r0, r0, #2
 80013c2:	4401      	add	r1, r0
 80013c4:	0089      	lsls	r1, r1, #2
 80013c6:	440a      	add	r2, r1
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	462a      	mov	r2, r5
 80013d0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80013d4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013d8:	3301      	adds	r3, #1
 80013da:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80013de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d9e0      	bls.n	80013a8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80013e6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80013ea:	2100      	movs	r1, #0
 80013ec:	4835      	ldr	r0, [pc, #212]	@ (80014c4 <set_macro_keymap_value+0x138>)
 80013ee:	f001 f9e7 	bl	80027c0 <keyboard_write_config>
  keyboard_init_keys();
 80013f2:	f000 ff2b 	bl	800224c <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 80013f6:	79f9      	ldrb	r1, [r7, #7]
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	797a      	ldrb	r2, [r7, #5]
 80013fc:	f107 000c 	add.w	r0, r7, #12
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <set_macro_keymap_value+0x13c>)
 8001408:	2180      	movs	r1, #128	@ 0x80
 800140a:	f00a fddd 	bl	800bfc8 <sniprintf>
 800140e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001418:	e033      	b.n	8001482 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800141a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800141e:	2b00      	cmp	r3, #0
 8001420:	d012      	beq.n	8001448 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001422:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	18d0      	adds	r0, r2, r3
 800142c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001430:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001434:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <set_macro_keymap_value+0x140>)
 8001436:	4619      	mov	r1, r3
 8001438:	f00a fdc6 	bl	800bfc8 <sniprintf>
 800143c:	4602      	mov	r2, r0
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001442:	4413      	add	r3, r2
 8001444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	18d0      	adds	r0, r2, r3
 8001452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001456:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800145a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <set_macro_keymap_value+0x144>)
 8001468:	f00a fdae 	bl	800bfc8 <sniprintf>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001472:	4413      	add	r3, r2
 8001474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001478:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800147c:	3301      	adds	r3, #1
 800147e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001482:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001486:	2b03      	cmp	r3, #3
 8001488:	d9c7      	bls.n	800141a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800148a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	18d0      	adds	r0, r2, r3
 8001494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001498:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <set_macro_keymap_value+0x148>)
 800149e:	4619      	mov	r1, r3
 80014a0:	f00a fd92 	bl	800bfc8 <sniprintf>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014aa:	4413      	add	r3, r2
 80014ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f96b 	bl	8000790 <cdc_write_string_chunked>
}
 80014ba:	bf00      	nop
 80014bc:	3798      	adds	r7, #152	@ 0x98
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	0800d95c 	.word	0x0800d95c
 80014cc:	0800d980 	.word	0x0800d980
 80014d0:	0800d2a4 	.word	0x0800d2a4
 80014d4:	0800d984 	.word	0x0800d984

080014d8 <save_config>:

static void save_config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80014dc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80014e0:	2100      	movs	r1, #0
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <save_config+0x20>)
 80014e4:	f001 f96c 	bl	80027c0 <keyboard_write_config>
  keyboard_init_keys();
 80014e8:	f000 feb0 	bl	800224c <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <save_config+0x24>)
 80014ee:	f7ff f94f 	bl	8000790 <cdc_write_string_chunked>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	0800d988 	.word	0x0800d988

08001500 <load_config>:

static void load_config(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001504:	f001 f94a 	bl	800279c <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <load_config+0x14>)
 800150a:	f7ff f941 	bl	8000790 <cdc_write_string_chunked>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800d9a8 	.word	0x0800d9a8

08001518 <reset_config>:

static void reset_config(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800151c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001520:	2100      	movs	r1, #0
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <reset_config+0x24>)
 8001524:	f001 f94c 	bl	80027c0 <keyboard_write_config>
  keyboard_read_config();
 8001528:	f001 f938 	bl	800279c <keyboard_read_config>
  keyboard_init_keys();
 800152c:	f000 fe8e 	bl	800224c <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <reset_config+0x28>)
 8001532:	f7ff f92d 	bl	8000790 <cdc_write_string_chunked>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800da7c 	.word	0x0800da7c
 8001540:	0800d9cc 	.word	0x0800d9cc

08001544 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	460b      	mov	r3, r1
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	4613      	mov	r3, r2
 8001554:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e002      	b.n	8001568 <tud_cdc_line_state_cb+0x24>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800156e:	4293      	cmp	r3, r2
 8001570:	ddf7      	ble.n	8001562 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <tud_cdc_line_state_cb+0x4c>)
 8001574:	f7ff f90c 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001578:	4806      	ldr	r0, [pc, #24]	@ (8001594 <tud_cdc_line_state_cb+0x50>)
 800157a:	f7ff f909 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <tud_cdc_line_state_cb+0x54>)
 8001580:	f7ff f906 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001584:	f7ff f94f 	bl	8000826 <cdc_write_flush_wait>
  }
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800d9f0 	.word	0x0800d9f0
 8001594:	0800da1c 	.word	0x0800da1c
 8001598:	0800d260 	.word	0x0800d260

0800159c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <hid_task+0x8c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <hid_task+0x16>
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <hid_task+0x90>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d035      	beq.n	8001636 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f005 f91a 	bl	8006804 <tud_hid_n_ready>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d02f      	beq.n	8001636 <hid_task+0x82>
    if (tud_suspended()) {
 80015d6:	f006 fc31 	bl	8007e3c <tud_suspended>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <hid_task+0x32>
      tud_remote_wakeup();
 80015e0:	f006 fc40 	bl	8007e64 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80015e4:	e027      	b.n	8001636 <hid_task+0x82>
      if (should_send_consumer_report) {
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <hid_task+0x8c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00f      	beq.n	800160e <hid_task+0x5a>
        should_send_consumer_report = 0;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <hid_task+0x8c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <hid_task+0x94>)
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	2302      	movs	r3, #2
 80015fe:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	7bf9      	ldrb	r1, [r7, #15]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	2000      	movs	r0, #0
 8001608:	f005 f93e 	bl	8006888 <tud_hid_n_report>
 800160c:	e013      	b.n	8001636 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <hid_task+0x90>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00f      	beq.n	8001636 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <hid_task+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <hid_task+0x98>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	717a      	strb	r2, [r7, #5]
 8001624:	713b      	strb	r3, [r7, #4]
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <hid_task+0x9c>)
 8001628:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800162a:	793a      	ldrb	r2, [r7, #4]
 800162c:	7979      	ldrb	r1, [r7, #5]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2000      	movs	r0, #0
 8001632:	f005 f9af 	bl	8006994 <tud_hid_n_keyboard_report>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000204 	.word	0x20000204
 8001644:	20000205 	.word	0x20000205
 8001648:	2000020e 	.word	0x2000020e
 800164c:	20000206 	.word	0x20000206
 8001650:	20000208 	.word	0x20000208

08001654 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	440b      	add	r3, r1
 800166c:	3305      	adds	r3, #5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	2b03      	cmp	r3, #3
 8001674:	f200 80f7 	bhi.w	8001866 <hid_press_key+0x212>
 8001678:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <hid_press_key+0x2c>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016b7 	.word	0x080016b7
 8001684:	08001691 	.word	0x08001691
 8001688:	080016f7 	.word	0x080016f7
 800168c:	08001715 	.word	0x08001715
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	440b      	add	r3, r1
 800169c:	88db      	ldrh	r3, [r3, #6]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b74      	ldr	r3, [pc, #464]	@ (8001874 <hid_press_key+0x220>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b72      	ldr	r3, [pc, #456]	@ (8001874 <hid_press_key+0x220>)
 80016ac:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016ae:	4b72      	ldr	r3, [pc, #456]	@ (8001878 <hid_press_key+0x224>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
    break;
 80016b4:	e0da      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
 80016ba:	e018      	b.n	80016ee <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	4a6f      	ldr	r2, [pc, #444]	@ (800187c <hid_press_key+0x228>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d110      	bne.n	80016e8 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	88db      	ldrh	r3, [r3, #6]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	b2d1      	uxtb	r1, r2
 80016da:	4a68      	ldr	r2, [pc, #416]	@ (800187c <hid_press_key+0x228>)
 80016dc:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80016de:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <hid_press_key+0x224>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
        break;
 80016e4:	bf00      	nop
      }
    }
    break;
 80016e6:	e0c1      	b.n	800186c <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	3301      	adds	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d9e3      	bls.n	80016bc <hid_press_key+0x68>
    break;
 80016f4:	e0ba      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	440b      	add	r3, r1
 8001702:	88db      	ldrh	r3, [r3, #6]
 8001704:	b29b      	uxth	r3, r3
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <hid_press_key+0x22c>)
 800170a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800170c:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <hid_press_key+0x230>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
    break;
 8001712:	e0ab      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	757b      	strb	r3, [r7, #21]
 800171c:	e025      	b.n	800176a <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	7d7b      	ldrb	r3, [r7, #21]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	0058      	lsls	r0, r3, #1
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	4403      	add	r3, r0
 800172e:	440b      	add	r3, r1
 8001730:	88db      	ldrh	r3, [r3, #6]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	7d7b      	ldrb	r3, [r7, #21]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	0058      	lsls	r0, r3, #1
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	4403      	add	r3, r0
 8001748:	440b      	add	r3, r1
 800174a:	88db      	ldrh	r3, [r3, #6]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f9a0 	bl	8001a94 <get_bitmask_for_modifier>
 8001754:	4603      	mov	r3, r0
 8001756:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 800175e:	7dbb      	ldrb	r3, [r7, #22]
 8001760:	3301      	adds	r3, #1
 8001762:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001764:	7d7b      	ldrb	r3, [r7, #21]
 8001766:	3301      	adds	r3, #1
 8001768:	757b      	strb	r3, [r7, #21]
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d9d6      	bls.n	800171e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	74fb      	strb	r3, [r7, #19]
 8001778:	e00a      	b.n	8001790 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	4a3f      	ldr	r2, [pc, #252]	@ (800187c <hid_press_key+0x228>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <hid_press_key+0x136>
        start_slot = i;
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	753b      	strb	r3, [r7, #20]
        break;
 8001788:	e005      	b.n	8001796 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	3301      	adds	r3, #1
 800178e:	74fb      	strb	r3, [r7, #19]
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d9f1      	bls.n	800177a <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 800179a:	7d3b      	ldrb	r3, [r7, #20]
 800179c:	747b      	strb	r3, [r7, #17]
 800179e:	e00a      	b.n	80017b6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80017a0:	7c7b      	ldrb	r3, [r7, #17]
 80017a2:	4a36      	ldr	r2, [pc, #216]	@ (800187c <hid_press_key+0x228>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <hid_press_key+0x16a>
        available_slots++;
 80017aa:	7cbb      	ldrb	r3, [r7, #18]
 80017ac:	3301      	adds	r3, #1
 80017ae:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80017b0:	7c7b      	ldrb	r3, [r7, #17]
 80017b2:	3301      	adds	r3, #1
 80017b4:	747b      	strb	r3, [r7, #17]
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d9f1      	bls.n	80017a0 <hid_press_key+0x14c>
 80017bc:	e000      	b.n	80017c0 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80017be:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80017c0:	7cba      	ldrb	r2, [r7, #18]
 80017c2:	7dbb      	ldrb	r3, [r7, #22]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d350      	bcc.n	800186a <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80017cc:	7d3b      	ldrb	r3, [r7, #20]
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e042      	b.n	8001858 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	7c3b      	ldrb	r3, [r7, #16]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	0058      	lsls	r0, r3, #1
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	4403      	add	r3, r0
 80017e2:	440b      	add	r3, r1
 80017e4:	88db      	ldrh	r3, [r3, #6]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d032      	beq.n	8001852 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	7c3b      	ldrb	r3, [r7, #16]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	0058      	lsls	r0, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	4403      	add	r3, r0
 80017fc:	440b      	add	r3, r1
 80017fe:	88db      	ldrh	r3, [r3, #6]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f946 	bl	8001a94 <get_bitmask_for_modifier>
 8001808:	4603      	mov	r3, r0
 800180a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <hid_press_key+0x220>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	4313      	orrs	r3, r2
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <hid_press_key+0x220>)
 800181e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <hid_press_key+0x224>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e014      	b.n	8001852 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	7c3b      	ldrb	r3, [r7, #16]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	0058      	lsls	r0, r3, #1
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	4403      	add	r3, r0
 8001838:	440b      	add	r3, r1
 800183a:	88db      	ldrh	r3, [r3, #6]
 800183c:	b29a      	uxth	r2, r3
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	b2d1      	uxtb	r1, r2
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <hid_press_key+0x228>)
 8001844:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <hid_press_key+0x224>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001852:	7c3b      	ldrb	r3, [r7, #16]
 8001854:	3301      	adds	r3, #1
 8001856:	743b      	strb	r3, [r7, #16]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d805      	bhi.n	800186a <hid_press_key+0x216>
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9b6      	bls.n	80017d2 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001864:	e001      	b.n	800186a <hid_press_key+0x216>

  default:
    break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <hid_press_key+0x218>
    break;
 800186a:	bf00      	nop
  }
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000206 	.word	0x20000206
 8001878:	20000205 	.word	0x20000205
 800187c:	20000208 	.word	0x20000208
 8001880:	2000020e 	.word	0x2000020e
 8001884:	20000204 	.word	0x20000204

08001888 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	440b      	add	r3, r1
 80018a0:	3305      	adds	r3, #5
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f200 80a7 	bhi.w	80019fa <hid_release_key+0x172>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <hid_release_key+0x2c>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018f3 	.word	0x080018f3
 80018b8:	080018c5 	.word	0x080018c5
 80018bc:	08001935 	.word	0x08001935
 80018c0:	08001943 	.word	0x08001943
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	4b4a      	ldr	r3, [pc, #296]	@ (8001a04 <hid_release_key+0x17c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4013      	ands	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <hid_release_key+0x17c>)
 80018e8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <hid_release_key+0x180>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
    break;
 80018f0:	e084      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e019      	b.n	800192c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4a44      	ldr	r2, [pc, #272]	@ (8001a0c <hid_release_key+0x184>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	4618      	mov	r0, r3
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	440b      	add	r3, r1
 800190c:	88db      	ldrh	r3, [r3, #6]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4298      	cmp	r0, r3
 8001912:	d108      	bne.n	8001926 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4a3d      	ldr	r2, [pc, #244]	@ (8001a0c <hid_release_key+0x184>)
 8001918:	2100      	movs	r1, #0
 800191a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800191c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <hid_release_key+0x180>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
        break;
 8001922:	bf00      	nop
      }
    }
    break;
 8001924:	e06a      	b.n	80019fc <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	3301      	adds	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d9e2      	bls.n	80018f8 <hid_release_key+0x70>
    break;
 8001932:	e063      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001934:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <hid_release_key+0x188>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <hid_release_key+0x18c>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    break;
 8001940:	e05c      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001942:	2300      	movs	r3, #0
 8001944:	73bb      	strb	r3, [r7, #14]
 8001946:	e054      	b.n	80019f2 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	0058      	lsls	r0, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	4403      	add	r3, r0
 8001958:	440b      	add	r3, r1
 800195a:	88db      	ldrh	r3, [r3, #6]
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d044      	beq.n	80019ec <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	0058      	lsls	r0, r3, #1
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	4403      	add	r3, r0
 8001972:	440b      	add	r3, r1
 8001974:	88db      	ldrh	r3, [r3, #6]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f88b 	bl	8001a94 <get_bitmask_for_modifier>
 800197e:	4603      	mov	r3, r0
 8001980:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001982:	7b3b      	ldrb	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00f      	beq.n	80019a8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001988:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	b25a      	sxtb	r2, r3
 8001990:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <hid_release_key+0x17c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b25b      	sxtb	r3, r3
 8001996:	4013      	ands	r3, r2
 8001998:	b25b      	sxtb	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <hid_release_key+0x17c>)
 800199e:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <hid_release_key+0x180>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e021      	b.n	80019ec <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	737b      	strb	r3, [r7, #13]
 80019ac:	e01b      	b.n	80019e6 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <hid_release_key+0x184>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	461c      	mov	r4, r3
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	0058      	lsls	r0, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	4403      	add	r3, r0
 80019c6:	440b      	add	r3, r1
 80019c8:	88db      	ldrh	r3, [r3, #6]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	429c      	cmp	r4, r3
 80019ce:	d107      	bne.n	80019e0 <hid_release_key+0x158>
              keycodes[i] = 0;
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <hid_release_key+0x184>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <hid_release_key+0x180>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
              break;
 80019de:	e005      	b.n	80019ec <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80019e0:	7b7b      	ldrb	r3, [r7, #13]
 80019e2:	3301      	adds	r3, #1
 80019e4:	737b      	strb	r3, [r7, #13]
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d9e0      	bls.n	80019ae <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	3301      	adds	r3, #1
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d9a7      	bls.n	8001948 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 80019f8:	e000      	b.n	80019fc <hid_release_key+0x174>

  default:
    break;
 80019fa:	bf00      	nop
  }
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	20000206 	.word	0x20000206
 8001a08:	20000205 	.word	0x20000205
 8001a0c:	20000208 	.word	0x20000208
 8001a10:	2000020e 	.word	0x2000020e
 8001a14:	20000204 	.word	0x20000204

08001a18 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	71bb      	strb	r3, [r7, #6]
 8001a60:	4613      	mov	r3, r2
 8001a62:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	4613      	mov	r3, r2
 8001a84:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	3be0      	subs	r3, #224	@ 0xe0
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	d822      	bhi.n	8001aec <get_bitmask_for_modifier+0x58>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <get_bitmask_for_modifier+0x18>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001acd 	.word	0x08001acd
 8001ab0:	08001ad1 	.word	0x08001ad1
 8001ab4:	08001ad5 	.word	0x08001ad5
 8001ab8:	08001ad9 	.word	0x08001ad9
 8001abc:	08001add 	.word	0x08001add
 8001ac0:	08001ae1 	.word	0x08001ae1
 8001ac4:	08001ae5 	.word	0x08001ae5
 8001ac8:	08001ae9 	.word	0x08001ae9
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e00e      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e00c      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e00a      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	e008      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001adc:	2310      	movs	r3, #16
 8001ade:	e006      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e004      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001ae4:	2340      	movs	r3, #64	@ 0x40
 8001ae6:	e002      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	e000      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001aec:	2300      	movs	r3, #0
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	2bff      	cmp	r3, #255	@ 0xff
 8001b0a:	d904      	bls.n	8001b16 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	e000      	b.n	8001b18 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001b16:	2300      	movs	r3, #0
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	4603      	mov	r3, r0
 8001b38:	71bb      	strb	r3, [r7, #6]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	717b      	strb	r3, [r7, #5]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	79ba      	ldrb	r2, [r7, #6]
 8001b46:	2132      	movs	r1, #50	@ 0x32
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
 8001b4c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	4a88      	ldr	r2, [pc, #544]	@ (8001d78 <init_key+0x254>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2200      	movs	r2, #0
 8001b66:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	797a      	ldrb	r2, [r7, #5]
 8001b6c:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	793a      	ldrb	r2, [r7, #4]
 8001b72:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2200      	movs	r2, #0
 8001b78:	75da      	strb	r2, [r3, #23]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	761a      	strb	r2, [r3, #24]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f042 0208 	orr.w	r2, r2, #8
 8001b86:	765a      	strb	r2, [r3, #25]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f042 0207 	orr.w	r2, r2, #7
 8001b8e:	769a      	strb	r2, [r3, #26]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f062 020b 	orn	r2, r2, #11
 8001b98:	76da      	strb	r2, [r3, #27]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	771a      	strb	r2, [r3, #28]

  key->actuation.status = STATUS_RESET;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001baa:	4b74      	ldr	r3, [pc, #464]	@ (8001d7c <init_key+0x258>)
 8001bac:	785a      	ldrb	r2, [r3, #1]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001bb4:	4b71      	ldr	r3, [pc, #452]	@ (8001d7c <init_key+0x258>)
 8001bb6:	785a      	ldrb	r2, [r3, #1]
 8001bb8:	4b70      	ldr	r3, [pc, #448]	@ (8001d7c <init_key+0x258>)
 8001bba:	789b      	ldrb	r3, [r3, #2]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d7c <init_key+0x258>)
 8001bc8:	78da      	ldrb	r2, [r3, #3]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
 8001bd4:	e0c6      	b.n	8001d64 <init_key+0x240>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8001bd6:	7df9      	ldrb	r1, [r7, #23]
 8001bd8:	797a      	ldrb	r2, [r7, #5]
 8001bda:	793b      	ldrb	r3, [r7, #4]
 8001bdc:	4867      	ldr	r0, [pc, #412]	@ (8001d7c <init_key+0x258>)
 8001bde:	0089      	lsls	r1, r1, #2
 8001be0:	440a      	add	r2, r1
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80b6 	beq.w	8001d5e <init_key+0x23a>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	757b      	strb	r3, [r7, #21]
 8001bfa:	e015      	b.n	8001c28 <init_key+0x104>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001bfc:	7df8      	ldrb	r0, [r7, #23]
 8001bfe:	7979      	ldrb	r1, [r7, #5]
 8001c00:	793a      	ldrb	r2, [r7, #4]
 8001c02:	7d7b      	ldrb	r3, [r7, #21]
 8001c04:	4c5d      	ldr	r4, [pc, #372]	@ (8001d7c <init_key+0x258>)
 8001c06:	0080      	lsls	r0, r0, #2
 8001c08:	4401      	add	r1, r0
 8001c0a:	0089      	lsls	r1, r1, #2
 8001c0c:	440a      	add	r2, r1
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <init_key+0xfe>
          macro_count++;
 8001c1c:	7dbb      	ldrb	r3, [r7, #22]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c22:	7d7b      	ldrb	r3, [r7, #21]
 8001c24:	3301      	adds	r3, #1
 8001c26:	757b      	strb	r3, [r7, #21]
 8001c28:	7d7b      	ldrb	r3, [r7, #21]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d9e6      	bls.n	8001bfc <init_key+0xd8>
        }
      }

      if (macro_count > 1) {
 8001c2e:	7dbb      	ldrb	r3, [r7, #22]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d92b      	bls.n	8001c8c <init_key+0x168>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001c34:	7dfa      	ldrb	r2, [r7, #23]
 8001c36:	6939      	ldr	r1, [r7, #16]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3305      	adds	r3, #5
 8001c42:	2204      	movs	r2, #4
 8001c44:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	753b      	strb	r3, [r7, #20]
 8001c4a:	e01b      	b.n	8001c84 <init_key+0x160>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001c4c:	7dfd      	ldrb	r5, [r7, #23]
 8001c4e:	797c      	ldrb	r4, [r7, #5]
 8001c50:	7938      	ldrb	r0, [r7, #4]
 8001c52:	7d39      	ldrb	r1, [r7, #20]
 8001c54:	7dfa      	ldrb	r2, [r7, #23]
 8001c56:	7d3b      	ldrb	r3, [r7, #20]
 8001c58:	4e48      	ldr	r6, [pc, #288]	@ (8001d7c <init_key+0x258>)
 8001c5a:	00ad      	lsls	r5, r5, #2
 8001c5c:	442c      	add	r4, r5
 8001c5e:	00a4      	lsls	r4, r4, #2
 8001c60:	4420      	add	r0, r4
 8001c62:	0080      	lsls	r0, r0, #2
 8001c64:	4401      	add	r1, r0
 8001c66:	3104      	adds	r1, #4
 8001c68:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001c6c:	6939      	ldr	r1, [r7, #16]
 8001c6e:	0058      	lsls	r0, r3, #1
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	4403      	add	r3, r0
 8001c78:	440b      	add	r3, r1
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	753b      	strb	r3, [r7, #20]
 8001c84:	7d3b      	ldrb	r3, [r7, #20]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d9e0      	bls.n	8001c4c <init_key+0x128>
 8001c8a:	e068      	b.n	8001d5e <init_key+0x23a>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001c8c:	7df9      	ldrb	r1, [r7, #23]
 8001c8e:	797a      	ldrb	r2, [r7, #5]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	483a      	ldr	r0, [pc, #232]	@ (8001d7c <init_key+0x258>)
 8001c94:	0089      	lsls	r1, r1, #2
 8001c96:	440a      	add	r2, r1
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff2a 	bl	8001afc <get_usage_consumer_control>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d011      	beq.n	8001cd6 <init_key+0x1b2>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001cb2:	7dfa      	ldrb	r2, [r7, #23]
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001cc4:	7dfa      	ldrb	r2, [r7, #23]
 8001cc6:	6939      	ldr	r1, [r7, #16]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	89fa      	ldrh	r2, [r7, #14]
 8001cd2:	80da      	strh	r2, [r3, #6]
 8001cd4:	e043      	b.n	8001d5e <init_key+0x23a>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001cd6:	7df9      	ldrb	r1, [r7, #23]
 8001cd8:	797a      	ldrb	r2, [r7, #5]
 8001cda:	793b      	ldrb	r3, [r7, #4]
 8001cdc:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <init_key+0x258>)
 8001cde:	0089      	lsls	r1, r1, #2
 8001ce0:	440a      	add	r2, r1
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fed0 	bl	8001a94 <get_bitmask_for_modifier>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d013      	beq.n	8001d26 <init_key+0x202>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001cfe:	7dfa      	ldrb	r2, [r7, #23]
 8001d00:	6939      	ldr	r1, [r7, #16]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001d10:	7dfa      	ldrb	r2, [r7, #23]
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	b298      	uxth	r0, r3
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	4602      	mov	r2, r0
 8001d22:	80da      	strh	r2, [r3, #6]
 8001d24:	e01b      	b.n	8001d5e <init_key+0x23a>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001d26:	7dfa      	ldrb	r2, [r7, #23]
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	3305      	adds	r3, #5
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001d38:	7df8      	ldrb	r0, [r7, #23]
 8001d3a:	7979      	ldrb	r1, [r7, #5]
 8001d3c:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001d40:	4c0e      	ldr	r4, [pc, #56]	@ (8001d7c <init_key+0x258>)
 8001d42:	0080      	lsls	r0, r0, #2
 8001d44:	4401      	add	r1, r0
 8001d46:	0089      	lsls	r1, r1, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	3301      	adds	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f67f af35 	bls.w	8001bd6 <init_key+0xb2>
          }
        }
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000210 	.word	0x20000210
 8001d7c:	20000000 	.word	0x20000000

08001d80 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001d88:	4bab      	ldr	r3, [pc, #684]	@ (8002038 <update_key_state+0x2b8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <update_key_state+0x20>
 8001d90:	f000 fd9c 	bl	80028cc <keyboard_read_adc>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001d9a:	330f      	adds	r3, #15
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	e002      	b.n	8001da6 <update_key_state+0x26>
 8001da0:	f000 fd94 	bl	80028cc <keyboard_read_adc>
 8001da4:	4603      	mov	r3, r0
 8001da6:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b13      	cmp	r3, #19
 8001db2:	d82f      	bhi.n	8001e14 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001db4:	4ba1      	ldr	r3, [pc, #644]	@ (800203c <update_key_state+0x2bc>)
 8001db6:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001de2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8a3 2019 	strh.w	r2, [r3, #25]
    key->calibration.cycles_count++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8a3 2017 	strh.w	r2, [r3, #23]

    return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e10d      	b.n	8002030 <update_key_state+0x2b0>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d929      	bls.n	8001e76 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001e22:	4b87      	ldr	r3, [pc, #540]	@ (8002040 <update_key_state+0x2c0>)
 8001e24:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e32:	893b      	ldrh	r3, [r7, #8]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e60:	ee17 3a90 	vmov	r3, s15
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8a3 2019 	strh.w	r2, [r3, #25]
    state.value = key->calibration.idle_value;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8b3 301f 	ldrh.w	r3, [r3, #31]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d117      	bne.n	8001eb2 <update_key_state+0x132>
 8001e82:	893b      	ldrh	r3, [r7, #8]
 8001e84:	461a      	mov	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b0a      	subs	r3, #10
 8001e90:	429a      	cmp	r2, r3
 8001e92:	db0e      	blt.n	8001eb2 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	2b0e      	cmp	r3, #14
 8001e9a:	d904      	bls.n	8001ea6 <update_key_state+0x126>
      key->is_idle = 1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	711a      	strb	r2, [r3, #4]
      return 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e0c4      	b.n	8002030 <update_key_state+0x2b0>
    }
    key->idle_counter++;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b0a      	subs	r3, #10
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	db06      	blt.n	8001ed2 <update_key_state+0x152>
    state.distance = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001ed0:	e00f      	b.n	8001ef2 <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	893b      	ldrh	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b0a      	subs	r3, #10
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001ef2:	897a      	ldrh	r2, [r7, #10]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d903      	bls.n	8001f08 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001f00:	897a      	ldrh	r2, [r7, #10]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8a3 201b 	strh.w	r2, [r3, #27]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b3c      	subs	r3, #60	@ 0x3c
 8001f16:	429a      	cmp	r2, r3
 8001f18:	db04      	blt.n	8001f24 <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4613      	mov	r3, r2
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	f8b2 201b 	ldrh.w	r2, [r2, #27]
 8001f34:	b292      	uxth	r2, r2
 8001f36:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001f3e:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <update_key_state+0x2c0>)
 8001f40:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f4e:	7b3b      	ldrb	r3, [r7, #12]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3022 	ldr.w	r3, [r3, #34]	@ 0x22
 8001f62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f66:	ee06 3a90 	vmov	s13, r3
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001f7a:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f86:	edc7 7a00 	vstr	s15, [r7]
 8001f8a:	783b      	ldrb	r3, [r7, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001f90:	7cba      	ldrb	r2, [r7, #18]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dd18      	ble.n	8001fdc <update_key_state+0x25c>
 8001faa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd14      	ble.n	8001fdc <update_key_state+0x25c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d00f      	beq.n	8001fdc <update_key_state+0x25c>
    key->actuation.direction = GOING_DOWN;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 0) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d023      	beq.n	8002016 <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    if (key->actuation.direction_changed_point != 0) {
 8001fda:	e01c      	b.n	8002016 <update_key_state+0x296>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da17      	bge.n	8002016 <update_key_state+0x296>
 8001fe6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da13      	bge.n	8002016 <update_key_state+0x296>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <update_key_state+0x296>
    key->actuation.direction = GOING_UP;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 255) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002006:	2bff      	cmp	r3, #255	@ 0xff
 8002008:	d005      	beq.n	8002016 <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  key->state = state;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f103 021d 	add.w	r2, r3, #29
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	cb03      	ldmia	r3!, {r0, r1}
 8002022:	6010      	str	r0, [r2, #0]
 8002024:	6051      	str	r1, [r2, #4]
 8002026:	8819      	ldrh	r1, [r3, #0]
 8002028:	789b      	ldrb	r3, [r3, #2]
 800202a:	8111      	strh	r1, [r2, #8]
 800202c:	7293      	strb	r3, [r2, #10]
  return 1;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000000 	.word	0x20000000
 800203c:	3f19999a 	.word	0x3f19999a
 8002040:	3f4ccccd 	.word	0x3f4ccccd

08002044 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 800204c:	f000 fc54 	bl	80028f8 <keyboard_get_time>
 8002050:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	bf8c      	ite	hi
 8002062:	2301      	movhi	r3, #1
 8002064:	2300      	movls	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002076:	429a      	cmp	r2, r3
 8002078:	bf34      	ite	cc
 800207a:	2301      	movcc	r3, #1
 800207c:	2300      	movcs	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800209a:	4619      	mov	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002220 <update_key_actuation+0x1dc>)
 80020ae:	7892      	ldrb	r2, [r2, #2]
 80020b0:	4413      	add	r3, r2
 80020b2:	4299      	cmp	r1, r3
 80020b4:	bfcc      	ite	gt
 80020b6:	2301      	movgt	r3, #1
 80020b8:	2300      	movle	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80020cc:	4619      	mov	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020d4:	1acb      	subs	r3, r1, r3
 80020d6:	429a      	cmp	r2, r3
 80020d8:	bfb4      	ite	lt
 80020da:	2301      	movlt	r3, #1
 80020dc:	2300      	movge	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80020e8:	3b01      	subs	r3, #1
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	f200 808c 	bhi.w	8002208 <update_key_actuation+0x1c4>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <update_key_actuation+0xb4>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	080021b7 	.word	0x080021b7
 80020fc:	080021c9 	.word	0x080021c9
 8002100:	08002109 	.word	0x08002109
 8002104:	08002145 	.word	0x08002145

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d07e      	beq.n	800220c <update_key_actuation+0x1c8>
      if (key->layers[_TAP_LAYER].value[0]) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <update_key_actuation+0xe0>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002122:	e00a      	b.n	800213a <update_key_actuation+0xf6>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800212c:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <update_key_actuation+0x1e0>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fa8d 	bl	8001654 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
    }
    break;
 8002142:	e063      	b.n	800220c <update_key_actuation+0x1c8>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <update_key_actuation+0x110>
      key->actuation.status = STATUS_RESET;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      break;
 8002152:	e060      	b.n	8002216 <update_key_actuation+0x1d2>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d025      	beq.n	80021a6 <update_key_actuation+0x162>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002160:	2b01      	cmp	r3, #1
 8002162:	d120      	bne.n	80021a6 <update_key_actuation+0x162>
 8002164:	7c3b      	ldrb	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01d      	beq.n	80021a6 <update_key_actuation+0x162>
      if (key->layers[_TAP_LAYER].value[0]) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <update_key_actuation+0x142>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <update_key_actuation+0x1e0>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e00a      	b.n	800219c <update_key_actuation+0x158>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800218e:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <update_key_actuation+0x1e0>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8002194:	2100      	movs	r1, #0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fa5c 	bl	8001654 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 80021a4:	e034      	b.n	8002210 <update_key_actuation+0x1cc>
    } else if (is_before_reset_offset) {
 80021a6:	7cbb      	ldrb	r3, [r7, #18]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d031      	beq.n	8002210 <update_key_actuation+0x1cc>
      key->actuation.status = STATUS_RESET;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    break;
 80021b4:	e02c      	b.n	8002210 <update_key_actuation+0x1cc>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    hid_release_key(key, _TAP_LAYER);
 80021be:	2101      	movs	r1, #1
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fb61 	bl	8001888 <hid_release_key>
    break;
 80021c6:	e026      	b.n	8002216 <update_key_actuation+0x1d2>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 80021c8:	7cbb      	ldrb	r3, [r7, #18]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <update_key_actuation+0x19c>
      key->actuation.status = STATUS_RESET;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, _BASE_LAYER);
 80021d6:	2100      	movs	r1, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fb55 	bl	8001888 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 80021de:	e019      	b.n	8002214 <update_key_actuation+0x1d0>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80021e0:	7c7b      	ldrb	r3, [r7, #17]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <update_key_actuation+0x1d0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <update_key_actuation+0x1d0>
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00e      	beq.n	8002214 <update_key_actuation+0x1d0>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, _BASE_LAYER);
 80021fe:	2100      	movs	r1, #0
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fb41 	bl	8001888 <hid_release_key>
    break;
 8002206:	e005      	b.n	8002214 <update_key_actuation+0x1d0>

  default:
    break;
 8002208:	bf00      	nop
 800220a:	e004      	b.n	8002216 <update_key_actuation+0x1d2>
    break;
 800220c:	bf00      	nop
 800220e:	e002      	b.n	8002216 <update_key_actuation+0x1d2>
    break;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <update_key_actuation+0x1d2>
    break;
 8002214:	bf00      	nop
  }
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	20000534 	.word	0x20000534

08002228 <update_key>:

void update_key(struct key *key) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fda5 	bl	8001d80 <update_key_state>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff01 	bl	8002044 <update_key_actuation>
 8002242:	e000      	b.n	8002246 <update_key+0x1e>
    return;
 8002244:	bf00      	nop
}
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <keyboard_init_keys>:

void keyboard_init_keys() {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	e027      	b.n	80022a8 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002258:	2300      	movs	r3, #0
 800225a:	71bb      	strb	r3, [r7, #6]
 800225c:	e01e      	b.n	800229c <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800225e:	79fa      	ldrb	r2, [r7, #7]
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	4915      	ldr	r1, [pc, #84]	@ (80022b8 <keyboard_init_keys+0x6c>)
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4413      	add	r3, r2
 8002268:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800226c:	2bff      	cmp	r3, #255	@ 0xff
 800226e:	d012      	beq.n	8002296 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	4910      	ldr	r1, [pc, #64]	@ (80022b8 <keyboard_init_keys+0x6c>)
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4413      	add	r3, r2
 800227a:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800227e:	79fa      	ldrb	r2, [r7, #7]
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	490d      	ldr	r1, [pc, #52]	@ (80022b8 <keyboard_init_keys+0x6c>)
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	440b      	add	r3, r1
 800228c:	7859      	ldrb	r1, [r3, #1]
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	f7ff fc47 	bl	8001b24 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	3301      	adds	r3, #1
 800229a:	71bb      	strb	r3, [r7, #6]
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d9dd      	bls.n	800225e <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3301      	adds	r3, #1
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d9d4      	bls.n	8002258 <keyboard_init_keys+0xc>
      }
    }
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	0800db84 	.word	0x0800db84

080022bc <keyboard_task>:

void keyboard_task() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80022c2:	f000 fb19 	bl	80028f8 <keyboard_get_time>
 80022c6:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80022c8:	4b61      	ldr	r3, [pc, #388]	@ (8002450 <keyboard_task+0x194>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e035      	b.n	8002340 <keyboard_task+0x84>
    keyboard_select_amux(amux_channel);
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fab4 	bl	8002844 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80022dc:	2300      	movs	r3, #0
 80022de:	73bb      	strb	r3, [r7, #14]
 80022e0:	e028      	b.n	8002334 <keyboard_task+0x78>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80022e2:	7bbb      	ldrb	r3, [r7, #14]
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	495b      	ldr	r1, [pc, #364]	@ (8002454 <keyboard_task+0x198>)
 80022e8:	2032      	movs	r0, #50	@ 0x32
 80022ea:	fb00 f202 	mul.w	r2, r0, r2
 80022ee:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d015      	beq.n	800232c <keyboard_task+0x70>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fac6 	bl	8002894 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	2132      	movs	r1, #50	@ 0x32
 800230e:	fb01 f202 	mul.w	r2, r1, r2
 8002312:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <keyboard_task+0x198>)
 800231e:	4413      	add	r3, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff81 	bl	8002228 <update_key>

      keyboard_close_adc();
 8002326:	f000 fadd 	bl	80028e4 <keyboard_close_adc>
 800232a:	e000      	b.n	800232e <keyboard_task+0x72>
        continue;
 800232c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	3301      	adds	r3, #1
 8002332:	73bb      	strb	r3, [r7, #14]
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0d3      	beq.n	80022e2 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	3301      	adds	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d9c6      	bls.n	80022d4 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002346:	2300      	movs	r3, #0
 8002348:	737b      	strb	r3, [r7, #13]
 800234a:	e072      	b.n	8002432 <keyboard_task+0x176>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800234c:	2300      	movs	r3, #0
 800234e:	733b      	strb	r3, [r7, #12]
 8002350:	e069      	b.n	8002426 <keyboard_task+0x16a>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002352:	7b3b      	ldrb	r3, [r7, #12]
 8002354:	7b7a      	ldrb	r2, [r7, #13]
 8002356:	493f      	ldr	r1, [pc, #252]	@ (8002454 <keyboard_task+0x198>)
 8002358:	2032      	movs	r0, #50	@ 0x32
 800235a:	fb00 f202 	mul.w	r2, r0, r2
 800235e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002362:	fb00 f303 	mul.w	r3, r0, r3
 8002366:	4413      	add	r3, r2
 8002368:	440b      	add	r3, r1
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d056      	beq.n	800241e <keyboard_task+0x162>
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	7b7a      	ldrb	r2, [r7, #13]
 8002374:	4937      	ldr	r1, [pc, #220]	@ (8002454 <keyboard_task+0x198>)
 8002376:	2032      	movs	r0, #50	@ 0x32
 8002378:	fb00 f202 	mul.w	r2, r0, r2
 800237c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002380:	fb00 f303 	mul.w	r3, r0, r3
 8002384:	4413      	add	r3, r2
 8002386:	440b      	add	r3, r1
 8002388:	332a      	adds	r3, #42	@ 0x2a
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d146      	bne.n	800241e <keyboard_task+0x162>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	7b7a      	ldrb	r2, [r7, #13]
 8002394:	2132      	movs	r1, #50	@ 0x32
 8002396:	fb01 f202 	mul.w	r2, r1, r2
 800239a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002454 <keyboard_task+0x198>)
 80023a6:	4413      	add	r3, r2
 80023a8:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf34      	ite	cc
 80023ba:	2301      	movcc	r3, #1
 80023bc:	2300      	movcs	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023c2:	f000 fa99 	bl	80028f8 <keyboard_get_time>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <keyboard_task+0x19c>)
 80023d2:	88d2      	ldrh	r2, [r2, #6]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	bf94      	ite	ls
 80023d8:	2301      	movls	r3, #1
 80023da:	2300      	movhi	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <keyboard_task+0x142>
 80023e6:	78bb      	ldrb	r3, [r7, #2]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <keyboard_task+0x142>
        key->actuation.status = STATUS_TAP;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _TAP_LAYER);
 80023f4:	2101      	movs	r1, #1
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff f92c 	bl	8001654 <hid_press_key>
 80023fc:	e010      	b.n	8002420 <keyboard_task+0x164>
      } else if (!is_before_timeout || key_triggered) {
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <keyboard_task+0x150>
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <keyboard_task+0x194>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <keyboard_task+0x164>
        key->actuation.status = STATUS_TRIGGERED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _BASE_LAYER);
 8002414:	2100      	movs	r1, #0
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff f91c 	bl	8001654 <hid_press_key>
 800241c:	e000      	b.n	8002420 <keyboard_task+0x164>
        continue;
 800241e:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002420:	7b3b      	ldrb	r3, [r7, #12]
 8002422:	3301      	adds	r3, #1
 8002424:	733b      	strb	r3, [r7, #12]
 8002426:	7b3b      	ldrb	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d092      	beq.n	8002352 <keyboard_task+0x96>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800242c:	7b7b      	ldrb	r3, [r7, #13]
 800242e:	3301      	adds	r3, #1
 8002430:	737b      	strb	r3, [r7, #13]
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d989      	bls.n	800234c <keyboard_task+0x90>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002438:	f000 fa5e 	bl	80028f8 <keyboard_get_time>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	4a06      	ldr	r2, [pc, #24]	@ (800245c <keyboard_task+0x1a0>)
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000534 	.word	0x20000534
 8002454:	20000210 	.word	0x20000210
 8002458:	20000000 	.word	0x20000000
 800245c:	20000530 	.word	0x20000530

08002460 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002466:	f000 fe2b 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246a:	f000 f82f 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246e:	f000 f943 	bl	80026f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002472:	f000 f893 	bl	800259c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002476:	f000 f911 	bl	800269c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800247a:	f000 f8e1 	bl	8002640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <main+0x64>)
 8002480:	2201      	movs	r2, #1
 8002482:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <main+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 800248a:	f7ff fedf 	bl	800224c <keyboard_init_keys>
  ssd1306_Init();
 800248e:	f000 fa79 	bl	8002984 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <main+0x68>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	803b      	strh	r3, [r7, #0]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002498:	463b      	mov	r3, r7
 800249a:	4619      	mov	r1, r3
 800249c:	2000      	movs	r0, #0
 800249e:	f009 faa1 	bl	800b9e4 <tusb_rhport_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;
  while (1) {
    // MARK: Main loop
	start_at=HAL_GetTick();
 80024a2:	f000 fe73 	bl	800318c <HAL_GetTick>
 80024a6:	6078      	str	r0, [r7, #4]
  tud_task_ext(UINT32_MAX, false);
 80024a8:	2100      	movs	r1, #0
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	f005 fe4b 	bl	8008148 <tud_task_ext>
}
 80024b2:	bf00      	nop
    tud_task();
    keyboard_task();
 80024b4:	f7ff ff02 	bl	80022bc <keyboard_task>
    hid_task();
 80024b8:	f7ff f87c 	bl	80015b4 <hid_task>
    cdc_task();
 80024bc:	f7fe f88e 	bl	80005dc <cdc_task>
	start_at=HAL_GetTick();
 80024c0:	bf00      	nop
 80024c2:	e7ee      	b.n	80024a2 <main+0x42>
 80024c4:	20000ab8 	.word	0x20000ab8
 80024c8:	0800da44 	.word	0x0800da44

080024cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2230      	movs	r2, #48	@ 0x30
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f009 fded 	bl	800c0ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <SystemClock_Config+0xc8>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a26      	ldr	r2, [pc, #152]	@ (8002594 <SystemClock_Config+0xc8>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <SystemClock_Config+0xc8>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <SystemClock_Config+0xcc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a20      	ldr	r2, [pc, #128]	@ (8002598 <SystemClock_Config+0xcc>)
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <SystemClock_Config+0xcc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002528:	2301      	movs	r3, #1
 800252a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800252c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002532:	2302      	movs	r3, #2
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 800253c:	230d      	movs	r3, #13
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002540:	23a8      	movs	r3, #168	@ 0xa8
 8002542:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002544:	2304      	movs	r3, #4
 8002546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002548:	2307      	movs	r3, #7
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fcb7 	bl	8004ec4 <HAL_RCC_OscConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0x94>
    Error_Handler();
 800255c:	f000 f9d3 	bl	8002906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002560:	230f      	movs	r3, #15
 8002562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002564:	2302      	movs	r3, #2
 8002566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800256c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f002 ff19 	bl	80053b4 <HAL_RCC_ClockConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SystemClock_Config+0xc0>
    Error_Handler();
 8002588:	f000 f9bd 	bl	8002906 <Error_Handler>
  }
}
 800258c:	bf00      	nop
 800258e:	3750      	adds	r7, #80	@ 0x50
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000

0800259c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025a2:	463b      	mov	r3, r7
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80025ae:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025b0:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <MX_ADC1_Init+0x9c>)
 80025b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025ce:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025d8:	2200      	movs	r2, #0
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025dc:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <MX_ADC1_Init+0xa0>)
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025e2:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80025fc:	480d      	ldr	r0, [pc, #52]	@ (8002634 <MX_ADC1_Init+0x98>)
 80025fe:	f000 fdf5 	bl	80031ec <HAL_ADC_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_ADC1_Init+0x70>
    Error_Handler();
 8002608:	f000 f97d 	bl	8002906 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 800260c:	2309      	movs	r3, #9
 800260e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002610:	2301      	movs	r3, #1
 8002612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	@ (8002634 <MX_ADC1_Init+0x98>)
 800261e:	f000 ffa9 	bl	8003574 <HAL_ADC_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_ADC1_Init+0x90>
    Error_Handler();
 8002628:	f000 f96d 	bl	8002906 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000538 	.word	0x20000538
 8002638:	40012000 	.word	0x40012000
 800263c:	0f000001 	.word	0x0f000001

08002640 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002646:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <MX_I2C1_Init+0x54>)
 8002648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_I2C1_Init+0x50>)
 800264c:	4a12      	ldr	r2, [pc, #72]	@ (8002698 <MX_I2C1_Init+0x58>)
 800264e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_I2C1_Init+0x50>)
 800265e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_I2C1_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_I2C1_Init+0x50>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800267c:	4804      	ldr	r0, [pc, #16]	@ (8002690 <MX_I2C1_Init+0x50>)
 800267e:	f001 fe65 	bl	800434c <HAL_I2C_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002688:	f000 f93d 	bl	8002906 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000580 	.word	0x20000580
 8002694:	40005400 	.word	0x40005400
 8002698:	000186a0 	.word	0x000186a0

0800269c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026aa:	2204      	movs	r2, #4
 80026ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b0:	2202      	movs	r2, #2
 80026b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026bc:	2202      	movs	r2, #2
 80026be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026da:	2200      	movs	r2, #0
 80026dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80026de:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026e0:	f002 fae1 	bl	8004ca6 <HAL_PCD_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 80026ea:	f000 f90c 	bl	8002906 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200005d4 	.word	0x200005d4

080026f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <MX_GPIO_Init+0x9c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <MX_GPIO_Init+0x9c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <MX_GPIO_Init+0x9c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002768:	480b      	ldr	r0, [pc, #44]	@ (8002798 <MX_GPIO_Init+0xa0>)
 800276a:	f001 fdd5 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800276e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002774:	2301      	movs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4619      	mov	r1, r3
 8002786:	4804      	ldr	r0, [pc, #16]	@ (8002798 <MX_GPIO_Init+0xa0>)
 8002788:	f001 fc42 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40020400 	.word	0x40020400

0800279c <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 80027a0:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <keyboard_read_config+0x1c>)
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <keyboard_read_config+0x20>)
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80027ac:	461a      	mov	r2, r3
 80027ae:	f009 fd5c 	bl	800c26a <memcpy>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	08040000 	.word	0x08040000

080027c0 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80027d6:	d301      	bcc.n	80027dc <keyboard_write_config+0x1c>
    return 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	e02d      	b.n	8002838 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 80027dc:	f001 fa5e 	bl	8003c9c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <keyboard_write_config+0x80>)
 80027e2:	22b3      	movs	r2, #179	@ 0xb3
 80027e4:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 80027e6:	2102      	movs	r1, #2
 80027e8:	2006      	movs	r0, #6
 80027ea:	f001 fbc9 	bl	8003f80 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	81fb      	strh	r3, [r7, #14]
 80027f2:	e01a      	b.n	800282a <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80027fa:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80027fe:	4619      	mov	r1, r3
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2200      	movs	r2, #0
 800280c:	461c      	mov	r4, r3
 800280e:	4615      	mov	r5, r2
 8002810:	4622      	mov	r2, r4
 8002812:	462b      	mov	r3, r5
 8002814:	2000      	movs	r0, #0
 8002816:	f001 f9ed 	bl	8003bf4 <HAL_FLASH_Program>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002820:	f001 fa5e 	bl	8003ce0 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	3301      	adds	r3, #1
 8002828:	81fb      	strh	r3, [r7, #14]
 800282a:	89fa      	ldrh	r2, [r7, #14]
 800282c:	883b      	ldrh	r3, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3e0      	bcc.n	80027f4 <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 8002832:	f001 fa55 	bl	8003ce0 <HAL_FLASH_Lock>
  return 1;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bdb0      	pop	{r4, r5, r7, pc}
 8002840:	40023c00 	.word	0x40023c00

08002844 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e013      	b.n	800287c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <keyboard_select_amux+0x48>)
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	b299      	uxth	r1, r3
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	fa42 f303 	asr.w	r3, r2, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	4807      	ldr	r0, [pc, #28]	@ (8002890 <keyboard_select_amux+0x4c>)
 8002872:	f001 fd51 	bl	8004318 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3301      	adds	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d9e8      	bls.n	8002854 <keyboard_select_amux+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0800dba4 	.word	0x0800dba4
 8002890:	40020400 	.word	0x40020400

08002894 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 800289e:	2209      	movs	r2, #9
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <keyboard_select_adc+0x30>)
 80028a2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80028a4:	4907      	ldr	r1, [pc, #28]	@ (80028c4 <keyboard_select_adc+0x30>)
 80028a6:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <keyboard_select_adc+0x34>)
 80028a8:	f000 fe64 	bl	8003574 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80028ac:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <keyboard_select_adc+0x34>)
 80028ae:	f000 fce1 	bl	8003274 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80028b2:	2101      	movs	r1, #1
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <keyboard_select_adc+0x34>)
 80028b6:	f000 fdc4 	bl	8003442 <HAL_ADC_PollForConversion>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000ab8 	.word	0x20000ab8
 80028c8:	20000538 	.word	0x20000538

080028cc <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80028d0:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <keyboard_read_adc+0x14>)
 80028d2:	f000 fe41 	bl	8003558 <HAL_ADC_GetValue>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b29b      	uxth	r3, r3
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000538 	.word	0x20000538

080028e4 <keyboard_close_adc>:

void keyboard_close_adc() {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <keyboard_close_adc+0x10>)
 80028ea:	f000 fd77 	bl	80033dc <HAL_ADC_Stop>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000538 	.word	0x20000538

080028f8 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028fc:	f000 fc46 	bl	800318c <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}

08002906 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290a:	b672      	cpsid	i
}
 800290c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <Error_Handler+0x8>

08002912 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af04      	add	r7, sp, #16
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	2200      	movs	r2, #0
 800293c:	2178      	movs	r1, #120	@ 0x78
 800293e:	4803      	ldr	r0, [pc, #12]	@ (800294c <ssd1306_WriteCommand+0x2c>)
 8002940:	f001 fe48 	bl	80045d4 <HAL_I2C_Mem_Write>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000580 	.word	0x20000580

08002950 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af04      	add	r7, sp, #16
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f04f 32ff 	mov.w	r2, #4294967295
 8002962:	9202      	str	r2, [sp, #8]
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	2178      	movs	r1, #120	@ 0x78
 8002970:	4803      	ldr	r0, [pc, #12]	@ (8002980 <ssd1306_WriteData+0x30>)
 8002972:	f001 fe2f 	bl	80045d4 <HAL_I2C_Mem_Write>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000580 	.word	0x20000580

08002984 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002988:	f7ff ffc3 	bl	8002912 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800298c:	2064      	movs	r0, #100	@ 0x64
 800298e:	f000 fc09 	bl	80031a4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002992:	2000      	movs	r0, #0
 8002994:	f000 f8b4 	bl	8002b00 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002998:	2020      	movs	r0, #32
 800299a:	f7ff ffc1 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff ffbe 	bl	8002920 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029a4:	20b0      	movs	r0, #176	@ 0xb0
 80029a6:	f7ff ffbb 	bl	8002920 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80029aa:	20c0      	movs	r0, #192	@ 0xc0
 80029ac:	f7ff ffb8 	bl	8002920 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff ffb5 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80029b6:	2010      	movs	r0, #16
 80029b8:	f7ff ffb2 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80029bc:	2040      	movs	r0, #64	@ 0x40
 80029be:	f7ff ffaf 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80029c2:	20ff      	movs	r0, #255	@ 0xff
 80029c4:	f000 f888 	bl	8002ad8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80029c8:	20a0      	movs	r0, #160	@ 0xa0
 80029ca:	f7ff ffa9 	bl	8002920 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 80029ce:	20a7      	movs	r0, #167	@ 0xa7
 80029d0:	f7ff ffa6 	bl	8002920 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80029d4:	20a8      	movs	r0, #168	@ 0xa8
 80029d6:	f7ff ffa3 	bl	8002920 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80029da:	203f      	movs	r0, #63	@ 0x3f
 80029dc:	f7ff ffa0 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029e0:	20a4      	movs	r0, #164	@ 0xa4
 80029e2:	f7ff ff9d 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80029e6:	20d3      	movs	r0, #211	@ 0xd3
 80029e8:	f7ff ff9a 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff ff97 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80029f2:	20d5      	movs	r0, #213	@ 0xd5
 80029f4:	f7ff ff94 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80029f8:	20f0      	movs	r0, #240	@ 0xf0
 80029fa:	f7ff ff91 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80029fe:	20d9      	movs	r0, #217	@ 0xd9
 8002a00:	f7ff ff8e 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a04:	2022      	movs	r0, #34	@ 0x22
 8002a06:	f7ff ff8b 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a0a:	20da      	movs	r0, #218	@ 0xda
 8002a0c:	f7ff ff88 	bl	8002920 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a10:	2012      	movs	r0, #18
 8002a12:	f7ff ff85 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a16:	20db      	movs	r0, #219	@ 0xdb
 8002a18:	f7ff ff82 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a1c:	2020      	movs	r0, #32
 8002a1e:	f7ff ff7f 	bl	8002920 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a22:	208d      	movs	r0, #141	@ 0x8d
 8002a24:	f7ff ff7c 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a28:	2014      	movs	r0, #20
 8002a2a:	f7ff ff79 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 f866 	bl	8002b00 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 f80f 	bl	8002a58 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a3a:	f000 f825 	bl	8002a88 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <ssd1306_Init+0xd0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <ssd1306_Init+0xd0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a4a:	4b02      	ldr	r3, [pc, #8]	@ (8002a54 <ssd1306_Init+0xd0>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	711a      	strb	r2, [r3, #4]
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000ec8 	.word	0x20000ec8

08002a58 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <ssd1306_Fill+0x14>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <ssd1306_Fill+0x16>
 8002a6c:	23ff      	movs	r3, #255	@ 0xff
 8002a6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a72:	4619      	mov	r1, r3
 8002a74:	4803      	ldr	r0, [pc, #12]	@ (8002a84 <ssd1306_Fill+0x2c>)
 8002a76:	f009 fb20 	bl	800c0ba <memset>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000ac8 	.word	0x20000ac8

08002a88 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	e016      	b.n	8002ac2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	3b50      	subs	r3, #80	@ 0x50
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff40 	bl	8002920 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff ff3d 	bl	8002920 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002aa6:	2010      	movs	r0, #16
 8002aa8:	f7ff ff3a 	bl	8002920 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <ssd1306_UpdateScreen+0x4c>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff4a 	bl	8002950 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	d9e5      	bls.n	8002a94 <ssd1306_UpdateScreen+0xc>
    }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000ac8 	.word	0x20000ac8

08002ad8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ae2:	2381      	movs	r3, #129	@ 0x81
 8002ae4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff19 	bl	8002920 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff15 	bl	8002920 <ssd1306_WriteCommand>
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002b10:	23af      	movs	r3, #175	@ 0xaf
 8002b12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <ssd1306_SetDisplayOn+0x38>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	715a      	strb	r2, [r3, #5]
 8002b1a:	e004      	b.n	8002b26 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002b1c:	23ae      	movs	r3, #174	@ 0xae
 8002b1e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <ssd1306_SetDisplayOn+0x38>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fef9 	bl	8002920 <ssd1306_WriteCommand>
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000ec8 	.word	0x20000ec8

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_MspInit+0x4c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <HAL_ADC_MspInit+0x7c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d127      	bne.n	8002bfe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <HAL_ADC_MspInit+0x80>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002be6:	2302      	movs	r3, #2
 8002be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bea:	2303      	movs	r3, #3
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <HAL_ADC_MspInit+0x84>)
 8002bfa:	f001 fa09 	bl	8004010 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	@ 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40012000 	.word	0x40012000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020400 	.word	0x40020400

08002c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	@ (8002c98 <HAL_I2C_MspInit+0x84>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12b      	bne.n	8002c8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c52:	23c0      	movs	r3, #192	@ 0xc0
 8002c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c56:	2312      	movs	r3, #18
 8002c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c62:	2304      	movs	r3, #4
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <HAL_I2C_MspInit+0x8c>)
 8002c6e:	f001 f9cf 	bl	8004010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a08      	ldr	r2, [pc, #32]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_I2C_MspInit+0x88>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3728      	adds	r7, #40	@ 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	@ 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc4:	d13a      	bne.n	8002d3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ce2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4812      	ldr	r0, [pc, #72]	@ (8002d48 <HAL_PCD_MspInit+0xa4>)
 8002d00:	f001 f986 	bl	8004010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d08:	4a0e      	ldr	r2, [pc, #56]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d18:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_PCD_MspInit+0xa0>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2043      	movs	r0, #67	@ 0x43
 8002d32:	f000 ff28 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002d36:	2043      	movs	r0, #67	@ 0x43
 8002d38:	f000 ff41 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	@ 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <NMI_Handler+0x4>

08002d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8002d58:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	bf00      	nop
 8002d5c:	e7fd      	b.n	8002d5a <HardFault_Handler+0x6>

08002d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <MemManage_Handler+0x4>

08002d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <BusFault_Handler+0x4>

08002d6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <UsageFault_Handler+0x4>

08002d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da4:	f000 f9de 	bl	8003164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8002da8:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <SysTick_Handler+0x18>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a02      	ldr	r2, [pc, #8]	@ (8002db8 <SysTick_Handler+0x18>)
 8002db0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000ed0 	.word	0x20000ed0

08002dbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f008 fa25 	bl	800b210 <dcd_int_handler>
	return;
 8002dc6:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  return 1;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_kill>:

int _kill(int pid, int sig)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002de4:	f009 fa14 	bl	800c210 <__errno>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2216      	movs	r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
  return -1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_exit>:

void _exit (int status)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffe7 	bl	8002dda <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <_exit+0x12>

08002e10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e00a      	b.n	8002e38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e22:	f3af 8000 	nop.w
 8002e26:	4601      	mov	r1, r0
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	60ba      	str	r2, [r7, #8]
 8002e2e:	b2ca      	uxtb	r2, r1
 8002e30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dbf0      	blt.n	8002e22 <_read+0x12>
  }

  return len;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e009      	b.n	8002e70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	60ba      	str	r2, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dbf1      	blt.n	8002e5c <_write+0x12>
  }
  return len;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_close>:

int _close(int file)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eaa:	605a      	str	r2, [r3, #4]
  return 0;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_isatty>:

int _isatty(int file)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <_sbrk+0x5c>)
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <_sbrk+0x60>)
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <_sbrk+0x64>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <_sbrk+0x68>)
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d207      	bcs.n	8002f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f1c:	f009 f978 	bl	800c210 <__errno>
 8002f20:	4603      	mov	r3, r0
 8002f22:	220c      	movs	r2, #12
 8002f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	e009      	b.n	8002f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <_sbrk+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f32:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <_sbrk+0x64>)
 8002f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20020000 	.word	0x20020000
 8002f4c:	00000400 	.word	0x00000400
 8002f50:	20000ed4 	.word	0x20000ed4
 8002f54:	20001410 	.word	0x20001410

08002f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <SystemInit+0x20>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f62:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <SystemInit+0x20>)
 8002f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8002f80:	4b02      	ldr	r3, [pc, #8]	@ (8002f8c <tud_descriptor_device_cb+0x10>)
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	0800dbcc 	.word	0x0800dbcc

08002f90 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8002f9a:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <tud_hid_descriptor_report_cb+0x18>)
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	0800dbe0 	.word	0x0800dbe0

08002fac <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8002fb6:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <tud_descriptor_configuration_cb+0x18>)
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	0800dc3c 	.word	0x0800dc3c

08002fc8 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002fde:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <tud_descriptor_string_cb+0x9c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <tud_descriptor_string_cb+0xa0>)
 8002fe8:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e027      	b.n	8003040 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d901      	bls.n	8002ffa <tud_descriptor_string_cb+0x32>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e02f      	b.n	800305a <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	@ (8003064 <tud_descriptor_string_cb+0x9c>)
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003004:	68b8      	ldr	r0, [r7, #8]
 8003006:	f7fd f8f5 	bl	80001f4 <strlen>
 800300a:	4603      	mov	r3, r0
 800300c:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b1f      	cmp	r3, #31
 8003012:	d901      	bls.n	8003018 <tud_descriptor_string_cb+0x50>
 8003014:	231f      	movs	r3, #31
 8003016:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003018:	2300      	movs	r3, #0
 800301a:	73bb      	strb	r3, [r7, #14]
 800301c:	e00c      	b.n	8003038 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	4413      	add	r3, r2
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	3301      	adds	r3, #1
 800302a:	4611      	mov	r1, r2
 800302c:	4a0e      	ldr	r2, [pc, #56]	@ (8003068 <tud_descriptor_string_cb+0xa0>)
 800302e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	3301      	adds	r3, #1
 8003036:	73bb      	strb	r3, [r7, #14]
 8003038:	7bba      	ldrb	r2, [r7, #14]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	429a      	cmp	r2, r3
 800303e:	d3ee      	bcc.n	800301e <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	3301      	adds	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	b29b      	uxth	r3, r3
 800304a:	b21b      	sxth	r3, r3
 800304c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003050:	b21b      	sxth	r3, r3
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <tud_descriptor_string_cb+0xa0>)
 8003056:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <tud_descriptor_string_cb+0xa0>)
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000010c 	.word	0x2000010c
 8003068:	20000ed8 	.word	0x20000ed8

0800306c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800306c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003070:	f7ff ff72 	bl	8002f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003074:	480c      	ldr	r0, [pc, #48]	@ (80030a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003076:	490d      	ldr	r1, [pc, #52]	@ (80030ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003078:	4a0d      	ldr	r2, [pc, #52]	@ (80030b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800307c:	e002      	b.n	8003084 <LoopCopyDataInit>

0800307e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003082:	3304      	adds	r3, #4

08003084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003088:	d3f9      	bcc.n	800307e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800308c:	4c0a      	ldr	r4, [pc, #40]	@ (80030b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003090:	e001      	b.n	8003096 <LoopFillZerobss>

08003092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003094:	3204      	adds	r2, #4

08003096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003098:	d3fb      	bcc.n	8003092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309a:	f009 f8bf 	bl	800c21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309e:	f7ff f9df 	bl	8002460 <main>
  bx  lr    
 80030a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ac:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80030b0:	0800def8 	.word	0x0800def8
  ldr r2, =_sbss
 80030b4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80030b8:	20001410 	.word	0x20001410

080030bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_Init+0x40>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003100 <HAL_Init+0x40>)
 80030ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_Init+0x40>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <HAL_Init+0x40>)
 80030d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030dc:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_Init+0x40>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e8:	2003      	movs	r0, #3
 80030ea:	f000 fd41 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ee:	200f      	movs	r0, #15
 80030f0:	f000 f808 	bl	8003104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f4:	f7ff fd22 	bl	8002b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00

08003104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_InitTick+0x54>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_InitTick+0x58>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311a:	fbb3 f3f1 	udiv	r3, r3, r1
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fd59 	bl	8003bda <HAL_SYSTICK_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00e      	b.n	8003150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b0f      	cmp	r3, #15
 8003136:	d80a      	bhi.n	800314e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003138:	2200      	movs	r2, #0
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	f000 fd21 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <HAL_InitTick+0x5c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000108 	.word	0x20000108
 800315c:	20000128 	.word	0x20000128
 8003160:	20000124 	.word	0x20000124

08003164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_IncTick+0x20>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_IncTick+0x24>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4413      	add	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_IncTick+0x24>)
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000128 	.word	0x20000128
 8003188:	20000f18 	.word	0x20000f18

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_GetTick+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000f18 	.word	0x20000f18

080031a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff ffee 	bl	800318c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d005      	beq.n	80031ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <HAL_Delay+0x44>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ca:	bf00      	nop
 80031cc:	f7ff ffde 	bl	800318c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d8f7      	bhi.n	80031cc <HAL_Delay+0x28>
  {
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000128 	.word	0x20000128

080031ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e033      	b.n	800326a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fcbe 	bl	8002b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 faca 	bl	80037d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	@ 0x40
 800325a:	e001      	b.n	8003260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADC_Start+0x1a>
 800328a:	2302      	movs	r3, #2
 800328c:	e097      	b.n	80033be <HAL_ADC_Start+0x14a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d018      	beq.n	80032d6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032b4:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <HAL_ADC_Start+0x158>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a45      	ldr	r2, [pc, #276]	@ (80033d0 <HAL_ADC_Start+0x15c>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9a      	lsrs	r2, r3, #18
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032c8:	e002      	b.n	80032d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d15f      	bne.n	80033a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800330e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003322:	d106      	bne.n	8003332 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f023 0206 	bic.w	r2, r3, #6
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003330:	e002      	b.n	8003338 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <HAL_ADC_Start+0x160>)
 8003342:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800334c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10f      	bne.n	800337a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d129      	bne.n	80033bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	e020      	b.n	80033bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <HAL_ADC_Start+0x164>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d11b      	bne.n	80033bc <HAL_ADC_Start+0x148>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	e00b      	b.n	80033bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000108 	.word	0x20000108
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	40012300 	.word	0x40012300
 80033d8:	40012000 	.word	0x40012000

080033dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Stop+0x16>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e021      	b.n	8003436 <HAL_ADC_Stop+0x5a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d113      	bne.n	8003488 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	d10b      	bne.n	8003488 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e063      	b.n	8003550 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003488:	f7ff fe80 	bl	800318c <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800348e:	e021      	b.n	80034d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d01d      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_ADC_PollForConversion+0x6c>
 800349e:	f7ff fe75 	bl	800318c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d212      	bcs.n	80034d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d00b      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e03d      	b.n	8003550 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d1d6      	bne.n	8003490 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0212 	mvn.w	r2, #18
 80034ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d123      	bne.n	800354e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11f      	bne.n	800354e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d111      	bne.n	800354e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x1c>
 800358c:	2302      	movs	r3, #2
 800358e:	e113      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x244>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b09      	cmp	r3, #9
 800359e:	d925      	bls.n	80035ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	3b1e      	subs	r3, #30
 80035b6:	2207      	movs	r2, #7
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43da      	mvns	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	400a      	ands	r2, r1
 80035c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4618      	mov	r0, r3
 80035d8:	4603      	mov	r3, r0
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4403      	add	r3, r0
 80035de:	3b1e      	subs	r3, #30
 80035e0:	409a      	lsls	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	e022      	b.n	8003632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6919      	ldr	r1, [r3, #16]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	2207      	movs	r2, #7
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	400a      	ands	r2, r1
 800360e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	4618      	mov	r0, r3
 8003622:	4603      	mov	r3, r0
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4403      	add	r3, r0
 8003628:	409a      	lsls	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d824      	bhi.n	8003684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b05      	subs	r3, #5
 800364c:	221f      	movs	r2, #31
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	400a      	ands	r2, r1
 800365a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b05      	subs	r3, #5
 8003676:	fa00 f203 	lsl.w	r2, r0, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34
 8003682:	e04c      	b.n	800371e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b0c      	cmp	r3, #12
 800368a:	d824      	bhi.n	80036d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b23      	subs	r3, #35	@ 0x23
 800369e:	221f      	movs	r2, #31
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43da      	mvns	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	400a      	ands	r2, r1
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4618      	mov	r0, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b23      	subs	r3, #35	@ 0x23
 80036c8:	fa00 f203 	lsl.w	r2, r0, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80036d4:	e023      	b.n	800371e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b41      	subs	r3, #65	@ 0x41
 80036e8:	221f      	movs	r2, #31
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	400a      	ands	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	4618      	mov	r0, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	3b41      	subs	r3, #65	@ 0x41
 8003712:	fa00 f203 	lsl.w	r2, r0, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800371e:	4b29      	ldr	r3, [pc, #164]	@ (80037c4 <HAL_ADC_ConfigChannel+0x250>)
 8003720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a28      	ldr	r2, [pc, #160]	@ (80037c8 <HAL_ADC_ConfigChannel+0x254>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10f      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1d8>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b12      	cmp	r3, #18
 8003732:	d10b      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <HAL_ADC_ConfigChannel+0x254>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d12b      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x23a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1c      	ldr	r2, [pc, #112]	@ (80037cc <HAL_ADC_ConfigChannel+0x258>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <HAL_ADC_ConfigChannel+0x1f4>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b11      	cmp	r3, #17
 8003766:	d122      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a11      	ldr	r2, [pc, #68]	@ (80037cc <HAL_ADC_ConfigChannel+0x258>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800378a:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_ADC_ConfigChannel+0x25c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a11      	ldr	r2, [pc, #68]	@ (80037d4 <HAL_ADC_ConfigChannel+0x260>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9a      	lsrs	r2, r3, #18
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80037a0:	e002      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f9      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40012300 	.word	0x40012300
 80037c8:	40012000 	.word	0x40012000
 80037cc:	10000012 	.word	0x10000012
 80037d0:	20000108 	.word	0x20000108
 80037d4:	431bde83 	.word	0x431bde83

080037d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e0:	4b79      	ldr	r3, [pc, #484]	@ (80039c8 <ADC_Init+0x1f0>)
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800380c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	021a      	lsls	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	4a58      	ldr	r2, [pc, #352]	@ (80039cc <ADC_Init+0x1f4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d022      	beq.n	80038b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800387e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6899      	ldr	r1, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e00f      	b.n	80038d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0202 	bic.w	r2, r2, #2
 80038e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7e1b      	ldrb	r3, [r3, #24]
 80038f0:	005a      	lsls	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003912:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	3b01      	subs	r3, #1
 8003930:	035a      	lsls	r2, r3, #13
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e007      	b.n	800394c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	3b01      	subs	r3, #1
 8003968:	051a      	lsls	r2, r3, #20
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800398e:	025a      	lsls	r2, r3, #9
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	029a      	lsls	r2, r3, #10
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40012300 	.word	0x40012300
 80039cc:	0f000001 	.word	0x0f000001

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	@ (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff3e 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff8e 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5d 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff31 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa2 	bl	8003b2c <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c06:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c08:	7e1b      	ldrb	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_FLASH_Program+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e03b      	b.n	8003c8a <HAL_FLASH_Program+0x96>
 8003c12:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c1c:	f000 f870 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12b      	bne.n	8003c82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c30:	783b      	ldrb	r3, [r7, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	68b8      	ldr	r0, [r7, #8]
 8003c36:	f000 f91b 	bl	8003e70 <FLASH_Program_Byte>
 8003c3a:	e016      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c42:	883b      	ldrh	r3, [r7, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f000 f8ee 	bl	8003e28 <FLASH_Program_HalfWord>
 8003c4c:	e00d      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d105      	bne.n	8003c60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	f000 f8c3 	bl	8003de4 <FLASH_Program_Word>
 8003c5e:	e004      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c64:	68b8      	ldr	r0, [r7, #8]
 8003c66:	f000 f88b 	bl	8003d80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c6e:	f000 f847 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_FLASH_Program+0xa4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4a07      	ldr	r2, [pc, #28]	@ (8003c98 <HAL_FLASH_Program+0xa4>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c82:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000f1c 	.word	0x20000f1c
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0b      	bge.n	8003cc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cb0:	4a09      	ldr	r2, [pc, #36]	@ (8003cd8 <HAL_FLASH_Unlock+0x3c>)
 8003cb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cb4:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cb6:	4a09      	ldr	r2, [pc, #36]	@ (8003cdc <HAL_FLASH_Unlock+0x40>)
 8003cb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da01      	bge.n	8003cc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023c00 	.word	0x40023c00
 8003cd8:	45670123 	.word	0x45670123
 8003cdc:	cdef89ab 	.word	0xcdef89ab

08003ce0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <HAL_FLASH_Lock+0x1c>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <HAL_FLASH_Lock+0x1c>)
 8003cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <FLASH_WaitForLastOperation+0x78>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d12:	f7ff fa3b 	bl	800318c <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d18:	e010      	b.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d00c      	beq.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <FLASH_WaitForLastOperation+0x38>
 8003d28:	f7ff fa30 	bl	800318c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d201      	bcs.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e019      	b.n	8003d70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e8      	bne.n	8003d1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d48:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d66:	f000 f8a5 	bl	8003eb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
  
}  
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000f1c 	.word	0x20000f1c
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d8c:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a10      	ldr	r2, [pc, #64]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003db6:	f3bf 8f6f 	isb	sy
}
 8003dba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	000a      	movs	r2, r1
 8003dca:	2300      	movs	r3, #0
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	3104      	adds	r1, #4
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40023c00 	.word	0x40023c00

08003de4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	4a06      	ldr	r2, [pc, #24]	@ (8003e24 <FLASH_Program_Word+0x40>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40023c00 	.word	0x40023c00

08003e28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e34:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a0c      	ldr	r2, [pc, #48]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	4a06      	ldr	r2, [pc, #24]	@ (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	801a      	strh	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00

08003e70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003e88:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e8a:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4a06      	ldr	r2, [pc, #24]	@ (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	701a      	strb	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00

08003eb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f043 0310 	orr.w	r3, r3, #16
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003ece:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ed0:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003ed6:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ee2:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f043 0308 	orr.w	r3, r3, #8
 8003eea:	4a24      	ldr	r2, [pc, #144]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003eec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003eee:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ef4:	4b20      	ldr	r3, [pc, #128]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003f00:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f0e:	2240      	movs	r2, #64	@ 0x40
 8003f10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003f12:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f2a:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	4a0d      	ldr	r2, [pc, #52]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f5c:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	4a05      	ldr	r2, [pc, #20]	@ (8003f7c <FLASH_SetErrorCode+0xc8>)
 8003f66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f68:	4b03      	ldr	r3, [pc, #12]	@ (8003f78 <FLASH_SetErrorCode+0xc4>)
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	60da      	str	r2, [r3, #12]
  }
}
 8003f6e:	bf00      	nop
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40023c00 	.word	0x40023c00
 8003f7c:	20000f1c 	.word	0x20000f1c

08003f80 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e010      	b.n	8003fbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d103      	bne.n	8003faa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e009      	b.n	8003fbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d103      	bne.n	8003fb8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e002      	b.n	8003fbe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003fb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fbe:	4b13      	ldr	r3, [pc, #76]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	490f      	ldr	r1, [pc, #60]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fdc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	4a07      	ldr	r2, [pc, #28]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <FLASH_Erase_Sector+0x8c>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffe:	6113      	str	r3, [r2, #16]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40023c00 	.word	0x40023c00

08004010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e159      	b.n	80042e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8148 	bne.w	80042da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d005      	beq.n	8004062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	2b02      	cmp	r3, #2
 8004060:	d130      	bne.n	80040c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d017      	beq.n	8004100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d123      	bne.n	8004154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80a2 	beq.w	80042da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b57      	ldr	r3, [pc, #348]	@ (80042f8 <HAL_GPIO_Init+0x2e8>)
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	4a56      	ldr	r2, [pc, #344]	@ (80042f8 <HAL_GPIO_Init+0x2e8>)
 80041a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a6:	4b54      	ldr	r3, [pc, #336]	@ (80042f8 <HAL_GPIO_Init+0x2e8>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b2:	4a52      	ldr	r2, [pc, #328]	@ (80042fc <HAL_GPIO_Init+0x2ec>)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	3302      	adds	r3, #2
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a49      	ldr	r2, [pc, #292]	@ (8004300 <HAL_GPIO_Init+0x2f0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <HAL_GPIO_Init+0x202>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a48      	ldr	r2, [pc, #288]	@ (8004304 <HAL_GPIO_Init+0x2f4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0x1fe>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a47      	ldr	r2, [pc, #284]	@ (8004308 <HAL_GPIO_Init+0x2f8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00d      	beq.n	800420a <HAL_GPIO_Init+0x1fa>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a46      	ldr	r2, [pc, #280]	@ (800430c <HAL_GPIO_Init+0x2fc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x1f6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a45      	ldr	r2, [pc, #276]	@ (8004310 <HAL_GPIO_Init+0x300>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_GPIO_Init+0x1f2>
 80041fe:	2304      	movs	r3, #4
 8004200:	e008      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004202:	2307      	movs	r3, #7
 8004204:	e006      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004206:	2303      	movs	r3, #3
 8004208:	e004      	b.n	8004214 <HAL_GPIO_Init+0x204>
 800420a:	2302      	movs	r3, #2
 800420c:	e002      	b.n	8004214 <HAL_GPIO_Init+0x204>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_GPIO_Init+0x204>
 8004212:	2300      	movs	r3, #0
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	f002 0203 	and.w	r2, r2, #3
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	4093      	lsls	r3, r2
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004224:	4935      	ldr	r1, [pc, #212]	@ (80042fc <HAL_GPIO_Init+0x2ec>)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	3302      	adds	r3, #2
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004232:	4b38      	ldr	r3, [pc, #224]	@ (8004314 <HAL_GPIO_Init+0x304>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004256:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <HAL_GPIO_Init+0x304>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800425c:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <HAL_GPIO_Init+0x304>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004280:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <HAL_GPIO_Init+0x304>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_GPIO_Init+0x304>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004314 <HAL_GPIO_Init+0x304>)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b0:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <HAL_GPIO_Init+0x304>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <HAL_GPIO_Init+0x304>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f67f aea2 	bls.w	800402c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3724      	adds	r7, #36	@ 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40013800 	.word	0x40013800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
 8004324:	4613      	mov	r3, r2
 8004326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004334:	e003      	b.n	800433e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	041a      	lsls	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	619a      	str	r2, [r3, #24]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e12b      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe fc4e 	bl	8002c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f001 f9b8 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a81      	ldr	r2, [pc, #516]	@ (80045c0 <HAL_I2C_Init+0x274>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a80      	ldr	r2, [pc, #512]	@ (80045c4 <HAL_I2C_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	@ (80045c8 <HAL_I2C_Init+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e7      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a78      	ldr	r2, [pc, #480]	@ (80045cc <HAL_I2C_Init+0x280>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a6a      	ldr	r2, [pc, #424]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a69      	ldr	r2, [pc, #420]	@ (80045d0 <HAL_I2C_Init+0x284>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	495c      	ldr	r1, [pc, #368]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d819      	bhi.n	8004488 <HAL_I2C_Init+0x13c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004468:	400b      	ands	r3, r1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_Init+0x138>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e59      	subs	r1, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	e051      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004484:	2304      	movs	r3, #4
 8004486:	e04f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_I2C_Init+0x168>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e012      	b.n	80044da <HAL_I2C_Init+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x196>
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <HAL_I2C_Init+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e58      	subs	r0, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6809      	ldr	r1, [r1, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004556:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6911      	ldr	r1, [r2, #16]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	000186a0 	.word	0x000186a0
 80045c4:	001e847f 	.word	0x001e847f
 80045c8:	003d08ff 	.word	0x003d08ff
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	460b      	mov	r3, r1
 80045e8:	813b      	strh	r3, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ee:	f7fe fdcd 	bl	800318c <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	f040 80d9 	bne.w	80047b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2319      	movs	r3, #25
 8004608:	2201      	movs	r2, #1
 800460a:	496d      	ldr	r1, [pc, #436]	@ (80047c0 <HAL_I2C_Mem_Write+0x1ec>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f971 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	e0cc      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_I2C_Mem_Write+0x56>
 8004626:	2302      	movs	r3, #2
 8004628:	e0c5      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d007      	beq.n	8004650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2221      	movs	r2, #33	@ 0x21
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a4d      	ldr	r2, [pc, #308]	@ (80047c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004692:	88f8      	ldrh	r0, [r7, #6]
 8004694:	893a      	ldrh	r2, [r7, #8]
 8004696:	8979      	ldrh	r1, [r7, #10]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4603      	mov	r3, r0
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f890 	bl	80047c8 <I2C_RequestMemoryWrite>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d052      	beq.n	8004754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e081      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa36 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d107      	bne.n	80046da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06b      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_I2C_Mem_Write+0x180>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1aa      	bne.n	80046b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fa29 	bl	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	2b04      	cmp	r3, #4
 8004772:	d107      	bne.n	8004784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e016      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	00100002 	.word	0x00100002
 80047c4:	ffff0000 	.word	0xffff0000

080047c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f878 	bl	80048f4 <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004818:	d103      	bne.n	8004822 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004820:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e05f      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	492d      	ldr	r1, [pc, #180]	@ (80048f0 <I2C_RequestMemoryWrite+0x128>)
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f8d3 	bl	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04c      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	6a39      	ldr	r1, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f95e 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e02b      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	e021      	b.n	80048e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b0:	6a39      	ldr	r1, [r7, #32]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f938 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d107      	bne.n	80048d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e005      	b.n	80048e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048da:	893b      	ldrh	r3, [r7, #8]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	00010002 	.word	0x00010002

080048f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004904:	e048      	b.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d044      	beq.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe fc3d 	bl	800318c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d139      	bne.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10d      	bne.n	800494a <I2C_WaitOnFlagUntilTimeout+0x56>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	e00c      	b.n	8004964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	43da      	mvns	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	429a      	cmp	r2, r3
 8004968:	d116      	bne.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e023      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d10d      	bne.n	80049be <I2C_WaitOnFlagUntilTimeout+0xca>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	43da      	mvns	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	e00c      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d093      	beq.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f6:	e071      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d123      	bne.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e067      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d041      	beq.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fe fb98 	bl	800318c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d136      	bne.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10c      	bne.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e00b      	b.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e021      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10c      	bne.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e00b      	b.n	8004b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f af6d 	bne.w	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	e034      	b.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f886 	bl	8004c48 <I2C_IsAcknowledgeFailed>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e034      	b.n	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d028      	beq.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fe fb1d 	bl	800318c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11d      	bne.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d016      	beq.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e007      	b.n	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d1c3      	bne.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bc4:	e034      	b.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f83e 	bl	8004c48 <I2C_IsAcknowledgeFailed>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e034      	b.n	8004c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d028      	beq.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fe fad5 	bl	800318c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11d      	bne.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d016      	beq.n	8004c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e007      	b.n	8004c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d1c3      	bne.n	8004bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5e:	d11b      	bne.n	8004c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	f043 0204 	orr.w	r2, r3, #4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e101      	b.n	8004ebc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd ffe6 	bl	8002ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2203      	movs	r2, #3
 8004cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ce6:	d102      	bne.n	8004cee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fd8e 	bl	8005814 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7c1a      	ldrb	r2, [r3, #16]
 8004d00:	f88d 2000 	strb.w	r2, [sp]
 8004d04:	3304      	adds	r3, #4
 8004d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d08:	f000 fd20 	bl	800574c <USB_CoreInit>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0ce      	b.n	8004ebc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fd86 	bl	8005836 <USB_SetCurrentMode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0bf      	b.n	8004ebc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e04a      	b.n	8004dd8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3315      	adds	r3, #21
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3314      	adds	r3, #20
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	b298      	uxth	r0, r3
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	332e      	adds	r3, #46	@ 0x2e
 8004d7e:	4602      	mov	r2, r0
 8004d80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3318      	adds	r3, #24
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	331c      	adds	r3, #28
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3320      	adds	r3, #32
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3324      	adds	r3, #36	@ 0x24
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	791b      	ldrb	r3, [r3, #4]
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3af      	bcc.n	8004d42 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e044      	b.n	8004e72 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	791b      	ldrb	r3, [r3, #4]
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3b5      	bcc.n	8004de8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7c1a      	ldrb	r2, [r3, #16]
 8004e84:	f88d 2000 	strb.w	r2, [sp]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e8c:	f000 fd20 	bl	80058d0 <USB_DevInit>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e00c      	b.n	8004ebc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fee8 	bl	8005c8a <USB_DevDisconnect>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e267      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d075      	beq.n	8004fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ee2:	4b88      	ldr	r3, [pc, #544]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d00c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eee:	4b85      	ldr	r3, [pc, #532]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d112      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efa:	4b82      	ldr	r3, [pc, #520]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f08:	4b7e      	ldr	r3, [pc, #504]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d05b      	beq.n	8004fcc <HAL_RCC_OscConfig+0x108>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d157      	bne.n	8004fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e242      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f28:	d106      	bne.n	8004f38 <HAL_RCC_OscConfig+0x74>
 8004f2a:	4b76      	ldr	r3, [pc, #472]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a75      	ldr	r2, [pc, #468]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e01d      	b.n	8004f74 <HAL_RCC_OscConfig+0xb0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x98>
 8004f42:	4b70      	ldr	r3, [pc, #448]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6f      	ldr	r2, [pc, #444]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6c      	ldr	r2, [pc, #432]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0xb0>
 8004f5c:	4b69      	ldr	r3, [pc, #420]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a68      	ldr	r2, [pc, #416]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a65      	ldr	r2, [pc, #404]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fe f906 	bl	800318c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f84:	f7fe f902 	bl	800318c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e207      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b5b      	ldr	r3, [pc, #364]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0xc0>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fe f8f2 	bl	800318c <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fe f8ee 	bl	800318c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	@ 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1f3      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	4b51      	ldr	r3, [pc, #324]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0xe8>
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d063      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d11c      	bne.n	800502c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	4b44      	ldr	r3, [pc, #272]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	4b41      	ldr	r3, [pc, #260]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_RCC_OscConfig+0x152>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1c7      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b3b      	ldr	r3, [pc, #236]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4937      	ldr	r1, [pc, #220]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502a:	e03a      	b.n	80050a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005034:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_OscConfig+0x244>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fe f8a7 	bl	800318c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005042:	f7fe f8a3 	bl	800318c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1a8      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4925      	ldr	r1, [pc, #148]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
 8005074:	e015      	b.n	80050a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_RCC_OscConfig+0x244>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fe f886 	bl	800318c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005084:	f7fe f882 	bl	800318c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e187      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d036      	beq.n	800511c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <HAL_RCC_OscConfig+0x248>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fe f866 	bl	800318c <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c4:	f7fe f862 	bl	800318c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e167      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x200>
 80050e2:	e01b      	b.n	800511c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_RCC_OscConfig+0x248>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ea:	f7fe f84f 	bl	800318c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	e00e      	b.n	8005110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f2:	f7fe f84b 	bl	800318c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d907      	bls.n	8005110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e150      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
 8005104:	40023800 	.word	0x40023800
 8005108:	42470000 	.word	0x42470000
 800510c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005110:	4b88      	ldr	r3, [pc, #544]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ea      	bne.n	80050f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8097 	beq.w	8005258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512e:	4b81      	ldr	r3, [pc, #516]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	4b7d      	ldr	r3, [pc, #500]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	4a7c      	ldr	r2, [pc, #496]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	@ 0x40
 800514a:	4b7a      	ldr	r3, [pc, #488]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515a:	4b77      	ldr	r3, [pc, #476]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d118      	bne.n	8005198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005166:	4b74      	ldr	r3, [pc, #464]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a73      	ldr	r2, [pc, #460]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005172:	f7fe f80b 	bl	800318c <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fe f807 	bl	800318c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e10c      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	4b6a      	ldr	r3, [pc, #424]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x2ea>
 80051a0:	4b64      	ldr	r3, [pc, #400]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a63      	ldr	r2, [pc, #396]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ac:	e01c      	b.n	80051e8 <HAL_RCC_OscConfig+0x324>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x30c>
 80051b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0x324>
 80051d0:	4b58      	ldr	r3, [pc, #352]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d4:	4a57      	ldr	r2, [pc, #348]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	6713      	str	r3, [r2, #112]	@ 0x70
 80051dc:	4b55      	ldr	r3, [pc, #340]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	4a54      	ldr	r2, [pc, #336]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051e2:	f023 0304 	bic.w	r3, r3, #4
 80051e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fd ffcc 	bl	800318c <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd ffc8 	bl	800318c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0cb      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	4b49      	ldr	r3, [pc, #292]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ee      	beq.n	80051f8 <HAL_RCC_OscConfig+0x334>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521c:	f7fd ffb6 	bl	800318c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fd ffb2 	bl	800318c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0b5      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ee      	bne.n	8005224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b39      	ldr	r3, [pc, #228]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	4a38      	ldr	r2, [pc, #224]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a1 	beq.w	80053a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005262:	4b34      	ldr	r3, [pc, #208]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b08      	cmp	r3, #8
 800526c:	d05c      	beq.n	8005328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d141      	bne.n	80052fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd ff86 	bl	800318c <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd ff82 	bl	800318c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e087      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	3b01      	subs	r3, #1
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	491b      	ldr	r1, [pc, #108]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd ff5b 	bl	800318c <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052da:	f7fd ff57 	bl	800318c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e05c      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x416>
 80052f8:	e054      	b.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005300:	f7fd ff44 	bl	800318c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005308:	f7fd ff40 	bl	800318c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e045      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x444>
 8005326:	e03d      	b.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e038      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000
 800533c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x4ec>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d028      	beq.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d121      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d11a      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005378:	4293      	cmp	r3, r2
 800537a:	d111      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	3b01      	subs	r3, #1
 800538a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0cc      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b68      	ldr	r3, [pc, #416]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d90c      	bls.n	80053f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b65      	ldr	r3, [pc, #404]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b63      	ldr	r3, [pc, #396]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0b8      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005408:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a58      	ldr	r2, [pc, #352]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005420:	4b53      	ldr	r3, [pc, #332]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4a52      	ldr	r2, [pc, #328]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800542a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b50      	ldr	r3, [pc, #320]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	494d      	ldr	r1, [pc, #308]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d044      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b47      	ldr	r3, [pc, #284]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d119      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e07f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d003      	beq.n	8005472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800546e:	2b03      	cmp	r3, #3
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005472:	4b3f      	ldr	r3, [pc, #252]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e06f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005482:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e067      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4934      	ldr	r1, [pc, #208]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a4:	f7fd fe72 	bl	800318c <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fd fe6e 	bl	800318c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e04f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054d4:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d20c      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b22      	ldr	r3, [pc, #136]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b20      	ldr	r3, [pc, #128]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e032      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005508:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4916      	ldr	r1, [pc, #88]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005526:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	490e      	ldr	r1, [pc, #56]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800553a:	f000 f821 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 800553e:	4602      	mov	r2, r0
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	490a      	ldr	r1, [pc, #40]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd fdd2 	bl	8003104 <HAL_InitTick>

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40023c00 	.word	0x40023c00
 8005570:	40023800 	.word	0x40023800
 8005574:	0800dbb4 	.word	0x0800dbb4
 8005578:	20000108 	.word	0x20000108
 800557c:	20000124 	.word	0x20000124

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005584:	b090      	sub	sp, #64	@ 0x40
 8005586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005590:	2300      	movs	r3, #0
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d00d      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x40>
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	f200 80a1 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x16c>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x34>
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0x3a>
 80055b2:	e09b      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055b4:	4b53      	ldr	r3, [pc, #332]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x184>)
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80055b8:	e09b      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ba:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055be:	e098      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d028      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	2200      	movs	r2, #0
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055e8:	2100      	movs	r1, #0
 80055ea:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ec:	fb03 f201 	mul.w	r2, r3, r1
 80055f0:	2300      	movs	r3, #0
 80055f2:	fb00 f303 	mul.w	r3, r0, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	4a43      	ldr	r2, [pc, #268]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055fa:	fba0 1202 	umull	r1, r2, r0, r2
 80055fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005600:	460a      	mov	r2, r1
 8005602:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005606:	4413      	add	r3, r2
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560c:	2200      	movs	r2, #0
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800561a:	f7fa fe49 	bl	80002b0 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4613      	mov	r3, r2
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005626:	e053      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005628:	4b35      	ldr	r3, [pc, #212]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	2200      	movs	r2, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	617a      	str	r2, [r7, #20]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800563a:	f04f 0b00 	mov.w	fp, #0
 800563e:	4652      	mov	r2, sl
 8005640:	465b      	mov	r3, fp
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	0159      	lsls	r1, r3, #5
 800564c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	ebb2 080a 	subs.w	r8, r2, sl
 800565a:	eb63 090b 	sbc.w	r9, r3, fp
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800566a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800566e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005672:	ebb2 0408 	subs.w	r4, r2, r8
 8005676:	eb63 0509 	sbc.w	r5, r3, r9
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	00eb      	lsls	r3, r5, #3
 8005684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005688:	00e2      	lsls	r2, r4, #3
 800568a:	4614      	mov	r4, r2
 800568c:	461d      	mov	r5, r3
 800568e:	eb14 030a 	adds.w	r3, r4, sl
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	eb45 030b 	adc.w	r3, r5, fp
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056a6:	4629      	mov	r1, r5
 80056a8:	028b      	lsls	r3, r1, #10
 80056aa:	4621      	mov	r1, r4
 80056ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b0:	4621      	mov	r1, r4
 80056b2:	028a      	lsls	r2, r1, #10
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	2200      	movs	r2, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	60fa      	str	r2, [r7, #12]
 80056c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c4:	f7fa fdf4 	bl	80002b0 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	3301      	adds	r3, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80056e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3740      	adds	r7, #64	@ 0x40
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	00f42400 	.word	0x00f42400
 8005708:	018cba80 	.word	0x018cba80

0800570c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000108 	.word	0x20000108

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a9b      	lsrs	r3, r3, #10
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	@ (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40023800 	.word	0x40023800
 8005748:	0800dbc4 	.word	0x0800dbc4

0800574c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800574c:	b084      	sub	sp, #16
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	f107 001c 	add.w	r0, r7, #28
 800575a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005762:	2b01      	cmp	r3, #1
 8005764:	d123      	bne.n	80057ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800578e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005792:	2b01      	cmp	r3, #1
 8005794:	d105      	bne.n	80057a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 faa0 	bl	8005ce8 <USB_CoreReset>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
 80057ac:	e01b      	b.n	80057e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa94 	bl	8005ce8 <USB_CoreReset>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80057d8:	e005      	b.n	80057e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057e6:	7fbb      	ldrb	r3, [r7, #30]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10b      	bne.n	8005804 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f043 0206 	orr.w	r2, r3, #6
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005810:	b004      	add	sp, #16
 8005812:	4770      	bx	lr

08005814 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 0201 	bic.w	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d115      	bne.n	8005884 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005864:	200a      	movs	r0, #10
 8005866:	f7fd fc9d 	bl	80031a4 <HAL_Delay>
      ms += 10U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	330a      	adds	r3, #10
 800586e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa2b 	bl	8005ccc <USB_GetMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b01      	cmp	r3, #1
 800587a:	d01e      	beq.n	80058ba <USB_SetCurrentMode+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005880:	d9f0      	bls.n	8005864 <USB_SetCurrentMode+0x2e>
 8005882:	e01a      	b.n	80058ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d115      	bne.n	80058b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005896:	200a      	movs	r0, #10
 8005898:	f7fd fc84 	bl	80031a4 <HAL_Delay>
      ms += 10U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	330a      	adds	r3, #10
 80058a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa12 	bl	8005ccc <USB_GetMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <USB_SetCurrentMode+0x84>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80058b2:	d9f0      	bls.n	8005896 <USB_SetCurrentMode+0x60>
 80058b4:	e001      	b.n	80058ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e005      	b.n	80058c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80058be:	d101      	bne.n	80058c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	e009      	b.n	8005904 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3340      	adds	r3, #64	@ 0x40
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b0e      	cmp	r3, #14
 8005908:	d9f2      	bls.n	80058f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800590a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11c      	bne.n	800594c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005936:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	639a      	str	r2, [r3, #56]	@ 0x38
 800594a:	e00b      	b.n	8005964 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800596a:	461a      	mov	r2, r3
 800596c:	2300      	movs	r3, #0
 800596e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005970:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10d      	bne.n	8005994 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005980:	2100      	movs	r1, #0
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f968 	bl	8005c58 <USB_SetDevSpeed>
 8005988:	e008      	b.n	800599c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800598a:	2101      	movs	r1, #1
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f963 	bl	8005c58 <USB_SetDevSpeed>
 8005992:	e003      	b.n	800599c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005994:	2103      	movs	r1, #3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f95e 	bl	8005c58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800599c:	2110      	movs	r1, #16
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8fa 	bl	8005b98 <USB_FlushTxFifo>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f924 	bl	8005bfc <USB_FlushRxFifo>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c4:	461a      	mov	r2, r3
 80059c6:	2300      	movs	r3, #0
 80059c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d0:	461a      	mov	r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e043      	b.n	8005a70 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059fe:	d118      	bne.n	8005a32 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e013      	b.n	8005a44 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	e008      	b.n	8005a44 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a62:	461a      	mov	r2, r3
 8005a64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a74:	461a      	mov	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d3b5      	bcc.n	80059e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e043      	b.n	8005b0a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a98:	d118      	bne.n	8005acc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e013      	b.n	8005ade <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e008      	b.n	8005ade <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aea:	461a      	mov	r2, r3
 8005aec:	2300      	movs	r3, #0
 8005aee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3301      	adds	r3, #1
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b0e:	461a      	mov	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d3b5      	bcc.n	8005a82 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f043 0210 	orr.w	r2, r3, #16
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <USB_DevInit+0x2c4>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f043 0208 	orr.w	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b7c:	f043 0304 	orr.w	r3, r3, #4
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b90:	b004      	add	sp, #16
 8005b92:	4770      	bx	lr
 8005b94:	803c3800 	.word	0x803c3800

08005b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bb2:	d901      	bls.n	8005bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e01b      	b.n	8005bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	daf2      	bge.n	8005ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	019b      	lsls	r3, r3, #6
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bdc:	d901      	bls.n	8005be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e006      	b.n	8005bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d0f0      	beq.n	8005bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c14:	d901      	bls.n	8005c1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e018      	b.n	8005c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	daf2      	bge.n	8005c08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c38:	d901      	bls.n	8005c3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e006      	b.n	8005c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d0f0      	beq.n	8005c2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ca4:	f023 0303 	bic.w	r3, r3, #3
 8005ca8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d00:	d901      	bls.n	8005d06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e01b      	b.n	8005d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	daf2      	bge.n	8005cf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2a:	d901      	bls.n	8005d30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d0f0      	beq.n	8005d1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	22e8      	movs	r2, #232	@ 0xe8
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	4a30      	ldr	r2, [pc, #192]	@ (8005e24 <_prep_out_transaction+0xd8>)
 8005d64:	4413      	add	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	01db      	lsls	r3, r3, #7
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e28 <_prep_out_transaction+0xdc>)
 8005d6e:	4413      	add	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005d72:	f002 f851 	bl	8007e18 <tud_mounted>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d009      	beq.n	8005d90 <_prep_out_transaction+0x44>
 8005d7c:	f002 f85e 	bl	8007e3c <tud_suspended>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f083 0301 	eor.w	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <_prep_out_transaction+0x44>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <_prep_out_transaction+0x46>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <_prep_out_transaction+0x5e>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <_prep_out_transaction+0x62>
 8005daa:	2300      	movs	r3, #0
 8005dac:	e035      	b.n	8005e1a <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3310      	adds	r3, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 feab 	bl	8007b0e <tu_fifo_remaining>
 8005db8:	4603      	mov	r3, r0
 8005dba:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8005dbc:	897b      	ldrh	r3, [r7, #10]
 8005dbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8005dc0:	d801      	bhi.n	8005dc6 <_prep_out_transaction+0x7a>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e029      	b.n	8005e1a <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	78da      	ldrb	r2, [r3, #3]
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f003 fb44 	bl	800945c <usbd_edpt_claim>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <_prep_out_transaction+0x98>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e01a      	b.n	8005e1a <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3310      	adds	r3, #16
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fe90 	bl	8007b0e <tu_fifo_remaining>
 8005dee:	4603      	mov	r3, r0
 8005df0:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005df6:	d908      	bls.n	8005e0a <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	78d9      	ldrb	r1, [r3, #3]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	7df8      	ldrb	r0, [r7, #23]
 8005e00:	2340      	movs	r3, #64	@ 0x40
 8005e02:	f003 fb7b 	bl	80094fc <usbd_edpt_xfer>
 8005e06:	4603      	mov	r3, r0
 8005e08:	e007      	b.n	8005e1a <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	78da      	ldrb	r2, [r3, #3]
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f003 fb4a 	bl	80094ac <usbd_edpt_release>
    return false;
 8005e18:	2300      	movs	r3, #0
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000f3c 	.word	0x20000f3c
 8005e28:	20001024 	.word	0x20001024

08005e2c <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	71fb      	strb	r3, [r7, #7]
 8005e36:	f001 ffef 	bl	8007e18 <tud_mounted>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <tud_cdc_n_connected+0x28>
 8005e40:	f001 fffc 	bl	8007e3c <tud_suspended>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f083 0301 	eor.w	r3, r3, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <tud_cdc_n_connected+0x28>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <tud_cdc_n_connected+0x2a>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d019      	beq.n	8005e94 <tud_cdc_n_connected+0x68>
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	4a10      	ldr	r2, [pc, #64]	@ (8005ea4 <tud_cdc_n_connected+0x78>)
 8005e64:	21e8      	movs	r1, #232	@ 0xe8
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	2300      	movs	r3, #0
 8005e74:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf14      	ite	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	2300      	moveq	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <tud_cdc_n_connected+0x68>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <tud_cdc_n_connected+0x6a>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000f3c 	.word	0x20000f3c

08005ea8 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	22e8      	movs	r2, #232	@ 0xe8
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	3310      	adds	r3, #16
 8005ebc:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <tud_cdc_n_available+0x28>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fdaf 	bl	8007a24 <tu_fifo_count>
 8005ec6:	4603      	mov	r3, r0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000f3c 	.word	0x20000f3c

08005ed4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	22e8      	movs	r2, #232	@ 0xe8
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	4a0f      	ldr	r2, [pc, #60]	@ (8005f28 <tud_cdc_n_read+0x54>)
 8005eec:	4413      	add	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f103 0010 	add.w	r0, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d802      	bhi.n	8005f06 <tud_cdc_n_read+0x32>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	e001      	b.n	8005f0a <tud_cdc_n_read+0x36>
 8005f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	f001 fe5a 	bl	8007bc6 <tu_fifo_read_n>
 8005f12:	4603      	mov	r3, r0
 8005f14:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff ff17 	bl	8005d4c <_prep_out_transaction>
  return num_read;
 8005f1e:	693b      	ldr	r3, [r7, #16]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000f3c 	.word	0x20000f3c

08005f2c <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	22e8      	movs	r2, #232	@ 0xe8
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	4a13      	ldr	r2, [pc, #76]	@ (8005f90 <tud_cdc_n_write+0x64>)
 8005f44:	4413      	add	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f103 001c 	add.w	r0, r3, #28
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d802      	bhi.n	8005f5e <tud_cdc_n_write+0x32>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	e001      	b.n	8005f62 <tud_cdc_n_write+0x36>
 8005f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f62:	461a      	mov	r2, r3
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	f001 fe95 	bl	8007c94 <tu_fifo_write_n>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	331c      	adds	r3, #28
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fd56 	bl	8007a24 <tu_fifo_count>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f7c:	d903      	bls.n	8005f86 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f807 	bl	8005f94 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8005f86:	8a7b      	ldrh	r3, [r7, #18]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000f3c 	.word	0x20000f3c

08005f94 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	22e8      	movs	r2, #232	@ 0xe8
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	4a39      	ldr	r2, [pc, #228]	@ (800608c <tud_cdc_n_write_flush+0xf8>)
 8005fa8:	4413      	add	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4a37      	ldr	r2, [pc, #220]	@ (8006090 <tud_cdc_n_write_flush+0xfc>)
 8005fb2:	4413      	add	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	f001 ff2f 	bl	8007e18 <tud_mounted>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <tud_cdc_n_write_flush+0x40>
 8005fc0:	f001 ff3c 	bl	8007e3c <tud_suspended>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <tud_cdc_n_write_flush+0x40>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <tud_cdc_n_write_flush+0x42>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8005fdc:	f083 0301 	eor.w	r3, r3, #1
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <tud_cdc_n_write_flush+0x56>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e04c      	b.n	8006084 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	331c      	adds	r3, #28
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fd18 	bl	8007a24 <tu_fifo_count>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <tud_cdc_n_write_flush+0x6a>
    return 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e042      	b.n	8006084 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	789a      	ldrb	r2, [r3, #2]
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	4611      	mov	r1, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f003 fa26 	bl	800945c <usbd_edpt_claim>
 8006010:	4603      	mov	r3, r0
 8006012:	f083 0301 	eor.w	r3, r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <tud_cdc_n_write_flush+0x8c>
 800601c:	2300      	movs	r3, #0
 800601e:	e031      	b.n	8006084 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f103 001c 	add.w	r0, r3, #28
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3340      	adds	r3, #64	@ 0x40
 800602a:	2240      	movs	r2, #64	@ 0x40
 800602c:	4619      	mov	r1, r3
 800602e:	f001 fdca 	bl	8007bc6 <tu_fifo_read_n>
 8006032:	4603      	mov	r3, r0
 8006034:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006036:	89bb      	ldrh	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	7899      	ldrb	r1, [r3, #2]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	7bf8      	ldrb	r0, [r7, #15]
 800604a:	f003 fa57 	bl	80094fc <usbd_edpt_xfer>
 800604e:	4603      	mov	r3, r0
 8006050:	f083 0301 	eor.w	r3, r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <tud_cdc_n_write_flush+0xdc>
 800605a:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <tud_cdc_n_write_flush+0x100>)
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d000      	beq.n	800606c <tud_cdc_n_write_flush+0xd8>
 800606a:	be00      	bkpt	0x0000
 800606c:	2300      	movs	r3, #0
 800606e:	e009      	b.n	8006084 <tud_cdc_n_write_flush+0xf0>
    return count;
 8006070:	89bb      	ldrh	r3, [r7, #12]
 8006072:	e007      	b.n	8006084 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	789a      	ldrb	r2, [r3, #2]
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f003 fa15 	bl	80094ac <usbd_edpt_release>
    return 0;
 8006082:	2300      	movs	r3, #0
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000f3c 	.word	0x20000f3c
 8006090:	20001024 	.word	0x20001024
 8006094:	e000edf0 	.word	0xe000edf0

08006098 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	22e8      	movs	r2, #232	@ 0xe8
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	3318      	adds	r3, #24
 80060ac:	4a05      	ldr	r2, [pc, #20]	@ (80060c4 <tud_cdc_n_write_available+0x2c>)
 80060ae:	4413      	add	r3, r2
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fd2b 	bl	8007b0e <tu_fifo_remaining>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000f3c 	.word	0x20000f3c

080060c8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80060ce:	22e8      	movs	r2, #232	@ 0xe8
 80060d0:	2100      	movs	r1, #0
 80060d2:	4824      	ldr	r0, [pc, #144]	@ (8006164 <cdcd_init+0x9c>)
 80060d4:	f005 fff1 	bl	800c0ba <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80060d8:	2300      	movs	r3, #0
 80060da:	71fb      	strb	r3, [r7, #7]
 80060dc:	e03a      	b.n	8006154 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	22e8      	movs	r2, #232	@ 0xe8
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006164 <cdcd_init+0x9c>)
 80060e8:	4413      	add	r3, r2
 80060ea:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	22ff      	movs	r2, #255	@ 0xff
 80060f0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060f8:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f103 0010 	add.w	r0, r3, #16
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006118:	2300      	movs	r3, #0
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2301      	movs	r3, #1
 800611e:	2240      	movs	r2, #64	@ 0x40
 8006120:	f000 ffee 	bl	8007100 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f103 001c 	add.w	r0, r3, #28
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006130:	4b0d      	ldr	r3, [pc, #52]	@ (8006168 <cdcd_init+0xa0>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2301      	movs	r3, #1
 8006148:	2280      	movs	r2, #128	@ 0x80
 800614a:	f000 ffd9 	bl	8007100 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	3301      	adds	r3, #1
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0c1      	beq.n	80060de <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000f3c 	.word	0x20000f3c
 8006168:	2000012c 	.word	0x2000012c

0800616c <cdcd_deinit>:

bool cdcd_deinit(void) {
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006170:	2301      	movs	r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	e037      	b.n	80061fc <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	22e8      	movs	r2, #232	@ 0xe8
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <cdcd_reset+0x90>)
 8006196:	4413      	add	r3, r2
 8006198:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800619a:	2205      	movs	r2, #5
 800619c:	2100      	movs	r1, #0
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f005 ff8b 	bl	800c0ba <memset>
    if (!_cdcd_cfg.rx_persistent) {
 80061a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <cdcd_reset+0x94>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3310      	adds	r3, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 fd90 	bl	8007cdc <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80061bc:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <cdcd_reset+0x94>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	331c      	adds	r3, #28
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fd84 	bl	8007cdc <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f103 021c 	add.w	r2, r3, #28
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <cdcd_reset+0x94>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f001 fd84 	bl	8007cfe <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	3301      	adds	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0c4      	beq.n	800618c <cdcd_reset+0x10>
  }
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000f3c 	.word	0x20000f3c
 8006210:	2000012c 	.word	0x2000012c

08006214 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b09a      	sub	sp, #104	@ 0x68
 8006218:	af02      	add	r7, sp, #8
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
 8006220:	4613      	mov	r3, r2
 8006222:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	795b      	ldrb	r3, [r3, #5]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d103      	bne.n	8006234 <cdcd_open+0x20>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	799b      	ldrb	r3, [r3, #6]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d001      	beq.n	8006238 <cdcd_open+0x24>
 8006234:	2300      	movs	r3, #0
 8006236:	e0da      	b.n	80063ee <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006238:	2300      	movs	r3, #0
 800623a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800623e:	e010      	b.n	8006262 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006240:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006244:	22e8      	movs	r2, #232	@ 0xe8
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a6b      	ldr	r2, [pc, #428]	@ (80063f8 <cdcd_open+0x1e4>)
 800624c:	4413      	add	r3, r2
 800624e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006252:	789b      	ldrb	r3, [r3, #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006258:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800625c:	3301      	adds	r3, #1
 800625e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006262:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ea      	beq.n	8006240 <cdcd_open+0x2c>
 800626a:	e000      	b.n	800626e <cdcd_open+0x5a>
      break;
 800626c:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 800626e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <cdcd_open+0x78>
 8006276:	4b61      	ldr	r3, [pc, #388]	@ (80063fc <cdcd_open+0x1e8>)
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d000      	beq.n	8006288 <cdcd_open+0x74>
 8006286:	be00      	bkpt	0x0000
 8006288:	2300      	movs	r3, #0
 800628a:	e0b0      	b.n	80063ee <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	789a      	ldrb	r2, [r3, #2]
 8006290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006292:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006294:	2309      	movs	r3, #9
 8006296:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800629e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80062a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062aa:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80062ac:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80062ae:	e013      	b.n	80062d8 <cdcd_open+0xc4>
 80062b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b2:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80062be:	4413      	add	r3, r2
 80062c0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80062c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80062d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	3301      	adds	r3, #1
 80062e0:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80062e2:	2b24      	cmp	r3, #36	@ 0x24
 80062e4:	d104      	bne.n	80062f0 <cdcd_open+0xdc>
 80062e6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80062ea:	88bb      	ldrh	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d9df      	bls.n	80062b0 <cdcd_open+0x9c>
 80062f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	3301      	adds	r3, #1
 80062f8:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d12f      	bne.n	800635e <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006306:	4618      	mov	r0, r3
 8006308:	f003 f862 	bl	80093d0 <usbd_edpt_open>
 800630c:	4603      	mov	r3, r0
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <cdcd_open+0x11a>
 8006318:	4b38      	ldr	r3, [pc, #224]	@ (80063fc <cdcd_open+0x1e8>)
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d000      	beq.n	800632a <cdcd_open+0x116>
 8006328:	be00      	bkpt	0x0000
 800632a:	2300      	movs	r3, #0
 800632c:	e05f      	b.n	80063ee <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800632e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006330:	789a      	ldrb	r2, [r3, #2]
 8006332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006334:	705a      	strb	r2, [r3, #1]
 8006336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006338:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800633e:	461a      	mov	r2, r3
 8006340:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006344:	4413      	add	r3, r2
 8006346:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800635c:	657b      	str	r3, [r7, #84]	@ 0x54
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3301      	adds	r3, #1
 8006366:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006368:	2b04      	cmp	r3, #4
 800636a:	d139      	bne.n	80063e0 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 800636c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800636e:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006370:	2b0a      	cmp	r3, #10
 8006372:	d135      	bne.n	80063e0 <cdcd_open+0x1cc>
 8006374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006376:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800637c:	461a      	mov	r2, r3
 800637e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006382:	4413      	add	r3, r2
 8006384:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800638a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800639a:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 800639c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800639e:	3303      	adds	r3, #3
 80063a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063a2:	3202      	adds	r2, #2
 80063a4:	79f8      	ldrb	r0, [r7, #7]
 80063a6:	9201      	str	r2, [sp, #4]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2302      	movs	r3, #2
 80063ac:	2202      	movs	r2, #2
 80063ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063b0:	f002 ffa6 	bl	8009300 <usbd_open_edpt_pair>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f083 0301 	eor.w	r3, r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <cdcd_open+0x1c2>
 80063c0:	4b0e      	ldr	r3, [pc, #56]	@ (80063fc <cdcd_open+0x1e8>)
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d000      	beq.n	80063d2 <cdcd_open+0x1be>
 80063d0:	be00      	bkpt	0x0000
 80063d2:	2300      	movs	r3, #0
 80063d4:	e00b      	b.n	80063ee <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80063d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80063da:	330e      	adds	r3, #14
 80063dc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80063e0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fcb1 	bl	8005d4c <_prep_out_transaction>

  return drv_len;
 80063ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3760      	adds	r7, #96	@ 0x60
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000f3c 	.word	0x20000f3c
 80063fc:	e000edf0 	.word	0xe000edf0

08006400 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	603a      	str	r2, [r7, #0]
 800640a:	71fb      	strb	r3, [r7, #7]
 800640c:	460b      	mov	r3, r1
 800640e:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b20      	cmp	r3, #32
 800641c:	d001      	beq.n	8006422 <cdcd_control_xfer_cb+0x22>
 800641e:	2300      	movs	r3, #0
 8006420:	e0e6      	b.n	80065f0 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006422:	2300      	movs	r3, #0
 8006424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006428:	e014      	b.n	8006454 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 800642a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800642e:	22e8      	movs	r2, #232	@ 0xe8
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	4a70      	ldr	r2, [pc, #448]	@ (80065f8 <cdcd_control_xfer_cb+0x1f8>)
 8006436:	4413      	add	r3, r2
 8006438:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	889b      	ldrh	r3, [r3, #4]
 8006444:	b29b      	uxth	r3, r3
 8006446:	429a      	cmp	r2, r3
 8006448:	d009      	beq.n	800645e <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800644a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800644e:	3301      	adds	r3, #1
 8006450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0e6      	beq.n	800642a <cdcd_control_xfer_cb+0x2a>
 800645c:	e000      	b.n	8006460 <cdcd_control_xfer_cb+0x60>
      break;
 800645e:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <cdcd_control_xfer_cb+0x6c>
 8006468:	2300      	movs	r3, #0
 800646a:	e0c1      	b.n	80065f0 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	3b20      	subs	r3, #32
 8006472:	2b03      	cmp	r3, #3
 8006474:	f200 80b2 	bhi.w	80065dc <cdcd_control_xfer_cb+0x1dc>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <cdcd_control_xfer_cb+0x80>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	08006491 	.word	0x08006491
 8006484:	080064cd 	.word	0x080064cd
 8006488:	080064e7 	.word	0x080064e7
 800648c:	080065ab 	.word	0x080065ab
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006490:	79bb      	ldrb	r3, [r7, #6]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d108      	bne.n	80064a8 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	f103 0208 	add.w	r2, r3, #8
 800649c:	79f8      	ldrb	r0, [r7, #7]
 800649e:	2307      	movs	r3, #7
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	f003 fa13 	bl	80098cc <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80064a6:	e09b      	b.n	80065e0 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 80064a8:	79bb      	ldrb	r3, [r7, #6]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f040 8098 	bne.w	80065e0 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 80064b0:	4b52      	ldr	r3, [pc, #328]	@ (80065fc <cdcd_control_xfer_cb+0x1fc>)
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8094 	beq.w	80065e0 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	f103 0208 	add.w	r2, r3, #8
 80064be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c2:	4611      	mov	r1, r2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f3af 8000 	nop.w
      break;
 80064ca:	e089      	b.n	80065e0 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80064cc:	79bb      	ldrb	r3, [r7, #6]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	f040 8088 	bne.w	80065e4 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f103 0208 	add.w	r2, r3, #8
 80064da:	79f8      	ldrb	r0, [r7, #7]
 80064dc:	2307      	movs	r3, #7
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	f003 f9f4 	bl	80098cc <tud_control_xfer>
      }
      break;
 80064e4:	e07e      	b.n	80065e4 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80064e6:	79bb      	ldrb	r3, [r7, #6]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d105      	bne.n	80064f8 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f003 f979 	bl	80097e8 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80064f6:	e077      	b.n	80065e8 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 80064f8:	79bb      	ldrb	r3, [r7, #6]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d174      	bne.n	80065e8 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	b29b      	uxth	r3, r3
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	b29b      	uxth	r3, r3
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	fa22 f303 	lsr.w	r3, r2, r3
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	b29b      	uxth	r3, r3
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8006552:	4b2b      	ldr	r3, [pc, #172]	@ (8006600 <cdcd_control_xfer_cb+0x200>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f103 021c 	add.w	r2, r3, #28
 8006566:	7ffb      	ldrb	r3, [r7, #31]
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f083 0301 	eor.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f001 fbbc 	bl	8007cfe <tu_fifo_set_overwritable>
 8006586:	e005      	b.n	8006594 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	331c      	adds	r3, #28
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fbb5 	bl	8007cfe <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8006594:	4b1b      	ldr	r3, [pc, #108]	@ (8006604 <cdcd_control_xfer_cb+0x204>)
 8006596:	2b00      	cmp	r3, #0
 8006598:	d026      	beq.n	80065e8 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 800659a:	7fba      	ldrb	r2, [r7, #30]
 800659c:	7ff9      	ldrb	r1, [r7, #31]
 800659e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fa ffce 	bl	8001544 <tud_cdc_line_state_cb>
      break;
 80065a8:	e01e      	b.n	80065e8 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80065aa:	79bb      	ldrb	r3, [r7, #6]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d105      	bne.n	80065bc <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f003 f917 	bl	80097e8 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80065ba:	e017      	b.n	80065ec <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80065bc:	79bb      	ldrb	r3, [r7, #6]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d114      	bne.n	80065ec <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80065c2:	4b11      	ldr	r3, [pc, #68]	@ (8006608 <cdcd_control_xfer_cb+0x208>)
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d011      	beq.n	80065ec <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f3af 8000 	nop.w
      break;
 80065da:	e007      	b.n	80065ec <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80065dc:	2300      	movs	r3, #0
 80065de:	e007      	b.n	80065f0 <cdcd_control_xfer_cb+0x1f0>
      break;
 80065e0:	bf00      	nop
 80065e2:	e004      	b.n	80065ee <cdcd_control_xfer_cb+0x1ee>
      break;
 80065e4:	bf00      	nop
 80065e6:	e002      	b.n	80065ee <cdcd_control_xfer_cb+0x1ee>
      break;
 80065e8:	bf00      	nop
 80065ea:	e000      	b.n	80065ee <cdcd_control_xfer_cb+0x1ee>
      break;
 80065ec:	bf00      	nop
  }

  return true;
 80065ee:	2301      	movs	r3, #1
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	@ 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000f3c 	.word	0x20000f3c
 80065fc:	00000000 	.word	0x00000000
 8006600:	2000012c 	.word	0x2000012c
 8006604:	08001545 	.word	0x08001545
 8006608:	00000000 	.word	0x00000000

0800660c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4603      	mov	r3, r0
 8006616:	71fb      	strb	r3, [r7, #7]
 8006618:	460b      	mov	r3, r1
 800661a:	71bb      	strb	r3, [r7, #6]
 800661c:	4613      	mov	r3, r2
 800661e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e013      	b.n	800664e <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8006626:	7ffb      	ldrb	r3, [r7, #31]
 8006628:	22e8      	movs	r2, #232	@ 0xe8
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	4a5f      	ldr	r2, [pc, #380]	@ (80067ac <cdcd_xfer_cb+0x1a0>)
 8006630:	4413      	add	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	79ba      	ldrb	r2, [r7, #6]
 800663a:	429a      	cmp	r2, r3
 800663c:	d00a      	beq.n	8006654 <cdcd_xfer_cb+0x48>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	789b      	ldrb	r3, [r3, #2]
 8006642:	79ba      	ldrb	r2, [r7, #6]
 8006644:	429a      	cmp	r2, r3
 8006646:	d005      	beq.n	8006654 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006648:	7ffb      	ldrb	r3, [r7, #31]
 800664a:	3301      	adds	r3, #1
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	7ffb      	ldrb	r3, [r7, #31]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0e8      	beq.n	8006626 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <cdcd_xfer_cb+0x64>
 800665a:	4b55      	ldr	r3, [pc, #340]	@ (80067b0 <cdcd_xfer_cb+0x1a4>)
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d000      	beq.n	800666c <cdcd_xfer_cb+0x60>
 800666a:	be00      	bkpt	0x0000
 800666c:	2300      	movs	r3, #0
 800666e:	e098      	b.n	80067a2 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006670:	7ffb      	ldrb	r3, [r7, #31]
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	4a4f      	ldr	r2, [pc, #316]	@ (80067b4 <cdcd_xfer_cb+0x1a8>)
 8006676:	4413      	add	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	78db      	ldrb	r3, [r3, #3]
 800667e:	79ba      	ldrb	r2, [r7, #6]
 8006680:	429a      	cmp	r2, r3
 8006682:	d148      	bne.n	8006716 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	3310      	adds	r3, #16
 8006688:	6939      	ldr	r1, [r7, #16]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	b292      	uxth	r2, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fb00 	bl	8007c94 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8006694:	4b48      	ldr	r3, [pc, #288]	@ (80067b8 <cdcd_xfer_cb+0x1ac>)
 8006696:	2b00      	cmp	r3, #0
 8006698:	d027      	beq.n	80066ea <cdcd_xfer_cb+0xde>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	795b      	ldrb	r3, [r3, #5]
 800669e:	2bff      	cmp	r3, #255	@ 0xff
 80066a0:	d023      	beq.n	80066ea <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e01c      	b.n	80066e2 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	795a      	ldrb	r2, [r3, #5]
 80066ac:	6939      	ldr	r1, [r7, #16]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	440b      	add	r3, r1
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d111      	bne.n	80066dc <cdcd_xfer_cb+0xd0>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	3310      	adds	r3, #16
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f9e3 	bl	8007a88 <tu_fifo_empty>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	795a      	ldrb	r2, [r3, #5]
 80066d2:	7ffb      	ldrb	r3, [r7, #31]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	3301      	adds	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3de      	bcc.n	80066a8 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80066ea:	4b34      	ldr	r3, [pc, #208]	@ (80067bc <cdcd_xfer_cb+0x1b0>)
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <cdcd_xfer_cb+0x102>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	3310      	adds	r3, #16
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 f9c7 	bl	8007a88 <tu_fifo_empty>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f083 0301 	eor.w	r3, r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8006706:	7ffb      	ldrb	r3, [r7, #31]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fa ff47 	bl	800159c <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800670e:	7ffb      	ldrb	r3, [r7, #31]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fb1b 	bl	8005d4c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	789b      	ldrb	r3, [r3, #2]
 800671a:	79ba      	ldrb	r2, [r7, #6]
 800671c:	429a      	cmp	r2, r3
 800671e:	d13f      	bne.n	80067a0 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8006720:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <cdcd_xfer_cb+0x1b4>)
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8006726:	7ffb      	ldrb	r3, [r7, #31]
 8006728:	4618      	mov	r0, r3
 800672a:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800672e:	7ffb      	ldrb	r3, [r7, #31]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fc2f 	bl	8005f94 <tud_cdc_n_write_flush>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d131      	bne.n	80067a0 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	331c      	adds	r3, #28
 8006740:	4618      	mov	r0, r3
 8006742:	f001 f96f 	bl	8007a24 <tu_fifo_count>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d129      	bne.n	80067a0 <cdcd_xfer_cb+0x194>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d026      	beq.n	80067a0 <cdcd_xfer_cb+0x194>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006758:	2b00      	cmp	r3, #0
 800675a:	d121      	bne.n	80067a0 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	789a      	ldrb	r2, [r3, #2]
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f002 fe79 	bl	800945c <usbd_edpt_claim>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	7899      	ldrb	r1, [r3, #2]
 8006774:	79f8      	ldrb	r0, [r7, #7]
 8006776:	2300      	movs	r3, #0
 8006778:	2200      	movs	r2, #0
 800677a:	f002 febf 	bl	80094fc <usbd_edpt_xfer>
 800677e:	4603      	mov	r3, r0
 8006780:	f083 0301 	eor.w	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <cdcd_xfer_cb+0x194>
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <cdcd_xfer_cb+0x1a4>)
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d000      	beq.n	800679c <cdcd_xfer_cb+0x190>
 800679a:	be00      	bkpt	0x0000
 800679c:	2300      	movs	r3, #0
 800679e:	e000      	b.n	80067a2 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80067a0:	2301      	movs	r3, #1
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000f3c 	.word	0x20000f3c
 80067b0:	e000edf0 	.word	0xe000edf0
 80067b4:	20001024 	.word	0x20001024
 80067b8:	00000000 	.word	0x00000000
 80067bc:	0800159d 	.word	0x0800159d
 80067c0:	00000000 	.word	0x00000000

080067c4 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	460a      	mov	r2, r1
 80067ce:	71fb      	strb	r3, [r7, #7]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80067d4:	2301      	movs	r3, #1
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	603a      	str	r2, [r7, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	4603      	mov	r3, r0
 80067ee:	71fb      	strb	r3, [r7, #7]
 80067f0:	460b      	mov	r3, r1
 80067f2:	71bb      	strb	r3, [r7, #6]
 80067f4:	4613      	mov	r3, r2
 80067f6:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8006812:	79fa      	ldrb	r2, [r7, #7]
 8006814:	491b      	ldr	r1, [pc, #108]	@ (8006884 <tud_hid_n_ready+0x80>)
 8006816:	4613      	mov	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3301      	adds	r3, #1
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	73bb      	strb	r3, [r7, #14]
 8006826:	f001 faf7 	bl	8007e18 <tud_mounted>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <tud_hid_n_ready+0x40>
 8006830:	f001 fb04 	bl	8007e3c <tud_suspended>
 8006834:	4603      	mov	r3, r0
 8006836:	f083 0301 	eor.w	r3, r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <tud_hid_n_ready+0x40>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <tud_hid_n_ready+0x42>
 8006844:	2300      	movs	r3, #0
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <tud_hid_n_ready+0x6e>
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <tud_hid_n_ready+0x6e>
 8006856:	7bba      	ldrb	r2, [r7, #14]
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f002 fec3 	bl	80095e8 <usbd_edpt_busy>
 8006862:	4603      	mov	r3, r0
 8006864:	f083 0301 	eor.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <tud_hid_n_ready+0x6e>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <tud_hid_n_ready+0x70>
 8006872:	2300      	movs	r3, #0
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	b2db      	uxtb	r3, r3
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200010a4 	.word	0x200010a4

08006888 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08e      	sub	sp, #56	@ 0x38
 800688c:	af00      	add	r7, sp, #0
 800688e:	603a      	str	r2, [r7, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	4603      	mov	r3, r0
 8006894:	71fb      	strb	r3, [r7, #7]
 8006896:	460b      	mov	r3, r1
 8006898:	71bb      	strb	r3, [r7, #6]
 800689a:	4613      	mov	r3, r2
 800689c:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <tud_hid_n_report+0x20>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e06d      	b.n	8006984 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80068ae:	79fa      	ldrb	r2, [r7, #7]
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4a34      	ldr	r2, [pc, #208]	@ (800698c <tud_hid_n_report+0x104>)
 80068ba:	4413      	add	r3, r2
 80068bc:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80068be:	79fa      	ldrb	r2, [r7, #7]
 80068c0:	4613      	mov	r3, r2
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	4413      	add	r3, r2
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	4a31      	ldr	r2, [pc, #196]	@ (8006990 <tud_hid_n_report+0x108>)
 80068ca:	4413      	add	r3, r2
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f002 fdbf 	bl	800945c <usbd_edpt_claim>
 80068de:	4603      	mov	r3, r0
 80068e0:	f083 0301 	eor.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <tud_hid_n_report+0x66>
 80068ea:	2300      	movs	r3, #0
 80068ec:	e04a      	b.n	8006984 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80068ee:	79bb      	ldrb	r3, [r7, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d021      	beq.n	8006938 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	79ba      	ldrb	r2, [r7, #6]
 80068f8:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	3310      	adds	r3, #16
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	88bb      	ldrh	r3, [r7, #4]
 8006902:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006904:	220f      	movs	r2, #15
 8006906:	627a      	str	r2, [r7, #36]	@ 0x24
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 800690e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	429a      	cmp	r2, r3
 8006914:	d202      	bcs.n	800691c <tud_hid_n_report+0x94>
    return -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	e005      	b.n	8006928 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	6a39      	ldr	r1, [r7, #32]
 8006920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006922:	f005 fca2 	bl	800c26a <memcpy>
  return 0;
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <tud_hid_n_report+0xa8>
 800692c:	2300      	movs	r3, #0
 800692e:	e029      	b.n	8006984 <tud_hid_n_report+0xfc>
    len++;
 8006930:	88bb      	ldrh	r3, [r7, #4]
 8006932:	3301      	adds	r3, #1
 8006934:	80bb      	strh	r3, [r7, #4]
 8006936:	e01a      	b.n	800696e <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	f103 0210 	add.w	r2, r3, #16
 800693e:	88bb      	ldrh	r3, [r7, #4]
 8006940:	61ba      	str	r2, [r7, #24]
 8006942:	2210      	movs	r2, #16
 8006944:	617a      	str	r2, [r7, #20]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	613a      	str	r2, [r7, #16]
 800694a:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d202      	bcs.n	800695a <tud_hid_n_report+0xd2>
    return -1;
 8006954:	f04f 33ff 	mov.w	r3, #4294967295
 8006958:	e005      	b.n	8006966 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	6939      	ldr	r1, [r7, #16]
 800695e:	69b8      	ldr	r0, [r7, #24]
 8006960:	f005 fc83 	bl	800c26a <memcpy>
  return 0;
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <tud_hid_n_report+0xe6>
 800696a:	2300      	movs	r3, #0
 800696c:	e00a      	b.n	8006984 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	7859      	ldrb	r1, [r3, #1]
 8006972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006974:	f103 0210 	add.w	r2, r3, #16
 8006978:	88bb      	ldrh	r3, [r7, #4]
 800697a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800697e:	f002 fdbd 	bl	80094fc <usbd_edpt_xfer>
 8006982:	4603      	mov	r3, r0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3738      	adds	r7, #56	@ 0x38
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	200010a4 	.word	0x200010a4
 8006990:	200010b0 	.word	0x200010b0

08006994 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	4603      	mov	r3, r0
 800699e:	71fb      	strb	r3, [r7, #7]
 80069a0:	460b      	mov	r3, r1
 80069a2:	71bb      	strb	r3, [r7, #6]
 80069a4:	4613      	mov	r3, r2
 80069a6:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80069a8:	797b      	ldrb	r3, [r7, #5]
 80069aa:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	f107 030a 	add.w	r3, r7, #10
 80069bc:	6811      	ldr	r1, [r2, #0]
 80069be:	6019      	str	r1, [r3, #0]
 80069c0:	8892      	ldrh	r2, [r2, #4]
 80069c2:	809a      	strh	r2, [r3, #4]
 80069c4:	e007      	b.n	80069d6 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	3302      	adds	r3, #2
 80069cc:	2206      	movs	r2, #6
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f005 fb72 	bl	800c0ba <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80069d6:	f107 0208 	add.w	r2, r7, #8
 80069da:	79b9      	ldrb	r1, [r7, #6]
 80069dc:	79f8      	ldrb	r0, [r7, #7]
 80069de:	2308      	movs	r3, #8
 80069e0:	f7ff ff52 	bl	8006888 <tud_hid_n_report>
 80069e4:	4603      	mov	r3, r0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80069ee:	b580      	push	{r7, lr}
 80069f0:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80069f2:	2000      	movs	r0, #0
 80069f4:	f000 f80a 	bl	8006a0c <hidd_reset>
}
 80069f8:	bf00      	nop
 80069fa:	bd80      	pop	{r7, pc}

080069fc <hidd_deinit>:

bool hidd_deinit(void) {
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return true;
 8006a00:	2301      	movs	r3, #1
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8006a16:	220c      	movs	r2, #12
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4803      	ldr	r0, [pc, #12]	@ (8006a28 <hidd_reset+0x1c>)
 8006a1c:	f005 fb4d 	bl	800c0ba <memset>
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	200010a4 	.word	0x200010a4

08006a2c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b094      	sub	sp, #80	@ 0x50
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	4603      	mov	r3, r0
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	71fb      	strb	r3, [r7, #7]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	795b      	ldrb	r3, [r3, #5]
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d001      	beq.n	8006a48 <hidd_open+0x1c>
 8006a44:	2300      	movs	r3, #0
 8006a46:	e0ce      	b.n	8006be6 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	791b      	ldrb	r3, [r3, #4]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	00d2      	lsls	r2, r2, #3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8006a54:	3312      	adds	r3, #18
 8006a56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8006a5a:	88ba      	ldrh	r2, [r7, #4]
 8006a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d20a      	bcs.n	8006a7a <hidd_open+0x4e>
 8006a64:	4b62      	ldr	r3, [pc, #392]	@ (8006bf0 <hidd_open+0x1c4>)
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d000      	beq.n	8006a76 <hidd_open+0x4a>
 8006a74:	be00      	bkpt	0x0000
 8006a76:	2300      	movs	r3, #0
 8006a78:	e0b5      	b.n	8006be6 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a80:	e011      	b.n	8006aa6 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8006a82:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a59      	ldr	r2, [pc, #356]	@ (8006bf4 <hidd_open+0x1c8>)
 8006a90:	4413      	add	r3, r2
 8006a92:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8006a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8006a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0e9      	beq.n	8006a82 <hidd_open+0x56>
 8006aae:	e000      	b.n	8006ab2 <hidd_open+0x86>
      break;
 8006ab0:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8006ab2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <hidd_open+0xa4>
 8006aba:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf0 <hidd_open+0x1c4>)
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d000      	beq.n	8006acc <hidd_open+0xa0>
 8006aca:	be00      	bkpt	0x0000
 8006acc:	2300      	movs	r3, #0
 8006ace:	e08a      	b.n	8006be6 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8006ad0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	4413      	add	r3, r2
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	4a46      	ldr	r2, [pc, #280]	@ (8006bf8 <hidd_open+0x1cc>)
 8006ade:	4413      	add	r3, r2
 8006ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8006af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	3301      	adds	r3, #1
 8006b02:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8006b04:	2b21      	cmp	r3, #33	@ 0x21
 8006b06:	d00a      	beq.n	8006b1e <hidd_open+0xf2>
 8006b08:	4b39      	ldr	r3, [pc, #228]	@ (8006bf0 <hidd_open+0x1c4>)
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d000      	beq.n	8006b1a <hidd_open+0xee>
 8006b18:	be00      	bkpt	0x0000
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e063      	b.n	8006be6 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8006b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8006b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	7919      	ldrb	r1, [r3, #4]
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3e:	3302      	adds	r3, #2
 8006b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b42:	3201      	adds	r2, #1
 8006b44:	79f8      	ldrb	r0, [r7, #7]
 8006b46:	9201      	str	r2, [sp, #4]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b50:	f002 fbd6 	bl	8009300 <usbd_open_edpt_pair>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f083 0301 	eor.w	r3, r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <hidd_open+0x14a>
 8006b60:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <hidd_open+0x1c4>)
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d000      	beq.n	8006b72 <hidd_open+0x146>
 8006b70:	be00      	bkpt	0x0000
 8006b72:	2300      	movs	r3, #0
 8006b74:	e037      	b.n	8006be6 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	799b      	ldrb	r3, [r3, #6]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d103      	bne.n	8006b86 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	79da      	ldrb	r2, [r3, #7]
 8006b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b84:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8006b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b88:	2201      	movs	r2, #1
 8006b8a:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	789a      	ldrb	r2, [r3, #2]
 8006b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b92:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8006b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	3307      	adds	r3, #7
 8006b9a:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	881a      	ldrh	r2, [r3, #0]
 8006ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba2:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8006ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba6:	789b      	ldrb	r3, [r3, #2]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01a      	beq.n	8006be2 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8006bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bae:	7899      	ldrb	r1, [r3, #2]
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb2:	f103 0220 	add.w	r2, r3, #32
 8006bb6:	79f8      	ldrb	r0, [r7, #7]
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f002 fc9f 	bl	80094fc <usbd_edpt_xfer>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f083 0301 	eor.w	r3, r3, #1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <hidd_open+0x1b6>
 8006bca:	4b09      	ldr	r3, [pc, #36]	@ (8006bf0 <hidd_open+0x1c4>)
 8006bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d000      	beq.n	8006bdc <hidd_open+0x1b0>
 8006bda:	be00      	bkpt	0x0000
 8006bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006be0:	e001      	b.n	8006be6 <hidd_open+0x1ba>
  }

  return drv_len;
 8006be2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3748      	adds	r7, #72	@ 0x48
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	e000edf0 	.word	0xe000edf0
 8006bf4:	200010a4 	.word	0x200010a4
 8006bf8:	200010b0 	.word	0x200010b0

08006bfc <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b094      	sub	sp, #80	@ 0x50
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	4603      	mov	r3, r0
 8006c04:	603a      	str	r2, [r7, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <hidd_control_xfer_cb+0x22>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e1d6      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	889b      	ldrh	r3, [r3, #4]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006c28:	2300      	movs	r3, #0
 8006c2a:	77bb      	strb	r3, [r7, #30]
 8006c2c:	e00f      	b.n	8006c4e <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8006c2e:	7fba      	ldrb	r2, [r7, #30]
 8006c30:	498f      	ldr	r1, [pc, #572]	@ (8006e70 <hidd_control_xfer_cb+0x274>)
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	7ffa      	ldrb	r2, [r7, #31]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d101      	bne.n	8006c48 <hidd_control_xfer_cb+0x4c>
      return i;
 8006c44:	7fbb      	ldrb	r3, [r7, #30]
 8006c46:	e006      	b.n	8006c56 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006c48:	7fbb      	ldrb	r3, [r7, #30]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	77bb      	strb	r3, [r7, #30]
 8006c4e:	7fbb      	ldrb	r3, [r7, #30]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ec      	beq.n	8006c2e <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8006c54:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8006c56:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8006c5a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <hidd_control_xfer_cb+0x6a>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e1b2      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8006c66:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a7f      	ldr	r2, [pc, #508]	@ (8006e70 <hidd_control_xfer_cb+0x274>)
 8006c74:	4413      	add	r3, r2
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8006c78:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4a7b      	ldr	r2, [pc, #492]	@ (8006e74 <hidd_control_xfer_cb+0x278>)
 8006c86:	4413      	add	r3, r2
 8006c88:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d145      	bne.n	8006d24 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8006c98:	79bb      	ldrb	r3, [r7, #6]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	f040 8195 	bne.w	8006fca <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006ca8:	8bbb      	ldrh	r3, [r7, #28]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d11b      	bne.n	8006cf4 <hidd_control_xfer_cb+0xf8>
 8006cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc0:	2b21      	cmp	r3, #33	@ 0x21
 8006cc2:	d117      	bne.n	8006cf4 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <hidd_control_xfer_cb+0xd4>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e17d      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	79f8      	ldrb	r0, [r7, #7]
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	f002 fdf5 	bl	80098cc <tud_control_xfer>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f083 0301 	eor.w	r3, r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 816d 	beq.w	8006fca <hidd_control_xfer_cb+0x3ce>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e16b      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d111      	bne.n	8006d20 <hidd_control_xfer_cb+0x124>
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d00:	2b22      	cmp	r3, #34	@ 0x22
 8006d02:	d10d      	bne.n	8006d20 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8006d04:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc f941 	bl	8002f90 <tud_hid_descriptor_report_cb>
 8006d0e:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	889b      	ldrh	r3, [r3, #4]
 8006d14:	79f8      	ldrb	r0, [r7, #7]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	f002 fdd7 	bl	80098cc <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8006d1e:	e154      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8006d20:	2300      	movs	r3, #0
 8006d22:	e153      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	f040 813e 	bne.w	8006fb0 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	2b0a      	cmp	r3, #10
 8006d3c:	f200 8136 	bhi.w	8006fac <hidd_control_xfer_cb+0x3b0>
 8006d40:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <hidd_control_xfer_cb+0x14c>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006f4b 	.word	0x08006f4b
 8006d50:	08006f61 	.word	0x08006f61
 8006d54:	08006fad 	.word	0x08006fad
 8006d58:	08006fad 	.word	0x08006fad
 8006d5c:	08006fad 	.word	0x08006fad
 8006d60:	08006fad 	.word	0x08006fad
 8006d64:	08006fad 	.word	0x08006fad
 8006d68:	08006e4b 	.word	0x08006e4b
 8006d6c:	08006f05 	.word	0x08006f05
 8006d70:	08006f77 	.word	0x08006f77
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006d74:	79bb      	ldrb	r3, [r7, #6]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	f040 811c 	bne.w	8006fb4 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	82bb      	strh	r3, [r7, #20]
 8006d84:	8abb      	ldrh	r3, [r7, #20]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006d98:	8afb      	ldrh	r3, [r7, #22]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	837b      	strh	r3, [r7, #26]
 8006dac:	2310      	movs	r3, #16
 8006dae:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006db0:	8b7a      	ldrh	r2, [r7, #26]
 8006db2:	8b3b      	ldrh	r3, [r7, #24]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bf28      	it	cs
 8006db8:	4613      	movcs	r3, r2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8006dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d013      	beq.n	8006df6 <hidd_control_xfer_cb+0x1fa>
 8006dce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d90f      	bls.n	8006df6 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ddc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006de0:	701a      	strb	r2, [r3, #0]
            req_len--;
 8006de2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006de6:	3b01      	subs	r3, #1
 8006de8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8006dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8006df6:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006dfa:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8006dfe:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8006e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0a:	f7fa fe21 	bl	8001a50 <tud_hid_get_report_cb>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006e16:	4413      	add	r3, r2
 8006e18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8006e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <hidd_control_xfer_cb+0x23e>
 8006e24:	4b14      	ldr	r3, [pc, #80]	@ (8006e78 <hidd_control_xfer_cb+0x27c>)
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d000      	beq.n	8006e36 <hidd_control_xfer_cb+0x23a>
 8006e34:	be00      	bkpt	0x0000
 8006e36:	2300      	movs	r3, #0
 8006e38:	e0c8      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8006e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006e40:	79f8      	ldrb	r0, [r7, #7]
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	f002 fd42 	bl	80098cc <tud_control_xfer>
        }
        break;
 8006e48:	e0b4      	b.n	8006fb4 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006e4a:	79bb      	ldrb	r3, [r7, #6]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d115      	bne.n	8006e7c <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	88db      	ldrh	r3, [r3, #6]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b10      	cmp	r3, #16
 8006e58:	d901      	bls.n	8006e5e <hidd_control_xfer_cb+0x262>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e0b6      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8006e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	88db      	ldrh	r3, [r3, #6]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	79f8      	ldrb	r0, [r7, #7]
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	f002 fd2f 	bl	80098cc <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8006e6e:	e0a3      	b.n	8006fb8 <hidd_control_xfer_cb+0x3bc>
 8006e70:	200010a4 	.word	0x200010a4
 8006e74:	200010b0 	.word	0x200010b0
 8006e78:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8006e7c:	79bb      	ldrb	r3, [r7, #6]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	f040 809a 	bne.w	8006fb8 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006e8c:	89bb      	ldrh	r3, [r7, #12]
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	885b      	ldrh	r3, [r3, #2]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006ea0:	89fb      	ldrh	r3, [r7, #14]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	88db      	ldrh	r3, [r3, #6]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	827b      	strh	r3, [r7, #18]
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006eb8:	8a7a      	ldrh	r2, [r7, #18]
 8006eba:	8a3b      	ldrh	r3, [r7, #16]
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	bf28      	it	cs
 8006ec0:	4613      	movcs	r3, r2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8006ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00e      	beq.n	8006eec <hidd_control_xfer_cb+0x2f0>
 8006ece:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d90b      	bls.n	8006eec <hidd_control_xfer_cb+0x2f0>
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d105      	bne.n	8006eec <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8006ee6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8006eec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006ef0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8006ef4:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8006ef8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efe:	f7fa fdb8 	bl	8001a72 <tud_hid_set_report_cb>
        break;
 8006f02:	e059      	b.n	8006fb8 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8006f04:	79bb      	ldrb	r3, [r7, #6]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d158      	bne.n	8006fbc <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	885b      	ldrh	r3, [r3, #2]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	79da      	ldrb	r2, [r3, #7]
 8006f22:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f26:	4611      	mov	r1, r2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fc4b 	bl	80067c4 <tud_hid_set_idle_cb>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f083 0301 	eor.w	r3, r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <hidd_control_xfer_cb+0x342>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e046      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f002 fc50 	bl	80097e8 <tud_control_status>
        }
        break;
 8006f48:	e038      	b.n	8006fbc <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8006f4a:	79bb      	ldrb	r3, [r7, #6]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d137      	bne.n	8006fc0 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8006f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f52:	1dda      	adds	r2, r3, #7
 8006f54:	79f8      	ldrb	r0, [r7, #7]
 8006f56:	2301      	movs	r3, #1
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	f002 fcb7 	bl	80098cc <tud_control_xfer>
        }
        break;
 8006f5e:	e02f      	b.n	8006fc0 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006f60:	79bb      	ldrb	r3, [r7, #6]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d12e      	bne.n	8006fc4 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8006f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f68:	1d9a      	adds	r2, r3, #6
 8006f6a:	79f8      	ldrb	r0, [r7, #7]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	f002 fcac 	bl	80098cc <tud_control_xfer>
        }
        break;
 8006f74:	e026      	b.n	8006fc4 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006f76:	79bb      	ldrb	r3, [r7, #6]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d105      	bne.n	8006f88 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 fc31 	bl	80097e8 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8006f86:	e01f      	b.n	8006fc8 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d11c      	bne.n	8006fc8 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f98:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9c:	799a      	ldrb	r2, [r3, #6]
 8006f9e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fa fd37 	bl	8001a18 <tud_hid_set_protocol_cb>
        break;
 8006faa:	e00d      	b.n	8006fc8 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8006fac:	2300      	movs	r3, #0
 8006fae:	e00d      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e00b      	b.n	8006fcc <hidd_control_xfer_cb+0x3d0>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e008      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
        break;
 8006fb8:	bf00      	nop
 8006fba:	e006      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
        break;
 8006fbc:	bf00      	nop
 8006fbe:	e004      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
        break;
 8006fc0:	bf00      	nop
 8006fc2:	e002      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
        break;
 8006fc4:	bf00      	nop
 8006fc6:	e000      	b.n	8006fca <hidd_control_xfer_cb+0x3ce>
        break;
 8006fc8:	bf00      	nop
  }

  return true;
 8006fca:	2301      	movs	r3, #1
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3748      	adds	r7, #72	@ 0x48
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	71fb      	strb	r3, [r7, #7]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	71bb      	strb	r3, [r7, #6]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e014      	b.n	8007018 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8006fee:	7ffa      	ldrb	r2, [r7, #31]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80070f4 <hidd_xfer_cb+0x120>)
 8006ffa:	4413      	add	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	789b      	ldrb	r3, [r3, #2]
 8007002:	79ba      	ldrb	r2, [r7, #6]
 8007004:	429a      	cmp	r2, r3
 8007006:	d00a      	beq.n	800701e <hidd_xfer_cb+0x4a>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	79ba      	ldrb	r2, [r7, #6]
 800700e:	429a      	cmp	r2, r3
 8007010:	d005      	beq.n	800701e <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007012:	7ffb      	ldrb	r3, [r7, #31]
 8007014:	3301      	adds	r3, #1
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	7ffb      	ldrb	r3, [r7, #31]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0e7      	beq.n	8006fee <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 800701e:	7ffb      	ldrb	r3, [r7, #31]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <hidd_xfer_cb+0x66>
 8007024:	4b34      	ldr	r3, [pc, #208]	@ (80070f8 <hidd_xfer_cb+0x124>)
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d000      	beq.n	8007036 <hidd_xfer_cb+0x62>
 8007034:	be00      	bkpt	0x0000
 8007036:	2300      	movs	r3, #0
 8007038:	e057      	b.n	80070ea <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 800703a:	7ffa      	ldrb	r2, [r7, #31]
 800703c:	4613      	mov	r3, r2
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	4413      	add	r3, r2
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	4a2d      	ldr	r2, [pc, #180]	@ (80070fc <hidd_xfer_cb+0x128>)
 8007046:	4413      	add	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	79ba      	ldrb	r2, [r7, #6]
 8007050:	429a      	cmp	r2, r3
 8007052:	d116      	bne.n	8007082 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007054:	797b      	ldrb	r3, [r7, #5]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f103 0110 	add.w	r1, r3, #16
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	7ffb      	ldrb	r3, [r7, #31]
 8007066:	4618      	mov	r0, r3
 8007068:	f7fa fce4 	bl	8001a34 <tud_hid_report_complete_cb>
 800706c:	e03c      	b.n	80070e8 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f103 0210 	add.w	r2, r3, #16
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	7ff8      	ldrb	r0, [r7, #31]
 800707a:	2101      	movs	r1, #1
 800707c:	f7ff fbb1 	bl	80067e2 <tud_hid_report_failed_cb>
 8007080:	e032      	b.n	80070e8 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007082:	797b      	ldrb	r3, [r7, #5]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10c      	bne.n	80070a2 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f103 0220 	add.w	r2, r3, #32
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	7ff8      	ldrb	r0, [r7, #31]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	2202      	movs	r2, #2
 800709a:	2100      	movs	r1, #0
 800709c:	f7fa fce9 	bl	8001a72 <tud_hid_set_report_cb>
 80070a0:	e008      	b.n	80070b4 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f103 0220 	add.w	r2, r3, #32
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	7ff8      	ldrb	r0, [r7, #31]
 80070ae:	2102      	movs	r1, #2
 80070b0:	f7ff fb97 	bl	80067e2 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	7899      	ldrb	r1, [r3, #2]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f103 0220 	add.w	r2, r3, #32
 80070be:	79f8      	ldrb	r0, [r7, #7]
 80070c0:	2310      	movs	r3, #16
 80070c2:	f002 fa1b 	bl	80094fc <usbd_edpt_xfer>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f083 0301 	eor.w	r3, r3, #1
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <hidd_xfer_cb+0x114>
 80070d2:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <hidd_xfer_cb+0x124>)
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d000      	beq.n	80070e4 <hidd_xfer_cb+0x110>
 80070e2:	be00      	bkpt	0x0000
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <hidd_xfer_cb+0x116>
  }

  return true;
 80070e8:	2301      	movs	r3, #1
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200010a4 	.word	0x200010a4
 80070f8:	e000edf0 	.word	0xe000edf0
 80070fc:	200010b0 	.word	0x200010b0

08007100 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	460b      	mov	r3, r1
 8007110:	80fb      	strh	r3, [r7, #6]
 8007112:	4613      	mov	r3, r2
 8007114:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800711c:	d901      	bls.n	8007122 <tu_fifo_config+0x22>
 800711e:	2300      	movs	r3, #0
 8007120:	e01b      	b.n	800715a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800712e:	88bb      	ldrh	r3, [r7, #4]
 8007130:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007134:	b299      	uxth	r1, r3
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	88d3      	ldrh	r3, [r2, #6]
 800713a:	f361 030e 	bfi	r3, r1, #0, #15
 800713e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	79d3      	ldrb	r3, [r2, #7]
 8007144:	7e39      	ldrb	r1, [r7, #24]
 8007146:	f361 13c7 	bfi	r3, r1, #7, #1
 800714a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007158:	2301      	movs	r3, #1
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b08a      	sub	sp, #40	@ 0x28
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800717e:	e00b      	b.n	8007198 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	61ba      	str	r2, [r7, #24]
 8007188:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	601a      	str	r2, [r3, #0]
}
 8007190:	bf00      	nop
    ff_buf += 4;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007198:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800719a:	1e5a      	subs	r2, r3, #1
 800719c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1ee      	bne.n	8007180 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80071ac:	7ffb      	ldrb	r3, [r7, #31]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80071b8:	7ffa      	ldrb	r2, [r7, #31]
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f005 f852 	bl	800c26a <memcpy>
  }
}
 80071c6:	bf00      	nop
 80071c8:	3728      	adds	r7, #40	@ 0x28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b08a      	sub	sp, #40	@ 0x28
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80071e6:	e008      	b.n	80071fa <_ff_pull_const_addr+0x2c>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3304      	adds	r3, #4
 80071f8:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80071fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f1      	bne.n	80071e8 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800720e:	7ffb      	ldrb	r3, [r7, #31]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007218:	7ffa      	ldrb	r2, [r7, #31]
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	4618      	mov	r0, r3
 8007222:	f005 f822 	bl	800c26a <memcpy>

    *reg_tx = tmp32;
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	601a      	str	r2, [r3, #0]
  }
}
 800722c:	bf00      	nop
 800722e:	3728      	adds	r7, #40	@ 0x28
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	68f9      	ldr	r1, [r7, #12]
 800724a:	88c9      	ldrh	r1, [r1, #6]
 800724c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007250:	b289      	uxth	r1, r1
 8007252:	fb01 f202 	mul.w	r2, r1, r2
 8007256:	1898      	adds	r0, r3, r2
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88db      	ldrh	r3, [r3, #6]
 800725c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	f005 f800 	bl	800c26a <memcpy>
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08e      	sub	sp, #56	@ 0x38
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4611      	mov	r1, r2
 800727e:	461a      	mov	r2, r3
 8007280:	460b      	mov	r3, r1
 8007282:	80fb      	strh	r3, [r7, #6]
 8007284:	4613      	mov	r3, r2
 8007286:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	889a      	ldrh	r2, [r3, #4]
 800728c:	88bb      	ldrh	r3, [r7, #4]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072a8:	fb13 f302 	smulbb	r3, r3, r2
 80072ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072bc:	fb13 f302 	smulbb	r3, r3, r2
 80072c0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	88ba      	ldrh	r2, [r7, #4]
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	88c9      	ldrh	r1, [r1, #6]
 80072cc:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80072d0:	b289      	uxth	r1, r1
 80072d2:	fb01 f202 	mul.w	r2, r1, r2
 80072d6:	4413      	add	r3, r2
 80072d8:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80072da:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <_ff_push_n+0x76>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d022      	beq.n	800732c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80072e6:	e09e      	b.n	8007426 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d80d      	bhi.n	800730c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	88d2      	ldrh	r2, [r2, #6]
 80072f6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072fa:	b292      	uxth	r2, r2
 80072fc:	fb02 f303 	mul.w	r3, r2, r3
 8007300:	461a      	mov	r2, r3
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007306:	f004 ffb0 	bl	800c26a <memcpy>
      break;
 800730a:	e08c      	b.n	8007426 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800730c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800730e:	461a      	mov	r2, r3
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007314:	f004 ffa9 	bl	800c26a <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007324:	4619      	mov	r1, r3
 8007326:	f004 ffa0 	bl	800c26a <memcpy>
      break;
 800732a:	e07c      	b.n	8007426 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007330:	429a      	cmp	r2, r3
 8007332:	d80f      	bhi.n	8007354 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	fb13 f302 	smulbb	r3, r3, r2
 8007346:	b29b      	uxth	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800734e:	f7ff ff0a 	bl	8007166 <_ff_push_const_addr>
      break;
 8007352:	e067      	b.n	8007424 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8007354:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800735c:	8c3b      	ldrh	r3, [r7, #32]
 800735e:	461a      	mov	r2, r3
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007364:	f7ff feff 	bl	8007166 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007368:	8c3b      	ldrh	r3, [r7, #32]
 800736a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736c:	4413      	add	r3, r2
 800736e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007370:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800737c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007380:	2b00      	cmp	r3, #0
 8007382:	d043      	beq.n	800740c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800738c:	b29b      	uxth	r3, r3
 800738e:	f1c3 0304 	rsb	r3, r3, #4
 8007392:	b29a      	uxth	r2, r3
 8007394:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007396:	837b      	strh	r3, [r7, #26]
 8007398:	4613      	mov	r3, r2
 800739a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800739c:	8b7a      	ldrh	r2, [r7, #26]
 800739e:	8b3b      	ldrh	r3, [r7, #24]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bf28      	it	cs
 80073a4:	4613      	movcs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80073ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80073c4:	e007      	b.n	80073d6 <_ff_push_n+0x164>
 80073c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073c8:	1c53      	adds	r3, r2, #1
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	1c59      	adds	r1, r3, #1
 80073d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073d2:	7812      	ldrb	r2, [r2, #0]
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073da:	1e5a      	subs	r2, r3, #1
 80073dc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f0      	bne.n	80073c6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80073ea:	e007      	b.n	80073fc <_ff_push_n+0x18a>
 80073ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ee:	1c53      	adds	r3, r2, #1
 80073f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	1c59      	adds	r1, r3, #1
 80073f6:	6339      	str	r1, [r7, #48]	@ 0x30
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	701a      	strb	r2, [r3, #0]
 80073fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <_ff_push_n+0x17a>
 800740a:	e002      	b.n	8007412 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8007412:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <_ff_push_n+0x1b2>
 8007418:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800741a:	461a      	mov	r2, r3
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007420:	f7ff fea1 	bl	8007166 <_ff_push_const_addr>
      break;
 8007424:	bf00      	nop
  }
}
 8007426:	bf00      	nop
 8007428:	3738      	adds	r7, #56	@ 0x38
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	88c9      	ldrh	r1, [r1, #6]
 8007446:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800744a:	b289      	uxth	r1, r1
 800744c:	fb01 f202 	mul.w	r2, r1, r2
 8007450:	1899      	adds	r1, r3, r2
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800745a:	b29b      	uxth	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	68b8      	ldr	r0, [r7, #8]
 8007460:	f004 ff03 	bl	800c26a <memcpy>
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08e      	sub	sp, #56	@ 0x38
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4611      	mov	r1, r2
 8007478:	461a      	mov	r2, r3
 800747a:	460b      	mov	r3, r1
 800747c:	80fb      	strh	r3, [r7, #6]
 800747e:	4613      	mov	r3, r2
 8007480:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	889a      	ldrh	r2, [r3, #4]
 8007486:	88bb      	ldrh	r3, [r7, #4]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88db      	ldrh	r3, [r3, #6]
 8007498:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800749c:	b29b      	uxth	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074a2:	fb13 f302 	smulbb	r3, r3, r2
 80074a6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	88db      	ldrh	r3, [r3, #6]
 80074ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074b6:	fb13 f302 	smulbb	r3, r3, r2
 80074ba:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	88ba      	ldrh	r2, [r7, #4]
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	88c9      	ldrh	r1, [r1, #6]
 80074c6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80074ca:	b289      	uxth	r1, r1
 80074cc:	fb01 f202 	mul.w	r2, r1, r2
 80074d0:	4413      	add	r3, r2
 80074d2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80074d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <_ff_pull_n+0x76>
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d022      	beq.n	8007526 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80074e0:	e0a0      	b.n	8007624 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d80d      	bhi.n	8007506 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	88d2      	ldrh	r2, [r2, #6]
 80074f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80074f4:	b292      	uxth	r2, r2
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074fe:	68b8      	ldr	r0, [r7, #8]
 8007500:	f004 feb3 	bl	800c26a <memcpy>
    break;
 8007504:	e08e      	b.n	8007624 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8007506:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007508:	461a      	mov	r2, r3
 800750a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	f004 feac 	bl	800c26a <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8007512:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	18d0      	adds	r0, r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800751e:	4619      	mov	r1, r3
 8007520:	f004 fea3 	bl	800c26a <memcpy>
    break;
 8007524:	e07e      	b.n	8007624 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800752a:	429a      	cmp	r2, r3
 800752c:	d80f      	bhi.n	800754e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	fb13 f302 	smulbb	r3, r3, r2
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007546:	68b8      	ldr	r0, [r7, #8]
 8007548:	f7ff fe41 	bl	80071ce <_ff_pull_const_addr>
    break;
 800754c:	e069      	b.n	8007622 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800754e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8007556:	8c3b      	ldrh	r3, [r7, #32]
 8007558:	461a      	mov	r2, r3
 800755a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f7ff fe36 	bl	80071ce <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8007562:	8c3b      	ldrh	r3, [r7, #32]
 8007564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007566:	4413      	add	r3, r2
 8007568:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800756a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800757a:	2b00      	cmp	r3, #0
 800757c:	d045      	beq.n	800760a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007586:	b29b      	uxth	r3, r3
 8007588:	f1c3 0304 	rsb	r3, r3, #4
 800758c:	b29a      	uxth	r2, r3
 800758e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007590:	837b      	strh	r3, [r7, #26]
 8007592:	4613      	mov	r3, r2
 8007594:	833b      	strh	r3, [r7, #24]
 8007596:	8b7a      	ldrh	r2, [r7, #26]
 8007598:	8b3b      	ldrh	r3, [r7, #24]
 800759a:	4293      	cmp	r3, r2
 800759c:	bf28      	it	cs
 800759e:	4613      	movcs	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80075a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80075b6:	f107 0314 	add.w	r3, r7, #20
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80075bc:	e007      	b.n	80075ce <_ff_pull_n+0x162>
 80075be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c0:	1c53      	adds	r3, r2, #1
 80075c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075d2:	1e5a      	subs	r2, r3, #1
 80075d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f0      	bne.n	80075be <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80075e2:	e007      	b.n	80075f4 <_ff_pull_n+0x188>
 80075e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e6:	1c53      	adds	r3, r2, #1
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	1c59      	adds	r1, r3, #1
 80075ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075f8:	1e5a      	subs	r2, r3, #1
 80075fa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e002      	b.n	8007610 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8007610:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <_ff_pull_n+0x1b6>
 8007616:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007618:	461a      	mov	r2, r3
 800761a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800761c:	68b8      	ldr	r0, [r7, #8]
 800761e:	f7ff fdd6 	bl	80071ce <_ff_pull_const_addr>
    break;
 8007622:	bf00      	nop
  }
}
 8007624:	bf00      	nop
 8007626:	3738      	adds	r7, #56	@ 0x38
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	80fb      	strh	r3, [r7, #6]
 8007636:	460b      	mov	r3, r1
 8007638:	80bb      	strh	r3, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800763e:	88ba      	ldrh	r2, [r7, #4]
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	4413      	add	r3, r2
 8007644:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8007646:	88ba      	ldrh	r2, [r7, #4]
 8007648:	89fb      	ldrh	r3, [r7, #14]
 800764a:	429a      	cmp	r2, r3
 800764c:	d804      	bhi.n	8007658 <advance_index+0x2c>
 800764e:	89fa      	ldrh	r2, [r7, #14]
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	429a      	cmp	r2, r3
 8007656:	db08      	blt.n	800766a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	425b      	negs	r3, r3
 8007660:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8007662:	89fa      	ldrh	r2, [r7, #14]
 8007664:	89bb      	ldrh	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800766a:	89fb      	ldrh	r3, [r7, #14]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	@ 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4611      	mov	r1, r2
 8007684:	461a      	mov	r2, r3
 8007686:	460b      	mov	r3, r1
 8007688:	80fb      	strh	r3, [r7, #6]
 800768a:	4613      	mov	r3, r2
 800768c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	889b      	ldrh	r3, [r3, #4]
 8007692:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	843b      	strh	r3, [r7, #32]
 8007698:	88bb      	ldrh	r3, [r7, #4]
 800769a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800769c:	8c3a      	ldrh	r2, [r7, #32]
 800769e:	8bfb      	ldrh	r3, [r7, #30]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d304      	bcc.n	80076ae <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80076a4:	8c3a      	ldrh	r2, [r7, #32]
 80076a6:	8bfb      	ldrh	r3, [r7, #30]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	e008      	b.n	80076c0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80076ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	8c39      	ldrh	r1, [r7, #32]
 80076b6:	8bfb      	ldrh	r3, [r7, #30]
 80076b8:	1acb      	subs	r3, r1, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4413      	add	r3, r2
 80076be:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80076c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80076c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <_tu_fifo_peek+0x54>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e037      	b.n	800773c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	889b      	ldrh	r3, [r3, #4]
 80076d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d91b      	bls.n	800770e <_tu_fifo_peek+0x96>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	889b      	ldrh	r3, [r3, #4]
 80076e2:	8afa      	ldrh	r2, [r7, #22]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d305      	bcc.n	80076f4 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	889b      	ldrh	r3, [r3, #4]
 80076ec:	8afa      	ldrh	r2, [r7, #22]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	82bb      	strh	r3, [r7, #20]
 80076f2:	e004      	b.n	80076fe <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	889a      	ldrh	r2, [r3, #4]
 80076f8:	8afb      	ldrh	r3, [r7, #22]
 80076fa:	4413      	add	r3, r2
 80076fc:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	8aba      	ldrh	r2, [r7, #20]
 8007702:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8007704:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8007706:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	889b      	ldrh	r3, [r3, #4]
 800770c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	889b      	ldrh	r3, [r3, #4]
 8007712:	827b      	strh	r3, [r7, #18]
 8007714:	88bb      	ldrh	r3, [r7, #4]
 8007716:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8007718:	e003      	b.n	8007722 <_tu_fifo_peek+0xaa>
 800771a:	8a3a      	ldrh	r2, [r7, #16]
 800771c:	8a7b      	ldrh	r3, [r7, #18]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	823b      	strh	r3, [r7, #16]
 8007722:	8a7a      	ldrh	r2, [r7, #18]
 8007724:	8a3b      	ldrh	r3, [r7, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	d9f7      	bls.n	800771a <_tu_fifo_peek+0xa2>
  return idx;
 800772a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800772c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800772e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007730:	461a      	mov	r2, r3
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff fe7a 	bl	800742e <_ff_pull>

  return true;
 800773a:	2301      	movs	r3, #1
}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	@ 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	@ 0x30
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	460b      	mov	r3, r1
 8007754:	80fb      	strh	r3, [r7, #6]
 8007756:	4613      	mov	r3, r2
 8007758:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	889b      	ldrh	r3, [r3, #4]
 800775e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007760:	88bb      	ldrh	r3, [r7, #4]
 8007762:	843b      	strh	r3, [r7, #32]
 8007764:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007766:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8007768:	8c3a      	ldrh	r2, [r7, #32]
 800776a:	8bfb      	ldrh	r3, [r7, #30]
 800776c:	429a      	cmp	r2, r3
 800776e:	d304      	bcc.n	800777a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8007770:	8c3a      	ldrh	r2, [r7, #32]
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	e008      	b.n	800778c <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800777a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	8c39      	ldrh	r1, [r7, #32]
 8007782:	8bfb      	ldrh	r3, [r7, #30]
 8007784:	1acb      	subs	r3, r1, r3
 8007786:	b29b      	uxth	r3, r3
 8007788:	4413      	add	r3, r2
 800778a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800778c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800778e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <_tu_fifo_peek_n+0x54>
 8007794:	2300      	movs	r3, #0
 8007796:	e041      	b.n	800781c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	889b      	ldrh	r3, [r3, #4]
 800779c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800779e:	429a      	cmp	r2, r3
 80077a0:	d91b      	bls.n	80077da <_tu_fifo_peek_n+0x96>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	88bb      	ldrh	r3, [r7, #4]
 80077a8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	889b      	ldrh	r3, [r3, #4]
 80077ae:	8afa      	ldrh	r2, [r7, #22]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d305      	bcc.n	80077c0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	889b      	ldrh	r3, [r3, #4]
 80077b8:	8afa      	ldrh	r2, [r7, #22]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	82bb      	strh	r3, [r7, #20]
 80077be:	e004      	b.n	80077ca <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	889a      	ldrh	r2, [r3, #4]
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	4413      	add	r3, r2
 80077c8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	8aba      	ldrh	r2, [r7, #20]
 80077ce:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80077d0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80077d2:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	889b      	ldrh	r3, [r3, #4]
 80077d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80077da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d201      	bcs.n	80077e6 <_tu_fifo_peek_n+0xa2>
 80077e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077e4:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	889b      	ldrh	r3, [r3, #4]
 80077ea:	827b      	strh	r3, [r7, #18]
 80077ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80077ee:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80077f0:	e003      	b.n	80077fa <_tu_fifo_peek_n+0xb6>
 80077f2:	8a3a      	ldrh	r2, [r7, #16]
 80077f4:	8a7b      	ldrh	r3, [r7, #18]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	823b      	strh	r3, [r7, #16]
 80077fa:	8a7a      	ldrh	r2, [r7, #18]
 80077fc:	8a3b      	ldrh	r3, [r7, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d9f7      	bls.n	80077f2 <_tu_fifo_peek_n+0xae>
  return idx;
 8007802:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8007804:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8007806:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	460b      	mov	r3, r1
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff fe29 	bl	800746c <_ff_pull_n>

  return n;
 800781a:	88fb      	ldrh	r3, [r7, #6]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3728      	adds	r7, #40	@ 0x28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b092      	sub	sp, #72	@ 0x48
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	460b      	mov	r3, r1
 8007834:	80fb      	strh	r3, [r7, #6]
 8007836:	4613      	mov	r3, r2
 8007838:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <_tu_fifo_write_n+0x20>
 8007840:	2300      	movs	r3, #0
 8007842:	e0bc      	b.n	80079be <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	891b      	ldrh	r3, [r3, #8]
 8007848:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	895b      	ldrh	r3, [r3, #10]
 800784e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	79db      	ldrb	r3, [r3, #7]
 8007858:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f083 0301 	eor.w	r3, r3, #1
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d036      	beq.n	80078d6 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	889b      	ldrh	r3, [r3, #4]
 800786c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800786e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007870:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007872:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007874:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007876:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007878:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800787a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800787c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800787e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007880:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8007882:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007884:	8c3b      	ldrh	r3, [r7, #32]
 8007886:	429a      	cmp	r2, r3
 8007888:	d304      	bcc.n	8007894 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800788a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800788c:	8c3b      	ldrh	r3, [r7, #32]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	b29b      	uxth	r3, r3
 8007892:	e008      	b.n	80078a6 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800789c:	8c3b      	ldrh	r3, [r7, #32]
 800789e:	1acb      	subs	r3, r1, r3
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	4413      	add	r3, r2
 80078a4:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80078a6:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80078a8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80078aa:	8bfb      	ldrh	r3, [r7, #30]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d904      	bls.n	80078ba <_tu_fifo_write_n+0x96>
 80078b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80078b2:	8bfb      	ldrh	r3, [r7, #30]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	e000      	b.n	80078bc <_tu_fifo_write_n+0x98>
 80078ba:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80078bc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80078c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80078c4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80078c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bf28      	it	cs
 80078ce:	4613      	movcs	r3, r2
 80078d0:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80078d2:	80fb      	strh	r3, [r7, #6]
 80078d4:	e04b      	b.n	800796e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	889b      	ldrh	r3, [r3, #4]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d317      	bcc.n	8007910 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80078e0:	797b      	ldrb	r3, [r7, #5]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10e      	bne.n	8007904 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	8892      	ldrh	r2, [r2, #4]
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	88d2      	ldrh	r2, [r2, #6]
 80078f2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80078f6:	b292      	uxth	r2, r2
 80078f8:	fb02 f303 	mul.w	r3, r2, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	4413      	add	r3, r2
 8007902:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	889b      	ldrh	r3, [r3, #4]
 8007908:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800790a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800790c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800790e:	e02e      	b.n	800796e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	889b      	ldrh	r3, [r3, #4]
 8007914:	83bb      	strh	r3, [r7, #28]
 8007916:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007918:	837b      	strh	r3, [r7, #26]
 800791a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800791c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800791e:	8b7a      	ldrh	r2, [r7, #26]
 8007920:	8b3b      	ldrh	r3, [r7, #24]
 8007922:	429a      	cmp	r2, r3
 8007924:	d304      	bcc.n	8007930 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8007926:	8b7a      	ldrh	r2, [r7, #26]
 8007928:	8b3b      	ldrh	r3, [r7, #24]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	b29b      	uxth	r3, r3
 800792e:	e008      	b.n	8007942 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007930:	8bbb      	ldrh	r3, [r7, #28]
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	8b79      	ldrh	r1, [r7, #26]
 8007938:	8b3b      	ldrh	r3, [r7, #24]
 800793a:	1acb      	subs	r3, r1, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	4413      	add	r3, r2
 8007940:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8007942:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8007944:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	441a      	add	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	429a      	cmp	r2, r3
 8007952:	db0c      	blt.n	800796e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8898      	ldrh	r0, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	889a      	ldrh	r2, [r3, #4]
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	b29a      	uxth	r2, r3
 8007962:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007964:	4619      	mov	r1, r3
 8007966:	f7ff fe61 	bl	800762c <advance_index>
 800796a:	4603      	mov	r3, r0
 800796c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d023      	beq.n	80079bc <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	889b      	ldrh	r3, [r3, #4]
 8007978:	82fb      	strh	r3, [r7, #22]
 800797a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800797c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800797e:	e003      	b.n	8007988 <_tu_fifo_write_n+0x164>
 8007980:	8aba      	ldrh	r2, [r7, #20]
 8007982:	8afb      	ldrh	r3, [r7, #22]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	82bb      	strh	r3, [r7, #20]
 8007988:	8afa      	ldrh	r2, [r7, #22]
 800798a:	8abb      	ldrh	r3, [r7, #20]
 800798c:	429a      	cmp	r2, r3
 800798e:	d9f7      	bls.n	8007980 <_tu_fifo_write_n+0x15c>
  return idx;
 8007990:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007992:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8007994:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	797b      	ldrb	r3, [r7, #5]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	460b      	mov	r3, r1
 800799e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fc66 	bl	8007272 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fe3c 	bl	800762c <advance_index>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80079bc:	88fb      	ldrh	r3, [r7, #6]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3740      	adds	r7, #64	@ 0x40
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	4611      	mov	r1, r2
 80079d2:	461a      	mov	r2, r3
 80079d4:	460b      	mov	r3, r1
 80079d6:	80fb      	strh	r3, [r7, #6]
 80079d8:	4613      	mov	r3, r2
 80079da:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	891b      	ldrh	r3, [r3, #8]
 80079e0:	b298      	uxth	r0, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	895b      	ldrh	r3, [r3, #10]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	88f9      	ldrh	r1, [r7, #6]
 80079ea:	797a      	ldrb	r2, [r7, #5]
 80079ec:	9201      	str	r2, [sp, #4]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4603      	mov	r3, r0
 80079f2:	460a      	mov	r2, r1
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fea4 	bl	8007744 <_tu_fifo_peek_n>
 80079fc:	4603      	mov	r3, r0
 80079fe:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8898      	ldrh	r0, [r3, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	895b      	ldrh	r3, [r3, #10]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7ff fe0d 	bl	800762c <advance_index>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8899      	ldrh	r1, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	891b      	ldrh	r3, [r3, #8]
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	895b      	ldrh	r3, [r3, #10]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8279      	strh	r1, [r7, #18]
 8007a3e:	823a      	strh	r2, [r7, #16]
 8007a40:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8007a42:	8a3a      	ldrh	r2, [r7, #16]
 8007a44:	89fb      	ldrh	r3, [r7, #14]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d304      	bcc.n	8007a54 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8007a4a:	8a3a      	ldrh	r2, [r7, #16]
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	e008      	b.n	8007a66 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007a54:	8a7b      	ldrh	r3, [r7, #18]
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	8a39      	ldrh	r1, [r7, #16]
 8007a5c:	89fb      	ldrh	r3, [r7, #14]
 8007a5e:	1acb      	subs	r3, r1, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	4413      	add	r3, r2
 8007a64:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	8892      	ldrh	r2, [r2, #4]
 8007a6a:	82fb      	strh	r3, [r7, #22]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	82bb      	strh	r3, [r7, #20]
 8007a70:	8afa      	ldrh	r2, [r7, #22]
 8007a72:	8abb      	ldrh	r3, [r7, #20]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	bf28      	it	cs
 8007a78:	4613      	movcs	r3, r2
 8007a7a:	b29b      	uxth	r3, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	891b      	ldrh	r3, [r3, #8]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	895b      	ldrh	r3, [r3, #10]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8899      	ldrh	r1, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	895b      	ldrh	r3, [r3, #10]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	81f9      	strh	r1, [r7, #14]
 8007acc:	81ba      	strh	r2, [r7, #12]
 8007ace:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8007ad0:	89ba      	ldrh	r2, [r7, #12]
 8007ad2:	897b      	ldrh	r3, [r7, #10]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d304      	bcc.n	8007ae2 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8007ad8:	89ba      	ldrh	r2, [r7, #12]
 8007ada:	897b      	ldrh	r3, [r7, #10]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	e008      	b.n	8007af4 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007ae2:	89fb      	ldrh	r3, [r7, #14]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	89b9      	ldrh	r1, [r7, #12]
 8007aea:	897b      	ldrh	r3, [r7, #10]
 8007aec:	1acb      	subs	r3, r1, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	4413      	add	r3, r2
 8007af2:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	8892      	ldrh	r2, [r2, #4]
 8007af8:	4293      	cmp	r3, r2
 8007afa:	bf2c      	ite	cs
 8007afc:	2301      	movcs	r3, #1
 8007afe:	2300      	movcc	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8899      	ldrh	r1, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	891b      	ldrh	r3, [r3, #8]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	895b      	ldrh	r3, [r3, #10]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	82f9      	strh	r1, [r7, #22]
 8007b28:	82ba      	strh	r2, [r7, #20]
 8007b2a:	827b      	strh	r3, [r7, #18]
 8007b2c:	8afb      	ldrh	r3, [r7, #22]
 8007b2e:	823b      	strh	r3, [r7, #16]
 8007b30:	8abb      	ldrh	r3, [r7, #20]
 8007b32:	81fb      	strh	r3, [r7, #14]
 8007b34:	8a7b      	ldrh	r3, [r7, #18]
 8007b36:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8007b38:	89fa      	ldrh	r2, [r7, #14]
 8007b3a:	89bb      	ldrh	r3, [r7, #12]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d304      	bcc.n	8007b4a <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8007b40:	89fa      	ldrh	r2, [r7, #14]
 8007b42:	89bb      	ldrh	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	e008      	b.n	8007b5c <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007b4a:	8a3b      	ldrh	r3, [r7, #16]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	89f9      	ldrh	r1, [r7, #14]
 8007b52:	89bb      	ldrh	r3, [r7, #12]
 8007b54:	1acb      	subs	r3, r1, r3
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4413      	add	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8007b5c:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8007b5e:	8afa      	ldrh	r2, [r7, #22]
 8007b60:	897b      	ldrh	r3, [r7, #10]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d904      	bls.n	8007b70 <tu_fifo_remaining+0x62>
 8007b66:	8afa      	ldrh	r2, [r7, #22]
 8007b68:	897b      	ldrh	r3, [r7, #10]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	e000      	b.n	8007b72 <tu_fifo_remaining+0x64>
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	891b      	ldrh	r3, [r3, #8]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	895b      	ldrh	r3, [r3, #10]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fd6e 	bl	8007678 <_tu_fifo_peek>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8898      	ldrh	r0, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	895b      	ldrh	r3, [r3, #10]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	7bfa      	ldrb	r2, [r7, #15]
 8007bac:	b292      	uxth	r2, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f7ff fd3c 	bl	800762c <advance_index>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fef3 	bl	80079c6 <_tu_fifo_read_n>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8007bf8:	88fa      	ldrh	r2, [r7, #6]
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fee1 	bl	80079c6 <_tu_fifo_read_n>
 8007c04:	4603      	mov	r3, r0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	891b      	ldrh	r3, [r3, #8]
 8007c1c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff ff47 	bl	8007ab2 <tu_fifo_full>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <tu_fifo_write+0x36>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	79db      	ldrb	r3, [r3, #7]
 8007c2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f083 0301 	eor.w	r3, r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <tu_fifo_write+0x36>
  {
    ret = false;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
 8007c42:	e022      	b.n	8007c8a <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	889b      	ldrh	r3, [r3, #4]
 8007c48:	823b      	strh	r3, [r7, #16]
 8007c4a:	8abb      	ldrh	r3, [r7, #20]
 8007c4c:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8007c4e:	e003      	b.n	8007c58 <tu_fifo_write+0x4a>
 8007c50:	89fa      	ldrh	r2, [r7, #14]
 8007c52:	8a3b      	ldrh	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	81fb      	strh	r3, [r7, #14]
 8007c58:	8a3a      	ldrh	r2, [r7, #16]
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d9f7      	bls.n	8007c50 <tu_fifo_write+0x42>
  return idx;
 8007c60:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007c62:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8007c64:	8a7b      	ldrh	r3, [r7, #18]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fae2 	bl	8007234 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	889b      	ldrh	r3, [r3, #4]
 8007c74:	8ab9      	ldrh	r1, [r7, #20]
 8007c76:	2201      	movs	r2, #1
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fcd7 	bl	800762c <advance_index>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	461a      	mov	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	811a      	strh	r2, [r3, #8]

    ret = true;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fdbb 	bl	8007824 <_tu_fifo_write_n>
 8007cae:	4603      	mov	r3, r0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fda9 	bl	8007824 <_tu_fifo_write_n>
 8007cd2:	4603      	mov	r3, r0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8007cf0:	2301      	movs	r3, #1
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	79db      	ldrb	r3, [r3, #7]
 8007d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d101      	bne.n	8007d1e <tu_fifo_set_overwritable+0x20>
    return true;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e006      	b.n	8007d2c <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	79d3      	ldrb	r3, [r2, #7]
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	f361 13c7 	bfi	r3, r1, #7, #1
 8007d28:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007d2a:	2301      	movs	r3, #1
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	6039      	str	r1, [r7, #0]
 8007d42:	71fb      	strb	r3, [r7, #7]
 8007d44:	4613      	mov	r3, r2
 8007d46:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return NULL;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  return NULL;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
}
 8007da4:	bf00      	nop
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8007dae:	b480      	push	{r7}
 8007db0:	af00      	add	r7, sp, #0
}
 8007db2:	bf00      	nop
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8007dd2:	b480      	push	{r7}
 8007dd4:	af00      	add	r7, sp, #0
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	603a      	str	r2, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
 8007dec:	460b      	mov	r3, r1
 8007dee:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8007e08:	2301      	movs	r3, #1
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
	...

08007e18 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <tud_mounted+0x20>)
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	200010e0 	.word	0x200010e0

08007e3c <tud_suspended>:

bool tud_suspended(void) {
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <tud_suspended+0x24>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	2300      	moveq	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200010e0 	.word	0x200010e0

08007e64 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8007e68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea8 <tud_remote_wakeup+0x44>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <tud_remote_wakeup+0x2e>
 8007e76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <tud_remote_wakeup+0x44>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <tud_remote_wakeup+0x2e>
 8007e84:	4b08      	ldr	r3, [pc, #32]	@ (8007ea8 <tud_remote_wakeup+0x44>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <tud_remote_wakeup+0x32>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e005      	b.n	8007ea2 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8007e96:	4b05      	ldr	r3, [pc, #20]	@ (8007eac <tud_remote_wakeup+0x48>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f002 fba4 	bl	800a5e8 <dcd_remote_wakeup>
  return true;
 8007ea0:	2301      	movs	r3, #1
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200010e0 	.word	0x200010e0
 8007eac:	2000012d 	.word	0x2000012d

08007eb0 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <tud_inited+0x1c>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2bff      	cmp	r3, #255	@ 0xff
 8007eba:	bf14      	ite	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	2000012d 	.word	0x2000012d

08007ed0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08c      	sub	sp, #48	@ 0x30
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8007edc:	f7ff ffe8 	bl	8007eb0 <tud_inited>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e09e      	b.n	8008028 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <tud_rhport_init+0x36>
 8007ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8008030 <tud_rhport_init+0x160>)
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d000      	beq.n	8007f02 <tud_rhport_init+0x32>
 8007f00:	be00      	bkpt	0x0000
 8007f02:	2300      	movs	r3, #0
 8007f04:	e090      	b.n	8008028 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8007f06:	222c      	movs	r2, #44	@ 0x2c
 8007f08:	2100      	movs	r1, #0
 8007f0a:	484a      	ldr	r0, [pc, #296]	@ (8008034 <tud_rhport_init+0x164>)
 8007f0c:	f004 f8d5 	bl	800c0ba <memset>
  _usbd_queued_setup = 0;
 8007f10:	4b49      	ldr	r3, [pc, #292]	@ (8008038 <tud_rhport_init+0x168>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	4b49      	ldr	r3, [pc, #292]	@ (800803c <tud_rhport_init+0x16c>)
 8007f18:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8007f1a:	bf00      	nop
 8007f1c:	4b48      	ldr	r3, [pc, #288]	@ (8008040 <tud_rhport_init+0x170>)
 8007f1e:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fed9 	bl	8007cdc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8007f2a:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8007f2c:	4a45      	ldr	r2, [pc, #276]	@ (8008044 <tud_rhport_init+0x174>)
 8007f2e:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8007f30:	4b44      	ldr	r3, [pc, #272]	@ (8008044 <tud_rhport_init+0x174>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <tud_rhport_init+0x7e>
 8007f38:	4b3d      	ldr	r3, [pc, #244]	@ (8008030 <tud_rhport_init+0x160>)
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d000      	beq.n	8007f4a <tud_rhport_init+0x7a>
 8007f48:	be00      	bkpt	0x0000
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e06c      	b.n	8008028 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8007f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008048 <tud_rhport_init+0x178>)
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8007f54:	483d      	ldr	r0, [pc, #244]	@ (800804c <tud_rhport_init+0x17c>)
 8007f56:	f3af 8000 	nop.w
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8008050 <tud_rhport_init+0x180>)
 8007f5e:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007f66:	e03a      	b.n	8007fde <tud_rhport_init+0x10e>
 8007f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f6c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007f72:	4b36      	ldr	r3, [pc, #216]	@ (800804c <tud_rhport_init+0x17c>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	7bfa      	ldrb	r2, [r7, #15]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d206      	bcs.n	8007f8a <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8007f7c:	4b34      	ldr	r3, [pc, #208]	@ (8008050 <tud_rhport_init+0x180>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	015b      	lsls	r3, r3, #5
 8007f84:	4413      	add	r3, r2
 8007f86:	60bb      	str	r3, [r7, #8]
 8007f88:	e00d      	b.n	8007fa6 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007f8a:	4b30      	ldr	r3, [pc, #192]	@ (800804c <tud_rhport_init+0x17c>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	db07      	blt.n	8007fa6 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4a2c      	ldr	r2, [pc, #176]	@ (800804c <tud_rhport_init+0x17c>)
 8007f9a:	7812      	ldrb	r2, [r2, #0]
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	015b      	lsls	r3, r3, #5
 8007fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8008054 <tud_rhport_init+0x184>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	60bb      	str	r3, [r7, #8]
  return driver;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <tud_rhport_init+0xe8>
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <tud_rhport_init+0xfe>
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008030 <tud_rhport_init+0x160>)
 8007fba:	623b      	str	r3, [r7, #32]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d000      	beq.n	8007fca <tud_rhport_init+0xfa>
 8007fc8:	be00      	bkpt	0x0000
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e02c      	b.n	8008028 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007fd8:	3301      	adds	r3, #1
 8007fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007fde:	4b1b      	ldr	r3, [pc, #108]	@ (800804c <tud_rhport_init+0x17c>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	dabd      	bge.n	8007f68 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8007fec:	4a1a      	ldr	r2, [pc, #104]	@ (8008058 <tud_rhport_init+0x188>)
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f002 f9cc 	bl	800a394 <dcd_init>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f083 0301 	eor.w	r3, r3, #1
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <tud_rhport_init+0x14e>
 8008008:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <tud_rhport_init+0x160>)
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d000      	beq.n	800801a <tud_rhport_init+0x14a>
 8008018:	be00      	bkpt	0x0000
 800801a:	2300      	movs	r3, #0
 800801c:	e004      	b.n	8008028 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	4618      	mov	r0, r3
 8008022:	f002 fa55 	bl	800a4d0 <dcd_int_enable>

  return true;
 8008026:	2301      	movs	r3, #1
}
 8008028:	4618      	mov	r0, r3
 800802a:	3730      	adds	r7, #48	@ 0x30
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	e000edf0 	.word	0xe000edf0
 8008034:	200010e0 	.word	0x200010e0
 8008038:	2000110c 	.word	0x2000110c
 800803c:	20000130 	.word	0x20000130
 8008040:	20000134 	.word	0x20000134
 8008044:	200011d8 	.word	0x200011d8
 8008048:	00000000 	.word	0x00000000
 800804c:	20001114 	.word	0x20001114
 8008050:	20001110 	.word	0x20001110
 8008054:	0800dca4 	.word	0x0800dca4
 8008058:	2000012d 	.word	0x2000012d

0800805c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]
 800806a:	e034      	b.n	80080d6 <configuration_reset+0x7a>
 800806c:	7ffb      	ldrb	r3, [r7, #31]
 800806e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008074:	4b25      	ldr	r3, [pc, #148]	@ (800810c <configuration_reset+0xb0>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	7cfa      	ldrb	r2, [r7, #19]
 800807a:	429a      	cmp	r2, r3
 800807c:	d206      	bcs.n	800808c <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 800807e:	4b24      	ldr	r3, [pc, #144]	@ (8008110 <configuration_reset+0xb4>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	7cfb      	ldrb	r3, [r7, #19]
 8008084:	015b      	lsls	r3, r3, #5
 8008086:	4413      	add	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e00d      	b.n	80080a8 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800808c:	4b1f      	ldr	r3, [pc, #124]	@ (800810c <configuration_reset+0xb0>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	7cfb      	ldrb	r3, [r7, #19]
 8008094:	429a      	cmp	r2, r3
 8008096:	db07      	blt.n	80080a8 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008098:	7cfb      	ldrb	r3, [r7, #19]
 800809a:	4a1c      	ldr	r2, [pc, #112]	@ (800810c <configuration_reset+0xb0>)
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	015b      	lsls	r3, r3, #5
 80080a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008114 <configuration_reset+0xb8>)
 80080a4:	4413      	add	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  return driver;
 80080a8:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80080aa:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <configuration_reset+0x6a>
 80080b2:	4b19      	ldr	r3, [pc, #100]	@ (8008118 <configuration_reset+0xbc>)
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01f      	beq.n	8008102 <configuration_reset+0xa6>
 80080c2:	be00      	bkpt	0x0000
 80080c4:	e01d      	b.n	8008102 <configuration_reset+0xa6>
    driver->reset(rhport);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	79fa      	ldrb	r2, [r7, #7]
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80080d0:	7ffb      	ldrb	r3, [r7, #31]
 80080d2:	3301      	adds	r3, #1
 80080d4:	77fb      	strb	r3, [r7, #31]
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <configuration_reset+0xb0>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	7ffb      	ldrb	r3, [r7, #31]
 80080de:	429a      	cmp	r2, r3
 80080e0:	dac4      	bge.n	800806c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80080e2:	222c      	movs	r2, #44	@ 0x2c
 80080e4:	2100      	movs	r1, #0
 80080e6:	480d      	ldr	r0, [pc, #52]	@ (800811c <configuration_reset+0xc0>)
 80080e8:	f003 ffe7 	bl	800c0ba <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80080ec:	2210      	movs	r2, #16
 80080ee:	21ff      	movs	r1, #255	@ 0xff
 80080f0:	480b      	ldr	r0, [pc, #44]	@ (8008120 <configuration_reset+0xc4>)
 80080f2:	f003 ffe2 	bl	800c0ba <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80080f6:	220c      	movs	r2, #12
 80080f8:	21ff      	movs	r1, #255	@ 0xff
 80080fa:	480a      	ldr	r0, [pc, #40]	@ (8008124 <configuration_reset+0xc8>)
 80080fc:	f003 ffdd 	bl	800c0ba <memset>
 8008100:	e000      	b.n	8008104 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008102:	bf00      	nop
}
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20001114 	.word	0x20001114
 8008110:	20001110 	.word	0x20001110
 8008114:	0800dca4 	.word	0x0800dca4
 8008118:	e000edf0 	.word	0xe000edf0
 800811c:	200010e0 	.word	0x200010e0
 8008120:	200010e4 	.word	0x200010e4
 8008124:	200010f4 	.word	0x200010f4

08008128 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff ff91 	bl	800805c <configuration_reset>
  usbd_control_reset();
 800813a:	f001 fc37 	bl	80099ac <usbd_control_reset>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b093      	sub	sp, #76	@ 0x4c
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008154:	f7ff feac 	bl	8007eb0 <tud_inited>
 8008158:	4603      	mov	r3, r0
 800815a:	f083 0301 	eor.w	r3, r3, #1
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 8189 	bne.w	8008478 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008166:	4bb1      	ldr	r3, [pc, #708]	@ (800842c <tud_task_ext+0x2e4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	633b      	str	r3, [r7, #48]	@ 0x30
 800816c:	f107 030c 	add.w	r3, r7, #12
 8008170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2000      	movs	r0, #0
 800817c:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	3304      	adds	r3, #4
 8008182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fcfa 	bl	8007b7e <tu_fifo_read>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2001      	movs	r0, #1
 8008196:	4798      	blx	r3

  return success;
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800819c:	f083 0301 	eor.w	r3, r3, #1
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 816a 	bne.w	800847c <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80081a8:	7b7b      	ldrb	r3, [r7, #13]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b07      	cmp	r3, #7
 80081ae:	f200 814b 	bhi.w	8008448 <tud_task_ext+0x300>
 80081b2:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <tud_task_ext+0x70>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081e9 	.word	0x080081e9
 80081c0:	080083fd 	.word	0x080083fd
 80081c4:	080083af 	.word	0x080083af
 80081c8:	080083d9 	.word	0x080083d9
 80081cc:	080081f7 	.word	0x080081f7
 80081d0:	080082a7 	.word	0x080082a7
 80081d4:	080083ed 	.word	0x080083ed
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80081d8:	7b3b      	ldrb	r3, [r7, #12]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff ffa4 	bl	8008128 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80081e0:	7c3a      	ldrb	r2, [r7, #16]
 80081e2:	4b93      	ldr	r3, [pc, #588]	@ (8008430 <tud_task_ext+0x2e8>)
 80081e4:	709a      	strb	r2, [r3, #2]
        break;
 80081e6:	e146      	b.n	8008476 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80081e8:	7b3b      	ldrb	r3, [r7, #12]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ff9c 	bl	8008128 <usbd_reset>
        tud_umount_cb();
 80081f0:	f7ff fddd 	bl	8007dae <tud_umount_cb>
        break;
 80081f4:	e13f      	b.n	8008476 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80081f6:	4b8f      	ldr	r3, [pc, #572]	@ (8008434 <tud_task_ext+0x2ec>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <tud_task_ext+0xce>
 8008200:	4b8d      	ldr	r3, [pc, #564]	@ (8008438 <tud_task_ext+0x2f0>)
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8137 	beq.w	8008480 <tud_task_ext+0x338>
 8008212:	be00      	bkpt	0x0000
 8008214:	e134      	b.n	8008480 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008216:	4b87      	ldr	r3, [pc, #540]	@ (8008434 <tud_task_ext+0x2ec>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	4b84      	ldr	r3, [pc, #528]	@ (8008434 <tud_task_ext+0x2ec>)
 8008222:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008224:	4b83      	ldr	r3, [pc, #524]	@ (8008434 <tud_task_ext+0x2ec>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 8116 	bne.w	800845c <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008230:	4a7f      	ldr	r2, [pc, #508]	@ (8008430 <tud_task_ext+0x2e8>)
 8008232:	7813      	ldrb	r3, [r2, #0]
 8008234:	f043 0301 	orr.w	r3, r3, #1
 8008238:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800823a:	4a7d      	ldr	r2, [pc, #500]	@ (8008430 <tud_task_ext+0x2e8>)
 800823c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008248:	4a79      	ldr	r2, [pc, #484]	@ (8008430 <tud_task_ext+0x2e8>)
 800824a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800824e:	f023 0304 	bic.w	r3, r3, #4
 8008252:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8008256:	4a76      	ldr	r2, [pc, #472]	@ (8008430 <tud_task_ext+0x2e8>)
 8008258:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8008264:	4a72      	ldr	r2, [pc, #456]	@ (8008430 <tud_task_ext+0x2e8>)
 8008266:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800826a:	f023 0304 	bic.w	r3, r3, #4
 800826e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8008272:	7b3a      	ldrb	r2, [r7, #12]
 8008274:	f107 030c 	add.w	r3, r7, #12
 8008278:	3304      	adds	r3, #4
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f000 f91f 	bl	80084c0 <process_control_request>
 8008282:	4603      	mov	r3, r0
 8008284:	f083 0301 	eor.w	r3, r3, #1
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80e8 	beq.w	8008460 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008290:	7b3b      	ldrb	r3, [r7, #12]
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f002 fb7b 	bl	800a990 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800829a:	7b3b      	ldrb	r3, [r7, #12]
 800829c:	2180      	movs	r1, #128	@ 0x80
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 fb76 	bl	800a990 <dcd_edpt_stall>
        }
        break;
 80082a4:	e0dc      	b.n	8008460 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80082a6:	7c3b      	ldrb	r3, [r7, #16]
 80082a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80082ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80082b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80082b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082bc:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80082be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80082c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80082c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80082ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082ce:	09db      	lsrs	r3, r3, #7
 80082d0:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80082d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80082d6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80082da:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80082de:	4954      	ldr	r1, [pc, #336]	@ (8008430 <tud_task_ext+0x2e8>)
 80082e0:	0052      	lsls	r2, r2, #1
 80082e2:	440a      	add	r2, r1
 80082e4:	4413      	add	r3, r2
 80082e6:	f103 0220 	add.w	r2, r3, #32
 80082ea:	7813      	ldrb	r3, [r2, #0]
 80082ec:	f023 0301 	bic.w	r3, r3, #1
 80082f0:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80082f2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80082f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80082fa:	494d      	ldr	r1, [pc, #308]	@ (8008430 <tud_task_ext+0x2e8>)
 80082fc:	0052      	lsls	r2, r2, #1
 80082fe:	440a      	add	r2, r1
 8008300:	4413      	add	r3, r2
 8008302:	f103 0220 	add.w	r2, r3, #32
 8008306:	7813      	ldrb	r3, [r2, #0]
 8008308:	f023 0304 	bic.w	r3, r3, #4
 800830c:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 800830e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008312:	2b00      	cmp	r3, #0
 8008314:	d107      	bne.n	8008326 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8008316:	7b38      	ldrb	r0, [r7, #12]
 8008318:	7c7a      	ldrb	r2, [r7, #17]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008320:	f001 fb7a 	bl	8009a18 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8008324:	e0a7      	b.n	8008476 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008326:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800832a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800832e:	4940      	ldr	r1, [pc, #256]	@ (8008430 <tud_task_ext+0x2e8>)
 8008330:	0052      	lsls	r2, r2, #1
 8008332:	440a      	add	r2, r1
 8008334:	4413      	add	r3, r2
 8008336:	3314      	adds	r3, #20
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8008342:	4b3e      	ldr	r3, [pc, #248]	@ (800843c <tud_task_ext+0x2f4>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800834a:	429a      	cmp	r2, r3
 800834c:	d207      	bcs.n	800835e <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 800834e:	4b3c      	ldr	r3, [pc, #240]	@ (8008440 <tud_task_ext+0x2f8>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008356:	015b      	lsls	r3, r3, #5
 8008358:	4413      	add	r3, r2
 800835a:	623b      	str	r3, [r7, #32]
 800835c:	e00f      	b.n	800837e <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800835e:	4b37      	ldr	r3, [pc, #220]	@ (800843c <tud_task_ext+0x2f4>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008368:	429a      	cmp	r2, r3
 800836a:	db08      	blt.n	800837e <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800836c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008370:	4a32      	ldr	r2, [pc, #200]	@ (800843c <tud_task_ext+0x2f4>)
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	015b      	lsls	r3, r3, #5
 8008378:	4a32      	ldr	r2, [pc, #200]	@ (8008444 <tud_task_ext+0x2fc>)
 800837a:	4413      	add	r3, r2
 800837c:	623b      	str	r3, [r7, #32]
  return driver;
 800837e:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008380:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8008382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <tud_task_ext+0x254>
 8008388:	4b2b      	ldr	r3, [pc, #172]	@ (8008438 <tud_task_ext+0x2f0>)
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800838c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d075      	beq.n	8008484 <tud_task_ext+0x33c>
 8008398:	be00      	bkpt	0x0000
 800839a:	e073      	b.n	8008484 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800839c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800839e:	699c      	ldr	r4, [r3, #24]
 80083a0:	7b38      	ldrb	r0, [r7, #12]
 80083a2:	7c7a      	ldrb	r2, [r7, #17]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80083aa:	47a0      	blx	r4
        break;
 80083ac:	e063      	b.n	8008476 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80083ae:	4b20      	ldr	r3, [pc, #128]	@ (8008430 <tud_task_ext+0x2e8>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d053      	beq.n	8008464 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80083bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <tud_task_ext+0x2e8>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bf14      	ite	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	2300      	moveq	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fcf3 	bl	8007dbc <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80083d6:	e045      	b.n	8008464 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80083d8:	4b15      	ldr	r3, [pc, #84]	@ (8008430 <tud_task_ext+0x2e8>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d040      	beq.n	8008468 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80083e6:	f7ff fcf4 	bl	8007dd2 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80083ea:	e03d      	b.n	8008468 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d03c      	beq.n	800846c <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
        }
        break;
 80083fa:	e037      	b.n	800846c <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80083fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <tud_task_ext+0x2e8>)
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	2300      	movs	r3, #0
 8008406:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008408:	7efb      	ldrb	r3, [r7, #27]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf14      	ite	ne
 8008418:	2301      	movne	r3, #1
 800841a:	2300      	moveq	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d026      	beq.n	8008470 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fc95 	bl	8007d54 <tud_sof_cb>
        }
      break;
 800842a:	e021      	b.n	8008470 <tud_task_ext+0x328>
 800842c:	200011d8 	.word	0x200011d8
 8008430:	200010e0 	.word	0x200010e0
 8008434:	2000110c 	.word	0x2000110c
 8008438:	e000edf0 	.word	0xe000edf0
 800843c:	20001114 	.word	0x20001114
 8008440:	20001110 	.word	0x20001110
 8008444:	0800dca4 	.word	0x0800dca4

      default:
        TU_BREAKPOINT();
 8008448:	4b10      	ldr	r3, [pc, #64]	@ (800848c <tud_task_ext+0x344>)
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00d      	beq.n	8008474 <tud_task_ext+0x32c>
 8008458:	be00      	bkpt	0x0000
        break;
 800845a:	e00b      	b.n	8008474 <tud_task_ext+0x32c>
          break;
 800845c:	bf00      	nop
 800845e:	e682      	b.n	8008166 <tud_task_ext+0x1e>
        break;
 8008460:	bf00      	nop
 8008462:	e680      	b.n	8008166 <tud_task_ext+0x1e>
        break;
 8008464:	bf00      	nop
 8008466:	e67e      	b.n	8008166 <tud_task_ext+0x1e>
        break;
 8008468:	bf00      	nop
 800846a:	e67c      	b.n	8008166 <tud_task_ext+0x1e>
        break;
 800846c:	bf00      	nop
 800846e:	e67a      	b.n	8008166 <tud_task_ext+0x1e>
      break;
 8008470:	bf00      	nop
 8008472:	e678      	b.n	8008166 <tud_task_ext+0x1e>
        break;
 8008474:	bf00      	nop
  while (1) {
 8008476:	e676      	b.n	8008166 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008478:	bf00      	nop
 800847a:	e004      	b.n	8008486 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800847c:	bf00      	nop
 800847e:	e002      	b.n	8008486 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8008484:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8008486:	374c      	adds	r7, #76	@ 0x4c
 8008488:	46bd      	mov	sp, r7
 800848a:	bd90      	pop	{r4, r7, pc}
 800848c:	e000edf0 	.word	0xe000edf0

08008490 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fa8e 	bl	80099c4 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	7bf8      	ldrb	r0, [r7, #15]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	2101      	movs	r1, #1
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b09a      	sub	sp, #104	@ 0x68
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80084cc:	2000      	movs	r0, #0
 80084ce:	f001 fa79 	bl	80099c4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b60      	cmp	r3, #96	@ 0x60
 80084de:	d10a      	bne.n	80084f6 <process_control_request+0x36>
 80084e0:	4ba5      	ldr	r3, [pc, #660]	@ (8008778 <process_control_request+0x2b8>)
 80084e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d000      	beq.n	80084f2 <process_control_request+0x32>
 80084f0:	be00      	bkpt	0x0000
 80084f2:	2300      	movs	r3, #0
 80084f4:	e2bb      	b.n	8008a6e <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b40      	cmp	r3, #64	@ 0x40
 8008502:	d10a      	bne.n	800851a <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8008504:	489d      	ldr	r0, [pc, #628]	@ (800877c <process_control_request+0x2bc>)
 8008506:	f001 fa5d 	bl	80099c4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	2101      	movs	r1, #1
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fc65 	bl	8007de0 <tud_vendor_control_xfer_cb>
 8008516:	4603      	mov	r3, r0
 8008518:	e2a9      	b.n	8008a6e <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	f000 81ca 	beq.w	80088be <process_control_request+0x3fe>
 800852a:	2b02      	cmp	r3, #2
 800852c:	f300 8292 	bgt.w	8008a54 <process_control_request+0x594>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <process_control_request+0x7c>
 8008534:	2b01      	cmp	r3, #1
 8008536:	f000 8151 	beq.w	80087dc <process_control_request+0x31c>
 800853a:	e28b      	b.n	8008a54 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b20      	cmp	r3, #32
 8008548:	d143      	bne.n	80085d2 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	889b      	ldrh	r3, [r3, #4]
 800854e:	b29b      	uxth	r3, r3
 8008550:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008552:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800855a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d901      	bls.n	8008566 <process_control_request+0xa6>
 8008562:	2300      	movs	r3, #0
 8008564:	e283      	b.n	8008a6e <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8008566:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800856a:	4a85      	ldr	r2, [pc, #532]	@ (8008780 <process_control_request+0x2c0>)
 800856c:	4413      	add	r3, r2
 800856e:	791b      	ldrb	r3, [r3, #4]
 8008570:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8008578:	4b82      	ldr	r3, [pc, #520]	@ (8008784 <process_control_request+0x2c4>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8008580:	429a      	cmp	r2, r3
 8008582:	d207      	bcs.n	8008594 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8008584:	4b80      	ldr	r3, [pc, #512]	@ (8008788 <process_control_request+0x2c8>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800858c:	015b      	lsls	r3, r3, #5
 800858e:	4413      	add	r3, r2
 8008590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008592:	e00f      	b.n	80085b4 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008594:	4b7b      	ldr	r3, [pc, #492]	@ (8008784 <process_control_request+0x2c4>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800859e:	429a      	cmp	r2, r3
 80085a0:	db08      	blt.n	80085b4 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80085a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80085a6:	4a77      	ldr	r2, [pc, #476]	@ (8008784 <process_control_request+0x2c4>)
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	015b      	lsls	r3, r3, #5
 80085ae:	4a77      	ldr	r2, [pc, #476]	@ (800878c <process_control_request+0x2cc>)
 80085b0:	4413      	add	r3, r2
 80085b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <process_control_request+0x102>
 80085be:	2300      	movs	r3, #0
 80085c0:	e255      	b.n	8008a6e <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff61 	bl	8008490 <invoke_class_control>
 80085ce:	4603      	mov	r3, r0
 80085d0:	e24d      	b.n	8008a6e <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80085e0:	4b65      	ldr	r3, [pc, #404]	@ (8008778 <process_control_request+0x2b8>)
 80085e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80085e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d000      	beq.n	80085f2 <process_control_request+0x132>
 80085f0:	be00      	bkpt	0x0000
        return false;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e23b      	b.n	8008a6e <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	2b09      	cmp	r3, #9
 80085fc:	f200 80e1 	bhi.w	80087c2 <process_control_request+0x302>
 8008600:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <process_control_request+0x148>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	08008791 	.word	0x08008791
 800860c:	08008755 	.word	0x08008755
 8008610:	080087c3 	.word	0x080087c3
 8008614:	0800872f 	.word	0x0800872f
 8008618:	080087c3 	.word	0x080087c3
 800861c:	08008631 	.word	0x08008631
 8008620:	08008715 	.word	0x08008715
 8008624:	080087c3 	.word	0x080087c3
 8008628:	08008655 	.word	0x08008655
 800862c:	0800866d 	.word	0x0800866d
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8008630:	6838      	ldr	r0, [r7, #0]
 8008632:	f001 f9d7 	bl	80099e4 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	b29b      	uxth	r3, r3
 800863c:	b2da      	uxtb	r2, r3
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f001 ff94 	bl	800a570 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8008648:	4a4d      	ldr	r2, [pc, #308]	@ (8008780 <process_control_request+0x2c0>)
 800864a:	7813      	ldrb	r3, [r2, #0]
 800864c:	f043 0302 	orr.w	r3, r3, #2
 8008650:	7013      	strb	r3, [r2, #0]
        break;
 8008652:	e0c2      	b.n	80087da <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8008654:	4b4a      	ldr	r3, [pc, #296]	@ (8008780 <process_control_request+0x2c0>)
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800865c:	f107 0213 	add.w	r2, r7, #19
 8008660:	79f8      	ldrb	r0, [r7, #7]
 8008662:	2301      	movs	r3, #1
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	f001 f931 	bl	80098cc <tud_control_xfer>
        }
        break;
 800866a:	e0b6      	b.n	80087da <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	885b      	ldrh	r3, [r3, #2]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8008676:	4b42      	ldr	r3, [pc, #264]	@ (8008780 <process_control_request+0x2c0>)
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008680:	429a      	cmp	r2, r3
 8008682:	d041      	beq.n	8008708 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8008684:	4b3e      	ldr	r3, [pc, #248]	@ (8008780 <process_control_request+0x2c0>)
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d014      	beq.n	80086b8 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f002 f832 	bl	800a6fc <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	4618      	mov	r0, r3
 800869c:	f002 f896 	bl	800a7cc <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80086a0:	4b37      	ldr	r3, [pc, #220]	@ (8008780 <process_control_request+0x2c0>)
 80086a2:	789b      	ldrb	r3, [r3, #2]
 80086a4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fcd6 	bl	800805c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80086b0:	4a33      	ldr	r2, [pc, #204]	@ (8008780 <process_control_request+0x2c0>)
 80086b2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80086b6:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80086b8:	4a31      	ldr	r2, [pc, #196]	@ (8008780 <process_control_request+0x2c0>)
 80086ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086be:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80086c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01d      	beq.n	8008704 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80086c8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f9d5 	bl	8008a80 <process_set_config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f083 0301 	eor.w	r3, r3, #1
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00d      	beq.n	80086fe <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80086e2:	4b25      	ldr	r3, [pc, #148]	@ (8008778 <process_control_request+0x2b8>)
 80086e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d000      	beq.n	80086f4 <process_control_request+0x234>
 80086f2:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80086f4:	4b22      	ldr	r3, [pc, #136]	@ (8008780 <process_control_request+0x2c0>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	705a      	strb	r2, [r3, #1]
                return false;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e1b7      	b.n	8008a6e <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80086fe:	f7ff fb4f 	bl	8007da0 <tud_mount_cb>
 8008702:	e001      	b.n	8008708 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8008704:	f7ff fb53 	bl	8007dae <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f86b 	bl	80097e8 <tud_control_status>
        }
        break;
 8008712:	e062      	b.n	80087da <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fae5 	bl	8008ce8 <process_get_descriptor>
 800871e:	4603      	mov	r3, r0
 8008720:	f083 0301 	eor.w	r3, r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d056      	beq.n	80087d8 <process_control_request+0x318>
 800872a:	2300      	movs	r3, #0
 800872c:	e19f      	b.n	8008a6e <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	885b      	ldrh	r3, [r3, #2]
 8008732:	b29b      	uxth	r3, r3
 8008734:	2b01      	cmp	r3, #1
 8008736:	d10b      	bne.n	8008750 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8008738:	4a11      	ldr	r2, [pc, #68]	@ (8008780 <process_control_request+0x2c0>)
 800873a:	7813      	ldrb	r3, [r2, #0]
 800873c:	f043 0308 	orr.w	r3, r3, #8
 8008740:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f001 f84e 	bl	80097e8 <tud_control_status>
            break;
 800874c:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800874e:	e044      	b.n	80087da <process_control_request+0x31a>
            default: return false;
 8008750:	2300      	movs	r3, #0
 8008752:	e18c      	b.n	8008a6e <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	885b      	ldrh	r3, [r3, #2]
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	d001      	beq.n	8008762 <process_control_request+0x2a2>
 800875e:	2300      	movs	r3, #0
 8008760:	e185      	b.n	8008a6e <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8008762:	4a07      	ldr	r2, [pc, #28]	@ (8008780 <process_control_request+0x2c0>)
 8008764:	7813      	ldrb	r3, [r2, #0]
 8008766:	f023 0308 	bic.w	r3, r3, #8
 800876a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f001 f839 	bl	80097e8 <tud_control_status>
        break;
 8008776:	e030      	b.n	80087da <process_control_request+0x31a>
 8008778:	e000edf0 	.word	0xe000edf0
 800877c:	08007de1 	.word	0x08007de1
 8008780:	200010e0 	.word	0x200010e0
 8008784:	20001114 	.word	0x20001114
 8008788:	20001110 	.word	0x20001110
 800878c:	0800dca4 	.word	0x0800dca4

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8008790:	4b94      	ldr	r3, [pc, #592]	@ (80089e4 <process_control_request+0x524>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	4b91      	ldr	r3, [pc, #580]	@ (80089e4 <process_control_request+0x524>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	089b      	lsrs	r3, r3, #2
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80087b2:	f107 0210 	add.w	r2, r7, #16
 80087b6:	79f8      	ldrb	r0, [r7, #7]
 80087b8:	2302      	movs	r3, #2
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f001 f886 	bl	80098cc <tud_control_xfer>
          break;
 80087c0:	e00b      	b.n	80087da <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80087c2:	4b89      	ldr	r3, [pc, #548]	@ (80089e8 <process_control_request+0x528>)
 80087c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80087c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d000      	beq.n	80087d4 <process_control_request+0x314>
 80087d2:	be00      	bkpt	0x0000
 80087d4:	2300      	movs	r3, #0
 80087d6:	e14a      	b.n	8008a6e <process_control_request+0x5ae>
        break;
 80087d8:	bf00      	nop
      }
    break;
 80087da:	e147      	b.n	8008a6c <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	889b      	ldrh	r3, [r3, #4]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80087e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80087ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087f0:	2b0f      	cmp	r3, #15
 80087f2:	d901      	bls.n	80087f8 <process_control_request+0x338>
 80087f4:	2300      	movs	r3, #0
 80087f6:	e13a      	b.n	8008a6e <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80087f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087fc:	4a79      	ldr	r2, [pc, #484]	@ (80089e4 <process_control_request+0x524>)
 80087fe:	4413      	add	r3, r2
 8008800:	791b      	ldrb	r3, [r3, #4]
 8008802:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800880a:	4b78      	ldr	r3, [pc, #480]	@ (80089ec <process_control_request+0x52c>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8008812:	429a      	cmp	r2, r3
 8008814:	d207      	bcs.n	8008826 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8008816:	4b76      	ldr	r3, [pc, #472]	@ (80089f0 <process_control_request+0x530>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800881e:	015b      	lsls	r3, r3, #5
 8008820:	4413      	add	r3, r2
 8008822:	623b      	str	r3, [r7, #32]
 8008824:	e00f      	b.n	8008846 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008826:	4b71      	ldr	r3, [pc, #452]	@ (80089ec <process_control_request+0x52c>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008830:	429a      	cmp	r2, r3
 8008832:	db08      	blt.n	8008846 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008834:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008838:	4a6c      	ldr	r2, [pc, #432]	@ (80089ec <process_control_request+0x52c>)
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	015b      	lsls	r3, r3, #5
 8008840:	4a6c      	ldr	r2, [pc, #432]	@ (80089f4 <process_control_request+0x534>)
 8008842:	4413      	add	r3, r2
 8008844:	623b      	str	r3, [r7, #32]
  return driver;
 8008846:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8008848:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800884a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <process_control_request+0x394>
 8008850:	2300      	movs	r3, #0
 8008852:	e10c      	b.n	8008a6e <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fe18 	bl	8008490 <invoke_class_control>
 8008860:	4603      	mov	r3, r0
 8008862:	f083 0301 	eor.w	r3, r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80fe 	beq.w	8008a6a <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <process_control_request+0x3c0>
 800887c:	2300      	movs	r3, #0
 800887e:	e0f6      	b.n	8008a6e <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	3b0a      	subs	r3, #10
 8008886:	2b01      	cmp	r3, #1
 8008888:	d816      	bhi.n	80088b8 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800888a:	2000      	movs	r0, #0
 800888c:	f001 f89a 	bl	80099c4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	2b0a      	cmp	r3, #10
 8008896:	d109      	bne.n	80088ac <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800889c:	f107 020f 	add.w	r2, r7, #15
 80088a0:	79f8      	ldrb	r0, [r7, #7]
 80088a2:	2301      	movs	r3, #1
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	f001 f811 	bl	80098cc <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80088aa:	e007      	b.n	80088bc <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 ff99 	bl	80097e8 <tud_control_status>
          break;
 80088b6:	e001      	b.n	80088bc <process_control_request+0x3fc>

          default: return false;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e0d8      	b.n	8008a6e <process_control_request+0x5ae>
        }
      }
      break;
 80088bc:	e0d5      	b.n	8008a6a <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	889b      	ldrh	r3, [r3, #4]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	83bb      	strh	r3, [r7, #28]
 80088c6:	8bbb      	ldrh	r3, [r7, #28]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80088ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088d2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80088d4:	7fbb      	ldrb	r3, [r7, #30]
 80088d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088da:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80088dc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80088e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088e4:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80088e6:	7ffb      	ldrb	r3, [r7, #31]
 80088e8:	09db      	lsrs	r3, r3, #7
 80088ea:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80088ec:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80088f0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80088f4:	2b05      	cmp	r3, #5
 80088f6:	d90a      	bls.n	800890e <process_control_request+0x44e>
 80088f8:	4b3b      	ldr	r3, [pc, #236]	@ (80089e8 <process_control_request+0x528>)
 80088fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d000      	beq.n	800890a <process_control_request+0x44a>
 8008908:	be00      	bkpt	0x0000
 800890a:	2300      	movs	r3, #0
 800890c:	e0af      	b.n	8008a6e <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800890e:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8008912:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8008916:	4933      	ldr	r1, [pc, #204]	@ (80089e4 <process_control_request+0x524>)
 8008918:	0052      	lsls	r2, r2, #1
 800891a:	440a      	add	r2, r1
 800891c:	4413      	add	r3, r2
 800891e:	3314      	adds	r3, #20
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8008928:	4b30      	ldr	r3, [pc, #192]	@ (80089ec <process_control_request+0x52c>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	7efa      	ldrb	r2, [r7, #27]
 800892e:	429a      	cmp	r2, r3
 8008930:	d206      	bcs.n	8008940 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8008932:	4b2f      	ldr	r3, [pc, #188]	@ (80089f0 <process_control_request+0x530>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	7efb      	ldrb	r3, [r7, #27]
 8008938:	015b      	lsls	r3, r3, #5
 800893a:	4413      	add	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	e00d      	b.n	800895c <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008940:	4b2a      	ldr	r3, [pc, #168]	@ (80089ec <process_control_request+0x52c>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	7efb      	ldrb	r3, [r7, #27]
 8008948:	429a      	cmp	r2, r3
 800894a:	db07      	blt.n	800895c <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800894c:	7efb      	ldrb	r3, [r7, #27]
 800894e:	4a27      	ldr	r2, [pc, #156]	@ (80089ec <process_control_request+0x52c>)
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	015b      	lsls	r3, r3, #5
 8008956:	4a27      	ldr	r2, [pc, #156]	@ (80089f4 <process_control_request+0x534>)
 8008958:	4413      	add	r3, r2
 800895a:	617b      	str	r3, [r7, #20]
  return driver;
 800895c:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800895e:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 800896e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <process_control_request+0x4b8>
 8008974:	2300      	movs	r3, #0
 8008976:	e07a      	b.n	8008a6e <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fd86 	bl	8008490 <invoke_class_control>
 8008984:	4603      	mov	r3, r0
 8008986:	e072      	b.n	8008a6e <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d017      	beq.n	80089c0 <process_control_request+0x500>
 8008990:	2b03      	cmp	r3, #3
 8008992:	dc52      	bgt.n	8008a3a <process_control_request+0x57a>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <process_control_request+0x4de>
 8008998:	2b01      	cmp	r3, #1
 800899a:	d011      	beq.n	80089c0 <process_control_request+0x500>
 800899c:	e04d      	b.n	8008a3a <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800899e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fec8 	bl	800973c <usbd_edpt_stalled>
 80089ac:	4603      	mov	r3, r0
 80089ae:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80089b0:	f107 020c 	add.w	r2, r7, #12
 80089b4:	79f8      	ldrb	r0, [r7, #7]
 80089b6:	2302      	movs	r3, #2
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	f000 ff87 	bl	80098cc <tud_control_xfer>
          }
          break;
 80089be:	e048      	b.n	8008a52 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	885b      	ldrh	r3, [r3, #2]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11d      	bne.n	8008a06 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d112      	bne.n	80089f8 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80089d2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fe70 	bl	80096c0 <usbd_edpt_clear_stall>
 80089e0:	e011      	b.n	8008a06 <process_control_request+0x546>
 80089e2:	bf00      	nop
 80089e4:	200010e0 	.word	0x200010e0
 80089e8:	e000edf0 	.word	0xe000edf0
 80089ec:	20001114 	.word	0x20001114
 80089f0:	20001110 	.word	0x20001110
 80089f4:	0800dca4 	.word	0x0800dca4
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80089f8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fe1f 	bl	8009644 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8008a06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d021      	beq.n	8008a50 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff fd3c 	bl	8008490 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f000 ffd3 	bl	80099c4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8008a1e:	4b16      	ldr	r3, [pc, #88]	@ (8008a78 <process_control_request+0x5b8>)
 8008a20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d110      	bne.n	8008a50 <process_control_request+0x590>
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fed8 	bl	80097e8 <tud_control_status>
            }
          }
          break;
 8008a38:	e00a      	b.n	8008a50 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8008a3a:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <process_control_request+0x5bc>)
 8008a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d000      	beq.n	8008a4c <process_control_request+0x58c>
 8008a4a:	be00      	bkpt	0x0000
            return false;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e00e      	b.n	8008a6e <process_control_request+0x5ae>
          break;
 8008a50:	bf00      	nop
        }
      }
    }
    break;
 8008a52:	e00b      	b.n	8008a6c <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8008a54:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <process_control_request+0x5bc>)
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d000      	beq.n	8008a66 <process_control_request+0x5a6>
 8008a64:	be00      	bkpt	0x0000
      return false;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e001      	b.n	8008a6e <process_control_request+0x5ae>
      break;
 8008a6a:	bf00      	nop
  }

  return true;
 8008a6c:	2301      	movs	r3, #1
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3768      	adds	r7, #104	@ 0x68
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200010e0 	.word	0x200010e0
 8008a7c:	e000edf0 	.word	0xe000edf0

08008a80 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b096      	sub	sp, #88	@ 0x58
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	460a      	mov	r2, r1
 8008a8a:	71fb      	strb	r3, [r7, #7]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8008a90:	79bb      	ldrb	r3, [r7, #6]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fa fa88 	bl	8002fac <tud_descriptor_configuration_cb>
 8008a9c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8008a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <process_set_config+0x2c>
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d00a      	beq.n	8008ac2 <process_set_config+0x42>
 8008aac:	4b87      	ldr	r3, [pc, #540]	@ (8008ccc <process_set_config+0x24c>)
 8008aae:	623b      	str	r3, [r7, #32]
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d000      	beq.n	8008abe <process_set_config+0x3e>
 8008abc:	be00      	bkpt	0x0000
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e100      	b.n	8008cc4 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac4:	79db      	ldrb	r3, [r3, #7]
 8008ac6:	115b      	asrs	r3, r3, #5
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	b2d9      	uxtb	r1, r3
 8008ace:	4a80      	ldr	r2, [pc, #512]	@ (8008cd0 <process_set_config+0x250>)
 8008ad0:	7813      	ldrb	r3, [r2, #0]
 8008ad2:	f361 1304 	bfi	r3, r1, #4, #1
 8008ad6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ada:	79db      	ldrb	r3, [r3, #7]
 8008adc:	119b      	asrs	r3, r3, #6
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	b2d9      	uxtb	r1, r3
 8008ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8008cd0 <process_set_config+0x250>)
 8008ae6:	7813      	ldrb	r3, [r2, #0]
 8008ae8:	f361 1345 	bfi	r3, r1, #5, #1
 8008aec:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8008aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af0:	3309      	adds	r3, #9
 8008af2:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8008af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af6:	885b      	ldrh	r3, [r3, #2]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	461a      	mov	r2, r3
 8008afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afe:	4413      	add	r3, r2
 8008b00:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8008b02:	e0d9      	b.n	8008cb8 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8008b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b0c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3301      	adds	r3, #1
 8008b12:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8008b14:	2b0b      	cmp	r3, #11
 8008b16:	d10f      	bne.n	8008b38 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8008b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b1a:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8008b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b1e:	78db      	ldrb	r3, [r3, #3]
 8008b20:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8008b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b26:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8008b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b3a:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d00a      	beq.n	8008b5c <process_set_config+0xdc>
 8008b46:	4b61      	ldr	r3, [pc, #388]	@ (8008ccc <process_set_config+0x24c>)
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d000      	beq.n	8008b58 <process_set_config+0xd8>
 8008b56:	be00      	bkpt	0x0000
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e0b3      	b.n	8008cc4 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8008b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b5e:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8008b60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008b6e:	e089      	b.n	8008c84 <process_set_config+0x204>
 8008b70:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008b74:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008b7a:	4b56      	ldr	r3, [pc, #344]	@ (8008cd4 <process_set_config+0x254>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	7bfa      	ldrb	r2, [r7, #15]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d206      	bcs.n	8008b92 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8008b84:	4b54      	ldr	r3, [pc, #336]	@ (8008cd8 <process_set_config+0x258>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	015b      	lsls	r3, r3, #5
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
 8008b90:	e00d      	b.n	8008bae <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008b92:	4b50      	ldr	r3, [pc, #320]	@ (8008cd4 <process_set_config+0x254>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	db07      	blt.n	8008bae <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8008cd4 <process_set_config+0x254>)
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	015b      	lsls	r3, r3, #5
 8008ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8008cdc <process_set_config+0x25c>)
 8008baa:	4413      	add	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]
  return driver;
 8008bae:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8008bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <process_set_config+0x14e>
 8008bb8:	4b44      	ldr	r3, [pc, #272]	@ (8008ccc <process_set_config+0x24c>)
 8008bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d000      	beq.n	8008bca <process_set_config+0x14a>
 8008bc8:	be00      	bkpt	0x0000
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e07a      	b.n	8008cc4 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8008bd4:	79f8      	ldrb	r0, [r7, #7]
 8008bd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8008bde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d94a      	bls.n	8008c7a <process_set_config+0x1fa>
 8008be4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008be6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d846      	bhi.n	8008c7a <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8008bec:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d107      	bne.n	8008c04 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	4a39      	ldr	r2, [pc, #228]	@ (8008ce0 <process_set_config+0x260>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d102      	bne.n	8008c04 <process_set_config+0x184>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8008c0a:	e024      	b.n	8008c56 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8008c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c0e:	789a      	ldrb	r2, [r3, #2]
 8008c10:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008c14:	4413      	add	r3, r2
 8008c16:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8008c1a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd0 <process_set_config+0x250>)
 8008c20:	4413      	add	r3, r2
 8008c22:	791b      	ldrb	r3, [r3, #4]
 8008c24:	2bff      	cmp	r3, #255	@ 0xff
 8008c26:	d00a      	beq.n	8008c3e <process_set_config+0x1be>
 8008c28:	4b28      	ldr	r3, [pc, #160]	@ (8008ccc <process_set_config+0x24c>)
 8008c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d000      	beq.n	8008c3a <process_set_config+0x1ba>
 8008c38:	be00      	bkpt	0x0000
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e042      	b.n	8008cc4 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8008c3e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008c42:	4a23      	ldr	r2, [pc, #140]	@ (8008cd0 <process_set_config+0x250>)
 8008c44:	4413      	add	r3, r2
 8008c46:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8008c4a:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008c4c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008c50:	3301      	adds	r3, #1
 8008c52:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8008c56:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8008c5a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3d4      	bcc.n	8008c0c <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8008c62:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008c66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c6a:	481e      	ldr	r0, [pc, #120]	@ (8008ce4 <process_set_config+0x264>)
 8008c6c:	f003 f81c 	bl	800bca8 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8008c70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c74:	4413      	add	r3, r2
 8008c76:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8008c78:	e00c      	b.n	8008c94 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008c7a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008c84:	4b13      	ldr	r3, [pc, #76]	@ (8008cd4 <process_set_config+0x254>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	f6bf af6e 	bge.w	8008b70 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8008c94:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd4 <process_set_config+0x254>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	da0a      	bge.n	8008cb8 <process_set_config+0x238>
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <process_set_config+0x24c>)
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d000      	beq.n	8008cb4 <process_set_config+0x234>
 8008cb2:	be00      	bkpt	0x0000
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e005      	b.n	8008cc4 <process_set_config+0x244>
  while( p_desc < desc_end )
 8008cb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	f4ff af21 	bcc.w	8008b04 <process_set_config+0x84>
  }

  return true;
 8008cc2:	2301      	movs	r3, #1
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3758      	adds	r7, #88	@ 0x58
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000edf0 	.word	0xe000edf0
 8008cd0:	200010e0 	.word	0x200010e0
 8008cd4:	20001114 	.word	0x20001114
 8008cd8:	20001110 	.word	0x20001110
 8008cdc:	0800dca4 	.word	0x0800dca4
 8008ce0:	08006215 	.word	0x08006215
 8008ce4:	200010f4 	.word	0x200010f4

08008ce8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b094      	sub	sp, #80	@ 0x50
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008d10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8008d18:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	2b0e      	cmp	r3, #14
 8008d20:	f200 80b4 	bhi.w	8008e8c <process_get_descriptor+0x1a4>
 8008d24:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <process_get_descriptor+0x44>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d69 	.word	0x08008d69
 8008d30:	08008dcd 	.word	0x08008dcd
 8008d34:	08008e33 	.word	0x08008e33
 8008d38:	08008e8d 	.word	0x08008e8d
 8008d3c:	08008e8d 	.word	0x08008e8d
 8008d40:	08008e67 	.word	0x08008e67
 8008d44:	08008dcd 	.word	0x08008dcd
 8008d48:	08008e8d 	.word	0x08008e8d
 8008d4c:	08008e8d 	.word	0x08008e8d
 8008d50:	08008e8d 	.word	0x08008e8d
 8008d54:	08008e8d 	.word	0x08008e8d
 8008d58:	08008e8d 	.word	0x08008e8d
 8008d5c:	08008e8d 	.word	0x08008e8d
 8008d60:	08008e8d 	.word	0x08008e8d
 8008d64:	08008d9b 	.word	0x08008d9b
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8008d68:	f7fa f908 	bl	8002f7c <tud_descriptor_device_cb>
 8008d6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8008d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <process_get_descriptor+0xa2>
 8008d74:	4b48      	ldr	r3, [pc, #288]	@ (8008e98 <process_get_descriptor+0x1b0>)
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d000      	beq.n	8008d86 <process_get_descriptor+0x9e>
 8008d84:	be00      	bkpt	0x0000
 8008d86:	2300      	movs	r3, #0
 8008d88:	e081      	b.n	8008e8e <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8008d8a:	79f8      	ldrb	r0, [r7, #7]
 8008d8c:	2312      	movs	r3, #18
 8008d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	f000 fd9b 	bl	80098cc <tud_control_xfer>
 8008d96:	4603      	mov	r3, r0
 8008d98:	e079      	b.n	8008e8e <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8008d9a:	f7fe ffe5 	bl	8007d68 <tud_descriptor_bos_cb>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8008da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <process_get_descriptor+0xc4>
 8008da8:	2300      	movs	r3, #0
 8008daa:	e070      	b.n	8008e8e <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8008dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dae:	3302      	adds	r3, #2
 8008db0:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8008dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008dc0:	79f8      	ldrb	r0, [r7, #7]
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	f000 fd82 	bl	80098cc <tud_control_xfer>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	e060      	b.n	8008e8e <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8008dcc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d114      	bne.n	8008dfe <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8008dd4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa f8e7 	bl	8002fac <tud_descriptor_configuration_cb>
 8008dde:	4603      	mov	r3, r0
 8008de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8008de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d116      	bne.n	8008e16 <process_get_descriptor+0x12e>
 8008de8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e98 <process_get_descriptor+0x1b0>)
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d000      	beq.n	8008dfa <process_get_descriptor+0x112>
 8008df8:	be00      	bkpt	0x0000
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e047      	b.n	8008e8e <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8008dfe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe ffc0 	bl	8007d88 <tud_descriptor_other_speed_configuration_cb>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8008e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <process_get_descriptor+0x12e>
 8008e12:	2300      	movs	r3, #0
 8008e14:	e03b      	b.n	8008e8e <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8008e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e18:	3302      	adds	r3, #2
 8008e1a:	61fb      	str	r3, [r7, #28]
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8008e22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008e26:	79f8      	ldrb	r0, [r7, #7]
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	f000 fd4f 	bl	80098cc <tud_control_xfer>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	e02d      	b.n	8008e8e <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	889b      	ldrh	r3, [r3, #4]
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fa f8c2 	bl	8002fc8 <tud_descriptor_string_cb>
 8008e44:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <process_get_descriptor+0x168>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e01e      	b.n	8008e8e <process_get_descriptor+0x1a6>
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8008e58:	79f8      	ldrb	r0, [r7, #7]
 8008e5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	f000 fd35 	bl	80098cc <tud_control_xfer>
 8008e62:	4603      	mov	r3, r0
 8008e64:	e013      	b.n	8008e8e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8008e66:	f7fe ff87 	bl	8007d78 <tud_descriptor_device_qualifier_cb>
 8008e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <process_get_descriptor+0x18e>
 8008e72:	2300      	movs	r3, #0
 8008e74:	e00b      	b.n	8008e8e <process_get_descriptor+0x1a6>
 8008e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8008e7e:	79f8      	ldrb	r0, [r7, #7]
 8008e80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	f000 fd22 	bl	80098cc <tud_control_xfer>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	e000      	b.n	8008e8e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8008e8c:	2300      	movs	r3, #0
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3750      	adds	r7, #80	@ 0x50
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	e000edf0 	.word	0xe000edf0

08008e9c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b0a0      	sub	sp, #128	@ 0x80
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	f200 8175 	bhi.w	80091a4 <dcd_event_handler+0x308>
 8008eba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <dcd_event_handler+0x24>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ed5 	.word	0x08008ed5
 8008ec4:	08008f45 	.word	0x08008f45
 8008ec8:	08008f01 	.word	0x08008f01
 8008ecc:	08008f23 	.word	0x08008f23
 8008ed0:	08009171 	.word	0x08009171
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8008ed4:	4aac      	ldr	r2, [pc, #688]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008ed6:	7813      	ldrb	r3, [r2, #0]
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8008ede:	4aaa      	ldr	r2, [pc, #680]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008ee0:	7813      	ldrb	r3, [r2, #0]
 8008ee2:	f023 0302 	bic.w	r3, r3, #2
 8008ee6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8008ee8:	4ba7      	ldr	r3, [pc, #668]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8008eee:	4aa6      	ldr	r2, [pc, #664]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008ef0:	7813      	ldrb	r3, [r2, #0]
 8008ef2:	f023 0304 	bic.w	r3, r3, #4
 8008ef6:	7013      	strb	r3, [r2, #0]
      send = true;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008efe:	e15a      	b.n	80091b6 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8008f00:	4ba1      	ldr	r3, [pc, #644]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 814e 	beq.w	80091ac <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8008f10:	4a9d      	ldr	r2, [pc, #628]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008f12:	7813      	ldrb	r3, [r2, #0]
 8008f14:	f043 0304 	orr.w	r3, r3, #4
 8008f18:	7013      	strb	r3, [r2, #0]
        send = true;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008f20:	e144      	b.n	80091ac <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8008f22:	4b99      	ldr	r3, [pc, #612]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 813f 	beq.w	80091b0 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8008f32:	4a95      	ldr	r2, [pc, #596]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008f34:	7813      	ldrb	r3, [r2, #0]
 8008f36:	f023 0304 	bic.w	r3, r3, #4
 8008f3a:	7013      	strb	r3, [r2, #0]
        send = true;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008f42:	e135      	b.n	80091b0 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008f4a:	e039      	b.n	8008fc0 <dcd_event_handler+0x124>
 8008f4c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008f50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8008f58:	4b8c      	ldr	r3, [pc, #560]	@ (800918c <dcd_event_handler+0x2f0>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d207      	bcs.n	8008f74 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8008f64:	4b8a      	ldr	r3, [pc, #552]	@ (8009190 <dcd_event_handler+0x2f4>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f6c:	015b      	lsls	r3, r3, #5
 8008f6e:	4413      	add	r3, r2
 8008f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f72:	e00f      	b.n	8008f94 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008f74:	4b85      	ldr	r3, [pc, #532]	@ (800918c <dcd_event_handler+0x2f0>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	db08      	blt.n	8008f94 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008f82:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008f86:	4a81      	ldr	r2, [pc, #516]	@ (800918c <dcd_event_handler+0x2f0>)
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	015b      	lsls	r3, r3, #5
 8008f8e:	4a81      	ldr	r2, [pc, #516]	@ (8009194 <dcd_event_handler+0x2f8>)
 8008f90:	4413      	add	r3, r2
 8008f92:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8008f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8008f96:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8008f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <dcd_event_handler+0x11a>
 8008f9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8008fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	7810      	ldrb	r0, [r2, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6852      	ldr	r2, [r2, #4]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008fb6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008fba:	3301      	adds	r3, #1
 8008fbc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008fc0:	4b72      	ldr	r3, [pc, #456]	@ (800918c <dcd_event_handler+0x2f0>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	dabe      	bge.n	8008f4c <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8008fce:	4b6e      	ldr	r3, [pc, #440]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05a      	beq.n	8009092 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8008fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8009188 <dcd_event_handler+0x2ec>)
 8008fde:	7813      	ldrb	r3, [r2, #0]
 8008fe0:	f023 0304 	bic.w	r3, r3, #4
 8008fe4:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8008fe6:	f107 0314 	add.w	r3, r7, #20
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	605a      	str	r2, [r3, #4]
 8008ff0:	609a      	str	r2, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	753b      	strb	r3, [r7, #20]
 8008ff8:	2305      	movs	r3, #5
 8008ffa:	757b      	strb	r3, [r7, #21]
 8008ffc:	f107 0314 	add.w	r3, r7, #20
 8009000:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009008:	4b63      	ldr	r3, [pc, #396]	@ (8009198 <dcd_event_handler+0x2fc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	667b      	str	r3, [r7, #100]	@ 0x64
 800900e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009010:	663b      	str	r3, [r7, #96]	@ 0x60
 8009012:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009016:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 800901a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800901e:	f083 0301 	eor.w	r3, r3, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2000      	movs	r0, #0
 800902e:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009032:	3304      	adds	r3, #4
 8009034:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fde9 	bl	8007c0e <tu_fifo_write>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009046:	f083 0301 	eor.w	r3, r3, #1
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2001      	movs	r0, #1
 8009056:	4798      	blx	r3
  }

  return success;
 8009058:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800905c:	f083 0301 	eor.w	r3, r3, #1
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <dcd_event_handler+0x1de>
 8009066:	4b4d      	ldr	r3, [pc, #308]	@ (800919c <dcd_event_handler+0x300>)
 8009068:	65bb      	str	r3, [r7, #88]	@ 0x58
 800906a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00c      	beq.n	8009090 <dcd_event_handler+0x1f4>
 8009076:	be00      	bkpt	0x0000
 8009078:	e00a      	b.n	8009090 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800907a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800907c:	7818      	ldrb	r0, [r3, #0]
 800907e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	4619      	mov	r1, r3
 8009084:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009088:	461a      	mov	r2, r3
 800908a:	f7fe fe55 	bl	8007d38 <tud_event_hook_cb>
  return true;
 800908e:	e000      	b.n	8009092 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009090:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009092:	4b3d      	ldr	r3, [pc, #244]	@ (8009188 <dcd_event_handler+0x2ec>)
 8009094:	78db      	ldrb	r3, [r3, #3]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	657b      	str	r3, [r7, #84]	@ 0x54
 800909a:	2300      	movs	r3, #0
 800909c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80090a0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80090a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bf14      	ite	ne
 80090b2:	2301      	movne	r3, #1
 80090b4:	2300      	moveq	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d07b      	beq.n	80091b4 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80090bc:	f107 0308 	add.w	r3, r7, #8
 80090c0:	2200      	movs	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	605a      	str	r2, [r3, #4]
 80090c6:	609a      	str	r2, [r3, #8]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	723b      	strb	r3, [r7, #8]
 80090ce:	2303      	movs	r3, #3
 80090d0:	727b      	strb	r3, [r7, #9]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	f107 0308 	add.w	r3, r7, #8
 80090dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80090e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009198 <dcd_event_handler+0x2fc>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80090f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 80090f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80090fa:	f083 0301 	eor.w	r3, r3, #1
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2000      	movs	r0, #0
 800910a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800910c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800910e:	3304      	adds	r3, #4
 8009110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fd7b 	bl	8007c0e <tu_fifo_write>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 800911e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009122:	f083 0301 	eor.w	r3, r3, #1
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 800912c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2001      	movs	r0, #1
 8009132:	4798      	blx	r3
  return success;
 8009134:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009138:	f083 0301 	eor.w	r3, r3, #1
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <dcd_event_handler+0x2ba>
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <dcd_event_handler+0x300>)
 8009144:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00c      	beq.n	800916c <dcd_event_handler+0x2d0>
 8009152:	be00      	bkpt	0x0000
 8009154:	e00a      	b.n	800916c <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009158:	7818      	ldrb	r0, [r3, #0]
 800915a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	4619      	mov	r1, r3
 8009160:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009164:	461a      	mov	r2, r3
 8009166:	f7fe fde7 	bl	8007d38 <tud_event_hook_cb>
  return true;
 800916a:	e000      	b.n	800916e <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800916c:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 800916e:	e021      	b.n	80091b4 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009170:	4b0b      	ldr	r3, [pc, #44]	@ (80091a0 <dcd_event_handler+0x304>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	3301      	adds	r3, #1
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4b09      	ldr	r3, [pc, #36]	@ (80091a0 <dcd_event_handler+0x304>)
 800917c:	701a      	strb	r2, [r3, #0]
      send = true;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009184:	e017      	b.n	80091b6 <dcd_event_handler+0x31a>
 8009186:	bf00      	nop
 8009188:	200010e0 	.word	0x200010e0
 800918c:	20001114 	.word	0x20001114
 8009190:	20001110 	.word	0x20001110
 8009194:	0800dca4 	.word	0x0800dca4
 8009198:	200011d8 	.word	0x200011d8
 800919c:	e000edf0 	.word	0xe000edf0
 80091a0:	2000110c 	.word	0x2000110c

    default:
      send = true;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80091aa:	e004      	b.n	80091b6 <dcd_event_handler+0x31a>
      break;
 80091ac:	bf00      	nop
 80091ae:	e002      	b.n	80091b6 <dcd_event_handler+0x31a>
      break;
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <dcd_event_handler+0x31a>
      break;
 80091b4:	bf00      	nop
  }

  if (send) {
 80091b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d049      	beq.n	8009252 <dcd_event_handler+0x3b6>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80091c8:	4b24      	ldr	r3, [pc, #144]	@ (800925c <dcd_event_handler+0x3c0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80091da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091de:	f083 0301 	eor.w	r3, r3, #1
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2000      	movs	r0, #0
 80091ee:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	3304      	adds	r3, #4
 80091f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fd09 	bl	8007c0e <tu_fifo_write>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009206:	f083 0301 	eor.w	r3, r3, #1
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2001      	movs	r0, #1
 8009216:	4798      	blx	r3
  return success;
 8009218:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800921c:	f083 0301 	eor.w	r3, r3, #1
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <dcd_event_handler+0x39e>
 8009226:	4b0e      	ldr	r3, [pc, #56]	@ (8009260 <dcd_event_handler+0x3c4>)
 8009228:	623b      	str	r3, [r7, #32]
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00c      	beq.n	8009250 <dcd_event_handler+0x3b4>
 8009236:	be00      	bkpt	0x0000
 8009238:	e00a      	b.n	8009250 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	7818      	ldrb	r0, [r3, #0]
 800923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009240:	785b      	ldrb	r3, [r3, #1]
 8009242:	4619      	mov	r1, r3
 8009244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009248:	461a      	mov	r2, r3
 800924a:	f7fe fd75 	bl	8007d38 <tud_event_hook_cb>
  return true;
 800924e:	e000      	b.n	8009252 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009250:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8009252:	bf00      	nop
 8009254:	3780      	adds	r7, #128	@ 0x80
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200011d8 	.word	0x200011d8
 8009260:	e000edf0 	.word	0xe000edf0

08009264 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8009274:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <usbd_int_set+0x30>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f929 	bl	800a4d0 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800927e:	e004      	b.n	800928a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009280:	4b04      	ldr	r3, [pc, #16]	@ (8009294 <usbd_int_set+0x30>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f001 f94b 	bl	800a520 <dcd_int_disable>
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	2000012d 	.word	0x2000012d

08009298 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <usbd_spin_lock+0x30>)
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	f083 0301 	eor.w	r3, r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2000      	movs	r0, #0
 80092bc:	4798      	blx	r3
}
 80092be:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 80092c0:	bf00      	nop
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000130 	.word	0x20000130

080092cc <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	71fb      	strb	r3, [r7, #7]
 80092d6:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <usbd_spin_unlock+0x30>)
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	f083 0301 	eor.w	r3, r3, #1
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2001      	movs	r0, #1
 80092f0:	4798      	blx	r3
}
 80092f2:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000130 	.word	0x20000130

08009300 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	@ 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6039      	str	r1, [r7, #0]
 8009308:	4611      	mov	r1, r2
 800930a:	461a      	mov	r2, r3
 800930c:	4603      	mov	r3, r0
 800930e:	71fb      	strb	r3, [r7, #7]
 8009310:	460b      	mov	r3, r1
 8009312:	71bb      	strb	r3, [r7, #6]
 8009314:	4613      	mov	r3, r2
 8009316:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8009318:	2300      	movs	r3, #0
 800931a:	627b      	str	r3, [r7, #36]	@ 0x24
 800931c:	e04d      	b.n	80093ba <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b05      	cmp	r3, #5
 8009328:	d108      	bne.n	800933c <usbd_open_edpt_pair+0x3c>
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009332:	b2db      	uxtb	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	797b      	ldrb	r3, [r7, #5]
 8009338:	4293      	cmp	r3, r2
 800933a:	d00a      	beq.n	8009352 <usbd_open_edpt_pair+0x52>
 800933c:	4b23      	ldr	r3, [pc, #140]	@ (80093cc <usbd_open_edpt_pair+0xcc>)
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d000      	beq.n	800934e <usbd_open_edpt_pair+0x4e>
 800934c:	be00      	bkpt	0x0000
 800934e:	2300      	movs	r3, #0
 8009350:	e038      	b.n	80093c4 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	6a39      	ldr	r1, [r7, #32]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f83a 	bl	80093d0 <usbd_edpt_open>
 800935c:	4603      	mov	r3, r0
 800935e:	f083 0301 	eor.w	r3, r3, #1
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <usbd_open_edpt_pair+0x7e>
 8009368:	4b18      	ldr	r3, [pc, #96]	@ (80093cc <usbd_open_edpt_pair+0xcc>)
 800936a:	61fb      	str	r3, [r7, #28]
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d000      	beq.n	800937a <usbd_open_edpt_pair+0x7a>
 8009378:	be00      	bkpt	0x0000
 800937a:	2300      	movs	r3, #0
 800937c:	e022      	b.n	80093c4 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	789b      	ldrb	r3, [r3, #2]
 8009382:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	09db      	lsrs	r3, r3, #7
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	d104      	bne.n	8009398 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	789a      	ldrb	r2, [r3, #2]
 8009392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e003      	b.n	80093a0 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	789a      	ldrb	r2, [r3, #2]
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80093b2:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	3301      	adds	r3, #1
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ba:	79bb      	ldrb	r3, [r7, #6]
 80093bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093be:	429a      	cmp	r2, r3
 80093c0:	dbad      	blt.n	800931e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80093c2:	2301      	movs	r3, #1
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	@ 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	e000edf0 	.word	0xe000edf0

080093d0 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80093dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009450 <usbd_edpt_open+0x80>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	789b      	ldrb	r3, [r3, #2]
 80093e6:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b05      	cmp	r3, #5
 80093f2:	d90a      	bls.n	800940a <usbd_edpt_open+0x3a>
 80093f4:	4b17      	ldr	r3, [pc, #92]	@ (8009454 <usbd_edpt_open+0x84>)
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d000      	beq.n	8009406 <usbd_edpt_open+0x36>
 8009404:	be00      	bkpt	0x0000
 8009406:	2300      	movs	r3, #0
 8009408:	e01d      	b.n	8009446 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <usbd_edpt_open+0x88>)
 800940c:	789b      	ldrb	r3, [r3, #2]
 800940e:	2200      	movs	r2, #0
 8009410:	4619      	mov	r1, r3
 8009412:	6838      	ldr	r0, [r7, #0]
 8009414:	f002 fbae 	bl	800bb74 <tu_edpt_validate>
 8009418:	4603      	mov	r3, r0
 800941a:	f083 0301 	eor.w	r3, r3, #1
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <usbd_edpt_open+0x6a>
 8009424:	4b0b      	ldr	r3, [pc, #44]	@ (8009454 <usbd_edpt_open+0x84>)
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d000      	beq.n	8009436 <usbd_edpt_open+0x66>
 8009434:	be00      	bkpt	0x0000
 8009436:	2300      	movs	r3, #0
 8009438:	e005      	b.n	8009446 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f001 f992 	bl	800a768 <dcd_edpt_open>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	2000012d 	.word	0x2000012d
 8009454:	e000edf0 	.word	0xe000edf0
 8009458:	200010e0 	.word	0x200010e0

0800945c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	460a      	mov	r2, r1
 8009466:	71fb      	strb	r3, [r7, #7]
 8009468:	4613      	mov	r3, r2
 800946a:	71bb      	strb	r3, [r7, #6]
 800946c:	79bb      	ldrb	r3, [r7, #6]
 800946e:	73bb      	strb	r3, [r7, #14]
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009478:	75fb      	strb	r3, [r7, #23]
 800947a:	79bb      	ldrb	r3, [r7, #6]
 800947c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	09db      	lsrs	r3, r3, #7
 8009482:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009484:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009486:	7dfa      	ldrb	r2, [r7, #23]
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	0052      	lsls	r2, r2, #1
 800948c:	4413      	add	r3, r2
 800948e:	3320      	adds	r3, #32
 8009490:	4a05      	ldr	r2, [pc, #20]	@ (80094a8 <usbd_edpt_claim+0x4c>)
 8009492:	4413      	add	r3, r2
 8009494:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8009496:	2100      	movs	r1, #0
 8009498:	6938      	ldr	r0, [r7, #16]
 800949a:	f002 fb07 	bl	800baac <tu_edpt_claim>
 800949e:	4603      	mov	r3, r0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200010e0 	.word	0x200010e0

080094ac <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	460a      	mov	r2, r1
 80094b6:	71fb      	strb	r3, [r7, #7]
 80094b8:	4613      	mov	r3, r2
 80094ba:	71bb      	strb	r3, [r7, #6]
 80094bc:	79bb      	ldrb	r3, [r7, #6]
 80094be:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80094c8:	75fb      	strb	r3, [r7, #23]
 80094ca:	79bb      	ldrb	r3, [r7, #6]
 80094cc:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	09db      	lsrs	r3, r3, #7
 80094d2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80094d4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80094d6:	7dfa      	ldrb	r2, [r7, #23]
 80094d8:	7dbb      	ldrb	r3, [r7, #22]
 80094da:	0052      	lsls	r2, r2, #1
 80094dc:	4413      	add	r3, r2
 80094de:	3320      	adds	r3, #32
 80094e0:	4a05      	ldr	r2, [pc, #20]	@ (80094f8 <usbd_edpt_release+0x4c>)
 80094e2:	4413      	add	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80094e6:	2100      	movs	r1, #0
 80094e8:	6938      	ldr	r0, [r7, #16]
 80094ea:	f002 fb19 	bl	800bb20 <tu_edpt_release>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	200010e0 	.word	0x200010e0

080094fc <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	603a      	str	r2, [r7, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	4603      	mov	r3, r0
 8009508:	71fb      	strb	r3, [r7, #7]
 800950a:	460b      	mov	r3, r1
 800950c:	71bb      	strb	r3, [r7, #6]
 800950e:	4613      	mov	r3, r2
 8009510:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8009512:	4b32      	ldr	r3, [pc, #200]	@ (80095dc <usbd_edpt_xfer+0xe0>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
 8009518:	79bb      	ldrb	r3, [r7, #6]
 800951a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800951c:	7abb      	ldrb	r3, [r7, #10]
 800951e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009522:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009524:	75fb      	strb	r3, [r7, #23]
 8009526:	79bb      	ldrb	r3, [r7, #6]
 8009528:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	09db      	lsrs	r3, r3, #7
 800952e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009530:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8009532:	7dfa      	ldrb	r2, [r7, #23]
 8009534:	7dbb      	ldrb	r3, [r7, #22]
 8009536:	492a      	ldr	r1, [pc, #168]	@ (80095e0 <usbd_edpt_xfer+0xe4>)
 8009538:	0052      	lsls	r2, r2, #1
 800953a:	440a      	add	r2, r1
 800953c:	4413      	add	r3, r2
 800953e:	3320      	adds	r3, #32
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <usbd_edpt_xfer+0x66>
 800954c:	4b25      	ldr	r3, [pc, #148]	@ (80095e4 <usbd_edpt_xfer+0xe8>)
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d000      	beq.n	800955e <usbd_edpt_xfer+0x62>
 800955c:	be00      	bkpt	0x0000
 800955e:	2300      	movs	r3, #0
 8009560:	e038      	b.n	80095d4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8009562:	7dfa      	ldrb	r2, [r7, #23]
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	491e      	ldr	r1, [pc, #120]	@ (80095e0 <usbd_edpt_xfer+0xe4>)
 8009568:	0052      	lsls	r2, r2, #1
 800956a:	440a      	add	r2, r1
 800956c:	4413      	add	r3, r2
 800956e:	f103 0220 	add.w	r2, r3, #32
 8009572:	7813      	ldrb	r3, [r2, #0]
 8009574:	f043 0301 	orr.w	r3, r3, #1
 8009578:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800957a:	88bb      	ldrh	r3, [r7, #4]
 800957c:	79b9      	ldrb	r1, [r7, #6]
 800957e:	79f8      	ldrb	r0, [r7, #7]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	f001 f9b5 	bl	800a8f0 <dcd_edpt_xfer>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <usbd_edpt_xfer+0x94>
    return true;
 800958c:	2301      	movs	r3, #1
 800958e:	e021      	b.n	80095d4 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8009590:	7dfa      	ldrb	r2, [r7, #23]
 8009592:	7dbb      	ldrb	r3, [r7, #22]
 8009594:	4912      	ldr	r1, [pc, #72]	@ (80095e0 <usbd_edpt_xfer+0xe4>)
 8009596:	0052      	lsls	r2, r2, #1
 8009598:	440a      	add	r2, r1
 800959a:	4413      	add	r3, r2
 800959c:	f103 0220 	add.w	r2, r3, #32
 80095a0:	7813      	ldrb	r3, [r2, #0]
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80095a8:	7dfa      	ldrb	r2, [r7, #23]
 80095aa:	7dbb      	ldrb	r3, [r7, #22]
 80095ac:	490c      	ldr	r1, [pc, #48]	@ (80095e0 <usbd_edpt_xfer+0xe4>)
 80095ae:	0052      	lsls	r2, r2, #1
 80095b0:	440a      	add	r2, r1
 80095b2:	4413      	add	r3, r2
 80095b4:	f103 0220 	add.w	r2, r3, #32
 80095b8:	7813      	ldrb	r3, [r2, #0]
 80095ba:	f023 0304 	bic.w	r3, r3, #4
 80095be:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80095c0:	4b08      	ldr	r3, [pc, #32]	@ (80095e4 <usbd_edpt_xfer+0xe8>)
 80095c2:	613b      	str	r3, [r7, #16]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d000      	beq.n	80095d2 <usbd_edpt_xfer+0xd6>
 80095d0:	be00      	bkpt	0x0000
    return false;
 80095d2:	2300      	movs	r3, #0
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	2000012d 	.word	0x2000012d
 80095e0:	200010e0 	.word	0x200010e0
 80095e4:	e000edf0 	.word	0xe000edf0

080095e8 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	460a      	mov	r2, r1
 80095f2:	71fb      	strb	r3, [r7, #7]
 80095f4:	4613      	mov	r3, r2
 80095f6:	71bb      	strb	r3, [r7, #6]
 80095f8:	79bb      	ldrb	r3, [r7, #6]
 80095fa:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80095fc:	7b3b      	ldrb	r3, [r7, #12]
 80095fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009602:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009604:	73fb      	strb	r3, [r7, #15]
 8009606:	79bb      	ldrb	r3, [r7, #6]
 8009608:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800960a:	7b7b      	ldrb	r3, [r7, #13]
 800960c:	09db      	lsrs	r3, r3, #7
 800960e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009610:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8009612:	7bfa      	ldrb	r2, [r7, #15]
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	490a      	ldr	r1, [pc, #40]	@ (8009640 <usbd_edpt_busy+0x58>)
 8009618:	0052      	lsls	r2, r2, #1
 800961a:	440a      	add	r2, r1
 800961c:	4413      	add	r3, r2
 800961e:	3320      	adds	r3, #32
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	bf14      	ite	ne
 800962c:	2301      	movne	r3, #1
 800962e:	2300      	moveq	r3, #0
 8009630:	b2db      	uxtb	r3, r3
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	200010e0 	.word	0x200010e0

08009644 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	460a      	mov	r2, r1
 800964e:	71fb      	strb	r3, [r7, #7]
 8009650:	4613      	mov	r3, r2
 8009652:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8009654:	4b18      	ldr	r3, [pc, #96]	@ (80096b8 <usbd_edpt_stall+0x74>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	71fb      	strb	r3, [r7, #7]
 800965a:	79bb      	ldrb	r3, [r7, #6]
 800965c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800965e:	7b3b      	ldrb	r3, [r7, #12]
 8009660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009664:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	79bb      	ldrb	r3, [r7, #6]
 800966a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800966c:	7b7b      	ldrb	r3, [r7, #13]
 800966e:	09db      	lsrs	r3, r3, #7
 8009670:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009672:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8009674:	79ba      	ldrb	r2, [r7, #6]
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f001 f988 	bl	800a990 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8009680:	7bfa      	ldrb	r2, [r7, #15]
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	490d      	ldr	r1, [pc, #52]	@ (80096bc <usbd_edpt_stall+0x78>)
 8009686:	0052      	lsls	r2, r2, #1
 8009688:	440a      	add	r2, r1
 800968a:	4413      	add	r3, r2
 800968c:	f103 0220 	add.w	r2, r3, #32
 8009690:	7813      	ldrb	r3, [r2, #0]
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8009698:	7bfa      	ldrb	r2, [r7, #15]
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	4907      	ldr	r1, [pc, #28]	@ (80096bc <usbd_edpt_stall+0x78>)
 800969e:	0052      	lsls	r2, r2, #1
 80096a0:	440a      	add	r2, r1
 80096a2:	4413      	add	r3, r2
 80096a4:	f103 0220 	add.w	r2, r3, #32
 80096a8:	7813      	ldrb	r3, [r2, #0]
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	7013      	strb	r3, [r2, #0]
}
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	2000012d 	.word	0x2000012d
 80096bc:	200010e0 	.word	0x200010e0

080096c0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	460a      	mov	r2, r1
 80096ca:	71fb      	strb	r3, [r7, #7]
 80096cc:	4613      	mov	r3, r2
 80096ce:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80096d0:	4b18      	ldr	r3, [pc, #96]	@ (8009734 <usbd_edpt_clear_stall+0x74>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	71fb      	strb	r3, [r7, #7]
 80096d6:	79bb      	ldrb	r3, [r7, #6]
 80096d8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80096da:	7b3b      	ldrb	r3, [r7, #12]
 80096dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80096e2:	73fb      	strb	r3, [r7, #15]
 80096e4:	79bb      	ldrb	r3, [r7, #6]
 80096e6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80096e8:	7b7b      	ldrb	r3, [r7, #13]
 80096ea:	09db      	lsrs	r3, r3, #7
 80096ec:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80096ee:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80096f0:	79ba      	ldrb	r2, [r7, #6]
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 f980 	bl	800a9fc <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80096fc:	7bfa      	ldrb	r2, [r7, #15]
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	490d      	ldr	r1, [pc, #52]	@ (8009738 <usbd_edpt_clear_stall+0x78>)
 8009702:	0052      	lsls	r2, r2, #1
 8009704:	440a      	add	r2, r1
 8009706:	4413      	add	r3, r2
 8009708:	f103 0220 	add.w	r2, r3, #32
 800970c:	7813      	ldrb	r3, [r2, #0]
 800970e:	f023 0302 	bic.w	r3, r3, #2
 8009712:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8009714:	7bfa      	ldrb	r2, [r7, #15]
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	4907      	ldr	r1, [pc, #28]	@ (8009738 <usbd_edpt_clear_stall+0x78>)
 800971a:	0052      	lsls	r2, r2, #1
 800971c:	440a      	add	r2, r1
 800971e:	4413      	add	r3, r2
 8009720:	f103 0220 	add.w	r2, r3, #32
 8009724:	7813      	ldrb	r3, [r2, #0]
 8009726:	f023 0301 	bic.w	r3, r3, #1
 800972a:	7013      	strb	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	2000012d 	.word	0x2000012d
 8009738:	200010e0 	.word	0x200010e0

0800973c <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	460a      	mov	r2, r1
 8009746:	71fb      	strb	r3, [r7, #7]
 8009748:	4613      	mov	r3, r2
 800974a:	71bb      	strb	r3, [r7, #6]
 800974c:	79bb      	ldrb	r3, [r7, #6]
 800974e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009750:	7b3b      	ldrb	r3, [r7, #12]
 8009752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009756:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009758:	73fb      	strb	r3, [r7, #15]
 800975a:	79bb      	ldrb	r3, [r7, #6]
 800975c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800975e:	7b7b      	ldrb	r3, [r7, #13]
 8009760:	09db      	lsrs	r3, r3, #7
 8009762:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009764:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8009766:	7bfa      	ldrb	r2, [r7, #15]
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	490a      	ldr	r1, [pc, #40]	@ (8009794 <usbd_edpt_stalled+0x58>)
 800976c:	0052      	lsls	r2, r2, #1
 800976e:	440a      	add	r2, r1
 8009770:	4413      	add	r3, r2
 8009772:	3320      	adds	r3, #32
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	bf14      	ite	ne
 8009780:	2301      	movne	r3, #1
 8009782:	2300      	moveq	r3, #0
 8009784:	b2db      	uxtb	r3, r3
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	200010e0 	.word	0x200010e0

08009798 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	6039      	str	r1, [r7, #0]
 80097ba:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <status_stage_xact+0x1e>
 80097ca:	2300      	movs	r3, #0
 80097cc:	e000      	b.n	80097d0 <status_stage_xact+0x20>
 80097ce:	2380      	movs	r3, #128	@ 0x80
 80097d0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80097d2:	7bf9      	ldrb	r1, [r7, #15]
 80097d4:	79f8      	ldrb	r0, [r7, #7]
 80097d6:	2300      	movs	r3, #0
 80097d8:	2200      	movs	r2, #0
 80097da:	f7ff fe8f 	bl	80094fc <usbd_edpt_xfer>
 80097de:	4603      	mov	r3, r0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80097f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <tud_control_status+0x3c>)
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	6810      	ldr	r0, [r2, #0]
 80097fa:	6851      	ldr	r1, [r2, #4]
 80097fc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80097fe:	4b09      	ldr	r3, [pc, #36]	@ (8009824 <tud_control_status+0x3c>)
 8009800:	2200      	movs	r2, #0
 8009802:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8009804:	4b07      	ldr	r3, [pc, #28]	@ (8009824 <tud_control_status+0x3c>)
 8009806:	2200      	movs	r2, #0
 8009808:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800980a:	4b06      	ldr	r3, [pc, #24]	@ (8009824 <tud_control_status+0x3c>)
 800980c:	2200      	movs	r2, #0
 800980e:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff ffcb 	bl	80097b0 <status_stage_xact>
 800981a:	4603      	mov	r3, r0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	200011dc 	.word	0x200011dc

08009828 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8009832:	4b24      	ldr	r3, [pc, #144]	@ (80098c4 <data_stage_xact+0x9c>)
 8009834:	899a      	ldrh	r2, [r3, #12]
 8009836:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <data_stage_xact+0x9c>)
 8009838:	89db      	ldrh	r3, [r3, #14]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	837b      	strh	r3, [r7, #26]
 8009840:	2340      	movs	r3, #64	@ 0x40
 8009842:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009844:	8b7a      	ldrh	r2, [r7, #26]
 8009846:	8b3b      	ldrh	r3, [r7, #24]
 8009848:	4293      	cmp	r3, r2
 800984a:	bf28      	it	cs
 800984c:	4613      	movcs	r3, r2
 800984e:	b29b      	uxth	r3, r3
 8009850:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8009852:	2300      	movs	r3, #0
 8009854:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8009856:	4b1b      	ldr	r3, [pc, #108]	@ (80098c4 <data_stage_xact+0x9c>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01e      	beq.n	80098a2 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8009868:	8bbb      	ldrh	r3, [r7, #28]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d019      	beq.n	80098a2 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800986e:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <data_stage_xact+0x9c>)
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	8bbb      	ldrh	r3, [r7, #28]
 8009874:	4914      	ldr	r1, [pc, #80]	@ (80098c8 <data_stage_xact+0xa0>)
 8009876:	6179      	str	r1, [r7, #20]
 8009878:	2140      	movs	r1, #64	@ 0x40
 800987a:	6139      	str	r1, [r7, #16]
 800987c:	60fa      	str	r2, [r7, #12]
 800987e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	d202      	bcs.n	800988e <data_stage_xact+0x66>
    return -1;
 8009888:	f04f 33ff 	mov.w	r3, #4294967295
 800988c:	e005      	b.n	800989a <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	68f9      	ldr	r1, [r7, #12]
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f002 fce9 	bl	800c26a <memcpy>
  return 0;
 8009898:	2300      	movs	r3, #0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <data_stage_xact+0x7a>
 800989e:	2300      	movs	r3, #0
 80098a0:	e00b      	b.n	80098ba <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 80098a2:	8bbb      	ldrh	r3, [r7, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <data_stage_xact+0x84>
 80098a8:	4a07      	ldr	r2, [pc, #28]	@ (80098c8 <data_stage_xact+0xa0>)
 80098aa:	e000      	b.n	80098ae <data_stage_xact+0x86>
 80098ac:	2200      	movs	r2, #0
 80098ae:	8bbb      	ldrh	r3, [r7, #28]
 80098b0:	7ff9      	ldrb	r1, [r7, #31]
 80098b2:	79f8      	ldrb	r0, [r7, #7]
 80098b4:	f7ff fe22 	bl	80094fc <usbd_edpt_xfer>
 80098b8:	4603      	mov	r3, r0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200011dc 	.word	0x200011dc
 80098c8:	200011f0 	.word	0x200011f0

080098cc <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	461a      	mov	r2, r3
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	4613      	mov	r3, r2
 80098de:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80098e0:	4b30      	ldr	r3, [pc, #192]	@ (80099a4 <tud_control_xfer+0xd8>)
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	6810      	ldr	r0, [r2, #0]
 80098e6:	6851      	ldr	r1, [r2, #4]
 80098e8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80098ea:	4a2e      	ldr	r2, [pc, #184]	@ (80099a4 <tud_control_xfer+0xd8>)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80098f0:	4b2c      	ldr	r3, [pc, #176]	@ (80099a4 <tud_control_xfer+0xd8>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	89bb      	ldrh	r3, [r7, #12]
 80098fe:	827b      	strh	r3, [r7, #18]
 8009900:	4613      	mov	r3, r2
 8009902:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009904:	8a7a      	ldrh	r2, [r7, #18]
 8009906:	8a3b      	ldrh	r3, [r7, #16]
 8009908:	4293      	cmp	r3, r2
 800990a:	bf28      	it	cs
 800990c:	4613      	movcs	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	4b24      	ldr	r3, [pc, #144]	@ (80099a4 <tud_control_xfer+0xd8>)
 8009912:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	88db      	ldrh	r3, [r3, #6]
 8009918:	b29b      	uxth	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d026      	beq.n	800996c <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800991e:	4b21      	ldr	r3, [pc, #132]	@ (80099a4 <tud_control_xfer+0xd8>)
 8009920:	899b      	ldrh	r3, [r3, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <tud_control_xfer+0x76>
 800992c:	4b1e      	ldr	r3, [pc, #120]	@ (80099a8 <tud_control_xfer+0xdc>)
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d000      	beq.n	800993e <tud_control_xfer+0x72>
 800993c:	be00      	bkpt	0x0000
 800993e:	2300      	movs	r3, #0
 8009940:	e02b      	b.n	800999a <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff ff6f 	bl	8009828 <data_stage_xact>
 800994a:	4603      	mov	r3, r0
 800994c:	f083 0301 	eor.w	r3, r3, #1
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d020      	beq.n	8009998 <tud_control_xfer+0xcc>
 8009956:	4b14      	ldr	r3, [pc, #80]	@ (80099a8 <tud_control_xfer+0xdc>)
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d000      	beq.n	8009968 <tud_control_xfer+0x9c>
 8009966:	be00      	bkpt	0x0000
 8009968:	2300      	movs	r3, #0
 800996a:	e016      	b.n	800999a <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff ff1d 	bl	80097b0 <status_stage_xact>
 8009976:	4603      	mov	r3, r0
 8009978:	f083 0301 	eor.w	r3, r3, #1
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <tud_control_xfer+0xcc>
 8009982:	4b09      	ldr	r3, [pc, #36]	@ (80099a8 <tud_control_xfer+0xdc>)
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d000      	beq.n	8009994 <tud_control_xfer+0xc8>
 8009992:	be00      	bkpt	0x0000
 8009994:	2300      	movs	r3, #0
 8009996:	e000      	b.n	800999a <tud_control_xfer+0xce>
  }

  return true;
 8009998:	2301      	movs	r3, #1
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200011dc 	.word	0x200011dc
 80099a8:	e000edf0 	.word	0xe000edf0

080099ac <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80099b0:	2214      	movs	r2, #20
 80099b2:	2100      	movs	r1, #0
 80099b4:	4802      	ldr	r0, [pc, #8]	@ (80099c0 <usbd_control_reset+0x14>)
 80099b6:	f002 fb80 	bl	800c0ba <memset>
}
 80099ba:	bf00      	nop
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	200011dc 	.word	0x200011dc

080099c4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80099cc:	4a04      	ldr	r2, [pc, #16]	@ (80099e0 <usbd_control_set_complete_callback+0x1c>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6113      	str	r3, [r2, #16]
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	200011dc 	.word	0x200011dc

080099e4 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80099ec:	4b09      	ldr	r3, [pc, #36]	@ (8009a14 <usbd_control_set_request+0x30>)
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6810      	ldr	r0, [r2, #0]
 80099f2:	6851      	ldr	r1, [r2, #4]
 80099f4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80099f6:	4b07      	ldr	r3, [pc, #28]	@ (8009a14 <usbd_control_set_request+0x30>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80099fc:	4b05      	ldr	r3, [pc, #20]	@ (8009a14 <usbd_control_set_request+0x30>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8009a02:	4b04      	ldr	r3, [pc, #16]	@ (8009a14 <usbd_control_set_request+0x30>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	819a      	strh	r2, [r3, #12]
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	200011dc 	.word	0x200011dc

08009a18 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4603      	mov	r3, r0
 8009a22:	71fb      	strb	r3, [r7, #7]
 8009a24:	460b      	mov	r3, r1
 8009a26:	71bb      	strb	r3, [r7, #6]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	717b      	strb	r3, [r7, #5]
 8009a2c:	79bb      	ldrb	r3, [r7, #6]
 8009a2e:	73fb      	strb	r3, [r7, #15]
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	09db      	lsrs	r3, r3, #7
 8009a34:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8009a36:	4a4f      	ldr	r2, [pc, #316]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d01e      	beq.n	8009a82 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <usbd_control_xfer_cb+0x48>
 8009a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b78 <usbd_control_xfer_cb+0x160>)
 8009a4c:	613b      	str	r3, [r7, #16]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d000      	beq.n	8009a5c <usbd_control_xfer_cb+0x44>
 8009a5a:	be00      	bkpt	0x0000
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e084      	b.n	8009b6a <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	4944      	ldr	r1, [pc, #272]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fe97 	bl	8009798 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8009a6a:	4b42      	ldr	r3, [pc, #264]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8009a72:	4b40      	ldr	r3, [pc, #256]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	79f8      	ldrb	r0, [r7, #7]
 8009a78:	4a3e      	ldr	r2, [pc, #248]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a7a:	2103      	movs	r1, #3
 8009a7c:	4798      	blx	r3
    }

    return true;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e073      	b.n	8009b6a <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8009a82:	4b3c      	ldr	r3, [pc, #240]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10c      	bne.n	8009aaa <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8009a90:	4b38      	ldr	r3, [pc, #224]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <usbd_control_xfer_cb+0x84>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e066      	b.n	8009b6a <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8009a9c:	4b35      	ldr	r3, [pc, #212]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	4936      	ldr	r1, [pc, #216]	@ (8009b7c <usbd_control_xfer_cb+0x164>)
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f002 fbe0 	bl	800c26a <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8009aaa:	4b32      	ldr	r3, [pc, #200]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009aac:	89da      	ldrh	r2, [r3, #14]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009ab8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8009aba:	4b2e      	ldr	r3, [pc, #184]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009ac4:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8009ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009ac8:	88da      	ldrh	r2, [r3, #6]
 8009aca:	4b2a      	ldr	r3, [pc, #168]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009acc:	89db      	ldrh	r3, [r3, #14]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d002      	beq.n	8009ad8 <usbd_control_xfer_cb+0xc0>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ad6:	d831      	bhi.n	8009b3c <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8009adc:	4b25      	ldr	r3, [pc, #148]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8009ae4:	4b23      	ldr	r3, [pc, #140]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	79f8      	ldrb	r0, [r7, #7]
 8009aea:	4a22      	ldr	r2, [pc, #136]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009aec:	2102      	movs	r1, #2
 8009aee:	4798      	blx	r3
 8009af0:	4603      	mov	r3, r0
 8009af2:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8009af4:	7ffb      	ldrb	r3, [r7, #31]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d015      	beq.n	8009b26 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	491d      	ldr	r1, [pc, #116]	@ (8009b74 <usbd_control_xfer_cb+0x15c>)
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fe56 	bl	80097b0 <status_stage_xact>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f083 0301 	eor.w	r3, r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d02a      	beq.n	8009b66 <usbd_control_xfer_cb+0x14e>
 8009b10:	4b19      	ldr	r3, [pc, #100]	@ (8009b78 <usbd_control_xfer_cb+0x160>)
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d000      	beq.n	8009b22 <usbd_control_xfer_cb+0x10a>
 8009b20:	be00      	bkpt	0x0000
 8009b22:	2300      	movs	r3, #0
 8009b24:	e021      	b.n	8009b6a <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 ff30 	bl	800a990 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2180      	movs	r1, #128	@ 0x80
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 ff2b 	bl	800a990 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8009b3a:	e014      	b.n	8009b66 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fe72 	bl	8009828 <data_stage_xact>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f083 0301 	eor.w	r3, r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <usbd_control_xfer_cb+0x150>
 8009b50:	4b09      	ldr	r3, [pc, #36]	@ (8009b78 <usbd_control_xfer_cb+0x160>)
 8009b52:	61bb      	str	r3, [r7, #24]
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d000      	beq.n	8009b62 <usbd_control_xfer_cb+0x14a>
 8009b60:	be00      	bkpt	0x0000
 8009b62:	2300      	movs	r3, #0
 8009b64:	e001      	b.n	8009b6a <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8009b66:	bf00      	nop
  }

  return true;
 8009b68:	2301      	movs	r3, #1
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200011dc 	.word	0x200011dc
 8009b78:	e000edf0 	.word	0xe000edf0
 8009b7c:	200011f0 	.word	0x200011f0

08009b80 <__NVIC_EnableIRQ>:
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	db0b      	blt.n	8009baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	f003 021f 	and.w	r2, r3, #31
 8009b98:	4907      	ldr	r1, [pc, #28]	@ (8009bb8 <__NVIC_EnableIRQ+0x38>)
 8009b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009baa:	bf00      	nop
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	e000e100 	.word	0xe000e100

08009bbc <__NVIC_DisableIRQ>:
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db12      	blt.n	8009bf4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	f003 021f 	and.w	r2, r3, #31
 8009bd4:	490a      	ldr	r1, [pc, #40]	@ (8009c00 <__NVIC_DisableIRQ+0x44>)
 8009bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	2001      	movs	r0, #1
 8009bde:	fa00 f202 	lsl.w	r2, r0, r2
 8009be2:	3320      	adds	r3, #32
 8009be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009be8:	f3bf 8f4f 	dsb	sy
}
 8009bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009bee:	f3bf 8f6f 	isb	sy
}
 8009bf2:	bf00      	nop
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	e000e100 	.word	0xe000e100

08009c04 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c1c:	7afb      	ldrb	r3, [r7, #11]
 8009c1e:	4a13      	ldr	r2, [pc, #76]	@ (8009c6c <dma_setup_prepare+0x68>)
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	4413      	add	r3, r2
 8009c24:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009c26:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2c:	4a10      	ldr	r2, [pc, #64]	@ (8009c70 <dma_setup_prepare+0x6c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d904      	bls.n	8009c3c <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db10      	blt.n	8009c5e <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8009c74 <dma_setup_prepare+0x70>)
 8009c40:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8009c44:	4a0c      	ldr	r2, [pc, #48]	@ (8009c78 <dma_setup_prepare+0x74>)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009c52:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8009c5c:	e000      	b.n	8009c60 <dma_setup_prepare+0x5c>
      return;
 8009c5e:	bf00      	nop
}
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	0800dce4 	.word	0x0800dce4
 8009c70:	4f543009 	.word	0x4f543009
 8009c74:	20080008 	.word	0x20080008
 8009c78:	200012b8 	.word	0x200012b8

08009c7c <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b091      	sub	sp, #68	@ 0x44
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
 8009c86:	460b      	mov	r3, r1
 8009c88:	71bb      	strb	r3, [r7, #6]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80bb      	strh	r3, [r7, #4]
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c92:	7e7b      	ldrb	r3, [r7, #25]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <dfifo_alloc+0x20>
    rhport = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c9c:	7e7b      	ldrb	r3, [r7, #25]
 8009c9e:	4a65      	ldr	r2, [pc, #404]	@ (8009e34 <dfifo_alloc+0x1b8>)
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	4413      	add	r3, r2
 8009ca4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	4a61      	ldr	r2, [pc, #388]	@ (8009e34 <dfifo_alloc+0x1b8>)
 8009cae:	4413      	add	r3, r2
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb4:	7a1b      	ldrb	r3, [r3, #8]
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009cba:	79bb      	ldrb	r3, [r7, #6]
 8009cbc:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009cbe:	7ebb      	ldrb	r3, [r7, #26]
 8009cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc4:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009cc6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8009cca:	79bb      	ldrb	r3, [r7, #6]
 8009ccc:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009cce:	7efb      	ldrb	r3, [r7, #27]
 8009cd0:	09db      	lsrs	r3, r3, #7
 8009cd2:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8009cd4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8009cd8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8009cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d30a      	bcc.n	8009cfa <dfifo_alloc+0x7e>
 8009ce4:	4b54      	ldr	r3, [pc, #336]	@ (8009e38 <dfifo_alloc+0x1bc>)
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d000      	beq.n	8009cf6 <dfifo_alloc+0x7a>
 8009cf4:	be00      	bkpt	0x0000
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e095      	b.n	8009e26 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8009cfa:	88bb      	ldrh	r3, [r7, #4]
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	2304      	movs	r3, #4
 8009d00:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	1e5a      	subs	r2, r3, #1
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8009d12:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d12a      	bne.n	8009d70 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009d1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	81fb      	strh	r3, [r7, #14]
 8009d22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009d26:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	089b      	lsrs	r3, r3, #2
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f103 0208 	add.w	r2, r3, #8
 8009d32:	7b7b      	ldrb	r3, [r7, #13]
 8009d34:	4413      	add	r3, r2
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009d3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d26d      	bcs.n	8009e24 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8009d48:	4b3c      	ldr	r3, [pc, #240]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009d4a:	889b      	ldrh	r3, [r3, #4]
 8009d4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d90a      	bls.n	8009d68 <dfifo_alloc+0xec>
 8009d52:	4b39      	ldr	r3, [pc, #228]	@ (8009e38 <dfifo_alloc+0x1bc>)
 8009d54:	623b      	str	r3, [r7, #32]
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d000      	beq.n	8009d64 <dfifo_alloc+0xe8>
 8009d62:	be00      	bkpt	0x0000
 8009d64:	2300      	movs	r3, #0
 8009d66:	e05e      	b.n	8009e26 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8009d68:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d6e:	e059      	b.n	8009e24 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	7a5b      	ldrb	r3, [r3, #9]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d016      	beq.n	8009da6 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8009d78:	4b30      	ldr	r3, [pc, #192]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009d7a:	799a      	ldrb	r2, [r3, #6]
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7e:	7a5b      	ldrb	r3, [r3, #9]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d30a      	bcc.n	8009d9a <dfifo_alloc+0x11e>
 8009d84:	4b2c      	ldr	r3, [pc, #176]	@ (8009e38 <dfifo_alloc+0x1bc>)
 8009d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d000      	beq.n	8009d96 <dfifo_alloc+0x11a>
 8009d94:	be00      	bkpt	0x0000
 8009d96:	2300      	movs	r3, #0
 8009d98:	e045      	b.n	8009e26 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8009d9a:	4b28      	ldr	r3, [pc, #160]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009d9c:	799b      	ldrb	r3, [r3, #6]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	4b26      	ldr	r3, [pc, #152]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009da4:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8009db2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8009db8:	4b20      	ldr	r3, [pc, #128]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009dba:	889b      	ldrh	r3, [r3, #4]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	4413      	add	r3, r2
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d20a      	bcs.n	8009de0 <dfifo_alloc+0x164>
 8009dca:	4b1b      	ldr	r3, [pc, #108]	@ (8009e38 <dfifo_alloc+0x1bc>)
 8009dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d000      	beq.n	8009ddc <dfifo_alloc+0x160>
 8009dda:	be00      	bkpt	0x0000
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e022      	b.n	8009e26 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8009de0:	4b16      	ldr	r3, [pc, #88]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009de2:	889a      	ldrh	r2, [r3, #4]
 8009de4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	4b14      	ldr	r3, [pc, #80]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009dec:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8009dee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d108      	bne.n	8009e08 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8009df6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009df8:	041b      	lsls	r3, r3, #16
 8009dfa:	4a10      	ldr	r2, [pc, #64]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009dfc:	8892      	ldrh	r2, [r2, #4]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	461a      	mov	r2, r3
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e06:	e00d      	b.n	8009e24 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8009e08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009e0a:	041b      	lsls	r3, r3, #16
 8009e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8009e3c <dfifo_alloc+0x1c0>)
 8009e0e:	8892      	ldrh	r2, [r2, #4]
 8009e10:	431a      	orrs	r2, r3
 8009e12:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8009e16:	3b01      	subs	r3, #1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e1c:	3340      	adds	r3, #64	@ 0x40
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8009e24:	2301      	movs	r3, #1
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3744      	adds	r7, #68	@ 0x44
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	0800dce4 	.word	0x0800dce4
 8009e38:	e000edf0 	.word	0xe000edf0
 8009e3c:	200012b0 	.word	0x200012b0

08009e40 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	4a27      	ldr	r2, [pc, #156]	@ (8009eec <dfifo_device_init+0xac>)
 8009e50:	4413      	add	r3, r2
 8009e52:	61fb      	str	r3, [r7, #28]
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009e58:	7b3b      	ldrb	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <dfifo_device_init+0x22>
    rhport = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009e62:	7b3b      	ldrb	r3, [r7, #12]
 8009e64:	4a21      	ldr	r2, [pc, #132]	@ (8009eec <dfifo_device_init+0xac>)
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	4413      	add	r3, r2
 8009e6a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009e6c:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	7a1b      	ldrb	r3, [r3, #8]
 8009e72:	2240      	movs	r2, #64	@ 0x40
 8009e74:	81fa      	strh	r2, [r7, #14]
 8009e76:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009e78:	89fb      	ldrh	r3, [r7, #14]
 8009e7a:	089b      	lsrs	r3, r3, #2
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f103 0208 	add.w	r2, r3, #8
 8009e82:	7b7b      	ldrb	r3, [r7, #13]
 8009e84:	4413      	add	r3, r2
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e9a:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009e9c:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8009e9e:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	089b      	lsrs	r3, r3, #2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	4b11      	ldr	r3, [pc, #68]	@ (8009ef0 <dfifo_device_init+0xb0>)
 8009eaa:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8009eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef0 <dfifo_device_init+0xb0>)
 8009eb4:	889a      	ldrh	r2, [r3, #4]
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	7a1b      	ldrb	r3, [r3, #8]
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <dfifo_device_init+0xb0>)
 8009ec4:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef0 <dfifo_device_init+0xb0>)
 8009ec8:	889b      	ldrh	r3, [r3, #4]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4613      	mov	r3, r2
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	441a      	add	r2, r3
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	2240      	movs	r2, #64	@ 0x40
 8009eda:	2180      	movs	r1, #128	@ 0x80
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff fecd 	bl	8009c7c <dfifo_alloc>
}
 8009ee2:	bf00      	nop
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	0800dce4 	.word	0x0800dce4
 8009ef0:	200012b0 	.word	0x200012b0

08009ef4 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8009ef4:	b480      	push	{r7}
 8009ef6:	b08b      	sub	sp, #44	@ 0x2c
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	6039      	str	r1, [r7, #0]
 8009efe:	71fb      	strb	r3, [r7, #7]
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009f04:	7c7b      	ldrb	r3, [r7, #17]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <edpt_activate+0x1a>
    rhport = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009f0e:	7c7b      	ldrb	r3, [r7, #17]
 8009f10:	4a45      	ldr	r2, [pc, #276]	@ (800a028 <edpt_activate+0x134>)
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	4413      	add	r3, r2
 8009f16:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009f18:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	789b      	ldrb	r3, [r3, #2]
 8009f1e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f20:	7cbb      	ldrb	r3, [r7, #18]
 8009f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	789b      	ldrb	r3, [r3, #2]
 8009f30:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f32:	7cfb      	ldrb	r3, [r7, #19]
 8009f34:	09db      	lsrs	r3, r3, #7
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009f3c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009f40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009f44:	0052      	lsls	r2, r2, #1
 8009f46:	4413      	add	r3, r2
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	4a38      	ldr	r2, [pc, #224]	@ (800a02c <edpt_activate+0x138>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	889b      	ldrh	r3, [r3, #4]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f5e:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	799a      	ldrb	r2, [r3, #6]
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	895b      	ldrh	r3, [r3, #10]
 8009f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	89bb      	ldrh	r3, [r7, #12]
 8009f7c:	f362 030a 	bfi	r3, r2, #0, #11
 8009f80:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8009f82:	7b7b      	ldrb	r3, [r7, #13]
 8009f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f88:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f362 0383 	bfi	r3, r2, #2, #2
 8009f9a:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	78db      	ldrb	r3, [r3, #3]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d003      	beq.n	8009fb2 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	f043 0310 	orr.w	r3, r3, #16
 8009fb0:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8009fb2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d108      	bne.n	8009fcc <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8009fba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fbe:	f003 030f 	and.w	r3, r3, #15
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	89fb      	ldrh	r3, [r7, #14]
 8009fc6:	f362 1389 	bfi	r3, r2, #6, #4
 8009fca:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	bf14      	ite	ne
 8009fd4:	2301      	movne	r3, #1
 8009fd6:	2300      	moveq	r3, #0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fe0:	0112      	lsls	r2, r2, #4
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3348      	adds	r3, #72	@ 0x48
 8009fe6:	015b      	lsls	r3, r3, #5
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fea:	4413      	add	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8009ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ffe:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800a002:	2901      	cmp	r1, #1
 800a004:	d101      	bne.n	800a00a <edpt_activate+0x116>
 800a006:	2100      	movs	r1, #0
 800a008:	e000      	b.n	800a00c <edpt_activate+0x118>
 800a00a:	2110      	movs	r1, #16
 800a00c:	440b      	add	r3, r1
 800a00e:	2101      	movs	r1, #1
 800a010:	fa01 f303 	lsl.w	r3, r1, r3
 800a014:	431a      	orrs	r2, r3
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800a01c:	bf00      	nop
 800a01e:	372c      	adds	r7, #44	@ 0x2c
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	0800dce4 	.word	0x0800dce4
 800a02c:	20001230 	.word	0x20001230

0800a030 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	@ 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
 800a03a:	460b      	mov	r3, r1
 800a03c:	71bb      	strb	r3, [r7, #6]
 800a03e:	4613      	mov	r3, r2
 800a040:	717b      	strb	r3, [r7, #5]
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a046:	7c7b      	ldrb	r3, [r7, #17]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <edpt_disable+0x20>
    rhport = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a050:	7c7b      	ldrb	r3, [r7, #17]
 800a052:	4a5b      	ldr	r2, [pc, #364]	@ (800a1c0 <edpt_disable+0x190>)
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	4413      	add	r3, r2
 800a058:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	79bb      	ldrb	r3, [r7, #6]
 800a05e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a060:	7cbb      	ldrb	r3, [r7, #18]
 800a062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a066:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a068:	76fb      	strb	r3, [r7, #27]
 800a06a:	79bb      	ldrb	r3, [r7, #6]
 800a06c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a06e:	7cfb      	ldrb	r3, [r7, #19]
 800a070:	09db      	lsrs	r3, r3, #7
 800a072:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a074:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a076:	7ebb      	ldrb	r3, [r7, #26]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	bf14      	ite	ne
 800a07c:	2301      	movne	r3, #1
 800a07e:	2300      	moveq	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	461a      	mov	r2, r3
 800a084:	7efb      	ldrb	r3, [r7, #27]
 800a086:	0112      	lsls	r2, r2, #4
 800a088:	4413      	add	r3, r2
 800a08a:	3348      	adds	r3, #72	@ 0x48
 800a08c:	015b      	lsls	r3, r3, #5
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800a094:	7ebb      	ldrb	r3, [r7, #26]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d149      	bne.n	800a12e <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800a09a:	7efb      	ldrb	r3, [r7, #27]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <edpt_disable+0x78>
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	db0d      	blt.n	800a0c4 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	797a      	ldrb	r2, [r7, #5]
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	d002      	beq.n	800a0b8 <edpt_disable+0x88>
 800a0b2:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800a0b6:	e001      	b.n	800a0bc <edpt_disable+0x8c>
 800a0b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e022      	b.n	800a10a <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800a0d0:	bf00      	nop
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f9      	beq.n	800a0d2 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	797a      	ldrb	r2, [r7, #5]
 800a0e4:	2a00      	cmp	r2, #0
 800a0e6:	d001      	beq.n	800a0ec <edpt_disable+0xbc>
 800a0e8:	4a36      	ldr	r2, [pc, #216]	@ (800a1c4 <edpt_disable+0x194>)
 800a0ea:	e001      	b.n	800a0f0 <edpt_disable+0xc0>
 800a0ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800a0f6:	bf00      	nop
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0f9      	beq.n	800a0f8 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2202      	movs	r2, #2
 800a108:	609a      	str	r2, [r3, #8]
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	7efb      	ldrb	r3, [r7, #27]
 800a110:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	019b      	lsls	r3, r3, #6
 800a116:	f043 0220 	orr.w	r2, r3, #32
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a11e:	bf00      	nop
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f9      	bne.n	800a120 <edpt_disable+0xf0>
}
 800a12c:	e041      	b.n	800a1b2 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800a12e:	7efb      	ldrb	r3, [r7, #27]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <edpt_disable+0x10c>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	db0c      	blt.n	800a156 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	797a      	ldrb	r2, [r7, #5]
 800a142:	2a00      	cmp	r2, #0
 800a144:	d002      	beq.n	800a14c <edpt_disable+0x11c>
 800a146:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a14a:	e000      	b.n	800a14e <edpt_disable+0x11e>
 800a14c:	2200      	movs	r2, #0
 800a14e:	431a      	orrs	r2, r3
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e02d      	b.n	800a1b2 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a15c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800a166:	bf00      	nop
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0f9      	beq.n	800a168 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	797a      	ldrb	r2, [r7, #5]
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d001      	beq.n	800a182 <edpt_disable+0x152>
 800a17e:	4a11      	ldr	r2, [pc, #68]	@ (800a1c4 <edpt_disable+0x194>)
 800a180:	e001      	b.n	800a186 <edpt_disable+0x156>
 800a182:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a186:	431a      	orrs	r2, r3
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800a18c:	bf00      	nop
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f9      	beq.n	800a18e <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2202      	movs	r2, #2
 800a19e:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a1a6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	3724      	adds	r7, #36	@ 0x24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	0800dce4 	.word	0x0800dce4
 800a1c4:	40200000 	.word	0x40200000

0800a1c8 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b090      	sub	sp, #64	@ 0x40
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	71bb      	strb	r3, [r7, #6]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	717b      	strb	r3, [r7, #5]
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a1e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <edpt_schedule_packets+0x26>
    rhport = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a1ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a1f2:	4a65      	ldr	r2, [pc, #404]	@ (800a388 <edpt_schedule_packets+0x1c0>)
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	4413      	add	r3, r2
 800a1f8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800a1fc:	79ba      	ldrb	r2, [r7, #6]
 800a1fe:	797b      	ldrb	r3, [r7, #5]
 800a200:	0052      	lsls	r2, r2, #1
 800a202:	4413      	add	r3, r2
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	4a61      	ldr	r2, [pc, #388]	@ (800a38c <edpt_schedule_packets+0x1c4>)
 800a208:	4413      	add	r3, r2
 800a20a:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a20c:	797b      	ldrb	r3, [r7, #5]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	bf14      	ite	ne
 800a212:	2301      	movne	r3, #1
 800a214:	2300      	moveq	r3, #0
 800a216:	b2db      	uxtb	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	79bb      	ldrb	r3, [r7, #6]
 800a21c:	0112      	lsls	r2, r2, #4
 800a21e:	4413      	add	r3, r2
 800a220:	3348      	adds	r3, #72	@ 0x48
 800a222:	015b      	lsls	r3, r3, #5
 800a224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a226:	4413      	add	r3, r2
 800a228:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800a22a:	79bb      	ldrb	r3, [r7, #6]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d11c      	bne.n	800a26a <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800a230:	797b      	ldrb	r3, [r7, #5]
 800a232:	4a57      	ldr	r2, [pc, #348]	@ (800a390 <edpt_schedule_packets+0x1c8>)
 800a234:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23a:	895b      	ldrh	r3, [r3, #10]
 800a23c:	853a      	strh	r2, [r7, #40]	@ 0x28
 800a23e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a240:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a242:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a244:	4293      	cmp	r3, r2
 800a246:	bf28      	it	cs
 800a248:	4613      	movcs	r3, r2
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800a24e:	797b      	ldrb	r3, [r7, #5]
 800a250:	4a4f      	ldr	r2, [pc, #316]	@ (800a390 <edpt_schedule_packets+0x1c8>)
 800a252:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800a256:	797b      	ldrb	r3, [r7, #5]
 800a258:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a25a:	1a8a      	subs	r2, r1, r2
 800a25c:	b291      	uxth	r1, r2
 800a25e:	4a4c      	ldr	r2, [pc, #304]	@ (800a390 <edpt_schedule_packets+0x1c8>)
 800a260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800a264:	2301      	movs	r3, #1
 800a266:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a268:	e014      	b.n	800a294 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800a270:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a274:	8952      	ldrh	r2, [r2, #10]
 800a276:	623b      	str	r3, [r7, #32]
 800a278:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	4413      	add	r3, r2
 800a280:	1e5a      	subs	r2, r3, #1
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	fbb2 f3f3 	udiv	r3, r2, r3
 800a288:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800a28a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800a290:	2301      	movs	r3, #1
 800a292:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800a294:	2300      	movs	r3, #0
 800a296:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800a298:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a29a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f362 0312 	bfi	r3, r2, #0, #19
 800a2a4:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800a2a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a2a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	8afb      	ldrh	r3, [r7, #22]
 800a2b0:	f362 03cc 	bfi	r3, r2, #3, #10
 800a2b4:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800a2c2:	7cfb      	ldrb	r3, [r7, #19]
 800a2c4:	f043 0304 	orr.w	r3, r3, #4
 800a2c8:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800a2ca:	7cfb      	ldrb	r3, [r7, #19]
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d0:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800a2d2:	7cbb      	ldrb	r3, [r7, #18]
 800a2d4:	f003 030c 	and.w	r3, r3, #12
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d11a      	bne.n	800a314 <edpt_schedule_packets+0x14c>
 800a2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e0:	7b1b      	ldrb	r3, [r3, #12]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d116      	bne.n	800a314 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a2ec:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d004      	beq.n	800a30c <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800a302:	7cfb      	ldrb	r3, [r7, #19]
 800a304:	f043 0310 	orr.w	r3, r3, #16
 800a308:	74fb      	strb	r3, [r7, #19]
 800a30a:	e003      	b.n	800a314 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800a30c:	7cfb      	ldrb	r3, [r7, #19]
 800a30e:	f043 0320 	orr.w	r3, r3, #32
 800a312:	74fb      	strb	r3, [r7, #19]
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a31c:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a31e:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800a320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800a324:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d015      	beq.n	800a358 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800a32c:	797b      	ldrb	r3, [r7, #5]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d109      	bne.n	800a346 <edpt_schedule_packets+0x17e>
 800a332:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a334:	2b00      	cmp	r3, #0
 800a336:	d006      	beq.n	800a346 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7fd fd5c 	bl	8007dfe <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800a346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800a356:	e013      	b.n	800a380 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800a35e:	797b      	ldrb	r3, [r7, #5]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d10d      	bne.n	800a380 <edpt_schedule_packets+0x1b8>
 800a364:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800a36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a370:	79ba      	ldrb	r2, [r7, #6]
 800a372:	2101      	movs	r1, #1
 800a374:	fa01 f202 	lsl.w	r2, r1, r2
 800a378:	431a      	orrs	r2, r3
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800a380:	bf00      	nop
 800a382:	3740      	adds	r7, #64	@ 0x40
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	0800dce4 	.word	0x0800dce4
 800a38c:	20001230 	.word	0x20001230
 800a390:	200012b0 	.word	0x200012b0

0800a394 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800a394:	b580      	push	{r7, lr}
 800a396:	b08c      	sub	sp, #48	@ 0x30
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <dcd_init+0x1a>
    rhport = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	4a43      	ldr	r2, [pc, #268]	@ (800a4c0 <dcd_init+0x12c>)
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	4413      	add	r3, r2
 800a3b6:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a3b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4841      	ldr	r0, [pc, #260]	@ (800a4c4 <dcd_init+0x130>)
 800a3c0:	f001 fe7b 	bl	800c0ba <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c8:	f001 f9c6 	bl	800b758 <dwc2_core_is_highspeed>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d4:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3da:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a3dc:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a3de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800a3e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a3e6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 f9d1 	bl	800b794 <dwc2_core_init>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f083 0301 	eor.w	r3, r3, #1
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <dcd_init+0x80>
 800a3fe:	4b32      	ldr	r3, [pc, #200]	@ (800a4c8 <dcd_init+0x134>)
 800a400:	61fb      	str	r3, [r7, #28]
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d000      	beq.n	800a410 <dcd_init+0x7c>
 800a40e:	be00      	bkpt	0x0000
 800a410:	2300      	movs	r3, #0
 800a412:	e050      	b.n	800a4b6 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a41a:	f023 0303 	bic.w	r3, r3, #3
 800a41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800a420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00d      	beq.n	800a444 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a42c:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a42e:	7b3b      	ldrb	r3, [r7, #12]
 800a430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b80      	cmp	r3, #128	@ 0x80
 800a438:	d108      	bne.n	800a44c <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800a43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a442:	e003      	b.n	800a44c <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800a444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a446:	f043 0303 	orr.w	r3, r3, #3
 800a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44e:	f043 0304 	orr.w	r3, r3, #4
 800a452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a458:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f92a 	bl	800a6b8 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a46c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800a47c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800a480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a482:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	699a      	ldr	r2, [r3, #24]
 800a488:	4b10      	ldr	r3, [pc, #64]	@ (800a4cc <dcd_init+0x138>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a48e:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a49c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	6a3a      	ldr	r2, [r7, #32]
 800a4aa:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f8e0 	bl	800a674 <dcd_connect>
  return true;
 800a4b4:	2301      	movs	r3, #1
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3730      	adds	r7, #48	@ 0x30
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800dce4 	.word	0x0800dce4
 800a4c4:	200012b0 	.word	0x200012b0
 800a4c8:	e000edf0 	.word	0xe000edf0
 800a4cc:	80003804 	.word	0x80003804

0800a4d0 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	2301      	movs	r3, #1
 800a4e0:	73bb      	strb	r3, [r7, #14]
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a51c <dcd_int_enable+0x4c>)
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	4413      	add	r3, r2
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800a4f4:	7b7b      	ldrb	r3, [r7, #13]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800a4fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fb3e 	bl	8009b80 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800a504:	e004      	b.n	800a510 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800a506:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fb56 	bl	8009bbc <__NVIC_DisableIRQ>
}
 800a510:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800dce4 	.word	0x0800dce4

0800a520 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	71fb      	strb	r3, [r7, #7]
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	73fb      	strb	r3, [r7, #15]
 800a52e:	2301      	movs	r3, #1
 800a530:	73bb      	strb	r3, [r7, #14]
 800a532:	2300      	movs	r3, #0
 800a534:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	4a0c      	ldr	r2, [pc, #48]	@ (800a56c <dcd_int_disable+0x4c>)
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800a544:	7b7b      	ldrb	r3, [r7, #13]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800a54a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fb16 	bl	8009b80 <__NVIC_EnableIRQ>
}
 800a554:	e004      	b.n	800a560 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800a556:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7ff fb2e 	bl	8009bbc <__NVIC_DisableIRQ>
}
 800a560:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	0800dce4 	.word	0x0800dce4

0800a570 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	460a      	mov	r2, r1
 800a57a:	71fb      	strb	r3, [r7, #7]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71bb      	strb	r3, [r7, #6]
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a584:	7a7b      	ldrb	r3, [r7, #9]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <dcd_set_address+0x1e>
    rhport = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a58e:	7a7b      	ldrb	r3, [r7, #9]
 800a590:	4a14      	ldr	r2, [pc, #80]	@ (800a5e4 <dcd_set_address+0x74>)
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	4413      	add	r3, r2
 800a596:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a598:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a5a0:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800a5a4:	79bb      	ldrb	r3, [r7, #6]
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	72fb      	strb	r3, [r7, #11]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800a5b8:	7abb      	ldrb	r3, [r7, #10]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <dcd_set_address+0x54>
 800a5be:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800a5c2:	e000      	b.n	800a5c6 <dcd_set_address+0x56>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	b25b      	sxtb	r3, r3
 800a5ce:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800a5d0:	79f8      	ldrb	r0, [r7, #7]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f000 f98b 	bl	800a8f0 <dcd_edpt_xfer>
}
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800dce4 	.word	0x0800dce4

0800a5e8 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	71fb      	strb	r3, [r7, #7]
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	4a19      	ldr	r2, [pc, #100]	@ (800a668 <dcd_remote_wakeup+0x80>)
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	4413      	add	r3, r2
 800a608:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a60a:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a612:	f043 0201 	orr.w	r2, r3, #1
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2208      	movs	r2, #8
 800a620:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	f043 0208 	orr.w	r2, r3, #8
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800a62e:	4b0f      	ldr	r3, [pc, #60]	@ (800a66c <dcd_remote_wakeup+0x84>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a0f      	ldr	r2, [pc, #60]	@ (800a670 <dcd_remote_wakeup+0x88>)
 800a634:	fba2 2303 	umull	r2, r3, r2, r3
 800a638:	099b      	lsrs	r3, r3, #6
 800a63a:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800a63c:	e000      	b.n	800a640 <dcd_remote_wakeup+0x58>
 800a63e:	bf00      	nop
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	1e5a      	subs	r2, r3, #1
 800a644:	613a      	str	r2, [r7, #16]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f9      	bne.n	800a63e <dcd_remote_wakeup+0x56>
}
 800a64a:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a652:	f023 0201 	bic.w	r2, r3, #1
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	0800dce4 	.word	0x0800dce4
 800a66c:	20000108 	.word	0x20000108
 800a670:	10624dd3 	.word	0x10624dd3

0800a674 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <dcd_connect+0x18>
    rhport = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	4a09      	ldr	r2, [pc, #36]	@ (800a6b4 <dcd_connect+0x40>)
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4413      	add	r3, r2
 800a694:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a696:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a69e:	f023 0202 	bic.w	r2, r3, #2
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a6a8:	bf00      	nop
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	0800dce4 	.word	0x0800dce4

0800a6b8 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <dcd_disconnect+0x18>
    rhport = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	4a09      	ldr	r2, [pc, #36]	@ (800a6f8 <dcd_disconnect+0x40>)
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	4413      	add	r3, r2
 800a6d8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a6da:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a6e2:	f043 0202 	orr.w	r2, r3, #2
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a6ec:	bf00      	nop
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	0800dce4 	.word	0x0800dce4

0800a6fc <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	460a      	mov	r2, r1
 800a706:	71fb      	strb	r3, [r7, #7]
 800a708:	4613      	mov	r3, r2
 800a70a:	71bb      	strb	r3, [r7, #6]
 800a70c:	79fb      	ldrb	r3, [r7, #7]
 800a70e:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a710:	7afb      	ldrb	r3, [r7, #11]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <dcd_sof_enable+0x1e>
    rhport = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	4a10      	ldr	r2, [pc, #64]	@ (800a760 <dcd_sof_enable+0x64>)
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	4413      	add	r3, r2
 800a722:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a724:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800a726:	4a0f      	ldr	r2, [pc, #60]	@ (800a764 <dcd_sof_enable+0x68>)
 800a728:	79bb      	ldrb	r3, [r7, #6]
 800a72a:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800a72c:	79bb      	ldrb	r3, [r7, #6]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2208      	movs	r2, #8
 800a736:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f043 0208 	orr.w	r2, r3, #8
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800a744:	e005      	b.n	800a752 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	f023 0208 	bic.w	r2, r3, #8
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	619a      	str	r2, [r3, #24]
}
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	0800dce4 	.word	0x0800dce4
 800a764:	200012b0 	.word	0x200012b0

0800a768 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	7899      	ldrb	r1, [r3, #2]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	889b      	ldrh	r3, [r3, #4]
 800a780:	b29b      	uxth	r3, r3
 800a782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a786:	b29a      	uxth	r2, r3
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fa76 	bl	8009c7c <dfifo_alloc>
 800a790:	4603      	mov	r3, r0
 800a792:	f083 0301 	eor.w	r3, r3, #1
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <dcd_edpt_open+0x4a>
 800a79c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <dcd_edpt_open+0x60>)
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d000      	beq.n	800a7ae <dcd_edpt_open+0x46>
 800a7ac:	be00      	bkpt	0x0000
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e005      	b.n	800a7be <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fb9c 	bl	8009ef4 <edpt_activate>
  return true;
 800a7bc:	2301      	movs	r3, #1
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	e000edf0 	.word	0xe000edf0

0800a7cc <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08a      	sub	sp, #40	@ 0x28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8e4 <dcd_edpt_close_all+0x118>)
 800a7e8:	011b      	lsls	r3, r3, #4
 800a7ea:	4413      	add	r3, r2
 800a7ec:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a7ee:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	4a3c      	ldr	r2, [pc, #240]	@ (800a8e4 <dcd_edpt_close_all+0x118>)
 800a7f4:	011b      	lsls	r3, r3, #4
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800a7fe:	2000      	movs	r0, #0
 800a800:	f7fe fd4a 	bl	8009298 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800a804:	4b38      	ldr	r3, [pc, #224]	@ (800a8e8 <dcd_edpt_close_all+0x11c>)
 800a806:	2200      	movs	r2, #0
 800a808:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800a810:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800a814:	2301      	movs	r3, #1
 800a816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a81a:	e034      	b.n	800a886 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a822:	e027      	b.n	800a874 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800a824:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a82c:	0112      	lsls	r2, r2, #4
 800a82e:	4413      	add	r3, r2
 800a830:	3348      	adds	r3, #72	@ 0x48
 800a832:	015b      	lsls	r3, r3, #5
 800a834:	6a3a      	ldr	r2, [r7, #32]
 800a836:	4413      	add	r3, r2
 800a838:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da05      	bge.n	800a84e <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800a84e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a856:	f1c3 0301 	rsb	r3, r3, #1
 800a85a:	4924      	ldr	r1, [pc, #144]	@ (800a8ec <dcd_edpt_close_all+0x120>)
 800a85c:	0052      	lsls	r2, r2, #1
 800a85e:	4413      	add	r3, r2
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	440b      	add	r3, r1
 800a864:	330a      	adds	r3, #10
 800a866:	2200      	movs	r2, #0
 800a868:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800a86a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a86e:	3301      	adds	r3, #1
 800a870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a874:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d9d3      	bls.n	800a824 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800a87c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a880:	3301      	adds	r3, #1
 800a882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a886:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a88a:	7ffb      	ldrb	r3, [r7, #31]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d3c5      	bcc.n	800a81c <dcd_edpt_close_all+0x50>
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	2310      	movs	r3, #16
 800a896:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	019b      	lsls	r3, r3, #6
 800a89c:	f043 0220 	orr.w	r2, r3, #32
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a8a4:	bf00      	nop
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f9      	bne.n	800a8a6 <dcd_edpt_close_all+0xda>
}
 800a8b2:	bf00      	nop
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2210      	movs	r2, #16
 800a8bc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a8be:	bf00      	nop
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f9      	bne.n	800a8c0 <dcd_edpt_close_all+0xf4>
}
 800a8cc:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fab5 	bl	8009e40 <dfifo_device_init>

  usbd_spin_unlock(false);
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7fe fcf8 	bl	80092cc <usbd_spin_unlock>
}
 800a8dc:	bf00      	nop
 800a8de:	3728      	adds	r7, #40	@ 0x28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	0800dce4 	.word	0x0800dce4
 800a8e8:	200012b0 	.word	0x200012b0
 800a8ec:	20001230 	.word	0x20001230

0800a8f0 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	603a      	str	r2, [r7, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	71fb      	strb	r3, [r7, #7]
 800a8fe:	460b      	mov	r3, r1
 800a900:	71bb      	strb	r3, [r7, #6]
 800a902:	4613      	mov	r3, r2
 800a904:	80bb      	strh	r3, [r7, #4]
 800a906:	79bb      	ldrb	r3, [r7, #6]
 800a908:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a910:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a912:	75bb      	strb	r3, [r7, #22]
 800a914:	79bb      	ldrb	r3, [r7, #6]
 800a916:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	09db      	lsrs	r3, r3, #7
 800a91c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a91e:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800a920:	7dba      	ldrb	r2, [r7, #22]
 800a922:	7d7b      	ldrb	r3, [r7, #21]
 800a924:	0052      	lsls	r2, r2, #1
 800a926:	4413      	add	r3, r2
 800a928:	011b      	lsls	r3, r3, #4
 800a92a:	4a17      	ldr	r2, [pc, #92]	@ (800a988 <dcd_edpt_xfer+0x98>)
 800a92c:	4413      	add	r3, r2
 800a92e:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800a930:	2000      	movs	r0, #0
 800a932:	f7fe fcb1 	bl	8009298 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	895b      	ldrh	r3, [r3, #10]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800a93e:	2300      	movs	r3, #0
 800a940:	75fb      	strb	r3, [r7, #23]
 800a942:	e018      	b.n	800a976 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	88ba      	ldrh	r2, [r7, #4]
 800a954:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800a956:	7dbb      	ldrb	r3, [r7, #22]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800a95c:	7d7b      	ldrb	r3, [r7, #21]
 800a95e:	490b      	ldr	r1, [pc, #44]	@ (800a98c <dcd_edpt_xfer+0x9c>)
 800a960:	88ba      	ldrh	r2, [r7, #4]
 800a962:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800a966:	7d7a      	ldrb	r2, [r7, #21]
 800a968:	7db9      	ldrb	r1, [r7, #22]
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fc2b 	bl	800a1c8 <edpt_schedule_packets>
    ret = true;
 800a972:	2301      	movs	r3, #1
 800a974:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800a976:	2000      	movs	r0, #0
 800a978:	f7fe fca8 	bl	80092cc <usbd_spin_unlock>

  return ret;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20001230 	.word	0x20001230
 800a98c:	200012b0 	.word	0x200012b0

0800a990 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	460a      	mov	r2, r1
 800a99a:	71fb      	strb	r3, [r7, #7]
 800a99c:	4613      	mov	r3, r2
 800a99e:	71bb      	strb	r3, [r7, #6]
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a9a4:	7cbb      	ldrb	r3, [r7, #18]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <dcd_edpt_stall+0x1e>
    rhport = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a9ae:	7cbb      	ldrb	r3, [r7, #18]
 800a9b0:	4a11      	ldr	r2, [pc, #68]	@ (800a9f8 <dcd_edpt_stall+0x68>)
 800a9b2:	011b      	lsls	r3, r3, #4
 800a9b4:	4413      	add	r3, r2
 800a9b6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a9b8:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800a9ba:	79b9      	ldrb	r1, [r7, #6]
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fb35 	bl	800a030 <edpt_disable>
 800a9c6:	79bb      	ldrb	r3, [r7, #6]
 800a9c8:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a9ca:	7cfb      	ldrb	r3, [r7, #19]
 800a9cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9d0:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <dcd_edpt_stall+0x5e>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9de:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a9e0:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff f90b 	bl	8009c04 <dma_setup_prepare>
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800dce4 	.word	0x0800dce4

0800a9fc <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	460a      	mov	r2, r1
 800aa06:	71fb      	strb	r3, [r7, #7]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	71bb      	strb	r3, [r7, #6]
 800aa0c:	79fb      	ldrb	r3, [r7, #7]
 800aa0e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa10:	7a7b      	ldrb	r3, [r7, #9]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa1a:	7a7b      	ldrb	r3, [r7, #9]
 800aa1c:	4a19      	ldr	r2, [pc, #100]	@ (800aa84 <dcd_edpt_clear_stall+0x88>)
 800aa1e:	011b      	lsls	r3, r3, #4
 800aa20:	4413      	add	r3, r2
 800aa22:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	79bb      	ldrb	r3, [r7, #6]
 800aa28:	72bb      	strb	r3, [r7, #10]
 800aa2a:	7abb      	ldrb	r3, [r7, #10]
 800aa2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa30:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800aa32:	74fb      	strb	r3, [r7, #19]
 800aa34:	79bb      	ldrb	r3, [r7, #6]
 800aa36:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	09db      	lsrs	r3, r3, #7
 800aa3c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800aa3e:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800aa40:	7cbb      	ldrb	r3, [r7, #18]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	bf14      	ite	ne
 800aa46:	2301      	movne	r3, #1
 800aa48:	2300      	moveq	r3, #0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	7cfb      	ldrb	r3, [r7, #19]
 800aa50:	0112      	lsls	r2, r2, #4
 800aa52:	4413      	add	r3, r2
 800aa54:	3348      	adds	r3, #72	@ 0x48
 800aa56:	015b      	lsls	r3, r3, #5
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	601a      	str	r2, [r3, #0]
}
 800aa76:	bf00      	nop
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	0800dce4 	.word	0x0800dce4

0800aa88 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08e      	sub	sp, #56	@ 0x38
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <handle_bus_reset+0x1e>
    rhport = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aaa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaaa:	4a6a      	ldr	r2, [pc, #424]	@ (800ac54 <handle_bus_reset+0x1cc>)
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	4413      	add	r3, r2
 800aab0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800aab2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aabc:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800aabe:	7a7b      	ldrb	r3, [r7, #9]
 800aac0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	3301      	adds	r3, #1
 800aac8:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800aaca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800aace:	2280      	movs	r2, #128	@ 0x80
 800aad0:	2100      	movs	r1, #0
 800aad2:	4861      	ldr	r0, [pc, #388]	@ (800ac58 <handle_bus_reset+0x1d0>)
 800aad4:	f001 faf1 	bl	800c0ba <memset>

  _dcd_data.sof_en = false;
 800aad8:	4b60      	ldr	r3, [pc, #384]	@ (800ac5c <handle_bus_reset+0x1d4>)
 800aada:	2200      	movs	r2, #0
 800aadc:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800aade:	4b5f      	ldr	r3, [pc, #380]	@ (800ac5c <handle_bus_reset+0x1d4>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800aae4:	2300      	movs	r3, #0
 800aae6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aaea:	e014      	b.n	800ab16 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800aaec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aaf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf2:	3358      	adds	r3, #88	@ 0x58
 800aaf4:	015b      	lsls	r3, r3, #5
 800aaf6:	4413      	add	r3, r2
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aafe:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800ab02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab04:	3358      	adds	r3, #88	@ 0x58
 800ab06:	015b      	lsls	r3, r3, #5
 800ab08:	440b      	add	r3, r1
 800ab0a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800ab0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ab10:	3301      	adds	r3, #1
 800ab12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ab16:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ab1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d3e4      	bcc.n	800aaec <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800ab22:	2300      	movs	r3, #0
 800ab24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ab28:	e01d      	b.n	800ab66 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800ab2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab30:	3348      	adds	r3, #72	@ 0x48
 800ab32:	015b      	lsls	r3, r3, #5
 800ab34:	4413      	add	r3, r2
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da0f      	bge.n	800ab5c <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800ab3c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab42:	3348      	adds	r3, #72	@ 0x48
 800ab44:	015b      	lsls	r3, r3, #5
 800ab46:	4413      	add	r3, r2
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab4e:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800ab52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab54:	3348      	adds	r3, #72	@ 0x48
 800ab56:	015b      	lsls	r3, r3, #5
 800ab58:	440b      	add	r3, r1
 800ab5a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800ab5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ab60:	3301      	adds	r3, #1
 800ab62:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800ab66:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800ab6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d3db      	bcc.n	800ab2a <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800ab78:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7e:	2209      	movs	r2, #9
 800ab80:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800ab84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab86:	2209      	movs	r2, #9
 800ab88:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8e:	61bb      	str	r3, [r7, #24]
 800ab90:	2310      	movs	r3, #16
 800ab92:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	019b      	lsls	r3, r3, #6
 800ab98:	f043 0220 	orr.w	r2, r3, #32
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800aba0:	bf00      	nop
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f9      	bne.n	800aba2 <handle_bus_reset+0x11a>
}
 800abae:	bf00      	nop
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	2210      	movs	r2, #16
 800abb8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800abba:	bf00      	nop
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1f9      	bne.n	800abbc <handle_bus_reset+0x134>
}
 800abc8:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800abca:	79fb      	ldrb	r3, [r7, #7]
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff f937 	bl	8009e40 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800abd8:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800abda:	8a3b      	ldrh	r3, [r7, #16]
 800abdc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800abe0:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800abf0:	f023 0203 	bic.w	r2, r3, #3
 800abf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800ac00:	f023 0203 	bic.w	r2, r3, #3
 800ac04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac06:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800ac0a:	4b13      	ldr	r3, [pc, #76]	@ (800ac58 <handle_bus_reset+0x1d0>)
 800ac0c:	2240      	movs	r2, #64	@ 0x40
 800ac0e:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800ac10:	4b11      	ldr	r3, [pc, #68]	@ (800ac58 <handle_bus_reset+0x1d0>)
 800ac12:	2240      	movs	r2, #64	@ 0x40
 800ac14:	835a      	strh	r2, [r3, #26]
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1e:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ac20:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d004      	beq.n	800ac30 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe ffeb 	bl	8009c04 <dma_setup_prepare>
 800ac2e:	e007      	b.n	800ac40 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800ac36:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	619a      	str	r2, [r3, #24]
}
 800ac4c:	bf00      	nop
 800ac4e:	3738      	adds	r7, #56	@ 0x38
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	0800dce4 	.word	0x0800dce4
 800ac58:	20001230 	.word	0x20001230
 800ac5c:	200012b0 	.word	0x200012b0

0800ac60 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08a      	sub	sp, #40	@ 0x28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	71fb      	strb	r3, [r7, #7]
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ac6e:	7ffb      	ldrb	r3, [r7, #31]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <handle_enum_done+0x18>
    rhport = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ac78:	7ffb      	ldrb	r3, [r7, #31]
 800ac7a:	4a1b      	ldr	r2, [pc, #108]	@ (800ace8 <handle_enum_done+0x88>)
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	4413      	add	r3, r2
 800ac80:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800ac82:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ac8a:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800ac8c:	7e3b      	ldrb	r3, [r7, #24]
 800ac8e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <handle_enum_done+0x3e>
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d004      	beq.n	800aca6 <handle_enum_done+0x46>
 800ac9c:	e007      	b.n	800acae <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800aca4:	e007      	b.n	800acb6 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800aca6:	2301      	movs	r3, #1
 800aca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800acac:	e003      	b.n	800acb6 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800acb4:	bf00      	nop
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	77bb      	strb	r3, [r7, #30]
 800acba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acbe:	777b      	strb	r3, [r7, #29]
 800acc0:	2301      	movs	r3, #1
 800acc2:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800acc4:	7fbb      	ldrb	r3, [r7, #30]
 800acc6:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800acc8:	2301      	movs	r3, #1
 800acca:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800accc:	7f7b      	ldrb	r3, [r7, #29]
 800acce:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800acd0:	7f3a      	ldrb	r2, [r7, #28]
 800acd2:	f107 030c 	add.w	r3, r7, #12
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe f8df 	bl	8008e9c <dcd_event_handler>
}
 800acde:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800ace0:	bf00      	nop
 800ace2:	3728      	adds	r7, #40	@ 0x28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	0800dce4 	.word	0x0800dce4

0800acec <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b08c      	sub	sp, #48	@ 0x30
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800acfa:	7cfb      	ldrb	r3, [r7, #19]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ad04:	7cfb      	ldrb	r3, [r7, #19]
 800ad06:	4a49      	ldr	r2, [pc, #292]	@ (800ae2c <handle_rxflvl_irq+0x140>)
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	4413      	add	r3, r2
 800ad0c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ad0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad16:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800ad18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800ad1e:	7b3b      	ldrb	r3, [r7, #12]
 800ad20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800ad2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad2e:	3358      	adds	r3, #88	@ 0x58
 800ad30:	015b      	lsls	r3, r3, #5
 800ad32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad34:	4413      	add	r3, r2
 800ad36:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	3b01      	subs	r3, #1
 800ad42:	2b05      	cmp	r3, #5
 800ad44:	d86a      	bhi.n	800ae1c <handle_rxflvl_irq+0x130>
 800ad46:	a201      	add	r2, pc, #4	@ (adr r2, 800ad4c <handle_rxflvl_irq+0x60>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ae1d 	.word	0x0800ae1d
 800ad50:	0800ad8b 	.word	0x0800ad8b
 800ad54:	0800ae1d 	.word	0x0800ae1d
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ae1d 	.word	0x0800ae1d
 800ad60:	0800ad65 	.word	0x0800ad65
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800ad64:	4b32      	ldr	r3, [pc, #200]	@ (800ae30 <handle_rxflvl_irq+0x144>)
 800ad66:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	3304      	adds	r3, #4
 800ad74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	601a      	str	r2, [r3, #0]
      break;
 800ad7a:	e052      	b.n	800ae22 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	611a      	str	r2, [r3, #16]
      break;
 800ad88:	e04b      	b.n	800ae22 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800ad8a:	89bb      	ldrh	r3, [r7, #12]
 800ad8c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800ad94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad98:	015b      	lsls	r3, r3, #5
 800ad9a:	4a26      	ldr	r2, [pc, #152]	@ (800ae34 <handle_rxflvl_irq+0x148>)
 800ad9c:	4413      	add	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800ada0:	8b7b      	ldrh	r3, [r7, #26]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d03c      	beq.n	800ae20 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	8b7a      	ldrh	r2, [r7, #26]
 800adb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fc ff7e 	bl	8007cb8 <tu_fifo_write_n_const_addr_full_words>
 800adbc:	e00c      	b.n	800add8 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	8b7a      	ldrh	r2, [r7, #26]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adc8:	f000 fd70 	bl	800b8ac <dfifo_read_packet>
          xfer->buffer += byte_count;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	8b7b      	ldrh	r3, [r7, #26]
 800add2:	441a      	add	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	895b      	ldrh	r3, [r3, #10]
 800addc:	8b7a      	ldrh	r2, [r7, #26]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d21e      	bcs.n	800ae20 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	891a      	ldrh	r2, [r3, #8]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800adfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10d      	bne.n	800ae20 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	891a      	ldrh	r2, [r3, #8]
 800ae08:	4b0b      	ldr	r3, [pc, #44]	@ (800ae38 <handle_rxflvl_irq+0x14c>)
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800ae14:	4b08      	ldr	r3, [pc, #32]	@ (800ae38 <handle_rxflvl_irq+0x14c>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800ae1a:	e001      	b.n	800ae20 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800ae1c:	bf00      	nop
 800ae1e:	e000      	b.n	800ae22 <handle_rxflvl_irq+0x136>
      break;
 800ae20:	bf00      	nop
  }
}
 800ae22:	bf00      	nop
 800ae24:	3730      	adds	r7, #48	@ 0x30
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800dce4 	.word	0x0800dce4
 800ae30:	200012b8 	.word	0x200012b8
 800ae34:	20001230 	.word	0x20001230
 800ae38:	200012b0 	.word	0x200012b0

0800ae3c <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08e      	sub	sp, #56	@ 0x38
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	603a      	str	r2, [r7, #0]
 800ae46:	71fb      	strb	r3, [r7, #7]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800ae4c:	783b      	ldrb	r3, [r7, #0]
 800ae4e:	f003 0308 	and.w	r3, r3, #8
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01c      	beq.n	800ae92 <handle_epout_slave+0x56>
 800ae58:	79fb      	ldrb	r3, [r7, #7]
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ae5e:	4b34      	ldr	r3, [pc, #208]	@ (800af30 <handle_epout_slave+0xf4>)
 800ae60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae62:	2301      	movs	r3, #1
 800ae64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800ae68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ae6c:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800ae6e:	2306      	movs	r3, #6
 800ae70:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800ae72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae74:	f107 0318 	add.w	r3, r7, #24
 800ae78:	6810      	ldr	r0, [r2, #0]
 800ae7a:	6851      	ldr	r1, [r2, #4]
 800ae7c:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800ae7e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ae82:	f107 0314 	add.w	r3, r7, #20
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe f807 	bl	8008e9c <dcd_event_handler>
}
 800ae8e:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800ae90:	e04a      	b.n	800af28 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800ae92:	783b      	ldrb	r3, [r7, #0]
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d044      	beq.n	800af28 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800ae9e:	783b      	ldrb	r3, [r7, #0]
 800aea0:	f003 0320 	and.w	r3, r3, #32
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d13e      	bne.n	800af28 <handle_epout_slave+0xec>
 800aeaa:	787b      	ldrb	r3, [r7, #1]
 800aeac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d138      	bne.n	800af28 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800aeb6:	79bb      	ldrb	r3, [r7, #6]
 800aeb8:	015b      	lsls	r3, r3, #5
 800aeba:	4a1e      	ldr	r2, [pc, #120]	@ (800af34 <handle_epout_slave+0xf8>)
 800aebc:	4413      	add	r3, r2
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800aec0:	79bb      	ldrb	r3, [r7, #6]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <handle_epout_slave+0xa0>
 800aec6:	4b1c      	ldr	r3, [pc, #112]	@ (800af38 <handle_epout_slave+0xfc>)
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d006      	beq.n	800aedc <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800aece:	79b9      	ldrb	r1, [r7, #6]
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2200      	movs	r2, #0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff f977 	bl	800a1c8 <edpt_schedule_packets>
 800aeda:	e025      	b.n	800af28 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800aedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aede:	891b      	ldrh	r3, [r3, #8]
 800aee0:	461a      	mov	r2, r3
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aee8:	79bb      	ldrb	r3, [r7, #6]
 800aeea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800aeee:	627a      	str	r2, [r7, #36]	@ 0x24
 800aef0:	2300      	movs	r3, #0
 800aef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aef6:	2301      	movs	r3, #1
 800aef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800aefc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800af00:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800af02:	2307      	movs	r3, #7
 800af04:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800af06:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800af0a:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800af10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af14:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800af16:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800af1a:	f107 0308 	add.w	r3, r7, #8
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fd ffbb 	bl	8008e9c <dcd_event_handler>
}
 800af26:	bf00      	nop
      }
    }
  }
}
 800af28:	3738      	adds	r7, #56	@ 0x38
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200012b8 	.word	0x200012b8
 800af34:	20001230 	.word	0x20001230
 800af38:	200012b0 	.word	0x200012b0

0800af3c <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b092      	sub	sp, #72	@ 0x48
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	603a      	str	r2, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
 800af48:	460b      	mov	r3, r1
 800af4a:	71bb      	strb	r3, [r7, #6]
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800af52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <handle_epin_slave+0x24>
    rhport = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800af60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af64:	4a64      	ldr	r2, [pc, #400]	@ (800b0f8 <handle_epin_slave+0x1bc>)
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	4413      	add	r3, r2
 800af6a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800af6c:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800af6e:	79bb      	ldrb	r3, [r7, #6]
 800af70:	3348      	adds	r3, #72	@ 0x48
 800af72:	015b      	lsls	r3, r3, #5
 800af74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af76:	4413      	add	r3, r2
 800af78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800af7a:	79bb      	ldrb	r3, [r7, #6]
 800af7c:	015b      	lsls	r3, r3, #5
 800af7e:	3310      	adds	r3, #16
 800af80:	4a5e      	ldr	r2, [pc, #376]	@ (800b0fc <handle_epin_slave+0x1c0>)
 800af82:	4413      	add	r3, r2
 800af84:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800af86:	783b      	ldrb	r3, [r7, #0]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d037      	beq.n	800b002 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800af92:	79bb      	ldrb	r3, [r7, #6]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <handle_epin_slave+0x72>
 800af98:	4b59      	ldr	r3, [pc, #356]	@ (800b100 <handle_epin_slave+0x1c4>)
 800af9a:	885b      	ldrh	r3, [r3, #2]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800afa0:	79b9      	ldrb	r1, [r7, #6]
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	2201      	movs	r2, #1
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff f90e 	bl	800a1c8 <edpt_schedule_packets>
 800afac:	e029      	b.n	800b002 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800afae:	79bb      	ldrb	r3, [r7, #6]
 800afb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800afb4:	b2d9      	uxtb	r1, r3
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	891b      	ldrh	r3, [r3, #8]
 800afba:	461a      	mov	r2, r3
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800afc2:	460b      	mov	r3, r1
 800afc4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800afc8:	627a      	str	r2, [r7, #36]	@ 0x24
 800afca:	2300      	movs	r3, #0
 800afcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800afd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800afda:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800afdc:	2307      	movs	r3, #7
 800afde:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800afe0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800afe4:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800afea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800afee:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800aff0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800aff4:	f107 0310 	add.w	r3, r7, #16
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7fd ff4e 	bl	8008e9c <dcd_event_handler>
}
 800b000:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800b002:	783b      	ldrb	r3, [r7, #0]
 800b004:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d070      	beq.n	800b0f0 <handle_epin_slave+0x1b4>
 800b00e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b010:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b014:	79ba      	ldrb	r2, [r7, #6]
 800b016:	2101      	movs	r1, #1
 800b018:	fa01 f202 	lsl.w	r2, r1, r2
 800b01c:	4013      	ands	r3, r2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d066      	beq.n	800b0f0 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800b028:	89fb      	ldrh	r3, [r7, #14]
 800b02a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b02e:	b29b      	uxth	r3, r3
 800b030:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800b032:	2300      	movs	r3, #0
 800b034:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b038:	e03f      	b.n	800b0ba <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800b03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b046:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	895a      	ldrh	r2, [r3, #10]
 800b04c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b04e:	843b      	strh	r3, [r7, #32]
 800b050:	4613      	mov	r3, r2
 800b052:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b054:	8c3a      	ldrh	r2, [r7, #32]
 800b056:	8bfb      	ldrh	r3, [r7, #30]
 800b058:	4293      	cmp	r3, r2
 800b05a:	bf28      	it	cs
 800b05c:	4613      	movcs	r3, r2
 800b05e:	b29b      	uxth	r3, r3
 800b060:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800b062:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	0099      	lsls	r1, r3, #2
 800b06a:	4b26      	ldr	r3, [pc, #152]	@ (800b104 <handle_epin_slave+0x1c8>)
 800b06c:	400b      	ands	r3, r1
 800b06e:	429a      	cmp	r2, r3
 800b070:	d829      	bhi.n	800b0c6 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00d      	beq.n	800b096 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800b07a:	79bb      	ldrb	r3, [r7, #6]
 800b07c:	3301      	adds	r3, #1
 800b07e:	031b      	lsls	r3, r3, #12
 800b080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b082:	4413      	add	r3, r2
 800b084:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b08c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fc fdab 	bl	8007bea <tu_fifo_read_n_const_addr_full_words>
 800b094:	e00c      	b.n	800b0b0 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b09c:	79b9      	ldrb	r1, [r7, #6]
 800b09e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b0a0:	f000 fc55 	bl	800b94e <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b0aa:	441a      	add	r2, r3
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800b0b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b0ba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800b0be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d3ba      	bcc.n	800b03a <handle_epin_slave+0xfe>
 800b0c4:	e000      	b.n	800b0c8 <handle_epin_slave+0x18c>
        break;
 800b0c6:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800b0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10b      	bne.n	800b0f0 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0da:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b0de:	79ba      	ldrb	r2, [r7, #6]
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	fa01 f202 	lsl.w	r2, r1, r2
 800b0e6:	43d2      	mvns	r2, r2
 800b0e8:	401a      	ands	r2, r3
 800b0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ec:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800b0f0:	bf00      	nop
 800b0f2:	3748      	adds	r7, #72	@ 0x48
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	0800dce4 	.word	0x0800dce4
 800b0fc:	20001230 	.word	0x20001230
 800b100:	200012b0 	.word	0x200012b0
 800b104:	0003fffc 	.word	0x0003fffc

0800b108 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08e      	sub	sp, #56	@ 0x38
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	460a      	mov	r2, r1
 800b112:	71fb      	strb	r3, [r7, #7]
 800b114:	4613      	mov	r3, r2
 800b116:	71bb      	strb	r3, [r7, #6]
 800b118:	79fb      	ldrb	r3, [r7, #7]
 800b11a:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b11c:	7efb      	ldrb	r3, [r7, #27]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <handle_ep_irq+0x1e>
    rhport = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b126:	7efb      	ldrb	r3, [r7, #27]
 800b128:	4a38      	ldr	r2, [pc, #224]	@ (800b20c <handle_ep_irq+0x104>)
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	4413      	add	r3, r2
 800b12e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b130:	633b      	str	r3, [r7, #48]	@ 0x30
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b13a:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b13c:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b14a:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800b14c:	7c7b      	ldrb	r3, [r7, #17]
 800b14e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b152:	b2db      	uxtb	r3, r3
 800b154:	3301      	adds	r3, #1
 800b156:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800b158:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800b15c:	79bb      	ldrb	r3, [r7, #6]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d101      	bne.n	800b166 <handle_ep_irq+0x5e>
 800b162:	2300      	movs	r3, #0
 800b164:	e000      	b.n	800b168 <handle_ep_irq+0x60>
 800b166:	2310      	movs	r3, #16
 800b168:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800b16c:	79bb      	ldrb	r3, [r7, #6]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	bf14      	ite	ne
 800b172:	2301      	movne	r3, #1
 800b174:	2300      	moveq	r3, #0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	025b      	lsls	r3, r3, #9
 800b17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b180:	4413      	add	r3, r2
 800b182:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800b184:	2300      	movs	r3, #0
 800b186:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b18a:	e034      	b.n	800b1f6 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b192:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800b196:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b19a:	440b      	add	r3, r1
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d021      	beq.n	800b1ec <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800b1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b1ac:	015b      	lsls	r3, r3, #5
 800b1ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1b0:	4413      	add	r3, r2
 800b1b2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800b1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d111      	bne.n	800b1ec <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800b1c8:	79bb      	ldrb	r3, [r7, #6]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d107      	bne.n	800b1de <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800b1ce:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff feb0 	bl	800af3c <handle_epin_slave>
 800b1dc:	e006      	b.n	800b1ec <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800b1de:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fe28 	bl	800ae3c <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800b1ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b1f6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b1fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d3c4      	bcc.n	800b18c <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	3738      	adds	r7, #56	@ 0x38
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	0800dce4 	.word	0x0800dce4

0800b210 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b098      	sub	sp, #96	@ 0x60
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b220:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <dcd_int_handler+0x1e>
    rhport = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b22e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b232:	4a80      	ldr	r2, [pc, #512]	@ (800b434 <dcd_int_handler+0x224>)
 800b234:	011b      	lsls	r3, r3, #4
 800b236:	4413      	add	r3, r2
 800b238:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b23a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800b23c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800b242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b248:	4013      	ands	r3, r2
 800b24a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800b24c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b24e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00d      	beq.n	800b272 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800b256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b258:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b25c:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800b25e:	2001      	movs	r0, #1
 800b260:	f7fe f81a 	bl	8009298 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff fc0e 	bl	800aa88 <handle_bus_reset>
    usbd_spin_unlock(true);
 800b26c:	2001      	movs	r0, #1
 800b26e:	f7fe f82d 	bl	80092cc <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800b272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d007      	beq.n	800b28c <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800b27c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b27e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b282:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fcea 	bl	800ac60 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800b28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b28e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01d      	beq.n	800b2d2 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800b296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b298:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b29c:	615a      	str	r2, [r3, #20]
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800b2b0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b2b4:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800b2b8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b2bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800b2c0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800b2c4:	f107 0320 	add.w	r3, r7, #32
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fd fde6 	bl	8008e9c <dcd_event_handler>
}
 800b2d0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800b2d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da1d      	bge.n	800b314 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800b2d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b2de:	615a      	str	r2, [r3, #20]
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b2e6:	2305      	movs	r3, #5
 800b2e8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800b2f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b2f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800b2fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b2fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800b302:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800b306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fd fdc5 	bl	8008e9c <dcd_event_handler>
}
 800b312:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800b314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d022      	beq.n	800b364 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800b31e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800b324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d017      	beq.n	800b35e <dcd_int_handler+0x14e>
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800b334:	2302      	movs	r3, #2
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33a:	2301      	movs	r3, #1
 800b33c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800b340:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800b344:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800b346:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b34a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800b34c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800b350:	f107 0314 	add.w	r3, r7, #20
 800b354:	4611      	mov	r1, r2
 800b356:	4618      	mov	r0, r3
 800b358:	f7fd fda0 	bl	8008e9c <dcd_event_handler>
}
 800b35c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800b35e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b360:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b362:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800b364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b366:	f003 0308 	and.w	r3, r3, #8
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d02e      	beq.n	800b3cc <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800b36e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b370:	2208      	movs	r2, #8
 800b372:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800b374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b376:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b380:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800b382:	4b2d      	ldr	r3, [pc, #180]	@ (800b438 <dcd_int_handler+0x228>)
 800b384:	79db      	ldrb	r3, [r3, #7]
 800b386:	f083 0301 	eor.w	r3, r3, #1
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	f023 0208 	bic.w	r2, r3, #8
 800b398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b39a:	619a      	str	r2, [r3, #24]
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800b3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b3ac:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800b3b0:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b8:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800b3ba:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800b3be:	f107 0308 	add.w	r3, r7, #8
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fd fd69 	bl	8008e9c <dcd_event_handler>
}
 800b3ca:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800b3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ce:	f003 0310 	and.w	r3, r3, #16
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d015      	beq.n	800b402 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800b3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	f023 0210 	bic.w	r2, r3, #16
 800b3de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3e0:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff fc81 	bl	800acec <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800b3ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f003 0310 	and.w	r3, r3, #16
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1f5      	bne.n	800b3e2 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800b3f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	f043 0210 	orr.w	r2, r3, #16
 800b3fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b400:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800b402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fe79 	bl	800b108 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800b416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2101      	movs	r1, #1
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fe6f 	bl	800b108 <handle_ep_irq>
  }
}
 800b42a:	bf00      	nop
 800b42c:	3760      	adds	r7, #96	@ 0x60
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	0800dce4 	.word	0x0800dce4
 800b438:	200012b0 	.word	0x200012b0

0800b43c <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b452:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800b45a:	e005      	b.n	800b468 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b460:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d152      	bne.n	800b52c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800b486:	4b2c      	ldr	r3, [pc, #176]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a2c      	ldr	r2, [pc, #176]	@ (800b53c <dwc2_phy_update+0xc8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d302      	bcc.n	800b496 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800b490:	2306      	movs	r3, #6
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e041      	b.n	800b51a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800b496:	4b28      	ldr	r3, [pc, #160]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a29      	ldr	r2, [pc, #164]	@ (800b540 <dwc2_phy_update+0xcc>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d902      	bls.n	800b4a6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800b4a0:	2307      	movs	r3, #7
 800b4a2:	60fb      	str	r3, [r7, #12]
 800b4a4:	e039      	b.n	800b51a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800b4a6:	4b24      	ldr	r3, [pc, #144]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a26      	ldr	r2, [pc, #152]	@ (800b544 <dwc2_phy_update+0xd0>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d302      	bcc.n	800b4b6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e031      	b.n	800b51a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800b4b6:	4b20      	ldr	r3, [pc, #128]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a23      	ldr	r2, [pc, #140]	@ (800b548 <dwc2_phy_update+0xd4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d902      	bls.n	800b4c6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800b4c0:	2309      	movs	r3, #9
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e029      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800b4c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a20      	ldr	r2, [pc, #128]	@ (800b54c <dwc2_phy_update+0xd8>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d902      	bls.n	800b4d6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800b4d0:	230a      	movs	r3, #10
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	e021      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800b4d6:	4b18      	ldr	r3, [pc, #96]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a1d      	ldr	r2, [pc, #116]	@ (800b550 <dwc2_phy_update+0xdc>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d902      	bls.n	800b4e6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800b4e0:	230b      	movs	r3, #11
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e019      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800b4e6:	4b14      	ldr	r3, [pc, #80]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1a      	ldr	r2, [pc, #104]	@ (800b554 <dwc2_phy_update+0xe0>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d302      	bcc.n	800b4f6 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800b4f0:	230c      	movs	r3, #12
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e011      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800b4f6:	4b10      	ldr	r3, [pc, #64]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a17      	ldr	r2, [pc, #92]	@ (800b558 <dwc2_phy_update+0xe4>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d302      	bcc.n	800b506 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800b500:	230d      	movs	r3, #13
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	e009      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800b506:	4b0c      	ldr	r3, [pc, #48]	@ (800b538 <dwc2_phy_update+0xc4>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a14      	ldr	r2, [pc, #80]	@ (800b55c <dwc2_phy_update+0xe8>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d302      	bcc.n	800b516 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800b510:	230e      	movs	r3, #14
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e001      	b.n	800b51a <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800b516:	230f      	movs	r3, #15
 800b518:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	029b      	lsls	r3, r3, #10
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60da      	str	r2, [r3, #12]
  }
}
 800b52c:	bf00      	nop
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20000108 	.word	0x20000108
 800b53c:	01e84800 	.word	0x01e84800
 800b540:	01a39ddf 	.word	0x01a39ddf
 800b544:	016e3600 	.word	0x016e3600
 800b548:	014ca43f 	.word	0x014ca43f
 800b54c:	01312cff 	.word	0x01312cff
 800b550:	011a499f 	.word	0x011a499f
 800b554:	01067380 	.word	0x01067380
 800b558:	00f42400 	.word	0x00f42400
 800b55c:	00e4e1c0 	.word	0x00e4e1c0

0800b560 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	f043 0201 	orr.w	r2, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f244 2209 	movw	r2, #16905	@ 0x4209
 800b57e:	4293      	cmp	r3, r2
 800b580:	d807      	bhi.n	800b592 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800b582:	bf00      	nop
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1f9      	bne.n	800b584 <reset_core+0x24>
 800b590:	e010      	b.n	800b5b4 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800b592:	bf00      	nop
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0f9      	beq.n	800b594 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5a8:	f023 0301 	bic.w	r3, r3, #1
 800b5ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800b5b4:	bf00      	nop
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dafb      	bge.n	800b5b6 <reset_core+0x56>
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5e0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff ff26 	bl	800b43c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff ffb5 	bl	800b560 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800b5fc:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800b604:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800b60c:	2100      	movs	r1, #0
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ff30 	bl	800b474 <dwc2_phy_update>
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b62e:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b634:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b63c:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800b63e:	7c3b      	ldrb	r3, [r7, #16]
 800b640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b80      	cmp	r3, #128	@ 0x80
 800b648:	d114      	bne.n	800b674 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f043 0310 	orr.w	r3, r3, #16
 800b650:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f023 0308 	bic.w	r3, r3, #8
 800b658:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b660:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b668:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	e012      	b.n	800b69a <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f023 0310 	bic.w	r3, r3, #16
 800b67a:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800b67c:	7b7b      	ldrb	r3, [r7, #13]
 800b67e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f043 0308 	orr.w	r3, r3, #8
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	e003      	b.n	800b69a <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f023 0308 	bic.w	r3, r3, #8
 800b698:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800b6a0:	7c3b      	ldrb	r3, [r7, #16]
 800b6a2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fec6 	bl	800b43c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff55 	bl	800b560 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800b6bc:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800b6be:	7b7b      	ldrb	r3, [r7, #13]
 800b6c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <phy_hs_init+0xb4>
 800b6ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800b6ce:	e001      	b.n	800b6d4 <phy_hs_init+0xb8>
 800b6d0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800b6e0:	7c3b      	ldrb	r3, [r7, #16]
 800b6e2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff fec2 	bl	800b474 <dwc2_phy_update>
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b704:	0c1b      	lsrs	r3, r3, #16
 800b706:	041b      	lsls	r3, r3, #16
 800b708:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	4a0e      	ldr	r2, [pc, #56]	@ (800b748 <check_dwc2+0x50>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d012      	beq.n	800b738 <check_dwc2+0x40>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4a0d      	ldr	r2, [pc, #52]	@ (800b74c <check_dwc2+0x54>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00e      	beq.n	800b738 <check_dwc2+0x40>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4a0c      	ldr	r2, [pc, #48]	@ (800b750 <check_dwc2+0x58>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00a      	beq.n	800b738 <check_dwc2+0x40>
 800b722:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <check_dwc2+0x5c>)
 800b724:	60bb      	str	r3, [r7, #8]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d000      	beq.n	800b734 <check_dwc2+0x3c>
 800b732:	be00      	bkpt	0x0000
 800b734:	2300      	movs	r3, #0
 800b736:	e000      	b.n	800b73a <check_dwc2+0x42>
#endif

  return true;
 800b738:	2301      	movs	r3, #1
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	4f540000 	.word	0x4f540000
 800b74c:	55310000 	.word	0x55310000
 800b750:	55320000 	.word	0x55320000
 800b754:	e000edf0 	.word	0xe000edf0

0800b758 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d101      	bne.n	800b76e <dwc2_core_is_highspeed+0x16>
    return false;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e00b      	b.n	800b786 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b772:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800b774:	7b3b      	ldrb	r3, [r7, #12]
 800b776:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	bf14      	ite	ne
 800b780:	2301      	movne	r3, #1
 800b782:	2300      	moveq	r3, #0
 800b784:	b2db      	uxtb	r3, r3
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
	...

0800b794 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	71bb      	strb	r3, [r7, #6]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	717b      	strb	r3, [r7, #5]
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <dwc2_core_init+0x20>
    rhport = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	4a3b      	ldr	r2, [pc, #236]	@ (800b8a4 <dwc2_core_init+0x110>)
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	4413      	add	r3, r2
 800b7bc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b7be:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800b7c0:	69f8      	ldr	r0, [r7, #28]
 800b7c2:	f7ff ff99 	bl	800b6f8 <check_dwc2>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f083 0301 	eor.w	r3, r3, #1
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <dwc2_core_init+0x54>
 800b7d2:	4b35      	ldr	r3, [pc, #212]	@ (800b8a8 <dwc2_core_init+0x114>)
 800b7d4:	61bb      	str	r3, [r7, #24]
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d000      	beq.n	800b7e4 <dwc2_core_init+0x50>
 800b7e2:	be00      	bkpt	0x0000
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e058      	b.n	800b89a <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f023 0201 	bic.w	r2, r3, #1
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800b7f4:	79bb      	ldrb	r3, [r7, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800b7fa:	69f8      	ldr	r0, [r7, #28]
 800b7fc:	f7ff ff0e 	bl	800b61c <phy_hs_init>
 800b800:	e002      	b.n	800b808 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800b802:	69f8      	ldr	r0, [r7, #28]
 800b804:	f7ff fee2 	bl	800b5cc <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	f043 0207 	orr.w	r2, r3, #7
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800b81a:	f023 020f 	bic.w	r2, r3, #15
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	2310      	movs	r3, #16
 800b82a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	019b      	lsls	r3, r3, #6
 800b830:	f043 0220 	orr.w	r2, r3, #32
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b838:	bf00      	nop
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	f003 0320 	and.w	r3, r3, #32
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1f9      	bne.n	800b83a <dwc2_core_init+0xa6>
}
 800b846:	bf00      	nop
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2210      	movs	r2, #16
 800b850:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b852:	bf00      	nop
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	f003 0310 	and.w	r3, r3, #16
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1f9      	bne.n	800b854 <dwc2_core_init+0xc0>
}
 800b860:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	f04f 32ff 	mov.w	r2, #4294967295
 800b868:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	2200      	movs	r2, #0
 800b876:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800b878:	797b      	ldrb	r3, [r7, #5]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	609a      	str	r2, [r3, #8]
 800b88a:	e005      	b.n	800b898 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	f043 0210 	orr.w	r2, r3, #16
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	619a      	str	r2, [r3, #24]
  }

  return true;
 800b898:	2301      	movs	r3, #1
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3720      	adds	r7, #32
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800dcf4 	.word	0x0800dcf4
 800b8a8:	e000edf0 	.word	0xe000edf0

0800b8ac <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800b8ac:	b480      	push	{r7}
 800b8ae:	b08f      	sub	sp, #60	@ 0x3c
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8c0:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800b8c2:	88fb      	ldrh	r3, [r7, #6]
 800b8c4:	089b      	lsrs	r3, r3, #2
 800b8c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800b8c8:	e00b      	b.n	800b8e2 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8d2:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	6a3a      	ldr	r2, [r7, #32]
 800b8d8:	601a      	str	r2, [r3, #0]
}
 800b8da:	bf00      	nop
    dst += 4;
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800b8e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8e4:	1e5a      	subs	r2, r3, #1
 800b8e6:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1ee      	bne.n	800b8ca <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800b8f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d020      	beq.n	800b942 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800b912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b916:	2b01      	cmp	r3, #1
 800b918:	d907      	bls.n	800b92a <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3301      	adds	r3, #1
 800b91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b920:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	0a12      	lsrs	r2, r2, #8
 800b926:	b2d2      	uxtb	r2, r2
 800b928:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800b92a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d907      	bls.n	800b942 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	3302      	adds	r3, #2
 800b936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b938:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	0c12      	lsrs	r2, r2, #16
 800b93e:	b2d2      	uxtb	r2, r2
 800b940:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800b942:	bf00      	nop
 800b944:	373c      	adds	r7, #60	@ 0x3c
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800b94e:	b480      	push	{r7}
 800b950:	b08b      	sub	sp, #44	@ 0x2c
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	461a      	mov	r2, r3
 800b95a:	460b      	mov	r3, r1
 800b95c:	72fb      	strb	r3, [r7, #11]
 800b95e:	4613      	mov	r3, r2
 800b960:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800b962:	7afb      	ldrb	r3, [r7, #11]
 800b964:	3301      	adds	r3, #1
 800b966:	031b      	lsls	r3, r3, #12
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800b96e:	893b      	ldrh	r3, [r7, #8]
 800b970:	089b      	lsrs	r3, r3, #2
 800b972:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800b974:	e008      	b.n	800b988 <dfifo_write_packet+0x3a>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	601a      	str	r2, [r3, #0]
    src += 4;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3304      	adds	r3, #4
 800b986:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800b988:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b98a:	1e5a      	subs	r2, r3, #1
 800b98c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f1      	bne.n	800b976 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800b992:	893b      	ldrh	r3, [r7, #8]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	f003 0303 	and.w	r3, r3, #3
 800b99a:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800b99c:	7efb      	ldrb	r3, [r7, #27]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d019      	beq.n	800b9d6 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800b9a8:	7efb      	ldrb	r3, [r7, #27]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d906      	bls.n	800b9bc <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	021b      	lsls	r3, r3, #8
 800b9b6:	6a3a      	ldr	r2, [r7, #32]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800b9bc:	7efb      	ldrb	r3, [r7, #27]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d906      	bls.n	800b9d0 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	3302      	adds	r3, #2
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	041b      	lsls	r3, r3, #16
 800b9ca:	6a3a      	ldr	r2, [r7, #32]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	6a3a      	ldr	r2, [r7, #32]
 800b9d4:	601a      	str	r2, [r3, #0]
  }
}
 800b9d6:	bf00      	nop
 800b9d8:	372c      	adds	r7, #44	@ 0x2c
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	6039      	str	r1, [r7, #0]
 800b9ee:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d11f      	bne.n	800ba36 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	723b      	strb	r3, [r7, #8]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800b9fe:	f107 0308 	add.w	r3, r7, #8
 800ba02:	4619      	mov	r1, r3
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7fc fa63 	bl	8007ed0 <tud_rhport_init>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f083 0301 	eor.w	r3, r3, #1
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <tusb_rhport_init+0x48>
 800ba16:	4b23      	ldr	r3, [pc, #140]	@ (800baa4 <tusb_rhport_init+0xc0>)
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d000      	beq.n	800ba28 <tusb_rhport_init+0x44>
 800ba26:	be00      	bkpt	0x0000
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e036      	b.n	800ba9a <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800ba2c:	4b1e      	ldr	r3, [pc, #120]	@ (800baa8 <tusb_rhport_init+0xc4>)
 800ba2e:	2201      	movs	r2, #1
 800ba30:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e031      	b.n	800ba9a <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d803      	bhi.n	800ba44 <tusb_rhport_init+0x60>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <tusb_rhport_init+0x76>
 800ba44:	4b17      	ldr	r3, [pc, #92]	@ (800baa4 <tusb_rhport_init+0xc0>)
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d000      	beq.n	800ba56 <tusb_rhport_init+0x72>
 800ba54:	be00      	bkpt	0x0000
 800ba56:	2300      	movs	r3, #0
 800ba58:	e01f      	b.n	800ba9a <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800ba5a:	79fb      	ldrb	r3, [r7, #7]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	7811      	ldrb	r1, [r2, #0]
 800ba60:	4a11      	ldr	r2, [pc, #68]	@ (800baa8 <tusb_rhport_init+0xc4>)
 800ba62:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d115      	bne.n	800ba98 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fc fa2d 	bl	8007ed0 <tud_rhport_init>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f083 0301 	eor.w	r3, r3, #1
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <tusb_rhport_init+0xb4>
 800ba82:	4b08      	ldr	r3, [pc, #32]	@ (800baa4 <tusb_rhport_init+0xc0>)
 800ba84:	617b      	str	r3, [r7, #20]
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d000      	beq.n	800ba94 <tusb_rhport_init+0xb0>
 800ba92:	be00      	bkpt	0x0000
 800ba94:	2300      	movs	r3, #0
 800ba96:	e000      	b.n	800ba9a <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800ba98:	2301      	movs	r3, #1
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	e000edf0 	.word	0xe000edf0
 800baa8:	200012c0 	.word	0x200012c0

0800baac <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <tu_edpt_claim+0x26>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <tu_edpt_claim+0x2a>
 800bad2:	2300      	movs	r3, #0
 800bad4:	e01e      	b.n	800bb14 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <tu_edpt_claim+0x4a>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <tu_edpt_claim+0x4a>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e000      	b.n	800baf8 <tu_edpt_claim+0x4c>
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d004      	beq.n	800bb12 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	7813      	ldrb	r3, [r2, #0]
 800bb0c:	f043 0304 	orr.w	r3, r3, #4
 800bb10:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d108      	bne.n	800bb4a <tu_edpt_release+0x2a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <tu_edpt_release+0x2a>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <tu_edpt_release+0x2c>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	7813      	ldrb	r3, [r2, #0]
 800bb60:	f023 0304 	bic.w	r3, r3, #4
 800bb64:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800bb74:	b480      	push	{r7}
 800bb76:	b08b      	sub	sp, #44	@ 0x2c
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
 800bb80:	4613      	mov	r3, r2
 800bb82:	70bb      	strb	r3, [r7, #2]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	889b      	ldrh	r3, [r3, #4]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb92:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800bb94:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	78db      	ldrb	r3, [r3, #3]
 800bb9a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d059      	beq.n	800bc58 <tu_edpt_validate+0xe4>
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	dc6e      	bgt.n	800bc86 <tu_edpt_validate+0x112>
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d002      	beq.n	800bbb2 <tu_edpt_validate+0x3e>
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d018      	beq.n	800bbe2 <tu_edpt_validate+0x6e>
 800bbb0:	e069      	b.n	800bc86 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d102      	bne.n	800bbbe <tu_edpt_validate+0x4a>
 800bbb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbbc:	e001      	b.n	800bbc2 <tu_edpt_validate+0x4e>
 800bbbe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800bbc2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800bbc4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800bbc6:	8a7b      	ldrh	r3, [r7, #18]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d95e      	bls.n	800bc8a <tu_edpt_validate+0x116>
 800bbcc:	4b35      	ldr	r3, [pc, #212]	@ (800bca4 <tu_edpt_validate+0x130>)
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d000      	beq.n	800bbde <tu_edpt_validate+0x6a>
 800bbdc:	be00      	bkpt	0x0000
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e059      	b.n	800bc96 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800bbe2:	78fb      	ldrb	r3, [r7, #3]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d10e      	bne.n	800bc06 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800bbe8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bbea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbee:	d04e      	beq.n	800bc8e <tu_edpt_validate+0x11a>
 800bbf0:	4b2c      	ldr	r3, [pc, #176]	@ (800bca4 <tu_edpt_validate+0x130>)
 800bbf2:	617b      	str	r3, [r7, #20]
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d000      	beq.n	800bc02 <tu_edpt_validate+0x8e>
 800bc00:	be00      	bkpt	0x0000
 800bc02:	2300      	movs	r3, #0
 800bc04:	e047      	b.n	800bc96 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800bc06:	78bb      	ldrb	r3, [r7, #2]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <tu_edpt_validate+0xb6>
 800bc0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc12:	d10a      	bne.n	800bc2a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc20:	711a      	strb	r2, [r3, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800bc26:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800bc28:	e031      	b.n	800bc8e <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800bc2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	d02e      	beq.n	800bc8e <tu_edpt_validate+0x11a>
 800bc30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc32:	2b10      	cmp	r3, #16
 800bc34:	d02b      	beq.n	800bc8e <tu_edpt_validate+0x11a>
 800bc36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc38:	2b20      	cmp	r3, #32
 800bc3a:	d028      	beq.n	800bc8e <tu_edpt_validate+0x11a>
 800bc3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc3e:	2b40      	cmp	r3, #64	@ 0x40
 800bc40:	d025      	beq.n	800bc8e <tu_edpt_validate+0x11a>
 800bc42:	4b18      	ldr	r3, [pc, #96]	@ (800bca4 <tu_edpt_validate+0x130>)
 800bc44:	61bb      	str	r3, [r7, #24]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d000      	beq.n	800bc54 <tu_edpt_validate+0xe0>
 800bc52:	be00      	bkpt	0x0000
 800bc54:	2300      	movs	r3, #0
 800bc56:	e01e      	b.n	800bc96 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800bc58:	78fb      	ldrb	r3, [r7, #3]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d102      	bne.n	800bc64 <tu_edpt_validate+0xf0>
 800bc5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc62:	e000      	b.n	800bc66 <tu_edpt_validate+0xf2>
 800bc64:	2340      	movs	r3, #64	@ 0x40
 800bc66:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800bc68:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800bc6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d910      	bls.n	800bc92 <tu_edpt_validate+0x11e>
 800bc70:	4b0c      	ldr	r3, [pc, #48]	@ (800bca4 <tu_edpt_validate+0x130>)
 800bc72:	623b      	str	r3, [r7, #32]
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d000      	beq.n	800bc82 <tu_edpt_validate+0x10e>
 800bc80:	be00      	bkpt	0x0000
 800bc82:	2300      	movs	r3, #0
 800bc84:	e007      	b.n	800bc96 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800bc86:	2300      	movs	r3, #0
 800bc88:	e005      	b.n	800bc96 <tu_edpt_validate+0x122>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e002      	b.n	800bc94 <tu_edpt_validate+0x120>
      break;
 800bc8e:	bf00      	nop
 800bc90:	e000      	b.n	800bc94 <tu_edpt_validate+0x120>
      break;
 800bc92:	bf00      	nop
  }

  return true;
 800bc94:	2301      	movs	r3, #1
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	372c      	adds	r7, #44	@ 0x2c
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	e000edf0 	.word	0xe000edf0

0800bca8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800bca8:	b480      	push	{r7}
 800bcaa:	b08d      	sub	sp, #52	@ 0x34
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	80fb      	strh	r3, [r7, #6]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcc6:	4413      	add	r3, r2
 800bcc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800bcca:	e027      	b.n	800bd1c <tu_edpt_bind_driver+0x74>
 800bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcce:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d116      	bne.n	800bd08 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	789b      	ldrb	r3, [r3, #2]
 800bcde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800bce8:	7fbb      	ldrb	r3, [r7, #30]
 800bcea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcee:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bcfa:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800bcfc:	7ffa      	ldrb	r2, [r7, #31]
 800bcfe:	09d2      	lsrs	r2, r2, #7
 800bd00:	b2d2      	uxtb	r2, r2
 800bd02:	4611      	mov	r1, r2
 800bd04:	797a      	ldrb	r2, [r7, #5]
 800bd06:	545a      	strb	r2, [r3, r1]
 800bd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	461a      	mov	r2, r3
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800bd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800bd1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d3d3      	bcc.n	800bccc <tu_edpt_bind_driver+0x24>
  }
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	3734      	adds	r7, #52	@ 0x34
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <atoi>:
 800bd32:	220a      	movs	r2, #10
 800bd34:	2100      	movs	r1, #0
 800bd36:	f000 b87b 	b.w	800be30 <strtol>
	...

0800bd3c <_strtol_l.isra.0>:
 800bd3c:	2b24      	cmp	r3, #36	@ 0x24
 800bd3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd42:	4686      	mov	lr, r0
 800bd44:	4690      	mov	r8, r2
 800bd46:	d801      	bhi.n	800bd4c <_strtol_l.isra.0+0x10>
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d106      	bne.n	800bd5a <_strtol_l.isra.0+0x1e>
 800bd4c:	f000 fa60 	bl	800c210 <__errno>
 800bd50:	2316      	movs	r3, #22
 800bd52:	6003      	str	r3, [r0, #0]
 800bd54:	2000      	movs	r0, #0
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	4834      	ldr	r0, [pc, #208]	@ (800be2c <_strtol_l.isra.0+0xf0>)
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	462a      	mov	r2, r5
 800bd60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd64:	5d06      	ldrb	r6, [r0, r4]
 800bd66:	f016 0608 	ands.w	r6, r6, #8
 800bd6a:	d1f8      	bne.n	800bd5e <_strtol_l.isra.0+0x22>
 800bd6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd6e:	d110      	bne.n	800bd92 <_strtol_l.isra.0+0x56>
 800bd70:	782c      	ldrb	r4, [r5, #0]
 800bd72:	2601      	movs	r6, #1
 800bd74:	1c95      	adds	r5, r2, #2
 800bd76:	f033 0210 	bics.w	r2, r3, #16
 800bd7a:	d115      	bne.n	800bda8 <_strtol_l.isra.0+0x6c>
 800bd7c:	2c30      	cmp	r4, #48	@ 0x30
 800bd7e:	d10d      	bne.n	800bd9c <_strtol_l.isra.0+0x60>
 800bd80:	782a      	ldrb	r2, [r5, #0]
 800bd82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd86:	2a58      	cmp	r2, #88	@ 0x58
 800bd88:	d108      	bne.n	800bd9c <_strtol_l.isra.0+0x60>
 800bd8a:	786c      	ldrb	r4, [r5, #1]
 800bd8c:	3502      	adds	r5, #2
 800bd8e:	2310      	movs	r3, #16
 800bd90:	e00a      	b.n	800bda8 <_strtol_l.isra.0+0x6c>
 800bd92:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd94:	bf04      	itt	eq
 800bd96:	782c      	ldrbeq	r4, [r5, #0]
 800bd98:	1c95      	addeq	r5, r2, #2
 800bd9a:	e7ec      	b.n	800bd76 <_strtol_l.isra.0+0x3a>
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1f6      	bne.n	800bd8e <_strtol_l.isra.0+0x52>
 800bda0:	2c30      	cmp	r4, #48	@ 0x30
 800bda2:	bf14      	ite	ne
 800bda4:	230a      	movne	r3, #10
 800bda6:	2308      	moveq	r3, #8
 800bda8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bdac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	fbbc f9f3 	udiv	r9, ip, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bdbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bdc0:	2f09      	cmp	r7, #9
 800bdc2:	d80f      	bhi.n	800bde4 <_strtol_l.isra.0+0xa8>
 800bdc4:	463c      	mov	r4, r7
 800bdc6:	42a3      	cmp	r3, r4
 800bdc8:	dd1b      	ble.n	800be02 <_strtol_l.isra.0+0xc6>
 800bdca:	1c57      	adds	r7, r2, #1
 800bdcc:	d007      	beq.n	800bdde <_strtol_l.isra.0+0xa2>
 800bdce:	4581      	cmp	r9, r0
 800bdd0:	d314      	bcc.n	800bdfc <_strtol_l.isra.0+0xc0>
 800bdd2:	d101      	bne.n	800bdd8 <_strtol_l.isra.0+0x9c>
 800bdd4:	45a2      	cmp	sl, r4
 800bdd6:	db11      	blt.n	800bdfc <_strtol_l.isra.0+0xc0>
 800bdd8:	fb00 4003 	mla	r0, r0, r3, r4
 800bddc:	2201      	movs	r2, #1
 800bdde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bde2:	e7eb      	b.n	800bdbc <_strtol_l.isra.0+0x80>
 800bde4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bde8:	2f19      	cmp	r7, #25
 800bdea:	d801      	bhi.n	800bdf0 <_strtol_l.isra.0+0xb4>
 800bdec:	3c37      	subs	r4, #55	@ 0x37
 800bdee:	e7ea      	b.n	800bdc6 <_strtol_l.isra.0+0x8a>
 800bdf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdf4:	2f19      	cmp	r7, #25
 800bdf6:	d804      	bhi.n	800be02 <_strtol_l.isra.0+0xc6>
 800bdf8:	3c57      	subs	r4, #87	@ 0x57
 800bdfa:	e7e4      	b.n	800bdc6 <_strtol_l.isra.0+0x8a>
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800be00:	e7ed      	b.n	800bdde <_strtol_l.isra.0+0xa2>
 800be02:	1c53      	adds	r3, r2, #1
 800be04:	d108      	bne.n	800be18 <_strtol_l.isra.0+0xdc>
 800be06:	2322      	movs	r3, #34	@ 0x22
 800be08:	f8ce 3000 	str.w	r3, [lr]
 800be0c:	4660      	mov	r0, ip
 800be0e:	f1b8 0f00 	cmp.w	r8, #0
 800be12:	d0a0      	beq.n	800bd56 <_strtol_l.isra.0+0x1a>
 800be14:	1e69      	subs	r1, r5, #1
 800be16:	e006      	b.n	800be26 <_strtol_l.isra.0+0xea>
 800be18:	b106      	cbz	r6, 800be1c <_strtol_l.isra.0+0xe0>
 800be1a:	4240      	negs	r0, r0
 800be1c:	f1b8 0f00 	cmp.w	r8, #0
 800be20:	d099      	beq.n	800bd56 <_strtol_l.isra.0+0x1a>
 800be22:	2a00      	cmp	r2, #0
 800be24:	d1f6      	bne.n	800be14 <_strtol_l.isra.0+0xd8>
 800be26:	f8c8 1000 	str.w	r1, [r8]
 800be2a:	e794      	b.n	800bd56 <_strtol_l.isra.0+0x1a>
 800be2c:	0800dd05 	.word	0x0800dd05

0800be30 <strtol>:
 800be30:	4613      	mov	r3, r2
 800be32:	460a      	mov	r2, r1
 800be34:	4601      	mov	r1, r0
 800be36:	4802      	ldr	r0, [pc, #8]	@ (800be40 <strtol+0x10>)
 800be38:	6800      	ldr	r0, [r0, #0]
 800be3a:	f7ff bf7f 	b.w	800bd3c <_strtol_l.isra.0>
 800be3e:	bf00      	nop
 800be40:	20000150 	.word	0x20000150

0800be44 <std>:
 800be44:	2300      	movs	r3, #0
 800be46:	b510      	push	{r4, lr}
 800be48:	4604      	mov	r4, r0
 800be4a:	e9c0 3300 	strd	r3, r3, [r0]
 800be4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be52:	6083      	str	r3, [r0, #8]
 800be54:	8181      	strh	r1, [r0, #12]
 800be56:	6643      	str	r3, [r0, #100]	@ 0x64
 800be58:	81c2      	strh	r2, [r0, #14]
 800be5a:	6183      	str	r3, [r0, #24]
 800be5c:	4619      	mov	r1, r3
 800be5e:	2208      	movs	r2, #8
 800be60:	305c      	adds	r0, #92	@ 0x5c
 800be62:	f000 f92a 	bl	800c0ba <memset>
 800be66:	4b0d      	ldr	r3, [pc, #52]	@ (800be9c <std+0x58>)
 800be68:	6263      	str	r3, [r4, #36]	@ 0x24
 800be6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bea0 <std+0x5c>)
 800be6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bea4 <std+0x60>)
 800be70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be72:	4b0d      	ldr	r3, [pc, #52]	@ (800bea8 <std+0x64>)
 800be74:	6323      	str	r3, [r4, #48]	@ 0x30
 800be76:	4b0d      	ldr	r3, [pc, #52]	@ (800beac <std+0x68>)
 800be78:	6224      	str	r4, [r4, #32]
 800be7a:	429c      	cmp	r4, r3
 800be7c:	d006      	beq.n	800be8c <std+0x48>
 800be7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be82:	4294      	cmp	r4, r2
 800be84:	d002      	beq.n	800be8c <std+0x48>
 800be86:	33d0      	adds	r3, #208	@ 0xd0
 800be88:	429c      	cmp	r4, r3
 800be8a:	d105      	bne.n	800be98 <std+0x54>
 800be8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be94:	f000 b9e6 	b.w	800c264 <__retarget_lock_init_recursive>
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop
 800be9c:	0800c035 	.word	0x0800c035
 800bea0:	0800c057 	.word	0x0800c057
 800bea4:	0800c08f 	.word	0x0800c08f
 800bea8:	0800c0b3 	.word	0x0800c0b3
 800beac:	200012c4 	.word	0x200012c4

0800beb0 <stdio_exit_handler>:
 800beb0:	4a02      	ldr	r2, [pc, #8]	@ (800bebc <stdio_exit_handler+0xc>)
 800beb2:	4903      	ldr	r1, [pc, #12]	@ (800bec0 <stdio_exit_handler+0x10>)
 800beb4:	4803      	ldr	r0, [pc, #12]	@ (800bec4 <stdio_exit_handler+0x14>)
 800beb6:	f000 b869 	b.w	800bf8c <_fwalk_sglue>
 800beba:	bf00      	nop
 800bebc:	20000144 	.word	0x20000144
 800bec0:	0800ce19 	.word	0x0800ce19
 800bec4:	20000154 	.word	0x20000154

0800bec8 <cleanup_stdio>:
 800bec8:	6841      	ldr	r1, [r0, #4]
 800beca:	4b0c      	ldr	r3, [pc, #48]	@ (800befc <cleanup_stdio+0x34>)
 800becc:	4299      	cmp	r1, r3
 800bece:	b510      	push	{r4, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	d001      	beq.n	800bed8 <cleanup_stdio+0x10>
 800bed4:	f000 ffa0 	bl	800ce18 <_fflush_r>
 800bed8:	68a1      	ldr	r1, [r4, #8]
 800beda:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <cleanup_stdio+0x38>)
 800bedc:	4299      	cmp	r1, r3
 800bede:	d002      	beq.n	800bee6 <cleanup_stdio+0x1e>
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 ff99 	bl	800ce18 <_fflush_r>
 800bee6:	68e1      	ldr	r1, [r4, #12]
 800bee8:	4b06      	ldr	r3, [pc, #24]	@ (800bf04 <cleanup_stdio+0x3c>)
 800beea:	4299      	cmp	r1, r3
 800beec:	d004      	beq.n	800bef8 <cleanup_stdio+0x30>
 800beee:	4620      	mov	r0, r4
 800bef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef4:	f000 bf90 	b.w	800ce18 <_fflush_r>
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	bf00      	nop
 800befc:	200012c4 	.word	0x200012c4
 800bf00:	2000132c 	.word	0x2000132c
 800bf04:	20001394 	.word	0x20001394

0800bf08 <global_stdio_init.part.0>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf38 <global_stdio_init.part.0+0x30>)
 800bf0c:	4c0b      	ldr	r4, [pc, #44]	@ (800bf3c <global_stdio_init.part.0+0x34>)
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bf40 <global_stdio_init.part.0+0x38>)
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	4620      	mov	r0, r4
 800bf14:	2200      	movs	r2, #0
 800bf16:	2104      	movs	r1, #4
 800bf18:	f7ff ff94 	bl	800be44 <std>
 800bf1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf20:	2201      	movs	r2, #1
 800bf22:	2109      	movs	r1, #9
 800bf24:	f7ff ff8e 	bl	800be44 <std>
 800bf28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf32:	2112      	movs	r1, #18
 800bf34:	f7ff bf86 	b.w	800be44 <std>
 800bf38:	200013fc 	.word	0x200013fc
 800bf3c:	200012c4 	.word	0x200012c4
 800bf40:	0800beb1 	.word	0x0800beb1

0800bf44 <__sfp_lock_acquire>:
 800bf44:	4801      	ldr	r0, [pc, #4]	@ (800bf4c <__sfp_lock_acquire+0x8>)
 800bf46:	f000 b98e 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	20001405 	.word	0x20001405

0800bf50 <__sfp_lock_release>:
 800bf50:	4801      	ldr	r0, [pc, #4]	@ (800bf58 <__sfp_lock_release+0x8>)
 800bf52:	f000 b989 	b.w	800c268 <__retarget_lock_release_recursive>
 800bf56:	bf00      	nop
 800bf58:	20001405 	.word	0x20001405

0800bf5c <__sinit>:
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	4604      	mov	r4, r0
 800bf60:	f7ff fff0 	bl	800bf44 <__sfp_lock_acquire>
 800bf64:	6a23      	ldr	r3, [r4, #32]
 800bf66:	b11b      	cbz	r3, 800bf70 <__sinit+0x14>
 800bf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf6c:	f7ff bff0 	b.w	800bf50 <__sfp_lock_release>
 800bf70:	4b04      	ldr	r3, [pc, #16]	@ (800bf84 <__sinit+0x28>)
 800bf72:	6223      	str	r3, [r4, #32]
 800bf74:	4b04      	ldr	r3, [pc, #16]	@ (800bf88 <__sinit+0x2c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1f5      	bne.n	800bf68 <__sinit+0xc>
 800bf7c:	f7ff ffc4 	bl	800bf08 <global_stdio_init.part.0>
 800bf80:	e7f2      	b.n	800bf68 <__sinit+0xc>
 800bf82:	bf00      	nop
 800bf84:	0800bec9 	.word	0x0800bec9
 800bf88:	200013fc 	.word	0x200013fc

0800bf8c <_fwalk_sglue>:
 800bf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf90:	4607      	mov	r7, r0
 800bf92:	4688      	mov	r8, r1
 800bf94:	4614      	mov	r4, r2
 800bf96:	2600      	movs	r6, #0
 800bf98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf9c:	f1b9 0901 	subs.w	r9, r9, #1
 800bfa0:	d505      	bpl.n	800bfae <_fwalk_sglue+0x22>
 800bfa2:	6824      	ldr	r4, [r4, #0]
 800bfa4:	2c00      	cmp	r4, #0
 800bfa6:	d1f7      	bne.n	800bf98 <_fwalk_sglue+0xc>
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d907      	bls.n	800bfc4 <_fwalk_sglue+0x38>
 800bfb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	d003      	beq.n	800bfc4 <_fwalk_sglue+0x38>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	47c0      	blx	r8
 800bfc2:	4306      	orrs	r6, r0
 800bfc4:	3568      	adds	r5, #104	@ 0x68
 800bfc6:	e7e9      	b.n	800bf9c <_fwalk_sglue+0x10>

0800bfc8 <sniprintf>:
 800bfc8:	b40c      	push	{r2, r3}
 800bfca:	b530      	push	{r4, r5, lr}
 800bfcc:	4b18      	ldr	r3, [pc, #96]	@ (800c030 <sniprintf+0x68>)
 800bfce:	1e0c      	subs	r4, r1, #0
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	b09d      	sub	sp, #116	@ 0x74
 800bfd4:	da08      	bge.n	800bfe8 <sniprintf+0x20>
 800bfd6:	238b      	movs	r3, #139	@ 0x8b
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	f04f 30ff 	mov.w	r0, #4294967295
 800bfde:	b01d      	add	sp, #116	@ 0x74
 800bfe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfe4:	b002      	add	sp, #8
 800bfe6:	4770      	bx	lr
 800bfe8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bfec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bff0:	f04f 0300 	mov.w	r3, #0
 800bff4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bff6:	bf14      	ite	ne
 800bff8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bffc:	4623      	moveq	r3, r4
 800bffe:	9304      	str	r3, [sp, #16]
 800c000:	9307      	str	r3, [sp, #28]
 800c002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c006:	9002      	str	r0, [sp, #8]
 800c008:	9006      	str	r0, [sp, #24]
 800c00a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c00e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c010:	ab21      	add	r3, sp, #132	@ 0x84
 800c012:	a902      	add	r1, sp, #8
 800c014:	4628      	mov	r0, r5
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	f000 fab0 	bl	800c57c <_svfiprintf_r>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	bfbc      	itt	lt
 800c020:	238b      	movlt	r3, #139	@ 0x8b
 800c022:	602b      	strlt	r3, [r5, #0]
 800c024:	2c00      	cmp	r4, #0
 800c026:	d0da      	beq.n	800bfde <sniprintf+0x16>
 800c028:	9b02      	ldr	r3, [sp, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	e7d6      	b.n	800bfde <sniprintf+0x16>
 800c030:	20000150 	.word	0x20000150

0800c034 <__sread>:
 800c034:	b510      	push	{r4, lr}
 800c036:	460c      	mov	r4, r1
 800c038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03c:	f000 f8c4 	bl	800c1c8 <_read_r>
 800c040:	2800      	cmp	r0, #0
 800c042:	bfab      	itete	ge
 800c044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c046:	89a3      	ldrhlt	r3, [r4, #12]
 800c048:	181b      	addge	r3, r3, r0
 800c04a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c04e:	bfac      	ite	ge
 800c050:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c052:	81a3      	strhlt	r3, [r4, #12]
 800c054:	bd10      	pop	{r4, pc}

0800c056 <__swrite>:
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05a:	461f      	mov	r7, r3
 800c05c:	898b      	ldrh	r3, [r1, #12]
 800c05e:	05db      	lsls	r3, r3, #23
 800c060:	4605      	mov	r5, r0
 800c062:	460c      	mov	r4, r1
 800c064:	4616      	mov	r6, r2
 800c066:	d505      	bpl.n	800c074 <__swrite+0x1e>
 800c068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06c:	2302      	movs	r3, #2
 800c06e:	2200      	movs	r2, #0
 800c070:	f000 f898 	bl	800c1a4 <_lseek_r>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c07a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	4632      	mov	r2, r6
 800c082:	463b      	mov	r3, r7
 800c084:	4628      	mov	r0, r5
 800c086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	f000 b8af 	b.w	800c1ec <_write_r>

0800c08e <__sseek>:
 800c08e:	b510      	push	{r4, lr}
 800c090:	460c      	mov	r4, r1
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 f885 	bl	800c1a4 <_lseek_r>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	bf15      	itete	ne
 800c0a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0aa:	81a3      	strheq	r3, [r4, #12]
 800c0ac:	bf18      	it	ne
 800c0ae:	81a3      	strhne	r3, [r4, #12]
 800c0b0:	bd10      	pop	{r4, pc}

0800c0b2 <__sclose>:
 800c0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b6:	f000 b865 	b.w	800c184 <_close_r>

0800c0ba <memset>:
 800c0ba:	4402      	add	r2, r0
 800c0bc:	4603      	mov	r3, r0
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d100      	bne.n	800c0c4 <memset+0xa>
 800c0c2:	4770      	bx	lr
 800c0c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c0c8:	e7f9      	b.n	800c0be <memset+0x4>
	...

0800c0cc <strtok>:
 800c0cc:	4b16      	ldr	r3, [pc, #88]	@ (800c128 <strtok+0x5c>)
 800c0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d2:	681f      	ldr	r7, [r3, #0]
 800c0d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	460e      	mov	r6, r1
 800c0da:	b9ec      	cbnz	r4, 800c118 <strtok+0x4c>
 800c0dc:	2050      	movs	r0, #80	@ 0x50
 800c0de:	f000 f93b 	bl	800c358 <malloc>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800c0e6:	b920      	cbnz	r0, 800c0f2 <strtok+0x26>
 800c0e8:	4b10      	ldr	r3, [pc, #64]	@ (800c12c <strtok+0x60>)
 800c0ea:	4811      	ldr	r0, [pc, #68]	@ (800c130 <strtok+0x64>)
 800c0ec:	215b      	movs	r1, #91	@ 0x5b
 800c0ee:	f000 f8cb 	bl	800c288 <__assert_func>
 800c0f2:	e9c0 4400 	strd	r4, r4, [r0]
 800c0f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c0fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c0fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c102:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c106:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c10a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c10e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c112:	6184      	str	r4, [r0, #24]
 800c114:	7704      	strb	r4, [r0, #28]
 800c116:	6244      	str	r4, [r0, #36]	@ 0x24
 800c118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	2301      	movs	r3, #1
 800c120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c124:	f000 b806 	b.w	800c134 <__strtok_r>
 800c128:	20000150 	.word	0x20000150
 800c12c:	0800de05 	.word	0x0800de05
 800c130:	0800de1c 	.word	0x0800de1c

0800c134 <__strtok_r>:
 800c134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c136:	4604      	mov	r4, r0
 800c138:	b908      	cbnz	r0, 800c13e <__strtok_r+0xa>
 800c13a:	6814      	ldr	r4, [r2, #0]
 800c13c:	b144      	cbz	r4, 800c150 <__strtok_r+0x1c>
 800c13e:	4620      	mov	r0, r4
 800c140:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c144:	460f      	mov	r7, r1
 800c146:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c14a:	b91e      	cbnz	r6, 800c154 <__strtok_r+0x20>
 800c14c:	b965      	cbnz	r5, 800c168 <__strtok_r+0x34>
 800c14e:	6015      	str	r5, [r2, #0]
 800c150:	2000      	movs	r0, #0
 800c152:	e005      	b.n	800c160 <__strtok_r+0x2c>
 800c154:	42b5      	cmp	r5, r6
 800c156:	d1f6      	bne.n	800c146 <__strtok_r+0x12>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1f0      	bne.n	800c13e <__strtok_r+0xa>
 800c15c:	6014      	str	r4, [r2, #0]
 800c15e:	7003      	strb	r3, [r0, #0]
 800c160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c162:	461c      	mov	r4, r3
 800c164:	e00c      	b.n	800c180 <__strtok_r+0x4c>
 800c166:	b91d      	cbnz	r5, 800c170 <__strtok_r+0x3c>
 800c168:	4627      	mov	r7, r4
 800c16a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c16e:	460e      	mov	r6, r1
 800c170:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c174:	42ab      	cmp	r3, r5
 800c176:	d1f6      	bne.n	800c166 <__strtok_r+0x32>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d0f2      	beq.n	800c162 <__strtok_r+0x2e>
 800c17c:	2300      	movs	r3, #0
 800c17e:	703b      	strb	r3, [r7, #0]
 800c180:	6014      	str	r4, [r2, #0]
 800c182:	e7ed      	b.n	800c160 <__strtok_r+0x2c>

0800c184 <_close_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	@ (800c1a0 <_close_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f6 fe77 	bl	8002e82 <_close>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_close_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_close_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20001400 	.word	0x20001400

0800c1a4 <_lseek_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d07      	ldr	r5, [pc, #28]	@ (800c1c4 <_lseek_r+0x20>)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	4608      	mov	r0, r1
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	602a      	str	r2, [r5, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f7f6 fe8c 	bl	8002ed0 <_lseek>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_lseek_r+0x1e>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_lseek_r+0x1e>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	20001400 	.word	0x20001400

0800c1c8 <_read_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d07      	ldr	r5, [pc, #28]	@ (800c1e8 <_read_r+0x20>)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	4608      	mov	r0, r1
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	602a      	str	r2, [r5, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7f6 fe1a 	bl	8002e10 <_read>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_read_r+0x1e>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_read_r+0x1e>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	20001400 	.word	0x20001400

0800c1ec <_write_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	@ (800c20c <_write_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f6 fe25 	bl	8002e4a <_write>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_write_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_write_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20001400 	.word	0x20001400

0800c210 <__errno>:
 800c210:	4b01      	ldr	r3, [pc, #4]	@ (800c218 <__errno+0x8>)
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000150 	.word	0x20000150

0800c21c <__libc_init_array>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4d0d      	ldr	r5, [pc, #52]	@ (800c254 <__libc_init_array+0x38>)
 800c220:	4c0d      	ldr	r4, [pc, #52]	@ (800c258 <__libc_init_array+0x3c>)
 800c222:	1b64      	subs	r4, r4, r5
 800c224:	10a4      	asrs	r4, r4, #2
 800c226:	2600      	movs	r6, #0
 800c228:	42a6      	cmp	r6, r4
 800c22a:	d109      	bne.n	800c240 <__libc_init_array+0x24>
 800c22c:	4d0b      	ldr	r5, [pc, #44]	@ (800c25c <__libc_init_array+0x40>)
 800c22e:	4c0c      	ldr	r4, [pc, #48]	@ (800c260 <__libc_init_array+0x44>)
 800c230:	f000 fff0 	bl	800d214 <_init>
 800c234:	1b64      	subs	r4, r4, r5
 800c236:	10a4      	asrs	r4, r4, #2
 800c238:	2600      	movs	r6, #0
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	d105      	bne.n	800c24a <__libc_init_array+0x2e>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f855 3b04 	ldr.w	r3, [r5], #4
 800c244:	4798      	blx	r3
 800c246:	3601      	adds	r6, #1
 800c248:	e7ee      	b.n	800c228 <__libc_init_array+0xc>
 800c24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24e:	4798      	blx	r3
 800c250:	3601      	adds	r6, #1
 800c252:	e7f2      	b.n	800c23a <__libc_init_array+0x1e>
 800c254:	0800def0 	.word	0x0800def0
 800c258:	0800def0 	.word	0x0800def0
 800c25c:	0800def0 	.word	0x0800def0
 800c260:	0800def4 	.word	0x0800def4

0800c264 <__retarget_lock_init_recursive>:
 800c264:	4770      	bx	lr

0800c266 <__retarget_lock_acquire_recursive>:
 800c266:	4770      	bx	lr

0800c268 <__retarget_lock_release_recursive>:
 800c268:	4770      	bx	lr

0800c26a <memcpy>:
 800c26a:	440a      	add	r2, r1
 800c26c:	4291      	cmp	r1, r2
 800c26e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c272:	d100      	bne.n	800c276 <memcpy+0xc>
 800c274:	4770      	bx	lr
 800c276:	b510      	push	{r4, lr}
 800c278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c280:	4291      	cmp	r1, r2
 800c282:	d1f9      	bne.n	800c278 <memcpy+0xe>
 800c284:	bd10      	pop	{r4, pc}
	...

0800c288 <__assert_func>:
 800c288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c28a:	4614      	mov	r4, r2
 800c28c:	461a      	mov	r2, r3
 800c28e:	4b09      	ldr	r3, [pc, #36]	@ (800c2b4 <__assert_func+0x2c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4605      	mov	r5, r0
 800c294:	68d8      	ldr	r0, [r3, #12]
 800c296:	b14c      	cbz	r4, 800c2ac <__assert_func+0x24>
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <__assert_func+0x30>)
 800c29a:	9100      	str	r1, [sp, #0]
 800c29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2a0:	4906      	ldr	r1, [pc, #24]	@ (800c2bc <__assert_func+0x34>)
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	f000 fde0 	bl	800ce68 <fiprintf>
 800c2a8:	f000 feae 	bl	800d008 <abort>
 800c2ac:	4b04      	ldr	r3, [pc, #16]	@ (800c2c0 <__assert_func+0x38>)
 800c2ae:	461c      	mov	r4, r3
 800c2b0:	e7f3      	b.n	800c29a <__assert_func+0x12>
 800c2b2:	bf00      	nop
 800c2b4:	20000150 	.word	0x20000150
 800c2b8:	0800de76 	.word	0x0800de76
 800c2bc:	0800de83 	.word	0x0800de83
 800c2c0:	0800deb1 	.word	0x0800deb1

0800c2c4 <_free_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	d041      	beq.n	800c350 <_free_r+0x8c>
 800c2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d0:	1f0c      	subs	r4, r1, #4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	bfb8      	it	lt
 800c2d6:	18e4      	addlt	r4, r4, r3
 800c2d8:	f000 f8e8 	bl	800c4ac <__malloc_lock>
 800c2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c354 <_free_r+0x90>)
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	b933      	cbnz	r3, 800c2f0 <_free_r+0x2c>
 800c2e2:	6063      	str	r3, [r4, #4]
 800c2e4:	6014      	str	r4, [r2, #0]
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ec:	f000 b8e4 	b.w	800c4b8 <__malloc_unlock>
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	d908      	bls.n	800c306 <_free_r+0x42>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	1821      	adds	r1, r4, r0
 800c2f8:	428b      	cmp	r3, r1
 800c2fa:	bf01      	itttt	eq
 800c2fc:	6819      	ldreq	r1, [r3, #0]
 800c2fe:	685b      	ldreq	r3, [r3, #4]
 800c300:	1809      	addeq	r1, r1, r0
 800c302:	6021      	streq	r1, [r4, #0]
 800c304:	e7ed      	b.n	800c2e2 <_free_r+0x1e>
 800c306:	461a      	mov	r2, r3
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b10b      	cbz	r3, 800c310 <_free_r+0x4c>
 800c30c:	42a3      	cmp	r3, r4
 800c30e:	d9fa      	bls.n	800c306 <_free_r+0x42>
 800c310:	6811      	ldr	r1, [r2, #0]
 800c312:	1850      	adds	r0, r2, r1
 800c314:	42a0      	cmp	r0, r4
 800c316:	d10b      	bne.n	800c330 <_free_r+0x6c>
 800c318:	6820      	ldr	r0, [r4, #0]
 800c31a:	4401      	add	r1, r0
 800c31c:	1850      	adds	r0, r2, r1
 800c31e:	4283      	cmp	r3, r0
 800c320:	6011      	str	r1, [r2, #0]
 800c322:	d1e0      	bne.n	800c2e6 <_free_r+0x22>
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	6053      	str	r3, [r2, #4]
 800c32a:	4408      	add	r0, r1
 800c32c:	6010      	str	r0, [r2, #0]
 800c32e:	e7da      	b.n	800c2e6 <_free_r+0x22>
 800c330:	d902      	bls.n	800c338 <_free_r+0x74>
 800c332:	230c      	movs	r3, #12
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	e7d6      	b.n	800c2e6 <_free_r+0x22>
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	1821      	adds	r1, r4, r0
 800c33c:	428b      	cmp	r3, r1
 800c33e:	bf04      	itt	eq
 800c340:	6819      	ldreq	r1, [r3, #0]
 800c342:	685b      	ldreq	r3, [r3, #4]
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	bf04      	itt	eq
 800c348:	1809      	addeq	r1, r1, r0
 800c34a:	6021      	streq	r1, [r4, #0]
 800c34c:	6054      	str	r4, [r2, #4]
 800c34e:	e7ca      	b.n	800c2e6 <_free_r+0x22>
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	bf00      	nop
 800c354:	2000140c 	.word	0x2000140c

0800c358 <malloc>:
 800c358:	4b02      	ldr	r3, [pc, #8]	@ (800c364 <malloc+0xc>)
 800c35a:	4601      	mov	r1, r0
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	f000 b825 	b.w	800c3ac <_malloc_r>
 800c362:	bf00      	nop
 800c364:	20000150 	.word	0x20000150

0800c368 <sbrk_aligned>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	4e0f      	ldr	r6, [pc, #60]	@ (800c3a8 <sbrk_aligned+0x40>)
 800c36c:	460c      	mov	r4, r1
 800c36e:	6831      	ldr	r1, [r6, #0]
 800c370:	4605      	mov	r5, r0
 800c372:	b911      	cbnz	r1, 800c37a <sbrk_aligned+0x12>
 800c374:	f000 fe38 	bl	800cfe8 <_sbrk_r>
 800c378:	6030      	str	r0, [r6, #0]
 800c37a:	4621      	mov	r1, r4
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 fe33 	bl	800cfe8 <_sbrk_r>
 800c382:	1c43      	adds	r3, r0, #1
 800c384:	d103      	bne.n	800c38e <sbrk_aligned+0x26>
 800c386:	f04f 34ff 	mov.w	r4, #4294967295
 800c38a:	4620      	mov	r0, r4
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	1cc4      	adds	r4, r0, #3
 800c390:	f024 0403 	bic.w	r4, r4, #3
 800c394:	42a0      	cmp	r0, r4
 800c396:	d0f8      	beq.n	800c38a <sbrk_aligned+0x22>
 800c398:	1a21      	subs	r1, r4, r0
 800c39a:	4628      	mov	r0, r5
 800c39c:	f000 fe24 	bl	800cfe8 <_sbrk_r>
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	d1f2      	bne.n	800c38a <sbrk_aligned+0x22>
 800c3a4:	e7ef      	b.n	800c386 <sbrk_aligned+0x1e>
 800c3a6:	bf00      	nop
 800c3a8:	20001408 	.word	0x20001408

0800c3ac <_malloc_r>:
 800c3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b0:	1ccd      	adds	r5, r1, #3
 800c3b2:	f025 0503 	bic.w	r5, r5, #3
 800c3b6:	3508      	adds	r5, #8
 800c3b8:	2d0c      	cmp	r5, #12
 800c3ba:	bf38      	it	cc
 800c3bc:	250c      	movcc	r5, #12
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	db01      	blt.n	800c3c8 <_malloc_r+0x1c>
 800c3c4:	42a9      	cmp	r1, r5
 800c3c6:	d904      	bls.n	800c3d2 <_malloc_r+0x26>
 800c3c8:	230c      	movs	r3, #12
 800c3ca:	6033      	str	r3, [r6, #0]
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4a8 <_malloc_r+0xfc>
 800c3d6:	f000 f869 	bl	800c4ac <__malloc_lock>
 800c3da:	f8d8 3000 	ldr.w	r3, [r8]
 800c3de:	461c      	mov	r4, r3
 800c3e0:	bb44      	cbnz	r4, 800c434 <_malloc_r+0x88>
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7ff ffbf 	bl	800c368 <sbrk_aligned>
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	d158      	bne.n	800c4a2 <_malloc_r+0xf6>
 800c3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c3f4:	4627      	mov	r7, r4
 800c3f6:	2f00      	cmp	r7, #0
 800c3f8:	d143      	bne.n	800c482 <_malloc_r+0xd6>
 800c3fa:	2c00      	cmp	r4, #0
 800c3fc:	d04b      	beq.n	800c496 <_malloc_r+0xea>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	4639      	mov	r1, r7
 800c402:	4630      	mov	r0, r6
 800c404:	eb04 0903 	add.w	r9, r4, r3
 800c408:	f000 fdee 	bl	800cfe8 <_sbrk_r>
 800c40c:	4581      	cmp	r9, r0
 800c40e:	d142      	bne.n	800c496 <_malloc_r+0xea>
 800c410:	6821      	ldr	r1, [r4, #0]
 800c412:	1a6d      	subs	r5, r5, r1
 800c414:	4629      	mov	r1, r5
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ffa6 	bl	800c368 <sbrk_aligned>
 800c41c:	3001      	adds	r0, #1
 800c41e:	d03a      	beq.n	800c496 <_malloc_r+0xea>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	442b      	add	r3, r5
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	f8d8 3000 	ldr.w	r3, [r8]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	bb62      	cbnz	r2, 800c488 <_malloc_r+0xdc>
 800c42e:	f8c8 7000 	str.w	r7, [r8]
 800c432:	e00f      	b.n	800c454 <_malloc_r+0xa8>
 800c434:	6822      	ldr	r2, [r4, #0]
 800c436:	1b52      	subs	r2, r2, r5
 800c438:	d420      	bmi.n	800c47c <_malloc_r+0xd0>
 800c43a:	2a0b      	cmp	r2, #11
 800c43c:	d917      	bls.n	800c46e <_malloc_r+0xc2>
 800c43e:	1961      	adds	r1, r4, r5
 800c440:	42a3      	cmp	r3, r4
 800c442:	6025      	str	r5, [r4, #0]
 800c444:	bf18      	it	ne
 800c446:	6059      	strne	r1, [r3, #4]
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	bf08      	it	eq
 800c44c:	f8c8 1000 	streq.w	r1, [r8]
 800c450:	5162      	str	r2, [r4, r5]
 800c452:	604b      	str	r3, [r1, #4]
 800c454:	4630      	mov	r0, r6
 800c456:	f000 f82f 	bl	800c4b8 <__malloc_unlock>
 800c45a:	f104 000b 	add.w	r0, r4, #11
 800c45e:	1d23      	adds	r3, r4, #4
 800c460:	f020 0007 	bic.w	r0, r0, #7
 800c464:	1ac2      	subs	r2, r0, r3
 800c466:	bf1c      	itt	ne
 800c468:	1a1b      	subne	r3, r3, r0
 800c46a:	50a3      	strne	r3, [r4, r2]
 800c46c:	e7af      	b.n	800c3ce <_malloc_r+0x22>
 800c46e:	6862      	ldr	r2, [r4, #4]
 800c470:	42a3      	cmp	r3, r4
 800c472:	bf0c      	ite	eq
 800c474:	f8c8 2000 	streq.w	r2, [r8]
 800c478:	605a      	strne	r2, [r3, #4]
 800c47a:	e7eb      	b.n	800c454 <_malloc_r+0xa8>
 800c47c:	4623      	mov	r3, r4
 800c47e:	6864      	ldr	r4, [r4, #4]
 800c480:	e7ae      	b.n	800c3e0 <_malloc_r+0x34>
 800c482:	463c      	mov	r4, r7
 800c484:	687f      	ldr	r7, [r7, #4]
 800c486:	e7b6      	b.n	800c3f6 <_malloc_r+0x4a>
 800c488:	461a      	mov	r2, r3
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d1fb      	bne.n	800c488 <_malloc_r+0xdc>
 800c490:	2300      	movs	r3, #0
 800c492:	6053      	str	r3, [r2, #4]
 800c494:	e7de      	b.n	800c454 <_malloc_r+0xa8>
 800c496:	230c      	movs	r3, #12
 800c498:	6033      	str	r3, [r6, #0]
 800c49a:	4630      	mov	r0, r6
 800c49c:	f000 f80c 	bl	800c4b8 <__malloc_unlock>
 800c4a0:	e794      	b.n	800c3cc <_malloc_r+0x20>
 800c4a2:	6005      	str	r5, [r0, #0]
 800c4a4:	e7d6      	b.n	800c454 <_malloc_r+0xa8>
 800c4a6:	bf00      	nop
 800c4a8:	2000140c 	.word	0x2000140c

0800c4ac <__malloc_lock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	@ (800c4b4 <__malloc_lock+0x8>)
 800c4ae:	f7ff beda 	b.w	800c266 <__retarget_lock_acquire_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20001404 	.word	0x20001404

0800c4b8 <__malloc_unlock>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	@ (800c4c0 <__malloc_unlock+0x8>)
 800c4ba:	f7ff bed5 	b.w	800c268 <__retarget_lock_release_recursive>
 800c4be:	bf00      	nop
 800c4c0:	20001404 	.word	0x20001404

0800c4c4 <__ssputs_r>:
 800c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c8:	688e      	ldr	r6, [r1, #8]
 800c4ca:	461f      	mov	r7, r3
 800c4cc:	42be      	cmp	r6, r7
 800c4ce:	680b      	ldr	r3, [r1, #0]
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	4690      	mov	r8, r2
 800c4d6:	d82d      	bhi.n	800c534 <__ssputs_r+0x70>
 800c4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4e0:	d026      	beq.n	800c530 <__ssputs_r+0x6c>
 800c4e2:	6965      	ldr	r5, [r4, #20]
 800c4e4:	6909      	ldr	r1, [r1, #16]
 800c4e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4ea:	eba3 0901 	sub.w	r9, r3, r1
 800c4ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f2:	1c7b      	adds	r3, r7, #1
 800c4f4:	444b      	add	r3, r9
 800c4f6:	106d      	asrs	r5, r5, #1
 800c4f8:	429d      	cmp	r5, r3
 800c4fa:	bf38      	it	cc
 800c4fc:	461d      	movcc	r5, r3
 800c4fe:	0553      	lsls	r3, r2, #21
 800c500:	d527      	bpl.n	800c552 <__ssputs_r+0x8e>
 800c502:	4629      	mov	r1, r5
 800c504:	f7ff ff52 	bl	800c3ac <_malloc_r>
 800c508:	4606      	mov	r6, r0
 800c50a:	b360      	cbz	r0, 800c566 <__ssputs_r+0xa2>
 800c50c:	6921      	ldr	r1, [r4, #16]
 800c50e:	464a      	mov	r2, r9
 800c510:	f7ff feab 	bl	800c26a <memcpy>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c51e:	81a3      	strh	r3, [r4, #12]
 800c520:	6126      	str	r6, [r4, #16]
 800c522:	6165      	str	r5, [r4, #20]
 800c524:	444e      	add	r6, r9
 800c526:	eba5 0509 	sub.w	r5, r5, r9
 800c52a:	6026      	str	r6, [r4, #0]
 800c52c:	60a5      	str	r5, [r4, #8]
 800c52e:	463e      	mov	r6, r7
 800c530:	42be      	cmp	r6, r7
 800c532:	d900      	bls.n	800c536 <__ssputs_r+0x72>
 800c534:	463e      	mov	r6, r7
 800c536:	6820      	ldr	r0, [r4, #0]
 800c538:	4632      	mov	r2, r6
 800c53a:	4641      	mov	r1, r8
 800c53c:	f000 fd3a 	bl	800cfb4 <memmove>
 800c540:	68a3      	ldr	r3, [r4, #8]
 800c542:	1b9b      	subs	r3, r3, r6
 800c544:	60a3      	str	r3, [r4, #8]
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	4433      	add	r3, r6
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	2000      	movs	r0, #0
 800c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c552:	462a      	mov	r2, r5
 800c554:	f000 fd5f 	bl	800d016 <_realloc_r>
 800c558:	4606      	mov	r6, r0
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d1e0      	bne.n	800c520 <__ssputs_r+0x5c>
 800c55e:	6921      	ldr	r1, [r4, #16]
 800c560:	4650      	mov	r0, sl
 800c562:	f7ff feaf 	bl	800c2c4 <_free_r>
 800c566:	230c      	movs	r3, #12
 800c568:	f8ca 3000 	str.w	r3, [sl]
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c572:	81a3      	strh	r3, [r4, #12]
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	e7e9      	b.n	800c54e <__ssputs_r+0x8a>
	...

0800c57c <_svfiprintf_r>:
 800c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	4698      	mov	r8, r3
 800c582:	898b      	ldrh	r3, [r1, #12]
 800c584:	061b      	lsls	r3, r3, #24
 800c586:	b09d      	sub	sp, #116	@ 0x74
 800c588:	4607      	mov	r7, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	4614      	mov	r4, r2
 800c58e:	d510      	bpl.n	800c5b2 <_svfiprintf_r+0x36>
 800c590:	690b      	ldr	r3, [r1, #16]
 800c592:	b973      	cbnz	r3, 800c5b2 <_svfiprintf_r+0x36>
 800c594:	2140      	movs	r1, #64	@ 0x40
 800c596:	f7ff ff09 	bl	800c3ac <_malloc_r>
 800c59a:	6028      	str	r0, [r5, #0]
 800c59c:	6128      	str	r0, [r5, #16]
 800c59e:	b930      	cbnz	r0, 800c5ae <_svfiprintf_r+0x32>
 800c5a0:	230c      	movs	r3, #12
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	b01d      	add	sp, #116	@ 0x74
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ae:	2340      	movs	r3, #64	@ 0x40
 800c5b0:	616b      	str	r3, [r5, #20]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b6:	2320      	movs	r3, #32
 800c5b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5c0:	2330      	movs	r3, #48	@ 0x30
 800c5c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c760 <_svfiprintf_r+0x1e4>
 800c5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5ca:	f04f 0901 	mov.w	r9, #1
 800c5ce:	4623      	mov	r3, r4
 800c5d0:	469a      	mov	sl, r3
 800c5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d6:	b10a      	cbz	r2, 800c5dc <_svfiprintf_r+0x60>
 800c5d8:	2a25      	cmp	r2, #37	@ 0x25
 800c5da:	d1f9      	bne.n	800c5d0 <_svfiprintf_r+0x54>
 800c5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c5e0:	d00b      	beq.n	800c5fa <_svfiprintf_r+0x7e>
 800c5e2:	465b      	mov	r3, fp
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	f7ff ff6b 	bl	800c4c4 <__ssputs_r>
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f000 80a7 	beq.w	800c742 <_svfiprintf_r+0x1c6>
 800c5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f6:	445a      	add	r2, fp
 800c5f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 809f 	beq.w	800c742 <_svfiprintf_r+0x1c6>
 800c604:	2300      	movs	r3, #0
 800c606:	f04f 32ff 	mov.w	r2, #4294967295
 800c60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60e:	f10a 0a01 	add.w	sl, sl, #1
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	9307      	str	r3, [sp, #28]
 800c616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c61a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c61c:	4654      	mov	r4, sl
 800c61e:	2205      	movs	r2, #5
 800c620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c624:	484e      	ldr	r0, [pc, #312]	@ (800c760 <_svfiprintf_r+0x1e4>)
 800c626:	f7f3 fdf3 	bl	8000210 <memchr>
 800c62a:	9a04      	ldr	r2, [sp, #16]
 800c62c:	b9d8      	cbnz	r0, 800c666 <_svfiprintf_r+0xea>
 800c62e:	06d0      	lsls	r0, r2, #27
 800c630:	bf44      	itt	mi
 800c632:	2320      	movmi	r3, #32
 800c634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c638:	0711      	lsls	r1, r2, #28
 800c63a:	bf44      	itt	mi
 800c63c:	232b      	movmi	r3, #43	@ 0x2b
 800c63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c642:	f89a 3000 	ldrb.w	r3, [sl]
 800c646:	2b2a      	cmp	r3, #42	@ 0x2a
 800c648:	d015      	beq.n	800c676 <_svfiprintf_r+0xfa>
 800c64a:	9a07      	ldr	r2, [sp, #28]
 800c64c:	4654      	mov	r4, sl
 800c64e:	2000      	movs	r0, #0
 800c650:	f04f 0c0a 	mov.w	ip, #10
 800c654:	4621      	mov	r1, r4
 800c656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c65a:	3b30      	subs	r3, #48	@ 0x30
 800c65c:	2b09      	cmp	r3, #9
 800c65e:	d94b      	bls.n	800c6f8 <_svfiprintf_r+0x17c>
 800c660:	b1b0      	cbz	r0, 800c690 <_svfiprintf_r+0x114>
 800c662:	9207      	str	r2, [sp, #28]
 800c664:	e014      	b.n	800c690 <_svfiprintf_r+0x114>
 800c666:	eba0 0308 	sub.w	r3, r0, r8
 800c66a:	fa09 f303 	lsl.w	r3, r9, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	46a2      	mov	sl, r4
 800c674:	e7d2      	b.n	800c61c <_svfiprintf_r+0xa0>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	1d19      	adds	r1, r3, #4
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	9103      	str	r1, [sp, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	bfbb      	ittet	lt
 800c682:	425b      	neglt	r3, r3
 800c684:	f042 0202 	orrlt.w	r2, r2, #2
 800c688:	9307      	strge	r3, [sp, #28]
 800c68a:	9307      	strlt	r3, [sp, #28]
 800c68c:	bfb8      	it	lt
 800c68e:	9204      	strlt	r2, [sp, #16]
 800c690:	7823      	ldrb	r3, [r4, #0]
 800c692:	2b2e      	cmp	r3, #46	@ 0x2e
 800c694:	d10a      	bne.n	800c6ac <_svfiprintf_r+0x130>
 800c696:	7863      	ldrb	r3, [r4, #1]
 800c698:	2b2a      	cmp	r3, #42	@ 0x2a
 800c69a:	d132      	bne.n	800c702 <_svfiprintf_r+0x186>
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	1d1a      	adds	r2, r3, #4
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	9203      	str	r2, [sp, #12]
 800c6a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a8:	3402      	adds	r4, #2
 800c6aa:	9305      	str	r3, [sp, #20]
 800c6ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c770 <_svfiprintf_r+0x1f4>
 800c6b0:	7821      	ldrb	r1, [r4, #0]
 800c6b2:	2203      	movs	r2, #3
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	f7f3 fdab 	bl	8000210 <memchr>
 800c6ba:	b138      	cbz	r0, 800c6cc <_svfiprintf_r+0x150>
 800c6bc:	9b04      	ldr	r3, [sp, #16]
 800c6be:	eba0 000a 	sub.w	r0, r0, sl
 800c6c2:	2240      	movs	r2, #64	@ 0x40
 800c6c4:	4082      	lsls	r2, r0
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	3401      	adds	r4, #1
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d0:	4824      	ldr	r0, [pc, #144]	@ (800c764 <_svfiprintf_r+0x1e8>)
 800c6d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d6:	2206      	movs	r2, #6
 800c6d8:	f7f3 fd9a 	bl	8000210 <memchr>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d036      	beq.n	800c74e <_svfiprintf_r+0x1d2>
 800c6e0:	4b21      	ldr	r3, [pc, #132]	@ (800c768 <_svfiprintf_r+0x1ec>)
 800c6e2:	bb1b      	cbnz	r3, 800c72c <_svfiprintf_r+0x1b0>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	3307      	adds	r3, #7
 800c6e8:	f023 0307 	bic.w	r3, r3, #7
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	9303      	str	r3, [sp, #12]
 800c6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6f2:	4433      	add	r3, r6
 800c6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f6:	e76a      	b.n	800c5ce <_svfiprintf_r+0x52>
 800c6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	2001      	movs	r0, #1
 800c700:	e7a8      	b.n	800c654 <_svfiprintf_r+0xd8>
 800c702:	2300      	movs	r3, #0
 800c704:	3401      	adds	r4, #1
 800c706:	9305      	str	r3, [sp, #20]
 800c708:	4619      	mov	r1, r3
 800c70a:	f04f 0c0a 	mov.w	ip, #10
 800c70e:	4620      	mov	r0, r4
 800c710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c714:	3a30      	subs	r2, #48	@ 0x30
 800c716:	2a09      	cmp	r2, #9
 800c718:	d903      	bls.n	800c722 <_svfiprintf_r+0x1a6>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0c6      	beq.n	800c6ac <_svfiprintf_r+0x130>
 800c71e:	9105      	str	r1, [sp, #20]
 800c720:	e7c4      	b.n	800c6ac <_svfiprintf_r+0x130>
 800c722:	fb0c 2101 	mla	r1, ip, r1, r2
 800c726:	4604      	mov	r4, r0
 800c728:	2301      	movs	r3, #1
 800c72a:	e7f0      	b.n	800c70e <_svfiprintf_r+0x192>
 800c72c:	ab03      	add	r3, sp, #12
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	462a      	mov	r2, r5
 800c732:	4b0e      	ldr	r3, [pc, #56]	@ (800c76c <_svfiprintf_r+0x1f0>)
 800c734:	a904      	add	r1, sp, #16
 800c736:	4638      	mov	r0, r7
 800c738:	f3af 8000 	nop.w
 800c73c:	1c42      	adds	r2, r0, #1
 800c73e:	4606      	mov	r6, r0
 800c740:	d1d6      	bne.n	800c6f0 <_svfiprintf_r+0x174>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	065b      	lsls	r3, r3, #25
 800c746:	f53f af2d 	bmi.w	800c5a4 <_svfiprintf_r+0x28>
 800c74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c74c:	e72c      	b.n	800c5a8 <_svfiprintf_r+0x2c>
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b05      	ldr	r3, [pc, #20]	@ (800c76c <_svfiprintf_r+0x1f0>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4638      	mov	r0, r7
 800c75a:	f000 f9bb 	bl	800cad4 <_printf_i>
 800c75e:	e7ed      	b.n	800c73c <_svfiprintf_r+0x1c0>
 800c760:	0800deb2 	.word	0x0800deb2
 800c764:	0800debc 	.word	0x0800debc
 800c768:	00000000 	.word	0x00000000
 800c76c:	0800c4c5 	.word	0x0800c4c5
 800c770:	0800deb8 	.word	0x0800deb8

0800c774 <__sfputc_r>:
 800c774:	6893      	ldr	r3, [r2, #8]
 800c776:	3b01      	subs	r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	b410      	push	{r4}
 800c77c:	6093      	str	r3, [r2, #8]
 800c77e:	da08      	bge.n	800c792 <__sfputc_r+0x1e>
 800c780:	6994      	ldr	r4, [r2, #24]
 800c782:	42a3      	cmp	r3, r4
 800c784:	db01      	blt.n	800c78a <__sfputc_r+0x16>
 800c786:	290a      	cmp	r1, #10
 800c788:	d103      	bne.n	800c792 <__sfputc_r+0x1e>
 800c78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78e:	f000 bb7d 	b.w	800ce8c <__swbuf_r>
 800c792:	6813      	ldr	r3, [r2, #0]
 800c794:	1c58      	adds	r0, r3, #1
 800c796:	6010      	str	r0, [r2, #0]
 800c798:	7019      	strb	r1, [r3, #0]
 800c79a:	4608      	mov	r0, r1
 800c79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <__sfputs_r>:
 800c7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	460f      	mov	r7, r1
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	18d5      	adds	r5, r2, r3
 800c7ac:	42ac      	cmp	r4, r5
 800c7ae:	d101      	bne.n	800c7b4 <__sfputs_r+0x12>
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	e007      	b.n	800c7c4 <__sfputs_r+0x22>
 800c7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b8:	463a      	mov	r2, r7
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7ff ffda 	bl	800c774 <__sfputc_r>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d1f3      	bne.n	800c7ac <__sfputs_r+0xa>
 800c7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7c8 <_vfiprintf_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	b09d      	sub	sp, #116	@ 0x74
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	4698      	mov	r8, r3
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	b118      	cbz	r0, 800c7e0 <_vfiprintf_r+0x18>
 800c7d8:	6a03      	ldr	r3, [r0, #32]
 800c7da:	b90b      	cbnz	r3, 800c7e0 <_vfiprintf_r+0x18>
 800c7dc:	f7ff fbbe 	bl	800bf5c <__sinit>
 800c7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7e2:	07d9      	lsls	r1, r3, #31
 800c7e4:	d405      	bmi.n	800c7f2 <_vfiprintf_r+0x2a>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	059a      	lsls	r2, r3, #22
 800c7ea:	d402      	bmi.n	800c7f2 <_vfiprintf_r+0x2a>
 800c7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ee:	f7ff fd3a 	bl	800c266 <__retarget_lock_acquire_recursive>
 800c7f2:	89ab      	ldrh	r3, [r5, #12]
 800c7f4:	071b      	lsls	r3, r3, #28
 800c7f6:	d501      	bpl.n	800c7fc <_vfiprintf_r+0x34>
 800c7f8:	692b      	ldr	r3, [r5, #16]
 800c7fa:	b99b      	cbnz	r3, 800c824 <_vfiprintf_r+0x5c>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 fb82 	bl	800cf08 <__swsetup_r>
 800c804:	b170      	cbz	r0, 800c824 <_vfiprintf_r+0x5c>
 800c806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c808:	07dc      	lsls	r4, r3, #31
 800c80a:	d504      	bpl.n	800c816 <_vfiprintf_r+0x4e>
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295
 800c810:	b01d      	add	sp, #116	@ 0x74
 800c812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	0598      	lsls	r0, r3, #22
 800c81a:	d4f7      	bmi.n	800c80c <_vfiprintf_r+0x44>
 800c81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c81e:	f7ff fd23 	bl	800c268 <__retarget_lock_release_recursive>
 800c822:	e7f3      	b.n	800c80c <_vfiprintf_r+0x44>
 800c824:	2300      	movs	r3, #0
 800c826:	9309      	str	r3, [sp, #36]	@ 0x24
 800c828:	2320      	movs	r3, #32
 800c82a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c832:	2330      	movs	r3, #48	@ 0x30
 800c834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9e4 <_vfiprintf_r+0x21c>
 800c838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c83c:	f04f 0901 	mov.w	r9, #1
 800c840:	4623      	mov	r3, r4
 800c842:	469a      	mov	sl, r3
 800c844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c848:	b10a      	cbz	r2, 800c84e <_vfiprintf_r+0x86>
 800c84a:	2a25      	cmp	r2, #37	@ 0x25
 800c84c:	d1f9      	bne.n	800c842 <_vfiprintf_r+0x7a>
 800c84e:	ebba 0b04 	subs.w	fp, sl, r4
 800c852:	d00b      	beq.n	800c86c <_vfiprintf_r+0xa4>
 800c854:	465b      	mov	r3, fp
 800c856:	4622      	mov	r2, r4
 800c858:	4629      	mov	r1, r5
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7ff ffa1 	bl	800c7a2 <__sfputs_r>
 800c860:	3001      	adds	r0, #1
 800c862:	f000 80a7 	beq.w	800c9b4 <_vfiprintf_r+0x1ec>
 800c866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c868:	445a      	add	r2, fp
 800c86a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c86c:	f89a 3000 	ldrb.w	r3, [sl]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f000 809f 	beq.w	800c9b4 <_vfiprintf_r+0x1ec>
 800c876:	2300      	movs	r3, #0
 800c878:	f04f 32ff 	mov.w	r2, #4294967295
 800c87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c880:	f10a 0a01 	add.w	sl, sl, #1
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	9307      	str	r3, [sp, #28]
 800c888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c88c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c88e:	4654      	mov	r4, sl
 800c890:	2205      	movs	r2, #5
 800c892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c896:	4853      	ldr	r0, [pc, #332]	@ (800c9e4 <_vfiprintf_r+0x21c>)
 800c898:	f7f3 fcba 	bl	8000210 <memchr>
 800c89c:	9a04      	ldr	r2, [sp, #16]
 800c89e:	b9d8      	cbnz	r0, 800c8d8 <_vfiprintf_r+0x110>
 800c8a0:	06d1      	lsls	r1, r2, #27
 800c8a2:	bf44      	itt	mi
 800c8a4:	2320      	movmi	r3, #32
 800c8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8aa:	0713      	lsls	r3, r2, #28
 800c8ac:	bf44      	itt	mi
 800c8ae:	232b      	movmi	r3, #43	@ 0x2b
 800c8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8ba:	d015      	beq.n	800c8e8 <_vfiprintf_r+0x120>
 800c8bc:	9a07      	ldr	r2, [sp, #28]
 800c8be:	4654      	mov	r4, sl
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f04f 0c0a 	mov.w	ip, #10
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8cc:	3b30      	subs	r3, #48	@ 0x30
 800c8ce:	2b09      	cmp	r3, #9
 800c8d0:	d94b      	bls.n	800c96a <_vfiprintf_r+0x1a2>
 800c8d2:	b1b0      	cbz	r0, 800c902 <_vfiprintf_r+0x13a>
 800c8d4:	9207      	str	r2, [sp, #28]
 800c8d6:	e014      	b.n	800c902 <_vfiprintf_r+0x13a>
 800c8d8:	eba0 0308 	sub.w	r3, r0, r8
 800c8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	9304      	str	r3, [sp, #16]
 800c8e4:	46a2      	mov	sl, r4
 800c8e6:	e7d2      	b.n	800c88e <_vfiprintf_r+0xc6>
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	1d19      	adds	r1, r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	9103      	str	r1, [sp, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bfbb      	ittet	lt
 800c8f4:	425b      	neglt	r3, r3
 800c8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c8fa:	9307      	strge	r3, [sp, #28]
 800c8fc:	9307      	strlt	r3, [sp, #28]
 800c8fe:	bfb8      	it	lt
 800c900:	9204      	strlt	r2, [sp, #16]
 800c902:	7823      	ldrb	r3, [r4, #0]
 800c904:	2b2e      	cmp	r3, #46	@ 0x2e
 800c906:	d10a      	bne.n	800c91e <_vfiprintf_r+0x156>
 800c908:	7863      	ldrb	r3, [r4, #1]
 800c90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c90c:	d132      	bne.n	800c974 <_vfiprintf_r+0x1ac>
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	1d1a      	adds	r2, r3, #4
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	9203      	str	r2, [sp, #12]
 800c916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c91a:	3402      	adds	r4, #2
 800c91c:	9305      	str	r3, [sp, #20]
 800c91e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9f4 <_vfiprintf_r+0x22c>
 800c922:	7821      	ldrb	r1, [r4, #0]
 800c924:	2203      	movs	r2, #3
 800c926:	4650      	mov	r0, sl
 800c928:	f7f3 fc72 	bl	8000210 <memchr>
 800c92c:	b138      	cbz	r0, 800c93e <_vfiprintf_r+0x176>
 800c92e:	9b04      	ldr	r3, [sp, #16]
 800c930:	eba0 000a 	sub.w	r0, r0, sl
 800c934:	2240      	movs	r2, #64	@ 0x40
 800c936:	4082      	lsls	r2, r0
 800c938:	4313      	orrs	r3, r2
 800c93a:	3401      	adds	r4, #1
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c942:	4829      	ldr	r0, [pc, #164]	@ (800c9e8 <_vfiprintf_r+0x220>)
 800c944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c948:	2206      	movs	r2, #6
 800c94a:	f7f3 fc61 	bl	8000210 <memchr>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d03f      	beq.n	800c9d2 <_vfiprintf_r+0x20a>
 800c952:	4b26      	ldr	r3, [pc, #152]	@ (800c9ec <_vfiprintf_r+0x224>)
 800c954:	bb1b      	cbnz	r3, 800c99e <_vfiprintf_r+0x1d6>
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	3307      	adds	r3, #7
 800c95a:	f023 0307 	bic.w	r3, r3, #7
 800c95e:	3308      	adds	r3, #8
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c964:	443b      	add	r3, r7
 800c966:	9309      	str	r3, [sp, #36]	@ 0x24
 800c968:	e76a      	b.n	800c840 <_vfiprintf_r+0x78>
 800c96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c96e:	460c      	mov	r4, r1
 800c970:	2001      	movs	r0, #1
 800c972:	e7a8      	b.n	800c8c6 <_vfiprintf_r+0xfe>
 800c974:	2300      	movs	r3, #0
 800c976:	3401      	adds	r4, #1
 800c978:	9305      	str	r3, [sp, #20]
 800c97a:	4619      	mov	r1, r3
 800c97c:	f04f 0c0a 	mov.w	ip, #10
 800c980:	4620      	mov	r0, r4
 800c982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c986:	3a30      	subs	r2, #48	@ 0x30
 800c988:	2a09      	cmp	r2, #9
 800c98a:	d903      	bls.n	800c994 <_vfiprintf_r+0x1cc>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d0c6      	beq.n	800c91e <_vfiprintf_r+0x156>
 800c990:	9105      	str	r1, [sp, #20]
 800c992:	e7c4      	b.n	800c91e <_vfiprintf_r+0x156>
 800c994:	fb0c 2101 	mla	r1, ip, r1, r2
 800c998:	4604      	mov	r4, r0
 800c99a:	2301      	movs	r3, #1
 800c99c:	e7f0      	b.n	800c980 <_vfiprintf_r+0x1b8>
 800c99e:	ab03      	add	r3, sp, #12
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4b12      	ldr	r3, [pc, #72]	@ (800c9f0 <_vfiprintf_r+0x228>)
 800c9a6:	a904      	add	r1, sp, #16
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f3af 8000 	nop.w
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	1c78      	adds	r0, r7, #1
 800c9b2:	d1d6      	bne.n	800c962 <_vfiprintf_r+0x19a>
 800c9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b6:	07d9      	lsls	r1, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_vfiprintf_r+0x1fe>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	059a      	lsls	r2, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_vfiprintf_r+0x1fe>
 800c9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9c2:	f7ff fc51 	bl	800c268 <__retarget_lock_release_recursive>
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	065b      	lsls	r3, r3, #25
 800c9ca:	f53f af1f 	bmi.w	800c80c <_vfiprintf_r+0x44>
 800c9ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9d0:	e71e      	b.n	800c810 <_vfiprintf_r+0x48>
 800c9d2:	ab03      	add	r3, sp, #12
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	462a      	mov	r2, r5
 800c9d8:	4b05      	ldr	r3, [pc, #20]	@ (800c9f0 <_vfiprintf_r+0x228>)
 800c9da:	a904      	add	r1, sp, #16
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f000 f879 	bl	800cad4 <_printf_i>
 800c9e2:	e7e4      	b.n	800c9ae <_vfiprintf_r+0x1e6>
 800c9e4:	0800deb2 	.word	0x0800deb2
 800c9e8:	0800debc 	.word	0x0800debc
 800c9ec:	00000000 	.word	0x00000000
 800c9f0:	0800c7a3 	.word	0x0800c7a3
 800c9f4:	0800deb8 	.word	0x0800deb8

0800c9f8 <_printf_common>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	4698      	mov	r8, r3
 800ca00:	688a      	ldr	r2, [r1, #8]
 800ca02:	690b      	ldr	r3, [r1, #16]
 800ca04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	bfb8      	it	lt
 800ca0c:	4613      	movlt	r3, r2
 800ca0e:	6033      	str	r3, [r6, #0]
 800ca10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca14:	4607      	mov	r7, r0
 800ca16:	460c      	mov	r4, r1
 800ca18:	b10a      	cbz	r2, 800ca1e <_printf_common+0x26>
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	6033      	str	r3, [r6, #0]
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	0699      	lsls	r1, r3, #26
 800ca22:	bf42      	ittt	mi
 800ca24:	6833      	ldrmi	r3, [r6, #0]
 800ca26:	3302      	addmi	r3, #2
 800ca28:	6033      	strmi	r3, [r6, #0]
 800ca2a:	6825      	ldr	r5, [r4, #0]
 800ca2c:	f015 0506 	ands.w	r5, r5, #6
 800ca30:	d106      	bne.n	800ca40 <_printf_common+0x48>
 800ca32:	f104 0a19 	add.w	sl, r4, #25
 800ca36:	68e3      	ldr	r3, [r4, #12]
 800ca38:	6832      	ldr	r2, [r6, #0]
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	42ab      	cmp	r3, r5
 800ca3e:	dc26      	bgt.n	800ca8e <_printf_common+0x96>
 800ca40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca44:	6822      	ldr	r2, [r4, #0]
 800ca46:	3b00      	subs	r3, #0
 800ca48:	bf18      	it	ne
 800ca4a:	2301      	movne	r3, #1
 800ca4c:	0692      	lsls	r2, r2, #26
 800ca4e:	d42b      	bmi.n	800caa8 <_printf_common+0xb0>
 800ca50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca54:	4641      	mov	r1, r8
 800ca56:	4638      	mov	r0, r7
 800ca58:	47c8      	blx	r9
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	d01e      	beq.n	800ca9c <_printf_common+0xa4>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	6922      	ldr	r2, [r4, #16]
 800ca62:	f003 0306 	and.w	r3, r3, #6
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	bf02      	ittt	eq
 800ca6a:	68e5      	ldreq	r5, [r4, #12]
 800ca6c:	6833      	ldreq	r3, [r6, #0]
 800ca6e:	1aed      	subeq	r5, r5, r3
 800ca70:	68a3      	ldr	r3, [r4, #8]
 800ca72:	bf0c      	ite	eq
 800ca74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca78:	2500      	movne	r5, #0
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	bfc4      	itt	gt
 800ca7e:	1a9b      	subgt	r3, r3, r2
 800ca80:	18ed      	addgt	r5, r5, r3
 800ca82:	2600      	movs	r6, #0
 800ca84:	341a      	adds	r4, #26
 800ca86:	42b5      	cmp	r5, r6
 800ca88:	d11a      	bne.n	800cac0 <_printf_common+0xc8>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	e008      	b.n	800caa0 <_printf_common+0xa8>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4652      	mov	r2, sl
 800ca92:	4641      	mov	r1, r8
 800ca94:	4638      	mov	r0, r7
 800ca96:	47c8      	blx	r9
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d103      	bne.n	800caa4 <_printf_common+0xac>
 800ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 800caa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa4:	3501      	adds	r5, #1
 800caa6:	e7c6      	b.n	800ca36 <_printf_common+0x3e>
 800caa8:	18e1      	adds	r1, r4, r3
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	2030      	movs	r0, #48	@ 0x30
 800caae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cab2:	4422      	add	r2, r4
 800cab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cabc:	3302      	adds	r3, #2
 800cabe:	e7c7      	b.n	800ca50 <_printf_common+0x58>
 800cac0:	2301      	movs	r3, #1
 800cac2:	4622      	mov	r2, r4
 800cac4:	4641      	mov	r1, r8
 800cac6:	4638      	mov	r0, r7
 800cac8:	47c8      	blx	r9
 800caca:	3001      	adds	r0, #1
 800cacc:	d0e6      	beq.n	800ca9c <_printf_common+0xa4>
 800cace:	3601      	adds	r6, #1
 800cad0:	e7d9      	b.n	800ca86 <_printf_common+0x8e>
	...

0800cad4 <_printf_i>:
 800cad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cad8:	7e0f      	ldrb	r7, [r1, #24]
 800cada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cadc:	2f78      	cmp	r7, #120	@ 0x78
 800cade:	4691      	mov	r9, r2
 800cae0:	4680      	mov	r8, r0
 800cae2:	460c      	mov	r4, r1
 800cae4:	469a      	mov	sl, r3
 800cae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800caea:	d807      	bhi.n	800cafc <_printf_i+0x28>
 800caec:	2f62      	cmp	r7, #98	@ 0x62
 800caee:	d80a      	bhi.n	800cb06 <_printf_i+0x32>
 800caf0:	2f00      	cmp	r7, #0
 800caf2:	f000 80d1 	beq.w	800cc98 <_printf_i+0x1c4>
 800caf6:	2f58      	cmp	r7, #88	@ 0x58
 800caf8:	f000 80b8 	beq.w	800cc6c <_printf_i+0x198>
 800cafc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb04:	e03a      	b.n	800cb7c <_printf_i+0xa8>
 800cb06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb0a:	2b15      	cmp	r3, #21
 800cb0c:	d8f6      	bhi.n	800cafc <_printf_i+0x28>
 800cb0e:	a101      	add	r1, pc, #4	@ (adr r1, 800cb14 <_printf_i+0x40>)
 800cb10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb81 	.word	0x0800cb81
 800cb1c:	0800cafd 	.word	0x0800cafd
 800cb20:	0800cafd 	.word	0x0800cafd
 800cb24:	0800cafd 	.word	0x0800cafd
 800cb28:	0800cafd 	.word	0x0800cafd
 800cb2c:	0800cb81 	.word	0x0800cb81
 800cb30:	0800cafd 	.word	0x0800cafd
 800cb34:	0800cafd 	.word	0x0800cafd
 800cb38:	0800cafd 	.word	0x0800cafd
 800cb3c:	0800cafd 	.word	0x0800cafd
 800cb40:	0800cc7f 	.word	0x0800cc7f
 800cb44:	0800cbab 	.word	0x0800cbab
 800cb48:	0800cc39 	.word	0x0800cc39
 800cb4c:	0800cafd 	.word	0x0800cafd
 800cb50:	0800cafd 	.word	0x0800cafd
 800cb54:	0800cca1 	.word	0x0800cca1
 800cb58:	0800cafd 	.word	0x0800cafd
 800cb5c:	0800cbab 	.word	0x0800cbab
 800cb60:	0800cafd 	.word	0x0800cafd
 800cb64:	0800cafd 	.word	0x0800cafd
 800cb68:	0800cc41 	.word	0x0800cc41
 800cb6c:	6833      	ldr	r3, [r6, #0]
 800cb6e:	1d1a      	adds	r2, r3, #4
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	6032      	str	r2, [r6, #0]
 800cb74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e09c      	b.n	800ccba <_printf_i+0x1e6>
 800cb80:	6833      	ldr	r3, [r6, #0]
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	1d19      	adds	r1, r3, #4
 800cb86:	6031      	str	r1, [r6, #0]
 800cb88:	0606      	lsls	r6, r0, #24
 800cb8a:	d501      	bpl.n	800cb90 <_printf_i+0xbc>
 800cb8c:	681d      	ldr	r5, [r3, #0]
 800cb8e:	e003      	b.n	800cb98 <_printf_i+0xc4>
 800cb90:	0645      	lsls	r5, r0, #25
 800cb92:	d5fb      	bpl.n	800cb8c <_printf_i+0xb8>
 800cb94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	da03      	bge.n	800cba4 <_printf_i+0xd0>
 800cb9c:	232d      	movs	r3, #45	@ 0x2d
 800cb9e:	426d      	negs	r5, r5
 800cba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cba4:	4858      	ldr	r0, [pc, #352]	@ (800cd08 <_printf_i+0x234>)
 800cba6:	230a      	movs	r3, #10
 800cba8:	e011      	b.n	800cbce <_printf_i+0xfa>
 800cbaa:	6821      	ldr	r1, [r4, #0]
 800cbac:	6833      	ldr	r3, [r6, #0]
 800cbae:	0608      	lsls	r0, r1, #24
 800cbb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbb4:	d402      	bmi.n	800cbbc <_printf_i+0xe8>
 800cbb6:	0649      	lsls	r1, r1, #25
 800cbb8:	bf48      	it	mi
 800cbba:	b2ad      	uxthmi	r5, r5
 800cbbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbbe:	4852      	ldr	r0, [pc, #328]	@ (800cd08 <_printf_i+0x234>)
 800cbc0:	6033      	str	r3, [r6, #0]
 800cbc2:	bf14      	ite	ne
 800cbc4:	230a      	movne	r3, #10
 800cbc6:	2308      	moveq	r3, #8
 800cbc8:	2100      	movs	r1, #0
 800cbca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbce:	6866      	ldr	r6, [r4, #4]
 800cbd0:	60a6      	str	r6, [r4, #8]
 800cbd2:	2e00      	cmp	r6, #0
 800cbd4:	db05      	blt.n	800cbe2 <_printf_i+0x10e>
 800cbd6:	6821      	ldr	r1, [r4, #0]
 800cbd8:	432e      	orrs	r6, r5
 800cbda:	f021 0104 	bic.w	r1, r1, #4
 800cbde:	6021      	str	r1, [r4, #0]
 800cbe0:	d04b      	beq.n	800cc7a <_printf_i+0x1a6>
 800cbe2:	4616      	mov	r6, r2
 800cbe4:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbe8:	fb03 5711 	mls	r7, r3, r1, r5
 800cbec:	5dc7      	ldrb	r7, [r0, r7]
 800cbee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbf2:	462f      	mov	r7, r5
 800cbf4:	42bb      	cmp	r3, r7
 800cbf6:	460d      	mov	r5, r1
 800cbf8:	d9f4      	bls.n	800cbe4 <_printf_i+0x110>
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	d10b      	bne.n	800cc16 <_printf_i+0x142>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	07df      	lsls	r7, r3, #31
 800cc02:	d508      	bpl.n	800cc16 <_printf_i+0x142>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	6861      	ldr	r1, [r4, #4]
 800cc08:	4299      	cmp	r1, r3
 800cc0a:	bfde      	ittt	le
 800cc0c:	2330      	movle	r3, #48	@ 0x30
 800cc0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc12:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc16:	1b92      	subs	r2, r2, r6
 800cc18:	6122      	str	r2, [r4, #16]
 800cc1a:	f8cd a000 	str.w	sl, [sp]
 800cc1e:	464b      	mov	r3, r9
 800cc20:	aa03      	add	r2, sp, #12
 800cc22:	4621      	mov	r1, r4
 800cc24:	4640      	mov	r0, r8
 800cc26:	f7ff fee7 	bl	800c9f8 <_printf_common>
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d14a      	bne.n	800ccc4 <_printf_i+0x1f0>
 800cc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc32:	b004      	add	sp, #16
 800cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	f043 0320 	orr.w	r3, r3, #32
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	4832      	ldr	r0, [pc, #200]	@ (800cd0c <_printf_i+0x238>)
 800cc42:	2778      	movs	r7, #120	@ 0x78
 800cc44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	6831      	ldr	r1, [r6, #0]
 800cc4c:	061f      	lsls	r7, r3, #24
 800cc4e:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc52:	d402      	bmi.n	800cc5a <_printf_i+0x186>
 800cc54:	065f      	lsls	r7, r3, #25
 800cc56:	bf48      	it	mi
 800cc58:	b2ad      	uxthmi	r5, r5
 800cc5a:	6031      	str	r1, [r6, #0]
 800cc5c:	07d9      	lsls	r1, r3, #31
 800cc5e:	bf44      	itt	mi
 800cc60:	f043 0320 	orrmi.w	r3, r3, #32
 800cc64:	6023      	strmi	r3, [r4, #0]
 800cc66:	b11d      	cbz	r5, 800cc70 <_printf_i+0x19c>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	e7ad      	b.n	800cbc8 <_printf_i+0xf4>
 800cc6c:	4826      	ldr	r0, [pc, #152]	@ (800cd08 <_printf_i+0x234>)
 800cc6e:	e7e9      	b.n	800cc44 <_printf_i+0x170>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	f023 0320 	bic.w	r3, r3, #32
 800cc76:	6023      	str	r3, [r4, #0]
 800cc78:	e7f6      	b.n	800cc68 <_printf_i+0x194>
 800cc7a:	4616      	mov	r6, r2
 800cc7c:	e7bd      	b.n	800cbfa <_printf_i+0x126>
 800cc7e:	6833      	ldr	r3, [r6, #0]
 800cc80:	6825      	ldr	r5, [r4, #0]
 800cc82:	6961      	ldr	r1, [r4, #20]
 800cc84:	1d18      	adds	r0, r3, #4
 800cc86:	6030      	str	r0, [r6, #0]
 800cc88:	062e      	lsls	r6, r5, #24
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	d501      	bpl.n	800cc92 <_printf_i+0x1be>
 800cc8e:	6019      	str	r1, [r3, #0]
 800cc90:	e002      	b.n	800cc98 <_printf_i+0x1c4>
 800cc92:	0668      	lsls	r0, r5, #25
 800cc94:	d5fb      	bpl.n	800cc8e <_printf_i+0x1ba>
 800cc96:	8019      	strh	r1, [r3, #0]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	6123      	str	r3, [r4, #16]
 800cc9c:	4616      	mov	r6, r2
 800cc9e:	e7bc      	b.n	800cc1a <_printf_i+0x146>
 800cca0:	6833      	ldr	r3, [r6, #0]
 800cca2:	1d1a      	adds	r2, r3, #4
 800cca4:	6032      	str	r2, [r6, #0]
 800cca6:	681e      	ldr	r6, [r3, #0]
 800cca8:	6862      	ldr	r2, [r4, #4]
 800ccaa:	2100      	movs	r1, #0
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7f3 faaf 	bl	8000210 <memchr>
 800ccb2:	b108      	cbz	r0, 800ccb8 <_printf_i+0x1e4>
 800ccb4:	1b80      	subs	r0, r0, r6
 800ccb6:	6060      	str	r0, [r4, #4]
 800ccb8:	6863      	ldr	r3, [r4, #4]
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccc2:	e7aa      	b.n	800cc1a <_printf_i+0x146>
 800ccc4:	6923      	ldr	r3, [r4, #16]
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	4649      	mov	r1, r9
 800ccca:	4640      	mov	r0, r8
 800cccc:	47d0      	blx	sl
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d0ad      	beq.n	800cc2e <_printf_i+0x15a>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	079b      	lsls	r3, r3, #30
 800ccd6:	d413      	bmi.n	800cd00 <_printf_i+0x22c>
 800ccd8:	68e0      	ldr	r0, [r4, #12]
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	4298      	cmp	r0, r3
 800ccde:	bfb8      	it	lt
 800cce0:	4618      	movlt	r0, r3
 800cce2:	e7a6      	b.n	800cc32 <_printf_i+0x15e>
 800cce4:	2301      	movs	r3, #1
 800cce6:	4632      	mov	r2, r6
 800cce8:	4649      	mov	r1, r9
 800ccea:	4640      	mov	r0, r8
 800ccec:	47d0      	blx	sl
 800ccee:	3001      	adds	r0, #1
 800ccf0:	d09d      	beq.n	800cc2e <_printf_i+0x15a>
 800ccf2:	3501      	adds	r5, #1
 800ccf4:	68e3      	ldr	r3, [r4, #12]
 800ccf6:	9903      	ldr	r1, [sp, #12]
 800ccf8:	1a5b      	subs	r3, r3, r1
 800ccfa:	42ab      	cmp	r3, r5
 800ccfc:	dcf2      	bgt.n	800cce4 <_printf_i+0x210>
 800ccfe:	e7eb      	b.n	800ccd8 <_printf_i+0x204>
 800cd00:	2500      	movs	r5, #0
 800cd02:	f104 0619 	add.w	r6, r4, #25
 800cd06:	e7f5      	b.n	800ccf4 <_printf_i+0x220>
 800cd08:	0800dec3 	.word	0x0800dec3
 800cd0c:	0800ded4 	.word	0x0800ded4

0800cd10 <__sflush_r>:
 800cd10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	0716      	lsls	r6, r2, #28
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	d454      	bmi.n	800cdca <__sflush_r+0xba>
 800cd20:	684b      	ldr	r3, [r1, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	dc02      	bgt.n	800cd2c <__sflush_r+0x1c>
 800cd26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dd48      	ble.n	800cdbe <__sflush_r+0xae>
 800cd2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd2e:	2e00      	cmp	r6, #0
 800cd30:	d045      	beq.n	800cdbe <__sflush_r+0xae>
 800cd32:	2300      	movs	r3, #0
 800cd34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd38:	682f      	ldr	r7, [r5, #0]
 800cd3a:	6a21      	ldr	r1, [r4, #32]
 800cd3c:	602b      	str	r3, [r5, #0]
 800cd3e:	d030      	beq.n	800cda2 <__sflush_r+0x92>
 800cd40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	0759      	lsls	r1, r3, #29
 800cd46:	d505      	bpl.n	800cd54 <__sflush_r+0x44>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	1ad2      	subs	r2, r2, r3
 800cd4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd4e:	b10b      	cbz	r3, 800cd54 <__sflush_r+0x44>
 800cd50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd52:	1ad2      	subs	r2, r2, r3
 800cd54:	2300      	movs	r3, #0
 800cd56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd58:	6a21      	ldr	r1, [r4, #32]
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b0      	blx	r6
 800cd5e:	1c43      	adds	r3, r0, #1
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	d106      	bne.n	800cd72 <__sflush_r+0x62>
 800cd64:	6829      	ldr	r1, [r5, #0]
 800cd66:	291d      	cmp	r1, #29
 800cd68:	d82b      	bhi.n	800cdc2 <__sflush_r+0xb2>
 800cd6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ce14 <__sflush_r+0x104>)
 800cd6c:	40ca      	lsrs	r2, r1
 800cd6e:	07d6      	lsls	r6, r2, #31
 800cd70:	d527      	bpl.n	800cdc2 <__sflush_r+0xb2>
 800cd72:	2200      	movs	r2, #0
 800cd74:	6062      	str	r2, [r4, #4]
 800cd76:	04d9      	lsls	r1, r3, #19
 800cd78:	6922      	ldr	r2, [r4, #16]
 800cd7a:	6022      	str	r2, [r4, #0]
 800cd7c:	d504      	bpl.n	800cd88 <__sflush_r+0x78>
 800cd7e:	1c42      	adds	r2, r0, #1
 800cd80:	d101      	bne.n	800cd86 <__sflush_r+0x76>
 800cd82:	682b      	ldr	r3, [r5, #0]
 800cd84:	b903      	cbnz	r3, 800cd88 <__sflush_r+0x78>
 800cd86:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd8a:	602f      	str	r7, [r5, #0]
 800cd8c:	b1b9      	cbz	r1, 800cdbe <__sflush_r+0xae>
 800cd8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd92:	4299      	cmp	r1, r3
 800cd94:	d002      	beq.n	800cd9c <__sflush_r+0x8c>
 800cd96:	4628      	mov	r0, r5
 800cd98:	f7ff fa94 	bl	800c2c4 <_free_r>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cda0:	e00d      	b.n	800cdbe <__sflush_r+0xae>
 800cda2:	2301      	movs	r3, #1
 800cda4:	4628      	mov	r0, r5
 800cda6:	47b0      	blx	r6
 800cda8:	4602      	mov	r2, r0
 800cdaa:	1c50      	adds	r0, r2, #1
 800cdac:	d1c9      	bne.n	800cd42 <__sflush_r+0x32>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0c6      	beq.n	800cd42 <__sflush_r+0x32>
 800cdb4:	2b1d      	cmp	r3, #29
 800cdb6:	d001      	beq.n	800cdbc <__sflush_r+0xac>
 800cdb8:	2b16      	cmp	r3, #22
 800cdba:	d11e      	bne.n	800cdfa <__sflush_r+0xea>
 800cdbc:	602f      	str	r7, [r5, #0]
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	e022      	b.n	800ce08 <__sflush_r+0xf8>
 800cdc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdc6:	b21b      	sxth	r3, r3
 800cdc8:	e01b      	b.n	800ce02 <__sflush_r+0xf2>
 800cdca:	690f      	ldr	r7, [r1, #16]
 800cdcc:	2f00      	cmp	r7, #0
 800cdce:	d0f6      	beq.n	800cdbe <__sflush_r+0xae>
 800cdd0:	0793      	lsls	r3, r2, #30
 800cdd2:	680e      	ldr	r6, [r1, #0]
 800cdd4:	bf08      	it	eq
 800cdd6:	694b      	ldreq	r3, [r1, #20]
 800cdd8:	600f      	str	r7, [r1, #0]
 800cdda:	bf18      	it	ne
 800cddc:	2300      	movne	r3, #0
 800cdde:	eba6 0807 	sub.w	r8, r6, r7
 800cde2:	608b      	str	r3, [r1, #8]
 800cde4:	f1b8 0f00 	cmp.w	r8, #0
 800cde8:	dde9      	ble.n	800cdbe <__sflush_r+0xae>
 800cdea:	6a21      	ldr	r1, [r4, #32]
 800cdec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdee:	4643      	mov	r3, r8
 800cdf0:	463a      	mov	r2, r7
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	47b0      	blx	r6
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	dc08      	bgt.n	800ce0c <__sflush_r+0xfc>
 800cdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295
 800ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0c:	4407      	add	r7, r0
 800ce0e:	eba8 0800 	sub.w	r8, r8, r0
 800ce12:	e7e7      	b.n	800cde4 <__sflush_r+0xd4>
 800ce14:	20400001 	.word	0x20400001

0800ce18 <_fflush_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	690b      	ldr	r3, [r1, #16]
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	b913      	cbnz	r3, 800ce28 <_fflush_r+0x10>
 800ce22:	2500      	movs	r5, #0
 800ce24:	4628      	mov	r0, r5
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	b118      	cbz	r0, 800ce32 <_fflush_r+0x1a>
 800ce2a:	6a03      	ldr	r3, [r0, #32]
 800ce2c:	b90b      	cbnz	r3, 800ce32 <_fflush_r+0x1a>
 800ce2e:	f7ff f895 	bl	800bf5c <__sinit>
 800ce32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0f3      	beq.n	800ce22 <_fflush_r+0xa>
 800ce3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce3c:	07d0      	lsls	r0, r2, #31
 800ce3e:	d404      	bmi.n	800ce4a <_fflush_r+0x32>
 800ce40:	0599      	lsls	r1, r3, #22
 800ce42:	d402      	bmi.n	800ce4a <_fflush_r+0x32>
 800ce44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce46:	f7ff fa0e 	bl	800c266 <__retarget_lock_acquire_recursive>
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	f7ff ff5f 	bl	800cd10 <__sflush_r>
 800ce52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce54:	07da      	lsls	r2, r3, #31
 800ce56:	4605      	mov	r5, r0
 800ce58:	d4e4      	bmi.n	800ce24 <_fflush_r+0xc>
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	059b      	lsls	r3, r3, #22
 800ce5e:	d4e1      	bmi.n	800ce24 <_fflush_r+0xc>
 800ce60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce62:	f7ff fa01 	bl	800c268 <__retarget_lock_release_recursive>
 800ce66:	e7dd      	b.n	800ce24 <_fflush_r+0xc>

0800ce68 <fiprintf>:
 800ce68:	b40e      	push	{r1, r2, r3}
 800ce6a:	b503      	push	{r0, r1, lr}
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	ab03      	add	r3, sp, #12
 800ce70:	4805      	ldr	r0, [pc, #20]	@ (800ce88 <fiprintf+0x20>)
 800ce72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce76:	6800      	ldr	r0, [r0, #0]
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	f7ff fca5 	bl	800c7c8 <_vfiprintf_r>
 800ce7e:	b002      	add	sp, #8
 800ce80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce84:	b003      	add	sp, #12
 800ce86:	4770      	bx	lr
 800ce88:	20000150 	.word	0x20000150

0800ce8c <__swbuf_r>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	460e      	mov	r6, r1
 800ce90:	4614      	mov	r4, r2
 800ce92:	4605      	mov	r5, r0
 800ce94:	b118      	cbz	r0, 800ce9e <__swbuf_r+0x12>
 800ce96:	6a03      	ldr	r3, [r0, #32]
 800ce98:	b90b      	cbnz	r3, 800ce9e <__swbuf_r+0x12>
 800ce9a:	f7ff f85f 	bl	800bf5c <__sinit>
 800ce9e:	69a3      	ldr	r3, [r4, #24]
 800cea0:	60a3      	str	r3, [r4, #8]
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	071a      	lsls	r2, r3, #28
 800cea6:	d501      	bpl.n	800ceac <__swbuf_r+0x20>
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	b943      	cbnz	r3, 800cebe <__swbuf_r+0x32>
 800ceac:	4621      	mov	r1, r4
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 f82a 	bl	800cf08 <__swsetup_r>
 800ceb4:	b118      	cbz	r0, 800cebe <__swbuf_r+0x32>
 800ceb6:	f04f 37ff 	mov.w	r7, #4294967295
 800ceba:	4638      	mov	r0, r7
 800cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	6922      	ldr	r2, [r4, #16]
 800cec2:	1a98      	subs	r0, r3, r2
 800cec4:	6963      	ldr	r3, [r4, #20]
 800cec6:	b2f6      	uxtb	r6, r6
 800cec8:	4283      	cmp	r3, r0
 800ceca:	4637      	mov	r7, r6
 800cecc:	dc05      	bgt.n	800ceda <__swbuf_r+0x4e>
 800cece:	4621      	mov	r1, r4
 800ced0:	4628      	mov	r0, r5
 800ced2:	f7ff ffa1 	bl	800ce18 <_fflush_r>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d1ed      	bne.n	800ceb6 <__swbuf_r+0x2a>
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	3b01      	subs	r3, #1
 800cede:	60a3      	str	r3, [r4, #8]
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	1c5a      	adds	r2, r3, #1
 800cee4:	6022      	str	r2, [r4, #0]
 800cee6:	701e      	strb	r6, [r3, #0]
 800cee8:	6962      	ldr	r2, [r4, #20]
 800ceea:	1c43      	adds	r3, r0, #1
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d004      	beq.n	800cefa <__swbuf_r+0x6e>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	07db      	lsls	r3, r3, #31
 800cef4:	d5e1      	bpl.n	800ceba <__swbuf_r+0x2e>
 800cef6:	2e0a      	cmp	r6, #10
 800cef8:	d1df      	bne.n	800ceba <__swbuf_r+0x2e>
 800cefa:	4621      	mov	r1, r4
 800cefc:	4628      	mov	r0, r5
 800cefe:	f7ff ff8b 	bl	800ce18 <_fflush_r>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d0d9      	beq.n	800ceba <__swbuf_r+0x2e>
 800cf06:	e7d6      	b.n	800ceb6 <__swbuf_r+0x2a>

0800cf08 <__swsetup_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4b29      	ldr	r3, [pc, #164]	@ (800cfb0 <__swsetup_r+0xa8>)
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	6818      	ldr	r0, [r3, #0]
 800cf10:	460c      	mov	r4, r1
 800cf12:	b118      	cbz	r0, 800cf1c <__swsetup_r+0x14>
 800cf14:	6a03      	ldr	r3, [r0, #32]
 800cf16:	b90b      	cbnz	r3, 800cf1c <__swsetup_r+0x14>
 800cf18:	f7ff f820 	bl	800bf5c <__sinit>
 800cf1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf20:	0719      	lsls	r1, r3, #28
 800cf22:	d422      	bmi.n	800cf6a <__swsetup_r+0x62>
 800cf24:	06da      	lsls	r2, r3, #27
 800cf26:	d407      	bmi.n	800cf38 <__swsetup_r+0x30>
 800cf28:	2209      	movs	r2, #9
 800cf2a:	602a      	str	r2, [r5, #0]
 800cf2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	f04f 30ff 	mov.w	r0, #4294967295
 800cf36:	e033      	b.n	800cfa0 <__swsetup_r+0x98>
 800cf38:	0758      	lsls	r0, r3, #29
 800cf3a:	d512      	bpl.n	800cf62 <__swsetup_r+0x5a>
 800cf3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf3e:	b141      	cbz	r1, 800cf52 <__swsetup_r+0x4a>
 800cf40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d002      	beq.n	800cf4e <__swsetup_r+0x46>
 800cf48:	4628      	mov	r0, r5
 800cf4a:	f7ff f9bb 	bl	800c2c4 <_free_r>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6063      	str	r3, [r4, #4]
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f043 0308 	orr.w	r3, r3, #8
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	b94b      	cbnz	r3, 800cf82 <__swsetup_r+0x7a>
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf78:	d003      	beq.n	800cf82 <__swsetup_r+0x7a>
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f000 f89e 	bl	800d0be <__smakebuf_r>
 800cf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf86:	f013 0201 	ands.w	r2, r3, #1
 800cf8a:	d00a      	beq.n	800cfa2 <__swsetup_r+0x9a>
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	60a2      	str	r2, [r4, #8]
 800cf90:	6962      	ldr	r2, [r4, #20]
 800cf92:	4252      	negs	r2, r2
 800cf94:	61a2      	str	r2, [r4, #24]
 800cf96:	6922      	ldr	r2, [r4, #16]
 800cf98:	b942      	cbnz	r2, 800cfac <__swsetup_r+0xa4>
 800cf9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf9e:	d1c5      	bne.n	800cf2c <__swsetup_r+0x24>
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
 800cfa2:	0799      	lsls	r1, r3, #30
 800cfa4:	bf58      	it	pl
 800cfa6:	6962      	ldrpl	r2, [r4, #20]
 800cfa8:	60a2      	str	r2, [r4, #8]
 800cfaa:	e7f4      	b.n	800cf96 <__swsetup_r+0x8e>
 800cfac:	2000      	movs	r0, #0
 800cfae:	e7f7      	b.n	800cfa0 <__swsetup_r+0x98>
 800cfb0:	20000150 	.word	0x20000150

0800cfb4 <memmove>:
 800cfb4:	4288      	cmp	r0, r1
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	eb01 0402 	add.w	r4, r1, r2
 800cfbc:	d902      	bls.n	800cfc4 <memmove+0x10>
 800cfbe:	4284      	cmp	r4, r0
 800cfc0:	4623      	mov	r3, r4
 800cfc2:	d807      	bhi.n	800cfd4 <memmove+0x20>
 800cfc4:	1e43      	subs	r3, r0, #1
 800cfc6:	42a1      	cmp	r1, r4
 800cfc8:	d008      	beq.n	800cfdc <memmove+0x28>
 800cfca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfd2:	e7f8      	b.n	800cfc6 <memmove+0x12>
 800cfd4:	4402      	add	r2, r0
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	428a      	cmp	r2, r1
 800cfda:	d100      	bne.n	800cfde <memmove+0x2a>
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfe6:	e7f7      	b.n	800cfd8 <memmove+0x24>

0800cfe8 <_sbrk_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	@ (800d004 <_sbrk_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7f5 ff7a 	bl	8002eec <_sbrk>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_sbrk_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_sbrk_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20001400 	.word	0x20001400

0800d008 <abort>:
 800d008:	b508      	push	{r3, lr}
 800d00a:	2006      	movs	r0, #6
 800d00c:	f000 f8bc 	bl	800d188 <raise>
 800d010:	2001      	movs	r0, #1
 800d012:	f7f5 fef2 	bl	8002dfa <_exit>

0800d016 <_realloc_r>:
 800d016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01a:	4607      	mov	r7, r0
 800d01c:	4614      	mov	r4, r2
 800d01e:	460d      	mov	r5, r1
 800d020:	b921      	cbnz	r1, 800d02c <_realloc_r+0x16>
 800d022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	4611      	mov	r1, r2
 800d028:	f7ff b9c0 	b.w	800c3ac <_malloc_r>
 800d02c:	b92a      	cbnz	r2, 800d03a <_realloc_r+0x24>
 800d02e:	f7ff f949 	bl	800c2c4 <_free_r>
 800d032:	4625      	mov	r5, r4
 800d034:	4628      	mov	r0, r5
 800d036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03a:	f000 f8e3 	bl	800d204 <_malloc_usable_size_r>
 800d03e:	4284      	cmp	r4, r0
 800d040:	4606      	mov	r6, r0
 800d042:	d802      	bhi.n	800d04a <_realloc_r+0x34>
 800d044:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d048:	d8f4      	bhi.n	800d034 <_realloc_r+0x1e>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff f9ad 	bl	800c3ac <_malloc_r>
 800d052:	4680      	mov	r8, r0
 800d054:	b908      	cbnz	r0, 800d05a <_realloc_r+0x44>
 800d056:	4645      	mov	r5, r8
 800d058:	e7ec      	b.n	800d034 <_realloc_r+0x1e>
 800d05a:	42b4      	cmp	r4, r6
 800d05c:	4622      	mov	r2, r4
 800d05e:	4629      	mov	r1, r5
 800d060:	bf28      	it	cs
 800d062:	4632      	movcs	r2, r6
 800d064:	f7ff f901 	bl	800c26a <memcpy>
 800d068:	4629      	mov	r1, r5
 800d06a:	4638      	mov	r0, r7
 800d06c:	f7ff f92a 	bl	800c2c4 <_free_r>
 800d070:	e7f1      	b.n	800d056 <_realloc_r+0x40>

0800d072 <__swhatbuf_r>:
 800d072:	b570      	push	{r4, r5, r6, lr}
 800d074:	460c      	mov	r4, r1
 800d076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07a:	2900      	cmp	r1, #0
 800d07c:	b096      	sub	sp, #88	@ 0x58
 800d07e:	4615      	mov	r5, r2
 800d080:	461e      	mov	r6, r3
 800d082:	da0d      	bge.n	800d0a0 <__swhatbuf_r+0x2e>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d08a:	f04f 0100 	mov.w	r1, #0
 800d08e:	bf14      	ite	ne
 800d090:	2340      	movne	r3, #64	@ 0x40
 800d092:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d096:	2000      	movs	r0, #0
 800d098:	6031      	str	r1, [r6, #0]
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	b016      	add	sp, #88	@ 0x58
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
 800d0a0:	466a      	mov	r2, sp
 800d0a2:	f000 f879 	bl	800d198 <_fstat_r>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	dbec      	blt.n	800d084 <__swhatbuf_r+0x12>
 800d0aa:	9901      	ldr	r1, [sp, #4]
 800d0ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0b4:	4259      	negs	r1, r3
 800d0b6:	4159      	adcs	r1, r3
 800d0b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0bc:	e7eb      	b.n	800d096 <__swhatbuf_r+0x24>

0800d0be <__smakebuf_r>:
 800d0be:	898b      	ldrh	r3, [r1, #12]
 800d0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0c2:	079d      	lsls	r5, r3, #30
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	d507      	bpl.n	800d0da <__smakebuf_r+0x1c>
 800d0ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0ce:	6023      	str	r3, [r4, #0]
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	6163      	str	r3, [r4, #20]
 800d0d6:	b003      	add	sp, #12
 800d0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0da:	ab01      	add	r3, sp, #4
 800d0dc:	466a      	mov	r2, sp
 800d0de:	f7ff ffc8 	bl	800d072 <__swhatbuf_r>
 800d0e2:	9f00      	ldr	r7, [sp, #0]
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff f95f 	bl	800c3ac <_malloc_r>
 800d0ee:	b948      	cbnz	r0, 800d104 <__smakebuf_r+0x46>
 800d0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f4:	059a      	lsls	r2, r3, #22
 800d0f6:	d4ee      	bmi.n	800d0d6 <__smakebuf_r+0x18>
 800d0f8:	f023 0303 	bic.w	r3, r3, #3
 800d0fc:	f043 0302 	orr.w	r3, r3, #2
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	e7e2      	b.n	800d0ca <__smakebuf_r+0xc>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	6020      	str	r0, [r4, #0]
 800d108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d114:	b15b      	cbz	r3, 800d12e <__smakebuf_r+0x70>
 800d116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d11a:	4630      	mov	r0, r6
 800d11c:	f000 f84e 	bl	800d1bc <_isatty_r>
 800d120:	b128      	cbz	r0, 800d12e <__smakebuf_r+0x70>
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	f023 0303 	bic.w	r3, r3, #3
 800d128:	f043 0301 	orr.w	r3, r3, #1
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	431d      	orrs	r5, r3
 800d132:	81a5      	strh	r5, [r4, #12]
 800d134:	e7cf      	b.n	800d0d6 <__smakebuf_r+0x18>

0800d136 <_raise_r>:
 800d136:	291f      	cmp	r1, #31
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4605      	mov	r5, r0
 800d13c:	460c      	mov	r4, r1
 800d13e:	d904      	bls.n	800d14a <_raise_r+0x14>
 800d140:	2316      	movs	r3, #22
 800d142:	6003      	str	r3, [r0, #0]
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	bd38      	pop	{r3, r4, r5, pc}
 800d14a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d14c:	b112      	cbz	r2, 800d154 <_raise_r+0x1e>
 800d14e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d152:	b94b      	cbnz	r3, 800d168 <_raise_r+0x32>
 800d154:	4628      	mov	r0, r5
 800d156:	f000 f853 	bl	800d200 <_getpid_r>
 800d15a:	4622      	mov	r2, r4
 800d15c:	4601      	mov	r1, r0
 800d15e:	4628      	mov	r0, r5
 800d160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d164:	f000 b83a 	b.w	800d1dc <_kill_r>
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d00a      	beq.n	800d182 <_raise_r+0x4c>
 800d16c:	1c59      	adds	r1, r3, #1
 800d16e:	d103      	bne.n	800d178 <_raise_r+0x42>
 800d170:	2316      	movs	r3, #22
 800d172:	6003      	str	r3, [r0, #0]
 800d174:	2001      	movs	r0, #1
 800d176:	e7e7      	b.n	800d148 <_raise_r+0x12>
 800d178:	2100      	movs	r1, #0
 800d17a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d17e:	4620      	mov	r0, r4
 800d180:	4798      	blx	r3
 800d182:	2000      	movs	r0, #0
 800d184:	e7e0      	b.n	800d148 <_raise_r+0x12>
	...

0800d188 <raise>:
 800d188:	4b02      	ldr	r3, [pc, #8]	@ (800d194 <raise+0xc>)
 800d18a:	4601      	mov	r1, r0
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	f7ff bfd2 	b.w	800d136 <_raise_r>
 800d192:	bf00      	nop
 800d194:	20000150 	.word	0x20000150

0800d198 <_fstat_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d07      	ldr	r5, [pc, #28]	@ (800d1b8 <_fstat_r+0x20>)
 800d19c:	2300      	movs	r3, #0
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	f7f5 fe78 	bl	8002e9a <_fstat>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	d102      	bne.n	800d1b4 <_fstat_r+0x1c>
 800d1ae:	682b      	ldr	r3, [r5, #0]
 800d1b0:	b103      	cbz	r3, 800d1b4 <_fstat_r+0x1c>
 800d1b2:	6023      	str	r3, [r4, #0]
 800d1b4:	bd38      	pop	{r3, r4, r5, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20001400 	.word	0x20001400

0800d1bc <_isatty_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d06      	ldr	r5, [pc, #24]	@ (800d1d8 <_isatty_r+0x1c>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	f7f5 fe77 	bl	8002eba <_isatty>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_isatty_r+0x1a>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_isatty_r+0x1a>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20001400 	.word	0x20001400

0800d1dc <_kill_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	@ (800d1fc <_kill_r+0x20>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	f7f5 fdf6 	bl	8002dda <_kill>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	d102      	bne.n	800d1f8 <_kill_r+0x1c>
 800d1f2:	682b      	ldr	r3, [r5, #0]
 800d1f4:	b103      	cbz	r3, 800d1f8 <_kill_r+0x1c>
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20001400 	.word	0x20001400

0800d200 <_getpid_r>:
 800d200:	f7f5 bde3 	b.w	8002dca <_getpid>

0800d204 <_malloc_usable_size_r>:
 800d204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d208:	1f18      	subs	r0, r3, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bfbc      	itt	lt
 800d20e:	580b      	ldrlt	r3, [r1, r0]
 800d210:	18c0      	addlt	r0, r0, r3
 800d212:	4770      	bx	lr

0800d214 <_init>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	bf00      	nop
 800d218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21a:	bc08      	pop	{r3}
 800d21c:	469e      	mov	lr, r3
 800d21e:	4770      	bx	lr

0800d220 <_fini>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	bf00      	nop
 800d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d226:	bc08      	pop	{r3}
 800d228:	469e      	mov	lr, r3
 800d22a:	4770      	bx	lr
