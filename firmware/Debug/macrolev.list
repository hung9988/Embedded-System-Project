
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dbf0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001440  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f1d0  0800f1d0  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800f1d0  0800f1d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f1d8  0800f1d8  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f1d8  0800f1d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f1dc  0800f1dc  000101dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800f1e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000017a4  200002a0  0800f480  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a44  0800f480  00011a44  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eab1  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000551a  00000000  00000000  0002fd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  000352a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001203  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002038e  00000000  00000000  00037b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f535  00000000  00000000  00057ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9c30  00000000  00000000  00077426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131056  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a58  00000000  00000000  0013109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00137af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd78 	.word	0x0800dd78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800dd78 	.word	0x0800dd78

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void cdc_write_string_chunked(const char *str);
static void cdc_write_flush_wait(void);

extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 f9b1 	bl	800694c <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d120      	bne.n	8000638 <cdc_performance_measure+0x5c>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fb59 	bl	8003cac <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (difference > 10) {
 8000606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000608:	2b0a      	cmp	r3, #10
 800060a:	d916      	bls.n	800063a <cdc_performance_measure+0x5e>
  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 800060c:	f107 000c 	add.w	r0, r7, #12
 8000610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <cdc_performance_measure+0x64>)
 8000614:	2140      	movs	r1, #64	@ 0x40
 8000616:	f00c fa67 	bl	800cae8 <sniprintf>
 800061a:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 800061c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	653a      	str	r2, [r7, #80]	@ 0x50
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000628:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800062a:	2000      	movs	r0, #0
 800062c:	f006 fa0e 	bl	8006a4c <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f006 fa3f 	bl	8006ab4 <tud_cdc_n_write_flush>
 8000636:	e000      	b.n	800063a <cdc_performance_measure+0x5e>
    return;
 8000638:	bf00      	nop
  tud_cdc_write_flush(); }// Make sure data is sent
}
 800063a:	3760      	adds	r7, #96	@ 0x60
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	0800dd90 	.word	0x0800dd90

08000644 <cdc_task>:
void cdc_task(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b098      	sub	sp, #96	@ 0x60
 8000648:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f006 f97e 	bl	800694c <tud_cdc_n_connected>
 8000650:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 8000652:	2b00      	cmp	r3, #0
 8000654:	d079      	beq.n	800074a <cdc_task+0x106>
  return tud_cdc_n_available(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f006 f9b6 	bl	80069c8 <tud_cdc_n_available>
 800065c:	4603      	mov	r3, r0
    if (tud_cdc_available()) {
 800065e:	2b00      	cmp	r3, #0
 8000660:	d076      	beq.n	8000750 <cdc_task+0x10c>
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	657b      	str	r3, [r7, #84]	@ 0x54
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 800066a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800066c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800066e:	2000      	movs	r0, #0
 8000670:	f006 f9c0 	bl	80069f4 <tud_cdc_n_read>
 8000674:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000676:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800067c:	e05e      	b.n	800073c <cdc_task+0xf8>
        char c = buf[i];
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle backspace
        if (c == '\b' || c == 127) {
 800068a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068e:	2b08      	cmp	r3, #8
 8000690:	d003      	beq.n	800069a <cdc_task+0x56>
 8000692:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000696:	2b7f      	cmp	r3, #127	@ 0x7f
 8000698:	d10d      	bne.n	80006b6 <cdc_task+0x72>
          if (cmd_index > 0) {
 800069a:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <cdc_task+0x114>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d049      	beq.n	8000736 <cdc_task+0xf2>
            cmd_index--;
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <cdc_task+0x114>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <cdc_task+0x114>)
 80006ac:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006ae:	482b      	ldr	r0, [pc, #172]	@ (800075c <cdc_task+0x118>)
 80006b0:	f000 f85c 	bl	800076c <cdc_write_string_chunked>
          if (cmd_index > 0) {
 80006b4:	e03f      	b.n	8000736 <cdc_task+0xf2>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ba:	2b0d      	cmp	r3, #13
 80006bc:	d003      	beq.n	80006c6 <cdc_task+0x82>
 80006be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d116      	bne.n	80006f4 <cdc_task+0xb0>
          cdc_write_string_chunked("\r\n");
 80006c6:	4826      	ldr	r0, [pc, #152]	@ (8000760 <cdc_task+0x11c>)
 80006c8:	f000 f850 	bl	800076c <cdc_write_string_chunked>
          cmd_buffer[cmd_index] = '\0';
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <cdc_task+0x114>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <cdc_task+0x120>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	5499      	strb	r1, [r3, r2]

          if (cmd_index > 0) {
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <cdc_task+0x114>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d005      	beq.n	80006ec <cdc_task+0xa8>
            process_command(cmd_buffer);
 80006e0:	4820      	ldr	r0, [pc, #128]	@ (8000764 <cdc_task+0x120>)
 80006e2:	f000 f8af 	bl	8000844 <process_command>
            cmd_index = 0;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <cdc_task+0x114>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
          }

          cdc_write_string_chunked("Ready> ");
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <cdc_task+0x124>)
 80006ee:	f000 f83d 	bl	800076c <cdc_write_string_chunked>
 80006f2:	e020      	b.n	8000736 <cdc_task+0xf2>
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 80006f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f8:	2b1f      	cmp	r3, #31
 80006fa:	d91c      	bls.n	8000736 <cdc_task+0xf2>
 80006fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000700:	2b7e      	cmp	r3, #126	@ 0x7e
 8000702:	d818      	bhi.n	8000736 <cdc_task+0xf2>
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <cdc_task+0x114>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b3e      	cmp	r3, #62	@ 0x3e
 800070a:	d814      	bhi.n	8000736 <cdc_task+0xf2>
          cmd_buffer[cmd_index++] = c;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <cdc_task+0x114>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	b2d1      	uxtb	r1, r2
 8000714:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <cdc_task+0x114>)
 8000716:	7011      	strb	r1, [r2, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <cdc_task+0x120>)
 8000720:	5499      	strb	r1, [r3, r2]
 8000722:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000728:	2301      	movs	r3, #1
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 800072c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800072e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000730:	2000      	movs	r0, #0
 8000732:	f006 f98b 	bl	8006a4c <tud_cdc_n_write>
      for (uint32_t i = 0; i < count; i++) {
 8000736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000738:	3301      	adds	r3, #1
 800073a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800073c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800073e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000740:	429a      	cmp	r2, r3
 8000742:	d39c      	bcc.n	800067e <cdc_task+0x3a>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      cdc_write_flush_wait();
 8000744:	f000 f85d 	bl	8000802 <cdc_write_flush_wait>
    }
  } else {
    // Reset flag when disconnected
    cmd_index = 0;
  }
}
 8000748:	e002      	b.n	8000750 <cdc_task+0x10c>
    cmd_index = 0;
 800074a:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <cdc_task+0x114>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3760      	adds	r7, #96	@ 0x60
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200002fc 	.word	0x200002fc
 800075c:	0800ddac 	.word	0x0800ddac
 8000760:	0800ddb0 	.word	0x0800ddb0
 8000764:	200002bc 	.word	0x200002bc
 8000768:	0800ddb4 	.word	0x0800ddb4

0800076c <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if (!str)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d03f      	beq.n	80007fa <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fd3a 	bl	80001f4 <strlen>
 8000780:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 8000786:	2338      	movs	r3, #56	@ 0x38
 8000788:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 800078a:	e031      	b.n	80007f0 <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4293      	cmp	r3, r2
 8000796:	bf28      	it	cs
 8000798:	4613      	movcs	r3, r2
 800079a:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 800079c:	e005      	b.n	80007aa <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800079e:	2100      	movs	r1, #0
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f008 fa60 	bl	8008c68 <tud_task_ext>
}
 80007a8:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f006 fa04 	bl	8006bb8 <tud_cdc_n_write_available>
 80007b0:	4602      	mov	r2, r0
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d8f2      	bhi.n	800079e <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	68f9      	ldr	r1, [r7, #12]
 80007c8:	2000      	movs	r0, #0
 80007ca:	f006 f93f 	bl	8006a4c <tud_cdc_n_write>
    sent += to_send;
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f006 f9ee 	bl	8006bb8 <tud_cdc_n_write_available>
 80007dc:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d803      	bhi.n	80007ec <cdc_write_string_chunked+0x80>
 80007e4:	69fa      	ldr	r2, [r7, #28]
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d301      	bcc.n	80007f0 <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 80007ec:	f000 f809 	bl	8000802 <cdc_write_flush_wait>
  while (sent < len) {
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3c9      	bcc.n	800078c <cdc_write_string_chunked+0x20>
 80007f8:	e000      	b.n	80007fc <cdc_write_string_chunked+0x90>
    return;
 80007fa:	bf00      	nop
    }
  }
}
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f006 f953 	bl	8006ab4 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 8000812:	e008      	b.n	8000826 <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000814:	2100      	movs	r1, #0
 8000816:	f04f 30ff 	mov.w	r0, #4294967295
 800081a:	f008 fa25 	bl	8008c68 <tud_task_ext>
}
 800081e:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 8000826:	2000      	movs	r0, #0
 8000828:	f006 f9c6 	bl	8006bb8 <tud_cdc_n_write_available>
 800082c:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800082e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000830:	d804      	bhi.n	800083c <cdc_write_flush_wait+0x3a>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000838:	4293      	cmp	r3, r2
 800083a:	d9eb      	bls.n	8000814 <cdc_write_flush_wait+0x12>
  }
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <process_command>:

static void process_command(char *cmd) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	@ 0x58
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000850:	e018      	b.n	8000884 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 8000852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b40      	cmp	r3, #64	@ 0x40
 800085c:	d90f      	bls.n	800087e <process_command+0x3a>
 800085e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b5a      	cmp	r3, #90	@ 0x5a
 8000868:	d809      	bhi.n	800087e <process_command+0x3a>
      cmd[i] += 32;
 800086a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	440b      	add	r3, r1
 8000878:	3220      	adds	r2, #32
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 800087e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000880:	3301      	adds	r3, #1
 8000882:	657b      	str	r3, [r7, #84]	@ 0x54
 8000884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e0      	bne.n	8000852 <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 8000890:	49ad      	ldr	r1, [pc, #692]	@ (8000b48 <process_command+0x304>)
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f00c f9cc 	bl	800cc30 <strtok>
 8000898:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 800089a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 817f 	beq.w	8000ba0 <process_command+0x35c>
    return;

  if (strcmp(token, "help") == 0) {
 80008a2:	49aa      	ldr	r1, [pc, #680]	@ (8000b4c <process_command+0x308>)
 80008a4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008a6:	f7ff fc9b 	bl	80001e0 <strcmp>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <process_command+0x72>
    print_help();
 80008b0:	f000 f97e 	bl	8000bb0 <print_help>
 80008b4:	e175      	b.n	8000ba2 <process_command+0x35e>
  } else if (strcmp(token, "show") == 0) {
 80008b6:	49a6      	ldr	r1, [pc, #664]	@ (8000b50 <process_command+0x30c>)
 80008b8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008ba:	f7ff fc91 	bl	80001e0 <strcmp>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <process_command+0x86>
    print_config();
 80008c4:	f000 f9ba 	bl	8000c3c <print_config>
 80008c8:	e16b      	b.n	8000ba2 <process_command+0x35e>
  } else if (strcmp(token, "set") == 0) {
 80008ca:	49a2      	ldr	r1, [pc, #648]	@ (8000b54 <process_command+0x310>)
 80008cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008ce:	f7ff fc87 	bl	80001e0 <strcmp>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d118      	bne.n	800090a <process_command+0xc6>
    char *param = strtok(NULL, " ");
 80008d8:	499b      	ldr	r1, [pc, #620]	@ (8000b48 <process_command+0x304>)
 80008da:	2000      	movs	r0, #0
 80008dc:	f00c f9a8 	bl	800cc30 <strtok>
 80008e0:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 80008e2:	4999      	ldr	r1, [pc, #612]	@ (8000b48 <process_command+0x304>)
 80008e4:	2000      	movs	r0, #0
 80008e6:	f00c f9a3 	bl	800cc30 <strtok>
 80008ea:	6138      	str	r0, [r7, #16]
    if (param && value) {
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <process_command+0xbe>
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <process_command+0xbe>
      set_config_value(param, value);
 80008f8:	6939      	ldr	r1, [r7, #16]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f000 fa00 	bl	8000d00 <set_config_value>
 8000900:	e14f      	b.n	8000ba2 <process_command+0x35e>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000902:	4895      	ldr	r0, [pc, #596]	@ (8000b58 <process_command+0x314>)
 8000904:	f7ff ff32 	bl	800076c <cdc_write_string_chunked>
 8000908:	e14b      	b.n	8000ba2 <process_command+0x35e>
    }
  } else if (strcmp(token, "keymap") == 0) {
 800090a:	4994      	ldr	r1, [pc, #592]	@ (8000b5c <process_command+0x318>)
 800090c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800090e:	f7ff fc67 	bl	80001e0 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d11c      	bne.n	8000952 <process_command+0x10e>
    char *layer_str = strtok(NULL, " ");
 8000918:	498b      	ldr	r1, [pc, #556]	@ (8000b48 <process_command+0x304>)
 800091a:	2000      	movs	r0, #0
 800091c:	f00c f988 	bl	800cc30 <strtok>
 8000920:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d010      	beq.n	800094a <process_command+0x106>
      uint8_t layer = atoi(layer_str);
 8000928:	69f8      	ldr	r0, [r7, #28]
 800092a:	f00b ff92 	bl	800c852 <atoi>
 800092e:	4603      	mov	r3, r0
 8000930:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 8000932:	7efb      	ldrb	r3, [r7, #27]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d804      	bhi.n	8000942 <process_command+0xfe>
        print_keymap(layer);
 8000938:	7efb      	ldrb	r3, [r7, #27]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fa8e 	bl	8000e5c <print_keymap>
 8000940:	e12f      	b.n	8000ba2 <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 8000942:	4887      	ldr	r0, [pc, #540]	@ (8000b60 <process_command+0x31c>)
 8000944:	f7ff ff12 	bl	800076c <cdc_write_string_chunked>
 8000948:	e12b      	b.n	8000ba2 <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 800094a:	4886      	ldr	r0, [pc, #536]	@ (8000b64 <process_command+0x320>)
 800094c:	f7ff ff0e 	bl	800076c <cdc_write_string_chunked>
 8000950:	e127      	b.n	8000ba2 <process_command+0x35e>
    }
  } else if (strcmp(token, "setkey") == 0) {
 8000952:	4985      	ldr	r1, [pc, #532]	@ (8000b68 <process_command+0x324>)
 8000954:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000956:	f7ff fc43 	bl	80001e0 <strcmp>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d154      	bne.n	8000a0a <process_command+0x1c6>
    char *layer_str = strtok(NULL, " ");
 8000960:	4979      	ldr	r1, [pc, #484]	@ (8000b48 <process_command+0x304>)
 8000962:	2000      	movs	r0, #0
 8000964:	f00c f964 	bl	800cc30 <strtok>
 8000968:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 800096a:	4977      	ldr	r1, [pc, #476]	@ (8000b48 <process_command+0x304>)
 800096c:	2000      	movs	r0, #0
 800096e:	f00c f95f 	bl	800cc30 <strtok>
 8000972:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000974:	4974      	ldr	r1, [pc, #464]	@ (8000b48 <process_command+0x304>)
 8000976:	2000      	movs	r0, #0
 8000978:	f00c f95a 	bl	800cc30 <strtok>
 800097c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 800097e:	4972      	ldr	r1, [pc, #456]	@ (8000b48 <process_command+0x304>)
 8000980:	2000      	movs	r0, #0
 8000982:	f00c f955 	bl	800cc30 <strtok>
 8000986:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800098a:	2b00      	cmp	r3, #0
 800098c:	d039      	beq.n	8000a02 <process_command+0x1be>
 800098e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000990:	2b00      	cmp	r3, #0
 8000992:	d036      	beq.n	8000a02 <process_command+0x1be>
 8000994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000996:	2b00      	cmp	r3, #0
 8000998:	d033      	beq.n	8000a02 <process_command+0x1be>
 800099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099c:	2b00      	cmp	r3, #0
 800099e:	d030      	beq.n	8000a02 <process_command+0x1be>
      uint8_t layer = atoi(layer_str);
 80009a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80009a2:	f00b ff56 	bl	800c852 <atoi>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 80009ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ae:	f00b ff50 	bl	800c852 <atoi>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 80009b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009ba:	f00b ff4a 	bl	800c852 <atoi>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 80009c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009c6:	f00b ff44 	bl	800c852 <atoi>
 80009ca:	4603      	mov	r3, r0
 80009cc:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 80009ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d811      	bhi.n	80009fa <process_command+0x1b6>
 80009d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80d      	bhi.n	80009fa <process_command+0x1b6>
 80009de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d809      	bhi.n	80009fa <process_command+0x1b6>
        set_keymap_value(layer, row, col, value);
 80009e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009e8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80009ec:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80009f0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80009f4:	f000 fb78 	bl	80010e8 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 80009f8:	e0d3      	b.n	8000ba2 <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 80009fa:	485c      	ldr	r0, [pc, #368]	@ (8000b6c <process_command+0x328>)
 80009fc:	f7ff feb6 	bl	800076c <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 8000a00:	e0cf      	b.n	8000ba2 <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000a02:	485b      	ldr	r0, [pc, #364]	@ (8000b70 <process_command+0x32c>)
 8000a04:	f7ff feb2 	bl	800076c <cdc_write_string_chunked>
 8000a08:	e0cb      	b.n	8000ba2 <process_command+0x35e>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000a0a:	495a      	ldr	r1, [pc, #360]	@ (8000b74 <process_command+0x330>)
 8000a0c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a0e:	f7ff fbe7 	bl	80001e0 <strcmp>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f040 8082 	bne.w	8000b1e <process_command+0x2da>
    char *layer_str = strtok(NULL, " ");
 8000a1a:	494b      	ldr	r1, [pc, #300]	@ (8000b48 <process_command+0x304>)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f00c f907 	bl	800cc30 <strtok>
 8000a22:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000a24:	4948      	ldr	r1, [pc, #288]	@ (8000b48 <process_command+0x304>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f00c f902 	bl	800cc30 <strtok>
 8000a2c:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000a2e:	4946      	ldr	r1, [pc, #280]	@ (8000b48 <process_command+0x304>)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f00c f8fd 	bl	800cc30 <strtok>
 8000a36:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d06b      	beq.n	8000b16 <process_command+0x2d2>
 8000a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d068      	beq.n	8000b16 <process_command+0x2d2>
 8000a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d065      	beq.n	8000b16 <process_command+0x2d2>
      uint8_t layer = atoi(layer_str);
 8000a4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000a4c:	f00b ff01 	bl	800c852 <atoi>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000a56:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000a58:	f00b fefb 	bl	800c852 <atoi>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000a62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a64:	f00b fef5 	bl	800c852 <atoi>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000a6e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d84b      	bhi.n	8000b0e <process_command+0x2ca>
 8000a76:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d847      	bhi.n	8000b0e <process_command+0x2ca>
 8000a7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d843      	bhi.n	8000b0e <process_command+0x2ca>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000a8c:	492e      	ldr	r1, [pc, #184]	@ (8000b48 <process_command+0x304>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f00c f8ce 	bl	800cc30 <strtok>
 8000a94:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000a96:	e015      	b.n	8000ac4 <process_command+0x280>
          values[value_count] = atoi(value_str);
 8000a98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a9a:	f00b feda 	bl	800c852 <atoi>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	3358      	adds	r3, #88	@ 0x58
 8000aaa:	443b      	add	r3, r7
 8000aac:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ab0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000aba:	4923      	ldr	r1, [pc, #140]	@ (8000b48 <process_command+0x304>)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f00c f8b7 	bl	800cc30 <strtok>
 8000ac2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d011      	beq.n	8000aee <process_command+0x2aa>
 8000aca:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d9e2      	bls.n	8000a98 <process_command+0x254>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000ad2:	e00c      	b.n	8000aee <process_command+0x2aa>
          values[value_count] = ____;
 8000ad4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	3358      	adds	r3, #88	@ 0x58
 8000adc:	443b      	add	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ae4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ae8:	3301      	adds	r3, #1
 8000aea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000aee:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d9ee      	bls.n	8000ad4 <process_command+0x290>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000afe:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000b02:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000b06:	f000 fb4b 	bl	80011a0 <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000b0a:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000b0c:	e049      	b.n	8000ba2 <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000b0e:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <process_command+0x328>)
 8000b10:	f7ff fe2c 	bl	800076c <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000b14:	e045      	b.n	8000ba2 <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000b16:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <process_command+0x334>)
 8000b18:	f7ff fe28 	bl	800076c <cdc_write_string_chunked>
 8000b1c:	e041      	b.n	8000ba2 <process_command+0x35e>
    }
  } else if (strcmp(token, "save") == 0) {
 8000b1e:	4917      	ldr	r1, [pc, #92]	@ (8000b7c <process_command+0x338>)
 8000b20:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b22:	f7ff fb5d 	bl	80001e0 <strcmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <process_command+0x2ee>
    save_config();
 8000b2c:	f000 fbde 	bl	80012ec <save_config>
 8000b30:	e037      	b.n	8000ba2 <process_command+0x35e>
  } else if (strcmp(token, "load") == 0) {
 8000b32:	4913      	ldr	r1, [pc, #76]	@ (8000b80 <process_command+0x33c>)
 8000b34:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b36:	f7ff fb53 	bl	80001e0 <strcmp>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d121      	bne.n	8000b84 <process_command+0x340>
    load_config();
 8000b40:	f000 fbe8 	bl	8001314 <load_config>
 8000b44:	e02d      	b.n	8000ba2 <process_command+0x35e>
 8000b46:	bf00      	nop
 8000b48:	0800ddbc 	.word	0x0800ddbc
 8000b4c:	0800ddc0 	.word	0x0800ddc0
 8000b50:	0800ddc8 	.word	0x0800ddc8
 8000b54:	0800ddd0 	.word	0x0800ddd0
 8000b58:	0800ddd4 	.word	0x0800ddd4
 8000b5c:	0800ddf8 	.word	0x0800ddf8
 8000b60:	0800de00 	.word	0x0800de00
 8000b64:	0800de18 	.word	0x0800de18
 8000b68:	0800de30 	.word	0x0800de30
 8000b6c:	0800de38 	.word	0x0800de38
 8000b70:	0800de58 	.word	0x0800de58
 8000b74:	0800de84 	.word	0x0800de84
 8000b78:	0800de90 	.word	0x0800de90
 8000b7c:	0800dedc 	.word	0x0800dedc
 8000b80:	0800dee4 	.word	0x0800dee4
  } else if (strcmp(token, "reset") == 0) {
 8000b84:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <process_command+0x364>)
 8000b86:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b88:	f7ff fb2a 	bl	80001e0 <strcmp>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <process_command+0x354>
    reset_config();
 8000b92:	f000 fbcb 	bl	800132c <reset_config>
 8000b96:	e004      	b.n	8000ba2 <process_command+0x35e>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <process_command+0x368>)
 8000b9a:	f7ff fde7 	bl	800076c <cdc_write_string_chunked>
 8000b9e:	e000      	b.n	8000ba2 <process_command+0x35e>
    return;
 8000ba0:	bf00      	nop
  }
}
 8000ba2:	3758      	adds	r7, #88	@ 0x58
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800deec 	.word	0x0800deec
 8000bac:	0800def4 	.word	0x0800def4

08000bb0 <print_help>:

static void print_help(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000bb4:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <print_help+0x58>)
 8000bb6:	f7ff fdd9 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000bba:	4814      	ldr	r0, [pc, #80]	@ (8000c0c <print_help+0x5c>)
 8000bbc:	f7ff fdd6 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000bc0:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <print_help+0x60>)
 8000bc2:	f7ff fdd3 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000bc6:	4813      	ldr	r0, [pc, #76]	@ (8000c14 <print_help+0x64>)
 8000bc8:	f7ff fdd0 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <print_help+0x68>)
 8000bce:	f7ff fdcd 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000bd2:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <print_help+0x6c>)
 8000bd4:	f7ff fdca 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000bd8:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <print_help+0x70>)
 8000bda:	f7ff fdc7 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <print_help+0x74>)
 8000be0:	f7ff fdc4 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000be4:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <print_help+0x78>)
 8000be6:	f7ff fdc1 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000bea:	4810      	ldr	r0, [pc, #64]	@ (8000c2c <print_help+0x7c>)
 8000bec:	f7ff fdbe 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000bf0:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_help+0x80>)
 8000bf2:	f7ff fdbb 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000bf6:	480f      	ldr	r0, [pc, #60]	@ (8000c34 <print_help+0x84>)
 8000bf8:	f7ff fdb8 	bl	800076c <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <print_help+0x88>)
 8000bfe:	f7ff fdb5 	bl	800076c <cdc_write_string_chunked>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800df2c 	.word	0x0800df2c
 8000c0c:	0800df44 	.word	0x0800df44
 8000c10:	0800df74 	.word	0x0800df74
 8000c14:	0800dfb0 	.word	0x0800dfb0
 8000c18:	0800dfec 	.word	0x0800dfec
 8000c1c:	0800e020 	.word	0x0800e020
 8000c20:	0800e064 	.word	0x0800e064
 8000c24:	0800e0dc 	.word	0x0800e0dc
 8000c28:	0800e118 	.word	0x0800e118
 8000c2c:	0800e154 	.word	0x0800e154
 8000c30:	0800e18c 	.word	0x0800e18c
 8000c34:	0800e19c 	.word	0x0800e19c
 8000c38:	0800e1d8 	.word	0x0800e1d8

08000c3c <print_config>:

static void print_config(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0a0      	sub	sp, #128	@ 0x80
 8000c40:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000c42:	4826      	ldr	r0, [pc, #152]	@ (8000cdc <print_config+0xa0>)
 8000c44:	f7ff fd92 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000c48:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <print_config+0xa4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ce4 <print_config+0xa8>)
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	f00b ff49 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c56:	463b      	mov	r3, r7
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd87 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <print_config+0xa4>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <print_config+0xac>)
 8000c66:	2180      	movs	r1, #128	@ 0x80
 8000c68:	f00b ff3e 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd7c 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <print_config+0xa4>)
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	4638      	mov	r0, r7
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <print_config+0xb0>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	f00b ff33 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd71 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <print_config+0xa4>)
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <print_config+0xb4>)
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	f00b ff28 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fd66 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <print_config+0xa4>)
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	4a13      	ldr	r2, [pc, #76]	@ (8000cf4 <print_config+0xb8>)
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	f00b ff1d 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd5b 	bl	800076c <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <print_config+0xa4>)
 8000cb8:	88db      	ldrh	r3, [r3, #6]
 8000cba:	4638      	mov	r0, r7
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <print_config+0xbc>)
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	f00b ff12 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd50 	bl	800076c <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <print_config+0xc0>)
 8000cce:	f7ff fd4d 	bl	800076c <cdc_write_string_chunked>
}
 8000cd2:	bf00      	nop
 8000cd4:	3780      	adds	r7, #128	@ 0x80
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	0800e21c 	.word	0x0800e21c
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	0800e238 	.word	0x0800e238
 8000ce8:	0800e254 	.word	0x0800e254
 8000cec:	0800e26c 	.word	0x0800e26c
 8000cf0:	0800e284 	.word	0x0800e284
 8000cf4:	0800e2a4 	.word	0x0800e2a4
 8000cf8:	0800e2c8 	.word	0x0800e2c8
 8000cfc:	0800e2dc 	.word	0x0800e2dc

08000d00 <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000d0a:	6838      	ldr	r0, [r7, #0]
 8000d0c:	f00b fda1 	bl	800c852 <atoi>
 8000d10:	4603      	mov	r3, r0
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000d14:	4943      	ldr	r1, [pc, #268]	@ (8000e24 <set_config_value+0x124>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fa62 	bl	80001e0 <strcmp>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10c      	bne.n	8000d3c <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <set_config_value+0x128>)
 8000d28:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e28 <set_config_value+0x128>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f107 000c 	add.w	r0, r7, #12
 8000d32:	4a3e      	ldr	r2, [pc, #248]	@ (8000e2c <set_config_value+0x12c>)
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	f00b fed7 	bl	800cae8 <sniprintf>
 8000d3a:	e06a      	b.n	8000e12 <set_config_value+0x112>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000d3c:	493c      	ldr	r1, [pc, #240]	@ (8000e30 <set_config_value+0x130>)
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fa4e 	bl	80001e0 <strcmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <set_config_value+0x64>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <set_config_value+0x128>)
 8000d50:	705a      	strb	r2, [r3, #1]
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <set_config_value+0x128>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	f107 000c 	add.w	r0, r7, #12
 8000d5a:	4a36      	ldr	r2, [pc, #216]	@ (8000e34 <set_config_value+0x134>)
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	f00b fec3 	bl	800cae8 <sniprintf>
 8000d62:	e056      	b.n	8000e12 <set_config_value+0x112>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000d64:	4934      	ldr	r1, [pc, #208]	@ (8000e38 <set_config_value+0x138>)
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fa3a 	bl	80001e0 <strcmp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <set_config_value+0x8c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <set_config_value+0x128>)
 8000d78:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <set_config_value+0x128>)
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	f107 000c 	add.w	r0, r7, #12
 8000d82:	4a2e      	ldr	r2, [pc, #184]	@ (8000e3c <set_config_value+0x13c>)
 8000d84:	2140      	movs	r1, #64	@ 0x40
 8000d86:	f00b feaf 	bl	800cae8 <sniprintf>
 8000d8a:	e042      	b.n	8000e12 <set_config_value+0x112>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000d8c:	492c      	ldr	r1, [pc, #176]	@ (8000e40 <set_config_value+0x140>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fa26 	bl	80001e0 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <set_config_value+0xb4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <set_config_value+0x128>)
 8000da0:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <set_config_value+0x128>)
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	f107 000c 	add.w	r0, r7, #12
 8000daa:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <set_config_value+0x144>)
 8000dac:	2140      	movs	r1, #64	@ 0x40
 8000dae:	f00b fe9b 	bl	800cae8 <sniprintf>
 8000db2:	e02e      	b.n	8000e12 <set_config_value+0x112>
  } else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000db4:	4924      	ldr	r1, [pc, #144]	@ (8000e48 <set_config_value+0x148>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fa12 	bl	80001e0 <strcmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <set_config_value+0xdc>
    keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <set_config_value+0x128>)
 8000dc8:	711a      	strb	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <set_config_value+0x128>)
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	f107 000c 	add.w	r0, r7, #12
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <set_config_value+0x14c>)
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	f00b fe87 	bl	800cae8 <sniprintf>
 8000dda:	e01a      	b.n	8000e12 <set_config_value+0x112>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000ddc:	491c      	ldr	r1, [pc, #112]	@ (8000e50 <set_config_value+0x150>)
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff f9fe 	bl	80001e0 <strcmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <set_config_value+0x104>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <set_config_value+0x128>)
 8000df0:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <set_config_value+0x128>)
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	f107 000c 	add.w	r0, r7, #12
 8000dfa:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <set_config_value+0x154>)
 8000dfc:	2140      	movs	r1, #64	@ 0x40
 8000dfe:	f00b fe73 	bl	800cae8 <sniprintf>
 8000e02:	e006      	b.n	8000e12 <set_config_value+0x112>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000e04:	f107 000c 	add.w	r0, r7, #12
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a13      	ldr	r2, [pc, #76]	@ (8000e58 <set_config_value+0x158>)
 8000e0c:	2140      	movs	r1, #64	@ 0x40
 8000e0e:	f00b fe6b 	bl	800cae8 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fca8 	bl	800076c <cdc_write_string_chunked>
}
 8000e1c:	bf00      	nop
 8000e1e:	3750      	adds	r7, #80	@ 0x50
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0800e304 	.word	0x0800e304
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	0800e318 	.word	0x0800e318
 8000e30:	0800e338 	.word	0x0800e338
 8000e34:	0800e348 	.word	0x0800e348
 8000e38:	0800e364 	.word	0x0800e364
 8000e3c:	0800e374 	.word	0x0800e374
 8000e40:	0800e390 	.word	0x0800e390
 8000e44:	0800e3a8 	.word	0x0800e3a8
 8000e48:	0800e3cc 	.word	0x0800e3cc
 8000e4c:	0800e3e8 	.word	0x0800e3e8
 8000e50:	0800e410 	.word	0x0800e410
 8000e54:	0800e41c 	.word	0x0800e41c
 8000e58:	0800e434 	.word	0x0800e434

08000e5c <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4602      	mov	r2, r0
 8000e66:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e6a:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e6e:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000e70:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e74:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 8000e7e:	4a91      	ldr	r2, [pc, #580]	@ (80010c4 <print_keymap+0x268>)
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	f00b fe31 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e86:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc6e 	bl	800076c <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8000e96:	e109      	b.n	80010ac <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000e9e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	18d0      	adds	r0, r2, r3
 8000ea8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000eac:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8000eb0:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000eb4:	4a84      	ldr	r2, [pc, #528]	@ (80010c8 <print_keymap+0x26c>)
 8000eb6:	f00b fe17 	bl	800cae8 <sniprintf>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8000ecc:	e0cc      	b.n	8001068 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000eda:	e020      	b.n	8000f1e <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8000edc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000ee0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000ee4:	7818      	ldrb	r0, [r3, #0]
 8000ee6:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000eea:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000eee:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000ef2:	4c76      	ldr	r4, [pc, #472]	@ (80010cc <print_keymap+0x270>)
 8000ef4:	0080      	lsls	r0, r0, #2
 8000ef6:	4401      	add	r1, r0
 8000ef8:	0089      	lsls	r1, r1, #2
 8000efa:	440a      	add	r2, r1
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	3304      	adds	r3, #4
 8000f02:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <print_keymap+0xb8>
          macro_count++;
 8000f0a:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f14:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000f1e:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9da      	bls.n	8000edc <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8000f26:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d973      	bls.n	8001016 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 8000f2e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f32:	f107 020c 	add.w	r2, r7, #12
 8000f36:	18d0      	adds	r0, r2, r3
 8000f38:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f40:	4a63      	ldr	r2, [pc, #396]	@ (80010d0 <print_keymap+0x274>)
 8000f42:	4619      	mov	r1, r3
 8000f44:	f00b fdd0 	bl	800cae8 <sniprintf>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f4e:	4413      	add	r3, r2
 8000f50:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000f5a:	e044      	b.n	8000fe6 <print_keymap+0x18a>
          if (i > 0)
 8000f5c:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d012      	beq.n	8000f8a <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8000f64:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	18d0      	adds	r0, r2, r3
 8000f6e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f72:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f76:	4a57      	ldr	r2, [pc, #348]	@ (80010d4 <print_keymap+0x278>)
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f00b fdb5 	bl	800cae8 <sniprintf>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f84:	4413      	add	r3, r2
 8000f86:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000f8a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	18d4      	adds	r4, r2, r3
 8000f94:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f98:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8000f9c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fa0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000fa4:	7818      	ldrb	r0, [r3, #0]
 8000fa6:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000faa:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000fae:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fb2:	4e46      	ldr	r6, [pc, #280]	@ (80010cc <print_keymap+0x270>)
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	4401      	add	r1, r0
 8000fb8:	0089      	lsls	r1, r1, #2
 8000fba:	440a      	add	r2, r1
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000fc6:	4a44      	ldr	r2, [pc, #272]	@ (80010d8 <print_keymap+0x27c>)
 8000fc8:	4629      	mov	r1, r5
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f00b fd8c 	bl	800cae8 <sniprintf>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000fdc:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000fe6:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d9b6      	bls.n	8000f5c <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 8000fee:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	18d0      	adds	r0, r2, r3
 8000ff8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ffc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001000:	4a36      	ldr	r2, [pc, #216]	@ (80010dc <print_keymap+0x280>)
 8001002:	4619      	mov	r1, r3
 8001004:	f00b fd70 	bl	800cae8 <sniprintf>
 8001008:	4602      	mov	r2, r0
 800100a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800100e:	4413      	add	r3, r2
 8001010:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001014:	e023      	b.n	800105e <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001016:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	18d0      	adds	r0, r2, r3
 8001020:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001024:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001028:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800102c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001036:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800103a:	4d24      	ldr	r5, [pc, #144]	@ (80010cc <print_keymap+0x270>)
 800103c:	0089      	lsls	r1, r1, #2
 800103e:	440a      	add	r2, r1
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4413      	add	r3, r2
 8001044:	3301      	adds	r3, #1
 8001046:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 800104a:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <print_keymap+0x284>)
 800104c:	4621      	mov	r1, r4
 800104e:	f00b fd4b 	bl	800cae8 <sniprintf>
 8001052:	4602      	mov	r2, r0
 8001054:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001058:	4413      	add	r3, r2
 800105a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800105e:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001062:	3301      	adds	r3, #1
 8001064:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001068:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800106c:	2b03      	cmp	r3, #3
 800106e:	f67f af2e 	bls.w	8000ece <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 8001072:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	18d0      	adds	r0, r2, r3
 800107c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001080:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001084:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <print_keymap+0x288>)
 8001086:	4619      	mov	r1, r3
 8001088:	f00b fd2e 	bl	800cae8 <sniprintf>
 800108c:	4602      	mov	r2, r0
 800108e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001092:	4413      	add	r3, r2
 8001094:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fb65 	bl	800076c <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80010a2:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a6:	3301      	adds	r3, #1
 80010a8:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80010ac:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	f67f aef1 	bls.w	8000e98 <print_keymap+0x3c>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800e44c 	.word	0x0800e44c
 80010c8:	0800e464 	.word	0x0800e464
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0800e470 	.word	0x0800e470
 80010d4:	0800e474 	.word	0x0800e474
 80010d8:	0800e478 	.word	0x0800e478
 80010dc:	0800e47c 	.word	0x0800e47c
 80010e0:	0800e480 	.word	0x0800e480
 80010e4:	0800ddb0 	.word	0x0800ddb0

080010e8 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b099      	sub	sp, #100	@ 0x64
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4603      	mov	r3, r0
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	460b      	mov	r3, r1
 8001100:	717b      	strb	r3, [r7, #5]
 8001102:	4613      	mov	r3, r2
 8001104:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 8001106:	79f9      	ldrb	r1, [r7, #7]
 8001108:	79ba      	ldrb	r2, [r7, #6]
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	4822      	ldr	r0, [pc, #136]	@ (8001198 <set_keymap_value+0xb0>)
 800110e:	0089      	lsls	r1, r1, #2
 8001110:	440a      	add	r2, r1
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4413      	add	r3, r2
 8001116:	3301      	adds	r3, #1
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800111e:	2301      	movs	r3, #1
 8001120:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001124:	e014      	b.n	8001150 <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001126:	79f8      	ldrb	r0, [r7, #7]
 8001128:	79b9      	ldrb	r1, [r7, #6]
 800112a:	797a      	ldrb	r2, [r7, #5]
 800112c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001130:	4c19      	ldr	r4, [pc, #100]	@ (8001198 <set_keymap_value+0xb0>)
 8001132:	0080      	lsls	r0, r0, #2
 8001134:	4401      	add	r1, r0
 8001136:	0089      	lsls	r1, r1, #2
 8001138:	440a      	add	r2, r1
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	2200      	movs	r2, #0
 8001142:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001146:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800114a:	3301      	adds	r3, #1
 800114c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001150:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001154:	2b03      	cmp	r3, #3
 8001156:	d9e6      	bls.n	8001126 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001158:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800115c:	2100      	movs	r1, #0
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <set_keymap_value+0xb0>)
 8001160:	f001 feaa 	bl	8002eb8 <keyboard_write_config>
  keyboard_init_keys();
 8001164:	f000 ff94 	bl	8002090 <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001168:	79fc      	ldrb	r4, [r7, #7]
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	797a      	ldrb	r2, [r7, #5]
 800116e:	8879      	ldrh	r1, [r7, #2]
 8001170:	f107 000c 	add.w	r0, r7, #12
 8001174:	9102      	str	r1, [sp, #8]
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4623      	mov	r3, r4
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <set_keymap_value+0xb4>)
 800117e:	2140      	movs	r1, #64	@ 0x40
 8001180:	f00b fcb2 	bl	800cae8 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff faef 	bl	800076c <cdc_write_string_chunked>
}
 800118e:	bf00      	nop
 8001190:	3754      	adds	r7, #84	@ 0x54
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000000 	.word	0x20000000
 800119c:	0800e488 	.word	0x0800e488

080011a0 <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b0a8      	sub	sp, #160	@ 0xa0
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	460b      	mov	r3, r1
 80011ae:	71bb      	strb	r3, [r7, #6]
 80011b0:	4613      	mov	r3, r2
 80011b2:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011ba:	e01a      	b.n	80011f2 <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80011bc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	18d4      	adds	r4, r2, r3
 80011c6:	79f8      	ldrb	r0, [r7, #7]
 80011c8:	79b9      	ldrb	r1, [r7, #6]
 80011ca:	797a      	ldrb	r2, [r7, #5]
 80011cc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011d0:	8825      	ldrh	r5, [r4, #0]
 80011d2:	4c41      	ldr	r4, [pc, #260]	@ (80012d8 <set_macro_keymap_value+0x138>)
 80011d4:	0080      	lsls	r0, r0, #2
 80011d6:	4401      	add	r1, r0
 80011d8:	0089      	lsls	r1, r1, #2
 80011da:	440a      	add	r2, r1
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3304      	adds	r3, #4
 80011e2:	462a      	mov	r2, r5
 80011e4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011ec:	3301      	adds	r3, #1
 80011ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011f2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d9e0      	bls.n	80011bc <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80011fa:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80011fe:	2100      	movs	r1, #0
 8001200:	4835      	ldr	r0, [pc, #212]	@ (80012d8 <set_macro_keymap_value+0x138>)
 8001202:	f001 fe59 	bl	8002eb8 <keyboard_write_config>
  keyboard_init_keys();
 8001206:	f000 ff43 	bl	8002090 <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 800120a:	79f9      	ldrb	r1, [r7, #7]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	797a      	ldrb	r2, [r7, #5]
 8001210:	f107 000c 	add.w	r0, r7, #12
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	4a30      	ldr	r2, [pc, #192]	@ (80012dc <set_macro_keymap_value+0x13c>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	f00b fc63 	bl	800cae8 <sniprintf>
 8001222:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800122c:	e033      	b.n	8001296 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800122e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	18d0      	adds	r0, r2, r3
 8001240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001244:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001248:	4a25      	ldr	r2, [pc, #148]	@ (80012e0 <set_macro_keymap_value+0x140>)
 800124a:	4619      	mov	r1, r3
 800124c:	f00b fc4c 	bl	800cae8 <sniprintf>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001256:	4413      	add	r3, r2
 8001258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 800125c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	18d0      	adds	r0, r2, r3
 8001266:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800126a:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800126e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <set_macro_keymap_value+0x144>)
 800127c:	f00b fc34 	bl	800cae8 <sniprintf>
 8001280:	4602      	mov	r2, r0
 8001282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001286:	4413      	add	r3, r2
 8001288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 800128c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001290:	3301      	adds	r3, #1
 8001292:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001296:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800129a:	2b03      	cmp	r3, #3
 800129c:	d9c7      	bls.n	800122e <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800129e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	18d0      	adds	r0, r2, r3
 80012a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ac:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <set_macro_keymap_value+0x148>)
 80012b2:	4619      	mov	r1, r3
 80012b4:	f00b fc18 	bl	800cae8 <sniprintf>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012be:	4413      	add	r3, r2
 80012c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa4f 	bl	800076c <cdc_write_string_chunked>
}
 80012ce:	bf00      	nop
 80012d0:	3798      	adds	r7, #152	@ 0x98
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdb0      	pop	{r4, r5, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	0800e4a8 	.word	0x0800e4a8
 80012e0:	0800e4cc 	.word	0x0800e4cc
 80012e4:	0800e478 	.word	0x0800e478
 80012e8:	0800e4d0 	.word	0x0800e4d0

080012ec <save_config>:

static void save_config(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80012f0:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <save_config+0x20>)
 80012f8:	f001 fdde 	bl	8002eb8 <keyboard_write_config>
  keyboard_init_keys();
 80012fc:	f000 fec8 	bl	8002090 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <save_config+0x24>)
 8001302:	f7ff fa33 	bl	800076c <cdc_write_string_chunked>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000
 8001310:	0800e4d4 	.word	0x0800e4d4

08001314 <load_config>:

static void load_config(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001318:	f001 fdbc 	bl	8002e94 <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <load_config+0x14>)
 800131e:	f7ff fa25 	bl	800076c <cdc_write_string_chunked>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800e4f4 	.word	0x0800e4f4

0800132c <reset_config>:

static void reset_config(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 8001330:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001334:	2100      	movs	r1, #0
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <reset_config+0x24>)
 8001338:	f001 fdbe 	bl	8002eb8 <keyboard_write_config>
  keyboard_read_config();
 800133c:	f001 fdaa 	bl	8002e94 <keyboard_read_config>
  keyboard_init_keys();
 8001340:	f000 fea6 	bl	8002090 <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <reset_config+0x28>)
 8001346:	f7ff fa11 	bl	800076c <cdc_write_string_chunked>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800e668 	.word	0x0800e668
 8001354:	0800e518 	.word	0x0800e518

08001358 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	460b      	mov	r3, r1
 8001364:	71bb      	strb	r3, [r7, #6]
 8001366:	4613      	mov	r3, r2
 8001368:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d015      	beq.n	800139c <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <tud_cdc_line_state_cb+0x24>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001382:	4293      	cmp	r3, r2
 8001384:	ddf7      	ble.n	8001376 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <tud_cdc_line_state_cb+0x4c>)
 8001388:	f7ff f9f0 	bl	800076c <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <tud_cdc_line_state_cb+0x50>)
 800138e:	f7ff f9ed 	bl	800076c <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <tud_cdc_line_state_cb+0x54>)
 8001394:	f7ff f9ea 	bl	800076c <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001398:	f7ff fa33 	bl	8000802 <cdc_write_flush_wait>
  }
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800e53c 	.word	0x0800e53c
 80013a8:	0800e568 	.word	0x0800e568
 80013ac:	0800ddb4 	.word	0x0800ddb4

080013b0 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <hid_task+0x8c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <hid_task+0x16>
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <hid_task+0x90>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d035      	beq.n	800144a <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f005 ffa0 	bl	8007324 <tud_hid_n_ready>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d02f      	beq.n	800144a <hid_task+0x82>
    if (tud_suspended()) {
 80013ea:	f007 fab7 	bl	800895c <tud_suspended>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <hid_task+0x32>
      tud_remote_wakeup();
 80013f4:	f007 fac6 	bl	8008984 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80013f8:	e027      	b.n	800144a <hid_task+0x82>
      if (should_send_consumer_report) {
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <hid_task+0x8c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00f      	beq.n	8001422 <hid_task+0x5a>
        should_send_consumer_report = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <hid_task+0x8c>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	2302      	movs	r3, #2
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <hid_task+0x94>)
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	2302      	movs	r3, #2
 8001412:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	7bf9      	ldrb	r1, [r7, #15]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	2000      	movs	r0, #0
 800141c:	f005 ffc4 	bl	80073a8 <tud_hid_n_report>
 8001420:	e013      	b.n	800144a <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <hid_task+0x90>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00f      	beq.n	800144a <hid_task+0x82>
        should_send_keyboard_report = 0;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <hid_task+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <hid_task+0x98>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	717a      	strb	r2, [r7, #5]
 8001438:	713b      	strb	r3, [r7, #4]
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <hid_task+0x9c>)
 800143c:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800143e:	793a      	ldrb	r2, [r7, #4]
 8001440:	7979      	ldrb	r1, [r7, #5]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2000      	movs	r0, #0
 8001446:	f006 f835 	bl	80074b4 <tud_hid_n_keyboard_report>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002fd 	.word	0x200002fd
 8001458:	200002fe 	.word	0x200002fe
 800145c:	20000306 	.word	0x20000306
 8001460:	200002ff 	.word	0x200002ff
 8001464:	20000300 	.word	0x20000300

08001468 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	440b      	add	r3, r1
 8001480:	3305      	adds	r3, #5
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	2b03      	cmp	r3, #3
 8001488:	f200 80f7 	bhi.w	800167a <hid_press_key+0x212>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <hid_press_key+0x2c>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014cb 	.word	0x080014cb
 8001498:	080014a5 	.word	0x080014a5
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	08001529 	.word	0x08001529
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	88db      	ldrh	r3, [r3, #6]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b74      	ldr	r3, [pc, #464]	@ (8001688 <hid_press_key+0x220>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <hid_press_key+0x220>)
 80014c0:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80014c2:	4b72      	ldr	r3, [pc, #456]	@ (800168c <hid_press_key+0x224>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    break;
 80014c8:	e0da      	b.n	8001680 <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	e018      	b.n	8001502 <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001690 <hid_press_key+0x228>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d110      	bne.n	80014fc <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	88db      	ldrh	r3, [r3, #6]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	b2d1      	uxtb	r1, r2
 80014ee:	4a68      	ldr	r2, [pc, #416]	@ (8001690 <hid_press_key+0x228>)
 80014f0:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80014f2:	4b66      	ldr	r3, [pc, #408]	@ (800168c <hid_press_key+0x224>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
        break;
 80014f8:	bf00      	nop
      }
    }
    break;
 80014fa:	e0c1      	b.n	8001680 <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d9e3      	bls.n	80014d0 <hid_press_key+0x68>
    break;
 8001508:	e0ba      	b.n	8001680 <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	440b      	add	r3, r1
 8001516:	88db      	ldrh	r3, [r3, #6]
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <hid_press_key+0x22c>)
 800151e:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8001520:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <hid_press_key+0x230>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
    break;
 8001526:	e0ab      	b.n	8001680 <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 800152c:	2300      	movs	r3, #0
 800152e:	757b      	strb	r3, [r7, #21]
 8001530:	e025      	b.n	800157e <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	0058      	lsls	r0, r3, #1
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	4403      	add	r3, r0
 8001542:	440b      	add	r3, r1
 8001544:	88db      	ldrh	r3, [r3, #6]
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d015      	beq.n	8001578 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	0058      	lsls	r0, r3, #1
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	4403      	add	r3, r0
 800155c:	440b      	add	r3, r1
 800155e:	88db      	ldrh	r3, [r3, #6]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f9a0 	bl	80018a8 <get_bitmask_for_modifier>
 8001568:	4603      	mov	r3, r0
 800156a:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 8001572:	7dbb      	ldrb	r3, [r7, #22]
 8001574:	3301      	adds	r3, #1
 8001576:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001578:	7d7b      	ldrb	r3, [r7, #21]
 800157a:	3301      	adds	r3, #1
 800157c:	757b      	strb	r3, [r7, #21]
 800157e:	7d7b      	ldrb	r3, [r7, #21]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d9d6      	bls.n	8001532 <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	74fb      	strb	r3, [r7, #19]
 800158c:	e00a      	b.n	80015a4 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800158e:	7cfb      	ldrb	r3, [r7, #19]
 8001590:	4a3f      	ldr	r2, [pc, #252]	@ (8001690 <hid_press_key+0x228>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <hid_press_key+0x136>
        start_slot = i;
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	753b      	strb	r3, [r7, #20]
        break;
 800159c:	e005      	b.n	80015aa <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	3301      	adds	r3, #1
 80015a2:	74fb      	strb	r3, [r7, #19]
 80015a4:	7cfb      	ldrb	r3, [r7, #19]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d9f1      	bls.n	800158e <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015ae:	7d3b      	ldrb	r3, [r7, #20]
 80015b0:	747b      	strb	r3, [r7, #17]
 80015b2:	e00a      	b.n	80015ca <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80015b4:	7c7b      	ldrb	r3, [r7, #17]
 80015b6:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <hid_press_key+0x228>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <hid_press_key+0x16a>
        available_slots++;
 80015be:	7cbb      	ldrb	r3, [r7, #18]
 80015c0:	3301      	adds	r3, #1
 80015c2:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015c4:	7c7b      	ldrb	r3, [r7, #17]
 80015c6:	3301      	adds	r3, #1
 80015c8:	747b      	strb	r3, [r7, #17]
 80015ca:	7c7b      	ldrb	r3, [r7, #17]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d9f1      	bls.n	80015b4 <hid_press_key+0x14c>
 80015d0:	e000      	b.n	80015d4 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80015d2:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80015d4:	7cba      	ldrb	r2, [r7, #18]
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d350      	bcc.n	800167e <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80015e0:	7d3b      	ldrb	r3, [r7, #20]
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e042      	b.n	800166c <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	7c3b      	ldrb	r3, [r7, #16]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	0058      	lsls	r0, r3, #1
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	4403      	add	r3, r0
 80015f6:	440b      	add	r3, r1
 80015f8:	88db      	ldrh	r3, [r3, #6]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d032      	beq.n	8001666 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	7c3b      	ldrb	r3, [r7, #16]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	0058      	lsls	r0, r3, #1
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	4403      	add	r3, r0
 8001610:	440b      	add	r3, r1
 8001612:	88db      	ldrh	r3, [r3, #6]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f946 	bl	80018a8 <get_bitmask_for_modifier>
 800161c:	4603      	mov	r3, r0
 800161e:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <hid_press_key+0x220>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	4313      	orrs	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <hid_press_key+0x220>)
 8001632:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <hid_press_key+0x224>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e014      	b.n	8001666 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	7c3b      	ldrb	r3, [r7, #16]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	0058      	lsls	r0, r3, #1
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	4403      	add	r3, r0
 800164c:	440b      	add	r3, r1
 800164e:	88db      	ldrh	r3, [r3, #6]
 8001650:	b29a      	uxth	r2, r3
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	b2d1      	uxtb	r1, r2
 8001656:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <hid_press_key+0x228>)
 8001658:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <hid_press_key+0x224>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001666:	7c3b      	ldrb	r3, [r7, #16]
 8001668:	3301      	adds	r3, #1
 800166a:	743b      	strb	r3, [r7, #16]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d805      	bhi.n	800167e <hid_press_key+0x216>
 8001672:	7c3b      	ldrb	r3, [r7, #16]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d9b6      	bls.n	80015e6 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001678:	e001      	b.n	800167e <hid_press_key+0x216>

  default:
    break;
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <hid_press_key+0x218>
    break;
 800167e:	bf00      	nop
  }
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002ff 	.word	0x200002ff
 800168c:	200002fe 	.word	0x200002fe
 8001690:	20000300 	.word	0x20000300
 8001694:	20000306 	.word	0x20000306
 8001698:	200002fd 	.word	0x200002fd

0800169c <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	3305      	adds	r3, #5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	f200 80a7 	bhi.w	800180e <hid_release_key+0x172>
 80016c0:	a201      	add	r2, pc, #4	@ (adr r2, 80016c8 <hid_release_key+0x2c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	08001707 	.word	0x08001707
 80016cc:	080016d9 	.word	0x080016d9
 80016d0:	08001749 	.word	0x08001749
 80016d4:	08001757 	.word	0x08001757
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	88db      	ldrh	r3, [r3, #6]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001818 <hid_release_key+0x17c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <hid_release_key+0x17c>)
 80016fc:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <hid_release_key+0x180>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
    break;
 8001704:	e084      	b.n	8001810 <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e019      	b.n	8001740 <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	4a44      	ldr	r2, [pc, #272]	@ (8001820 <hid_release_key+0x184>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	4618      	mov	r0, r3
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	440b      	add	r3, r1
 8001720:	88db      	ldrh	r3, [r3, #6]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4298      	cmp	r0, r3
 8001726:	d108      	bne.n	800173a <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4a3d      	ldr	r2, [pc, #244]	@ (8001820 <hid_release_key+0x184>)
 800172c:	2100      	movs	r1, #0
 800172e:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <hid_release_key+0x180>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
        break;
 8001736:	bf00      	nop
      }
    }
    break;
 8001738:	e06a      	b.n	8001810 <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3301      	adds	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d9e2      	bls.n	800170c <hid_release_key+0x70>
    break;
 8001746:	e063      	b.n	8001810 <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <hid_release_key+0x188>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800174e:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <hid_release_key+0x18c>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
    break;
 8001754:	e05c      	b.n	8001810 <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001756:	2300      	movs	r3, #0
 8001758:	73bb      	strb	r3, [r7, #14]
 800175a:	e054      	b.n	8001806 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	0058      	lsls	r0, r3, #1
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	4403      	add	r3, r0
 800176c:	440b      	add	r3, r1
 800176e:	88db      	ldrh	r3, [r3, #6]
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	0058      	lsls	r0, r3, #1
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	4403      	add	r3, r0
 8001786:	440b      	add	r3, r1
 8001788:	88db      	ldrh	r3, [r3, #6]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f88b 	bl	80018a8 <get_bitmask_for_modifier>
 8001792:	4603      	mov	r3, r0
 8001794:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001796:	7b3b      	ldrb	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00f      	beq.n	80017bc <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 800179c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <hid_release_key+0x17c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <hid_release_key+0x17c>)
 80017b2:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <hid_release_key+0x180>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e021      	b.n	8001800 <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	737b      	strb	r3, [r7, #13]
 80017c0:	e01b      	b.n	80017fa <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80017c2:	7b7b      	ldrb	r3, [r7, #13]
 80017c4:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <hid_release_key+0x184>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	461c      	mov	r4, r3
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	0058      	lsls	r0, r3, #1
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	4403      	add	r3, r0
 80017da:	440b      	add	r3, r1
 80017dc:	88db      	ldrh	r3, [r3, #6]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	429c      	cmp	r4, r3
 80017e2:	d107      	bne.n	80017f4 <hid_release_key+0x158>
              keycodes[i] = 0;
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <hid_release_key+0x184>)
 80017e8:	2100      	movs	r1, #0
 80017ea:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <hid_release_key+0x180>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
              break;
 80017f2:	e005      	b.n	8001800 <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80017f4:	7b7b      	ldrb	r3, [r7, #13]
 80017f6:	3301      	adds	r3, #1
 80017f8:	737b      	strb	r3, [r7, #13]
 80017fa:	7b7b      	ldrb	r3, [r7, #13]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d9e0      	bls.n	80017c2 <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	3301      	adds	r3, #1
 8001804:	73bb      	strb	r3, [r7, #14]
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d9a7      	bls.n	800175c <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 800180c:	e000      	b.n	8001810 <hid_release_key+0x174>

  default:
    break;
 800180e:	bf00      	nop
  }
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	200002ff 	.word	0x200002ff
 800181c:	200002fe 	.word	0x200002fe
 8001820:	20000300 	.word	0x20000300
 8001824:	20000306 	.word	0x20000306
 8001828:	200002fd 	.word	0x200002fd

0800182c <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	460b      	mov	r3, r1
 8001872:	71bb      	strb	r3, [r7, #6]
 8001874:	4613      	mov	r3, r2
 8001876:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	460b      	mov	r3, r1
 8001894:	71bb      	strb	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	3be0      	subs	r3, #224	@ 0xe0
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d822      	bhi.n	8001900 <get_bitmask_for_modifier+0x58>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <get_bitmask_for_modifier+0x18>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018e9 	.word	0x080018e9
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	080018f9 	.word	0x080018f9
 80018dc:	080018fd 	.word	0x080018fd
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e00e      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e00c      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 80018e8:	2304      	movs	r3, #4
 80018ea:	e00a      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 80018ec:	2308      	movs	r3, #8
 80018ee:	e008      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 80018f0:	2310      	movs	r3, #16
 80018f2:	e006      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 80018f4:	2320      	movs	r3, #32
 80018f6:	e004      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 80018f8:	2340      	movs	r3, #64	@ 0x40
 80018fa:	e002      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	e000      	b.n	8001902 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001900:	2300      	movs	r3, #0
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	2bff      	cmp	r3, #255	@ 0xff
 800191e:	d904      	bls.n	800192a <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001926:	b29b      	uxth	r3, r3
 8001928:	e000      	b.n	800192c <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 800192a:	2300      	movs	r3, #0
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	4603      	mov	r3, r0
 800194c:	71bb      	strb	r3, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	717b      	strb	r3, [r7, #5]
 8001952:	4613      	mov	r3, r2
 8001954:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001956:	79f9      	ldrb	r1, [r7, #7]
 8001958:	79ba      	ldrb	r2, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8001968:	fb01 f202 	mul.w	r2, r1, r2
 800196c:	4413      	add	r3, r2
 800196e:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba4 <init_key+0x26c>)
 8001970:	4413      	add	r3, r2
 8001972:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2200      	movs	r2, #0
 800197e:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	797a      	ldrb	r2, [r7, #5]
 8001984:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	793a      	ldrb	r2, [r7, #4]
 800198a:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001994:	2200      	movs	r2, #0
 8001996:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2200      	movs	r2, #0
 800199e:	f042 0208 	orr.w	r2, r2, #8
 80019a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 80019a6:	2200      	movs	r2, #0
 80019a8:	f042 0207 	orr.w	r2, r2, #7
 80019ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f062 020b 	orn	r2, r2, #11
 80019b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80019bc:	2200      	movs	r2, #0
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 80019ce:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <init_key+0x270>)
 80019d0:	785a      	ldrb	r2, [r3, #1]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 80019d8:	4b73      	ldr	r3, [pc, #460]	@ (8001ba8 <init_key+0x270>)
 80019da:	785a      	ldrb	r2, [r3, #1]
 80019dc:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <init_key+0x270>)
 80019de:	789b      	ldrb	r3, [r3, #2]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 80019ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba8 <init_key+0x270>)
 80019ec:	78da      	ldrb	r2, [r3, #3]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e0c6      	b.n	8001b90 <init_key+0x258>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8001a02:	7df9      	ldrb	r1, [r7, #23]
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	793b      	ldrb	r3, [r7, #4]
 8001a08:	4867      	ldr	r0, [pc, #412]	@ (8001ba8 <init_key+0x270>)
 8001a0a:	0089      	lsls	r1, r1, #2
 8001a0c:	440a      	add	r2, r1
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	3301      	adds	r3, #1
 8001a14:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80b6 	beq.w	8001b8a <init_key+0x252>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	757b      	strb	r3, [r7, #21]
 8001a26:	e015      	b.n	8001a54 <init_key+0x11c>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001a28:	7df8      	ldrb	r0, [r7, #23]
 8001a2a:	7979      	ldrb	r1, [r7, #5]
 8001a2c:	793a      	ldrb	r2, [r7, #4]
 8001a2e:	7d7b      	ldrb	r3, [r7, #21]
 8001a30:	4c5d      	ldr	r4, [pc, #372]	@ (8001ba8 <init_key+0x270>)
 8001a32:	0080      	lsls	r0, r0, #2
 8001a34:	4401      	add	r1, r0
 8001a36:	0089      	lsls	r1, r1, #2
 8001a38:	440a      	add	r2, r1
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <init_key+0x116>
          macro_count++;
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	3301      	adds	r3, #1
 8001a52:	757b      	strb	r3, [r7, #21]
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d9e6      	bls.n	8001a28 <init_key+0xf0>
        }
      }

      if (macro_count > 1) {
 8001a5a:	7dbb      	ldrb	r3, [r7, #22]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d92b      	bls.n	8001ab8 <init_key+0x180>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001a60:	7dfa      	ldrb	r2, [r7, #23]
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3305      	adds	r3, #5
 8001a6e:	2204      	movs	r2, #4
 8001a70:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	753b      	strb	r3, [r7, #20]
 8001a76:	e01b      	b.n	8001ab0 <init_key+0x178>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001a78:	7dfd      	ldrb	r5, [r7, #23]
 8001a7a:	797c      	ldrb	r4, [r7, #5]
 8001a7c:	7938      	ldrb	r0, [r7, #4]
 8001a7e:	7d39      	ldrb	r1, [r7, #20]
 8001a80:	7dfa      	ldrb	r2, [r7, #23]
 8001a82:	7d3b      	ldrb	r3, [r7, #20]
 8001a84:	4e48      	ldr	r6, [pc, #288]	@ (8001ba8 <init_key+0x270>)
 8001a86:	00ad      	lsls	r5, r5, #2
 8001a88:	442c      	add	r4, r5
 8001a8a:	00a4      	lsls	r4, r4, #2
 8001a8c:	4420      	add	r0, r4
 8001a8e:	0080      	lsls	r0, r0, #2
 8001a90:	4401      	add	r1, r0
 8001a92:	3104      	adds	r1, #4
 8001a94:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	0058      	lsls	r0, r3, #1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4403      	add	r3, r0
 8001aa4:	440b      	add	r3, r1
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001aaa:	7d3b      	ldrb	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	753b      	strb	r3, [r7, #20]
 8001ab0:	7d3b      	ldrb	r3, [r7, #20]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d9e0      	bls.n	8001a78 <init_key+0x140>
 8001ab6:	e068      	b.n	8001b8a <init_key+0x252>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001ab8:	7df9      	ldrb	r1, [r7, #23]
 8001aba:	797a      	ldrb	r2, [r7, #5]
 8001abc:	793b      	ldrb	r3, [r7, #4]
 8001abe:	483a      	ldr	r0, [pc, #232]	@ (8001ba8 <init_key+0x270>)
 8001ac0:	0089      	lsls	r1, r1, #2
 8001ac2:	440a      	add	r2, r1
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff1e 	bl	8001910 <get_usage_consumer_control>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <init_key+0x1ca>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001ade:	7dfa      	ldrb	r2, [r7, #23]
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3305      	adds	r3, #5
 8001aec:	2203      	movs	r2, #3
 8001aee:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001af0:	7dfa      	ldrb	r2, [r7, #23]
 8001af2:	6939      	ldr	r1, [r7, #16]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	89fa      	ldrh	r2, [r7, #14]
 8001afe:	80da      	strh	r2, [r3, #6]
 8001b00:	e043      	b.n	8001b8a <init_key+0x252>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001b02:	7df9      	ldrb	r1, [r7, #23]
 8001b04:	797a      	ldrb	r2, [r7, #5]
 8001b06:	793b      	ldrb	r3, [r7, #4]
 8001b08:	4827      	ldr	r0, [pc, #156]	@ (8001ba8 <init_key+0x270>)
 8001b0a:	0089      	lsls	r1, r1, #2
 8001b0c:	440a      	add	r2, r1
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3301      	adds	r3, #1
 8001b14:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fec4 	bl	80018a8 <get_bitmask_for_modifier>
 8001b20:	4603      	mov	r3, r0
 8001b22:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d013      	beq.n	8001b52 <init_key+0x21a>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001b2a:	7dfa      	ldrb	r2, [r7, #23]
 8001b2c:	6939      	ldr	r1, [r7, #16]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	3305      	adds	r3, #5
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001b3c:	7dfa      	ldrb	r2, [r7, #23]
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	b298      	uxth	r0, r3
 8001b42:	6939      	ldr	r1, [r7, #16]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	80da      	strh	r2, [r3, #6]
 8001b50:	e01b      	b.n	8001b8a <init_key+0x252>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001b52:	7dfa      	ldrb	r2, [r7, #23]
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3305      	adds	r3, #5
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001b64:	7df8      	ldrb	r0, [r7, #23]
 8001b66:	7979      	ldrb	r1, [r7, #5]
 8001b68:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001b6a:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001b6c:	4c0e      	ldr	r4, [pc, #56]	@ (8001ba8 <init_key+0x270>)
 8001b6e:	0080      	lsls	r0, r0, #2
 8001b70:	4401      	add	r1, r0
 8001b72:	0089      	lsls	r1, r1, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3301      	adds	r3, #1
 8001b78:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001b7c:	6939      	ldr	r1, [r7, #16]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	4602      	mov	r2, r0
 8001b88:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	75fb      	strb	r3, [r7, #23]
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f67f af35 	bls.w	8001a02 <init_key+0xca>
          }
        }
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000308 	.word	0x20000308
 8001ba8:	20000000 	.word	0x20000000

08001bac <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001bb4:	4bab      	ldr	r3, [pc, #684]	@ (8001e64 <update_key_state+0x2b8>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <update_key_state+0x20>
 8001bbc:	f001 fa02 	bl	8002fc4 <keyboard_read_adc>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001bc6:	330f      	adds	r3, #15
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	e002      	b.n	8001bd2 <update_key_state+0x26>
 8001bcc:	f001 f9fa 	bl	8002fc4 <keyboard_read_adc>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b13      	cmp	r3, #19
 8001bde:	d82f      	bhi.n	8001c40 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001be0:	4ba1      	ldr	r3, [pc, #644]	@ (8001e68 <update_key_state+0x2bc>)
 8001be2:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001be4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf0:	893b      	ldrh	r3, [r7, #8]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e10c      	b.n	8001e5a <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001c40:	893a      	ldrh	r2, [r7, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d929      	bls.n	8001ca2 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001c4e:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <update_key_state+0x2c0>)
 8001c50:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d117      	bne.n	8001cde <update_key_state+0x132>
 8001cae:	893b      	ldrh	r3, [r7, #8]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b0a      	subs	r3, #10
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	db0e      	blt.n	8001cde <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2b0e      	cmp	r3, #14
 8001cc6:	d904      	bls.n	8001cd2 <update_key_state+0x126>
      key->is_idle = 1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	711a      	strb	r2, [r3, #4]
      return 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e0c3      	b.n	8001e5a <update_key_state+0x2ae>
    }
    key->idle_counter++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	78db      	ldrb	r3, [r3, #3]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b0a      	subs	r3, #10
 8001cec:	429a      	cmp	r2, r3
 8001cee:	db06      	blt.n	8001cfe <update_key_state+0x152>
    state.distance = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001cfc:	e00f      	b.n	8001d1e <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	893b      	ldrh	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b0a      	subs	r3, #10
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001d1e:	897a      	ldrh	r2, [r7, #10]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d903      	bls.n	8001d34 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001d2c:	897a      	ldrh	r2, [r7, #10]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b3c      	subs	r3, #60	@ 0x3c
 8001d42:	429a      	cmp	r2, r3
 8001d44:	db04      	blt.n	8001d50 <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4613      	mov	r3, r2
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8001d60:	b292      	uxth	r2, r2
 8001d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001d6a:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <update_key_state+0x2c0>)
 8001d6c:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7a:	7b3b      	ldrb	r3, [r7, #12]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d90:	ee06 3a90 	vmov	s13, r3
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	ee17 3a90 	vmov	r3, s15
 8001da0:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001da4:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db0:	edc7 7a00 	vstr	s15, [r7]
 8001db4:	783b      	ldrb	r3, [r7, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001dba:	7cba      	ldrb	r2, [r7, #18]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd18      	ble.n	8001e06 <update_key_state+0x25a>
 8001dd4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd14      	ble.n	8001e06 <update_key_state+0x25a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d00f      	beq.n	8001e06 <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8001e04:	e01c      	b.n	8001e40 <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da17      	bge.n	8001e40 <update_key_state+0x294>
 8001e10:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da13      	bge.n	8001e40 <update_key_state+0x294>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00e      	beq.n	8001e40 <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001e30:	2bff      	cmp	r3, #255	@ 0xff
 8001e32:	d005      	beq.n	8001e40 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	cb03      	ldmia	r3!, {r0, r1}
 8001e4c:	6010      	str	r0, [r2, #0]
 8001e4e:	6051      	str	r1, [r2, #4]
 8001e50:	8819      	ldrh	r1, [r3, #0]
 8001e52:	789b      	ldrb	r3, [r3, #2]
 8001e54:	8111      	strh	r1, [r2, #8]
 8001e56:	7293      	strb	r3, [r2, #10]
  return 1;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000
 8001e68:	3f19999a 	.word	0x3f19999a
 8001e6c:	3f4ccccd 	.word	0x3f4ccccd

08001e70 <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001e7c:	f001 f8b8 	bl	8002ff0 <keyboard_get_time>
 8001e80:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	bf8c      	ite	hi
 8001e92:	2301      	movhi	r3, #1
 8001e94:	2300      	movls	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	bf34      	ite	cc
 8001eaa:	2301      	movcc	r3, #1
 8001eac:	2300      	movcs	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001eca:	4619      	mov	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a5e      	ldr	r2, [pc, #376]	@ (8002058 <update_key_actuation+0x1e8>)
 8001ede:	7892      	ldrb	r2, [r2, #2]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	bfcc      	ite	gt
 8001ee6:	2301      	movgt	r3, #1
 8001ee8:	2300      	movle	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001efc:	4619      	mov	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f04:	1acb      	subs	r3, r1, r3
 8001f06:	429a      	cmp	r2, r3
 8001f08:	bfb4      	ite	lt
 8001f0a:	2301      	movlt	r3, #1
 8001f0c:	2300      	movge	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	f200 8091 	bhi.w	8002042 <update_key_actuation+0x1d2>
 8001f20:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <update_key_actuation+0xb8>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001fed 	.word	0x08001fed
 8001f2c:	08001fff 	.word	0x08001fff
 8001f30:	08001f39 	.word	0x08001f39
 8001f34:	08001f79 	.word	0x08001f79

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8083 	beq.w	8002046 <update_key_actuation+0x1d6>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f54:	e00b      	b.n	8001f6e <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <update_key_actuation+0x1ec>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fa7d 	bl	8001468 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    }
    break;
 8001f76:	e066      	b.n	8002046 <update_key_actuation+0x1d6>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001f78:	7c7b      	ldrb	r3, [r7, #17]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <update_key_actuation+0x118>
      key->actuation.status = STATUS_RESET;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 8001f86:	e063      	b.n	8002050 <update_key_actuation+0x1e0>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d026      	beq.n	8001fdc <update_key_actuation+0x16c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d121      	bne.n	8001fdc <update_key_actuation+0x16c>
 8001f98:	7c3b      	ldrb	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01e      	beq.n	8001fdc <update_key_actuation+0x16c>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <update_key_actuation+0x14a>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <update_key_actuation+0x1ec>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e00b      	b.n	8001fd2 <update_key_actuation+0x162>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <update_key_actuation+0x1ec>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fa4b 	bl	8001468 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001fda:	e036      	b.n	800204a <update_key_actuation+0x1da>
    } else if (is_before_reset_offset) {
 8001fdc:	7cbb      	ldrb	r3, [r7, #18]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d033      	beq.n	800204a <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RESET;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 8001fea:	e02e      	b.n	800204a <update_key_actuation+0x1da>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fb50 	bl	800169c <hid_release_key>
    break;
 8001ffc:	e028      	b.n	8002050 <update_key_actuation+0x1e0>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001ffe:	7cbb      	ldrb	r3, [r7, #18]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <update_key_actuation+0x1a8>
      key->actuation.status = STATUS_RESET;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fb43 	bl	800169c <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 8002016:	e01a      	b.n	800204e <update_key_actuation+0x1de>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8002018:	7c7b      	ldrb	r3, [r7, #17]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d017      	beq.n	800204e <update_key_actuation+0x1de>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <update_key_actuation+0x1de>
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00f      	beq.n	800204e <update_key_actuation+0x1de>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fb2e 	bl	800169c <hid_release_key>
    break;
 8002040:	e005      	b.n	800204e <update_key_actuation+0x1de>

  default:
    break;
 8002042:	bf00      	nop
 8002044:	e004      	b.n	8002050 <update_key_actuation+0x1e0>
    break;
 8002046:	bf00      	nop
 8002048:	e002      	b.n	8002050 <update_key_actuation+0x1e0>
    break;
 800204a:	bf00      	nop
 800204c:	e000      	b.n	8002050 <update_key_actuation+0x1e0>
    break;
 800204e:	bf00      	nop
  }
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000000 	.word	0x20000000
 800205c:	2000075c 	.word	0x2000075c

08002060 <update_key>:

void update_key(struct key *key) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fd9f 	bl	8001bac <update_key_state>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <update_key+0x2c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fef7 	bl	8001e70 <update_key_actuation>
 8002082:	e000      	b.n	8002086 <update_key+0x26>
    return;
 8002084:	bf00      	nop
}
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000cf8 	.word	0x20000cf8

08002090 <keyboard_init_keys>:

void keyboard_init_keys() {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	e027      	b.n	80020ec <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800209c:	2300      	movs	r3, #0
 800209e:	71bb      	strb	r3, [r7, #6]
 80020a0:	e01e      	b.n	80020e0 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	4915      	ldr	r1, [pc, #84]	@ (80020fc <keyboard_init_keys+0x6c>)
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80020b0:	2bff      	cmp	r3, #255	@ 0xff
 80020b2:	d012      	beq.n	80020da <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	4910      	ldr	r1, [pc, #64]	@ (80020fc <keyboard_init_keys+0x6c>)
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4413      	add	r3, r2
 80020be:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	490d      	ldr	r1, [pc, #52]	@ (80020fc <keyboard_init_keys+0x6c>)
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	7859      	ldrb	r1, [r3, #1]
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	f7ff fc2f 	bl	8001938 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	3301      	adds	r3, #1
 80020de:	71bb      	strb	r3, [r7, #6]
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d9dd      	bls.n	80020a2 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3301      	adds	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d9d4      	bls.n	800209c <keyboard_init_keys+0xc>
      }
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	0800e870 	.word	0x0800e870

08002100 <keyboard_task>:

void keyboard_task() {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002106:	f000 ff73 	bl	8002ff0 <keyboard_get_time>
 800210a:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 800210c:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <keyboard_task+0x1a8>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e039      	b.n	800218c <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 ff0e 	bl	8002f3c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002120:	2300      	movs	r3, #0
 8002122:	73bb      	strb	r3, [r7, #14]
 8002124:	e02c      	b.n	8002180 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8002126:	7bb9      	ldrb	r1, [r7, #14]
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	4860      	ldr	r0, [pc, #384]	@ (80022ac <keyboard_task+0x1ac>)
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800213a:	fb01 f202 	mul.w	r2, r1, r2
 800213e:	4413      	add	r3, r2
 8002140:	4403      	add	r3, r0
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d017      	beq.n	8002178 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 ff1e 	bl	8002f8c <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002150:	7bb9      	ldrb	r1, [r7, #14]
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002162:	fb01 f202 	mul.w	r2, r1, r2
 8002166:	4413      	add	r3, r2
 8002168:	4a50      	ldr	r2, [pc, #320]	@ (80022ac <keyboard_task+0x1ac>)
 800216a:	4413      	add	r3, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff77 	bl	8002060 <update_key>

      keyboard_close_adc();
 8002172:	f000 ff33 	bl	8002fdc <keyboard_close_adc>
 8002176:	e000      	b.n	800217a <keyboard_task+0x7a>
        continue;
 8002178:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	3301      	adds	r3, #1
 800217e:	73bb      	strb	r3, [r7, #14]
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0cf      	beq.n	8002126 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	3301      	adds	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d9c2      	bls.n	8002118 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002192:	2300      	movs	r3, #0
 8002194:	737b      	strb	r3, [r7, #13]
 8002196:	e078      	b.n	800228a <keyboard_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002198:	2300      	movs	r3, #0
 800219a:	733b      	strb	r3, [r7, #12]
 800219c:	e06f      	b.n	800227e <keyboard_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800219e:	7b39      	ldrb	r1, [r7, #12]
 80021a0:	7b7a      	ldrb	r2, [r7, #13]
 80021a2:	4842      	ldr	r0, [pc, #264]	@ (80022ac <keyboard_task+0x1ac>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021b2:	fb01 f202 	mul.w	r2, r1, r2
 80021b6:	4413      	add	r3, r2
 80021b8:	4403      	add	r3, r0
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05a      	beq.n	8002276 <keyboard_task+0x176>
 80021c0:	7b39      	ldrb	r1, [r7, #12]
 80021c2:	7b7a      	ldrb	r2, [r7, #13]
 80021c4:	4839      	ldr	r0, [pc, #228]	@ (80022ac <keyboard_task+0x1ac>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021d4:	fb01 f202 	mul.w	r2, r1, r2
 80021d8:	4413      	add	r3, r2
 80021da:	4403      	add	r3, r0
 80021dc:	333c      	adds	r3, #60	@ 0x3c
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d148      	bne.n	8002276 <keyboard_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80021e4:	7b39      	ldrb	r1, [r7, #12]
 80021e6:	7b7a      	ldrb	r2, [r7, #13]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021f6:	fb01 f202 	mul.w	r2, r1, r2
 80021fa:	4413      	add	r3, r2
 80021fc:	4a2b      	ldr	r2, [pc, #172]	@ (80022ac <keyboard_task+0x1ac>)
 80021fe:	4413      	add	r3, r2
 8002200:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220e:	429a      	cmp	r2, r3
 8002210:	bf34      	ite	cc
 8002212:	2301      	movcc	r3, #1
 8002214:	2300      	movcs	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 800221a:	f000 fee9 	bl	8002ff0 <keyboard_get_time>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <keyboard_task+0x1b0>)
 800222a:	88d2      	ldrh	r2, [r2, #6]
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <keyboard_task+0x156>
 800223e:	78bb      	ldrb	r3, [r7, #2]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <keyboard_task+0x156>
        key->actuation.status = STATUS_TAP;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 800224c:	2101      	movs	r1, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f90a 	bl	8001468 <hid_press_key>
 8002254:	e010      	b.n	8002278 <keyboard_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 8002256:	78bb      	ldrb	r3, [r7, #2]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <keyboard_task+0x164>
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <keyboard_task+0x1a8>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <keyboard_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 800226c:	2100      	movs	r1, #0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff f8fa 	bl	8001468 <hid_press_key>
 8002274:	e000      	b.n	8002278 <keyboard_task+0x178>
        continue;
 8002276:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002278:	7b3b      	ldrb	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	733b      	strb	r3, [r7, #12]
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d08c      	beq.n	800219e <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	3301      	adds	r3, #1
 8002288:	737b      	strb	r3, [r7, #13]
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d983      	bls.n	8002198 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002290:	f000 feae 	bl	8002ff0 <keyboard_get_time>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <keyboard_task+0x1b4>)
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000075c 	.word	0x2000075c
 80022ac:	20000308 	.word	0x20000308
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000758 	.word	0x20000758

080022b8 <snaptap_task>:

void snaptap_task() {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80022be:	f000 fe97 	bl	8002ff0 <keyboard_get_time>
 80022c2:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 80022c4:	4b89      	ldr	r3, [pc, #548]	@ (80024ec <snaptap_task+0x234>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	77fb      	strb	r3, [r7, #31]
 80022ce:	e039      	b.n	8002344 <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80022d0:	7ffb      	ldrb	r3, [r7, #31]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe32 	bl	8002f3c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	77bb      	strb	r3, [r7, #30]
 80022dc:	e02c      	b.n	8002338 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80022de:	7fb9      	ldrb	r1, [r7, #30]
 80022e0:	7ffa      	ldrb	r2, [r7, #31]
 80022e2:	4883      	ldr	r0, [pc, #524]	@ (80024f0 <snaptap_task+0x238>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80022f2:	fb01 f202 	mul.w	r2, r1, r2
 80022f6:	4413      	add	r3, r2
 80022f8:	4403      	add	r3, r0
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002300:	7fbb      	ldrb	r3, [r7, #30]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fe42 	bl	8002f8c <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002308:	7fb9      	ldrb	r1, [r7, #30]
 800230a:	7ffa      	ldrb	r2, [r7, #31]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800231a:	fb01 f202 	mul.w	r2, r1, r2
 800231e:	4413      	add	r3, r2
 8002320:	4a73      	ldr	r2, [pc, #460]	@ (80024f0 <snaptap_task+0x238>)
 8002322:	4413      	add	r3, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fe9b 	bl	8002060 <update_key>

      keyboard_close_adc();
 800232a:	f000 fe57 	bl	8002fdc <keyboard_close_adc>
 800232e:	e000      	b.n	8002332 <snaptap_task+0x7a>
        continue;
 8002330:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002332:	7fbb      	ldrb	r3, [r7, #30]
 8002334:	3301      	adds	r3, #1
 8002336:	77bb      	strb	r3, [r7, #30]
 8002338:	7fbb      	ldrb	r3, [r7, #30]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0cf      	beq.n	80022de <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	3301      	adds	r3, #1
 8002342:	77fb      	strb	r3, [r7, #31]
 8002344:	7ffb      	ldrb	r3, [r7, #31]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d9c2      	bls.n	80022d0 <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800234a:	2300      	movs	r3, #0
 800234c:	777b      	strb	r3, [r7, #29]
 800234e:	e078      	b.n	8002442 <snaptap_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002350:	2300      	movs	r3, #0
 8002352:	773b      	strb	r3, [r7, #28]
 8002354:	e06f      	b.n	8002436 <snaptap_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002356:	7f39      	ldrb	r1, [r7, #28]
 8002358:	7f7a      	ldrb	r2, [r7, #29]
 800235a:	4865      	ldr	r0, [pc, #404]	@ (80024f0 <snaptap_task+0x238>)
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800236a:	fb01 f202 	mul.w	r2, r1, r2
 800236e:	4413      	add	r3, r2
 8002370:	4403      	add	r3, r0
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05a      	beq.n	800242e <snaptap_task+0x176>
 8002378:	7f39      	ldrb	r1, [r7, #28]
 800237a:	7f7a      	ldrb	r2, [r7, #29]
 800237c:	485c      	ldr	r0, [pc, #368]	@ (80024f0 <snaptap_task+0x238>)
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800238c:	fb01 f202 	mul.w	r2, r1, r2
 8002390:	4413      	add	r3, r2
 8002392:	4403      	add	r3, r0
 8002394:	333c      	adds	r3, #60	@ 0x3c
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d148      	bne.n	800242e <snaptap_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 800239c:	7f39      	ldrb	r1, [r7, #28]
 800239e:	7f7a      	ldrb	r2, [r7, #29]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80023ae:	fb01 f202 	mul.w	r2, r1, r2
 80023b2:	4413      	add	r3, r2
 80023b4:	4a4e      	ldr	r2, [pc, #312]	@ (80024f0 <snaptap_task+0x238>)
 80023b6:	4413      	add	r3, r2
 80023b8:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf34      	ite	cc
 80023ca:	2301      	movcc	r3, #1
 80023cc:	2300      	movcs	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023d2:	f000 fe0d 	bl	8002ff0 <keyboard_get_time>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	4a44      	ldr	r2, [pc, #272]	@ (80024f4 <snaptap_task+0x23c>)
 80023e2:	88d2      	ldrh	r2, [r2, #6]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <snaptap_task+0x156>
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <snaptap_task+0x156>
        key->actuation.status = STATUS_TAP;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002404:	2101      	movs	r1, #1
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f7ff f82e 	bl	8001468 <hid_press_key>
 800240c:	e010      	b.n	8002430 <snaptap_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <snaptap_task+0x164>
 8002414:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <snaptap_task+0x234>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <snaptap_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002424:	2100      	movs	r1, #0
 8002426:	68b8      	ldr	r0, [r7, #8]
 8002428:	f7ff f81e 	bl	8001468 <hid_press_key>
 800242c:	e000      	b.n	8002430 <snaptap_task+0x178>
        continue;
 800242e:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002430:	7f3b      	ldrb	r3, [r7, #28]
 8002432:	3301      	adds	r3, #1
 8002434:	773b      	strb	r3, [r7, #28]
 8002436:	7f3b      	ldrb	r3, [r7, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d08c      	beq.n	8002356 <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800243c:	7f7b      	ldrb	r3, [r7, #29]
 800243e:	3301      	adds	r3, #1
 8002440:	777b      	strb	r3, [r7, #29]
 8002442:	7f7b      	ldrb	r3, [r7, #29]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d983      	bls.n	8002350 <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002448:	f000 fdd2 	bl	8002ff0 <keyboard_get_time>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <snaptap_task+0x240>)
 8002454:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	e029      	b.n	80024b4 <snaptap_task+0x1fc>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002460:	2300      	movs	r3, #0
 8002462:	75bb      	strb	r3, [r7, #22]
 8002464:	e01d      	b.n	80024a2 <snaptap_task+0x1ea>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8002466:	7db9      	ldrb	r1, [r7, #22]
 8002468:	7dfa      	ldrb	r2, [r7, #23]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002478:	fb01 f202 	mul.w	r2, r1, r2
 800247c:	4413      	add	r3, r2
 800247e:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <snaptap_task+0x238>)
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <snaptap_task+0x1e4>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002492:	2b02      	cmp	r3, #2
 8002494:	d102      	bne.n	800249c <snaptap_task+0x1e4>
              new_pressed_key = key;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	61bb      	str	r3, [r7, #24]
              break;
 800249a:	e005      	b.n	80024a8 <snaptap_task+0x1f0>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800249c:	7dbb      	ldrb	r3, [r7, #22]
 800249e:	3301      	adds	r3, #1
 80024a0:	75bb      	strb	r3, [r7, #22]
 80024a2:	7dbb      	ldrb	r3, [r7, #22]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0de      	beq.n	8002466 <snaptap_task+0x1ae>
          }
      }
      if (new_pressed_key) break;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <snaptap_task+0x204>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	3301      	adds	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d9d2      	bls.n	8002460 <snaptap_task+0x1a8>
 80024ba:	e000      	b.n	80024be <snaptap_task+0x206>
      if (new_pressed_key) break;
 80024bc:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <snaptap_task+0x244>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d00c      	beq.n	80024e2 <snaptap_task+0x22a>
      if (current_pressed_key) {
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <snaptap_task+0x244>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <snaptap_task+0x224>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <snaptap_task+0x244>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f8e0 	bl	800169c <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 80024dc:	4a07      	ldr	r2, [pc, #28]	@ (80024fc <snaptap_task+0x244>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  }
}
 80024e2:	bf00      	nop
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000075c 	.word	0x2000075c
 80024f0:	20000308 	.word	0x20000308
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000758 	.word	0x20000758
 80024fc:	20000760 	.word	0x20000760

08002500 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b0b8      	sub	sp, #224	@ 0xe0
 8002504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002506:	f001 fb6b 	bl	8003be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250a:	f000 fb5b 	bl	8002bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250e:	f000 fc6f 	bl	8002df0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002512:	f000 fbbf 	bl	8002c94 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002516:	f000 fc3d 	bl	8002d94 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800251a:	f000 fc0d 	bl	8002d38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800251e:	4bb5      	ldr	r3, [pc, #724]	@ (80027f4 <main+0x2f4>)
 8002520:	2201      	movs	r2, #1
 8002522:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002524:	4bb3      	ldr	r3, [pc, #716]	@ (80027f4 <main+0x2f4>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 800252a:	f7ff fdb1 	bl	8002090 <keyboard_init_keys>
  ssd1306_Init();
 800252e:	f000 fda5 	bl	800307c <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 8002532:	4bb1      	ldr	r3, [pc, #708]	@ (80027f8 <main+0x2f8>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800253c:	4619      	mov	r1, r3
 800253e:	2000      	movs	r0, #0
 8002540:	f009 ffe0 	bl	800c504 <tusb_rhport_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  int mod_y = 2;
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  const int mod_line_height = 10;
 800254a:	230a      	movs	r3, #10
 800254c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8002550:	2322      	movs	r3, #34	@ 0x22
 8002552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8002556:	2336      	movs	r3, #54	@ 0x36
 8002558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  int label_row_top = 2;
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int percent_row_top = label_row_bot - 11;
 8002562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002566:	3b0b      	subs	r3, #11
 8002568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 800256c:	f001 fb9e 	bl	8003cac <HAL_GetTick>
 8002570:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  tud_task_ext(UINT32_MAX, false);
 8002574:	2100      	movs	r1, #0
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	f006 fb75 	bl	8008c68 <tud_task_ext>
}
 800257e:	bf00      	nop
    tud_task();
    
    // Detect mode key by HID code
    struct key *mode_key = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    struct key *layer_key = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002592:	e032      	b.n	80025fa <main+0xfa>
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800259a:	e025      	b.n	80025e8 <main+0xe8>
            struct key *k = &keyboard_keys[adc][amux];
 800259c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025ae:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80025b2:	fb01 f202 	mul.w	r2, r1, r2
 80025b6:	4413      	add	r3, r2
 80025b8:	4a90      	ldr	r2, [pc, #576]	@ (80027fc <main+0x2fc>)
 80025ba:	4413      	add	r3, r2
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
            if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 80025be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025c0:	88db      	ldrh	r3, [r3, #6]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80025c6:	d102      	bne.n	80025ce <main+0xce>
                mode_key = k;
 80025c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            }
            if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 80025ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d0:	88db      	ldrh	r3, [r3, #6]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2bf1      	cmp	r3, #241	@ 0xf1
 80025d6:	d102      	bne.n	80025de <main+0xde>
                layer_key = k;
 80025d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025e2:	3301      	adds	r3, #1
 80025e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	ddd5      	ble.n	800259c <main+0x9c>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 80025f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f4:	3301      	adds	r3, #1
 80025f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	ddc8      	ble.n	8002594 <main+0x94>
            }
        }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 8002602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <main+0x11a>
 800260a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002612:	2b02      	cmp	r3, #2
 8002614:	d101      	bne.n	800261a <main+0x11a>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <main+0x11c>
 800261a:	2300      	movs	r3, #0
 800261c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 8002620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <main+0x138>
 8002628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002630:	2b02      	cmp	r3, #2
 8002632:	d101      	bne.n	8002638 <main+0x138>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <main+0x13a>
 8002638:	2300      	movs	r3, #0
 800263a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    if (mode_key_pressed && !last_mode_key_pressed) {
 800263e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002642:	2b00      	cmp	r3, #0
 8002644:	d033      	beq.n	80026ae <main+0x1ae>
 8002646:	4b6e      	ldr	r3, [pc, #440]	@ (8002800 <main+0x300>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d12f      	bne.n	80026ae <main+0x1ae>
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <main+0x304>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <main+0x304>)
 8002660:	701a      	strb	r2, [r3, #0]
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002662:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <main+0x304>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <main+0x18a>
 800266a:	4b67      	ldr	r3, [pc, #412]	@ (8002808 <main+0x308>)
 800266c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800266e:	2300      	movs	r3, #0
 8002670:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002676:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 8002678:	2211      	movs	r2, #17
 800267a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800267e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f9e3 	bl	8006a4c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002686:	bf00      	nop
 8002688:	e00e      	b.n	80026a8 <main+0x1a8>
 800268a:	4b60      	ldr	r3, [pc, #384]	@ (800280c <main+0x30c>)
 800268c:	663b      	str	r3, [r7, #96]	@ 0x60
 800268e:	2300      	movs	r3, #0
 8002690:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002696:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 8002698:	2210      	movs	r2, #16
 800269a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800269e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 f9d3 	bl	8006a4c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026a6:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f004 fa03 	bl	8006ab4 <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 80026ae:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d046      	beq.n	8002744 <main+0x244>
 80026b6:	4b56      	ldr	r3, [pc, #344]	@ (8002810 <main+0x310>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d142      	bne.n	8002744 <main+0x244>
        // Toggle tuần tự giữa BASE, ALT, ALT2
        if (current_layer == _BASE_LAYER) {
 80026be:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <main+0x314>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d112      	bne.n	80026ec <main+0x1ec>
            current_layer = _ALT_LAYER;
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <main+0x314>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <main+0x318>)
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80026d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 80026da:	220c      	movs	r2, #12
 80026dc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80026e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 f9b2 	bl	8006a4c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026e8:	bf00      	nop
 80026ea:	e028      	b.n	800273e <main+0x23e>
            tud_cdc_write_str("Layer: ALT\r\n");
        } else if (current_layer == _ALT_LAYER) {
 80026ec:	4b49      	ldr	r3, [pc, #292]	@ (8002814 <main+0x314>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d112      	bne.n	800271a <main+0x21a>
            current_layer = _ALT_LAYER_2;
 80026f4:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <main+0x314>)
 80026f6:	2203      	movs	r2, #3
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b48      	ldr	r3, [pc, #288]	@ (800281c <main+0x31c>)
 80026fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002706:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 8002708:	220d      	movs	r2, #13
 800270a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800270e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002710:	4618      	mov	r0, r3
 8002712:	f004 f99b 	bl	8006a4c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002716:	bf00      	nop
 8002718:	e011      	b.n	800273e <main+0x23e>
            tud_cdc_write_str("Layer: ALT2\r\n");
        } else {
            current_layer = _BASE_LAYER;
 800271a:	4b3e      	ldr	r3, [pc, #248]	@ (8002814 <main+0x314>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <main+0x320>)
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002724:	2300      	movs	r3, #0
 8002726:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800272a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 800272e:	220d      	movs	r2, #13
 8002730:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002734:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f988 	bl	8006a4c <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 800273c:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 800273e:	2000      	movs	r0, #0
 8002740:	f004 f9b8 	bl	8006ab4 <tud_cdc_n_write_flush>
            tud_cdc_write_str("Layer: BASE\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 8002744:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <main+0x300>)
 8002746:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800274a:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 800274c:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <main+0x310>)
 800274e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002752:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002754:	4b2b      	ldr	r3, [pc, #172]	@ (8002804 <main+0x304>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <main+0x262>
        keyboard_task();
 800275c:	f7ff fcd0 	bl	8002100 <keyboard_task>
 8002760:	e001      	b.n	8002766 <main+0x266>
    } else {
        snaptap_task();
 8002762:	f7ff fda9 	bl	80022b8 <snaptap_task>
    }
    //snaptap_task();
    //keyboard_task();
    hid_task();
 8002766:	f7fe fe2f 	bl	80013c8 <hid_task>
    cdc_task();
 800276a:	f7fd ff6b 	bl	8000644 <cdc_task>
    ssd1306_Fill(White);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 fcee 	bl	8003150 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8002774:	2101      	movs	r1, #1
 8002776:	2001      	movs	r0, #1
 8002778:	f000 ff50 	bl	800361c <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 800277c:	2300      	movs	r3, #0
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	233f      	movs	r3, #63	@ 0x3f
 8002782:	227f      	movs	r2, #127	@ 0x7f
 8002784:	2100      	movs	r1, #0
 8002786:	2000      	movs	r0, #0
 8002788:	f000 fee0 	bl	800354c <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2320      	movs	r3, #32
 8002792:	227f      	movs	r2, #127	@ 0x7f
 8002794:	2120      	movs	r1, #32
 8002796:	2026      	movs	r0, #38	@ 0x26
 8002798:	f000 fe6c 	bl	8003474 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 800279c:	2300      	movs	r3, #0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	233f      	movs	r3, #63	@ 0x3f
 80027a2:	2226      	movs	r2, #38	@ 0x26
 80027a4:	2100      	movs	r1, #0
 80027a6:	2026      	movs	r0, #38	@ 0x26
 80027a8:	f000 fe64 	bl	8003474 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027b2:	e016      	b.n	80027e2 <main+0x2e2>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 80027b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	3326      	adds	r3, #38	@ 0x26
 80027c2:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 80027c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c6:	b2d8      	uxtb	r0, r3
 80027c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	233f      	movs	r3, #63	@ 0x3f
 80027d2:	2100      	movs	r1, #0
 80027d4:	f000 fe4e 	bl	8003474 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80027d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027dc:	3301      	adds	r3, #1
 80027de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	dde4      	ble.n	80027b4 <main+0x2b4>
    }

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80027f0:	e090      	b.n	8002914 <main+0x414>
 80027f2:	bf00      	nop
 80027f4:	20000ce4 	.word	0x20000ce4
 80027f8:	0800e630 	.word	0x0800e630
 80027fc:	20000308 	.word	0x20000308
 8002800:	20000cf5 	.word	0x20000cf5
 8002804:	20000cf4 	.word	0x20000cf4
 8002808:	0800e590 	.word	0x0800e590
 800280c:	0800e5a4 	.word	0x0800e5a4
 8002810:	20000cf6 	.word	0x20000cf6
 8002814:	20000cf8 	.word	0x20000cf8
 8002818:	0800e5b8 	.word	0x0800e5b8
 800281c:	0800e5c8 	.word	0x0800e5c8
 8002820:	0800e5d8 	.word	0x0800e5d8
      struct key *k = &keyboard_keys[0][amux];
 8002824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	4aa9      	ldr	r2, [pc, #676]	@ (8002ad8 <main+0x5d8>)
 8002834:	4413      	add	r3, r2
 8002836:	67fb      	str	r3, [r7, #124]	@ 0x7c

      if (k->state.distance_8bits > 20 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002838:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800283a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800283e:	2b14      	cmp	r3, #20
 8002840:	d963      	bls.n	800290a <main+0x40a>
 8002842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002844:	795b      	ldrb	r3, [r3, #5]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d15f      	bne.n	800290a <main+0x40a>
        uint8_t bitmask = k->layers[_BASE_LAYER].value;
 800284a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800284c:	3306      	adds	r3, #6
 800284e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        const char *label = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

        if (bitmask == 0b00000001)
 8002858:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800285c:	2b01      	cmp	r3, #1
 800285e:	d103      	bne.n	8002868 <main+0x368>
          label = "LCtrl";
 8002860:	4b9e      	ldr	r3, [pc, #632]	@ (8002adc <main+0x5dc>)
 8002862:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002866:	e036      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b00000010)
 8002868:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800286c:	2b02      	cmp	r3, #2
 800286e:	d103      	bne.n	8002878 <main+0x378>
          label = "LShift";
 8002870:	4b9b      	ldr	r3, [pc, #620]	@ (8002ae0 <main+0x5e0>)
 8002872:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002876:	e02e      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b00000100)
 8002878:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800287c:	2b04      	cmp	r3, #4
 800287e:	d103      	bne.n	8002888 <main+0x388>
          label = "LAlt";
 8002880:	4b98      	ldr	r3, [pc, #608]	@ (8002ae4 <main+0x5e4>)
 8002882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002886:	e026      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b00001000)
 8002888:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800288c:	2b08      	cmp	r3, #8
 800288e:	d103      	bne.n	8002898 <main+0x398>
          label = "LGUI";
 8002890:	4b95      	ldr	r3, [pc, #596]	@ (8002ae8 <main+0x5e8>)
 8002892:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002896:	e01e      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b00010000)
 8002898:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800289c:	2b10      	cmp	r3, #16
 800289e:	d103      	bne.n	80028a8 <main+0x3a8>
          label = "RCtrl";
 80028a0:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <main+0x5ec>)
 80028a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a6:	e016      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b00100000)
 80028a8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d103      	bne.n	80028b8 <main+0x3b8>
          label = "RShift";
 80028b0:	4b8f      	ldr	r3, [pc, #572]	@ (8002af0 <main+0x5f0>)
 80028b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028b6:	e00e      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b01000000)
 80028b8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d103      	bne.n	80028c8 <main+0x3c8>
          label = "RAlt";
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <main+0x5f4>)
 80028c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c6:	e006      	b.n	80028d6 <main+0x3d6>
        else if (bitmask == 0b10000000)
 80028c8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028cc:	2b80      	cmp	r3, #128	@ 0x80
 80028ce:	d102      	bne.n	80028d6 <main+0x3d6>
          label = "RGUI";
 80028d0:	4b89      	ldr	r3, [pc, #548]	@ (8002af8 <main+0x5f8>)
 80028d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

        if (label) {
 80028d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <main+0x40a>
          ssd1306_SetCursor(2, mod_y);
 80028de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	2002      	movs	r0, #2
 80028e8:	f000 fdac 	bl	8003444 <ssd1306_SetCursor>
          ssd1306_WriteString(label, Font_6x8, Black);
 80028ec:	4b83      	ldr	r3, [pc, #524]	@ (8002afc <main+0x5fc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80028f8:	f000 fd7e 	bl	80033f8 <ssd1306_WriteString>
          mod_y += mod_line_height;
 80028fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002904:	4413      	add	r3, r2
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 800290a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800290e:	3301      	adds	r3, #1
 8002910:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002918:	2b0f      	cmp	r3, #15
 800291a:	dd83      	ble.n	8002824 <main+0x324>
        }
      }
    }

    char keycodes[6][4] = {0};
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	809a      	strh	r2, [r3, #4]
    int tracker = {0};
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002944:	e068      	b.n	8002a18 <main+0x518>
      struct key *k = &keyboard_keys[0][amux];
 8002946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	4a60      	ldr	r2, [pc, #384]	@ (8002ad8 <main+0x5d8>)
 8002956:	4413      	add	r3, r2
 8002958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

      if (k->state.distance_8bits > 20 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 800295c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002960:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002964:	2b14      	cmp	r3, #20
 8002966:	d952      	bls.n	8002a0e <main+0x50e>
 8002968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800296c:	2b05      	cmp	r3, #5
 800296e:	dc4e      	bgt.n	8002a0e <main+0x50e>
 8002970:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002974:	795b      	ldrb	r3, [r3, #5]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d149      	bne.n	8002a0e <main+0x50e>
        keycodes[tracker][0] = '0';
 800297a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	33d8      	adds	r3, #216	@ 0xd8
 8002982:	443b      	add	r3, r7
 8002984:	2230      	movs	r2, #48	@ 0x30
 8002986:	f803 2cc0 	strb.w	r2, [r3, #-192]
        keycodes[tracker][1] = 'x';
 800298a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	33d8      	adds	r3, #216	@ 0xd8
 8002992:	443b      	add	r3, r7
 8002994:	2278      	movs	r2, #120	@ 0x78
 8002996:	f803 2cbf 	strb.w	r2, [r3, #-191]
        keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 800299a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800299e:	2b09      	cmp	r3, #9
 80029a0:	dc05      	bgt.n	80029ae <main+0x4ae>
 80029a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3330      	adds	r3, #48	@ 0x30
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	e004      	b.n	80029b8 <main+0x4b8>
 80029ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3337      	adds	r3, #55	@ 0x37
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	33d8      	adds	r3, #216	@ 0xd8
 80029c0:	443b      	add	r3, r7
 80029c2:	f803 2cbe 	strb.w	r2, [r3, #-190]
        keycodes[tracker][3] = '\0';
 80029c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	33d8      	adds	r3, #216	@ 0xd8
 80029ce:	443b      	add	r3, r7
 80029d0:	2200      	movs	r2, #0
 80029d2:	f803 2cbd 	strb.w	r2, [r3, #-189]

        key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 80029d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80029de:	461a      	mov	r2, r3
 80029e0:	2364      	movs	r3, #100	@ 0x64
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a46      	ldr	r2, [pc, #280]	@ (8002b00 <main+0x600>)
 80029e8:	fb82 1203 	smull	r1, r2, r2, r3
 80029ec:	441a      	add	r2, r3
 80029ee:	11d2      	asrs	r2, r2, #7
 80029f0:	17db      	asrs	r3, r3, #31
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	b2d9      	uxtb	r1, r3
 80029f6:	f107 0210 	add.w	r2, r7, #16
 80029fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029fe:	4413      	add	r3, r2
 8002a00:	460a      	mov	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]
        tracker++;
 8002a04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002a0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a12:	3301      	adds	r3, #1
 8002a14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	dd92      	ble.n	8002946 <main+0x446>
      }
    }

    for (int i = 1; i <= 3; i++) {
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a26:	e04f      	b.n	8002ac8 <main+0x5c8>
      if (keycodes[i - 1][0] != '\0') {
 8002a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	33d8      	adds	r3, #216	@ 0xd8
 8002a32:	443b      	add	r3, r7
 8002a34:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d040      	beq.n	8002abe <main+0x5be>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8002a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	332a      	adds	r3, #42	@ 0x2a
 8002a4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_top);
 8002a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fcf0 	bl	8003444 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	f107 0218 	add.w	r2, r7, #24
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	18d0      	adds	r0, r2, r3
 8002a72:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <main+0x5fc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	f000 fcbd 	bl	80033f8 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a82:	3b01      	subs	r3, #1
 8002a84:	33d8      	adds	r3, #216	@ 0xd8
 8002a86:	443b      	add	r3, r7
 8002a88:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	491c      	ldr	r1, [pc, #112]	@ (8002b04 <main+0x604>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00a f85d 	bl	800cb54 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 8002a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fccb 	bl	8003444 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002aae:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <main+0x5fc>)
 8002ab0:	f107 0008 	add.w	r0, r7, #8
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	9200      	str	r2, [sp, #0]
 8002ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aba:	f000 fc9d 	bl	80033f8 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8002abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	ddab      	ble.n	8002a28 <main+0x528>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ad6:	e065      	b.n	8002ba4 <main+0x6a4>
 8002ad8:	20000308 	.word	0x20000308
 8002adc:	0800e5e8 	.word	0x0800e5e8
 8002ae0:	0800e5f0 	.word	0x0800e5f0
 8002ae4:	0800e5f8 	.word	0x0800e5f8
 8002ae8:	0800e600 	.word	0x0800e600
 8002aec:	0800e608 	.word	0x0800e608
 8002af0:	0800e610 	.word	0x0800e610
 8002af4:	0800e618 	.word	0x0800e618
 8002af8:	0800e620 	.word	0x0800e620
 8002afc:	0800ee90 	.word	0x0800ee90
 8002b00:	80808081 	.word	0x80808081
 8002b04:	0800e628 	.word	0x0800e628
      if (keycodes[i - 1][0] != '\0') {
 8002b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	33d8      	adds	r3, #216	@ 0xd8
 8002b12:	443b      	add	r3, r7
 8002b14:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d03e      	beq.n	8002b9a <main+0x69a>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b20:	1f1a      	subs	r2, r3, #4
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	332a      	adds	r3, #42	@ 0x2a
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        ssd1306_SetCursor(x, label_row_bot);
 8002b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fc80 	bl	8003444 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	f107 0218 	add.w	r2, r7, #24
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	18d0      	adds	r0, r2, r3
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <main+0x6bc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	9200      	str	r2, [sp, #0]
 8002b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5a:	f000 fc4d 	bl	80033f8 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b62:	3b01      	subs	r3, #1
 8002b64:	33d8      	adds	r3, #216	@ 0xd8
 8002b66:	443b      	add	r3, r7
 8002b68:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	463b      	mov	r3, r7
 8002b70:	4913      	ldr	r1, [pc, #76]	@ (8002bc0 <main+0x6c0>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f009 ffee 	bl	800cb54 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8002b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fc5c 	bl	8003444 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <main+0x6bc>)
 8002b8e:	4638      	mov	r0, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b96:	f000 fc2f 	bl	80033f8 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8002b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	ddad      	ble.n	8002b08 <main+0x608>
      }
    }

    ssd1306_UpdateScreen();
 8002bac:	f000 fae8 	bl	8003180 <ssd1306_UpdateScreen>
    cdc_performance_measure(start_at);
 8002bb0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002bb4:	f7fd fd12 	bl	80005dc <cdc_performance_measure>
  while (1) {
 8002bb8:	e4d8      	b.n	800256c <main+0x6c>
 8002bba:	bf00      	nop
 8002bbc:	0800ee90 	.word	0x0800ee90
 8002bc0:	0800e628 	.word	0x0800e628

08002bc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b094      	sub	sp, #80	@ 0x50
 8002bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bca:	f107 0320 	add.w	r3, r7, #32
 8002bce:	2230      	movs	r2, #48	@ 0x30
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00a f823 	bl	800cc1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <SystemClock_Config+0xc8>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	4a26      	ldr	r2, [pc, #152]	@ (8002c8c <SystemClock_Config+0xc8>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf8:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <SystemClock_Config+0xc8>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c04:	2300      	movs	r3, #0
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <SystemClock_Config+0xcc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a20      	ldr	r2, [pc, #128]	@ (8002c90 <SystemClock_Config+0xcc>)
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <SystemClock_Config+0xcc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002c34:	230d      	movs	r3, #13
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c38:	23a8      	movs	r3, #168	@ 0xa8
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c40:	2307      	movs	r3, #7
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fecb 	bl	80059e4 <HAL_RCC_OscConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0x94>
    Error_Handler();
 8002c54:	f000 f9d3 	bl	8002ffe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c58:	230f      	movs	r3, #15
 8002c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f92d 	bl	8005ed4 <HAL_RCC_ClockConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0xc0>
    Error_Handler();
 8002c80:	f000 f9bd 	bl	8002ffe <Error_Handler>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3750      	adds	r7, #80	@ 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002ca6:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002ca8:	4a21      	ldr	r2, [pc, #132]	@ (8002d30 <MX_ADC1_Init+0x9c>)
 8002caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cd4:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cd6:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <MX_ADC1_Init+0xa0>)
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cda:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cee:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002cf4:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002cf6:	f001 f809 	bl	8003d0c <HAL_ADC_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_ADC1_Init+0x70>
    Error_Handler();
 8002d00:	f000 f97d 	bl	8002ffe <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002d04:	2309      	movs	r3, #9
 8002d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002d10:	463b      	mov	r3, r7
 8002d12:	4619      	mov	r1, r3
 8002d14:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <MX_ADC1_Init+0x98>)
 8002d16:	f001 f9bd 	bl	8004094 <HAL_ADC_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_ADC1_Init+0x90>
    Error_Handler();
 8002d20:	f000 f96d 	bl	8002ffe <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000764 	.word	0x20000764
 8002d30:	40012000 	.word	0x40012000
 8002d34:	0f000001 	.word	0x0f000001

08002d38 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d3e:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <MX_I2C1_Init+0x54>)
 8002d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d44:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <MX_I2C1_Init+0x58>)
 8002d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002d74:	4804      	ldr	r0, [pc, #16]	@ (8002d88 <MX_I2C1_Init+0x50>)
 8002d76:	f002 f879 	bl	8004e6c <HAL_I2C_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002d80:	f000 f93d 	bl	8002ffe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200007ac 	.word	0x200007ac
 8002d8c:	40005400 	.word	0x40005400
 8002d90:	00061a80 	.word	0x00061a80

08002d94 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da2:	2204      	movs	r2, #4
 8002da4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da8:	2202      	movs	r2, #2
 8002daa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db4:	2202      	movs	r2, #2
 8002db6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8002dd6:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dd8:	f002 fcf5 	bl	80057c6 <HAL_PCD_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8002de2:	f000 f90c 	bl	8002ffe <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000800 	.word	0x20000800

08002df0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a11      	ldr	r2, [pc, #68]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <MX_GPIO_Init+0x9c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002e60:	480b      	ldr	r0, [pc, #44]	@ (8002e90 <MX_GPIO_Init+0xa0>)
 8002e62:	f001 ffe9 	bl	8004e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002e66:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <MX_GPIO_Init+0xa0>)
 8002e80:	f001 fe56 	bl	8004b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020400 	.word	0x40020400

08002e94 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8002e98:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <keyboard_read_config+0x1c>)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <keyboard_read_config+0x20>)
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f009 ff92 	bl	800cdce <memcpy>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	08040000 	.word	0x08040000

08002eb8 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8002ece:	d301      	bcc.n	8002ed4 <keyboard_write_config+0x1c>
    return 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e02d      	b.n	8002f30 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 8002ed4:	f001 fc72 	bl	80047bc <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8002ed8:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <keyboard_write_config+0x80>)
 8002eda:	22b3      	movs	r2, #179	@ 0xb3
 8002edc:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8002ede:	2102      	movs	r1, #2
 8002ee0:	2006      	movs	r0, #6
 8002ee2:	f001 fddd 	bl	8004aa0 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	81fb      	strh	r3, [r7, #14]
 8002eea:	e01a      	b.n	8002f22 <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8002eec:	89fb      	ldrh	r3, [r7, #14]
 8002eee:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002ef2:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	89fb      	ldrh	r3, [r7, #14]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	461c      	mov	r4, r3
 8002f06:	4615      	mov	r5, r2
 8002f08:	4622      	mov	r2, r4
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f001 fc01 	bl	8004714 <HAL_FLASH_Program>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002f18:	f001 fc72 	bl	8004800 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	81fb      	strh	r3, [r7, #14]
 8002f22:	89fa      	ldrh	r2, [r7, #14]
 8002f24:	883b      	ldrh	r3, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3e0      	bcc.n	8002eec <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 8002f2a:	f001 fc69 	bl	8004800 <HAL_FLASH_Lock>
  return 1;
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	40023c00 	.word	0x40023c00

08002f3c <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e013      	b.n	8002f74 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <keyboard_select_amux+0x48>)
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	b299      	uxth	r1, r3
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	fa42 f303 	asr.w	r3, r2, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <keyboard_select_amux+0x4c>)
 8002f6a:	f001 ff65 	bl	8004e38 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3301      	adds	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d9e8      	bls.n	8002f4c <keyboard_select_amux+0x10>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	0800e890 	.word	0x0800e890
 8002f88:	40020400 	.word	0x40020400

08002f8c <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8002f96:	2209      	movs	r2, #9
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <keyboard_select_adc+0x30>)
 8002f9a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <keyboard_select_adc+0x30>)
 8002f9e:	4808      	ldr	r0, [pc, #32]	@ (8002fc0 <keyboard_select_adc+0x34>)
 8002fa0:	f001 f878 	bl	8004094 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8002fa4:	4806      	ldr	r0, [pc, #24]	@ (8002fc0 <keyboard_select_adc+0x34>)
 8002fa6:	f000 fef5 	bl	8003d94 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8002faa:	2101      	movs	r1, #1
 8002fac:	4804      	ldr	r0, [pc, #16]	@ (8002fc0 <keyboard_select_adc+0x34>)
 8002fae:	f000 ffd8 	bl	8003f62 <HAL_ADC_PollForConversion>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000ce4 	.word	0x20000ce4
 8002fc0:	20000764 	.word	0x20000764

08002fc4 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8002fc8:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <keyboard_read_adc+0x14>)
 8002fca:	f001 f855 	bl	8004078 <HAL_ADC_GetValue>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	b29b      	uxth	r3, r3
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000764 	.word	0x20000764

08002fdc <keyboard_close_adc>:

void keyboard_close_adc() {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <keyboard_close_adc+0x10>)
 8002fe2:	f000 ff8b 	bl	8003efc <HAL_ADC_Stop>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000764 	.word	0x20000764

08002ff0 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ff4:	f000 fe5a 	bl	8003cac <HAL_GetTick>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003002:	b672      	cpsid	i
}
 8003004:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <Error_Handler+0x8>

0800300a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af04      	add	r7, sp, #16
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	9302      	str	r3, [sp, #8]
 8003028:	2301      	movs	r3, #1
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	2200      	movs	r2, #0
 8003034:	2178      	movs	r1, #120	@ 0x78
 8003036:	4803      	ldr	r0, [pc, #12]	@ (8003044 <ssd1306_WriteCommand+0x2c>)
 8003038:	f002 f85c 	bl	80050f4 <HAL_I2C_Mem_Write>
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200007ac 	.word	0x200007ac

08003048 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af04      	add	r7, sp, #16
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f04f 32ff 	mov.w	r2, #4294967295
 800305a:	9202      	str	r2, [sp, #8]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2301      	movs	r3, #1
 8003064:	2240      	movs	r2, #64	@ 0x40
 8003066:	2178      	movs	r1, #120	@ 0x78
 8003068:	4803      	ldr	r0, [pc, #12]	@ (8003078 <ssd1306_WriteData+0x30>)
 800306a:	f002 f843 	bl	80050f4 <HAL_I2C_Mem_Write>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200007ac 	.word	0x200007ac

0800307c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003080:	f7ff ffc3 	bl	800300a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003084:	2064      	movs	r0, #100	@ 0x64
 8003086:	f000 fe1d 	bl	8003cc4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800308a:	2000      	movs	r0, #0
 800308c:	f000 faa8 	bl	80035e0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003090:	2020      	movs	r0, #32
 8003092:	f7ff ffc1 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003096:	2000      	movs	r0, #0
 8003098:	f7ff ffbe 	bl	8003018 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800309c:	20b0      	movs	r0, #176	@ 0xb0
 800309e:	f7ff ffbb 	bl	8003018 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80030a2:	20c0      	movs	r0, #192	@ 0xc0
 80030a4:	f7ff ffb8 	bl	8003018 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff ffb5 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80030ae:	2010      	movs	r0, #16
 80030b0:	f7ff ffb2 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80030b4:	2040      	movs	r0, #64	@ 0x40
 80030b6:	f7ff ffaf 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80030ba:	20ff      	movs	r0, #255	@ 0xff
 80030bc:	f000 fa7d 	bl	80035ba <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80030c0:	20a0      	movs	r0, #160	@ 0xa0
 80030c2:	f7ff ffa9 	bl	8003018 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 80030c6:	20a7      	movs	r0, #167	@ 0xa7
 80030c8:	f7ff ffa6 	bl	8003018 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80030cc:	20a8      	movs	r0, #168	@ 0xa8
 80030ce:	f7ff ffa3 	bl	8003018 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80030d2:	203f      	movs	r0, #63	@ 0x3f
 80030d4:	f7ff ffa0 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80030d8:	20a4      	movs	r0, #164	@ 0xa4
 80030da:	f7ff ff9d 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80030de:	20d3      	movs	r0, #211	@ 0xd3
 80030e0:	f7ff ff9a 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff ff97 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80030ea:	20d5      	movs	r0, #213	@ 0xd5
 80030ec:	f7ff ff94 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80030f0:	20f0      	movs	r0, #240	@ 0xf0
 80030f2:	f7ff ff91 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80030f6:	20d9      	movs	r0, #217	@ 0xd9
 80030f8:	f7ff ff8e 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80030fc:	2022      	movs	r0, #34	@ 0x22
 80030fe:	f7ff ff8b 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003102:	20da      	movs	r0, #218	@ 0xda
 8003104:	f7ff ff88 	bl	8003018 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003108:	2012      	movs	r0, #18
 800310a:	f7ff ff85 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800310e:	20db      	movs	r0, #219	@ 0xdb
 8003110:	f7ff ff82 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003114:	2020      	movs	r0, #32
 8003116:	f7ff ff7f 	bl	8003018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800311a:	208d      	movs	r0, #141	@ 0x8d
 800311c:	f7ff ff7c 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003120:	2014      	movs	r0, #20
 8003122:	f7ff ff79 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003126:	2001      	movs	r0, #1
 8003128:	f000 fa5a 	bl	80035e0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800312c:	2000      	movs	r0, #0
 800312e:	f000 f80f 	bl	8003150 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003132:	f000 f825 	bl	8003180 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <ssd1306_Init+0xd0>)
 8003138:	2200      	movs	r2, #0
 800313a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <ssd1306_Init+0xd0>)
 800313e:	2200      	movs	r2, #0
 8003140:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003142:	4b02      	ldr	r3, [pc, #8]	@ (800314c <ssd1306_Init+0xd0>)
 8003144:	2201      	movs	r2, #1
 8003146:	711a      	strb	r2, [r3, #4]
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000cfc 	.word	0x20000cfc

08003150 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <ssd1306_Fill+0x14>
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <ssd1306_Fill+0x16>
 8003164:	23ff      	movs	r3, #255	@ 0xff
 8003166:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316a:	4619      	mov	r1, r3
 800316c:	4803      	ldr	r0, [pc, #12]	@ (800317c <ssd1306_Fill+0x2c>)
 800316e:	f009 fd56 	bl	800cc1e <memset>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000d04 	.word	0x20000d04

08003180 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
uint8_t SSD1306_Buffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};
uint8_t SSD1306_LastBuffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};

void ssd1306_UpdateScreen(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e042      	b.n	8003212 <ssd1306_UpdateScreen+0x92>
        uint16_t base = page * SSD1306_WIDTH;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	b29b      	uxth	r3, r3
 8003190:	01db      	lsls	r3, r3, #7
 8003192:	80bb      	strh	r3, [r7, #4]
        int pageChanged = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]

        // First check if anything on this page changed
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 8003198:	2300      	movs	r3, #0
 800319a:	80fb      	strh	r3, [r7, #6]
 800319c:	e011      	b.n	80031c2 <ssd1306_UpdateScreen+0x42>
            uint16_t index = base + col;
 800319e:	88ba      	ldrh	r2, [r7, #4]
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	4413      	add	r3, r2
 80031a4:	807b      	strh	r3, [r7, #2]
            if (SSD1306_Buffer[index] != SSD1306_LastBuffer[index]) {
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <ssd1306_UpdateScreen+0xa4>)
 80031aa:	5cd2      	ldrb	r2, [r2, r3]
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	491e      	ldr	r1, [pc, #120]	@ (8003228 <ssd1306_UpdateScreen+0xa8>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d002      	beq.n	80031bc <ssd1306_UpdateScreen+0x3c>
                pageChanged = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
                break;
 80031ba:	e005      	b.n	80031c8 <ssd1306_UpdateScreen+0x48>
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	3301      	adds	r3, #1
 80031c0:	80fb      	strh	r3, [r7, #6]
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031c6:	d9ea      	bls.n	800319e <ssd1306_UpdateScreen+0x1e>
            }
        }

        if (!pageChanged)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <ssd1306_UpdateScreen+0x8a>
            continue;

        // Write only changed page
        ssd1306_WriteCommand(0xB0 + page);
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3b50      	subs	r3, #80	@ 0x50
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff1f 	bl	8003018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff ff1c 	bl	8003018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031e0:	2010      	movs	r0, #16
 80031e2:	f7ff ff19 	bl	8003018 <ssd1306_WriteCommand>

        ssd1306_WriteData(&SSD1306_Buffer[base], SSD1306_WIDTH);
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003224 <ssd1306_UpdateScreen+0xa4>)
 80031ea:	4413      	add	r3, r2
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff2a 	bl	8003048 <ssd1306_WriteData>

        // Copy new page to last buffer
        memcpy(&SSD1306_LastBuffer[base], &SSD1306_Buffer[base], SSD1306_WIDTH);
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <ssd1306_UpdateScreen+0xa8>)
 80031f8:	1898      	adds	r0, r3, r2
 80031fa:	88bb      	ldrh	r3, [r7, #4]
 80031fc:	4a09      	ldr	r2, [pc, #36]	@ (8003224 <ssd1306_UpdateScreen+0xa4>)
 80031fe:	4413      	add	r3, r2
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	4619      	mov	r1, r3
 8003204:	f009 fde3 	bl	800cdce <memcpy>
 8003208:	e000      	b.n	800320c <ssd1306_UpdateScreen+0x8c>
            continue;
 800320a:	bf00      	nop
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	3301      	adds	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b07      	cmp	r3, #7
 8003216:	d9b9      	bls.n	800318c <ssd1306_UpdateScreen+0xc>
    }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000d04 	.word	0x20000d04
 8003228:	20001104 	.word	0x20001104

0800322c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	460b      	mov	r3, r1
 8003238:	71bb      	strb	r3, [r7, #6]
 800323a:	4613      	mov	r3, r2
 800323c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db3d      	blt.n	80032c2 <ssd1306_DrawPixel+0x96>
 8003246:	79bb      	ldrb	r3, [r7, #6]
 8003248:	2b3f      	cmp	r3, #63	@ 0x3f
 800324a:	d83a      	bhi.n	80032c2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800324c:	797b      	ldrb	r3, [r7, #5]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d11a      	bne.n	8003288 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	79bb      	ldrb	r3, [r7, #6]
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	4603      	mov	r3, r0
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	4413      	add	r3, r2
 8003260:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	b25a      	sxtb	r2, r3
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	b25b      	sxtb	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b259      	sxtb	r1, r3
 8003278:	79fa      	ldrb	r2, [r7, #7]
 800327a:	4603      	mov	r3, r0
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4413      	add	r3, r2
 8003280:	b2c9      	uxtb	r1, r1
 8003282:	4a13      	ldr	r2, [pc, #76]	@ (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003284:	54d1      	strb	r1, [r2, r3]
 8003286:	e01d      	b.n	80032c4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	79bb      	ldrb	r3, [r7, #6]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	b2d8      	uxtb	r0, r3
 8003290:	4603      	mov	r3, r0
 8003292:	01db      	lsls	r3, r3, #7
 8003294:	4413      	add	r3, r2
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <ssd1306_DrawPixel+0xa4>)
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	b25a      	sxtb	r2, r3
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	4013      	ands	r3, r2
 80032b0:	b259      	sxtb	r1, r3
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	4603      	mov	r3, r0
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	4413      	add	r3, r2
 80032ba:	b2c9      	uxtb	r1, r1
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <ssd1306_DrawPixel+0xa4>)
 80032be:	54d1      	strb	r1, [r2, r3]
 80032c0:	e000      	b.n	80032c4 <ssd1306_DrawPixel+0x98>
        return;
 80032c2:	bf00      	nop
    }
}
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000d04 	.word	0x20000d04

080032d4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4638      	mov	r0, r7
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80032e2:	4623      	mov	r3, r4
 80032e4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b1f      	cmp	r3, #31
 80032ea:	d902      	bls.n	80032f2 <ssd1306_WriteChar+0x1e>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80032f0:	d901      	bls.n	80032f6 <ssd1306_WriteChar+0x22>
        return 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e079      	b.n	80033ea <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <ssd1306_WriteChar+0x34>
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3b20      	subs	r3, #32
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	e000      	b.n	800330a <ssd1306_WriteChar+0x36>
 8003308:	783b      	ldrb	r3, [r7, #0]
 800330a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800330c:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	4413      	add	r3, r2
 8003316:	2b80      	cmp	r3, #128	@ 0x80
 8003318:	dc06      	bgt.n	8003328 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800331a:	4b36      	ldr	r3, [pc, #216]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 800331c:	885b      	ldrh	r3, [r3, #2]
 800331e:	461a      	mov	r2, r3
 8003320:	787b      	ldrb	r3, [r7, #1]
 8003322:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	dd01      	ble.n	800332c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003328:	2300      	movs	r3, #0
 800332a:	e05e      	b.n	80033ea <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e04d      	b.n	80033ce <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	3b20      	subs	r3, #32
 8003338:	7879      	ldrb	r1, [r7, #1]
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4619      	mov	r1, r3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	440b      	add	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	e036      	b.n	80033c0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d013      	beq.n	800338a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4413      	add	r3, r2
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 8003372:	885b      	ldrh	r3, [r3, #2]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4413      	add	r3, r2
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff ff52 	bl	800322c <ssd1306_DrawPixel>
 8003388:	e017      	b.n	80033ba <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800338a:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4413      	add	r3, r2
 8003396:	b2d8      	uxtb	r0, r3
 8003398:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 800339a:	885b      	ldrh	r3, [r3, #2]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	b2d9      	uxtb	r1, r3
 80033a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	f7ff ff39 	bl	800322c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	3301      	adds	r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d3c4      	bcc.n	8003352 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	787b      	ldrb	r3, [r7, #1]
 80033d0:	461a      	mov	r2, r3
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d3ac      	bcc.n	8003332 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <ssd1306_WriteChar+0x120>)
 80033e6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	@ 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000cfc 	.word	0x20000cfc

080033f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4638      	mov	r0, r7
 8003402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003406:	e013      	b.n	8003430 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	7818      	ldrb	r0, [r3, #0]
 800340c:	7e3b      	ldrb	r3, [r7, #24]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	463b      	mov	r3, r7
 8003412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003414:	f7ff ff5e 	bl	80032d4 <ssd1306_WriteChar>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d002      	beq.n	800342a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	e008      	b.n	800343c <ssd1306_WriteString+0x44>
        }
        str++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e7      	bne.n	8003408 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	460a      	mov	r2, r1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	4613      	mov	r3, r2
 8003452:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <ssd1306_SetCursor+0x2c>)
 800345a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800345c:	79bb      	ldrb	r3, [r7, #6]
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <ssd1306_SetCursor+0x2c>)
 8003462:	805a      	strh	r2, [r3, #2]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000cfc 	.word	0x20000cfc

08003474 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	71fb      	strb	r3, [r7, #7]
 8003486:	4603      	mov	r3, r0
 8003488:	71bb      	strb	r3, [r7, #6]
 800348a:	460b      	mov	r3, r1
 800348c:	717b      	strb	r3, [r7, #5]
 800348e:	4613      	mov	r3, r2
 8003490:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003492:	797a      	ldrb	r2, [r7, #5]
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bfb8      	it	lt
 800349c:	425b      	neglt	r3, r3
 800349e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80034a0:	793a      	ldrb	r2, [r7, #4]
 80034a2:	79bb      	ldrb	r3, [r7, #6]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfb8      	it	lt
 80034aa:	425b      	neglt	r3, r3
 80034ac:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80034ae:	79fa      	ldrb	r2, [r7, #7]
 80034b0:	797b      	ldrb	r3, [r7, #5]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d201      	bcs.n	80034ba <ssd1306_Line+0x46>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e001      	b.n	80034be <ssd1306_Line+0x4a>
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80034c0:	79ba      	ldrb	r2, [r7, #6]
 80034c2:	793b      	ldrb	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d201      	bcs.n	80034cc <ssd1306_Line+0x58>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e001      	b.n	80034d0 <ssd1306_Line+0x5c>
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80034da:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80034de:	7939      	ldrb	r1, [r7, #4]
 80034e0:	797b      	ldrb	r3, [r7, #5]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fea2 	bl	800322c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80034e8:	e024      	b.n	8003534 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80034ea:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80034ee:	79b9      	ldrb	r1, [r7, #6]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe9a 	bl	800322c <ssd1306_DrawPixel>
        error2 = error * 2;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	425b      	negs	r3, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	dd08      	ble.n	800351a <ssd1306_Line+0xa6>
            error -= deltaY;
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	4413      	add	r3, r2
 8003518:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	429a      	cmp	r2, r3
 8003520:	da08      	bge.n	8003534 <ssd1306_Line+0xc0>
            error += deltaX;
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	4413      	add	r3, r2
 8003532:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003534:	79fa      	ldrb	r2, [r7, #7]
 8003536:	797b      	ldrb	r3, [r7, #5]
 8003538:	429a      	cmp	r2, r3
 800353a:	d1d6      	bne.n	80034ea <ssd1306_Line+0x76>
 800353c:	79ba      	ldrb	r2, [r7, #6]
 800353e:	793b      	ldrb	r3, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d1d2      	bne.n	80034ea <ssd1306_Line+0x76>
        }
    }
    return;
 8003544:	bf00      	nop
}
 8003546:	3724      	adds	r7, #36	@ 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}

0800354c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b085      	sub	sp, #20
 8003550:	af02      	add	r7, sp, #8
 8003552:	4604      	mov	r4, r0
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4623      	mov	r3, r4
 800355c:	71fb      	strb	r3, [r7, #7]
 800355e:	4603      	mov	r3, r0
 8003560:	71bb      	strb	r3, [r7, #6]
 8003562:	460b      	mov	r3, r1
 8003564:	717b      	strb	r3, [r7, #5]
 8003566:	4613      	mov	r3, r2
 8003568:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800356a:	79bc      	ldrb	r4, [r7, #6]
 800356c:	797a      	ldrb	r2, [r7, #5]
 800356e:	79b9      	ldrb	r1, [r7, #6]
 8003570:	79f8      	ldrb	r0, [r7, #7]
 8003572:	7e3b      	ldrb	r3, [r7, #24]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4623      	mov	r3, r4
 8003578:	f7ff ff7c 	bl	8003474 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800357c:	793c      	ldrb	r4, [r7, #4]
 800357e:	797a      	ldrb	r2, [r7, #5]
 8003580:	79b9      	ldrb	r1, [r7, #6]
 8003582:	7978      	ldrb	r0, [r7, #5]
 8003584:	7e3b      	ldrb	r3, [r7, #24]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4623      	mov	r3, r4
 800358a:	f7ff ff73 	bl	8003474 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800358e:	793c      	ldrb	r4, [r7, #4]
 8003590:	79fa      	ldrb	r2, [r7, #7]
 8003592:	7939      	ldrb	r1, [r7, #4]
 8003594:	7978      	ldrb	r0, [r7, #5]
 8003596:	7e3b      	ldrb	r3, [r7, #24]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4623      	mov	r3, r4
 800359c:	f7ff ff6a 	bl	8003474 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80035a0:	79bc      	ldrb	r4, [r7, #6]
 80035a2:	79fa      	ldrb	r2, [r7, #7]
 80035a4:	7939      	ldrb	r1, [r7, #4]
 80035a6:	79f8      	ldrb	r0, [r7, #7]
 80035a8:	7e3b      	ldrb	r3, [r7, #24]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4623      	mov	r3, r4
 80035ae:	f7ff ff61 	bl	8003474 <ssd1306_Line>

    return;
 80035b2:	bf00      	nop
}
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}

080035ba <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80035c4:	2381      	movs	r3, #129	@ 0x81
 80035c6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fd24 	bl	8003018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fd20 	bl	8003018 <ssd1306_WriteCommand>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80035f0:	23af      	movs	r3, #175	@ 0xaf
 80035f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80035f4:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <ssd1306_SetDisplayOn+0x38>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	715a      	strb	r2, [r3, #5]
 80035fa:	e004      	b.n	8003606 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80035fc:	23ae      	movs	r3, #174	@ 0xae
 80035fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <ssd1306_SetDisplayOn+0x38>)
 8003602:	2200      	movs	r2, #0
 8003604:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fd05 	bl	8003018 <ssd1306_WriteCommand>
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000cfc 	.word	0x20000cfc

0800361c <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	460a      	mov	r2, r1
 8003626:	71fb      	strb	r3, [r7, #7]
 8003628:	4613      	mov	r3, r2
 800362a:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 8003632:	20a1      	movs	r0, #161	@ 0xa1
 8003634:	f7ff fcf0 	bl	8003018 <ssd1306_WriteCommand>
 8003638:	e002      	b.n	8003640 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 800363a:	20a0      	movs	r0, #160	@ 0xa0
 800363c:	f7ff fcec 	bl	8003018 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8003640:	79bb      	ldrb	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 8003646:	20c8      	movs	r0, #200	@ 0xc8
 8003648:	f7ff fce6 	bl	8003018 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 800364c:	e002      	b.n	8003654 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 800364e:	20c0      	movs	r0, #192	@ 0xc0
 8003650:	f7ff fce2 	bl	8003018 <ssd1306_WriteCommand>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <HAL_MspInit+0x4c>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <HAL_MspInit+0x4c>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003670:	6453      	str	r3, [r2, #68]	@ 0x44
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <HAL_MspInit+0x4c>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_MspInit+0x4c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <HAL_MspInit+0x4c>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_MspInit+0x4c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 0314 	add.w	r3, r7, #20
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a17      	ldr	r2, [pc, #92]	@ (8003728 <HAL_ADC_MspInit+0x7c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d127      	bne.n	800371e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	4b16      	ldr	r3, [pc, #88]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	4a15      	ldr	r2, [pc, #84]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036de:	4b13      	ldr	r3, [pc, #76]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	4a0e      	ldr	r2, [pc, #56]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fa:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <HAL_ADC_MspInit+0x80>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003706:	2302      	movs	r3, #2
 8003708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800370a:	2303      	movs	r3, #3
 800370c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	4619      	mov	r1, r3
 8003718:	4805      	ldr	r0, [pc, #20]	@ (8003730 <HAL_ADC_MspInit+0x84>)
 800371a:	f001 fa09 	bl	8004b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800371e:	bf00      	nop
 8003720:	3728      	adds	r7, #40	@ 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40012000 	.word	0x40012000
 800372c:	40023800 	.word	0x40023800
 8003730:	40020400 	.word	0x40020400

08003734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_I2C_MspInit+0x84>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d12b      	bne.n	80037ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	6313      	str	r3, [r2, #48]	@ 0x30
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003772:	23c0      	movs	r3, #192	@ 0xc0
 8003774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003776:	2312      	movs	r3, #18
 8003778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377e:	2303      	movs	r3, #3
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003782:	2304      	movs	r3, #4
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <HAL_I2C_MspInit+0x8c>)
 800378e:	f001 f9cf 	bl	8004b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 800379c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_I2C_MspInit+0x88>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	@ 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40005400 	.word	0x40005400
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020400 	.word	0x40020400

080037c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e4:	d13a      	bne.n	800385c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003802:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003814:	230a      	movs	r3, #10
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4619      	mov	r1, r3
 800381e:	4812      	ldr	r0, [pc, #72]	@ (8003868 <HAL_PCD_MspInit+0xa4>)
 8003820:	f001 f986 	bl	8004b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003824:	4b0f      	ldr	r3, [pc, #60]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	4a0e      	ldr	r2, [pc, #56]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 800382a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800382e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 8003836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003838:	4a0a      	ldr	r2, [pc, #40]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 800383a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800383e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_PCD_MspInit+0xa0>)
 8003842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2043      	movs	r0, #67	@ 0x43
 8003852:	f000 ff28 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003856:	2043      	movs	r0, #67	@ 0x43
 8003858:	f000 ff41 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	@ 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000

0800386c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <NMI_Handler+0x4>

08003874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003878:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <HardFault_Handler+0x6>

0800387e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <MemManage_Handler+0x4>

08003886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <BusFault_Handler+0x4>

0800388e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003892:	bf00      	nop
 8003894:	e7fd      	b.n	8003892 <UsageFault_Handler+0x4>

08003896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c4:	f000 f9de 	bl	8003c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <SysTick_Handler+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a02      	ldr	r2, [pc, #8]	@ (80038d8 <SysTick_Handler+0x18>)
 80038d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20001504 	.word	0x20001504

080038dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f008 fa25 	bl	800bd30 <dcd_int_handler>
	return;
 80038e6:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  return 1;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_kill>:

int _kill(int pid, int sig)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003904:	f009 fa36 	bl	800cd74 <__errno>
 8003908:	4603      	mov	r3, r0
 800390a:	2216      	movs	r2, #22
 800390c:	601a      	str	r2, [r3, #0]
  return -1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_exit>:

void _exit (int status)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003922:	f04f 31ff 	mov.w	r1, #4294967295
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffe7 	bl	80038fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <_exit+0x12>

08003930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e00a      	b.n	8003958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003942:	f3af 8000 	nop.w
 8003946:	4601      	mov	r1, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	60ba      	str	r2, [r7, #8]
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3301      	adds	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	dbf0      	blt.n	8003942 <_read+0x12>
  }

  return len;
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e009      	b.n	8003990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	60ba      	str	r2, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	dbf1      	blt.n	800397c <_write+0x12>
  }
  return len;
 8003998:	687b      	ldr	r3, [r7, #4]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_close>:

int _close(int file)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ca:	605a      	str	r2, [r3, #4]
  return 0;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_isatty>:

int _isatty(int file)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039e2:	2301      	movs	r3, #1
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <_sbrk+0x5c>)
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <_sbrk+0x60>)
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <_sbrk+0x64>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <_sbrk+0x64>)
 8003a2a:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <_sbrk+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2e:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <_sbrk+0x64>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d207      	bcs.n	8003a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a3c:	f009 f99a 	bl	800cd74 <__errno>
 8003a40:	4603      	mov	r3, r0
 8003a42:	220c      	movs	r2, #12
 8003a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	e009      	b.n	8003a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <_sbrk+0x64>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <_sbrk+0x64>)
 8003a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20020000 	.word	0x20020000
 8003a6c:	00000400 	.word	0x00000400
 8003a70:	20001508 	.word	0x20001508
 8003a74:	20001a48 	.word	0x20001a48

08003a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <SystemInit+0x20>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	4a05      	ldr	r2, [pc, #20]	@ (8003a98 <SystemInit+0x20>)
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <tud_descriptor_device_cb+0x10>)
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	0800eeb4 	.word	0x0800eeb4

08003ab0 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8003aba:	4b03      	ldr	r3, [pc, #12]	@ (8003ac8 <tud_hid_descriptor_report_cb+0x18>)
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	0800eec8 	.word	0x0800eec8

08003acc <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8003ad6:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <tud_descriptor_configuration_cb+0x18>)
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	0800ef24 	.word	0x0800ef24

08003ae8 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003afe:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <tud_descriptor_string_cb+0x9c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <tud_descriptor_string_cb+0xa0>)
 8003b08:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e027      	b.n	8003b60 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d901      	bls.n	8003b1a <tud_descriptor_string_cb+0x32>
 8003b16:	2300      	movs	r3, #0
 8003b18:	e02f      	b.n	8003b7a <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	@ (8003b84 <tud_descriptor_string_cb+0x9c>)
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f7fc fb65 	bl	80001f4 <strlen>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b1f      	cmp	r3, #31
 8003b32:	d901      	bls.n	8003b38 <tud_descriptor_string_cb+0x50>
 8003b34:	231f      	movs	r3, #31
 8003b36:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73bb      	strb	r3, [r7, #14]
 8003b3c:	e00c      	b.n	8003b58 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4413      	add	r3, r2
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b88 <tud_descriptor_string_cb+0xa0>)
 8003b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73bb      	strb	r3, [r7, #14]
 8003b58:	7bba      	ldrb	r2, [r7, #14]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3ee      	bcc.n	8003b3e <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	3301      	adds	r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	4b04      	ldr	r3, [pc, #16]	@ (8003b88 <tud_descriptor_string_cb+0xa0>)
 8003b76:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <tud_descriptor_string_cb+0xa0>)
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000020c 	.word	0x2000020c
 8003b88:	2000150c 	.word	0x2000150c

08003b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b90:	f7ff ff72 	bl	8003a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b94:	480c      	ldr	r0, [pc, #48]	@ (8003bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b96:	490d      	ldr	r1, [pc, #52]	@ (8003bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b98:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b9c:	e002      	b.n	8003ba4 <LoopCopyDataInit>

08003b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba2:	3304      	adds	r3, #4

08003ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba8:	d3f9      	bcc.n	8003b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bac:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb0:	e001      	b.n	8003bb6 <LoopFillZerobss>

08003bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb4:	3204      	adds	r2, #4

08003bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb8:	d3fb      	bcc.n	8003bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bba:	f009 f8e1 	bl	800cd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bbe:	f7fe fc9f 	bl	8002500 <main>
  bx  lr    
 8003bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bcc:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003bd0:	0800f1e0 	.word	0x0800f1e0
  ldr r2, =_sbss
 8003bd4:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003bd8:	20001a44 	.word	0x20001a44

08003bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bdc:	e7fe      	b.n	8003bdc <ADC_IRQHandler>
	...

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <HAL_Init+0x40>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c20 <HAL_Init+0x40>)
 8003bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <HAL_Init+0x40>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 fd41 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f000 f808 	bl	8003c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c14:	f7ff fd22 	bl	800365c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_InitTick+0x54>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <HAL_InitTick+0x58>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd59 	bl	80046fa <HAL_SYSTICK_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00e      	b.n	8003c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d80a      	bhi.n	8003c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f000 fd21 	bl	80046a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c64:	4a06      	ldr	r2, [pc, #24]	@ (8003c80 <HAL_InitTick+0x5c>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000208 	.word	0x20000208
 8003c7c:	20000228 	.word	0x20000228
 8003c80:	20000224 	.word	0x20000224

08003c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_IncTick+0x20>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <HAL_IncTick+0x24>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	4a04      	ldr	r2, [pc, #16]	@ (8003ca8 <HAL_IncTick+0x24>)
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000228 	.word	0x20000228
 8003ca8:	2000154c 	.word	0x2000154c

08003cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <HAL_GetTick+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	2000154c 	.word	0x2000154c

08003cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff ffee 	bl	8003cac <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d005      	beq.n	8003cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_Delay+0x44>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cea:	bf00      	nop
 8003cec:	f7ff ffde 	bl	8003cac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d8f7      	bhi.n	8003cec <HAL_Delay+0x28>
  {
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000228 	.word	0x20000228

08003d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e033      	b.n	8003d8a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fcbe 	bl	80036ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d52:	f023 0302 	bic.w	r3, r3, #2
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 faca 	bl	80042f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d7a:	e001      	b.n	8003d80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_Start+0x1a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e097      	b.n	8003ede <HAL_ADC_Start+0x14a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d018      	beq.n	8003df6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dd4:	4b45      	ldr	r3, [pc, #276]	@ (8003eec <HAL_ADC_Start+0x158>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a45      	ldr	r2, [pc, #276]	@ (8003ef0 <HAL_ADC_Start+0x15c>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0c9a      	lsrs	r2, r3, #18
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003de8:	e002      	b.n	8003df0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f9      	bne.n	8003dea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d15f      	bne.n	8003ec4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f023 0206 	bic.w	r2, r3, #6
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e50:	e002      	b.n	8003e58 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e60:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_ADC_Start+0x160>)
 8003e62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d129      	bne.n	8003edc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	e020      	b.n	8003edc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_ADC_Start+0x164>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d11b      	bne.n	8003edc <HAL_ADC_Start+0x148>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	e00b      	b.n	8003edc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f043 0210 	orr.w	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000208 	.word	0x20000208
 8003ef0:	431bde83 	.word	0x431bde83
 8003ef4:	40012300 	.word	0x40012300
 8003ef8:	40012000 	.word	0x40012000

08003efc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Stop+0x16>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e021      	b.n	8003f56 <HAL_ADC_Stop+0x5a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7e:	d113      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e063      	b.n	8004070 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fa8:	f7ff fe80 	bl	8003cac <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fae:	e021      	b.n	8003ff4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_ADC_PollForConversion+0x6c>
 8003fbe:	f7ff fe75 	bl	8003cac <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d212      	bcs.n	8003ff4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d00b      	beq.n	8003ff4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f043 0204 	orr.w	r2, r3, #4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03d      	b.n	8004070 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d1d6      	bne.n	8003fb0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0212 	mvn.w	r2, #18
 800400a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d123      	bne.n	800406e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11f      	bne.n	800406e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	d111      	bne.n	800406e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e113      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x244>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b09      	cmp	r3, #9
 80040be:	d925      	bls.n	800410c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	3b1e      	subs	r3, #30
 80040d6:	2207      	movs	r2, #7
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43da      	mvns	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	400a      	ands	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4403      	add	r3, r0
 80040fe:	3b1e      	subs	r3, #30
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e022      	b.n	8004152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	2207      	movs	r2, #7
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	400a      	ands	r2, r1
 800412e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	4603      	mov	r3, r0
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4403      	add	r3, r0
 8004148:	409a      	lsls	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d824      	bhi.n	80041a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	3b05      	subs	r3, #5
 800416c:	221f      	movs	r2, #31
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	400a      	ands	r2, r1
 800417a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	4618      	mov	r0, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	3b05      	subs	r3, #5
 8004196:	fa00 f203 	lsl.w	r2, r0, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80041a2:	e04c      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d824      	bhi.n	80041f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	3b23      	subs	r3, #35	@ 0x23
 80041be:	221f      	movs	r2, #31
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43da      	mvns	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	400a      	ands	r2, r1
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	3b23      	subs	r3, #35	@ 0x23
 80041e8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80041f4:	e023      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	3b41      	subs	r3, #65	@ 0x41
 8004208:	221f      	movs	r2, #31
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	400a      	ands	r2, r1
 8004216:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	3b41      	subs	r3, #65	@ 0x41
 8004232:	fa00 f203 	lsl.w	r2, r0, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800423e:	4b29      	ldr	r3, [pc, #164]	@ (80042e4 <HAL_ADC_ConfigChannel+0x250>)
 8004240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a28      	ldr	r2, [pc, #160]	@ (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10f      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d10b      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d12b      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_ADC_ConfigChannel+0x258>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x1f4>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b11      	cmp	r3, #17
 8004286:	d122      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a11      	ldr	r2, [pc, #68]	@ (80042ec <HAL_ADC_ConfigChannel+0x258>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d111      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042aa:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <HAL_ADC_ConfigChannel+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a11      	ldr	r2, [pc, #68]	@ (80042f4 <HAL_ADC_ConfigChannel+0x260>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	0c9a      	lsrs	r2, r3, #18
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042c0:	e002      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f9      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	40012000 	.word	0x40012000
 80042ec:	10000012 	.word	0x10000012
 80042f0:	20000208 	.word	0x20000208
 80042f4:	431bde83 	.word	0x431bde83

080042f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004300:	4b79      	ldr	r3, [pc, #484]	@ (80044e8 <ADC_Init+0x1f0>)
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438a:	4a58      	ldr	r2, [pc, #352]	@ (80044ec <ADC_Init+0x1f4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800439e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e00f      	b.n	80043f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0202 	bic.w	r2, r2, #2
 8004404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004432:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	3b01      	subs	r3, #1
 8004450:	035a      	lsls	r2, r3, #13
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e007      	b.n	800446c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800446a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	3b01      	subs	r3, #1
 8004488:	051a      	lsls	r2, r3, #20
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044ae:	025a      	lsls	r2, r3, #9
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	029a      	lsls	r2, r3, #10
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012300 	.word	0x40012300
 80044ec:	0f000001 	.word	0x0f000001

080044f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800451c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004522:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	60d3      	str	r3, [r2, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	@ (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	@ (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	@ 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465c:	d301      	bcc.n	8004662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004662:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <SysTick_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466a:	210f      	movs	r1, #15
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f7ff ff8e 	bl	8004590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <SysTick_Config+0x40>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	4b04      	ldr	r3, [pc, #16]	@ (800468c <SysTick_Config+0x40>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff29 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff3e 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff8e 	bl	80045e4 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5d 	bl	8004590 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa2 	bl	800464c <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004726:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <HAL_FLASH_Program+0xa0>)
 8004728:	7e1b      	ldrb	r3, [r3, #24]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_FLASH_Program+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e03b      	b.n	80047aa <HAL_FLASH_Program+0x96>
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_FLASH_Program+0xa0>)
 8004734:	2201      	movs	r2, #1
 8004736:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004738:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800473c:	f000 f870 	bl	8004820 <FLASH_WaitForLastOperation>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d12b      	bne.n	80047a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004750:	783b      	ldrb	r3, [r7, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	68b8      	ldr	r0, [r7, #8]
 8004756:	f000 f91b 	bl	8004990 <FLASH_Program_Byte>
 800475a:	e016      	b.n	800478a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004762:	883b      	ldrh	r3, [r7, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f000 f8ee 	bl	8004948 <FLASH_Program_HalfWord>
 800476c:	e00d      	b.n	800478a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d105      	bne.n	8004780 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4619      	mov	r1, r3
 8004778:	68b8      	ldr	r0, [r7, #8]
 800477a:	f000 f8c3 	bl	8004904 <FLASH_Program_Word>
 800477e:	e004      	b.n	800478a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004784:	68b8      	ldr	r0, [r7, #8]
 8004786:	f000 f88b 	bl	80048a0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800478a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800478e:	f000 f847 	bl	8004820 <FLASH_WaitForLastOperation>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <HAL_FLASH_Program+0xa4>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	4a07      	ldr	r2, [pc, #28]	@ (80047b8 <HAL_FLASH_Program+0xa4>)
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <HAL_FLASH_Program+0xa0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20001550 	.word	0x20001550
 80047b8:	40023c00 	.word	0x40023c00

080047bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047c6:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_FLASH_Unlock+0x38>)
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da0b      	bge.n	80047e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <HAL_FLASH_Unlock+0x38>)
 80047d0:	4a09      	ldr	r2, [pc, #36]	@ (80047f8 <HAL_FLASH_Unlock+0x3c>)
 80047d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <HAL_FLASH_Unlock+0x38>)
 80047d6:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <HAL_FLASH_Unlock+0x40>)
 80047d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_FLASH_Unlock+0x38>)
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da01      	bge.n	80047e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047e6:	79fb      	ldrb	r3, [r7, #7]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40023c00 	.word	0x40023c00
 80047f8:	45670123 	.word	0x45670123
 80047fc:	cdef89ab 	.word	0xcdef89ab

08004800 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004804:	4b05      	ldr	r3, [pc, #20]	@ (800481c <HAL_FLASH_Lock+0x1c>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a04      	ldr	r2, [pc, #16]	@ (800481c <HAL_FLASH_Lock+0x1c>)
 800480a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800480e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40023c00 	.word	0x40023c00

08004820 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <FLASH_WaitForLastOperation+0x78>)
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004832:	f7ff fa3b 	bl	8003cac <HAL_GetTick>
 8004836:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004838:	e010      	b.n	800485c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d00c      	beq.n	800485c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <FLASH_WaitForLastOperation+0x38>
 8004848:	f7ff fa30 	bl	8003cac <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d201      	bcs.n	800485c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e019      	b.n	8004890 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800485c:	4b0f      	ldr	r3, [pc, #60]	@ (800489c <FLASH_WaitForLastOperation+0x7c>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e8      	bne.n	800483a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004868:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <FLASH_WaitForLastOperation+0x7c>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004874:	4b09      	ldr	r3, [pc, #36]	@ (800489c <FLASH_WaitForLastOperation+0x7c>)
 8004876:	2201      	movs	r2, #1
 8004878:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800487a:	4b08      	ldr	r3, [pc, #32]	@ (800489c <FLASH_WaitForLastOperation+0x7c>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004886:	f000 f8a5 	bl	80049d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
  
}  
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20001550 	.word	0x20001550
 800489c:	40023c00 	.word	0x40023c00

080048a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048ac:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80048b8:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	4a10      	ldr	r2, [pc, #64]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80048c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <FLASH_Program_DoubleWord+0x60>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80048d6:	f3bf 8f6f 	isb	sy
}
 80048da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80048dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	000a      	movs	r2, r1
 80048ea:	2300      	movs	r3, #0
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	3104      	adds	r1, #4
 80048f0:	4613      	mov	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40023c00 	.word	0x40023c00

08004904 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <FLASH_Program_Word+0x40>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <FLASH_Program_Word+0x40>)
 8004914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800491a:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <FLASH_Program_Word+0x40>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <FLASH_Program_Word+0x40>)
 8004920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004924:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004926:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <FLASH_Program_Word+0x40>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4a06      	ldr	r2, [pc, #24]	@ (8004944 <FLASH_Program_Word+0x40>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40023c00 	.word	0x40023c00

08004948 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004954:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 800495a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004960:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800496c:	4b07      	ldr	r3, [pc, #28]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a06      	ldr	r2, [pc, #24]	@ (800498c <FLASH_Program_HalfWord+0x44>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	801a      	strh	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00

08004990 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800499c:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	4a0b      	ldr	r2, [pc, #44]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 80049a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80049a8:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 80049aa:	4a09      	ldr	r2, [pc, #36]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a06      	ldr	r2, [pc, #24]	@ (80049d0 <FLASH_Program_Byte+0x40>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	701a      	strb	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80049d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80049e4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f043 0310 	orr.w	r3, r3, #16
 80049ec:	4a2b      	ldr	r2, [pc, #172]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 80049ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80049f0:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049f2:	2210      	movs	r2, #16
 80049f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80049f6:	4b28      	ldr	r3, [pc, #160]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004a02:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	4a24      	ldr	r2, [pc, #144]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a10:	2220      	movs	r2, #32
 8004a12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004a14:	4b20      	ldr	r3, [pc, #128]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a32:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a3e:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a4a:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a4c:	2280      	movs	r2, #128	@ 0x80
 8004a4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a70:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f043 0320 	orr.w	r3, r3, #32
 8004a84:	4a05      	ldr	r2, [pc, #20]	@ (8004a9c <FLASH_SetErrorCode+0xc8>)
 8004a86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a88:	4b03      	ldr	r3, [pc, #12]	@ (8004a98 <FLASH_SetErrorCode+0xc4>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	60da      	str	r2, [r3, #12]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	20001550 	.word	0x20001550

08004aa0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e010      	b.n	8004ade <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d103      	bne.n	8004aca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e009      	b.n	8004ade <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d103      	bne.n	8004ad8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e002      	b.n	8004ade <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ad8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ade:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004aea:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	490f      	ldr	r1, [pc, #60]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	4a0c      	ldr	r2, [pc, #48]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004afc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <FLASH_Erase_Sector+0x8c>)
 8004b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1e:	6113      	str	r3, [r2, #16]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40023c00 	.word	0x40023c00

08004b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	@ 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e159      	b.n	8004e00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	f040 8148 	bne.w	8004dfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d005      	beq.n	8004b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d130      	bne.n	8004be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 0201 	and.w	r2, r3, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d017      	beq.n	8004c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d123      	bne.n	8004c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	08da      	lsrs	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3208      	adds	r2, #8
 8004c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	220f      	movs	r2, #15
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	08da      	lsrs	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	2203      	movs	r2, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a2 	beq.w	8004dfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	4b57      	ldr	r3, [pc, #348]	@ (8004e18 <HAL_GPIO_Init+0x2e8>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	4a56      	ldr	r2, [pc, #344]	@ (8004e18 <HAL_GPIO_Init+0x2e8>)
 8004cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cc6:	4b54      	ldr	r3, [pc, #336]	@ (8004e18 <HAL_GPIO_Init+0x2e8>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cd2:	4a52      	ldr	r2, [pc, #328]	@ (8004e1c <HAL_GPIO_Init+0x2ec>)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	3302      	adds	r3, #2
 8004cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	220f      	movs	r2, #15
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a49      	ldr	r2, [pc, #292]	@ (8004e20 <HAL_GPIO_Init+0x2f0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d019      	beq.n	8004d32 <HAL_GPIO_Init+0x202>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a48      	ldr	r2, [pc, #288]	@ (8004e24 <HAL_GPIO_Init+0x2f4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0x1fe>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a47      	ldr	r2, [pc, #284]	@ (8004e28 <HAL_GPIO_Init+0x2f8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00d      	beq.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a46      	ldr	r2, [pc, #280]	@ (8004e2c <HAL_GPIO_Init+0x2fc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x1f6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a45      	ldr	r2, [pc, #276]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_GPIO_Init+0x1f2>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e008      	b.n	8004d34 <HAL_GPIO_Init+0x204>
 8004d22:	2307      	movs	r3, #7
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x204>
 8004d26:	2303      	movs	r3, #3
 8004d28:	e004      	b.n	8004d34 <HAL_GPIO_Init+0x204>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e002      	b.n	8004d34 <HAL_GPIO_Init+0x204>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_GPIO_Init+0x204>
 8004d32:	2300      	movs	r3, #0
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f002 0203 	and.w	r2, r2, #3
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	4093      	lsls	r3, r2
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d44:	4935      	ldr	r1, [pc, #212]	@ (8004e1c <HAL_GPIO_Init+0x2ec>)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d52:	4b38      	ldr	r3, [pc, #224]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d76:	4a2f      	ldr	r2, [pc, #188]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004da0:	4a24      	ldr	r2, [pc, #144]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004da6:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dca:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df4:	4a0f      	ldr	r2, [pc, #60]	@ (8004e34 <HAL_GPIO_Init+0x304>)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	f67f aea2 	bls.w	8004b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	@ 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40020000 	.word	0x40020000
 8004e24:	40020400 	.word	0x40020400
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40020c00 	.word	0x40020c00
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40013c00 	.word	0x40013c00

08004e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	807b      	strh	r3, [r7, #2]
 8004e44:	4613      	mov	r3, r2
 8004e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e48:	787b      	ldrb	r3, [r7, #1]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e54:	e003      	b.n	8004e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e56:	887b      	ldrh	r3, [r7, #2]
 8004e58:	041a      	lsls	r2, r3, #16
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	619a      	str	r2, [r3, #24]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e12b      	b.n	80050d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe fc4e 	bl	8003734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f001 f9b8 	bl	8006244 <HAL_RCC_GetPCLK1Freq>
 8004ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a81      	ldr	r2, [pc, #516]	@ (80050e0 <HAL_I2C_Init+0x274>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d807      	bhi.n	8004ef0 <HAL_I2C_Init+0x84>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a80      	ldr	r2, [pc, #512]	@ (80050e4 <HAL_I2C_Init+0x278>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bf94      	ite	ls
 8004ee8:	2301      	movls	r3, #1
 8004eea:	2300      	movhi	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e006      	b.n	8004efe <HAL_I2C_Init+0x92>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80050e8 <HAL_I2C_Init+0x27c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bf94      	ite	ls
 8004ef8:	2301      	movls	r3, #1
 8004efa:	2300      	movhi	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0e7      	b.n	80050d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a78      	ldr	r2, [pc, #480]	@ (80050ec <HAL_I2C_Init+0x280>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0c9b      	lsrs	r3, r3, #18
 8004f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a6a      	ldr	r2, [pc, #424]	@ (80050e0 <HAL_I2C_Init+0x274>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d802      	bhi.n	8004f40 <HAL_I2C_Init+0xd4>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	e009      	b.n	8004f54 <HAL_I2C_Init+0xe8>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	4a69      	ldr	r2, [pc, #420]	@ (80050f0 <HAL_I2C_Init+0x284>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	3301      	adds	r3, #1
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	495c      	ldr	r1, [pc, #368]	@ (80050e0 <HAL_I2C_Init+0x274>)
 8004f70:	428b      	cmp	r3, r1
 8004f72:	d819      	bhi.n	8004fa8 <HAL_I2C_Init+0x13c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1e59      	subs	r1, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f82:	1c59      	adds	r1, r3, #1
 8004f84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f88:	400b      	ands	r3, r1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_I2C_Init+0x138>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1e59      	subs	r1, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa2:	e051      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	e04f      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d111      	bne.n	8004fd4 <HAL_I2C_Init+0x168>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	440b      	add	r3, r1
 8004fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	e012      	b.n	8004ffa <HAL_I2C_Init+0x18e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1e58      	subs	r0, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	0099      	lsls	r1, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Init+0x196>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e022      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10e      	bne.n	8005028 <HAL_I2C_Init+0x1bc>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1e58      	subs	r0, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	440b      	add	r3, r1
 8005018:	fbb0 f3f3 	udiv	r3, r0, r3
 800501c:	3301      	adds	r3, #1
 800501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005026:	e00f      	b.n	8005048 <HAL_I2C_Init+0x1dc>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1e58      	subs	r0, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	0099      	lsls	r1, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	fbb0 f3f3 	udiv	r3, r0, r3
 800503e:	3301      	adds	r3, #1
 8005040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	6809      	ldr	r1, [r1, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005076:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6911      	ldr	r1, [r2, #16]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	4311      	orrs	r1, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	000186a0 	.word	0x000186a0
 80050e4:	001e847f 	.word	0x001e847f
 80050e8:	003d08ff 	.word	0x003d08ff
 80050ec:	431bde83 	.word	0x431bde83
 80050f0:	10624dd3 	.word	0x10624dd3

080050f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	461a      	mov	r2, r3
 8005102:	4603      	mov	r3, r0
 8005104:	817b      	strh	r3, [r7, #10]
 8005106:	460b      	mov	r3, r1
 8005108:	813b      	strh	r3, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800510e:	f7fe fdcd 	bl	8003cac <HAL_GetTick>
 8005112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	f040 80d9 	bne.w	80052d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2319      	movs	r3, #25
 8005128:	2201      	movs	r2, #1
 800512a:	496d      	ldr	r1, [pc, #436]	@ (80052e0 <HAL_I2C_Mem_Write+0x1ec>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f971 	bl	8005414 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
 800513a:	e0cc      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_I2C_Mem_Write+0x56>
 8005146:	2302      	movs	r3, #2
 8005148:	e0c5      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d007      	beq.n	8005170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800517e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2221      	movs	r2, #33	@ 0x21
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2240      	movs	r2, #64	@ 0x40
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a4d      	ldr	r2, [pc, #308]	@ (80052e4 <HAL_I2C_Mem_Write+0x1f0>)
 80051b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051b2:	88f8      	ldrh	r0, [r7, #6]
 80051b4:	893a      	ldrh	r2, [r7, #8]
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	4603      	mov	r3, r0
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f890 	bl	80052e8 <I2C_RequestMemoryWrite>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d052      	beq.n	8005274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e081      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa36 	bl	8005648 <I2C_WaitOnTXEFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00d      	beq.n	80051fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d107      	bne.n	80051fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e06b      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11b      	bne.n	8005274 <HAL_I2C_Mem_Write+0x180>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1aa      	bne.n	80051d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa29 	bl	80056d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	2b04      	cmp	r3, #4
 8005292:	d107      	bne.n	80052a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e016      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	00100002 	.word	0x00100002
 80052e4:	ffff0000 	.word	0xffff0000

080052e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	2200      	movs	r2, #0
 800531a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f878 	bl	8005414 <I2C_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00d      	beq.n	8005346 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005338:	d103      	bne.n	8005342 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e05f      	b.n	8005406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005346:	897b      	ldrh	r3, [r7, #10]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	492d      	ldr	r1, [pc, #180]	@ (8005410 <I2C_RequestMemoryWrite+0x128>)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f8d3 	bl	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04c      	b.n	8005406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	6a39      	ldr	r1, [r7, #32]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f95e 	bl	8005648 <I2C_WaitOnTXEFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2b04      	cmp	r3, #4
 8005398:	d107      	bne.n	80053aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02b      	b.n	8005406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b4:	893b      	ldrh	r3, [r7, #8]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	e021      	b.n	8005404 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d0:	6a39      	ldr	r1, [r7, #32]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f938 	bl	8005648 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d107      	bne.n	80053f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e005      	b.n	8005406 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	00010002 	.word	0x00010002

08005414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005424:	e048      	b.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d044      	beq.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542e:	f7fe fc3d 	bl	8003cac <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d139      	bne.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10d      	bne.n	800546a <I2C_WaitOnFlagUntilTimeout+0x56>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	43da      	mvns	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	e00c      	b.n	8005484 <I2C_WaitOnFlagUntilTimeout+0x70>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	d116      	bne.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e023      	b.n	8005500 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10d      	bne.n	80054de <I2C_WaitOnFlagUntilTimeout+0xca>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	43da      	mvns	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	e00c      	b.n	80054f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	43da      	mvns	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4013      	ands	r3, r2
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d093      	beq.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005516:	e071      	b.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005526:	d123      	bne.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005536:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	f043 0204 	orr.w	r2, r3, #4
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e067      	b.n	8005640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d041      	beq.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005578:	f7fe fb98 	bl	8003cac <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d136      	bne.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10c      	bne.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e00b      	b.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	43da      	mvns	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e021      	b.n	8005640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10c      	bne.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	43da      	mvns	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e00b      	b.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	f47f af6d 	bne.w	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005654:	e034      	b.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f886 	bl	8005768 <I2C_IsAcknowledgeFailed>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e034      	b.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d028      	beq.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fe fb1d 	bl	8003cac <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d11d      	bne.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b80      	cmp	r3, #128	@ 0x80
 8005690:	d016      	beq.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e007      	b.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ca:	2b80      	cmp	r3, #128	@ 0x80
 80056cc:	d1c3      	bne.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e4:	e034      	b.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f83e 	bl	8005768 <I2C_IsAcknowledgeFailed>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e034      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d028      	beq.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fe fad5 	bl	8003cac <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11d      	bne.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d016      	beq.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e007      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b04      	cmp	r3, #4
 800575c:	d1c3      	bne.n	80056e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d11b      	bne.n	80057b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	f043 0204 	orr.w	r2, r3, #4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af02      	add	r7, sp, #8
 80057cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e101      	b.n	80059dc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fd ffe6 	bl	80037c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2203      	movs	r2, #3
 80057fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005806:	d102      	bne.n	800580e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fd8e 	bl	8006334 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7c1a      	ldrb	r2, [r3, #16]
 8005820:	f88d 2000 	strb.w	r2, [sp]
 8005824:	3304      	adds	r3, #4
 8005826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005828:	f000 fd20 	bl	800626c <USB_CoreInit>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0ce      	b.n	80059dc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fd86 	bl	8006356 <USB_SetCurrentMode>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0bf      	b.n	80059dc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	e04a      	b.n	80058f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	3315      	adds	r3, #21
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005876:	7bfa      	ldrb	r2, [r7, #15]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3314      	adds	r3, #20
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800588a:	7bfa      	ldrb	r2, [r7, #15]
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	b298      	uxth	r0, r3
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	332e      	adds	r3, #46	@ 0x2e
 800589e:	4602      	mov	r2, r0
 80058a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3318      	adds	r3, #24
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058b6:	7bfa      	ldrb	r2, [r7, #15]
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	331c      	adds	r3, #28
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3320      	adds	r3, #32
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058de:	7bfa      	ldrb	r2, [r7, #15]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3324      	adds	r3, #36	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	3301      	adds	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	791b      	ldrb	r3, [r3, #4]
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3af      	bcc.n	8005862 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
 8005906:	e044      	b.n	8005992 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005930:	7bfa      	ldrb	r2, [r7, #15]
 8005932:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005934:	7bfa      	ldrb	r2, [r7, #15]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800594a:	7bfa      	ldrb	r2, [r7, #15]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	3301      	adds	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	791b      	ldrb	r3, [r3, #4]
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3b5      	bcc.n	8005908 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7c1a      	ldrb	r2, [r3, #16]
 80059a4:	f88d 2000 	strb.w	r2, [sp]
 80059a8:	3304      	adds	r3, #4
 80059aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059ac:	f000 fd20 	bl	80063f0 <USB_DevInit>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e00c      	b.n	80059dc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fee8 	bl	80067aa <USB_DevDisconnect>

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e267      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d075      	beq.n	8005aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a02:	4b88      	ldr	r3, [pc, #544]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0e:	4b85      	ldr	r3, [pc, #532]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d112      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1a:	4b82      	ldr	r3, [pc, #520]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a26:	d10b      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	4b7e      	ldr	r3, [pc, #504]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05b      	beq.n	8005aec <HAL_RCC_OscConfig+0x108>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d157      	bne.n	8005aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e242      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a48:	d106      	bne.n	8005a58 <HAL_RCC_OscConfig+0x74>
 8005a4a:	4b76      	ldr	r3, [pc, #472]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a75      	ldr	r2, [pc, #468]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e01d      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x98>
 8005a62:	4b70      	ldr	r3, [pc, #448]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6f      	ldr	r2, [pc, #444]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6c      	ldr	r2, [pc, #432]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a7c:	4b69      	ldr	r3, [pc, #420]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a68      	ldr	r2, [pc, #416]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b66      	ldr	r3, [pc, #408]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a65      	ldr	r2, [pc, #404]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fe f906 	bl	8003cac <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa4:	f7fe f902 	bl	8003cac <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	@ 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e207      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xc0>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fe f8f2 	bl	8003cac <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fe f8ee 	bl	8003cac <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	@ 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e1f3      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ade:	4b51      	ldr	r3, [pc, #324]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0xe8>
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d063      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afa:	4b4a      	ldr	r3, [pc, #296]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b47      	ldr	r3, [pc, #284]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d11c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b12:	4b44      	ldr	r3, [pc, #272]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1e:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d001      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e1c7      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b36:	4b3b      	ldr	r3, [pc, #236]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4937      	ldr	r1, [pc, #220]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4a:	e03a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b54:	4b34      	ldr	r3, [pc, #208]	@ (8005c28 <HAL_RCC_OscConfig+0x244>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7fe f8a7 	bl	8003cac <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b62:	f7fe f8a3 	bl	8003cac <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e1a8      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b74:	4b2b      	ldr	r3, [pc, #172]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b80:	4b28      	ldr	r3, [pc, #160]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4925      	ldr	r1, [pc, #148]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]
 8005b94:	e015      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b96:	4b24      	ldr	r3, [pc, #144]	@ (8005c28 <HAL_RCC_OscConfig+0x244>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fe f886 	bl	8003cac <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba4:	f7fe f882 	bl	8003cac <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e187      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d036      	beq.n	8005c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd6:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <HAL_RCC_OscConfig+0x248>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fe f866 	bl	8003cac <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fe f862 	bl	8003cac <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e167      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x200>
 8005c02:	e01b      	b.n	8005c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c04:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <HAL_RCC_OscConfig+0x248>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0a:	f7fe f84f 	bl	8003cac <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	e00e      	b.n	8005c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c12:	f7fe f84b 	bl	8003cac <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d907      	bls.n	8005c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e150      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470000 	.word	0x42470000
 8005c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	4b88      	ldr	r3, [pc, #544]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ea      	bne.n	8005c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8097 	beq.w	8005d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	4b81      	ldr	r3, [pc, #516]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	4a7c      	ldr	r2, [pc, #496]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7a:	4b77      	ldr	r3, [pc, #476]	@ (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d118      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c86:	4b74      	ldr	r3, [pc, #464]	@ (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a73      	ldr	r2, [pc, #460]	@ (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c92:	f7fe f80b 	bl	8003cac <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9a:	f7fe f807 	bl	8003cac <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e10c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	4b6a      	ldr	r3, [pc, #424]	@ (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d106      	bne.n	8005cce <HAL_RCC_OscConfig+0x2ea>
 8005cc0:	4b64      	ldr	r3, [pc, #400]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc4:	4a63      	ldr	r2, [pc, #396]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ccc:	e01c      	b.n	8005d08 <HAL_RCC_OscConfig+0x324>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x30c>
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cda:	4a5e      	ldr	r2, [pc, #376]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	f043 0304 	orr.w	r3, r3, #4
 8005ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0x324>
 8005cf0:	4b58      	ldr	r3, [pc, #352]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	4a57      	ldr	r2, [pc, #348]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfc:	4b55      	ldr	r3, [pc, #340]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a54      	ldr	r2, [pc, #336]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f023 0304 	bic.w	r3, r3, #4
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fd ffcc 	bl	8003cac <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fd ffc8 	bl	8003cac <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0cb      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2e:	4b49      	ldr	r3, [pc, #292]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0ee      	beq.n	8005d18 <HAL_RCC_OscConfig+0x334>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3c:	f7fd ffb6 	bl	8003cac <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fd ffb2 	bl	8003cac <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0b5      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ee      	bne.n	8005d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d105      	bne.n	8005d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6c:	4b39      	ldr	r3, [pc, #228]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	4a38      	ldr	r2, [pc, #224]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80a1 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d82:	4b34      	ldr	r3, [pc, #208]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d05c      	beq.n	8005e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d141      	bne.n	8005e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d96:	4b31      	ldr	r3, [pc, #196]	@ (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fd ff86 	bl	8003cac <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fd ff82 	bl	8003cac <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e087      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	4b27      	ldr	r3, [pc, #156]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	491b      	ldr	r1, [pc, #108]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dec:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df2:	f7fd ff5b 	bl	8003cac <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfa:	f7fd ff57 	bl	8003cac <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e05c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0c:	4b11      	ldr	r3, [pc, #68]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_RCC_OscConfig+0x416>
 8005e18:	e054      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1a:	4b10      	ldr	r3, [pc, #64]	@ (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fd ff44 	bl	8003cac <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fd ff40 	bl	8003cac <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e045      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	4b06      	ldr	r3, [pc, #24]	@ (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x444>
 8005e46:	e03d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e038      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40007000 	.word	0x40007000
 8005e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed0 <HAL_RCC_OscConfig+0x4ec>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d028      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d121      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d11a      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e90:	4013      	ands	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d111      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0cc      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b68      	ldr	r3, [pc, #416]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90c      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b65      	ldr	r3, [pc, #404]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b63      	ldr	r3, [pc, #396]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0b8      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d020      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f28:	4b59      	ldr	r3, [pc, #356]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a58      	ldr	r2, [pc, #352]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f40:	4b53      	ldr	r3, [pc, #332]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a52      	ldr	r2, [pc, #328]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	4b50      	ldr	r3, [pc, #320]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	494d      	ldr	r1, [pc, #308]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d044      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b47      	ldr	r3, [pc, #284]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d119      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f92:	4b3f      	ldr	r3, [pc, #252]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e06f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e067      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb2:	4b37      	ldr	r3, [pc, #220]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0203 	bic.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4934      	ldr	r1, [pc, #208]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fd fe72 	bl	8003cac <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fcc:	f7fd fe6e 	bl	8003cac <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e04f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 020c 	and.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1eb      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b25      	ldr	r3, [pc, #148]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d20c      	bcs.n	800601c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e032      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006028:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4916      	ldr	r1, [pc, #88]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006046:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	490e      	ldr	r1, [pc, #56]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800605a:	f000 f821 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	490a      	ldr	r1, [pc, #40]	@ (8006094 <HAL_RCC_ClockConfig+0x1c0>)
 800606c:	5ccb      	ldrb	r3, [r1, r3]
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	4a09      	ldr	r2, [pc, #36]	@ (8006098 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_RCC_ClockConfig+0x1c8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fdd2 	bl	8003c24 <HAL_InitTick>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023c00 	.word	0x40023c00
 8006090:	40023800 	.word	0x40023800
 8006094:	0800ee9c 	.word	0x0800ee9c
 8006098:	20000208 	.word	0x20000208
 800609c:	20000224 	.word	0x20000224

080060a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a4:	b090      	sub	sp, #64	@ 0x40
 80060a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ac:	2300      	movs	r3, #0
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b0:	2300      	movs	r3, #0
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b8:	4b59      	ldr	r3, [pc, #356]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d00d      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x40>
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	f200 80a1 	bhi.w	800620c <HAL_RCC_GetSysClockFreq+0x16c>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d003      	beq.n	80060da <HAL_RCC_GetSysClockFreq+0x3a>
 80060d2:	e09b      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b53      	ldr	r3, [pc, #332]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x184>)
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80060d8:	e09b      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060da:	4b53      	ldr	r3, [pc, #332]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 80060dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060de:	e098      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e0:	4b4f      	ldr	r3, [pc, #316]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d028      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	099b      	lsrs	r3, r3, #6
 80060fc:	2200      	movs	r2, #0
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	627a      	str	r2, [r7, #36]	@ 0x24
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006108:	2100      	movs	r1, #0
 800610a:	4b47      	ldr	r3, [pc, #284]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 800610c:	fb03 f201 	mul.w	r2, r3, r1
 8006110:	2300      	movs	r3, #0
 8006112:	fb00 f303 	mul.w	r3, r0, r3
 8006116:	4413      	add	r3, r2
 8006118:	4a43      	ldr	r2, [pc, #268]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 800611a:	fba0 1202 	umull	r1, r2, r0, r2
 800611e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006120:	460a      	mov	r2, r1
 8006122:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006126:	4413      	add	r3, r2
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	2200      	movs	r2, #0
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800613a:	f7fa f8b9 	bl	80002b0 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4613      	mov	r3, r2
 8006144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006146:	e053      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006148:	4b35      	ldr	r3, [pc, #212]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	2200      	movs	r2, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800615a:	f04f 0b00 	mov.w	fp, #0
 800615e:	4652      	mov	r2, sl
 8006160:	465b      	mov	r3, fp
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	0159      	lsls	r1, r3, #5
 800616c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006170:	0150      	lsls	r0, r2, #5
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	ebb2 080a 	subs.w	r8, r2, sl
 800617a:	eb63 090b 	sbc.w	r9, r3, fp
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800618a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800618e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006192:	ebb2 0408 	subs.w	r4, r2, r8
 8006196:	eb63 0509 	sbc.w	r5, r3, r9
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	00eb      	lsls	r3, r5, #3
 80061a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a8:	00e2      	lsls	r2, r4, #3
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	eb14 030a 	adds.w	r3, r4, sl
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	eb45 030b 	adc.w	r3, r5, fp
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c6:	4629      	mov	r1, r5
 80061c8:	028b      	lsls	r3, r1, #10
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061d0:	4621      	mov	r1, r4
 80061d2:	028a      	lsls	r2, r1, #10
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061da:	2200      	movs	r2, #0
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	60fa      	str	r2, [r7, #12]
 80061e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061e4:	f7fa f864 	bl	80002b0 <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4613      	mov	r3, r2
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	3301      	adds	r3, #1
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006200:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800620a:	e002      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x184>)
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006214:	4618      	mov	r0, r3
 8006216:	3740      	adds	r7, #64	@ 0x40
 8006218:	46bd      	mov	sp, r7
 800621a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621e:	bf00      	nop
 8006220:	40023800 	.word	0x40023800
 8006224:	00f42400 	.word	0x00f42400
 8006228:	018cba80 	.word	0x018cba80

0800622c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006230:	4b03      	ldr	r3, [pc, #12]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000208 	.word	0x20000208

08006244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006248:	f7ff fff0 	bl	800622c <HAL_RCC_GetHCLKFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	0a9b      	lsrs	r3, r3, #10
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4903      	ldr	r1, [pc, #12]	@ (8006268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800625a:	5ccb      	ldrb	r3, [r1, r3]
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40023800 	.word	0x40023800
 8006268:	0800eeac 	.word	0x0800eeac

0800626c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800626c:	b084      	sub	sp, #16
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	f107 001c 	add.w	r0, r7, #28
 800627a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800627e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006282:	2b01      	cmp	r3, #1
 8006284:	d123      	bne.n	80062ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800629a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 faa0 	bl	8006808 <USB_CoreReset>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
 80062cc:	e01b      	b.n	8006306 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa94 	bl	8006808 <USB_CoreReset>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80062f8:	e005      	b.n	8006306 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006306:	7fbb      	ldrb	r3, [r7, #30]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10b      	bne.n	8006324 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f043 0206 	orr.w	r2, r3, #6
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006330:	b004      	add	sp, #16
 8006332:	4770      	bx	lr

08006334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 0201 	bic.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d115      	bne.n	80063a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006384:	200a      	movs	r0, #10
 8006386:	f7fd fc9d 	bl	8003cc4 <HAL_Delay>
      ms += 10U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	330a      	adds	r3, #10
 800638e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa2b 	bl	80067ec <USB_GetMode>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d01e      	beq.n	80063da <USB_SetCurrentMode+0x84>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2bc7      	cmp	r3, #199	@ 0xc7
 80063a0:	d9f0      	bls.n	8006384 <USB_SetCurrentMode+0x2e>
 80063a2:	e01a      	b.n	80063da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d115      	bne.n	80063d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063b6:	200a      	movs	r0, #10
 80063b8:	f7fd fc84 	bl	8003cc4 <HAL_Delay>
      ms += 10U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	330a      	adds	r3, #10
 80063c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa12 	bl	80067ec <USB_GetMode>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <USB_SetCurrentMode+0x84>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80063d2:	d9f0      	bls.n	80063b6 <USB_SetCurrentMode+0x60>
 80063d4:	e001      	b.n	80063da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e005      	b.n	80063e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80063de:	d101      	bne.n	80063e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f0:	b084      	sub	sp, #16
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	e009      	b.n	8006424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	3340      	adds	r3, #64	@ 0x40
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	2200      	movs	r2, #0
 800641c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3301      	adds	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0e      	cmp	r3, #14
 8006428:	d9f2      	bls.n	8006410 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800642a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800642e:	2b00      	cmp	r3, #0
 8006430:	d11c      	bne.n	800646c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
 800646a:	e00b      	b.n	8006484 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006470:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006490:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10d      	bne.n	80064b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f968 	bl	8006778 <USB_SetDevSpeed>
 80064a8:	e008      	b.n	80064bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f963 	bl	8006778 <USB_SetDevSpeed>
 80064b2:	e003      	b.n	80064bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064b4:	2103      	movs	r1, #3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f95e 	bl	8006778 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064bc:	2110      	movs	r1, #16
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f8fa 	bl	80066b8 <USB_FlushTxFifo>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f924 	bl	800671c <USB_FlushRxFifo>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e4:	461a      	mov	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f0:	461a      	mov	r2, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fc:	461a      	mov	r2, r3
 80064fe:	2300      	movs	r3, #0
 8006500:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e043      	b.n	8006590 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800651a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800651e:	d118      	bne.n	8006552 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006532:	461a      	mov	r2, r3
 8006534:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e013      	b.n	8006564 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	461a      	mov	r2, r3
 800654a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	e008      	b.n	8006564 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	2300      	movs	r3, #0
 8006574:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3301      	adds	r3, #1
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006594:	461a      	mov	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4293      	cmp	r3, r2
 800659a:	d3b5      	bcc.n	8006508 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	e043      	b.n	800662a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065b8:	d118      	bne.n	80065ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065cc:	461a      	mov	r2, r3
 80065ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e013      	b.n	80065fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e2:	461a      	mov	r2, r3
 80065e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	e008      	b.n	80065fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3301      	adds	r3, #1
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800662e:	461a      	mov	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4293      	cmp	r3, r2
 8006634:	d3b5      	bcc.n	80065a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006648:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006656:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006658:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f043 0210 	orr.w	r2, r3, #16
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b10      	ldr	r3, [pc, #64]	@ (80066b4 <USB_DevInit+0x2c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006678:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f043 0208 	orr.w	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800668c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066b0:	b004      	add	sp, #16
 80066b2:	4770      	bx	lr
 80066b4:	803c3800 	.word	0x803c3800

080066b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d2:	d901      	bls.n	80066d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01b      	b.n	8006710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	daf2      	bge.n	80066c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	019b      	lsls	r3, r3, #6
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066fc:	d901      	bls.n	8006702 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e006      	b.n	8006710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b20      	cmp	r3, #32
 800670c:	d0f0      	beq.n	80066f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006734:	d901      	bls.n	800673a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e018      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	daf2      	bge.n	8006728 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2210      	movs	r2, #16
 800674a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d0f0      	beq.n	800674c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067c4:	f023 0303 	bic.w	r3, r3, #3
 80067c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f043 0302 	orr.w	r3, r3, #2
 80067dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f003 0301 	and.w	r3, r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006820:	d901      	bls.n	8006826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e01b      	b.n	800685e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	daf2      	bge.n	8006814 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f043 0201 	orr.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800684a:	d901      	bls.n	8006850 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e006      	b.n	800685e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d0f0      	beq.n	800683e <USB_CoreReset+0x36>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	22e8      	movs	r2, #232	@ 0xe8
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	4a30      	ldr	r2, [pc, #192]	@ (8006944 <_prep_out_transaction+0xd8>)
 8006884:	4413      	add	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	01db      	lsls	r3, r3, #7
 800688c:	4a2e      	ldr	r2, [pc, #184]	@ (8006948 <_prep_out_transaction+0xdc>)
 800688e:	4413      	add	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8006892:	f002 f851 	bl	8008938 <tud_mounted>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <_prep_out_transaction+0x44>
 800689c:	f002 f85e 	bl	800895c <tud_suspended>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f083 0301 	eor.w	r3, r3, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <_prep_out_transaction+0x44>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <_prep_out_transaction+0x46>
 80068b0:	2300      	movs	r3, #0
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80068b8:	f083 0301 	eor.w	r3, r3, #1
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <_prep_out_transaction+0x5e>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <_prep_out_transaction+0x62>
 80068ca:	2300      	movs	r3, #0
 80068cc:	e035      	b.n	800693a <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3310      	adds	r3, #16
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 feab 	bl	800862e <tu_fifo_remaining>
 80068d8:	4603      	mov	r3, r0
 80068da:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80068dc:	897b      	ldrh	r3, [r7, #10]
 80068de:	2b3f      	cmp	r3, #63	@ 0x3f
 80068e0:	d801      	bhi.n	80068e6 <_prep_out_transaction+0x7a>
 80068e2:	2300      	movs	r3, #0
 80068e4:	e029      	b.n	800693a <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	78da      	ldrb	r2, [r3, #3]
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 fb44 	bl	8009f7c <usbd_edpt_claim>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f083 0301 	eor.w	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <_prep_out_transaction+0x98>
 8006900:	2300      	movs	r3, #0
 8006902:	e01a      	b.n	800693a <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3310      	adds	r3, #16
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fe90 	bl	800862e <tu_fifo_remaining>
 800690e:	4603      	mov	r3, r0
 8006910:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8006912:	897b      	ldrh	r3, [r7, #10]
 8006914:	2b3f      	cmp	r3, #63	@ 0x3f
 8006916:	d908      	bls.n	800692a <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	78d9      	ldrb	r1, [r3, #3]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	7df8      	ldrb	r0, [r7, #23]
 8006920:	2340      	movs	r3, #64	@ 0x40
 8006922:	f003 fb7b 	bl	800a01c <usbd_edpt_xfer>
 8006926:	4603      	mov	r3, r0
 8006928:	e007      	b.n	800693a <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	78da      	ldrb	r2, [r3, #3]
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f003 fb4a 	bl	8009fcc <usbd_edpt_release>
    return false;
 8006938:	2300      	movs	r3, #0
  }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20001570 	.word	0x20001570
 8006948:	20001658 	.word	0x20001658

0800694c <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
 8006956:	f001 ffef 	bl	8008938 <tud_mounted>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <tud_cdc_n_connected+0x28>
 8006960:	f001 fffc 	bl	800895c <tud_suspended>
 8006964:	4603      	mov	r3, r0
 8006966:	f083 0301 	eor.w	r3, r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <tud_cdc_n_connected+0x28>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <tud_cdc_n_connected+0x2a>
 8006974:	2300      	movs	r3, #0
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800697c:	2b00      	cmp	r3, #0
 800697e:	d019      	beq.n	80069b4 <tud_cdc_n_connected+0x68>
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	4a10      	ldr	r2, [pc, #64]	@ (80069c4 <tud_cdc_n_connected+0x78>)
 8006984:	21e8      	movs	r1, #232	@ 0xe8
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	3304      	adds	r3, #4
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	2300      	movs	r3, #0
 8006994:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <tud_cdc_n_connected+0x68>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <tud_cdc_n_connected+0x6a>
 80069b4:	2300      	movs	r3, #0
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20001570 	.word	0x20001570

080069c8 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	22e8      	movs	r2, #232	@ 0xe8
 80069d6:	fb02 f303 	mul.w	r3, r2, r3
 80069da:	3310      	adds	r3, #16
 80069dc:	4a04      	ldr	r2, [pc, #16]	@ (80069f0 <tud_cdc_n_available+0x28>)
 80069de:	4413      	add	r3, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fdaf 	bl	8008544 <tu_fifo_count>
 80069e6:	4603      	mov	r3, r0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20001570 	.word	0x20001570

080069f4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	22e8      	movs	r2, #232	@ 0xe8
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8006a48 <tud_cdc_n_read+0x54>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f103 0010 	add.w	r0, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d802      	bhi.n	8006a26 <tud_cdc_n_read+0x32>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	e001      	b.n	8006a2a <tud_cdc_n_read+0x36>
 8006a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	f001 fe5a 	bl	80086e6 <tu_fifo_read_n>
 8006a32:	4603      	mov	r3, r0
 8006a34:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ff17 	bl	800686c <_prep_out_transaction>
  return num_read;
 8006a3e:	693b      	ldr	r3, [r7, #16]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20001570 	.word	0x20001570

08006a4c <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	22e8      	movs	r2, #232	@ 0xe8
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	4a13      	ldr	r2, [pc, #76]	@ (8006ab0 <tud_cdc_n_write+0x64>)
 8006a64:	4413      	add	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f103 001c 	add.w	r0, r3, #28
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d802      	bhi.n	8006a7e <tud_cdc_n_write+0x32>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	e001      	b.n	8006a82 <tud_cdc_n_write+0x36>
 8006a7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a82:	461a      	mov	r2, r3
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	f001 fe95 	bl	80087b4 <tu_fifo_write_n>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	331c      	adds	r3, #28
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fd56 	bl	8008544 <tu_fifo_count>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a9c:	d903      	bls.n	8006aa6 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f807 	bl	8006ab4 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8006aa6:	8a7b      	ldrh	r3, [r7, #18]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20001570 	.word	0x20001570

08006ab4 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	22e8      	movs	r2, #232	@ 0xe8
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	4a39      	ldr	r2, [pc, #228]	@ (8006bac <tud_cdc_n_write_flush+0xf8>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	4a37      	ldr	r2, [pc, #220]	@ (8006bb0 <tud_cdc_n_write_flush+0xfc>)
 8006ad2:	4413      	add	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	f001 ff2f 	bl	8008938 <tud_mounted>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d009      	beq.n	8006af4 <tud_cdc_n_write_flush+0x40>
 8006ae0:	f001 ff3c 	bl	800895c <tud_suspended>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f083 0301 	eor.w	r3, r3, #1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <tud_cdc_n_write_flush+0x40>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <tud_cdc_n_write_flush+0x42>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8006afc:	f083 0301 	eor.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <tud_cdc_n_write_flush+0x56>
 8006b06:	2300      	movs	r3, #0
 8006b08:	e04c      	b.n	8006ba4 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	331c      	adds	r3, #28
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fd18 	bl	8008544 <tu_fifo_count>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e042      	b.n	8006ba4 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	789a      	ldrb	r2, [r3, #2]
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f003 fa26 	bl	8009f7c <usbd_edpt_claim>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <tud_cdc_n_write_flush+0x8c>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e031      	b.n	8006ba4 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f103 001c 	add.w	r0, r3, #28
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3340      	adds	r3, #64	@ 0x40
 8006b4a:	2240      	movs	r2, #64	@ 0x40
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f001 fdca 	bl	80086e6 <tu_fifo_read_n>
 8006b52:	4603      	mov	r3, r0
 8006b54:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006b56:	89bb      	ldrh	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	7899      	ldrb	r1, [r3, #2]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006b66:	89bb      	ldrh	r3, [r7, #12]
 8006b68:	7bf8      	ldrb	r0, [r7, #15]
 8006b6a:	f003 fa57 	bl	800a01c <usbd_edpt_xfer>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f083 0301 	eor.w	r3, r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <tud_cdc_n_write_flush+0xdc>
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <tud_cdc_n_write_flush+0x100>)
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d000      	beq.n	8006b8c <tud_cdc_n_write_flush+0xd8>
 8006b8a:	be00      	bkpt	0x0000
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e009      	b.n	8006ba4 <tud_cdc_n_write_flush+0xf0>
    return count;
 8006b90:	89bb      	ldrh	r3, [r7, #12]
 8006b92:	e007      	b.n	8006ba4 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	789a      	ldrb	r2, [r3, #2]
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f003 fa15 	bl	8009fcc <usbd_edpt_release>
    return 0;
 8006ba2:	2300      	movs	r3, #0
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20001570 	.word	0x20001570
 8006bb0:	20001658 	.word	0x20001658
 8006bb4:	e000edf0 	.word	0xe000edf0

08006bb8 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	22e8      	movs	r2, #232	@ 0xe8
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	3318      	adds	r3, #24
 8006bcc:	4a05      	ldr	r2, [pc, #20]	@ (8006be4 <tud_cdc_n_write_available+0x2c>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fd2b 	bl	800862e <tu_fifo_remaining>
 8006bd8:	4603      	mov	r3, r0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20001570 	.word	0x20001570

08006be8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006bee:	22e8      	movs	r2, #232	@ 0xe8
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4824      	ldr	r0, [pc, #144]	@ (8006c84 <cdcd_init+0x9c>)
 8006bf4:	f006 f813 	bl	800cc1e <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	71fb      	strb	r3, [r7, #7]
 8006bfc:	e03a      	b.n	8006c74 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	22e8      	movs	r2, #232	@ 0xe8
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	4a1f      	ldr	r2, [pc, #124]	@ (8006c84 <cdcd_init+0x9c>)
 8006c08:	4413      	add	r3, r2
 8006c0a:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	22ff      	movs	r2, #255	@ 0xff
 8006c10:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c18:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f103 0010 	add.w	r0, r3, #16
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	2240      	movs	r2, #64	@ 0x40
 8006c40:	f000 ffee 	bl	8007c20 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f103 001c 	add.w	r0, r3, #28
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006c50:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <cdcd_init+0xa0>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bf14      	ite	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	2300      	moveq	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2301      	movs	r3, #1
 8006c68:	2280      	movs	r2, #128	@ 0x80
 8006c6a:	f000 ffd9 	bl	8007c20 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	3301      	adds	r3, #1
 8006c72:	71fb      	strb	r3, [r7, #7]
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0c1      	beq.n	8006bfe <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20001570 	.word	0x20001570
 8006c88:	2000022c 	.word	0x2000022c

08006c8c <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006c90:	2301      	movs	r3, #1
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
 8006caa:	e037      	b.n	8006d1c <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	22e8      	movs	r2, #232	@ 0xe8
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d2c <cdcd_reset+0x90>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006cba:	2205      	movs	r2, #5
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	68b8      	ldr	r0, [r7, #8]
 8006cc0:	f005 ffad 	bl	800cc1e <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <cdcd_reset+0x94>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 fd90 	bl	80087fc <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006cdc:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <cdcd_reset+0x94>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	331c      	adds	r3, #28
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fd84 	bl	80087fc <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f103 021c 	add.w	r2, r3, #28
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <cdcd_reset+0x94>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f001 fd84 	bl	800881e <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c4      	beq.n	8006cac <cdcd_reset+0x10>
  }
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20001570 	.word	0x20001570
 8006d30:	2000022c 	.word	0x2000022c

08006d34 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b09a      	sub	sp, #104	@ 0x68
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	795b      	ldrb	r3, [r3, #5]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d103      	bne.n	8006d54 <cdcd_open+0x20>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	799b      	ldrb	r3, [r3, #6]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d001      	beq.n	8006d58 <cdcd_open+0x24>
 8006d54:	2300      	movs	r3, #0
 8006d56:	e0da      	b.n	8006f0e <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d5e:	e010      	b.n	8006d82 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006d60:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d64:	22e8      	movs	r2, #232	@ 0xe8
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	4a6b      	ldr	r2, [pc, #428]	@ (8006f18 <cdcd_open+0x1e4>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d72:	789b      	ldrb	r3, [r3, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d009      	beq.n	8006d8c <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006d78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d82:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0ea      	beq.n	8006d60 <cdcd_open+0x2c>
 8006d8a:	e000      	b.n	8006d8e <cdcd_open+0x5a>
      break;
 8006d8c:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8006d8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <cdcd_open+0x78>
 8006d96:	4b61      	ldr	r3, [pc, #388]	@ (8006f1c <cdcd_open+0x1e8>)
 8006d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d000      	beq.n	8006da8 <cdcd_open+0x74>
 8006da6:	be00      	bkpt	0x0000
 8006da8:	2300      	movs	r3, #0
 8006daa:	e0b0      	b.n	8006f0e <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	789a      	ldrb	r2, [r3, #2]
 8006db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006db2:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006db4:	2309      	movs	r3, #9
 8006db6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dca:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8006dcc:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006dce:	e013      	b.n	8006df8 <cdcd_open+0xc4>
 8006dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd2:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006dde:	4413      	add	r3, r2
 8006de0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfe:	3301      	adds	r3, #1
 8006e00:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006e02:	2b24      	cmp	r3, #36	@ 0x24
 8006e04:	d104      	bne.n	8006e10 <cdcd_open+0xdc>
 8006e06:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006e0a:	88bb      	ldrh	r3, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d9df      	bls.n	8006dd0 <cdcd_open+0x9c>
 8006e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	3301      	adds	r3, #1
 8006e18:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d12f      	bne.n	8006e7e <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8006e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e20:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e26:	4618      	mov	r0, r3
 8006e28:	f003 f862 	bl	8009ef0 <usbd_edpt_open>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f083 0301 	eor.w	r3, r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <cdcd_open+0x11a>
 8006e38:	4b38      	ldr	r3, [pc, #224]	@ (8006f1c <cdcd_open+0x1e8>)
 8006e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d000      	beq.n	8006e4a <cdcd_open+0x116>
 8006e48:	be00      	bkpt	0x0000
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e05f      	b.n	8006f0e <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e50:	789a      	ldrb	r2, [r3, #2]
 8006e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e54:	705a      	strb	r2, [r3, #1]
 8006e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e58:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006e64:	4413      	add	r3, r2
 8006e66:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e80:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3301      	adds	r3, #1
 8006e86:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d139      	bne.n	8006f00 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8e:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d135      	bne.n	8006f00 <cdcd_open+0x1cc>
 8006e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e96:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eaa:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006eba:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8006ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ebe:	3303      	adds	r3, #3
 8006ec0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ec2:	3202      	adds	r2, #2
 8006ec4:	79f8      	ldrb	r0, [r7, #7]
 8006ec6:	9201      	str	r2, [sp, #4]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2302      	movs	r3, #2
 8006ecc:	2202      	movs	r2, #2
 8006ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ed0:	f002 ffa6 	bl	8009e20 <usbd_open_edpt_pair>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f083 0301 	eor.w	r3, r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <cdcd_open+0x1c2>
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <cdcd_open+0x1e8>)
 8006ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d000      	beq.n	8006ef2 <cdcd_open+0x1be>
 8006ef0:	be00      	bkpt	0x0000
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e00b      	b.n	8006f0e <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8006ef6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006efa:	330e      	adds	r3, #14
 8006efc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8006f00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fcb1 	bl	800686c <_prep_out_transaction>

  return drv_len;
 8006f0a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3760      	adds	r7, #96	@ 0x60
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20001570 	.word	0x20001570
 8006f1c:	e000edf0 	.word	0xe000edf0

08006f20 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	@ 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	603a      	str	r2, [r7, #0]
 8006f2a:	71fb      	strb	r3, [r7, #7]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d001      	beq.n	8006f42 <cdcd_control_xfer_cb+0x22>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e0e6      	b.n	8007110 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f48:	e014      	b.n	8006f74 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8006f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f4e:	22e8      	movs	r2, #232	@ 0xe8
 8006f50:	fb02 f303 	mul.w	r3, r2, r3
 8006f54:	4a70      	ldr	r2, [pc, #448]	@ (8007118 <cdcd_control_xfer_cb+0x1f8>)
 8006f56:	4413      	add	r3, r2
 8006f58:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	889b      	ldrh	r3, [r3, #4]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d009      	beq.n	8006f7e <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f6e:	3301      	adds	r3, #1
 8006f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0e6      	beq.n	8006f4a <cdcd_control_xfer_cb+0x2a>
 8006f7c:	e000      	b.n	8006f80 <cdcd_control_xfer_cb+0x60>
      break;
 8006f7e:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <cdcd_control_xfer_cb+0x6c>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e0c1      	b.n	8007110 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	3b20      	subs	r3, #32
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	f200 80b2 	bhi.w	80070fc <cdcd_control_xfer_cb+0x1dc>
 8006f98:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <cdcd_control_xfer_cb+0x80>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006fed 	.word	0x08006fed
 8006fa8:	08007007 	.word	0x08007007
 8006fac:	080070cb 	.word	0x080070cb
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006fb0:	79bb      	ldrb	r3, [r7, #6]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d108      	bne.n	8006fc8 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	f103 0208 	add.w	r2, r3, #8
 8006fbc:	79f8      	ldrb	r0, [r7, #7]
 8006fbe:	2307      	movs	r3, #7
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	f003 fa13 	bl	800a3ec <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8006fc6:	e09b      	b.n	8007100 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006fc8:	79bb      	ldrb	r3, [r7, #6]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	f040 8098 	bne.w	8007100 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8006fd0:	4b52      	ldr	r3, [pc, #328]	@ (800711c <cdcd_control_xfer_cb+0x1fc>)
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8094 	beq.w	8007100 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	f103 0208 	add.w	r2, r3, #8
 8006fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f3af 8000 	nop.w
      break;
 8006fea:	e089      	b.n	8007100 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006fec:	79bb      	ldrb	r3, [r7, #6]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f040 8088 	bne.w	8007104 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f103 0208 	add.w	r2, r3, #8
 8006ffa:	79f8      	ldrb	r0, [r7, #7]
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	f003 f9f4 	bl	800a3ec <tud_control_xfer>
      }
      break;
 8007004:	e07e      	b.n	8007104 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8007006:	79bb      	ldrb	r3, [r7, #6]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d105      	bne.n	8007018 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f003 f979 	bl	800a308 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8007016:	e077      	b.n	8007108 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007018:	79bb      	ldrb	r3, [r7, #6]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d174      	bne.n	8007108 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	b29b      	uxth	r3, r3
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	bf14      	ite	ne
 800703a:	2301      	movne	r3, #1
 800703c:	2300      	moveq	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	b29b      	uxth	r3, r3
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	fa22 f303 	lsr.w	r3, r2, r3
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf14      	ite	ne
 800705e:	2301      	movne	r3, #1
 8007060:	2300      	moveq	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	b29b      	uxth	r3, r3
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8007072:	4b2b      	ldr	r3, [pc, #172]	@ (8007120 <cdcd_control_xfer_cb+0x200>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d013      	beq.n	80070a8 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f103 021c 	add.w	r2, r3, #28
 8007086:	7ffb      	ldrb	r3, [r7, #31]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf14      	ite	ne
 800708c:	2301      	movne	r3, #1
 800708e:	2300      	moveq	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f083 0301 	eor.w	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	b2db      	uxtb	r3, r3
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f001 fbbc 	bl	800881e <tu_fifo_set_overwritable>
 80070a6:	e005      	b.n	80070b4 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	331c      	adds	r3, #28
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fbb5 	bl	800881e <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 80070b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007124 <cdcd_control_xfer_cb+0x204>)
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d026      	beq.n	8007108 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80070ba:	7fba      	ldrb	r2, [r7, #30]
 80070bc:	7ff9      	ldrb	r1, [r7, #31]
 80070be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fa f948 	bl	8001358 <tud_cdc_line_state_cb>
      break;
 80070c8:	e01e      	b.n	8007108 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80070ca:	79bb      	ldrb	r3, [r7, #6]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d105      	bne.n	80070dc <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f003 f917 	bl	800a308 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80070da:	e017      	b.n	800710c <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80070dc:	79bb      	ldrb	r3, [r7, #6]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d114      	bne.n	800710c <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80070e2:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <cdcd_control_xfer_cb+0x208>)
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d011      	beq.n	800710c <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f3af 8000 	nop.w
      break;
 80070fa:	e007      	b.n	800710c <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80070fc:	2300      	movs	r3, #0
 80070fe:	e007      	b.n	8007110 <cdcd_control_xfer_cb+0x1f0>
      break;
 8007100:	bf00      	nop
 8007102:	e004      	b.n	800710e <cdcd_control_xfer_cb+0x1ee>
      break;
 8007104:	bf00      	nop
 8007106:	e002      	b.n	800710e <cdcd_control_xfer_cb+0x1ee>
      break;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <cdcd_control_xfer_cb+0x1ee>
      break;
 800710c:	bf00      	nop
  }

  return true;
 800710e:	2301      	movs	r3, #1
}
 8007110:	4618      	mov	r0, r3
 8007112:	3728      	adds	r7, #40	@ 0x28
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20001570 	.word	0x20001570
 800711c:	00000000 	.word	0x00000000
 8007120:	2000022c 	.word	0x2000022c
 8007124:	08001359 	.word	0x08001359
 8007128:	00000000 	.word	0x00000000

0800712c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4603      	mov	r3, r0
 8007136:	71fb      	strb	r3, [r7, #7]
 8007138:	460b      	mov	r3, r1
 800713a:	71bb      	strb	r3, [r7, #6]
 800713c:	4613      	mov	r3, r2
 800713e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e013      	b.n	800716e <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8007146:	7ffb      	ldrb	r3, [r7, #31]
 8007148:	22e8      	movs	r2, #232	@ 0xe8
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	4a5f      	ldr	r2, [pc, #380]	@ (80072cc <cdcd_xfer_cb+0x1a0>)
 8007150:	4413      	add	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	78db      	ldrb	r3, [r3, #3]
 8007158:	79ba      	ldrb	r2, [r7, #6]
 800715a:	429a      	cmp	r2, r3
 800715c:	d00a      	beq.n	8007174 <cdcd_xfer_cb+0x48>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	789b      	ldrb	r3, [r3, #2]
 8007162:	79ba      	ldrb	r2, [r7, #6]
 8007164:	429a      	cmp	r2, r3
 8007166:	d005      	beq.n	8007174 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007168:	7ffb      	ldrb	r3, [r7, #31]
 800716a:	3301      	adds	r3, #1
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	7ffb      	ldrb	r3, [r7, #31]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0e8      	beq.n	8007146 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8007174:	7ffb      	ldrb	r3, [r7, #31]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <cdcd_xfer_cb+0x64>
 800717a:	4b55      	ldr	r3, [pc, #340]	@ (80072d0 <cdcd_xfer_cb+0x1a4>)
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d000      	beq.n	800718c <cdcd_xfer_cb+0x60>
 800718a:	be00      	bkpt	0x0000
 800718c:	2300      	movs	r3, #0
 800718e:	e098      	b.n	80072c2 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8007190:	7ffb      	ldrb	r3, [r7, #31]
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	4a4f      	ldr	r2, [pc, #316]	@ (80072d4 <cdcd_xfer_cb+0x1a8>)
 8007196:	4413      	add	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	78db      	ldrb	r3, [r3, #3]
 800719e:	79ba      	ldrb	r2, [r7, #6]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d148      	bne.n	8007236 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	3310      	adds	r3, #16
 80071a8:	6939      	ldr	r1, [r7, #16]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	b292      	uxth	r2, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fb00 	bl	80087b4 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 80071b4:	4b48      	ldr	r3, [pc, #288]	@ (80072d8 <cdcd_xfer_cb+0x1ac>)
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d027      	beq.n	800720a <cdcd_xfer_cb+0xde>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	2bff      	cmp	r3, #255	@ 0xff
 80071c0:	d023      	beq.n	800720a <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e01c      	b.n	8007202 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	795a      	ldrb	r2, [r3, #5]
 80071cc:	6939      	ldr	r1, [r7, #16]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	440b      	add	r3, r1
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d111      	bne.n	80071fc <cdcd_xfer_cb+0xd0>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	3310      	adds	r3, #16
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 f9e3 	bl	80085a8 <tu_fifo_empty>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f083 0301 	eor.w	r3, r3, #1
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	795a      	ldrb	r2, [r3, #5]
 80071f2:	7ffb      	ldrb	r3, [r7, #31]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d3de      	bcc.n	80071c8 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 800720a:	4b34      	ldr	r3, [pc, #208]	@ (80072dc <cdcd_xfer_cb+0x1b0>)
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00e      	beq.n	800722e <cdcd_xfer_cb+0x102>
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	3310      	adds	r3, #16
 8007214:	4618      	mov	r0, r3
 8007216:	f001 f9c7 	bl	80085a8 <tu_fifo_empty>
 800721a:	4603      	mov	r3, r0
 800721c:	f083 0301 	eor.w	r3, r3, #1
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8007226:	7ffb      	ldrb	r3, [r7, #31]
 8007228:	4618      	mov	r0, r3
 800722a:	f7fa f8c1 	bl	80013b0 <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800722e:	7ffb      	ldrb	r3, [r7, #31]
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fb1b 	bl	800686c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	789b      	ldrb	r3, [r3, #2]
 800723a:	79ba      	ldrb	r2, [r7, #6]
 800723c:	429a      	cmp	r2, r3
 800723e:	d13f      	bne.n	80072c0 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8007240:	4b27      	ldr	r3, [pc, #156]	@ (80072e0 <cdcd_xfer_cb+0x1b4>)
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8007246:	7ffb      	ldrb	r3, [r7, #31]
 8007248:	4618      	mov	r0, r3
 800724a:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800724e:	7ffb      	ldrb	r3, [r7, #31]
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fc2f 	bl	8006ab4 <tud_cdc_n_write_flush>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d131      	bne.n	80072c0 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	331c      	adds	r3, #28
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f96f 	bl	8008544 <tu_fifo_count>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d129      	bne.n	80072c0 <cdcd_xfer_cb+0x194>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d026      	beq.n	80072c0 <cdcd_xfer_cb+0x194>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007278:	2b00      	cmp	r3, #0
 800727a:	d121      	bne.n	80072c0 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	789a      	ldrb	r2, [r3, #2]
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f002 fe79 	bl	8009f7c <usbd_edpt_claim>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	7899      	ldrb	r1, [r3, #2]
 8007294:	79f8      	ldrb	r0, [r7, #7]
 8007296:	2300      	movs	r3, #0
 8007298:	2200      	movs	r2, #0
 800729a:	f002 febf 	bl	800a01c <usbd_edpt_xfer>
 800729e:	4603      	mov	r3, r0
 80072a0:	f083 0301 	eor.w	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <cdcd_xfer_cb+0x194>
 80072aa:	4b09      	ldr	r3, [pc, #36]	@ (80072d0 <cdcd_xfer_cb+0x1a4>)
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d000      	beq.n	80072bc <cdcd_xfer_cb+0x190>
 80072ba:	be00      	bkpt	0x0000
 80072bc:	2300      	movs	r3, #0
 80072be:	e000      	b.n	80072c2 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80072c0:	2301      	movs	r3, #1
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20001570 	.word	0x20001570
 80072d0:	e000edf0 	.word	0xe000edf0
 80072d4:	20001658 	.word	0x20001658
 80072d8:	00000000 	.word	0x00000000
 80072dc:	080013b1 	.word	0x080013b1
 80072e0:	00000000 	.word	0x00000000

080072e4 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	460a      	mov	r2, r1
 80072ee:	71fb      	strb	r3, [r7, #7]
 80072f0:	4613      	mov	r3, r2
 80072f2:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80072f4:	2301      	movs	r3, #1
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	603a      	str	r2, [r7, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	4603      	mov	r3, r0
 800730e:	71fb      	strb	r3, [r7, #7]
 8007310:	460b      	mov	r3, r1
 8007312:	71bb      	strb	r3, [r7, #6]
 8007314:	4613      	mov	r3, r2
 8007316:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8007332:	79fa      	ldrb	r2, [r7, #7]
 8007334:	491b      	ldr	r1, [pc, #108]	@ (80073a4 <tud_hid_n_ready+0x80>)
 8007336:	4613      	mov	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	3301      	adds	r3, #1
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	73bb      	strb	r3, [r7, #14]
 8007346:	f001 faf7 	bl	8008938 <tud_mounted>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <tud_hid_n_ready+0x40>
 8007350:	f001 fb04 	bl	800895c <tud_suspended>
 8007354:	4603      	mov	r3, r0
 8007356:	f083 0301 	eor.w	r3, r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <tud_hid_n_ready+0x40>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <tud_hid_n_ready+0x42>
 8007364:	2300      	movs	r3, #0
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 800736c:	2b00      	cmp	r3, #0
 800736e:	d010      	beq.n	8007392 <tud_hid_n_ready+0x6e>
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <tud_hid_n_ready+0x6e>
 8007376:	7bba      	ldrb	r2, [r7, #14]
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f002 fec3 	bl	800a108 <usbd_edpt_busy>
 8007382:	4603      	mov	r3, r0
 8007384:	f083 0301 	eor.w	r3, r3, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <tud_hid_n_ready+0x6e>
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <tud_hid_n_ready+0x70>
 8007392:	2300      	movs	r3, #0
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	b2db      	uxtb	r3, r3
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200016d8 	.word	0x200016d8

080073a8 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08e      	sub	sp, #56	@ 0x38
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	603a      	str	r2, [r7, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	71fb      	strb	r3, [r7, #7]
 80073b6:	460b      	mov	r3, r1
 80073b8:	71bb      	strb	r3, [r7, #6]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <tud_hid_n_report+0x20>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e06d      	b.n	80074a4 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80073ce:	79fa      	ldrb	r2, [r7, #7]
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4a34      	ldr	r2, [pc, #208]	@ (80074ac <tud_hid_n_report+0x104>)
 80073da:	4413      	add	r3, r2
 80073dc:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80073de:	79fa      	ldrb	r2, [r7, #7]
 80073e0:	4613      	mov	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	4a31      	ldr	r2, [pc, #196]	@ (80074b0 <tud_hid_n_report+0x108>)
 80073ea:	4413      	add	r3, r2
 80073ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	785a      	ldrb	r2, [r3, #1]
 80073f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f002 fdbf 	bl	8009f7c <usbd_edpt_claim>
 80073fe:	4603      	mov	r3, r0
 8007400:	f083 0301 	eor.w	r3, r3, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <tud_hid_n_report+0x66>
 800740a:	2300      	movs	r3, #0
 800740c:	e04a      	b.n	80074a4 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 800740e:	79bb      	ldrb	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d021      	beq.n	8007458 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	79ba      	ldrb	r2, [r7, #6]
 8007418:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 800741a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741c:	3310      	adds	r3, #16
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	88bb      	ldrh	r3, [r7, #4]
 8007422:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007424:	220f      	movs	r2, #15
 8007426:	627a      	str	r2, [r7, #36]	@ 0x24
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	623a      	str	r2, [r7, #32]
 800742c:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	429a      	cmp	r2, r3
 8007434:	d202      	bcs.n	800743c <tud_hid_n_report+0x94>
    return -1;
 8007436:	f04f 33ff 	mov.w	r3, #4294967295
 800743a:	e005      	b.n	8007448 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	6a39      	ldr	r1, [r7, #32]
 8007440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007442:	f005 fcc4 	bl	800cdce <memcpy>
  return 0;
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <tud_hid_n_report+0xa8>
 800744c:	2300      	movs	r3, #0
 800744e:	e029      	b.n	80074a4 <tud_hid_n_report+0xfc>
    len++;
 8007450:	88bb      	ldrh	r3, [r7, #4]
 8007452:	3301      	adds	r3, #1
 8007454:	80bb      	strh	r3, [r7, #4]
 8007456:	e01a      	b.n	800748e <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8007458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745a:	f103 0210 	add.w	r2, r3, #16
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	61ba      	str	r2, [r7, #24]
 8007462:	2210      	movs	r2, #16
 8007464:	617a      	str	r2, [r7, #20]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	613a      	str	r2, [r7, #16]
 800746a:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	429a      	cmp	r2, r3
 8007472:	d202      	bcs.n	800747a <tud_hid_n_report+0xd2>
    return -1;
 8007474:	f04f 33ff 	mov.w	r3, #4294967295
 8007478:	e005      	b.n	8007486 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	6939      	ldr	r1, [r7, #16]
 800747e:	69b8      	ldr	r0, [r7, #24]
 8007480:	f005 fca5 	bl	800cdce <memcpy>
  return 0;
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <tud_hid_n_report+0xe6>
 800748a:	2300      	movs	r3, #0
 800748c:	e00a      	b.n	80074a4 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	7859      	ldrb	r1, [r3, #1]
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	f103 0210 	add.w	r2, r3, #16
 8007498:	88bb      	ldrh	r3, [r7, #4]
 800749a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800749e:	f002 fdbd 	bl	800a01c <usbd_edpt_xfer>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3738      	adds	r7, #56	@ 0x38
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	200016d8 	.word	0x200016d8
 80074b0:	200016e4 	.word	0x200016e4

080074b4 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	71fb      	strb	r3, [r7, #7]
 80074c0:	460b      	mov	r3, r1
 80074c2:	71bb      	strb	r3, [r7, #6]
 80074c4:	4613      	mov	r3, r2
 80074c6:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80074c8:	797b      	ldrb	r3, [r7, #5]
 80074ca:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	f107 030a 	add.w	r3, r7, #10
 80074dc:	6811      	ldr	r1, [r2, #0]
 80074de:	6019      	str	r1, [r3, #0]
 80074e0:	8892      	ldrh	r2, [r2, #4]
 80074e2:	809a      	strh	r2, [r3, #4]
 80074e4:	e007      	b.n	80074f6 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	3302      	adds	r3, #2
 80074ec:	2206      	movs	r2, #6
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f005 fb94 	bl	800cc1e <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80074f6:	f107 0208 	add.w	r2, r7, #8
 80074fa:	79b9      	ldrb	r1, [r7, #6]
 80074fc:	79f8      	ldrb	r0, [r7, #7]
 80074fe:	2308      	movs	r3, #8
 8007500:	f7ff ff52 	bl	80073a8 <tud_hid_n_report>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 800750e:	b580      	push	{r7, lr}
 8007510:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8007512:	2000      	movs	r0, #0
 8007514:	f000 f80a 	bl	800752c <hidd_reset>
}
 8007518:	bf00      	nop
 800751a:	bd80      	pop	{r7, pc}

0800751c <hidd_deinit>:

bool hidd_deinit(void) {
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  return true;
 8007520:	2301      	movs	r3, #1
}
 8007522:	4618      	mov	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8007536:	220c      	movs	r2, #12
 8007538:	2100      	movs	r1, #0
 800753a:	4803      	ldr	r0, [pc, #12]	@ (8007548 <hidd_reset+0x1c>)
 800753c:	f005 fb6f 	bl	800cc1e <memset>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200016d8 	.word	0x200016d8

0800754c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b094      	sub	sp, #80	@ 0x50
 8007550:	af02      	add	r7, sp, #8
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
 8007558:	4613      	mov	r3, r2
 800755a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	795b      	ldrb	r3, [r3, #5]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d001      	beq.n	8007568 <hidd_open+0x1c>
 8007564:	2300      	movs	r3, #0
 8007566:	e0ce      	b.n	8007706 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	791b      	ldrb	r3, [r3, #4]
 800756c:	461a      	mov	r2, r3
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007574:	3312      	adds	r3, #18
 8007576:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800757a:	88ba      	ldrh	r2, [r7, #4]
 800757c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007580:	429a      	cmp	r2, r3
 8007582:	d20a      	bcs.n	800759a <hidd_open+0x4e>
 8007584:	4b62      	ldr	r3, [pc, #392]	@ (8007710 <hidd_open+0x1c4>)
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d000      	beq.n	8007596 <hidd_open+0x4a>
 8007594:	be00      	bkpt	0x0000
 8007596:	2300      	movs	r3, #0
 8007598:	e0b5      	b.n	8007706 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a0:	e011      	b.n	80075c6 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 80075a2:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a59      	ldr	r2, [pc, #356]	@ (8007714 <hidd_open+0x1c8>)
 80075b0:	4413      	add	r3, r2
 80075b2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 80075b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80075bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075c0:	3301      	adds	r3, #1
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0e9      	beq.n	80075a2 <hidd_open+0x56>
 80075ce:	e000      	b.n	80075d2 <hidd_open+0x86>
      break;
 80075d0:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80075d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <hidd_open+0xa4>
 80075da:	4b4d      	ldr	r3, [pc, #308]	@ (8007710 <hidd_open+0x1c4>)
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d000      	beq.n	80075ec <hidd_open+0xa0>
 80075ea:	be00      	bkpt	0x0000
 80075ec:	2300      	movs	r3, #0
 80075ee:	e08a      	b.n	8007706 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80075f0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4a46      	ldr	r2, [pc, #280]	@ (8007718 <hidd_open+0x1cc>)
 80075fe:	4413      	add	r3, r2
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007618:	63bb      	str	r3, [r7, #56]	@ 0x38
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	3301      	adds	r3, #1
 8007622:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8007624:	2b21      	cmp	r3, #33	@ 0x21
 8007626:	d00a      	beq.n	800763e <hidd_open+0xf2>
 8007628:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <hidd_open+0x1c4>)
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d000      	beq.n	800763a <hidd_open+0xee>
 8007638:	be00      	bkpt	0x0000
 800763a:	2300      	movs	r3, #0
 800763c:	e063      	b.n	8007706 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 800763e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007640:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007642:	609a      	str	r2, [r3, #8]
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007656:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	7919      	ldrb	r1, [r3, #4]
 800765c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765e:	3302      	adds	r3, #2
 8007660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007662:	3201      	adds	r2, #1
 8007664:	79f8      	ldrb	r0, [r7, #7]
 8007666:	9201      	str	r2, [sp, #4]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2303      	movs	r3, #3
 800766c:	460a      	mov	r2, r1
 800766e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007670:	f002 fbd6 	bl	8009e20 <usbd_open_edpt_pair>
 8007674:	4603      	mov	r3, r0
 8007676:	f083 0301 	eor.w	r3, r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <hidd_open+0x14a>
 8007680:	4b23      	ldr	r3, [pc, #140]	@ (8007710 <hidd_open+0x1c4>)
 8007682:	633b      	str	r3, [r7, #48]	@ 0x30
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d000      	beq.n	8007692 <hidd_open+0x146>
 8007690:	be00      	bkpt	0x0000
 8007692:	2300      	movs	r3, #0
 8007694:	e037      	b.n	8007706 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	799b      	ldrb	r3, [r3, #6]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d103      	bne.n	80076a6 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	79da      	ldrb	r2, [r3, #7]
 80076a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a4:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80076a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a8:	2201      	movs	r2, #1
 80076aa:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	789a      	ldrb	r2, [r3, #2]
 80076b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b2:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80076b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	3307      	adds	r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c2:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 80076c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 80076cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ce:	7899      	ldrb	r1, [r3, #2]
 80076d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d2:	f103 0220 	add.w	r2, r3, #32
 80076d6:	79f8      	ldrb	r0, [r7, #7]
 80076d8:	2310      	movs	r3, #16
 80076da:	f002 fc9f 	bl	800a01c <usbd_edpt_xfer>
 80076de:	4603      	mov	r3, r0
 80076e0:	f083 0301 	eor.w	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <hidd_open+0x1b6>
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <hidd_open+0x1c4>)
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d000      	beq.n	80076fc <hidd_open+0x1b0>
 80076fa:	be00      	bkpt	0x0000
 80076fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007700:	e001      	b.n	8007706 <hidd_open+0x1ba>
  }

  return drv_len;
 8007702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8007706:	4618      	mov	r0, r3
 8007708:	3748      	adds	r7, #72	@ 0x48
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	e000edf0 	.word	0xe000edf0
 8007714:	200016d8 	.word	0x200016d8
 8007718:	200016e4 	.word	0x200016e4

0800771c <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b094      	sub	sp, #80	@ 0x50
 8007720:	af02      	add	r7, sp, #8
 8007722:	4603      	mov	r3, r0
 8007724:	603a      	str	r2, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
 8007728:	460b      	mov	r3, r1
 800772a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b01      	cmp	r3, #1
 8007738:	d001      	beq.n	800773e <hidd_control_xfer_cb+0x22>
 800773a:	2300      	movs	r3, #0
 800773c:	e1d6      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	889b      	ldrh	r3, [r3, #4]
 8007742:	b29b      	uxth	r3, r3
 8007744:	b2db      	uxtb	r3, r3
 8007746:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007748:	2300      	movs	r3, #0
 800774a:	77bb      	strb	r3, [r7, #30]
 800774c:	e00f      	b.n	800776e <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 800774e:	7fba      	ldrb	r2, [r7, #30]
 8007750:	498f      	ldr	r1, [pc, #572]	@ (8007990 <hidd_control_xfer_cb+0x274>)
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	7ffa      	ldrb	r2, [r7, #31]
 8007760:	429a      	cmp	r2, r3
 8007762:	d101      	bne.n	8007768 <hidd_control_xfer_cb+0x4c>
      return i;
 8007764:	7fbb      	ldrb	r3, [r7, #30]
 8007766:	e006      	b.n	8007776 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007768:	7fbb      	ldrb	r3, [r7, #30]
 800776a:	3301      	adds	r3, #1
 800776c:	77bb      	strb	r3, [r7, #30]
 800776e:	7fbb      	ldrb	r3, [r7, #30]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ec      	beq.n	800774e <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007774:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007776:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 800777a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <hidd_control_xfer_cb+0x6a>
 8007782:	2300      	movs	r3, #0
 8007784:	e1b2      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007786:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a7f      	ldr	r2, [pc, #508]	@ (8007990 <hidd_control_xfer_cb+0x274>)
 8007794:	4413      	add	r3, r2
 8007796:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007798:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4a7b      	ldr	r2, [pc, #492]	@ (8007994 <hidd_control_xfer_cb+0x278>)
 80077a6:	4413      	add	r3, r2
 80077a8:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d145      	bne.n	8007844 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 80077b8:	79bb      	ldrb	r3, [r7, #6]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	f040 8195 	bne.w	8007aea <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	885b      	ldrh	r3, [r3, #2]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80077c8:	8bbb      	ldrh	r3, [r7, #28]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b06      	cmp	r3, #6
 80077da:	d11b      	bne.n	8007814 <hidd_control_xfer_cb+0xf8>
 80077dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e0:	2b21      	cmp	r3, #33	@ 0x21
 80077e2:	d117      	bne.n	8007814 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <hidd_control_xfer_cb+0xd4>
 80077ec:	2300      	movs	r3, #0
 80077ee:	e17d      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80077f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	79f8      	ldrb	r0, [r7, #7]
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	f002 fdf5 	bl	800a3ec <tud_control_xfer>
 8007802:	4603      	mov	r3, r0
 8007804:	f083 0301 	eor.w	r3, r3, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 816d 	beq.w	8007aea <hidd_control_xfer_cb+0x3ce>
 8007810:	2300      	movs	r3, #0
 8007812:	e16b      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b06      	cmp	r3, #6
 800781a:	d111      	bne.n	8007840 <hidd_control_xfer_cb+0x124>
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007820:	2b22      	cmp	r3, #34	@ 0x22
 8007822:	d10d      	bne.n	8007840 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8007824:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007828:	4618      	mov	r0, r3
 800782a:	f7fc f941 	bl	8003ab0 <tud_hid_descriptor_report_cb>
 800782e:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	889b      	ldrh	r3, [r3, #4]
 8007834:	79f8      	ldrb	r0, [r7, #7]
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	f002 fdd7 	bl	800a3ec <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800783e:	e154      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8007840:	2300      	movs	r3, #0
 8007842:	e153      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b20      	cmp	r3, #32
 8007850:	f040 813e 	bne.w	8007ad0 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	3b01      	subs	r3, #1
 800785a:	2b0a      	cmp	r3, #10
 800785c:	f200 8136 	bhi.w	8007acc <hidd_control_xfer_cb+0x3b0>
 8007860:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <hidd_control_xfer_cb+0x14c>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	08007895 	.word	0x08007895
 800786c:	08007a6b 	.word	0x08007a6b
 8007870:	08007a81 	.word	0x08007a81
 8007874:	08007acd 	.word	0x08007acd
 8007878:	08007acd 	.word	0x08007acd
 800787c:	08007acd 	.word	0x08007acd
 8007880:	08007acd 	.word	0x08007acd
 8007884:	08007acd 	.word	0x08007acd
 8007888:	0800796b 	.word	0x0800796b
 800788c:	08007a25 	.word	0x08007a25
 8007890:	08007a97 	.word	0x08007a97
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007894:	79bb      	ldrb	r3, [r7, #6]
 8007896:	2b01      	cmp	r3, #1
 8007898:	f040 811c 	bne.w	8007ad4 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	885b      	ldrh	r3, [r3, #2]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	82bb      	strh	r3, [r7, #20]
 80078a4:	8abb      	ldrh	r3, [r7, #20]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80078b8:	8afb      	ldrh	r3, [r7, #22]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	88db      	ldrh	r3, [r3, #6]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	837b      	strh	r3, [r7, #26]
 80078cc:	2310      	movs	r3, #16
 80078ce:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80078d0:	8b7a      	ldrh	r2, [r7, #26]
 80078d2:	8b3b      	ldrh	r3, [r7, #24]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf28      	it	cs
 80078d8:	4613      	movcs	r3, r2
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80078e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d013      	beq.n	8007916 <hidd_control_xfer_cb+0x1fa>
 80078ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d90f      	bls.n	8007916 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 80078f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80078fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007900:	701a      	strb	r2, [r3, #0]
            req_len--;
 8007902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007906:	3b01      	subs	r3, #1
 8007908:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 800790c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007910:	3301      	adds	r3, #1
 8007912:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8007916:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800791a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800791e:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007922:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792a:	f7f9 ff9b 	bl	8001864 <tud_hid_get_report_cb>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007936:	4413      	add	r3, r2
 8007938:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 800793c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <hidd_control_xfer_cb+0x23e>
 8007944:	4b14      	ldr	r3, [pc, #80]	@ (8007998 <hidd_control_xfer_cb+0x27c>)
 8007946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d000      	beq.n	8007956 <hidd_control_xfer_cb+0x23a>
 8007954:	be00      	bkpt	0x0000
 8007956:	2300      	movs	r3, #0
 8007958:	e0c8      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 800795a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007960:	79f8      	ldrb	r0, [r7, #7]
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	f002 fd42 	bl	800a3ec <tud_control_xfer>
        }
        break;
 8007968:	e0b4      	b.n	8007ad4 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 800796a:	79bb      	ldrb	r3, [r7, #6]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d115      	bne.n	800799c <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	88db      	ldrh	r3, [r3, #6]
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b10      	cmp	r3, #16
 8007978:	d901      	bls.n	800797e <hidd_control_xfer_cb+0x262>
 800797a:	2300      	movs	r3, #0
 800797c:	e0b6      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 800797e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	b29b      	uxth	r3, r3
 8007986:	79f8      	ldrb	r0, [r7, #7]
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	f002 fd2f 	bl	800a3ec <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 800798e:	e0a3      	b.n	8007ad8 <hidd_control_xfer_cb+0x3bc>
 8007990:	200016d8 	.word	0x200016d8
 8007994:	200016e4 	.word	0x200016e4
 8007998:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 800799c:	79bb      	ldrb	r3, [r7, #6]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	f040 809a 	bne.w	8007ad8 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	885b      	ldrh	r3, [r3, #2]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80079ac:	89bb      	ldrh	r3, [r7, #12]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	885b      	ldrh	r3, [r3, #2]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80079c0:	89fb      	ldrh	r3, [r7, #14]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	88db      	ldrh	r3, [r3, #6]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	827b      	strh	r3, [r7, #18]
 80079d4:	2310      	movs	r3, #16
 80079d6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80079d8:	8a7a      	ldrh	r2, [r7, #18]
 80079da:	8a3b      	ldrh	r3, [r7, #16]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bf28      	it	cs
 80079e0:	4613      	movcs	r3, r2
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80079e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <hidd_control_xfer_cb+0x2f0>
 80079ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d90b      	bls.n	8007a0c <hidd_control_xfer_cb+0x2f0>
 80079f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d105      	bne.n	8007a0c <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8007a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a02:	3301      	adds	r3, #1
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8007a06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8007a0c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007a10:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007a14:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007a18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1e:	f7f9 ff32 	bl	8001886 <tud_hid_set_report_cb>
        break;
 8007a22:	e059      	b.n	8007ad8 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a24:	79bb      	ldrb	r3, [r7, #6]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d158      	bne.n	8007adc <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a32:	897b      	ldrh	r3, [r7, #10]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3c:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a40:	79da      	ldrb	r2, [r3, #7]
 8007a42:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fc4b 	bl	80072e4 <tud_hid_set_idle_cb>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f083 0301 	eor.w	r3, r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <hidd_control_xfer_cb+0x342>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e046      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f002 fc50 	bl	800a308 <tud_control_status>
        }
        break;
 8007a68:	e038      	b.n	8007adc <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a6a:	79bb      	ldrb	r3, [r7, #6]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d137      	bne.n	8007ae0 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a72:	1dda      	adds	r2, r3, #7
 8007a74:	79f8      	ldrb	r0, [r7, #7]
 8007a76:	2301      	movs	r3, #1
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	f002 fcb7 	bl	800a3ec <tud_control_xfer>
        }
        break;
 8007a7e:	e02f      	b.n	8007ae0 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a80:	79bb      	ldrb	r3, [r7, #6]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d12e      	bne.n	8007ae4 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a88:	1d9a      	adds	r2, r3, #6
 8007a8a:	79f8      	ldrb	r0, [r7, #7]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	f002 fcac 	bl	800a3ec <tud_control_xfer>
        }
        break;
 8007a94:	e026      	b.n	8007ae4 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a96:	79bb      	ldrb	r3, [r7, #6]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d105      	bne.n	8007aa8 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f002 fc31 	bl	800a308 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8007aa6:	e01f      	b.n	8007ae8 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8007aa8:	79bb      	ldrb	r3, [r7, #6]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d11c      	bne.n	8007ae8 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab8:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8007aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abc:	799a      	ldrb	r2, [r3, #6]
 8007abe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7f9 feb1 	bl	800182c <tud_hid_set_protocol_cb>
        break;
 8007aca:	e00d      	b.n	8007ae8 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8007acc:	2300      	movs	r3, #0
 8007ace:	e00d      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e00b      	b.n	8007aec <hidd_control_xfer_cb+0x3d0>
        break;
 8007ad4:	bf00      	nop
 8007ad6:	e008      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
        break;
 8007ad8:	bf00      	nop
 8007ada:	e006      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
        break;
 8007adc:	bf00      	nop
 8007ade:	e004      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e002      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <hidd_control_xfer_cb+0x3ce>
        break;
 8007ae8:	bf00      	nop
  }

  return true;
 8007aea:	2301      	movs	r3, #1
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3748      	adds	r7, #72	@ 0x48
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	@ 0x28
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	71fb      	strb	r3, [r7, #7]
 8007b00:	460b      	mov	r3, r1
 8007b02:	71bb      	strb	r3, [r7, #6]
 8007b04:	4613      	mov	r3, r2
 8007b06:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007b08:	2300      	movs	r3, #0
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	e014      	b.n	8007b38 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8007b0e:	7ffa      	ldrb	r2, [r7, #31]
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a3e      	ldr	r2, [pc, #248]	@ (8007c14 <hidd_xfer_cb+0x120>)
 8007b1a:	4413      	add	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	789b      	ldrb	r3, [r3, #2]
 8007b22:	79ba      	ldrb	r2, [r7, #6]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d00a      	beq.n	8007b3e <hidd_xfer_cb+0x4a>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	79ba      	ldrb	r2, [r7, #6]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d005      	beq.n	8007b3e <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007b32:	7ffb      	ldrb	r3, [r7, #31]
 8007b34:	3301      	adds	r3, #1
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	7ffb      	ldrb	r3, [r7, #31]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0e7      	beq.n	8007b0e <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8007b3e:	7ffb      	ldrb	r3, [r7, #31]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <hidd_xfer_cb+0x66>
 8007b44:	4b34      	ldr	r3, [pc, #208]	@ (8007c18 <hidd_xfer_cb+0x124>)
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d000      	beq.n	8007b56 <hidd_xfer_cb+0x62>
 8007b54:	be00      	bkpt	0x0000
 8007b56:	2300      	movs	r3, #0
 8007b58:	e057      	b.n	8007c0a <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007b5a:	7ffa      	ldrb	r2, [r7, #31]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4413      	add	r3, r2
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4a2d      	ldr	r2, [pc, #180]	@ (8007c1c <hidd_xfer_cb+0x128>)
 8007b66:	4413      	add	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	79ba      	ldrb	r2, [r7, #6]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d116      	bne.n	8007ba2 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007b74:	797b      	ldrb	r3, [r7, #5]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f103 0110 	add.w	r1, r3, #16
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	7ffb      	ldrb	r3, [r7, #31]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f9 fe5e 	bl	8001848 <tud_hid_report_complete_cb>
 8007b8c:	e03c      	b.n	8007c08 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f103 0210 	add.w	r2, r3, #16
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	7ff8      	ldrb	r0, [r7, #31]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	f7ff fbb1 	bl	8007302 <tud_hid_report_failed_cb>
 8007ba0:	e032      	b.n	8007c08 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007ba2:	797b      	ldrb	r3, [r7, #5]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10c      	bne.n	8007bc2 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f103 0220 	add.w	r2, r3, #32
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	7ff8      	ldrb	r0, [r7, #31]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	2202      	movs	r2, #2
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f7f9 fe63 	bl	8001886 <tud_hid_set_report_cb>
 8007bc0:	e008      	b.n	8007bd4 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f103 0220 	add.w	r2, r3, #32
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	7ff8      	ldrb	r0, [r7, #31]
 8007bce:	2102      	movs	r1, #2
 8007bd0:	f7ff fb97 	bl	8007302 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	7899      	ldrb	r1, [r3, #2]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f103 0220 	add.w	r2, r3, #32
 8007bde:	79f8      	ldrb	r0, [r7, #7]
 8007be0:	2310      	movs	r3, #16
 8007be2:	f002 fa1b 	bl	800a01c <usbd_edpt_xfer>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f083 0301 	eor.w	r3, r3, #1
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <hidd_xfer_cb+0x114>
 8007bf2:	4b09      	ldr	r3, [pc, #36]	@ (8007c18 <hidd_xfer_cb+0x124>)
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d000      	beq.n	8007c04 <hidd_xfer_cb+0x110>
 8007c02:	be00      	bkpt	0x0000
 8007c04:	2300      	movs	r3, #0
 8007c06:	e000      	b.n	8007c0a <hidd_xfer_cb+0x116>
  }

  return true;
 8007c08:	2301      	movs	r3, #1
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200016d8 	.word	0x200016d8
 8007c18:	e000edf0 	.word	0xe000edf0
 8007c1c:	200016e4 	.word	0x200016e4

08007c20 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	460b      	mov	r3, r1
 8007c30:	80fb      	strh	r3, [r7, #6]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007c36:	88fb      	ldrh	r3, [r7, #6]
 8007c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c3c:	d901      	bls.n	8007c42 <tu_fifo_config+0x22>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e01b      	b.n	8007c7a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007c4e:	88bb      	ldrh	r3, [r7, #4]
 8007c50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c54:	b299      	uxth	r1, r3
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	88d3      	ldrh	r3, [r2, #6]
 8007c5a:	f361 030e 	bfi	r3, r1, #0, #15
 8007c5e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	79d3      	ldrb	r3, [r2, #7]
 8007c64:	7e39      	ldrb	r1, [r7, #24]
 8007c66:	f361 13c7 	bfi	r3, r1, #7, #1
 8007c6a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007c78:	2301      	movs	r3, #1
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08a      	sub	sp, #40	@ 0x28
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007c9e:	e00b      	b.n	8007cb8 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	61ba      	str	r2, [r7, #24]
 8007ca8:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	601a      	str	r2, [r3, #0]
}
 8007cb0:	bf00      	nop
    ff_buf += 4;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007cb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1ee      	bne.n	8007ca0 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007cd8:	7ffa      	ldrb	r2, [r7, #31]
 8007cda:	f107 0310 	add.w	r3, r7, #16
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f005 f874 	bl	800cdce <memcpy>
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3728      	adds	r7, #40	@ 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b08a      	sub	sp, #40	@ 0x28
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	089b      	lsrs	r3, r3, #2
 8007d04:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007d06:	e008      	b.n	8007d1a <_ff_pull_const_addr+0x2c>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3304      	adds	r3, #4
 8007d18:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007d1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f1      	bne.n	8007d08 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007d2e:	7ffb      	ldrb	r3, [r7, #31]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007d38:	7ffa      	ldrb	r2, [r7, #31]
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f005 f844 	bl	800cdce <memcpy>

    *reg_tx = tmp32;
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	601a      	str	r2, [r3, #0]
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3728      	adds	r7, #40	@ 0x28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	68f9      	ldr	r1, [r7, #12]
 8007d6a:	88c9      	ldrh	r1, [r1, #6]
 8007d6c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007d70:	b289      	uxth	r1, r1
 8007d72:	fb01 f202 	mul.w	r2, r1, r2
 8007d76:	1898      	adds	r0, r3, r2
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	f005 f822 	bl	800cdce <memcpy>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b08e      	sub	sp, #56	@ 0x38
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	460b      	mov	r3, r1
 8007da2:	80fb      	strh	r3, [r7, #6]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	889a      	ldrh	r2, [r3, #4]
 8007dac:	88bb      	ldrh	r3, [r7, #4]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dc8:	fb13 f302 	smulbb	r3, r3, r2
 8007dcc:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ddc:	fb13 f302 	smulbb	r3, r3, r2
 8007de0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	88ba      	ldrh	r2, [r7, #4]
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	88c9      	ldrh	r1, [r1, #6]
 8007dec:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007df0:	b289      	uxth	r1, r1
 8007df2:	fb01 f202 	mul.w	r2, r1, r2
 8007df6:	4413      	add	r3, r2
 8007df8:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007dfa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <_ff_push_n+0x76>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d022      	beq.n	8007e4c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8007e06:	e09e      	b.n	8007f46 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d80d      	bhi.n	8007e2c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8007e10:	88fb      	ldrh	r3, [r7, #6]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	88d2      	ldrh	r2, [r2, #6]
 8007e16:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e26:	f004 ffd2 	bl	800cdce <memcpy>
      break;
 8007e2a:	e08c      	b.n	8007f46 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8007e2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68b9      	ldr	r1, [r7, #8]
 8007e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e34:	f004 ffcb 	bl	800cdce <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e44:	4619      	mov	r1, r3
 8007e46:	f004 ffc2 	bl	800cdce <memcpy>
      break;
 8007e4a:	e07c      	b.n	8007f46 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007e4c:	88fa      	ldrh	r2, [r7, #6]
 8007e4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d80f      	bhi.n	8007e74 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	fb13 f302 	smulbb	r3, r3, r2
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e6e:	f7ff ff0a 	bl	8007c86 <_ff_push_const_addr>
      break;
 8007e72:	e067      	b.n	8007f44 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8007e74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8007e7c:	8c3b      	ldrh	r3, [r7, #32]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e84:	f7ff feff 	bl	8007c86 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007e88:	8c3b      	ldrh	r3, [r7, #32]
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8c:	4413      	add	r3, r2
 8007e8e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0303 	and.w	r3, r3, #3
 8007e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d043      	beq.n	8007f2c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f1c3 0304 	rsb	r3, r3, #4
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007eb6:	837b      	strh	r3, [r7, #26]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007ebc:	8b7a      	ldrh	r2, [r7, #26]
 8007ebe:	8b3b      	ldrh	r3, [r7, #24]
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	bf28      	it	cs
 8007ec4:	4613      	movcs	r3, r2
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8007ede:	f107 0314 	add.w	r3, r7, #20
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8007ee4:	e007      	b.n	8007ef6 <_ff_push_n+0x164>
 8007ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ee8:	1c53      	adds	r3, r2, #1
 8007eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	1c59      	adds	r1, r3, #1
 8007ef0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ef2:	7812      	ldrb	r2, [r2, #0]
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007efa:	1e5a      	subs	r2, r3, #1
 8007efc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f0      	bne.n	8007ee6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8007f0a:	e007      	b.n	8007f1c <_ff_push_n+0x18a>
 8007f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f0e:	1c53      	adds	r3, r2, #1
 8007f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	1c59      	adds	r1, r3, #1
 8007f16:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f18:	7812      	ldrb	r2, [r2, #0]
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f20:	1e5a      	subs	r2, r3, #1
 8007f22:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <_ff_push_n+0x17a>
 8007f2a:	e002      	b.n	8007f32 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8007f32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <_ff_push_n+0x1b2>
 8007f38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f40:	f7ff fea1 	bl	8007c86 <_ff_push_const_addr>
      break;
 8007f44:	bf00      	nop
  }
}
 8007f46:	bf00      	nop
 8007f48:	3738      	adds	r7, #56	@ 0x38
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	88c9      	ldrh	r1, [r1, #6]
 8007f66:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	fb01 f202 	mul.w	r2, r1, r2
 8007f70:	1899      	adds	r1, r3, r2
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68b8      	ldr	r0, [r7, #8]
 8007f80:	f004 ff25 	bl	800cdce <memcpy>
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	@ 0x38
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	80fb      	strh	r3, [r7, #6]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	889a      	ldrh	r2, [r3, #4]
 8007fa6:	88bb      	ldrh	r3, [r7, #4]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	88db      	ldrh	r3, [r3, #6]
 8007fb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fc2:	fb13 f302 	smulbb	r3, r3, r2
 8007fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fd6:	fb13 f302 	smulbb	r3, r3, r2
 8007fda:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	88ba      	ldrh	r2, [r7, #4]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	88c9      	ldrh	r1, [r1, #6]
 8007fe6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007fea:	b289      	uxth	r1, r1
 8007fec:	fb01 f202 	mul.w	r2, r1, r2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007ff4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <_ff_pull_n+0x76>
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d022      	beq.n	8008046 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8008000:	e0a0      	b.n	8008144 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008006:	429a      	cmp	r2, r3
 8008008:	d80d      	bhi.n	8008026 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	88d2      	ldrh	r2, [r2, #6]
 8008010:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008014:	b292      	uxth	r2, r2
 8008016:	fb02 f303 	mul.w	r3, r2, r3
 800801a:	461a      	mov	r2, r3
 800801c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800801e:	68b8      	ldr	r0, [r7, #8]
 8008020:	f004 fed5 	bl	800cdce <memcpy>
    break;
 8008024:	e08e      	b.n	8008144 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8008026:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008028:	461a      	mov	r2, r3
 800802a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800802c:	68b8      	ldr	r0, [r7, #8]
 800802e:	f004 fece 	bl	800cdce <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8008032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	18d0      	adds	r0, r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800803e:	4619      	mov	r1, r3
 8008040:	f004 fec5 	bl	800cdce <memcpy>
    break;
 8008044:	e07e      	b.n	8008144 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800804a:	429a      	cmp	r2, r3
 800804c:	d80f      	bhi.n	800806e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008056:	b29b      	uxth	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	fb13 f302 	smulbb	r3, r3, r2
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008066:	68b8      	ldr	r0, [r7, #8]
 8008068:	f7ff fe41 	bl	8007cee <_ff_pull_const_addr>
    break;
 800806c:	e069      	b.n	8008142 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800806e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008070:	f023 0303 	bic.w	r3, r3, #3
 8008074:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8008076:	8c3b      	ldrh	r3, [r7, #32]
 8008078:	461a      	mov	r2, r3
 800807a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800807c:	68b8      	ldr	r0, [r7, #8]
 800807e:	f7ff fe36 	bl	8007cee <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8008082:	8c3b      	ldrh	r3, [r7, #32]
 8008084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008086:	4413      	add	r3, r2
 8008088:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800808a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8008096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800809a:	2b00      	cmp	r3, #0
 800809c:	d045      	beq.n	800812a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80080a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f1c3 0304 	rsb	r3, r3, #4
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080b0:	837b      	strh	r3, [r7, #26]
 80080b2:	4613      	mov	r3, r2
 80080b4:	833b      	strh	r3, [r7, #24]
 80080b6:	8b7a      	ldrh	r2, [r7, #26]
 80080b8:	8b3b      	ldrh	r3, [r7, #24]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bf28      	it	cs
 80080be:	4613      	movcs	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80080c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80080dc:	e007      	b.n	80080ee <_ff_pull_n+0x162>
 80080de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e0:	1c53      	adds	r3, r2, #1
 80080e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1f0      	bne.n	80080de <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8008102:	e007      	b.n	8008114 <_ff_pull_n+0x188>
 8008104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008106:	1c53      	adds	r3, r2, #1
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	1c59      	adds	r1, r3, #1
 800810e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008118:	1e5a      	subs	r2, r3, #1
 800811a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	e002      	b.n	8008130 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8008130:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <_ff_pull_n+0x1b6>
 8008136:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008138:	461a      	mov	r2, r3
 800813a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800813c:	68b8      	ldr	r0, [r7, #8]
 800813e:	f7ff fdd6 	bl	8007cee <_ff_pull_const_addr>
    break;
 8008142:	bf00      	nop
  }
}
 8008144:	bf00      	nop
 8008146:	3738      	adds	r7, #56	@ 0x38
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	80fb      	strh	r3, [r7, #6]
 8008156:	460b      	mov	r3, r1
 8008158:	80bb      	strh	r3, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800815e:	88ba      	ldrh	r2, [r7, #4]
 8008160:	887b      	ldrh	r3, [r7, #2]
 8008162:	4413      	add	r3, r2
 8008164:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8008166:	88ba      	ldrh	r2, [r7, #4]
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	429a      	cmp	r2, r3
 800816c:	d804      	bhi.n	8008178 <advance_index+0x2c>
 800816e:	89fa      	ldrh	r2, [r7, #14]
 8008170:	88fb      	ldrh	r3, [r7, #6]
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	429a      	cmp	r2, r3
 8008176:	db08      	blt.n	800818a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	b29b      	uxth	r3, r3
 800817e:	425b      	negs	r3, r3
 8008180:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8008182:	89fa      	ldrh	r2, [r7, #14]
 8008184:	89bb      	ldrh	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800818a:	89fb      	ldrh	r3, [r7, #14]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	@ 0x28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4611      	mov	r1, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	460b      	mov	r3, r1
 80081a8:	80fb      	strh	r3, [r7, #6]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	889b      	ldrh	r3, [r3, #4]
 80081b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	843b      	strh	r3, [r7, #32]
 80081b8:	88bb      	ldrh	r3, [r7, #4]
 80081ba:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80081bc:	8c3a      	ldrh	r2, [r7, #32]
 80081be:	8bfb      	ldrh	r3, [r7, #30]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d304      	bcc.n	80081ce <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80081c4:	8c3a      	ldrh	r2, [r7, #32]
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	e008      	b.n	80081e0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80081ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	8c39      	ldrh	r1, [r7, #32]
 80081d6:	8bfb      	ldrh	r3, [r7, #30]
 80081d8:	1acb      	subs	r3, r1, r3
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4413      	add	r3, r2
 80081de:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80081e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80081e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <_tu_fifo_peek+0x54>
 80081e8:	2300      	movs	r3, #0
 80081ea:	e037      	b.n	800825c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	889b      	ldrh	r3, [r3, #4]
 80081f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d91b      	bls.n	800822e <_tu_fifo_peek+0x96>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	889b      	ldrh	r3, [r3, #4]
 8008202:	8afa      	ldrh	r2, [r7, #22]
 8008204:	429a      	cmp	r2, r3
 8008206:	d305      	bcc.n	8008214 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	889b      	ldrh	r3, [r3, #4]
 800820c:	8afa      	ldrh	r2, [r7, #22]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	82bb      	strh	r3, [r7, #20]
 8008212:	e004      	b.n	800821e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	889a      	ldrh	r2, [r3, #4]
 8008218:	8afb      	ldrh	r3, [r7, #22]
 800821a:	4413      	add	r3, r2
 800821c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	8aba      	ldrh	r2, [r7, #20]
 8008222:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8008224:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8008226:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	889b      	ldrh	r3, [r3, #4]
 800822c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	889b      	ldrh	r3, [r3, #4]
 8008232:	827b      	strh	r3, [r7, #18]
 8008234:	88bb      	ldrh	r3, [r7, #4]
 8008236:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008238:	e003      	b.n	8008242 <_tu_fifo_peek+0xaa>
 800823a:	8a3a      	ldrh	r2, [r7, #16]
 800823c:	8a7b      	ldrh	r3, [r7, #18]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	823b      	strh	r3, [r7, #16]
 8008242:	8a7a      	ldrh	r2, [r7, #18]
 8008244:	8a3b      	ldrh	r3, [r7, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	d9f7      	bls.n	800823a <_tu_fifo_peek+0xa2>
  return idx;
 800824a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800824c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800824e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008250:	461a      	mov	r2, r3
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff fe7a 	bl	8007f4e <_ff_pull>

  return true;
 800825a:	2301      	movs	r3, #1
}
 800825c:	4618      	mov	r0, r3
 800825e:	3728      	adds	r7, #40	@ 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	@ 0x30
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4611      	mov	r1, r2
 8008270:	461a      	mov	r2, r3
 8008272:	460b      	mov	r3, r1
 8008274:	80fb      	strh	r3, [r7, #6]
 8008276:	4613      	mov	r3, r2
 8008278:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008280:	88bb      	ldrh	r3, [r7, #4]
 8008282:	843b      	strh	r3, [r7, #32]
 8008284:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008286:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008288:	8c3a      	ldrh	r2, [r7, #32]
 800828a:	8bfb      	ldrh	r3, [r7, #30]
 800828c:	429a      	cmp	r2, r3
 800828e:	d304      	bcc.n	800829a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008290:	8c3a      	ldrh	r2, [r7, #32]
 8008292:	8bfb      	ldrh	r3, [r7, #30]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	b29b      	uxth	r3, r3
 8008298:	e008      	b.n	80082ac <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800829a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	8c39      	ldrh	r1, [r7, #32]
 80082a2:	8bfb      	ldrh	r3, [r7, #30]
 80082a4:	1acb      	subs	r3, r1, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80082ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80082ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <_tu_fifo_peek_n+0x54>
 80082b4:	2300      	movs	r3, #0
 80082b6:	e041      	b.n	800833c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	889b      	ldrh	r3, [r3, #4]
 80082bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80082be:	429a      	cmp	r2, r3
 80082c0:	d91b      	bls.n	80082fa <_tu_fifo_peek_n+0x96>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	88bb      	ldrh	r3, [r7, #4]
 80082c8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	889b      	ldrh	r3, [r3, #4]
 80082ce:	8afa      	ldrh	r2, [r7, #22]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d305      	bcc.n	80082e0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	889b      	ldrh	r3, [r3, #4]
 80082d8:	8afa      	ldrh	r2, [r7, #22]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	82bb      	strh	r3, [r7, #20]
 80082de:	e004      	b.n	80082ea <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	889a      	ldrh	r2, [r3, #4]
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	4413      	add	r3, r2
 80082e8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	8aba      	ldrh	r2, [r7, #20]
 80082ee:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80082f0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80082f2:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	889b      	ldrh	r3, [r3, #4]
 80082f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80082fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d201      	bcs.n	8008306 <_tu_fifo_peek_n+0xa2>
 8008302:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008304:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	889b      	ldrh	r3, [r3, #4]
 800830a:	827b      	strh	r3, [r7, #18]
 800830c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800830e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008310:	e003      	b.n	800831a <_tu_fifo_peek_n+0xb6>
 8008312:	8a3a      	ldrh	r2, [r7, #16]
 8008314:	8a7b      	ldrh	r3, [r7, #18]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	823b      	strh	r3, [r7, #16]
 800831a:	8a7a      	ldrh	r2, [r7, #18]
 800831c:	8a3b      	ldrh	r3, [r7, #16]
 800831e:	429a      	cmp	r2, r3
 8008320:	d9f7      	bls.n	8008312 <_tu_fifo_peek_n+0xae>
  return idx;
 8008322:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008324:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8008326:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	460b      	mov	r3, r1
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fe29 	bl	8007f8c <_ff_pull_n>

  return n;
 800833a:	88fb      	ldrh	r3, [r7, #6]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3728      	adds	r7, #40	@ 0x28
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b092      	sub	sp, #72	@ 0x48
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4611      	mov	r1, r2
 8008350:	461a      	mov	r2, r3
 8008352:	460b      	mov	r3, r1
 8008354:	80fb      	strh	r3, [r7, #6]
 8008356:	4613      	mov	r3, r2
 8008358:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <_tu_fifo_write_n+0x20>
 8008360:	2300      	movs	r3, #0
 8008362:	e0bc      	b.n	80084de <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	891b      	ldrh	r3, [r3, #8]
 8008368:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	895b      	ldrh	r3, [r3, #10]
 800836e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	79db      	ldrb	r3, [r3, #7]
 8008378:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f083 0301 	eor.w	r3, r3, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d036      	beq.n	80083f6 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	889b      	ldrh	r3, [r3, #4]
 800838c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800838e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008390:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008392:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008394:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008396:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008398:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800839a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800839c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800839e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083a0:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80083a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80083a4:	8c3b      	ldrh	r3, [r7, #32]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d304      	bcc.n	80083b4 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80083aa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80083ac:	8c3b      	ldrh	r3, [r7, #32]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	e008      	b.n	80083c6 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80083b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80083bc:	8c3b      	ldrh	r3, [r7, #32]
 80083be:	1acb      	subs	r3, r1, r3
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4413      	add	r3, r2
 80083c4:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80083c6:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80083c8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80083ca:	8bfb      	ldrh	r3, [r7, #30]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d904      	bls.n	80083da <_tu_fifo_write_n+0x96>
 80083d0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80083d2:	8bfb      	ldrh	r3, [r7, #30]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	e000      	b.n	80083dc <_tu_fifo_write_n+0x98>
 80083da:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80083dc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80083e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80083e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80083e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80083e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bf28      	it	cs
 80083ee:	4613      	movcs	r3, r2
 80083f0:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80083f2:	80fb      	strh	r3, [r7, #6]
 80083f4:	e04b      	b.n	800848e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	889b      	ldrh	r3, [r3, #4]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d317      	bcc.n	8008430 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8008400:	797b      	ldrb	r3, [r7, #5]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10e      	bne.n	8008424 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	8892      	ldrh	r2, [r2, #4]
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	88d2      	ldrh	r2, [r2, #6]
 8008412:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008416:	b292      	uxth	r2, r2
 8008418:	fb02 f303 	mul.w	r3, r2, r3
 800841c:	461a      	mov	r2, r3
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	4413      	add	r3, r2
 8008422:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	889b      	ldrh	r3, [r3, #4]
 8008428:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800842a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800842c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800842e:	e02e      	b.n	800848e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	889b      	ldrh	r3, [r3, #4]
 8008434:	83bb      	strh	r3, [r7, #28]
 8008436:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008438:	837b      	strh	r3, [r7, #26]
 800843a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800843c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800843e:	8b7a      	ldrh	r2, [r7, #26]
 8008440:	8b3b      	ldrh	r3, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d304      	bcc.n	8008450 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8008446:	8b7a      	ldrh	r2, [r7, #26]
 8008448:	8b3b      	ldrh	r3, [r7, #24]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	b29b      	uxth	r3, r3
 800844e:	e008      	b.n	8008462 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008450:	8bbb      	ldrh	r3, [r7, #28]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	8b79      	ldrh	r1, [r7, #26]
 8008458:	8b3b      	ldrh	r3, [r7, #24]
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	b29b      	uxth	r3, r3
 800845e:	4413      	add	r3, r2
 8008460:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008462:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008464:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	429a      	cmp	r2, r3
 8008472:	db0c      	blt.n	800848e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8898      	ldrh	r0, [r3, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	889a      	ldrh	r2, [r3, #4]
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	b29a      	uxth	r2, r3
 8008482:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008484:	4619      	mov	r1, r3
 8008486:	f7ff fe61 	bl	800814c <advance_index>
 800848a:	4603      	mov	r3, r0
 800848c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d023      	beq.n	80084dc <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	889b      	ldrh	r3, [r3, #4]
 8008498:	82fb      	strh	r3, [r7, #22]
 800849a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800849c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800849e:	e003      	b.n	80084a8 <_tu_fifo_write_n+0x164>
 80084a0:	8aba      	ldrh	r2, [r7, #20]
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	82bb      	strh	r3, [r7, #20]
 80084a8:	8afa      	ldrh	r2, [r7, #22]
 80084aa:	8abb      	ldrh	r3, [r7, #20]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d9f7      	bls.n	80084a0 <_tu_fifo_write_n+0x15c>
  return idx;
 80084b0:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80084b2:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80084b4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	797b      	ldrb	r3, [r7, #5]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	460b      	mov	r3, r1
 80084be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fc66 	bl	8007d92 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	889b      	ldrh	r3, [r3, #4]
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fe3c 	bl	800814c <advance_index>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80084dc:	88fb      	ldrh	r3, [r7, #6]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3740      	adds	r7, #64	@ 0x40
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af02      	add	r7, sp, #8
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	4611      	mov	r1, r2
 80084f2:	461a      	mov	r2, r3
 80084f4:	460b      	mov	r3, r1
 80084f6:	80fb      	strh	r3, [r7, #6]
 80084f8:	4613      	mov	r3, r2
 80084fa:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	b298      	uxth	r0, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	895b      	ldrh	r3, [r3, #10]
 8008506:	b29b      	uxth	r3, r3
 8008508:	88f9      	ldrh	r1, [r7, #6]
 800850a:	797a      	ldrb	r2, [r7, #5]
 800850c:	9201      	str	r2, [sp, #4]
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4603      	mov	r3, r0
 8008512:	460a      	mov	r2, r1
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff fea4 	bl	8008264 <_tu_fifo_peek_n>
 800851c:	4603      	mov	r3, r0
 800851e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8898      	ldrh	r0, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	895b      	ldrh	r3, [r3, #10]
 8008528:	b29b      	uxth	r3, r3
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	4619      	mov	r1, r3
 800852e:	f7ff fe0d 	bl	800814c <advance_index>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800853a:	88fb      	ldrh	r3, [r7, #6]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8899      	ldrh	r1, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	891b      	ldrh	r3, [r3, #8]
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	895b      	ldrh	r3, [r3, #10]
 800855a:	b29b      	uxth	r3, r3
 800855c:	8279      	strh	r1, [r7, #18]
 800855e:	823a      	strh	r2, [r7, #16]
 8008560:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8008562:	8a3a      	ldrh	r2, [r7, #16]
 8008564:	89fb      	ldrh	r3, [r7, #14]
 8008566:	429a      	cmp	r2, r3
 8008568:	d304      	bcc.n	8008574 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800856a:	8a3a      	ldrh	r2, [r7, #16]
 800856c:	89fb      	ldrh	r3, [r7, #14]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	b29b      	uxth	r3, r3
 8008572:	e008      	b.n	8008586 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008574:	8a7b      	ldrh	r3, [r7, #18]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	8a39      	ldrh	r1, [r7, #16]
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	1acb      	subs	r3, r1, r3
 8008580:	b29b      	uxth	r3, r3
 8008582:	4413      	add	r3, r2
 8008584:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	8892      	ldrh	r2, [r2, #4]
 800858a:	82fb      	strh	r3, [r7, #22]
 800858c:	4613      	mov	r3, r2
 800858e:	82bb      	strh	r3, [r7, #20]
 8008590:	8afa      	ldrh	r2, [r7, #22]
 8008592:	8abb      	ldrh	r3, [r7, #20]
 8008594:	4293      	cmp	r3, r2
 8008596:	bf28      	it	cs
 8008598:	4613      	movcs	r3, r2
 800859a:	b29b      	uxth	r3, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	891b      	ldrh	r3, [r3, #8]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	895b      	ldrh	r3, [r3, #10]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	429a      	cmp	r2, r3
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8899      	ldrh	r1, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	891b      	ldrh	r3, [r3, #8]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	895b      	ldrh	r3, [r3, #10]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	81f9      	strh	r1, [r7, #14]
 80085ec:	81ba      	strh	r2, [r7, #12]
 80085ee:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 80085f0:	89ba      	ldrh	r2, [r7, #12]
 80085f2:	897b      	ldrh	r3, [r7, #10]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d304      	bcc.n	8008602 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80085f8:	89ba      	ldrh	r2, [r7, #12]
 80085fa:	897b      	ldrh	r3, [r7, #10]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	b29b      	uxth	r3, r3
 8008600:	e008      	b.n	8008614 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	89b9      	ldrh	r1, [r7, #12]
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	1acb      	subs	r3, r1, r3
 800860e:	b29b      	uxth	r3, r3
 8008610:	4413      	add	r3, r2
 8008612:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	8892      	ldrh	r2, [r2, #4]
 8008618:	4293      	cmp	r3, r2
 800861a:	bf2c      	ite	cs
 800861c:	2301      	movcs	r3, #1
 800861e:	2300      	movcc	r3, #0
 8008620:	b2db      	uxtb	r3, r3
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 800862e:	b480      	push	{r7}
 8008630:	b087      	sub	sp, #28
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8899      	ldrh	r1, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	891b      	ldrh	r3, [r3, #8]
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	895b      	ldrh	r3, [r3, #10]
 8008644:	b29b      	uxth	r3, r3
 8008646:	82f9      	strh	r1, [r7, #22]
 8008648:	82ba      	strh	r2, [r7, #20]
 800864a:	827b      	strh	r3, [r7, #18]
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	823b      	strh	r3, [r7, #16]
 8008650:	8abb      	ldrh	r3, [r7, #20]
 8008652:	81fb      	strh	r3, [r7, #14]
 8008654:	8a7b      	ldrh	r3, [r7, #18]
 8008656:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8008658:	89fa      	ldrh	r2, [r7, #14]
 800865a:	89bb      	ldrh	r3, [r7, #12]
 800865c:	429a      	cmp	r2, r3
 800865e:	d304      	bcc.n	800866a <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8008660:	89fa      	ldrh	r2, [r7, #14]
 8008662:	89bb      	ldrh	r3, [r7, #12]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	e008      	b.n	800867c <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800866a:	8a3b      	ldrh	r3, [r7, #16]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	89f9      	ldrh	r1, [r7, #14]
 8008672:	89bb      	ldrh	r3, [r7, #12]
 8008674:	1acb      	subs	r3, r1, r3
 8008676:	b29b      	uxth	r3, r3
 8008678:	4413      	add	r3, r2
 800867a:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800867c:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800867e:	8afa      	ldrh	r2, [r7, #22]
 8008680:	897b      	ldrh	r3, [r7, #10]
 8008682:	429a      	cmp	r2, r3
 8008684:	d904      	bls.n	8008690 <tu_fifo_remaining+0x62>
 8008686:	8afa      	ldrh	r2, [r7, #22]
 8008688:	897b      	ldrh	r3, [r7, #10]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	b29b      	uxth	r3, r3
 800868e:	e000      	b.n	8008692 <tu_fifo_remaining+0x64>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	891b      	ldrh	r3, [r3, #8]
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	895b      	ldrh	r3, [r3, #10]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fd6e 	bl	8008198 <_tu_fifo_peek>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8898      	ldrh	r0, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	895b      	ldrh	r3, [r3, #10]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	7bfa      	ldrb	r2, [r7, #15]
 80086cc:	b292      	uxth	r2, r2
 80086ce:	4619      	mov	r1, r3
 80086d0:	f7ff fd3c 	bl	800814c <advance_index>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	4613      	mov	r3, r2
 80086f2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	2300      	movs	r3, #0
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff fef3 	bl	80084e6 <_tu_fifo_read_n>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	4613      	mov	r3, r2
 8008716:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	2301      	movs	r3, #1
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fee1 	bl	80084e6 <_tu_fifo_read_n>
 8008724:	4603      	mov	r3, r0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	891b      	ldrh	r3, [r3, #8]
 800873c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff ff47 	bl	80085d2 <tu_fifo_full>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00c      	beq.n	8008764 <tu_fifo_write+0x36>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	79db      	ldrb	r3, [r3, #7]
 800874e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f083 0301 	eor.w	r3, r3, #1
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <tu_fifo_write+0x36>
  {
    ret = false;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
 8008762:	e022      	b.n	80087aa <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	889b      	ldrh	r3, [r3, #4]
 8008768:	823b      	strh	r3, [r7, #16]
 800876a:	8abb      	ldrh	r3, [r7, #20]
 800876c:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800876e:	e003      	b.n	8008778 <tu_fifo_write+0x4a>
 8008770:	89fa      	ldrh	r2, [r7, #14]
 8008772:	8a3b      	ldrh	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	81fb      	strh	r3, [r7, #14]
 8008778:	8a3a      	ldrh	r2, [r7, #16]
 800877a:	89fb      	ldrh	r3, [r7, #14]
 800877c:	429a      	cmp	r2, r3
 800877e:	d9f7      	bls.n	8008770 <tu_fifo_write+0x42>
  return idx;
 8008780:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008782:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008784:	8a7b      	ldrh	r3, [r7, #18]
 8008786:	461a      	mov	r2, r3
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fae2 	bl	8007d54 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	889b      	ldrh	r3, [r3, #4]
 8008794:	8ab9      	ldrh	r1, [r7, #20]
 8008796:	2201      	movs	r2, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fcd7 	bl	800814c <advance_index>
 800879e:	4603      	mov	r3, r0
 80087a0:	461a      	mov	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	811a      	strh	r2, [r3, #8]

    ret = true;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80087c2:	88fa      	ldrh	r2, [r7, #6]
 80087c4:	2300      	movs	r3, #0
 80087c6:	68b9      	ldr	r1, [r7, #8]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fdbb 	bl	8008344 <_tu_fifo_write_n>
 80087ce:	4603      	mov	r3, r0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	2301      	movs	r3, #1
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff fda9 	bl	8008344 <_tu_fifo_write_n>
 80087f2:	4603      	mov	r3, r0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8008810:	2301      	movs	r3, #1
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	79db      	ldrb	r3, [r3, #7]
 800882e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	429a      	cmp	r2, r3
 8008838:	d101      	bne.n	800883e <tu_fifo_set_overwritable+0x20>
    return true;
 800883a:	2301      	movs	r3, #1
 800883c:	e006      	b.n	800884c <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	79d3      	ldrb	r3, [r2, #7]
 8008842:	78f9      	ldrb	r1, [r7, #3]
 8008844:	f361 13c7 	bfi	r3, r1, #7, #1
 8008848:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800884a:	2301      	movs	r3, #1
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
 8008864:	4613      	mov	r3, r2
 8008866:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return NULL;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
  return NULL;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 80088ce:	b480      	push	{r7}
 80088d0:	af00      	add	r7, sp, #0
}
 80088d2:	bf00      	nop
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	603a      	str	r2, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	460b      	mov	r3, r1
 800890e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8008928:	2301      	movs	r3, #1
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
	...

08008938 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800893c:	4b06      	ldr	r3, [pc, #24]	@ (8008958 <tud_mounted+0x20>)
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	bf14      	ite	ne
 8008946:	2301      	movne	r3, #1
 8008948:	2300      	moveq	r3, #0
 800894a:	b2db      	uxtb	r3, r3
}
 800894c:	4618      	mov	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	20001714 	.word	0x20001714

0800895c <tud_suspended>:

bool tud_suspended(void) {
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <tud_suspended+0x24>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
}
 8008974:	4618      	mov	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	20001714 	.word	0x20001714

08008984 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8008988:	4b0f      	ldr	r3, [pc, #60]	@ (80089c8 <tud_remote_wakeup+0x44>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00d      	beq.n	80089b2 <tud_remote_wakeup+0x2e>
 8008996:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <tud_remote_wakeup+0x44>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f003 0310 	and.w	r3, r3, #16
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <tud_remote_wakeup+0x2e>
 80089a4:	4b08      	ldr	r3, [pc, #32]	@ (80089c8 <tud_remote_wakeup+0x44>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <tud_remote_wakeup+0x32>
 80089b2:	2300      	movs	r3, #0
 80089b4:	e005      	b.n	80089c2 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 80089b6:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <tud_remote_wakeup+0x48>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f002 fba4 	bl	800b108 <dcd_remote_wakeup>
  return true;
 80089c0:	2301      	movs	r3, #1
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20001714 	.word	0x20001714
 80089cc:	2000022d 	.word	0x2000022d

080089d0 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80089d4:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <tud_inited+0x1c>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2bff      	cmp	r3, #255	@ 0xff
 80089da:	bf14      	ite	ne
 80089dc:	2301      	movne	r3, #1
 80089de:	2300      	moveq	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	2000022d 	.word	0x2000022d

080089f0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08c      	sub	sp, #48	@ 0x30
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	6039      	str	r1, [r7, #0]
 80089fa:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80089fc:	f7ff ffe8 	bl	80089d0 <tud_inited>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8008a06:	2301      	movs	r3, #1
 8008a08:	e09e      	b.n	8008b48 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <tud_rhport_init+0x36>
 8008a10:	4b4f      	ldr	r3, [pc, #316]	@ (8008b50 <tud_rhport_init+0x160>)
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d000      	beq.n	8008a22 <tud_rhport_init+0x32>
 8008a20:	be00      	bkpt	0x0000
 8008a22:	2300      	movs	r3, #0
 8008a24:	e090      	b.n	8008b48 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8008a26:	222c      	movs	r2, #44	@ 0x2c
 8008a28:	2100      	movs	r1, #0
 8008a2a:	484a      	ldr	r0, [pc, #296]	@ (8008b54 <tud_rhport_init+0x164>)
 8008a2c:	f004 f8f7 	bl	800cc1e <memset>
  _usbd_queued_setup = 0;
 8008a30:	4b49      	ldr	r3, [pc, #292]	@ (8008b58 <tud_rhport_init+0x168>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	4b49      	ldr	r3, [pc, #292]	@ (8008b5c <tud_rhport_init+0x16c>)
 8008a38:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8008a3a:	bf00      	nop
 8008a3c:	4b48      	ldr	r3, [pc, #288]	@ (8008b60 <tud_rhport_init+0x170>)
 8008a3e:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fed9 	bl	80087fc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8008a4a:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8008a4c:	4a45      	ldr	r2, [pc, #276]	@ (8008b64 <tud_rhport_init+0x174>)
 8008a4e:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8008a50:	4b44      	ldr	r3, [pc, #272]	@ (8008b64 <tud_rhport_init+0x174>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <tud_rhport_init+0x7e>
 8008a58:	4b3d      	ldr	r3, [pc, #244]	@ (8008b50 <tud_rhport_init+0x160>)
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d000      	beq.n	8008a6a <tud_rhport_init+0x7a>
 8008a68:	be00      	bkpt	0x0000
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e06c      	b.n	8008b48 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8008a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b68 <tud_rhport_init+0x178>)
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008a74:	483d      	ldr	r0, [pc, #244]	@ (8008b6c <tud_rhport_init+0x17c>)
 8008a76:	f3af 8000 	nop.w
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b70 <tud_rhport_init+0x180>)
 8008a7e:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a86:	e03a      	b.n	8008afe <tud_rhport_init+0x10e>
 8008a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a8c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008a92:	4b36      	ldr	r3, [pc, #216]	@ (8008b6c <tud_rhport_init+0x17c>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	7bfa      	ldrb	r2, [r7, #15]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d206      	bcs.n	8008aaa <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008a9c:	4b34      	ldr	r3, [pc, #208]	@ (8008b70 <tud_rhport_init+0x180>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	015b      	lsls	r3, r3, #5
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	e00d      	b.n	8008ac6 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008aaa:	4b30      	ldr	r3, [pc, #192]	@ (8008b6c <tud_rhport_init+0x17c>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	db07      	blt.n	8008ac6 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b6c <tud_rhport_init+0x17c>)
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	015b      	lsls	r3, r3, #5
 8008ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b74 <tud_rhport_init+0x184>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	60bb      	str	r3, [r7, #8]
  return driver;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <tud_rhport_init+0xe8>
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <tud_rhport_init+0xfe>
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b50 <tud_rhport_init+0x160>)
 8008ada:	623b      	str	r3, [r7, #32]
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d000      	beq.n	8008aea <tud_rhport_init+0xfa>
 8008ae8:	be00      	bkpt	0x0000
 8008aea:	2300      	movs	r3, #0
 8008aec:	e02c      	b.n	8008b48 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008af8:	3301      	adds	r3, #1
 8008afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008afe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b6c <tud_rhport_init+0x17c>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	dabd      	bge.n	8008a88 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008b78 <tud_rhport_init+0x188>)
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f002 f9cc 	bl	800aeb4 <dcd_init>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f083 0301 	eor.w	r3, r3, #1
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <tud_rhport_init+0x14e>
 8008b28:	4b09      	ldr	r3, [pc, #36]	@ (8008b50 <tud_rhport_init+0x160>)
 8008b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d000      	beq.n	8008b3a <tud_rhport_init+0x14a>
 8008b38:	be00      	bkpt	0x0000
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e004      	b.n	8008b48 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f002 fa55 	bl	800aff0 <dcd_int_enable>

  return true;
 8008b46:	2301      	movs	r3, #1
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3730      	adds	r7, #48	@ 0x30
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	e000edf0 	.word	0xe000edf0
 8008b54:	20001714 	.word	0x20001714
 8008b58:	20001740 	.word	0x20001740
 8008b5c:	20000230 	.word	0x20000230
 8008b60:	20000234 	.word	0x20000234
 8008b64:	2000180c 	.word	0x2000180c
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	20001748 	.word	0x20001748
 8008b70:	20001744 	.word	0x20001744
 8008b74:	0800ef8c 	.word	0x0800ef8c
 8008b78:	2000022d 	.word	0x2000022d

08008b7c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008b86:	2300      	movs	r3, #0
 8008b88:	77fb      	strb	r3, [r7, #31]
 8008b8a:	e034      	b.n	8008bf6 <configuration_reset+0x7a>
 8008b8c:	7ffb      	ldrb	r3, [r7, #31]
 8008b8e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008b94:	4b25      	ldr	r3, [pc, #148]	@ (8008c2c <configuration_reset+0xb0>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	7cfa      	ldrb	r2, [r7, #19]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d206      	bcs.n	8008bac <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8008b9e:	4b24      	ldr	r3, [pc, #144]	@ (8008c30 <configuration_reset+0xb4>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	7cfb      	ldrb	r3, [r7, #19]
 8008ba4:	015b      	lsls	r3, r3, #5
 8008ba6:	4413      	add	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e00d      	b.n	8008bc8 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008bac:	4b1f      	ldr	r3, [pc, #124]	@ (8008c2c <configuration_reset+0xb0>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	7cfb      	ldrb	r3, [r7, #19]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	db07      	blt.n	8008bc8 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008bb8:	7cfb      	ldrb	r3, [r7, #19]
 8008bba:	4a1c      	ldr	r2, [pc, #112]	@ (8008c2c <configuration_reset+0xb0>)
 8008bbc:	7812      	ldrb	r2, [r2, #0]
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	015b      	lsls	r3, r3, #5
 8008bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c34 <configuration_reset+0xb8>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  return driver;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8008bca:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <configuration_reset+0x6a>
 8008bd2:	4b19      	ldr	r3, [pc, #100]	@ (8008c38 <configuration_reset+0xbc>)
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01f      	beq.n	8008c22 <configuration_reset+0xa6>
 8008be2:	be00      	bkpt	0x0000
 8008be4:	e01d      	b.n	8008c22 <configuration_reset+0xa6>
    driver->reset(rhport);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	79fa      	ldrb	r2, [r7, #7]
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008bf0:	7ffb      	ldrb	r3, [r7, #31]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	77fb      	strb	r3, [r7, #31]
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c2c <configuration_reset+0xb0>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	7ffb      	ldrb	r3, [r7, #31]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	dac4      	bge.n	8008b8c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8008c02:	222c      	movs	r2, #44	@ 0x2c
 8008c04:	2100      	movs	r1, #0
 8008c06:	480d      	ldr	r0, [pc, #52]	@ (8008c3c <configuration_reset+0xc0>)
 8008c08:	f004 f809 	bl	800cc1e <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	21ff      	movs	r1, #255	@ 0xff
 8008c10:	480b      	ldr	r0, [pc, #44]	@ (8008c40 <configuration_reset+0xc4>)
 8008c12:	f004 f804 	bl	800cc1e <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008c16:	220c      	movs	r2, #12
 8008c18:	21ff      	movs	r1, #255	@ 0xff
 8008c1a:	480a      	ldr	r0, [pc, #40]	@ (8008c44 <configuration_reset+0xc8>)
 8008c1c:	f003 ffff 	bl	800cc1e <memset>
 8008c20:	e000      	b.n	8008c24 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008c22:	bf00      	nop
}
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20001748 	.word	0x20001748
 8008c30:	20001744 	.word	0x20001744
 8008c34:	0800ef8c 	.word	0x0800ef8c
 8008c38:	e000edf0 	.word	0xe000edf0
 8008c3c:	20001714 	.word	0x20001714
 8008c40:	20001718 	.word	0x20001718
 8008c44:	20001728 	.word	0x20001728

08008c48 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff ff91 	bl	8008b7c <configuration_reset>
  usbd_control_reset();
 8008c5a:	f001 fc37 	bl	800a4cc <usbd_control_reset>
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b093      	sub	sp, #76	@ 0x4c
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008c74:	f7ff feac 	bl	80089d0 <tud_inited>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f083 0301 	eor.w	r3, r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8189 	bne.w	8008f98 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008c86:	4bb1      	ldr	r3, [pc, #708]	@ (8008f4c <tud_task_ext+0x2e4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fcfa 	bl	800869e <tu_fifo_read>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	4798      	blx	r3

  return success;
 8008cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cbc:	f083 0301 	eor.w	r3, r3, #1
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 816a 	bne.w	8008f9c <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008cc8:	7b7b      	ldrb	r3, [r7, #13]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	2b07      	cmp	r3, #7
 8008cce:	f200 814b 	bhi.w	8008f68 <tud_task_ext+0x300>
 8008cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <tud_task_ext+0x70>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf9 	.word	0x08008cf9
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008f1d 	.word	0x08008f1d
 8008ce4:	08008ecf 	.word	0x08008ecf
 8008ce8:	08008ef9 	.word	0x08008ef9
 8008cec:	08008d17 	.word	0x08008d17
 8008cf0:	08008dc7 	.word	0x08008dc7
 8008cf4:	08008f0d 	.word	0x08008f0d
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008cf8:	7b3b      	ldrb	r3, [r7, #12]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff ffa4 	bl	8008c48 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008d00:	7c3a      	ldrb	r2, [r7, #16]
 8008d02:	4b93      	ldr	r3, [pc, #588]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d04:	709a      	strb	r2, [r3, #2]
        break;
 8008d06:	e146      	b.n	8008f96 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008d08:	7b3b      	ldrb	r3, [r7, #12]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff ff9c 	bl	8008c48 <usbd_reset>
        tud_umount_cb();
 8008d10:	f7ff fddd 	bl	80088ce <tud_umount_cb>
        break;
 8008d14:	e13f      	b.n	8008f96 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008d16:	4b8f      	ldr	r3, [pc, #572]	@ (8008f54 <tud_task_ext+0x2ec>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <tud_task_ext+0xce>
 8008d20:	4b8d      	ldr	r3, [pc, #564]	@ (8008f58 <tud_task_ext+0x2f0>)
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8137 	beq.w	8008fa0 <tud_task_ext+0x338>
 8008d32:	be00      	bkpt	0x0000
 8008d34:	e134      	b.n	8008fa0 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008d36:	4b87      	ldr	r3, [pc, #540]	@ (8008f54 <tud_task_ext+0x2ec>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	4b84      	ldr	r3, [pc, #528]	@ (8008f54 <tud_task_ext+0x2ec>)
 8008d42:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008d44:	4b83      	ldr	r3, [pc, #524]	@ (8008f54 <tud_task_ext+0x2ec>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f040 8116 	bne.w	8008f7c <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008d50:	4a7f      	ldr	r2, [pc, #508]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d52:	7813      	ldrb	r3, [r2, #0]
 8008d54:	f043 0301 	orr.w	r3, r3, #1
 8008d58:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d5c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008d68:	4a79      	ldr	r2, [pc, #484]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d6a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008d6e:	f023 0304 	bic.w	r3, r3, #4
 8008d72:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8008d76:	4a76      	ldr	r2, [pc, #472]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d78:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8008d84:	4a72      	ldr	r2, [pc, #456]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008d86:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008d8a:	f023 0304 	bic.w	r3, r3, #4
 8008d8e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8008d92:	7b3a      	ldrb	r2, [r7, #12]
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	3304      	adds	r3, #4
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f000 f91f 	bl	8008fe0 <process_control_request>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f083 0301 	eor.w	r3, r3, #1
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80e8 	beq.w	8008f80 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008db0:	7b3b      	ldrb	r3, [r7, #12]
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f002 fb7b 	bl	800b4b0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8008dba:	7b3b      	ldrb	r3, [r7, #12]
 8008dbc:	2180      	movs	r1, #128	@ 0x80
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 fb76 	bl	800b4b0 <dcd_edpt_stall>
        }
        break;
 8008dc4:	e0dc      	b.n	8008f80 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8008dc6:	7c3b      	ldrb	r3, [r7, #16]
 8008dc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008dd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ddc:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8008dde:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008de2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008de6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008dea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dee:	09db      	lsrs	r3, r3, #7
 8008df0:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8008df2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8008df6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008dfa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008dfe:	4954      	ldr	r1, [pc, #336]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008e00:	0052      	lsls	r2, r2, #1
 8008e02:	440a      	add	r2, r1
 8008e04:	4413      	add	r3, r2
 8008e06:	f103 0220 	add.w	r2, r3, #32
 8008e0a:	7813      	ldrb	r3, [r2, #0]
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8008e12:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008e16:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e1a:	494d      	ldr	r1, [pc, #308]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008e1c:	0052      	lsls	r2, r2, #1
 8008e1e:	440a      	add	r2, r1
 8008e20:	4413      	add	r3, r2
 8008e22:	f103 0220 	add.w	r2, r3, #32
 8008e26:	7813      	ldrb	r3, [r2, #0]
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8008e2e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d107      	bne.n	8008e46 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8008e36:	7b38      	ldrb	r0, [r7, #12]
 8008e38:	7c7a      	ldrb	r2, [r7, #17]
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008e40:	f001 fb7a 	bl	800a538 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8008e44:	e0a7      	b.n	8008f96 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008e46:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008e4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e4e:	4940      	ldr	r1, [pc, #256]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008e50:	0052      	lsls	r2, r2, #1
 8008e52:	440a      	add	r2, r1
 8008e54:	4413      	add	r3, r2
 8008e56:	3314      	adds	r3, #20
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8008e62:	4b3e      	ldr	r3, [pc, #248]	@ (8008f5c <tud_task_ext+0x2f4>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d207      	bcs.n	8008e7e <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8008e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f60 <tud_task_ext+0x2f8>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e76:	015b      	lsls	r3, r3, #5
 8008e78:	4413      	add	r3, r2
 8008e7a:	623b      	str	r3, [r7, #32]
 8008e7c:	e00f      	b.n	8008e9e <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008e7e:	4b37      	ldr	r3, [pc, #220]	@ (8008f5c <tud_task_ext+0x2f4>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	db08      	blt.n	8008e9e <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e90:	4a32      	ldr	r2, [pc, #200]	@ (8008f5c <tud_task_ext+0x2f4>)
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	015b      	lsls	r3, r3, #5
 8008e98:	4a32      	ldr	r2, [pc, #200]	@ (8008f64 <tud_task_ext+0x2fc>)
 8008e9a:	4413      	add	r3, r2
 8008e9c:	623b      	str	r3, [r7, #32]
  return driver;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008ea0:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8008ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <tud_task_ext+0x254>
 8008ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8008f58 <tud_task_ext+0x2f0>)
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d075      	beq.n	8008fa4 <tud_task_ext+0x33c>
 8008eb8:	be00      	bkpt	0x0000
 8008eba:	e073      	b.n	8008fa4 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8008ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebe:	699c      	ldr	r4, [r3, #24]
 8008ec0:	7b38      	ldrb	r0, [r7, #12]
 8008ec2:	7c7a      	ldrb	r2, [r7, #17]
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008eca:	47a0      	blx	r4
        break;
 8008ecc:	e063      	b.n	8008f96 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8008ece:	4b20      	ldr	r3, [pc, #128]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d053      	beq.n	8008f84 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008edc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bf14      	ite	ne
 8008eea:	2301      	movne	r3, #1
 8008eec:	2300      	moveq	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fcf3 	bl	80088dc <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008ef6:	e045      	b.n	8008f84 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8008ef8:	4b15      	ldr	r3, [pc, #84]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d040      	beq.n	8008f88 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8008f06:	f7ff fcf4 	bl	80088f2 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008f0a:	e03d      	b.n	8008f88 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d03c      	beq.n	8008f8c <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4610      	mov	r0, r2
 8008f18:	4798      	blx	r3
        }
        break;
 8008f1a:	e037      	b.n	8008f8c <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <tud_task_ext+0x2e8>)
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	2300      	movs	r3, #0
 8008f26:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008f28:	7efb      	ldrb	r3, [r7, #27]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bf14      	ite	ne
 8008f38:	2301      	movne	r3, #1
 8008f3a:	2300      	moveq	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d026      	beq.n	8008f90 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fc95 	bl	8008874 <tud_sof_cb>
        }
      break;
 8008f4a:	e021      	b.n	8008f90 <tud_task_ext+0x328>
 8008f4c:	2000180c 	.word	0x2000180c
 8008f50:	20001714 	.word	0x20001714
 8008f54:	20001740 	.word	0x20001740
 8008f58:	e000edf0 	.word	0xe000edf0
 8008f5c:	20001748 	.word	0x20001748
 8008f60:	20001744 	.word	0x20001744
 8008f64:	0800ef8c 	.word	0x0800ef8c

      default:
        TU_BREAKPOINT();
 8008f68:	4b10      	ldr	r3, [pc, #64]	@ (8008fac <tud_task_ext+0x344>)
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00d      	beq.n	8008f94 <tud_task_ext+0x32c>
 8008f78:	be00      	bkpt	0x0000
        break;
 8008f7a:	e00b      	b.n	8008f94 <tud_task_ext+0x32c>
          break;
 8008f7c:	bf00      	nop
 8008f7e:	e682      	b.n	8008c86 <tud_task_ext+0x1e>
        break;
 8008f80:	bf00      	nop
 8008f82:	e680      	b.n	8008c86 <tud_task_ext+0x1e>
        break;
 8008f84:	bf00      	nop
 8008f86:	e67e      	b.n	8008c86 <tud_task_ext+0x1e>
        break;
 8008f88:	bf00      	nop
 8008f8a:	e67c      	b.n	8008c86 <tud_task_ext+0x1e>
        break;
 8008f8c:	bf00      	nop
 8008f8e:	e67a      	b.n	8008c86 <tud_task_ext+0x1e>
      break;
 8008f90:	bf00      	nop
 8008f92:	e678      	b.n	8008c86 <tud_task_ext+0x1e>
        break;
 8008f94:	bf00      	nop
  while (1) {
 8008f96:	e676      	b.n	8008c86 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008f98:	bf00      	nop
 8008f9a:	e004      	b.n	8008fa6 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008f9c:	bf00      	nop
 8008f9e:	e002      	b.n	8008fa6 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8008fa4:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8008fa6:	374c      	adds	r7, #76	@ 0x4c
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd90      	pop	{r4, r7, pc}
 8008fac:	e000edf0 	.word	0xe000edf0

08008fb0 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fa8e 	bl	800a4e4 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	7bf8      	ldrb	r0, [r7, #15]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	4798      	blx	r3
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b09a      	sub	sp, #104	@ 0x68
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8008fec:	2000      	movs	r0, #0
 8008fee:	f001 fa79 	bl	800a4e4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b60      	cmp	r3, #96	@ 0x60
 8008ffe:	d10a      	bne.n	8009016 <process_control_request+0x36>
 8009000:	4ba5      	ldr	r3, [pc, #660]	@ (8009298 <process_control_request+0x2b8>)
 8009002:	633b      	str	r3, [r7, #48]	@ 0x30
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d000      	beq.n	8009012 <process_control_request+0x32>
 8009010:	be00      	bkpt	0x0000
 8009012:	2300      	movs	r3, #0
 8009014:	e2bb      	b.n	800958e <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b40      	cmp	r3, #64	@ 0x40
 8009022:	d10a      	bne.n	800903a <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8009024:	489d      	ldr	r0, [pc, #628]	@ (800929c <process_control_request+0x2bc>)
 8009026:	f001 fa5d 	bl	800a4e4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff fc65 	bl	8008900 <tud_vendor_control_xfer_cb>
 8009036:	4603      	mov	r3, r0
 8009038:	e2a9      	b.n	800958e <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	f000 81ca 	beq.w	80093de <process_control_request+0x3fe>
 800904a:	2b02      	cmp	r3, #2
 800904c:	f300 8292 	bgt.w	8009574 <process_control_request+0x594>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <process_control_request+0x7c>
 8009054:	2b01      	cmp	r3, #1
 8009056:	f000 8151 	beq.w	80092fc <process_control_request+0x31c>
 800905a:	e28b      	b.n	8009574 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b20      	cmp	r3, #32
 8009068:	d143      	bne.n	80090f2 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	889b      	ldrh	r3, [r3, #4]
 800906e:	b29b      	uxth	r3, r3
 8009070:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009072:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800907a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d901      	bls.n	8009086 <process_control_request+0xa6>
 8009082:	2300      	movs	r3, #0
 8009084:	e283      	b.n	800958e <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009086:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800908a:	4a85      	ldr	r2, [pc, #532]	@ (80092a0 <process_control_request+0x2c0>)
 800908c:	4413      	add	r3, r2
 800908e:	791b      	ldrb	r3, [r3, #4]
 8009090:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8009098:	4b82      	ldr	r3, [pc, #520]	@ (80092a4 <process_control_request+0x2c4>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d207      	bcs.n	80090b4 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 80090a4:	4b80      	ldr	r3, [pc, #512]	@ (80092a8 <process_control_request+0x2c8>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090ac:	015b      	lsls	r3, r3, #5
 80090ae:	4413      	add	r3, r2
 80090b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090b2:	e00f      	b.n	80090d4 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80090b4:	4b7b      	ldr	r3, [pc, #492]	@ (80092a4 <process_control_request+0x2c4>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090be:	429a      	cmp	r2, r3
 80090c0:	db08      	blt.n	80090d4 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80090c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090c6:	4a77      	ldr	r2, [pc, #476]	@ (80092a4 <process_control_request+0x2c4>)
 80090c8:	7812      	ldrb	r2, [r2, #0]
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	015b      	lsls	r3, r3, #5
 80090ce:	4a77      	ldr	r2, [pc, #476]	@ (80092ac <process_control_request+0x2cc>)
 80090d0:	4413      	add	r3, r2
 80090d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80090d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <process_control_request+0x102>
 80090de:	2300      	movs	r3, #0
 80090e0:	e255      	b.n	800958e <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff ff61 	bl	8008fb0 <invoke_class_control>
 80090ee:	4603      	mov	r3, r0
 80090f0:	e24d      	b.n	800958e <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8009100:	4b65      	ldr	r3, [pc, #404]	@ (8009298 <process_control_request+0x2b8>)
 8009102:	643b      	str	r3, [r7, #64]	@ 0x40
 8009104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d000      	beq.n	8009112 <process_control_request+0x132>
 8009110:	be00      	bkpt	0x0000
        return false;
 8009112:	2300      	movs	r3, #0
 8009114:	e23b      	b.n	800958e <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	785b      	ldrb	r3, [r3, #1]
 800911a:	2b09      	cmp	r3, #9
 800911c:	f200 80e1 	bhi.w	80092e2 <process_control_request+0x302>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <process_control_request+0x148>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	080092b1 	.word	0x080092b1
 800912c:	08009275 	.word	0x08009275
 8009130:	080092e3 	.word	0x080092e3
 8009134:	0800924f 	.word	0x0800924f
 8009138:	080092e3 	.word	0x080092e3
 800913c:	08009151 	.word	0x08009151
 8009140:	08009235 	.word	0x08009235
 8009144:	080092e3 	.word	0x080092e3
 8009148:	08009175 	.word	0x08009175
 800914c:	0800918d 	.word	0x0800918d
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8009150:	6838      	ldr	r0, [r7, #0]
 8009152:	f001 f9d7 	bl	800a504 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	885b      	ldrh	r3, [r3, #2]
 800915a:	b29b      	uxth	r3, r3
 800915c:	b2da      	uxtb	r2, r3
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f001 ff94 	bl	800b090 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8009168:	4a4d      	ldr	r2, [pc, #308]	@ (80092a0 <process_control_request+0x2c0>)
 800916a:	7813      	ldrb	r3, [r2, #0]
 800916c:	f043 0302 	orr.w	r3, r3, #2
 8009170:	7013      	strb	r3, [r2, #0]
        break;
 8009172:	e0c2      	b.n	80092fa <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8009174:	4b4a      	ldr	r3, [pc, #296]	@ (80092a0 <process_control_request+0x2c0>)
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800917c:	f107 0213 	add.w	r2, r7, #19
 8009180:	79f8      	ldrb	r0, [r7, #7]
 8009182:	2301      	movs	r3, #1
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	f001 f931 	bl	800a3ec <tud_control_xfer>
        }
        break;
 800918a:	e0b6      	b.n	80092fa <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	885b      	ldrh	r3, [r3, #2]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8009196:	4b42      	ldr	r3, [pc, #264]	@ (80092a0 <process_control_request+0x2c0>)
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d041      	beq.n	8009228 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 80091a4:	4b3e      	ldr	r3, [pc, #248]	@ (80092a0 <process_control_request+0x2c0>)
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d014      	beq.n	80091d8 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f002 f832 	bl	800b21c <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 f896 	bl	800b2ec <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80091c0:	4b37      	ldr	r3, [pc, #220]	@ (80092a0 <process_control_request+0x2c0>)
 80091c2:	789b      	ldrb	r3, [r3, #2]
 80091c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fcd6 	bl	8008b7c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80091d0:	4a33      	ldr	r2, [pc, #204]	@ (80092a0 <process_control_request+0x2c0>)
 80091d2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80091d6:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80091d8:	4a31      	ldr	r2, [pc, #196]	@ (80092a0 <process_control_request+0x2c0>)
 80091da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091de:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80091e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01d      	beq.n	8009224 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80091e8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f9d5 	bl	80095a0 <process_set_config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f083 0301 	eor.w	r3, r3, #1
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00d      	beq.n	800921e <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 8009202:	4b25      	ldr	r3, [pc, #148]	@ (8009298 <process_control_request+0x2b8>)
 8009204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d000      	beq.n	8009214 <process_control_request+0x234>
 8009212:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8009214:	4b22      	ldr	r3, [pc, #136]	@ (80092a0 <process_control_request+0x2c0>)
 8009216:	2200      	movs	r2, #0
 8009218:	705a      	strb	r2, [r3, #1]
                return false;
 800921a:	2300      	movs	r3, #0
 800921c:	e1b7      	b.n	800958e <process_control_request+0x5ae>
              }
              tud_mount_cb();
 800921e:	f7ff fb4f 	bl	80088c0 <tud_mount_cb>
 8009222:	e001      	b.n	8009228 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8009224:	f7ff fb53 	bl	80088ce <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f86b 	bl	800a308 <tud_control_status>
        }
        break;
 8009232:	e062      	b.n	80092fa <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fae5 	bl	8009808 <process_get_descriptor>
 800923e:	4603      	mov	r3, r0
 8009240:	f083 0301 	eor.w	r3, r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d056      	beq.n	80092f8 <process_control_request+0x318>
 800924a:	2300      	movs	r3, #0
 800924c:	e19f      	b.n	800958e <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	885b      	ldrh	r3, [r3, #2]
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	d10b      	bne.n	8009270 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8009258:	4a11      	ldr	r2, [pc, #68]	@ (80092a0 <process_control_request+0x2c0>)
 800925a:	7813      	ldrb	r3, [r2, #0]
 800925c:	f043 0308 	orr.w	r3, r3, #8
 8009260:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	4618      	mov	r0, r3
 8009268:	f001 f84e 	bl	800a308 <tud_control_status>
            break;
 800926c:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800926e:	e044      	b.n	80092fa <process_control_request+0x31a>
            default: return false;
 8009270:	2300      	movs	r3, #0
 8009272:	e18c      	b.n	800958e <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	885b      	ldrh	r3, [r3, #2]
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b01      	cmp	r3, #1
 800927c:	d001      	beq.n	8009282 <process_control_request+0x2a2>
 800927e:	2300      	movs	r3, #0
 8009280:	e185      	b.n	800958e <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8009282:	4a07      	ldr	r2, [pc, #28]	@ (80092a0 <process_control_request+0x2c0>)
 8009284:	7813      	ldrb	r3, [r2, #0]
 8009286:	f023 0308 	bic.w	r3, r3, #8
 800928a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f839 	bl	800a308 <tud_control_status>
        break;
 8009296:	e030      	b.n	80092fa <process_control_request+0x31a>
 8009298:	e000edf0 	.word	0xe000edf0
 800929c:	08008901 	.word	0x08008901
 80092a0:	20001714 	.word	0x20001714
 80092a4:	20001748 	.word	0x20001748
 80092a8:	20001744 	.word	0x20001744
 80092ac:	0800ef8c 	.word	0x0800ef8c

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80092b0:	4b94      	ldr	r3, [pc, #592]	@ (8009504 <process_control_request+0x524>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	4b91      	ldr	r3, [pc, #580]	@ (8009504 <process_control_request+0x524>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	089b      	lsrs	r3, r3, #2
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80092d2:	f107 0210 	add.w	r2, r7, #16
 80092d6:	79f8      	ldrb	r0, [r7, #7]
 80092d8:	2302      	movs	r3, #2
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	f001 f886 	bl	800a3ec <tud_control_xfer>
          break;
 80092e0:	e00b      	b.n	80092fa <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80092e2:	4b89      	ldr	r3, [pc, #548]	@ (8009508 <process_control_request+0x528>)
 80092e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d000      	beq.n	80092f4 <process_control_request+0x314>
 80092f2:	be00      	bkpt	0x0000
 80092f4:	2300      	movs	r3, #0
 80092f6:	e14a      	b.n	800958e <process_control_request+0x5ae>
        break;
 80092f8:	bf00      	nop
      }
    break;
 80092fa:	e147      	b.n	800958c <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	889b      	ldrh	r3, [r3, #4]
 8009300:	b29b      	uxth	r3, r3
 8009302:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009304:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800930c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d901      	bls.n	8009318 <process_control_request+0x338>
 8009314:	2300      	movs	r3, #0
 8009316:	e13a      	b.n	800958e <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800931c:	4a79      	ldr	r2, [pc, #484]	@ (8009504 <process_control_request+0x524>)
 800931e:	4413      	add	r3, r2
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800932a:	4b78      	ldr	r3, [pc, #480]	@ (800950c <process_control_request+0x52c>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009332:	429a      	cmp	r2, r3
 8009334:	d207      	bcs.n	8009346 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8009336:	4b76      	ldr	r3, [pc, #472]	@ (8009510 <process_control_request+0x530>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800933e:	015b      	lsls	r3, r3, #5
 8009340:	4413      	add	r3, r2
 8009342:	623b      	str	r3, [r7, #32]
 8009344:	e00f      	b.n	8009366 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009346:	4b71      	ldr	r3, [pc, #452]	@ (800950c <process_control_request+0x52c>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009350:	429a      	cmp	r2, r3
 8009352:	db08      	blt.n	8009366 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009358:	4a6c      	ldr	r2, [pc, #432]	@ (800950c <process_control_request+0x52c>)
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	015b      	lsls	r3, r3, #5
 8009360:	4a6c      	ldr	r2, [pc, #432]	@ (8009514 <process_control_request+0x534>)
 8009362:	4413      	add	r3, r2
 8009364:	623b      	str	r3, [r7, #32]
  return driver;
 8009366:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009368:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800936a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <process_control_request+0x394>
 8009370:	2300      	movs	r3, #0
 8009372:	e10c      	b.n	800958e <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fe18 	bl	8008fb0 <invoke_class_control>
 8009380:	4603      	mov	r3, r0
 8009382:	f083 0301 	eor.w	r3, r3, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80fe 	beq.w	800958a <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <process_control_request+0x3c0>
 800939c:	2300      	movs	r3, #0
 800939e:	e0f6      	b.n	800958e <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	785b      	ldrb	r3, [r3, #1]
 80093a4:	3b0a      	subs	r3, #10
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d816      	bhi.n	80093d8 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80093aa:	2000      	movs	r0, #0
 80093ac:	f001 f89a 	bl	800a4e4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	2b0a      	cmp	r3, #10
 80093b6:	d109      	bne.n	80093cc <process_control_request+0x3ec>
              uint8_t alternate = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80093bc:	f107 020f 	add.w	r2, r7, #15
 80093c0:	79f8      	ldrb	r0, [r7, #7]
 80093c2:	2301      	movs	r3, #1
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	f001 f811 	bl	800a3ec <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80093ca:	e007      	b.n	80093dc <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 ff99 	bl	800a308 <tud_control_status>
          break;
 80093d6:	e001      	b.n	80093dc <process_control_request+0x3fc>

          default: return false;
 80093d8:	2300      	movs	r3, #0
 80093da:	e0d8      	b.n	800958e <process_control_request+0x5ae>
        }
      }
      break;
 80093dc:	e0d5      	b.n	800958a <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	889b      	ldrh	r3, [r3, #4]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	83bb      	strh	r3, [r7, #28]
 80093e6:	8bbb      	ldrh	r3, [r7, #28]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80093ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093f2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80093f4:	7fbb      	ldrb	r3, [r7, #30]
 80093f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fa:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80093fc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8009400:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009404:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009406:	7ffb      	ldrb	r3, [r7, #31]
 8009408:	09db      	lsrs	r3, r3, #7
 800940a:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800940c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8009410:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009414:	2b05      	cmp	r3, #5
 8009416:	d90a      	bls.n	800942e <process_control_request+0x44e>
 8009418:	4b3b      	ldr	r3, [pc, #236]	@ (8009508 <process_control_request+0x528>)
 800941a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800941c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d000      	beq.n	800942a <process_control_request+0x44a>
 8009428:	be00      	bkpt	0x0000
 800942a:	2300      	movs	r3, #0
 800942c:	e0af      	b.n	800958e <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800942e:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8009432:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8009436:	4933      	ldr	r1, [pc, #204]	@ (8009504 <process_control_request+0x524>)
 8009438:	0052      	lsls	r2, r2, #1
 800943a:	440a      	add	r2, r1
 800943c:	4413      	add	r3, r2
 800943e:	3314      	adds	r3, #20
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8009448:	4b30      	ldr	r3, [pc, #192]	@ (800950c <process_control_request+0x52c>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	7efa      	ldrb	r2, [r7, #27]
 800944e:	429a      	cmp	r2, r3
 8009450:	d206      	bcs.n	8009460 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8009452:	4b2f      	ldr	r3, [pc, #188]	@ (8009510 <process_control_request+0x530>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	7efb      	ldrb	r3, [r7, #27]
 8009458:	015b      	lsls	r3, r3, #5
 800945a:	4413      	add	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e00d      	b.n	800947c <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009460:	4b2a      	ldr	r3, [pc, #168]	@ (800950c <process_control_request+0x52c>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	7efb      	ldrb	r3, [r7, #27]
 8009468:	429a      	cmp	r2, r3
 800946a:	db07      	blt.n	800947c <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800946c:	7efb      	ldrb	r3, [r7, #27]
 800946e:	4a27      	ldr	r2, [pc, #156]	@ (800950c <process_control_request+0x52c>)
 8009470:	7812      	ldrb	r2, [r2, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	015b      	lsls	r3, r3, #5
 8009476:	4a27      	ldr	r2, [pc, #156]	@ (8009514 <process_control_request+0x534>)
 8009478:	4413      	add	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
  return driver;
 800947c:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800947e:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00c      	beq.n	80094a8 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 800948e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <process_control_request+0x4b8>
 8009494:	2300      	movs	r3, #0
 8009496:	e07a      	b.n	800958e <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fd86 	bl	8008fb0 <invoke_class_control>
 80094a4:	4603      	mov	r3, r0
 80094a6:	e072      	b.n	800958e <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d017      	beq.n	80094e0 <process_control_request+0x500>
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	dc52      	bgt.n	800955a <process_control_request+0x57a>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <process_control_request+0x4de>
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d011      	beq.n	80094e0 <process_control_request+0x500>
 80094bc:	e04d      	b.n	800955a <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80094be:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	4611      	mov	r1, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fec8 	bl	800a25c <usbd_edpt_stalled>
 80094cc:	4603      	mov	r3, r0
 80094ce:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80094d0:	f107 020c 	add.w	r2, r7, #12
 80094d4:	79f8      	ldrb	r0, [r7, #7]
 80094d6:	2302      	movs	r3, #2
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	f000 ff87 	bl	800a3ec <tud_control_xfer>
          }
          break;
 80094de:	e048      	b.n	8009572 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	885b      	ldrh	r3, [r3, #2]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d11d      	bne.n	8009526 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d112      	bne.n	8009518 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80094f2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 fe70 	bl	800a1e0 <usbd_edpt_clear_stall>
 8009500:	e011      	b.n	8009526 <process_control_request+0x546>
 8009502:	bf00      	nop
 8009504:	20001714 	.word	0x20001714
 8009508:	e000edf0 	.word	0xe000edf0
 800950c:	20001748 	.word	0x20001748
 8009510:	20001744 	.word	0x20001744
 8009514:	0800ef8c 	.word	0x0800ef8c
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8009518:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	4611      	mov	r1, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fe1f 	bl	800a164 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8009526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009528:	2b00      	cmp	r3, #0
 800952a:	d021      	beq.n	8009570 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fd3c 	bl	8008fb0 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8009538:	2000      	movs	r0, #0
 800953a:	f000 ffd3 	bl	800a4e4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 800953e:	4b16      	ldr	r3, [pc, #88]	@ (8009598 <process_control_request+0x5b8>)
 8009540:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009544:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d110      	bne.n	8009570 <process_control_request+0x590>
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fed8 	bl	800a308 <tud_control_status>
            }
          }
          break;
 8009558:	e00a      	b.n	8009570 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800955a:	4b10      	ldr	r3, [pc, #64]	@ (800959c <process_control_request+0x5bc>)
 800955c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800955e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d000      	beq.n	800956c <process_control_request+0x58c>
 800956a:	be00      	bkpt	0x0000
            return false;
 800956c:	2300      	movs	r3, #0
 800956e:	e00e      	b.n	800958e <process_control_request+0x5ae>
          break;
 8009570:	bf00      	nop
        }
      }
    }
    break;
 8009572:	e00b      	b.n	800958c <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009574:	4b09      	ldr	r3, [pc, #36]	@ (800959c <process_control_request+0x5bc>)
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d000      	beq.n	8009586 <process_control_request+0x5a6>
 8009584:	be00      	bkpt	0x0000
      return false;
 8009586:	2300      	movs	r3, #0
 8009588:	e001      	b.n	800958e <process_control_request+0x5ae>
      break;
 800958a:	bf00      	nop
  }

  return true;
 800958c:	2301      	movs	r3, #1
}
 800958e:	4618      	mov	r0, r3
 8009590:	3768      	adds	r7, #104	@ 0x68
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001714 	.word	0x20001714
 800959c:	e000edf0 	.word	0xe000edf0

080095a0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b096      	sub	sp, #88	@ 0x58
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	460a      	mov	r2, r1
 80095aa:	71fb      	strb	r3, [r7, #7]
 80095ac:	4613      	mov	r3, r2
 80095ae:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80095b0:	79bb      	ldrb	r3, [r7, #6]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fa fa88 	bl	8003acc <tud_descriptor_configuration_cb>
 80095bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80095be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <process_set_config+0x2c>
 80095c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d00a      	beq.n	80095e2 <process_set_config+0x42>
 80095cc:	4b87      	ldr	r3, [pc, #540]	@ (80097ec <process_set_config+0x24c>)
 80095ce:	623b      	str	r3, [r7, #32]
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d000      	beq.n	80095de <process_set_config+0x3e>
 80095dc:	be00      	bkpt	0x0000
 80095de:	2300      	movs	r3, #0
 80095e0:	e100      	b.n	80097e4 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80095e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e4:	79db      	ldrb	r3, [r3, #7]
 80095e6:	115b      	asrs	r3, r3, #5
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	b2d9      	uxtb	r1, r3
 80095ee:	4a80      	ldr	r2, [pc, #512]	@ (80097f0 <process_set_config+0x250>)
 80095f0:	7813      	ldrb	r3, [r2, #0]
 80095f2:	f361 1304 	bfi	r3, r1, #4, #1
 80095f6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80095f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fa:	79db      	ldrb	r3, [r3, #7]
 80095fc:	119b      	asrs	r3, r3, #6
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	b2d9      	uxtb	r1, r3
 8009604:	4a7a      	ldr	r2, [pc, #488]	@ (80097f0 <process_set_config+0x250>)
 8009606:	7813      	ldrb	r3, [r2, #0]
 8009608:	f361 1345 	bfi	r3, r1, #5, #1
 800960c:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 800960e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009610:	3309      	adds	r3, #9
 8009612:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8009614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009616:	885b      	ldrh	r3, [r3, #2]
 8009618:	b29b      	uxth	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961e:	4413      	add	r3, r2
 8009620:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8009622:	e0d9      	b.n	80097d8 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800962a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800962c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	3301      	adds	r3, #1
 8009632:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8009634:	2b0b      	cmp	r3, #11
 8009636:	d10f      	bne.n	8009658 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8009638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963a:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 800963c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800963e:	78db      	ldrb	r3, [r3, #3]
 8009640:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009646:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8009656:	657b      	str	r3, [r7, #84]	@ 0x54
 8009658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800965a:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3301      	adds	r3, #1
 8009660:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8009662:	2b04      	cmp	r3, #4
 8009664:	d00a      	beq.n	800967c <process_set_config+0xdc>
 8009666:	4b61      	ldr	r3, [pc, #388]	@ (80097ec <process_set_config+0x24c>)
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d000      	beq.n	8009678 <process_set_config+0xd8>
 8009676:	be00      	bkpt	0x0000
 8009678:	2300      	movs	r3, #0
 800967a:	e0b3      	b.n	80097e4 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 800967c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800967e:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8009680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800968e:	e089      	b.n	80097a4 <process_set_config+0x204>
 8009690:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009694:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800969a:	4b56      	ldr	r3, [pc, #344]	@ (80097f4 <process_set_config+0x254>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	7bfa      	ldrb	r2, [r7, #15]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d206      	bcs.n	80096b2 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 80096a4:	4b54      	ldr	r3, [pc, #336]	@ (80097f8 <process_set_config+0x258>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	015b      	lsls	r3, r3, #5
 80096ac:	4413      	add	r3, r2
 80096ae:	60bb      	str	r3, [r7, #8]
 80096b0:	e00d      	b.n	80096ce <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80096b2:	4b50      	ldr	r3, [pc, #320]	@ (80097f4 <process_set_config+0x254>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	db07      	blt.n	80096ce <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4a4c      	ldr	r2, [pc, #304]	@ (80097f4 <process_set_config+0x254>)
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	015b      	lsls	r3, r3, #5
 80096c8:	4a4c      	ldr	r2, [pc, #304]	@ (80097fc <process_set_config+0x25c>)
 80096ca:	4413      	add	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]
  return driver;
 80096ce:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80096d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <process_set_config+0x14e>
 80096d8:	4b44      	ldr	r3, [pc, #272]	@ (80097ec <process_set_config+0x24c>)
 80096da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d000      	beq.n	80096ea <process_set_config+0x14a>
 80096e8:	be00      	bkpt	0x0000
 80096ea:	2300      	movs	r3, #0
 80096ec:	e07a      	b.n	80097e4 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80096f4:	79f8      	ldrb	r0, [r7, #7]
 80096f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80096fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009700:	2b08      	cmp	r3, #8
 8009702:	d94a      	bls.n	800979a <process_set_config+0x1fa>
 8009704:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009706:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009708:	429a      	cmp	r2, r3
 800970a:	d846      	bhi.n	800979a <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 800970c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009710:	2b01      	cmp	r3, #1
 8009712:	d107      	bne.n	8009724 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	4a39      	ldr	r2, [pc, #228]	@ (8009800 <process_set_config+0x260>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d102      	bne.n	8009724 <process_set_config+0x184>
 800971e:	2302      	movs	r3, #2
 8009720:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009724:	2300      	movs	r3, #0
 8009726:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800972a:	e024      	b.n	8009776 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 800972c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972e:	789a      	ldrb	r2, [r3, #2]
 8009730:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009734:	4413      	add	r3, r2
 8009736:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 800973a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800973e:	4a2c      	ldr	r2, [pc, #176]	@ (80097f0 <process_set_config+0x250>)
 8009740:	4413      	add	r3, r2
 8009742:	791b      	ldrb	r3, [r3, #4]
 8009744:	2bff      	cmp	r3, #255	@ 0xff
 8009746:	d00a      	beq.n	800975e <process_set_config+0x1be>
 8009748:	4b28      	ldr	r3, [pc, #160]	@ (80097ec <process_set_config+0x24c>)
 800974a:	633b      	str	r3, [r7, #48]	@ 0x30
 800974c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d000      	beq.n	800975a <process_set_config+0x1ba>
 8009758:	be00      	bkpt	0x0000
 800975a:	2300      	movs	r3, #0
 800975c:	e042      	b.n	80097e4 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 800975e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009762:	4a23      	ldr	r2, [pc, #140]	@ (80097f0 <process_set_config+0x250>)
 8009764:	4413      	add	r3, r2
 8009766:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800976a:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800976c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009770:	3301      	adds	r3, #1
 8009772:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009776:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800977a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800977e:	429a      	cmp	r2, r3
 8009780:	d3d4      	bcc.n	800972c <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8009782:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009786:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800978a:	481e      	ldr	r0, [pc, #120]	@ (8009804 <process_set_config+0x264>)
 800978c:	f003 f81c 	bl	800c7c8 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8009790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009792:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009794:	4413      	add	r3, r2
 8009796:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009798:	e00c      	b.n	80097b4 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800979a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800979e:	3301      	adds	r3, #1
 80097a0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80097a4:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <process_set_config+0x254>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80097ae:	429a      	cmp	r2, r3
 80097b0:	f6bf af6e 	bge.w	8009690 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80097b4:	4b0f      	ldr	r3, [pc, #60]	@ (80097f4 <process_set_config+0x254>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80097be:	429a      	cmp	r2, r3
 80097c0:	da0a      	bge.n	80097d8 <process_set_config+0x238>
 80097c2:	4b0a      	ldr	r3, [pc, #40]	@ (80097ec <process_set_config+0x24c>)
 80097c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d000      	beq.n	80097d4 <process_set_config+0x234>
 80097d2:	be00      	bkpt	0x0000
 80097d4:	2300      	movs	r3, #0
 80097d6:	e005      	b.n	80097e4 <process_set_config+0x244>
  while( p_desc < desc_end )
 80097d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097dc:	429a      	cmp	r2, r3
 80097de:	f4ff af21 	bcc.w	8009624 <process_set_config+0x84>
  }

  return true;
 80097e2:	2301      	movs	r3, #1
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3758      	adds	r7, #88	@ 0x58
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	e000edf0 	.word	0xe000edf0
 80097f0:	20001714 	.word	0x20001714
 80097f4:	20001748 	.word	0x20001748
 80097f8:	20001744 	.word	0x20001744
 80097fc:	0800ef8c 	.word	0x0800ef8c
 8009800:	08006d35 	.word	0x08006d35
 8009804:	20001728 	.word	0x20001728

08009808 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b094      	sub	sp, #80	@ 0x50
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	885b      	ldrh	r3, [r3, #2]
 8009818:	b29b      	uxth	r3, r3
 800981a:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800981c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b29b      	uxth	r3, r3
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	885b      	ldrh	r3, [r3, #2]
 800982c:	b29b      	uxth	r3, r3
 800982e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009830:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009838:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800983c:	3b01      	subs	r3, #1
 800983e:	2b0e      	cmp	r3, #14
 8009840:	f200 80b4 	bhi.w	80099ac <process_get_descriptor+0x1a4>
 8009844:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <process_get_descriptor+0x44>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	08009889 	.word	0x08009889
 8009850:	080098ed 	.word	0x080098ed
 8009854:	08009953 	.word	0x08009953
 8009858:	080099ad 	.word	0x080099ad
 800985c:	080099ad 	.word	0x080099ad
 8009860:	08009987 	.word	0x08009987
 8009864:	080098ed 	.word	0x080098ed
 8009868:	080099ad 	.word	0x080099ad
 800986c:	080099ad 	.word	0x080099ad
 8009870:	080099ad 	.word	0x080099ad
 8009874:	080099ad 	.word	0x080099ad
 8009878:	080099ad 	.word	0x080099ad
 800987c:	080099ad 	.word	0x080099ad
 8009880:	080099ad 	.word	0x080099ad
 8009884:	080098bb 	.word	0x080098bb
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009888:	f7fa f908 	bl	8003a9c <tud_descriptor_device_cb>
 800988c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <process_get_descriptor+0xa2>
 8009894:	4b48      	ldr	r3, [pc, #288]	@ (80099b8 <process_get_descriptor+0x1b0>)
 8009896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d000      	beq.n	80098a6 <process_get_descriptor+0x9e>
 80098a4:	be00      	bkpt	0x0000
 80098a6:	2300      	movs	r3, #0
 80098a8:	e081      	b.n	80099ae <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80098aa:	79f8      	ldrb	r0, [r7, #7]
 80098ac:	2312      	movs	r3, #18
 80098ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	f000 fd9b 	bl	800a3ec <tud_control_xfer>
 80098b6:	4603      	mov	r3, r0
 80098b8:	e079      	b.n	80099ae <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80098ba:	f7fe ffe5 	bl	8008888 <tud_descriptor_bos_cb>
 80098be:	4603      	mov	r3, r0
 80098c0:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 80098c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <process_get_descriptor+0xc4>
 80098c8:	2300      	movs	r3, #0
 80098ca:	e070      	b.n	80099ae <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80098cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ce:	3302      	adds	r3, #2
 80098d0:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80098da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80098e0:	79f8      	ldrb	r0, [r7, #7]
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	f000 fd82 	bl	800a3ec <tud_control_xfer>
 80098e8:	4603      	mov	r3, r0
 80098ea:	e060      	b.n	80099ae <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 80098ec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d114      	bne.n	800991e <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80098f4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fa f8e7 	bl	8003acc <tud_descriptor_configuration_cb>
 80098fe:	4603      	mov	r3, r0
 8009900:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8009902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d116      	bne.n	8009936 <process_get_descriptor+0x12e>
 8009908:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <process_get_descriptor+0x1b0>)
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d000      	beq.n	800991a <process_get_descriptor+0x112>
 8009918:	be00      	bkpt	0x0000
 800991a:	2300      	movs	r3, #0
 800991c:	e047      	b.n	80099ae <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800991e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe ffc0 	bl	80088a8 <tud_descriptor_other_speed_configuration_cb>
 8009928:	4603      	mov	r3, r0
 800992a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 800992c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <process_get_descriptor+0x12e>
 8009932:	2300      	movs	r3, #0
 8009934:	e03b      	b.n	80099ae <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8009936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009938:	3302      	adds	r3, #2
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8009942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009944:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009946:	79f8      	ldrb	r0, [r7, #7]
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	f000 fd4f 	bl	800a3ec <tud_control_xfer>
 800994e:	4603      	mov	r3, r0
 8009950:	e02d      	b.n	80099ae <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	889b      	ldrh	r3, [r3, #4]
 8009956:	b29a      	uxth	r2, r3
 8009958:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f7fa f8c2 	bl	8003ae8 <tud_descriptor_string_cb>
 8009964:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <process_get_descriptor+0x168>
 800996c:	2300      	movs	r3, #0
 800996e:	e01e      	b.n	80099ae <process_get_descriptor+0x1a6>
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009978:	79f8      	ldrb	r0, [r7, #7]
 800997a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	f000 fd35 	bl	800a3ec <tud_control_xfer>
 8009982:	4603      	mov	r3, r0
 8009984:	e013      	b.n	80099ae <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8009986:	f7fe ff87 	bl	8008898 <tud_descriptor_device_qualifier_cb>
 800998a:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 800998c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <process_get_descriptor+0x18e>
 8009992:	2300      	movs	r3, #0
 8009994:	e00b      	b.n	80099ae <process_get_descriptor+0x1a6>
 8009996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800999e:	79f8      	ldrb	r0, [r7, #7]
 80099a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	f000 fd22 	bl	800a3ec <tud_control_xfer>
 80099a8:	4603      	mov	r3, r0
 80099aa:	e000      	b.n	80099ae <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 80099ac:	2300      	movs	r3, #0
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3750      	adds	r7, #80	@ 0x50
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	e000edf0 	.word	0xe000edf0

080099bc <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b0a0      	sub	sp, #128	@ 0x80
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	3b02      	subs	r3, #2
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	f200 8175 	bhi.w	8009cc4 <dcd_event_handler+0x308>
 80099da:	a201      	add	r2, pc, #4	@ (adr r2, 80099e0 <dcd_event_handler+0x24>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	080099f5 	.word	0x080099f5
 80099e4:	08009a65 	.word	0x08009a65
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a43 	.word	0x08009a43
 80099f0:	08009c91 	.word	0x08009c91
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80099f4:	4aac      	ldr	r2, [pc, #688]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 80099f6:	7813      	ldrb	r3, [r2, #0]
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80099fe:	4aaa      	ldr	r2, [pc, #680]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a00:	7813      	ldrb	r3, [r2, #0]
 8009a02:	f023 0302 	bic.w	r3, r3, #2
 8009a06:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8009a08:	4ba7      	ldr	r3, [pc, #668]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8009a0e:	4aa6      	ldr	r2, [pc, #664]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a10:	7813      	ldrb	r3, [r2, #0]
 8009a12:	f023 0304 	bic.w	r3, r3, #4
 8009a16:	7013      	strb	r3, [r2, #0]
      send = true;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009a1e:	e15a      	b.n	8009cd6 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8009a20:	4ba1      	ldr	r3, [pc, #644]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 814e 	beq.w	8009ccc <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8009a30:	4a9d      	ldr	r2, [pc, #628]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a32:	7813      	ldrb	r3, [r2, #0]
 8009a34:	f043 0304 	orr.w	r3, r3, #4
 8009a38:	7013      	strb	r3, [r2, #0]
        send = true;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009a40:	e144      	b.n	8009ccc <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8009a42:	4b99      	ldr	r3, [pc, #612]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 813f 	beq.w	8009cd0 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8009a52:	4a95      	ldr	r2, [pc, #596]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009a54:	7813      	ldrb	r3, [r2, #0]
 8009a56:	f023 0304 	bic.w	r3, r3, #4
 8009a5a:	7013      	strb	r3, [r2, #0]
        send = true;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009a62:	e135      	b.n	8009cd0 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009a64:	2300      	movs	r3, #0
 8009a66:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009a6a:	e039      	b.n	8009ae0 <dcd_event_handler+0x124>
 8009a6c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009a70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009a78:	4b8c      	ldr	r3, [pc, #560]	@ (8009cac <dcd_event_handler+0x2f0>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d207      	bcs.n	8009a94 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009a84:	4b8a      	ldr	r3, [pc, #552]	@ (8009cb0 <dcd_event_handler+0x2f4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a8c:	015b      	lsls	r3, r3, #5
 8009a8e:	4413      	add	r3, r2
 8009a90:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a92:	e00f      	b.n	8009ab4 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009a94:	4b85      	ldr	r3, [pc, #532]	@ (8009cac <dcd_event_handler+0x2f0>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	db08      	blt.n	8009ab4 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009aa2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009aa6:	4a81      	ldr	r2, [pc, #516]	@ (8009cac <dcd_event_handler+0x2f0>)
 8009aa8:	7812      	ldrb	r2, [r2, #0]
 8009aaa:	1a9b      	subs	r3, r3, r2
 8009aac:	015b      	lsls	r3, r3, #5
 8009aae:	4a81      	ldr	r2, [pc, #516]	@ (8009cb4 <dcd_event_handler+0x2f8>)
 8009ab0:	4413      	add	r3, r2
 8009ab2:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8009ab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8009ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8009ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <dcd_event_handler+0x11a>
 8009abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d007      	beq.n	8009ad6 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8009ac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	7810      	ldrb	r0, [r2, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6852      	ldr	r2, [r2, #4]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009ad6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009ada:	3301      	adds	r3, #1
 8009adc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009ae0:	4b72      	ldr	r3, [pc, #456]	@ (8009cac <dcd_event_handler+0x2f0>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009aea:	429a      	cmp	r2, r3
 8009aec:	dabe      	bge.n	8009a6c <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8009aee:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d05a      	beq.n	8009bb2 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8009afc:	4a6a      	ldr	r2, [pc, #424]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009afe:	7813      	ldrb	r3, [r2, #0]
 8009b00:	f023 0304 	bic.w	r3, r3, #4
 8009b04:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	605a      	str	r2, [r3, #4]
 8009b10:	609a      	str	r2, [r3, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	753b      	strb	r3, [r7, #20]
 8009b18:	2305      	movs	r3, #5
 8009b1a:	757b      	strb	r3, [r7, #21]
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009b28:	4b63      	ldr	r3, [pc, #396]	@ (8009cb8 <dcd_event_handler+0x2fc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b32:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b3e:	f083 0301 	eor.w	r3, r3, #1
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b52:	3304      	adds	r3, #4
 8009b54:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fde9 	bl	800872e <tu_fifo_write>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009b62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b66:	f083 0301 	eor.w	r3, r3, #1
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2001      	movs	r0, #1
 8009b76:	4798      	blx	r3
  }

  return success;
 8009b78:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b7c:	f083 0301 	eor.w	r3, r3, #1
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <dcd_event_handler+0x1de>
 8009b86:	4b4d      	ldr	r3, [pc, #308]	@ (8009cbc <dcd_event_handler+0x300>)
 8009b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00c      	beq.n	8009bb0 <dcd_event_handler+0x1f4>
 8009b96:	be00      	bkpt	0x0000
 8009b98:	e00a      	b.n	8009bb0 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b9c:	7818      	ldrb	r0, [r3, #0]
 8009b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f7fe fe55 	bl	8008858 <tud_event_hook_cb>
  return true;
 8009bae:	e000      	b.n	8009bb2 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009bb0:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8009ca8 <dcd_event_handler+0x2ec>)
 8009bb4:	78db      	ldrb	r3, [r3, #3]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009bc0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009bc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bf14      	ite	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	2300      	moveq	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d07b      	beq.n	8009cd4 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8009bdc:	f107 0308 	add.w	r3, r7, #8
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	609a      	str	r2, [r3, #8]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	723b      	strb	r3, [r7, #8]
 8009bee:	2303      	movs	r3, #3
 8009bf0:	727b      	strb	r3, [r7, #9]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	f107 0308 	add.w	r3, r7, #8
 8009bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009c04:	4b2c      	ldr	r3, [pc, #176]	@ (8009cb8 <dcd_event_handler+0x2fc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c0e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009c12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009c16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c1a:	f083 0301 	eor.w	r3, r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c2e:	3304      	adds	r3, #4
 8009c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fd7b 	bl	800872e <tu_fifo_write>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c42:	f083 0301 	eor.w	r3, r3, #1
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2001      	movs	r0, #1
 8009c52:	4798      	blx	r3
  return success;
 8009c54:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c58:	f083 0301 	eor.w	r3, r3, #1
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <dcd_event_handler+0x2ba>
 8009c62:	4b16      	ldr	r3, [pc, #88]	@ (8009cbc <dcd_event_handler+0x300>)
 8009c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00c      	beq.n	8009c8c <dcd_event_handler+0x2d0>
 8009c72:	be00      	bkpt	0x0000
 8009c74:	e00a      	b.n	8009c8c <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c78:	7818      	ldrb	r0, [r3, #0]
 8009c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009c84:	461a      	mov	r2, r3
 8009c86:	f7fe fde7 	bl	8008858 <tud_event_hook_cb>
  return true;
 8009c8a:	e000      	b.n	8009c8e <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009c8c:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009c8e:	e021      	b.n	8009cd4 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009c90:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc0 <dcd_event_handler+0x304>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	3301      	adds	r3, #1
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b09      	ldr	r3, [pc, #36]	@ (8009cc0 <dcd_event_handler+0x304>)
 8009c9c:	701a      	strb	r2, [r3, #0]
      send = true;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009ca4:	e017      	b.n	8009cd6 <dcd_event_handler+0x31a>
 8009ca6:	bf00      	nop
 8009ca8:	20001714 	.word	0x20001714
 8009cac:	20001748 	.word	0x20001748
 8009cb0:	20001744 	.word	0x20001744
 8009cb4:	0800ef8c 	.word	0x0800ef8c
 8009cb8:	2000180c 	.word	0x2000180c
 8009cbc:	e000edf0 	.word	0xe000edf0
 8009cc0:	20001740 	.word	0x20001740

    default:
      send = true;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009cca:	e004      	b.n	8009cd6 <dcd_event_handler+0x31a>
      break;
 8009ccc:	bf00      	nop
 8009cce:	e002      	b.n	8009cd6 <dcd_event_handler+0x31a>
      break;
 8009cd0:	bf00      	nop
 8009cd2:	e000      	b.n	8009cd6 <dcd_event_handler+0x31a>
      break;
 8009cd4:	bf00      	nop
  }

  if (send) {
 8009cd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d049      	beq.n	8009d72 <dcd_event_handler+0x3b6>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ce8:	4b24      	ldr	r3, [pc, #144]	@ (8009d7c <dcd_event_handler+0x3c0>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cfe:	f083 0301 	eor.w	r3, r3, #1
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d12:	3304      	adds	r3, #4
 8009d14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fd09 	bl	800872e <tu_fifo_write>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d26:	f083 0301 	eor.w	r3, r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2001      	movs	r0, #1
 8009d36:	4798      	blx	r3
  return success;
 8009d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d3c:	f083 0301 	eor.w	r3, r3, #1
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <dcd_event_handler+0x39e>
 8009d46:	4b0e      	ldr	r3, [pc, #56]	@ (8009d80 <dcd_event_handler+0x3c4>)
 8009d48:	623b      	str	r3, [r7, #32]
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00c      	beq.n	8009d70 <dcd_event_handler+0x3b4>
 8009d56:	be00      	bkpt	0x0000
 8009d58:	e00a      	b.n	8009d70 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5c:	7818      	ldrb	r0, [r3, #0]
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	4619      	mov	r1, r3
 8009d64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f7fe fd75 	bl	8008858 <tud_event_hook_cb>
  return true;
 8009d6e:	e000      	b.n	8009d72 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009d70:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8009d72:	bf00      	nop
 8009d74:	3780      	adds	r7, #128	@ 0x80
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	2000180c 	.word	0x2000180c
 8009d80:	e000edf0 	.word	0xe000edf0

08009d84 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8009d94:	4b07      	ldr	r3, [pc, #28]	@ (8009db4 <usbd_int_set+0x30>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 f929 	bl	800aff0 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8009d9e:	e004      	b.n	8009daa <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009da0:	4b04      	ldr	r3, [pc, #16]	@ (8009db4 <usbd_int_set+0x30>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 f94b 	bl	800b040 <dcd_int_disable>
}
 8009daa:	bf00      	nop
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	2000022d 	.word	0x2000022d

08009db8 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	71fb      	strb	r3, [r7, #7]
 8009dc2:	4b09      	ldr	r3, [pc, #36]	@ (8009de8 <usbd_spin_lock+0x30>)
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	f083 0301 	eor.w	r3, r3, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	4798      	blx	r3
}
 8009dde:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000230 	.word	0x20000230

08009dec <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
 8009df6:	4b09      	ldr	r3, [pc, #36]	@ (8009e1c <usbd_spin_unlock+0x30>)
 8009df8:	60fb      	str	r3, [r7, #12]
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	f083 0301 	eor.w	r3, r3, #1
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2001      	movs	r0, #1
 8009e10:	4798      	blx	r3
}
 8009e12:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8009e14:	bf00      	nop
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20000230 	.word	0x20000230

08009e20 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	@ 0x28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6039      	str	r1, [r7, #0]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	71fb      	strb	r3, [r7, #7]
 8009e30:	460b      	mov	r3, r1
 8009e32:	71bb      	strb	r3, [r7, #6]
 8009e34:	4613      	mov	r3, r2
 8009e36:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e3c:	e04d      	b.n	8009eda <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	d108      	bne.n	8009e5c <usbd_open_edpt_pair+0x3c>
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	78db      	ldrb	r3, [r3, #3]
 8009e4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	797b      	ldrb	r3, [r7, #5]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00a      	beq.n	8009e72 <usbd_open_edpt_pair+0x52>
 8009e5c:	4b23      	ldr	r3, [pc, #140]	@ (8009eec <usbd_open_edpt_pair+0xcc>)
 8009e5e:	61bb      	str	r3, [r7, #24]
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d000      	beq.n	8009e6e <usbd_open_edpt_pair+0x4e>
 8009e6c:	be00      	bkpt	0x0000
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e038      	b.n	8009ee4 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	6a39      	ldr	r1, [r7, #32]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 f83a 	bl	8009ef0 <usbd_edpt_open>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	f083 0301 	eor.w	r3, r3, #1
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <usbd_open_edpt_pair+0x7e>
 8009e88:	4b18      	ldr	r3, [pc, #96]	@ (8009eec <usbd_open_edpt_pair+0xcc>)
 8009e8a:	61fb      	str	r3, [r7, #28]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d000      	beq.n	8009e9a <usbd_open_edpt_pair+0x7a>
 8009e98:	be00      	bkpt	0x0000
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e022      	b.n	8009ee4 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	789b      	ldrb	r3, [r3, #2]
 8009ea2:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	09db      	lsrs	r3, r3, #7
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d104      	bne.n	8009eb8 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	789a      	ldrb	r2, [r3, #2]
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e003      	b.n	8009ec0 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	789a      	ldrb	r2, [r3, #2]
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	701a      	strb	r2, [r3, #0]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8009ed2:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eda:	79bb      	ldrb	r3, [r7, #6]
 8009edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	dbad      	blt.n	8009e3e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8009ee2:	2301      	movs	r3, #1
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3728      	adds	r7, #40	@ 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	e000edf0 	.word	0xe000edf0

08009ef0 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8009efc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f70 <usbd_edpt_open+0x80>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	789b      	ldrb	r3, [r3, #2]
 8009f06:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b05      	cmp	r3, #5
 8009f12:	d90a      	bls.n	8009f2a <usbd_edpt_open+0x3a>
 8009f14:	4b17      	ldr	r3, [pc, #92]	@ (8009f74 <usbd_edpt_open+0x84>)
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d000      	beq.n	8009f26 <usbd_edpt_open+0x36>
 8009f24:	be00      	bkpt	0x0000
 8009f26:	2300      	movs	r3, #0
 8009f28:	e01d      	b.n	8009f66 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8009f2a:	4b13      	ldr	r3, [pc, #76]	@ (8009f78 <usbd_edpt_open+0x88>)
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4619      	mov	r1, r3
 8009f32:	6838      	ldr	r0, [r7, #0]
 8009f34:	f002 fbae 	bl	800c694 <tu_edpt_validate>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f083 0301 	eor.w	r3, r3, #1
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <usbd_edpt_open+0x6a>
 8009f44:	4b0b      	ldr	r3, [pc, #44]	@ (8009f74 <usbd_edpt_open+0x84>)
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d000      	beq.n	8009f56 <usbd_edpt_open+0x66>
 8009f54:	be00      	bkpt	0x0000
 8009f56:	2300      	movs	r3, #0
 8009f58:	e005      	b.n	8009f66 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 f992 	bl	800b288 <dcd_edpt_open>
 8009f64:	4603      	mov	r3, r0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	2000022d 	.word	0x2000022d
 8009f74:	e000edf0 	.word	0xe000edf0
 8009f78:	20001714 	.word	0x20001714

08009f7c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	460a      	mov	r2, r1
 8009f86:	71fb      	strb	r3, [r7, #7]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	71bb      	strb	r3, [r7, #6]
 8009f8c:	79bb      	ldrb	r3, [r7, #6]
 8009f8e:	73bb      	strb	r3, [r7, #14]
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f96:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f98:	75fb      	strb	r3, [r7, #23]
 8009f9a:	79bb      	ldrb	r3, [r7, #6]
 8009f9c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	09db      	lsrs	r3, r3, #7
 8009fa2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009fa4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009fa6:	7dfa      	ldrb	r2, [r7, #23]
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	0052      	lsls	r2, r2, #1
 8009fac:	4413      	add	r3, r2
 8009fae:	3320      	adds	r3, #32
 8009fb0:	4a05      	ldr	r2, [pc, #20]	@ (8009fc8 <usbd_edpt_claim+0x4c>)
 8009fb2:	4413      	add	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6938      	ldr	r0, [r7, #16]
 8009fba:	f002 fb07 	bl	800c5cc <tu_edpt_claim>
 8009fbe:	4603      	mov	r3, r0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001714 	.word	0x20001714

08009fcc <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	71fb      	strb	r3, [r7, #7]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	71bb      	strb	r3, [r7, #6]
 8009fdc:	79bb      	ldrb	r3, [r7, #6]
 8009fde:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
 8009fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fe6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009fe8:	75fb      	strb	r3, [r7, #23]
 8009fea:	79bb      	ldrb	r3, [r7, #6]
 8009fec:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	09db      	lsrs	r3, r3, #7
 8009ff2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009ff4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009ff6:	7dfa      	ldrb	r2, [r7, #23]
 8009ff8:	7dbb      	ldrb	r3, [r7, #22]
 8009ffa:	0052      	lsls	r2, r2, #1
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3320      	adds	r3, #32
 800a000:	4a05      	ldr	r2, [pc, #20]	@ (800a018 <usbd_edpt_release+0x4c>)
 800a002:	4413      	add	r3, r2
 800a004:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800a006:	2100      	movs	r1, #0
 800a008:	6938      	ldr	r0, [r7, #16]
 800a00a:	f002 fb19 	bl	800c640 <tu_edpt_release>
 800a00e:	4603      	mov	r3, r0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20001714 	.word	0x20001714

0800a01c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	603a      	str	r2, [r7, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
 800a02a:	460b      	mov	r3, r1
 800a02c:	71bb      	strb	r3, [r7, #6]
 800a02e:	4613      	mov	r3, r2
 800a030:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800a032:	4b32      	ldr	r3, [pc, #200]	@ (800a0fc <usbd_edpt_xfer+0xe0>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	71fb      	strb	r3, [r7, #7]
 800a038:	79bb      	ldrb	r3, [r7, #6]
 800a03a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a03c:	7abb      	ldrb	r3, [r7, #10]
 800a03e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a042:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a044:	75fb      	strb	r3, [r7, #23]
 800a046:	79bb      	ldrb	r3, [r7, #6]
 800a048:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	09db      	lsrs	r3, r3, #7
 800a04e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a050:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800a052:	7dfa      	ldrb	r2, [r7, #23]
 800a054:	7dbb      	ldrb	r3, [r7, #22]
 800a056:	492a      	ldr	r1, [pc, #168]	@ (800a100 <usbd_edpt_xfer+0xe4>)
 800a058:	0052      	lsls	r2, r2, #1
 800a05a:	440a      	add	r2, r1
 800a05c:	4413      	add	r3, r2
 800a05e:	3320      	adds	r3, #32
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <usbd_edpt_xfer+0x66>
 800a06c:	4b25      	ldr	r3, [pc, #148]	@ (800a104 <usbd_edpt_xfer+0xe8>)
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d000      	beq.n	800a07e <usbd_edpt_xfer+0x62>
 800a07c:	be00      	bkpt	0x0000
 800a07e:	2300      	movs	r3, #0
 800a080:	e038      	b.n	800a0f4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a082:	7dfa      	ldrb	r2, [r7, #23]
 800a084:	7dbb      	ldrb	r3, [r7, #22]
 800a086:	491e      	ldr	r1, [pc, #120]	@ (800a100 <usbd_edpt_xfer+0xe4>)
 800a088:	0052      	lsls	r2, r2, #1
 800a08a:	440a      	add	r2, r1
 800a08c:	4413      	add	r3, r2
 800a08e:	f103 0220 	add.w	r2, r3, #32
 800a092:	7813      	ldrb	r3, [r2, #0]
 800a094:	f043 0301 	orr.w	r3, r3, #1
 800a098:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a09a:	88bb      	ldrh	r3, [r7, #4]
 800a09c:	79b9      	ldrb	r1, [r7, #6]
 800a09e:	79f8      	ldrb	r0, [r7, #7]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	f001 f9b5 	bl	800b410 <dcd_edpt_xfer>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <usbd_edpt_xfer+0x94>
    return true;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e021      	b.n	800a0f4 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a0b0:	7dfa      	ldrb	r2, [r7, #23]
 800a0b2:	7dbb      	ldrb	r3, [r7, #22]
 800a0b4:	4912      	ldr	r1, [pc, #72]	@ (800a100 <usbd_edpt_xfer+0xe4>)
 800a0b6:	0052      	lsls	r2, r2, #1
 800a0b8:	440a      	add	r2, r1
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f103 0220 	add.w	r2, r3, #32
 800a0c0:	7813      	ldrb	r3, [r2, #0]
 800a0c2:	f023 0301 	bic.w	r3, r3, #1
 800a0c6:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a0c8:	7dfa      	ldrb	r2, [r7, #23]
 800a0ca:	7dbb      	ldrb	r3, [r7, #22]
 800a0cc:	490c      	ldr	r1, [pc, #48]	@ (800a100 <usbd_edpt_xfer+0xe4>)
 800a0ce:	0052      	lsls	r2, r2, #1
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f103 0220 	add.w	r2, r3, #32
 800a0d8:	7813      	ldrb	r3, [r2, #0]
 800a0da:	f023 0304 	bic.w	r3, r3, #4
 800a0de:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a0e0:	4b08      	ldr	r3, [pc, #32]	@ (800a104 <usbd_edpt_xfer+0xe8>)
 800a0e2:	613b      	str	r3, [r7, #16]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d000      	beq.n	800a0f2 <usbd_edpt_xfer+0xd6>
 800a0f0:	be00      	bkpt	0x0000
    return false;
 800a0f2:	2300      	movs	r3, #0
  }
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	2000022d 	.word	0x2000022d
 800a100:	20001714 	.word	0x20001714
 800a104:	e000edf0 	.word	0xe000edf0

0800a108 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	460a      	mov	r2, r1
 800a112:	71fb      	strb	r3, [r7, #7]
 800a114:	4613      	mov	r3, r2
 800a116:	71bb      	strb	r3, [r7, #6]
 800a118:	79bb      	ldrb	r3, [r7, #6]
 800a11a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a11c:	7b3b      	ldrb	r3, [r7, #12]
 800a11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a122:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a124:	73fb      	strb	r3, [r7, #15]
 800a126:	79bb      	ldrb	r3, [r7, #6]
 800a128:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a12a:	7b7b      	ldrb	r3, [r7, #13]
 800a12c:	09db      	lsrs	r3, r3, #7
 800a12e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a130:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a132:	7bfa      	ldrb	r2, [r7, #15]
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	490a      	ldr	r1, [pc, #40]	@ (800a160 <usbd_edpt_busy+0x58>)
 800a138:	0052      	lsls	r2, r2, #1
 800a13a:	440a      	add	r2, r1
 800a13c:	4413      	add	r3, r2
 800a13e:	3320      	adds	r3, #32
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bf14      	ite	ne
 800a14c:	2301      	movne	r3, #1
 800a14e:	2300      	moveq	r3, #0
 800a150:	b2db      	uxtb	r3, r3
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	20001714 	.word	0x20001714

0800a164 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	460a      	mov	r2, r1
 800a16e:	71fb      	strb	r3, [r7, #7]
 800a170:	4613      	mov	r3, r2
 800a172:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a174:	4b18      	ldr	r3, [pc, #96]	@ (800a1d8 <usbd_edpt_stall+0x74>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	71fb      	strb	r3, [r7, #7]
 800a17a:	79bb      	ldrb	r3, [r7, #6]
 800a17c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a17e:	7b3b      	ldrb	r3, [r7, #12]
 800a180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a184:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	79bb      	ldrb	r3, [r7, #6]
 800a18a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a18c:	7b7b      	ldrb	r3, [r7, #13]
 800a18e:	09db      	lsrs	r3, r3, #7
 800a190:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a192:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a194:	79ba      	ldrb	r2, [r7, #6]
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	4611      	mov	r1, r2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 f988 	bl	800b4b0 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a1a0:	7bfa      	ldrb	r2, [r7, #15]
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	490d      	ldr	r1, [pc, #52]	@ (800a1dc <usbd_edpt_stall+0x78>)
 800a1a6:	0052      	lsls	r2, r2, #1
 800a1a8:	440a      	add	r2, r1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f103 0220 	add.w	r2, r3, #32
 800a1b0:	7813      	ldrb	r3, [r2, #0]
 800a1b2:	f043 0302 	orr.w	r3, r3, #2
 800a1b6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a1b8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	4907      	ldr	r1, [pc, #28]	@ (800a1dc <usbd_edpt_stall+0x78>)
 800a1be:	0052      	lsls	r2, r2, #1
 800a1c0:	440a      	add	r2, r1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f103 0220 	add.w	r2, r3, #32
 800a1c8:	7813      	ldrb	r3, [r2, #0]
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	7013      	strb	r3, [r2, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	2000022d 	.word	0x2000022d
 800a1dc:	20001714 	.word	0x20001714

0800a1e0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	71fb      	strb	r3, [r7, #7]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a1f0:	4b18      	ldr	r3, [pc, #96]	@ (800a254 <usbd_edpt_clear_stall+0x74>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	71fb      	strb	r3, [r7, #7]
 800a1f6:	79bb      	ldrb	r3, [r7, #6]
 800a1f8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a1fa:	7b3b      	ldrb	r3, [r7, #12]
 800a1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a200:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a202:	73fb      	strb	r3, [r7, #15]
 800a204:	79bb      	ldrb	r3, [r7, #6]
 800a206:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a208:	7b7b      	ldrb	r3, [r7, #13]
 800a20a:	09db      	lsrs	r3, r3, #7
 800a20c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a20e:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a210:	79ba      	ldrb	r2, [r7, #6]
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f001 f980 	bl	800b51c <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a21c:	7bfa      	ldrb	r2, [r7, #15]
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	490d      	ldr	r1, [pc, #52]	@ (800a258 <usbd_edpt_clear_stall+0x78>)
 800a222:	0052      	lsls	r2, r2, #1
 800a224:	440a      	add	r2, r1
 800a226:	4413      	add	r3, r2
 800a228:	f103 0220 	add.w	r2, r3, #32
 800a22c:	7813      	ldrb	r3, [r2, #0]
 800a22e:	f023 0302 	bic.w	r3, r3, #2
 800a232:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a234:	7bfa      	ldrb	r2, [r7, #15]
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	4907      	ldr	r1, [pc, #28]	@ (800a258 <usbd_edpt_clear_stall+0x78>)
 800a23a:	0052      	lsls	r2, r2, #1
 800a23c:	440a      	add	r2, r1
 800a23e:	4413      	add	r3, r2
 800a240:	f103 0220 	add.w	r2, r3, #32
 800a244:	7813      	ldrb	r3, [r2, #0]
 800a246:	f023 0301 	bic.w	r3, r3, #1
 800a24a:	7013      	strb	r3, [r2, #0]
}
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	2000022d 	.word	0x2000022d
 800a258:	20001714 	.word	0x20001714

0800a25c <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	460a      	mov	r2, r1
 800a266:	71fb      	strb	r3, [r7, #7]
 800a268:	4613      	mov	r3, r2
 800a26a:	71bb      	strb	r3, [r7, #6]
 800a26c:	79bb      	ldrb	r3, [r7, #6]
 800a26e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a270:	7b3b      	ldrb	r3, [r7, #12]
 800a272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a276:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a278:	73fb      	strb	r3, [r7, #15]
 800a27a:	79bb      	ldrb	r3, [r7, #6]
 800a27c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a27e:	7b7b      	ldrb	r3, [r7, #13]
 800a280:	09db      	lsrs	r3, r3, #7
 800a282:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a284:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a286:	7bfa      	ldrb	r2, [r7, #15]
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	490a      	ldr	r1, [pc, #40]	@ (800a2b4 <usbd_edpt_stalled+0x58>)
 800a28c:	0052      	lsls	r2, r2, #1
 800a28e:	440a      	add	r2, r1
 800a290:	4413      	add	r3, r2
 800a292:	3320      	adds	r3, #32
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bf14      	ite	ne
 800a2a0:	2301      	movne	r3, #1
 800a2a2:	2300      	moveq	r3, #0
 800a2a4:	b2db      	uxtb	r3, r3
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20001714 	.word	0x20001714

0800a2b8 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <status_stage_xact+0x1e>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e000      	b.n	800a2f0 <status_stage_xact+0x20>
 800a2ee:	2380      	movs	r3, #128	@ 0x80
 800a2f0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a2f2:	7bf9      	ldrb	r1, [r7, #15]
 800a2f4:	79f8      	ldrb	r0, [r7, #7]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f7ff fe8f 	bl	800a01c <usbd_edpt_xfer>
 800a2fe:	4603      	mov	r3, r0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a314:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <tud_control_status+0x3c>)
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	6810      	ldr	r0, [r2, #0]
 800a31a:	6851      	ldr	r1, [r2, #4]
 800a31c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a31e:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <tud_control_status+0x3c>)
 800a320:	2200      	movs	r2, #0
 800a322:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a324:	4b07      	ldr	r3, [pc, #28]	@ (800a344 <tud_control_status+0x3c>)
 800a326:	2200      	movs	r2, #0
 800a328:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a32a:	4b06      	ldr	r3, [pc, #24]	@ (800a344 <tud_control_status+0x3c>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff ffcb 	bl	800a2d0 <status_stage_xact>
 800a33a:	4603      	mov	r3, r0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20001810 	.word	0x20001810

0800a348 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a352:	4b24      	ldr	r3, [pc, #144]	@ (800a3e4 <data_stage_xact+0x9c>)
 800a354:	899a      	ldrh	r2, [r3, #12]
 800a356:	4b23      	ldr	r3, [pc, #140]	@ (800a3e4 <data_stage_xact+0x9c>)
 800a358:	89db      	ldrh	r3, [r3, #14]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	837b      	strh	r3, [r7, #26]
 800a360:	2340      	movs	r3, #64	@ 0x40
 800a362:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a364:	8b7a      	ldrh	r2, [r7, #26]
 800a366:	8b3b      	ldrh	r3, [r7, #24]
 800a368:	4293      	cmp	r3, r2
 800a36a:	bf28      	it	cs
 800a36c:	4613      	movcs	r3, r2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a372:	2300      	movs	r3, #0
 800a374:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a376:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e4 <data_stage_xact+0x9c>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01e      	beq.n	800a3c2 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a384:	2380      	movs	r3, #128	@ 0x80
 800a386:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a388:	8bbb      	ldrh	r3, [r7, #28]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d019      	beq.n	800a3c2 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <data_stage_xact+0x9c>)
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	8bbb      	ldrh	r3, [r7, #28]
 800a394:	4914      	ldr	r1, [pc, #80]	@ (800a3e8 <data_stage_xact+0xa0>)
 800a396:	6179      	str	r1, [r7, #20]
 800a398:	2140      	movs	r1, #64	@ 0x40
 800a39a:	6139      	str	r1, [r7, #16]
 800a39c:	60fa      	str	r2, [r7, #12]
 800a39e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d202      	bcs.n	800a3ae <data_stage_xact+0x66>
    return -1;
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ac:	e005      	b.n	800a3ba <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	68f9      	ldr	r1, [r7, #12]
 800a3b2:	6978      	ldr	r0, [r7, #20]
 800a3b4:	f002 fd0b 	bl	800cdce <memcpy>
  return 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <data_stage_xact+0x7a>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e00b      	b.n	800a3da <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a3c2:	8bbb      	ldrh	r3, [r7, #28]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <data_stage_xact+0x84>
 800a3c8:	4a07      	ldr	r2, [pc, #28]	@ (800a3e8 <data_stage_xact+0xa0>)
 800a3ca:	e000      	b.n	800a3ce <data_stage_xact+0x86>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	8bbb      	ldrh	r3, [r7, #28]
 800a3d0:	7ff9      	ldrb	r1, [r7, #31]
 800a3d2:	79f8      	ldrb	r0, [r7, #7]
 800a3d4:	f7ff fe22 	bl	800a01c <usbd_edpt_xfer>
 800a3d8:	4603      	mov	r3, r0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3720      	adds	r7, #32
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20001810 	.word	0x20001810
 800a3e8:	20001824 	.word	0x20001824

0800a3ec <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b088      	sub	sp, #32
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a400:	4b30      	ldr	r3, [pc, #192]	@ (800a4c4 <tud_control_xfer+0xd8>)
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	6810      	ldr	r0, [r2, #0]
 800a406:	6851      	ldr	r1, [r2, #4]
 800a408:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a40a:	4a2e      	ldr	r2, [pc, #184]	@ (800a4c4 <tud_control_xfer+0xd8>)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a410:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c4 <tud_control_xfer+0xd8>)
 800a412:	2200      	movs	r2, #0
 800a414:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	89bb      	ldrh	r3, [r7, #12]
 800a41e:	827b      	strh	r3, [r7, #18]
 800a420:	4613      	mov	r3, r2
 800a422:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a424:	8a7a      	ldrh	r2, [r7, #18]
 800a426:	8a3b      	ldrh	r3, [r7, #16]
 800a428:	4293      	cmp	r3, r2
 800a42a:	bf28      	it	cs
 800a42c:	4613      	movcs	r3, r2
 800a42e:	b29a      	uxth	r2, r3
 800a430:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <tud_control_xfer+0xd8>)
 800a432:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	88db      	ldrh	r3, [r3, #6]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d026      	beq.n	800a48c <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a43e:	4b21      	ldr	r3, [pc, #132]	@ (800a4c4 <tud_control_xfer+0xd8>)
 800a440:	899b      	ldrh	r3, [r3, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00d      	beq.n	800a462 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <tud_control_xfer+0x76>
 800a44c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4c8 <tud_control_xfer+0xdc>)
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d000      	beq.n	800a45e <tud_control_xfer+0x72>
 800a45c:	be00      	bkpt	0x0000
 800a45e:	2300      	movs	r3, #0
 800a460:	e02b      	b.n	800a4ba <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff ff6f 	bl	800a348 <data_stage_xact>
 800a46a:	4603      	mov	r3, r0
 800a46c:	f083 0301 	eor.w	r3, r3, #1
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d020      	beq.n	800a4b8 <tud_control_xfer+0xcc>
 800a476:	4b14      	ldr	r3, [pc, #80]	@ (800a4c8 <tud_control_xfer+0xdc>)
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d000      	beq.n	800a488 <tud_control_xfer+0x9c>
 800a486:	be00      	bkpt	0x0000
 800a488:	2300      	movs	r3, #0
 800a48a:	e016      	b.n	800a4ba <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff ff1d 	bl	800a2d0 <status_stage_xact>
 800a496:	4603      	mov	r3, r0
 800a498:	f083 0301 	eor.w	r3, r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <tud_control_xfer+0xcc>
 800a4a2:	4b09      	ldr	r3, [pc, #36]	@ (800a4c8 <tud_control_xfer+0xdc>)
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d000      	beq.n	800a4b4 <tud_control_xfer+0xc8>
 800a4b2:	be00      	bkpt	0x0000
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e000      	b.n	800a4ba <tud_control_xfer+0xce>
  }

  return true;
 800a4b8:	2301      	movs	r3, #1
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20001810 	.word	0x20001810
 800a4c8:	e000edf0 	.word	0xe000edf0

0800a4cc <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a4d0:	2214      	movs	r2, #20
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4802      	ldr	r0, [pc, #8]	@ (800a4e0 <usbd_control_reset+0x14>)
 800a4d6:	f002 fba2 	bl	800cc1e <memset>
}
 800a4da:	bf00      	nop
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20001810 	.word	0x20001810

0800a4e4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a4ec:	4a04      	ldr	r2, [pc, #16]	@ (800a500 <usbd_control_set_complete_callback+0x1c>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6113      	str	r3, [r2, #16]
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20001810 	.word	0x20001810

0800a504 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a50c:	4b09      	ldr	r3, [pc, #36]	@ (800a534 <usbd_control_set_request+0x30>)
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6810      	ldr	r0, [r2, #0]
 800a512:	6851      	ldr	r1, [r2, #4]
 800a514:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a516:	4b07      	ldr	r3, [pc, #28]	@ (800a534 <usbd_control_set_request+0x30>)
 800a518:	2200      	movs	r2, #0
 800a51a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a51c:	4b05      	ldr	r3, [pc, #20]	@ (800a534 <usbd_control_set_request+0x30>)
 800a51e:	2200      	movs	r2, #0
 800a520:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a522:	4b04      	ldr	r3, [pc, #16]	@ (800a534 <usbd_control_set_request+0x30>)
 800a524:	2200      	movs	r2, #0
 800a526:	819a      	strh	r2, [r3, #12]
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20001810 	.word	0x20001810

0800a538 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	4603      	mov	r3, r0
 800a542:	71fb      	strb	r3, [r7, #7]
 800a544:	460b      	mov	r3, r1
 800a546:	71bb      	strb	r3, [r7, #6]
 800a548:	4613      	mov	r3, r2
 800a54a:	717b      	strb	r3, [r7, #5]
 800a54c:	79bb      	ldrb	r3, [r7, #6]
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	09db      	lsrs	r3, r3, #7
 800a554:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a556:	4a4f      	ldr	r2, [pc, #316]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	4293      	cmp	r3, r2
 800a562:	d01e      	beq.n	800a5a2 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <usbd_control_xfer_cb+0x48>
 800a56a:	4b4b      	ldr	r3, [pc, #300]	@ (800a698 <usbd_control_xfer_cb+0x160>)
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d000      	beq.n	800a57c <usbd_control_xfer_cb+0x44>
 800a57a:	be00      	bkpt	0x0000
 800a57c:	2300      	movs	r3, #0
 800a57e:	e084      	b.n	800a68a <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	4944      	ldr	r1, [pc, #272]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fe97 	bl	800a2b8 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a58a:	4b42      	ldr	r3, [pc, #264]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d005      	beq.n	800a59e <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a592:	4b40      	ldr	r3, [pc, #256]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	79f8      	ldrb	r0, [r7, #7]
 800a598:	4a3e      	ldr	r2, [pc, #248]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a59a:	2103      	movs	r1, #3
 800a59c:	4798      	blx	r3
    }

    return true;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e073      	b.n	800a68a <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a5a2:	4b3c      	ldr	r3, [pc, #240]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a5b0:	4b38      	ldr	r3, [pc, #224]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <usbd_control_xfer_cb+0x84>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e066      	b.n	800a68a <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a5bc:	4b35      	ldr	r3, [pc, #212]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	4936      	ldr	r1, [pc, #216]	@ (800a69c <usbd_control_xfer_cb+0x164>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f002 fc02 	bl	800cdce <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a5ca:	4b32      	ldr	r3, [pc, #200]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5cc:	89da      	ldrh	r2, [r3, #14]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5d8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a5da:	4b2e      	ldr	r3, [pc, #184]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5e4:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5e8:	88da      	ldrh	r2, [r3, #6]
 800a5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5ec:	89db      	ldrh	r3, [r3, #14]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d002      	beq.n	800a5f8 <usbd_control_xfer_cb+0xc0>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5f6:	d831      	bhi.n	800a65c <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a5fc:	4b25      	ldr	r3, [pc, #148]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a604:	4b23      	ldr	r3, [pc, #140]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	79f8      	ldrb	r0, [r7, #7]
 800a60a:	4a22      	ldr	r2, [pc, #136]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a60c:	2102      	movs	r1, #2
 800a60e:	4798      	blx	r3
 800a610:	4603      	mov	r3, r0
 800a612:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a614:	7ffb      	ldrb	r3, [r7, #31]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d015      	beq.n	800a646 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	491d      	ldr	r1, [pc, #116]	@ (800a694 <usbd_control_xfer_cb+0x15c>)
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fe56 	bl	800a2d0 <status_stage_xact>
 800a624:	4603      	mov	r3, r0
 800a626:	f083 0301 	eor.w	r3, r3, #1
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d02a      	beq.n	800a686 <usbd_control_xfer_cb+0x14e>
 800a630:	4b19      	ldr	r3, [pc, #100]	@ (800a698 <usbd_control_xfer_cb+0x160>)
 800a632:	617b      	str	r3, [r7, #20]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d000      	beq.n	800a642 <usbd_control_xfer_cb+0x10a>
 800a640:	be00      	bkpt	0x0000
 800a642:	2300      	movs	r3, #0
 800a644:	e021      	b.n	800a68a <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	2100      	movs	r1, #0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 ff30 	bl	800b4b0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2180      	movs	r1, #128	@ 0x80
 800a654:	4618      	mov	r0, r3
 800a656:	f000 ff2b 	bl	800b4b0 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a65a:	e014      	b.n	800a686 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff fe72 	bl	800a348 <data_stage_xact>
 800a664:	4603      	mov	r3, r0
 800a666:	f083 0301 	eor.w	r3, r3, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <usbd_control_xfer_cb+0x150>
 800a670:	4b09      	ldr	r3, [pc, #36]	@ (800a698 <usbd_control_xfer_cb+0x160>)
 800a672:	61bb      	str	r3, [r7, #24]
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d000      	beq.n	800a682 <usbd_control_xfer_cb+0x14a>
 800a680:	be00      	bkpt	0x0000
 800a682:	2300      	movs	r3, #0
 800a684:	e001      	b.n	800a68a <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a686:	bf00      	nop
  }

  return true;
 800a688:	2301      	movs	r3, #1
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20001810 	.word	0x20001810
 800a698:	e000edf0 	.word	0xe000edf0
 800a69c:	20001824 	.word	0x20001824

0800a6a0 <__NVIC_EnableIRQ>:
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	db0b      	blt.n	800a6ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	f003 021f 	and.w	r2, r3, #31
 800a6b8:	4907      	ldr	r1, [pc, #28]	@ (800a6d8 <__NVIC_EnableIRQ+0x38>)
 800a6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	e000e100 	.word	0xe000e100

0800a6dc <__NVIC_DisableIRQ>:
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	db12      	blt.n	800a714 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	f003 021f 	and.w	r2, r3, #31
 800a6f4:	490a      	ldr	r1, [pc, #40]	@ (800a720 <__NVIC_DisableIRQ+0x44>)
 800a6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	fa00 f202 	lsl.w	r2, r0, r2
 800a702:	3320      	adds	r3, #32
 800a704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a708:	f3bf 8f4f 	dsb	sy
}
 800a70c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a70e:	f3bf 8f6f 	isb	sy
}
 800a712:	bf00      	nop
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	e000e100 	.word	0xe000e100

0800a724 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a73c:	7afb      	ldrb	r3, [r7, #11]
 800a73e:	4a13      	ldr	r2, [pc, #76]	@ (800a78c <dma_setup_prepare+0x68>)
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	4413      	add	r3, r2
 800a744:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a746:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74c:	4a10      	ldr	r2, [pc, #64]	@ (800a790 <dma_setup_prepare+0x6c>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d904      	bls.n	800a75c <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a758:	2b00      	cmp	r3, #0
 800a75a:	db10      	blt.n	800a77e <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a0d      	ldr	r2, [pc, #52]	@ (800a794 <dma_setup_prepare+0x70>)
 800a760:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800a764:	4a0c      	ldr	r2, [pc, #48]	@ (800a798 <dma_setup_prepare+0x74>)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a772:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800a77c:	e000      	b.n	800a780 <dma_setup_prepare+0x5c>
      return;
 800a77e:	bf00      	nop
}
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	0800efcc 	.word	0x0800efcc
 800a790:	4f543009 	.word	0x4f543009
 800a794:	20080008 	.word	0x20080008
 800a798:	200018ec 	.word	0x200018ec

0800a79c <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800a79c:	b480      	push	{r7}
 800a79e:	b091      	sub	sp, #68	@ 0x44
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	71fb      	strb	r3, [r7, #7]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	71bb      	strb	r3, [r7, #6]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	80bb      	strh	r3, [r7, #4]
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a7b2:	7e7b      	ldrb	r3, [r7, #25]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <dfifo_alloc+0x20>
    rhport = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a7bc:	7e7b      	ldrb	r3, [r7, #25]
 800a7be:	4a65      	ldr	r2, [pc, #404]	@ (800a954 <dfifo_alloc+0x1b8>)
 800a7c0:	011b      	lsls	r3, r3, #4
 800a7c2:	4413      	add	r3, r2
 800a7c4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	4a61      	ldr	r2, [pc, #388]	@ (800a954 <dfifo_alloc+0x1b8>)
 800a7ce:	4413      	add	r3, r2
 800a7d0:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d4:	7a1b      	ldrb	r3, [r3, #8]
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a7da:	79bb      	ldrb	r3, [r7, #6]
 800a7dc:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a7de:	7ebb      	ldrb	r3, [r7, #26]
 800a7e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7e4:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a7e6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800a7ea:	79bb      	ldrb	r3, [r7, #6]
 800a7ec:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a7ee:	7efb      	ldrb	r3, [r7, #27]
 800a7f0:	09db      	lsrs	r3, r3, #7
 800a7f2:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a7f4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800a7f8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800a7fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a800:	429a      	cmp	r2, r3
 800a802:	d30a      	bcc.n	800a81a <dfifo_alloc+0x7e>
 800a804:	4b54      	ldr	r3, [pc, #336]	@ (800a958 <dfifo_alloc+0x1bc>)
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d000      	beq.n	800a816 <dfifo_alloc+0x7a>
 800a814:	be00      	bkpt	0x0000
 800a816:	2300      	movs	r3, #0
 800a818:	e095      	b.n	800a946 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800a81a:	88bb      	ldrh	r3, [r7, #4]
 800a81c:	617b      	str	r3, [r7, #20]
 800a81e:	2304      	movs	r3, #4
 800a820:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	1e5a      	subs	r2, r3, #1
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a830:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800a832:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800a836:	2b00      	cmp	r3, #0
 800a838:	d12a      	bne.n	800a890 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a83a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	81fb      	strh	r3, [r7, #14]
 800a842:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a846:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a848:	89fb      	ldrh	r3, [r7, #14]
 800a84a:	089b      	lsrs	r3, r3, #2
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f103 0208 	add.w	r2, r3, #8
 800a852:	7b7b      	ldrb	r3, [r7, #13]
 800a854:	4413      	add	r3, r2
 800a856:	b29b      	uxth	r3, r3
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a85c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a862:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a864:	429a      	cmp	r2, r3
 800a866:	d26d      	bcs.n	800a944 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800a868:	4b3c      	ldr	r3, [pc, #240]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a86a:	889b      	ldrh	r3, [r3, #4]
 800a86c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a86e:	429a      	cmp	r2, r3
 800a870:	d90a      	bls.n	800a888 <dfifo_alloc+0xec>
 800a872:	4b39      	ldr	r3, [pc, #228]	@ (800a958 <dfifo_alloc+0x1bc>)
 800a874:	623b      	str	r3, [r7, #32]
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d000      	beq.n	800a884 <dfifo_alloc+0xe8>
 800a882:	be00      	bkpt	0x0000
 800a884:	2300      	movs	r3, #0
 800a886:	e05e      	b.n	800a946 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800a888:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a88e:	e059      	b.n	800a944 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800a890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a892:	7a5b      	ldrb	r3, [r3, #9]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d016      	beq.n	800a8c6 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800a898:	4b30      	ldr	r3, [pc, #192]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a89a:	799a      	ldrb	r2, [r3, #6]
 800a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89e:	7a5b      	ldrb	r3, [r3, #9]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d30a      	bcc.n	800a8ba <dfifo_alloc+0x11e>
 800a8a4:	4b2c      	ldr	r3, [pc, #176]	@ (800a958 <dfifo_alloc+0x1bc>)
 800a8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d000      	beq.n	800a8b6 <dfifo_alloc+0x11a>
 800a8b4:	be00      	bkpt	0x0000
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e045      	b.n	800a946 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800a8ba:	4b28      	ldr	r3, [pc, #160]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a8bc:	799b      	ldrb	r3, [r3, #6]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	4b26      	ldr	r3, [pc, #152]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a8c4:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800a8d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800a8d8:	4b20      	ldr	r3, [pc, #128]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e4:	4413      	add	r3, r2
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	d20a      	bcs.n	800a900 <dfifo_alloc+0x164>
 800a8ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a958 <dfifo_alloc+0x1bc>)
 800a8ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d000      	beq.n	800a8fc <dfifo_alloc+0x160>
 800a8fa:	be00      	bkpt	0x0000
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e022      	b.n	800a946 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800a900:	4b16      	ldr	r3, [pc, #88]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a902:	889a      	ldrh	r2, [r3, #4]
 800a904:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	b29a      	uxth	r2, r3
 800a90a:	4b14      	ldr	r3, [pc, #80]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a90c:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800a90e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800a916:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a918:	041b      	lsls	r3, r3, #16
 800a91a:	4a10      	ldr	r2, [pc, #64]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a91c:	8892      	ldrh	r2, [r2, #4]
 800a91e:	4313      	orrs	r3, r2
 800a920:	461a      	mov	r2, r3
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	629a      	str	r2, [r3, #40]	@ 0x28
 800a926:	e00d      	b.n	800a944 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800a928:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a92a:	041b      	lsls	r3, r3, #16
 800a92c:	4a0b      	ldr	r2, [pc, #44]	@ (800a95c <dfifo_alloc+0x1c0>)
 800a92e:	8892      	ldrh	r2, [r2, #4]
 800a930:	431a      	orrs	r2, r3
 800a932:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a936:	3b01      	subs	r3, #1
 800a938:	4611      	mov	r1, r2
 800a93a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a93c:	3340      	adds	r3, #64	@ 0x40
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800a944:	2301      	movs	r3, #1
}
 800a946:	4618      	mov	r0, r3
 800a948:	3744      	adds	r7, #68	@ 0x44
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	0800efcc 	.word	0x0800efcc
 800a958:	e000edf0 	.word	0xe000edf0
 800a95c:	200018e4 	.word	0x200018e4

0800a960 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	011b      	lsls	r3, r3, #4
 800a96e:	4a27      	ldr	r2, [pc, #156]	@ (800aa0c <dfifo_device_init+0xac>)
 800a970:	4413      	add	r3, r2
 800a972:	61fb      	str	r3, [r7, #28]
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a978:	7b3b      	ldrb	r3, [r7, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <dfifo_device_init+0x22>
    rhport = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a982:	7b3b      	ldrb	r3, [r7, #12]
 800a984:	4a21      	ldr	r2, [pc, #132]	@ (800aa0c <dfifo_device_init+0xac>)
 800a986:	011b      	lsls	r3, r3, #4
 800a988:	4413      	add	r3, r2
 800a98a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a98c:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	7a1b      	ldrb	r3, [r3, #8]
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	81fa      	strh	r2, [r7, #14]
 800a996:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	089b      	lsrs	r3, r3, #2
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f103 0208 	add.w	r2, r3, #8
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9ba:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a9bc:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800a9be:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	4b11      	ldr	r3, [pc, #68]	@ (800aa10 <dfifo_device_init+0xb0>)
 800a9ca:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800a9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa10 <dfifo_device_init+0xb0>)
 800a9d4:	889a      	ldrh	r2, [r3, #4]
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	7a1b      	ldrb	r3, [r3, #8]
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800aa10 <dfifo_device_init+0xb0>)
 800a9e4:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800aa10 <dfifo_device_init+0xb0>)
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	041b      	lsls	r3, r3, #16
 800a9f0:	441a      	add	r2, r3
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	2240      	movs	r2, #64	@ 0x40
 800a9fa:	2180      	movs	r1, #128	@ 0x80
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fecd 	bl	800a79c <dfifo_alloc>
}
 800aa02:	bf00      	nop
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800efcc 	.word	0x0800efcc
 800aa10:	200018e4 	.word	0x200018e4

0800aa14 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800aa14:	b480      	push	{r7}
 800aa16:	b08b      	sub	sp, #44	@ 0x2c
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa24:	7c7b      	ldrb	r3, [r7, #17]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <edpt_activate+0x1a>
    rhport = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa2e:	7c7b      	ldrb	r3, [r7, #17]
 800aa30:	4a45      	ldr	r2, [pc, #276]	@ (800ab48 <edpt_activate+0x134>)
 800aa32:	011b      	lsls	r3, r3, #4
 800aa34:	4413      	add	r3, r2
 800aa36:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa38:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	789b      	ldrb	r3, [r3, #2]
 800aa3e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa40:	7cbb      	ldrb	r3, [r7, #18]
 800aa42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	789b      	ldrb	r3, [r3, #2]
 800aa50:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa52:	7cfb      	ldrb	r3, [r7, #19]
 800aa54:	09db      	lsrs	r3, r3, #7
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800aa5c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800aa60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa64:	0052      	lsls	r2, r2, #1
 800aa66:	4413      	add	r3, r2
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	4a38      	ldr	r2, [pc, #224]	@ (800ab4c <edpt_activate+0x138>)
 800aa6c:	4413      	add	r3, r2
 800aa6e:	61fb      	str	r3, [r7, #28]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	889b      	ldrh	r3, [r3, #4]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa7e:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	799a      	ldrb	r2, [r3, #6]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	895b      	ldrh	r3, [r3, #10]
 800aa94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	89bb      	ldrh	r3, [r7, #12]
 800aa9c:	f362 030a 	bfi	r3, r2, #0, #11
 800aaa0:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800aaa2:	7b7b      	ldrb	r3, [r7, #13]
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa8:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	78db      	ldrb	r3, [r3, #3]
 800aaae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
 800aab6:	f362 0383 	bfi	r3, r2, #2, #2
 800aaba:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	78db      	ldrb	r3, [r3, #3]
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d003      	beq.n	800aad2 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	f043 0310 	orr.w	r3, r3, #16
 800aad0:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800aad2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d108      	bne.n	800aaec <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800aada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aade:	f003 030f 	and.w	r3, r3, #15
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	89fb      	ldrh	r3, [r7, #14]
 800aae6:	f362 1389 	bfi	r3, r2, #6, #4
 800aaea:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800aaec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	bf14      	ite	ne
 800aaf4:	2301      	movne	r3, #1
 800aaf6:	2300      	moveq	r3, #0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab00:	0112      	lsls	r2, r2, #4
 800ab02:	4413      	add	r3, r2
 800ab04:	3348      	adds	r3, #72	@ 0x48
 800ab06:	015b      	lsls	r3, r3, #5
 800ab08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab0a:	4413      	add	r3, r2
 800ab0c:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800ab1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab1e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800ab22:	2901      	cmp	r1, #1
 800ab24:	d101      	bne.n	800ab2a <edpt_activate+0x116>
 800ab26:	2100      	movs	r1, #0
 800ab28:	e000      	b.n	800ab2c <edpt_activate+0x118>
 800ab2a:	2110      	movs	r1, #16
 800ab2c:	440b      	add	r3, r1
 800ab2e:	2101      	movs	r1, #1
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	431a      	orrs	r2, r3
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800ab3c:	bf00      	nop
 800ab3e:	372c      	adds	r7, #44	@ 0x2c
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	0800efcc 	.word	0x0800efcc
 800ab4c:	20001864 	.word	0x20001864

0800ab50 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800ab50:	b480      	push	{r7}
 800ab52:	b089      	sub	sp, #36	@ 0x24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	71fb      	strb	r3, [r7, #7]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	71bb      	strb	r3, [r7, #6]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	717b      	strb	r3, [r7, #5]
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ab66:	7c7b      	ldrb	r3, [r7, #17]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <edpt_disable+0x20>
    rhport = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ab70:	7c7b      	ldrb	r3, [r7, #17]
 800ab72:	4a5b      	ldr	r2, [pc, #364]	@ (800ace0 <edpt_disable+0x190>)
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	4413      	add	r3, r2
 800ab78:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	79bb      	ldrb	r3, [r7, #6]
 800ab7e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ab80:	7cbb      	ldrb	r3, [r7, #18]
 800ab82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab86:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800ab88:	76fb      	strb	r3, [r7, #27]
 800ab8a:	79bb      	ldrb	r3, [r7, #6]
 800ab8c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ab8e:	7cfb      	ldrb	r3, [r7, #19]
 800ab90:	09db      	lsrs	r3, r3, #7
 800ab92:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800ab94:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ab96:	7ebb      	ldrb	r3, [r7, #26]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	bf14      	ite	ne
 800ab9c:	2301      	movne	r3, #1
 800ab9e:	2300      	moveq	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	7efb      	ldrb	r3, [r7, #27]
 800aba6:	0112      	lsls	r2, r2, #4
 800aba8:	4413      	add	r3, r2
 800abaa:	3348      	adds	r3, #72	@ 0x48
 800abac:	015b      	lsls	r3, r3, #5
 800abae:	69fa      	ldr	r2, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800abb4:	7ebb      	ldrb	r3, [r7, #26]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d149      	bne.n	800ac4e <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800abba:	7efb      	ldrb	r3, [r7, #27]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <edpt_disable+0x78>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	db0d      	blt.n	800abe4 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	797a      	ldrb	r2, [r7, #5]
 800abce:	2a00      	cmp	r2, #0
 800abd0:	d002      	beq.n	800abd8 <edpt_disable+0x88>
 800abd2:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800abd6:	e001      	b.n	800abdc <edpt_disable+0x8c>
 800abd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800abdc:	431a      	orrs	r2, r3
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	e022      	b.n	800ac2a <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800abf0:	bf00      	nop
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f9      	beq.n	800abf2 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	797a      	ldrb	r2, [r7, #5]
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	d001      	beq.n	800ac0c <edpt_disable+0xbc>
 800ac08:	4a36      	ldr	r2, [pc, #216]	@ (800ace4 <edpt_disable+0x194>)
 800ac0a:	e001      	b.n	800ac10 <edpt_disable+0xc0>
 800ac0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ac10:	431a      	orrs	r2, r3
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800ac16:	bf00      	nop
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0f9      	beq.n	800ac18 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2202      	movs	r2, #2
 800ac28:	609a      	str	r2, [r3, #8]
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	7efb      	ldrb	r3, [r7, #27]
 800ac30:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	019b      	lsls	r3, r3, #6
 800ac36:	f043 0220 	orr.w	r2, r3, #32
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800ac3e:	bf00      	nop
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	f003 0320 	and.w	r3, r3, #32
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f9      	bne.n	800ac40 <edpt_disable+0xf0>
}
 800ac4c:	e041      	b.n	800acd2 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800ac4e:	7efb      	ldrb	r3, [r7, #27]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <edpt_disable+0x10c>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	db0c      	blt.n	800ac76 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	797a      	ldrb	r2, [r7, #5]
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	d002      	beq.n	800ac6c <edpt_disable+0x11c>
 800ac66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ac6a:	e000      	b.n	800ac6e <edpt_disable+0x11e>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e02d      	b.n	800acd2 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800ac7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800ac86:	bf00      	nop
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0f9      	beq.n	800ac88 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	797a      	ldrb	r2, [r7, #5]
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	d001      	beq.n	800aca2 <edpt_disable+0x152>
 800ac9e:	4a11      	ldr	r2, [pc, #68]	@ (800ace4 <edpt_disable+0x194>)
 800aca0:	e001      	b.n	800aca6 <edpt_disable+0x156>
 800aca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aca6:	431a      	orrs	r2, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800acac:	bf00      	nop
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0f9      	beq.n	800acae <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2202      	movs	r2, #2
 800acbe:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800acc6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	3724      	adds	r7, #36	@ 0x24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	0800efcc 	.word	0x0800efcc
 800ace4:	40200000 	.word	0x40200000

0800ace8 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800ace8:	b580      	push	{r7, lr}
 800acea:	b090      	sub	sp, #64	@ 0x40
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	71fb      	strb	r3, [r7, #7]
 800acf2:	460b      	mov	r3, r1
 800acf4:	71bb      	strb	r3, [r7, #6]
 800acf6:	4613      	mov	r3, r2
 800acf8:	717b      	strb	r3, [r7, #5]
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ad00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <edpt_schedule_packets+0x26>
    rhport = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ad0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad12:	4a65      	ldr	r2, [pc, #404]	@ (800aea8 <edpt_schedule_packets+0x1c0>)
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	4413      	add	r3, r2
 800ad18:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ad1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800ad1c:	79ba      	ldrb	r2, [r7, #6]
 800ad1e:	797b      	ldrb	r3, [r7, #5]
 800ad20:	0052      	lsls	r2, r2, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	4a61      	ldr	r2, [pc, #388]	@ (800aeac <edpt_schedule_packets+0x1c4>)
 800ad28:	4413      	add	r3, r2
 800ad2a:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ad2c:	797b      	ldrb	r3, [r7, #5]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	bf14      	ite	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	2300      	moveq	r3, #0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	461a      	mov	r2, r3
 800ad3a:	79bb      	ldrb	r3, [r7, #6]
 800ad3c:	0112      	lsls	r2, r2, #4
 800ad3e:	4413      	add	r3, r2
 800ad40:	3348      	adds	r3, #72	@ 0x48
 800ad42:	015b      	lsls	r3, r3, #5
 800ad44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad46:	4413      	add	r3, r2
 800ad48:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800ad4a:	79bb      	ldrb	r3, [r7, #6]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d11c      	bne.n	800ad8a <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800ad50:	797b      	ldrb	r3, [r7, #5]
 800ad52:	4a57      	ldr	r2, [pc, #348]	@ (800aeb0 <edpt_schedule_packets+0x1c8>)
 800ad54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5a:	895b      	ldrh	r3, [r3, #10]
 800ad5c:	853a      	strh	r2, [r7, #40]	@ 0x28
 800ad5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ad60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad64:	4293      	cmp	r3, r2
 800ad66:	bf28      	it	cs
 800ad68:	4613      	movcs	r3, r2
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800ad6e:	797b      	ldrb	r3, [r7, #5]
 800ad70:	4a4f      	ldr	r2, [pc, #316]	@ (800aeb0 <edpt_schedule_packets+0x1c8>)
 800ad72:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ad76:	797b      	ldrb	r3, [r7, #5]
 800ad78:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ad7a:	1a8a      	subs	r2, r1, r2
 800ad7c:	b291      	uxth	r1, r2
 800ad7e:	4a4c      	ldr	r2, [pc, #304]	@ (800aeb0 <edpt_schedule_packets+0x1c8>)
 800ad80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800ad84:	2301      	movs	r3, #1
 800ad86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ad88:	e014      	b.n	800adb4 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8c:	891b      	ldrh	r3, [r3, #8]
 800ad8e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800ad90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad94:	8952      	ldrh	r2, [r2, #10]
 800ad96:	623b      	str	r3, [r7, #32]
 800ad98:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800ad9a:	6a3a      	ldr	r2, [r7, #32]
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	1e5a      	subs	r2, r3, #1
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800adaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800adb0:	2301      	movs	r3, #1
 800adb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800adb4:	2300      	movs	r3, #0
 800adb6:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800adb8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800adba:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f362 0312 	bfi	r3, r2, #0, #19
 800adc4:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800adc6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adcc:	b29a      	uxth	r2, r3
 800adce:	8afb      	ldrh	r3, [r7, #22]
 800add0:	f362 03cc 	bfi	r3, r2, #3, #10
 800add4:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800ade2:	7cfb      	ldrb	r3, [r7, #19]
 800ade4:	f043 0304 	orr.w	r3, r3, #4
 800ade8:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800adea:	7cfb      	ldrb	r3, [r7, #19]
 800adec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf0:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800adf2:	7cbb      	ldrb	r3, [r7, #18]
 800adf4:	f003 030c 	and.w	r3, r3, #12
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d11a      	bne.n	800ae34 <edpt_schedule_packets+0x14c>
 800adfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae00:	7b1b      	ldrb	r3, [r3, #12]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d116      	bne.n	800ae34 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ae0c:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d004      	beq.n	800ae2c <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800ae22:	7cfb      	ldrb	r3, [r7, #19]
 800ae24:	f043 0310 	orr.w	r3, r3, #16
 800ae28:	74fb      	strb	r3, [r7, #19]
 800ae2a:	e003      	b.n	800ae34 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800ae2c:	7cfb      	ldrb	r3, [r7, #19]
 800ae2e:	f043 0320 	orr.w	r3, r3, #32
 800ae32:	74fb      	strb	r3, [r7, #19]
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae3c:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ae3e:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800ae40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800ae44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d015      	beq.n	800ae78 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ae4c:	797b      	ldrb	r3, [r7, #5]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d109      	bne.n	800ae66 <edpt_schedule_packets+0x17e>
 800ae52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d006      	beq.n	800ae66 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800ae58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ae5e:	4611      	mov	r1, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fd fd5c 	bl	800891e <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800ae66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800ae76:	e013      	b.n	800aea0 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ae7e:	797b      	ldrb	r3, [r7, #5]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10d      	bne.n	800aea0 <edpt_schedule_packets+0x1b8>
 800ae84:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800ae90:	79ba      	ldrb	r2, [r7, #6]
 800ae92:	2101      	movs	r1, #1
 800ae94:	fa01 f202 	lsl.w	r2, r1, r2
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800aea0:	bf00      	nop
 800aea2:	3740      	adds	r7, #64	@ 0x40
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	0800efcc 	.word	0x0800efcc
 800aeac:	20001864 	.word	0x20001864
 800aeb0:	200018e4 	.word	0x200018e4

0800aeb4 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08c      	sub	sp, #48	@ 0x30
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	71fb      	strb	r3, [r7, #7]
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <dcd_init+0x1a>
    rhport = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	4a43      	ldr	r2, [pc, #268]	@ (800afe0 <dcd_init+0x12c>)
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	4413      	add	r3, r2
 800aed6:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aed8:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800aeda:	2208      	movs	r2, #8
 800aedc:	2100      	movs	r1, #0
 800aede:	4841      	ldr	r0, [pc, #260]	@ (800afe4 <dcd_init+0x130>)
 800aee0:	f001 fe9d 	bl	800cc1e <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800aee4:	2101      	movs	r1, #1
 800aee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aee8:	f001 f9c6 	bl	800c278 <dwc2_core_is_highspeed>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef4:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aefa:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800aefc:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800aefe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800af02:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800af06:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f9d1 	bl	800c2b4 <dwc2_core_init>
 800af12:	4603      	mov	r3, r0
 800af14:	f083 0301 	eor.w	r3, r3, #1
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00a      	beq.n	800af34 <dcd_init+0x80>
 800af1e:	4b32      	ldr	r3, [pc, #200]	@ (800afe8 <dcd_init+0x134>)
 800af20:	61fb      	str	r3, [r7, #28]
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d000      	beq.n	800af30 <dcd_init+0x7c>
 800af2e:	be00      	bkpt	0x0000
 800af30:	2300      	movs	r3, #0
 800af32:	e050      	b.n	800afd6 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800af34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af36:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800af40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00d      	beq.n	800af64 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800af48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af4c:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800af4e:	7b3b      	ldrb	r3, [r7, #12]
 800af50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b80      	cmp	r3, #128	@ 0x80
 800af58:	d108      	bne.n	800af6c <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af62:	e003      	b.n	800af6c <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800af64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af66:	f043 0303 	orr.w	r3, r3, #3
 800af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6e:	f043 0304 	orr.w	r3, r3, #4
 800af72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af78:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f92a 	bl	800b1d8 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800af8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800af94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800af9c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800afa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa2:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	699a      	ldr	r2, [r3, #24]
 800afa8:	4b10      	ldr	r3, [pc, #64]	@ (800afec <dcd_init+0x138>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afae:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800afb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afbc:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800afc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc8:	6a3a      	ldr	r2, [r7, #32]
 800afca:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 f8e0 	bl	800b194 <dcd_connect>
  return true;
 800afd4:	2301      	movs	r3, #1
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3730      	adds	r7, #48	@ 0x30
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	0800efcc 	.word	0x0800efcc
 800afe4:	200018e4 	.word	0x200018e4
 800afe8:	e000edf0 	.word	0xe000edf0
 800afec:	80003804 	.word	0x80003804

0800aff0 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	73fb      	strb	r3, [r7, #15]
 800affe:	2301      	movs	r3, #1
 800b000:	73bb      	strb	r3, [r7, #14]
 800b002:	2301      	movs	r3, #1
 800b004:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	4a0c      	ldr	r2, [pc, #48]	@ (800b03c <dcd_int_enable+0x4c>)
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	4413      	add	r3, r2
 800b00e:	3304      	adds	r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b014:	7b7b      	ldrb	r3, [r7, #13]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800b01a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff fb3e 	bl	800a6a0 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800b024:	e004      	b.n	800b030 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800b026:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fb56 	bl	800a6dc <__NVIC_DisableIRQ>
}
 800b030:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0800efcc 	.word	0x0800efcc

0800b040 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	73fb      	strb	r3, [r7, #15]
 800b04e:	2301      	movs	r3, #1
 800b050:	73bb      	strb	r3, [r7, #14]
 800b052:	2300      	movs	r3, #0
 800b054:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	4a0c      	ldr	r2, [pc, #48]	@ (800b08c <dcd_int_disable+0x4c>)
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	4413      	add	r3, r2
 800b05e:	3304      	adds	r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b064:	7b7b      	ldrb	r3, [r7, #13]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b06a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fb16 	bl	800a6a0 <__NVIC_EnableIRQ>
}
 800b074:	e004      	b.n	800b080 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b076:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fb2e 	bl	800a6dc <__NVIC_DisableIRQ>
}
 800b080:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b082:	bf00      	nop
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	0800efcc 	.word	0x0800efcc

0800b090 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	460a      	mov	r2, r1
 800b09a:	71fb      	strb	r3, [r7, #7]
 800b09c:	4613      	mov	r3, r2
 800b09e:	71bb      	strb	r3, [r7, #6]
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b0a4:	7a7b      	ldrb	r3, [r7, #9]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <dcd_set_address+0x1e>
    rhport = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b0ae:	7a7b      	ldrb	r3, [r7, #9]
 800b0b0:	4a14      	ldr	r2, [pc, #80]	@ (800b104 <dcd_set_address+0x74>)
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b0b8:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b0c0:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b0c4:	79bb      	ldrb	r3, [r7, #6]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	72fb      	strb	r3, [r7, #11]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b0d8:	7abb      	ldrb	r3, [r7, #10]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <dcd_set_address+0x54>
 800b0de:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b0e2:	e000      	b.n	800b0e6 <dcd_set_address+0x56>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b0f0:	79f8      	ldrb	r0, [r7, #7]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f000 f98b 	bl	800b410 <dcd_edpt_xfer>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0800efcc 	.word	0x0800efcc

0800b108 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	71fb      	strb	r3, [r7, #7]
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4a19      	ldr	r2, [pc, #100]	@ (800b188 <dcd_remote_wakeup+0x80>)
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	4413      	add	r3, r2
 800b128:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b12a:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b132:	f043 0201 	orr.w	r2, r3, #1
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2208      	movs	r2, #8
 800b140:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f043 0208 	orr.w	r2, r3, #8
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b14e:	4b0f      	ldr	r3, [pc, #60]	@ (800b18c <dcd_remote_wakeup+0x84>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a0f      	ldr	r2, [pc, #60]	@ (800b190 <dcd_remote_wakeup+0x88>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	099b      	lsrs	r3, r3, #6
 800b15a:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b15c:	e000      	b.n	800b160 <dcd_remote_wakeup+0x58>
 800b15e:	bf00      	nop
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	1e5a      	subs	r2, r3, #1
 800b164:	613a      	str	r2, [r7, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1f9      	bne.n	800b15e <dcd_remote_wakeup+0x56>
}
 800b16a:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b172:	f023 0201 	bic.w	r2, r3, #1
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b17c:	bf00      	nop
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	0800efcc 	.word	0x0800efcc
 800b18c:	20000208 	.word	0x20000208
 800b190:	10624dd3 	.word	0x10624dd3

0800b194 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b1a2:	7afb      	ldrb	r3, [r7, #11]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <dcd_connect+0x18>
    rhport = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	4a09      	ldr	r2, [pc, #36]	@ (800b1d4 <dcd_connect+0x40>)
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	4413      	add	r3, r2
 800b1b4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b1b6:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b1be:	f023 0202 	bic.w	r2, r3, #2
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b1c8:	bf00      	nop
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	0800efcc 	.word	0x0800efcc

0800b1d8 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	71fb      	strb	r3, [r7, #7]
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <dcd_disconnect+0x18>
    rhport = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b1f0:	7afb      	ldrb	r3, [r7, #11]
 800b1f2:	4a09      	ldr	r2, [pc, #36]	@ (800b218 <dcd_disconnect+0x40>)
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	4413      	add	r3, r2
 800b1f8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b1fa:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b202:	f043 0202 	orr.w	r2, r3, #2
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	0800efcc 	.word	0x0800efcc

0800b21c <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	460a      	mov	r2, r1
 800b226:	71fb      	strb	r3, [r7, #7]
 800b228:	4613      	mov	r3, r2
 800b22a:	71bb      	strb	r3, [r7, #6]
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b230:	7afb      	ldrb	r3, [r7, #11]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <dcd_sof_enable+0x1e>
    rhport = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	4a10      	ldr	r2, [pc, #64]	@ (800b280 <dcd_sof_enable+0x64>)
 800b23e:	011b      	lsls	r3, r3, #4
 800b240:	4413      	add	r3, r2
 800b242:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b244:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b246:	4a0f      	ldr	r2, [pc, #60]	@ (800b284 <dcd_sof_enable+0x68>)
 800b248:	79bb      	ldrb	r3, [r7, #6]
 800b24a:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b24c:	79bb      	ldrb	r3, [r7, #6]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2208      	movs	r2, #8
 800b256:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	f043 0208 	orr.w	r2, r3, #8
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b264:	e005      	b.n	800b272 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f023 0208 	bic.w	r2, r3, #8
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	619a      	str	r2, [r3, #24]
}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	0800efcc 	.word	0x0800efcc
 800b284:	200018e4 	.word	0x200018e4

0800b288 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	6039      	str	r1, [r7, #0]
 800b292:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	7899      	ldrb	r1, [r3, #2]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	889b      	ldrh	r3, [r3, #4]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff fa76 	bl	800a79c <dfifo_alloc>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f083 0301 	eor.w	r3, r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <dcd_edpt_open+0x4a>
 800b2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e8 <dcd_edpt_open+0x60>)
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d000      	beq.n	800b2ce <dcd_edpt_open+0x46>
 800b2cc:	be00      	bkpt	0x0000
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e005      	b.n	800b2de <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fb9c 	bl	800aa14 <edpt_activate>
  return true;
 800b2dc:	2301      	movs	r3, #1
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	e000edf0 	.word	0xe000edf0

0800b2ec <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	@ 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	71fb      	strb	r3, [r7, #7]
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	4a3f      	ldr	r2, [pc, #252]	@ (800b404 <dcd_edpt_close_all+0x118>)
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	4413      	add	r3, r2
 800b30c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b30e:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b310:	79fb      	ldrb	r3, [r7, #7]
 800b312:	4a3c      	ldr	r2, [pc, #240]	@ (800b404 <dcd_edpt_close_all+0x118>)
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	4413      	add	r3, r2
 800b318:	3308      	adds	r3, #8
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b31e:	2000      	movs	r0, #0
 800b320:	f7fe fd4a 	bl	8009db8 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b324:	4b38      	ldr	r3, [pc, #224]	@ (800b408 <dcd_edpt_close_all+0x11c>)
 800b326:	2200      	movs	r2, #0
 800b328:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b330:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b33a:	e034      	b.n	800b3a6 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b342:	e027      	b.n	800b394 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b344:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b34c:	0112      	lsls	r2, r2, #4
 800b34e:	4413      	add	r3, r2
 800b350:	3348      	adds	r3, #72	@ 0x48
 800b352:	015b      	lsls	r3, r3, #5
 800b354:	6a3a      	ldr	r2, [r7, #32]
 800b356:	4413      	add	r3, r2
 800b358:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da05      	bge.n	800b36e <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b36e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b372:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b376:	f1c3 0301 	rsb	r3, r3, #1
 800b37a:	4924      	ldr	r1, [pc, #144]	@ (800b40c <dcd_edpt_close_all+0x120>)
 800b37c:	0052      	lsls	r2, r2, #1
 800b37e:	4413      	add	r3, r2
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	440b      	add	r3, r1
 800b384:	330a      	adds	r3, #10
 800b386:	2200      	movs	r2, #0
 800b388:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b38a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b38e:	3301      	adds	r3, #1
 800b390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d9d3      	bls.n	800b344 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b3a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3aa:	7ffb      	ldrb	r3, [r7, #31]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d3c5      	bcc.n	800b33c <dcd_edpt_close_all+0x50>
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	019b      	lsls	r3, r3, #6
 800b3bc:	f043 0220 	orr.w	r2, r3, #32
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b3c4:	bf00      	nop
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f9      	bne.n	800b3c6 <dcd_edpt_close_all+0xda>
}
 800b3d2:	bf00      	nop
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2210      	movs	r2, #16
 800b3dc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b3de:	bf00      	nop
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	f003 0310 	and.w	r3, r3, #16
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1f9      	bne.n	800b3e0 <dcd_edpt_close_all+0xf4>
}
 800b3ec:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fab5 	bl	800a960 <dfifo_device_init>

  usbd_spin_unlock(false);
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f7fe fcf8 	bl	8009dec <usbd_spin_unlock>
}
 800b3fc:	bf00      	nop
 800b3fe:	3728      	adds	r7, #40	@ 0x28
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	0800efcc 	.word	0x0800efcc
 800b408:	200018e4 	.word	0x200018e4
 800b40c:	20001864 	.word	0x20001864

0800b410 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	603a      	str	r2, [r7, #0]
 800b418:	461a      	mov	r2, r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	71fb      	strb	r3, [r7, #7]
 800b41e:	460b      	mov	r3, r1
 800b420:	71bb      	strb	r3, [r7, #6]
 800b422:	4613      	mov	r3, r2
 800b424:	80bb      	strh	r3, [r7, #4]
 800b426:	79bb      	ldrb	r3, [r7, #6]
 800b428:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b430:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b432:	75bb      	strb	r3, [r7, #22]
 800b434:	79bb      	ldrb	r3, [r7, #6]
 800b436:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	09db      	lsrs	r3, r3, #7
 800b43c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b43e:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b440:	7dba      	ldrb	r2, [r7, #22]
 800b442:	7d7b      	ldrb	r3, [r7, #21]
 800b444:	0052      	lsls	r2, r2, #1
 800b446:	4413      	add	r3, r2
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	4a17      	ldr	r2, [pc, #92]	@ (800b4a8 <dcd_edpt_xfer+0x98>)
 800b44c:	4413      	add	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b450:	2000      	movs	r0, #0
 800b452:	f7fe fcb1 	bl	8009db8 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	895b      	ldrh	r3, [r3, #10]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b45e:	2300      	movs	r3, #0
 800b460:	75fb      	strb	r3, [r7, #23]
 800b462:	e018      	b.n	800b496 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	88ba      	ldrh	r2, [r7, #4]
 800b474:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b476:	7dbb      	ldrb	r3, [r7, #22]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d104      	bne.n	800b486 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b47c:	7d7b      	ldrb	r3, [r7, #21]
 800b47e:	490b      	ldr	r1, [pc, #44]	@ (800b4ac <dcd_edpt_xfer+0x9c>)
 800b480:	88ba      	ldrh	r2, [r7, #4]
 800b482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b486:	7d7a      	ldrb	r2, [r7, #21]
 800b488:	7db9      	ldrb	r1, [r7, #22]
 800b48a:	79fb      	ldrb	r3, [r7, #7]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff fc2b 	bl	800ace8 <edpt_schedule_packets>
    ret = true;
 800b492:	2301      	movs	r3, #1
 800b494:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b496:	2000      	movs	r0, #0
 800b498:	f7fe fca8 	bl	8009dec <usbd_spin_unlock>

  return ret;
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20001864 	.word	0x20001864
 800b4ac:	200018e4 	.word	0x200018e4

0800b4b0 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	460a      	mov	r2, r1
 800b4ba:	71fb      	strb	r3, [r7, #7]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	71bb      	strb	r3, [r7, #6]
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4c4:	7cbb      	ldrb	r3, [r7, #18]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4ce:	7cbb      	ldrb	r3, [r7, #18]
 800b4d0:	4a11      	ldr	r2, [pc, #68]	@ (800b518 <dcd_edpt_stall+0x68>)
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	4413      	add	r3, r2
 800b4d6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b4d8:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b4da:	79b9      	ldrb	r1, [r7, #6]
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff fb35 	bl	800ab50 <edpt_disable>
 800b4e6:	79bb      	ldrb	r3, [r7, #6]
 800b4e8:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b4ea:	7cfb      	ldrb	r3, [r7, #19]
 800b4ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f0:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10b      	bne.n	800b50e <dcd_edpt_stall+0x5e>
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4fe:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b500:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b502:	2b00      	cmp	r3, #0
 800b504:	d003      	beq.n	800b50e <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff f90b 	bl	800a724 <dma_setup_prepare>
  }
}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	0800efcc 	.word	0x0800efcc

0800b51c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	460a      	mov	r2, r1
 800b526:	71fb      	strb	r3, [r7, #7]
 800b528:	4613      	mov	r3, r2
 800b52a:	71bb      	strb	r3, [r7, #6]
 800b52c:	79fb      	ldrb	r3, [r7, #7]
 800b52e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b530:	7a7b      	ldrb	r3, [r7, #9]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b53a:	7a7b      	ldrb	r3, [r7, #9]
 800b53c:	4a19      	ldr	r2, [pc, #100]	@ (800b5a4 <dcd_edpt_clear_stall+0x88>)
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	4413      	add	r3, r2
 800b542:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	79bb      	ldrb	r3, [r7, #6]
 800b548:	72bb      	strb	r3, [r7, #10]
 800b54a:	7abb      	ldrb	r3, [r7, #10]
 800b54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b550:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b552:	74fb      	strb	r3, [r7, #19]
 800b554:	79bb      	ldrb	r3, [r7, #6]
 800b556:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	09db      	lsrs	r3, r3, #7
 800b55c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b55e:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b560:	7cbb      	ldrb	r3, [r7, #18]
 800b562:	2b01      	cmp	r3, #1
 800b564:	bf14      	ite	ne
 800b566:	2301      	movne	r3, #1
 800b568:	2300      	moveq	r3, #0
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	461a      	mov	r2, r3
 800b56e:	7cfb      	ldrb	r3, [r7, #19]
 800b570:	0112      	lsls	r2, r2, #4
 800b572:	4413      	add	r3, r2
 800b574:	3348      	adds	r3, #72	@ 0x48
 800b576:	015b      	lsls	r3, r3, #5
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4413      	add	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	601a      	str	r2, [r3, #0]
}
 800b596:	bf00      	nop
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	0800efcc 	.word	0x0800efcc

0800b5a8 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08e      	sub	sp, #56	@ 0x38
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	71fb      	strb	r3, [r7, #7]
 800b5b2:	79fb      	ldrb	r3, [r7, #7]
 800b5b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <handle_bus_reset+0x1e>
    rhport = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b5c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5ca:	4a6a      	ldr	r2, [pc, #424]	@ (800b774 <handle_bus_reset+0x1cc>)
 800b5cc:	011b      	lsls	r3, r3, #4
 800b5ce:	4413      	add	r3, r2
 800b5d0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5dc:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b5de:	7a7b      	ldrb	r3, [r7, #9]
 800b5e0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b5ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b5ee:	2280      	movs	r2, #128	@ 0x80
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	4861      	ldr	r0, [pc, #388]	@ (800b778 <handle_bus_reset+0x1d0>)
 800b5f4:	f001 fb13 	bl	800cc1e <memset>

  _dcd_data.sof_en = false;
 800b5f8:	4b60      	ldr	r3, [pc, #384]	@ (800b77c <handle_bus_reset+0x1d4>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b5fe:	4b5f      	ldr	r3, [pc, #380]	@ (800b77c <handle_bus_reset+0x1d4>)
 800b600:	2200      	movs	r2, #0
 800b602:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b604:	2300      	movs	r3, #0
 800b606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b60a:	e014      	b.n	800b636 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b60c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b612:	3358      	adds	r3, #88	@ 0x58
 800b614:	015b      	lsls	r3, r3, #5
 800b616:	4413      	add	r3, r2
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b61e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b622:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b624:	3358      	adds	r3, #88	@ 0x58
 800b626:	015b      	lsls	r3, r3, #5
 800b628:	440b      	add	r3, r1
 800b62a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b62c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b630:	3301      	adds	r3, #1
 800b632:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b636:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b63a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b63e:	429a      	cmp	r2, r3
 800b640:	d3e4      	bcc.n	800b60c <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b642:	2300      	movs	r3, #0
 800b644:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b648:	e01d      	b.n	800b686 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b64a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b64e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b650:	3348      	adds	r3, #72	@ 0x48
 800b652:	015b      	lsls	r3, r3, #5
 800b654:	4413      	add	r3, r2
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	da0f      	bge.n	800b67c <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b65c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b662:	3348      	adds	r3, #72	@ 0x48
 800b664:	015b      	lsls	r3, r3, #5
 800b666:	4413      	add	r3, r2
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b66e:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b674:	3348      	adds	r3, #72	@ 0x48
 800b676:	015b      	lsls	r3, r3, #5
 800b678:	440b      	add	r3, r1
 800b67a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b67c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b680:	3301      	adds	r3, #1
 800b682:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b686:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b68a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b68e:	429a      	cmp	r2, r3
 800b690:	d3db      	bcc.n	800b64a <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b698:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	2209      	movs	r2, #9
 800b6a0:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	2209      	movs	r2, #9
 800b6a8:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	2310      	movs	r3, #16
 800b6b2:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	019b      	lsls	r3, r3, #6
 800b6b8:	f043 0220 	orr.w	r2, r3, #32
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b6c0:	bf00      	nop
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1f9      	bne.n	800b6c2 <handle_bus_reset+0x11a>
}
 800b6ce:	bf00      	nop
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d2:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2210      	movs	r2, #16
 800b6d8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b6da:	bf00      	nop
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1f9      	bne.n	800b6dc <handle_bus_reset+0x134>
}
 800b6e8:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff f937 	bl	800a960 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b6f8:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b6fa:	8a3b      	ldrh	r3, [r7, #16]
 800b6fc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b700:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b706:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b710:	f023 0203 	bic.w	r2, r3, #3
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b720:	f023 0203 	bic.w	r2, r3, #3
 800b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b726:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b72a:	4b13      	ldr	r3, [pc, #76]	@ (800b778 <handle_bus_reset+0x1d0>)
 800b72c:	2240      	movs	r2, #64	@ 0x40
 800b72e:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b730:	4b11      	ldr	r3, [pc, #68]	@ (800b778 <handle_bus_reset+0x1d0>)
 800b732:	2240      	movs	r2, #64	@ 0x40
 800b734:	835a      	strh	r2, [r3, #26]
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b73e:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b740:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe ffeb 	bl	800a724 <dma_setup_prepare>
 800b74e:	e007      	b.n	800b760 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b752:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800b756:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	619a      	str	r2, [r3, #24]
}
 800b76c:	bf00      	nop
 800b76e:	3738      	adds	r7, #56	@ 0x38
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	0800efcc 	.word	0x0800efcc
 800b778:	20001864 	.word	0x20001864
 800b77c:	200018e4 	.word	0x200018e4

0800b780 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	@ 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	71fb      	strb	r3, [r7, #7]
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b78e:	7ffb      	ldrb	r3, [r7, #31]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <handle_enum_done+0x18>
    rhport = 0;
 800b794:	2300      	movs	r3, #0
 800b796:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b798:	7ffb      	ldrb	r3, [r7, #31]
 800b79a:	4a1b      	ldr	r2, [pc, #108]	@ (800b808 <handle_enum_done+0x88>)
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	4413      	add	r3, r2
 800b7a0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b7a2:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b7aa:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800b7ac:	7e3b      	ldrb	r3, [r7, #24]
 800b7ae:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <handle_enum_done+0x3e>
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d004      	beq.n	800b7c6 <handle_enum_done+0x46>
 800b7bc:	e007      	b.n	800b7ce <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7c4:	e007      	b.n	800b7d6 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7cc:	e003      	b.n	800b7d6 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7d4:	bf00      	nop
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	77bb      	strb	r3, [r7, #30]
 800b7da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7de:	777b      	strb	r3, [r7, #29]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b7e4:	7fbb      	ldrb	r3, [r7, #30]
 800b7e6:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800b7ec:	7f7b      	ldrb	r3, [r7, #29]
 800b7ee:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800b7f0:	7f3a      	ldrb	r2, [r7, #28]
 800b7f2:	f107 030c 	add.w	r3, r7, #12
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe f8df 	bl	80099bc <dcd_event_handler>
}
 800b7fe:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800b800:	bf00      	nop
 800b802:	3728      	adds	r7, #40	@ 0x28
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	0800efcc 	.word	0x0800efcc

0800b80c <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08c      	sub	sp, #48	@ 0x30
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	71fb      	strb	r3, [r7, #7]
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b81a:	7cfb      	ldrb	r3, [r7, #19]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b824:	7cfb      	ldrb	r3, [r7, #19]
 800b826:	4a49      	ldr	r2, [pc, #292]	@ (800b94c <handle_rxflvl_irq+0x140>)
 800b828:	011b      	lsls	r3, r3, #4
 800b82a:	4413      	add	r3, r2
 800b82c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b836:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800b838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83a:	6a1b      	ldr	r3, [r3, #32]
 800b83c:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800b83e:	7b3b      	ldrb	r3, [r7, #12]
 800b840:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800b84a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b84e:	3358      	adds	r3, #88	@ 0x58
 800b850:	015b      	lsls	r3, r3, #5
 800b852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b854:	4413      	add	r3, r2
 800b856:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	3b01      	subs	r3, #1
 800b862:	2b05      	cmp	r3, #5
 800b864:	d86a      	bhi.n	800b93c <handle_rxflvl_irq+0x130>
 800b866:	a201      	add	r2, pc, #4	@ (adr r2, 800b86c <handle_rxflvl_irq+0x60>)
 800b868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86c:	0800b93d 	.word	0x0800b93d
 800b870:	0800b8ab 	.word	0x0800b8ab
 800b874:	0800b93d 	.word	0x0800b93d
 800b878:	0800b89d 	.word	0x0800b89d
 800b87c:	0800b93d 	.word	0x0800b93d
 800b880:	0800b885 	.word	0x0800b885
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800b884:	4b32      	ldr	r3, [pc, #200]	@ (800b950 <handle_rxflvl_irq+0x144>)
 800b886:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800b888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3304      	adds	r3, #4
 800b894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	601a      	str	r2, [r3, #0]
      break;
 800b89a:	e052      	b.n	800b942 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	611a      	str	r2, [r3, #16]
      break;
 800b8a8:	e04b      	b.n	800b942 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800b8aa:	89bb      	ldrh	r3, [r7, #12]
 800b8ac:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8b8:	015b      	lsls	r3, r3, #5
 800b8ba:	4a26      	ldr	r2, [pc, #152]	@ (800b954 <handle_rxflvl_irq+0x148>)
 800b8bc:	4413      	add	r3, r2
 800b8be:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800b8c0:	8b7b      	ldrh	r3, [r7, #26]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d03c      	beq.n	800b940 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d007      	beq.n	800b8de <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	8b7a      	ldrh	r2, [r7, #26]
 800b8d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fc ff7e 	bl	80087d8 <tu_fifo_write_n_const_addr_full_words>
 800b8dc:	e00c      	b.n	800b8f8 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	8b7a      	ldrh	r2, [r7, #26]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8e8:	f000 fd70 	bl	800c3cc <dfifo_read_packet>
          xfer->buffer += byte_count;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	8b7b      	ldrh	r3, [r7, #26]
 800b8f2:	441a      	add	r2, r3
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	895b      	ldrh	r3, [r3, #10]
 800b8fc:	8b7a      	ldrh	r2, [r7, #26]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d21e      	bcs.n	800b940 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	891a      	ldrh	r2, [r3, #8]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b912:	b29b      	uxth	r3, r3
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	b29a      	uxth	r2, r3
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10d      	bne.n	800b940 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	891a      	ldrh	r2, [r3, #8]
 800b928:	4b0b      	ldr	r3, [pc, #44]	@ (800b958 <handle_rxflvl_irq+0x14c>)
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	b29a      	uxth	r2, r3
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800b934:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <handle_rxflvl_irq+0x14c>)
 800b936:	2200      	movs	r2, #0
 800b938:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800b93a:	e001      	b.n	800b940 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800b93c:	bf00      	nop
 800b93e:	e000      	b.n	800b942 <handle_rxflvl_irq+0x136>
      break;
 800b940:	bf00      	nop
  }
}
 800b942:	bf00      	nop
 800b944:	3730      	adds	r7, #48	@ 0x30
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	0800efcc 	.word	0x0800efcc
 800b950:	200018ec 	.word	0x200018ec
 800b954:	20001864 	.word	0x20001864
 800b958:	200018e4 	.word	0x200018e4

0800b95c <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08e      	sub	sp, #56	@ 0x38
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	603a      	str	r2, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
 800b968:	460b      	mov	r3, r1
 800b96a:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800b96c:	783b      	ldrb	r3, [r7, #0]
 800b96e:	f003 0308 	and.w	r3, r3, #8
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01c      	beq.n	800b9b2 <handle_epout_slave+0x56>
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b97e:	4b34      	ldr	r3, [pc, #208]	@ (800ba50 <handle_epout_slave+0xf4>)
 800b980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b982:	2301      	movs	r3, #1
 800b984:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b98c:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800b98e:	2306      	movs	r3, #6
 800b990:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800b992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b994:	f107 0318 	add.w	r3, r7, #24
 800b998:	6810      	ldr	r0, [r2, #0]
 800b99a:	6851      	ldr	r1, [r2, #4]
 800b99c:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800b99e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b9a2:	f107 0314 	add.w	r3, r7, #20
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe f807 	bl	80099bc <dcd_event_handler>
}
 800b9ae:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800b9b0:	e04a      	b.n	800ba48 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800b9b2:	783b      	ldrb	r3, [r7, #0]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d044      	beq.n	800ba48 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800b9be:	783b      	ldrb	r3, [r7, #0]
 800b9c0:	f003 0320 	and.w	r3, r3, #32
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d13e      	bne.n	800ba48 <handle_epout_slave+0xec>
 800b9ca:	787b      	ldrb	r3, [r7, #1]
 800b9cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d138      	bne.n	800ba48 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b9d6:	79bb      	ldrb	r3, [r7, #6]
 800b9d8:	015b      	lsls	r3, r3, #5
 800b9da:	4a1e      	ldr	r2, [pc, #120]	@ (800ba54 <handle_epout_slave+0xf8>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800b9e0:	79bb      	ldrb	r3, [r7, #6]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <handle_epout_slave+0xa0>
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ba58 <handle_epout_slave+0xfc>)
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d006      	beq.n	800b9fc <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800b9ee:	79b9      	ldrb	r1, [r7, #6]
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff f977 	bl	800ace8 <edpt_schedule_packets>
 800b9fa:	e025      	b.n	800ba48 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	461a      	mov	r2, r3
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba08:	79bb      	ldrb	r3, [r7, #6]
 800ba0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800ba0e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800ba1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ba20:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800ba22:	2307      	movs	r3, #7
 800ba24:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800ba26:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ba2a:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800ba30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba34:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800ba36:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800ba3a:	f107 0308 	add.w	r3, r7, #8
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fd ffbb 	bl	80099bc <dcd_event_handler>
}
 800ba46:	bf00      	nop
      }
    }
  }
}
 800ba48:	3738      	adds	r7, #56	@ 0x38
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200018ec 	.word	0x200018ec
 800ba54:	20001864 	.word	0x20001864
 800ba58:	200018e4 	.word	0x200018e4

0800ba5c <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b092      	sub	sp, #72	@ 0x48
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	603a      	str	r2, [r7, #0]
 800ba66:	71fb      	strb	r3, [r7, #7]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	71bb      	strb	r3, [r7, #6]
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <handle_epin_slave+0x24>
    rhport = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba84:	4a64      	ldr	r2, [pc, #400]	@ (800bc18 <handle_epin_slave+0x1bc>)
 800ba86:	011b      	lsls	r3, r3, #4
 800ba88:	4413      	add	r3, r2
 800ba8a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ba8c:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800ba8e:	79bb      	ldrb	r3, [r7, #6]
 800ba90:	3348      	adds	r3, #72	@ 0x48
 800ba92:	015b      	lsls	r3, r3, #5
 800ba94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba96:	4413      	add	r3, r2
 800ba98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800ba9a:	79bb      	ldrb	r3, [r7, #6]
 800ba9c:	015b      	lsls	r3, r3, #5
 800ba9e:	3310      	adds	r3, #16
 800baa0:	4a5e      	ldr	r2, [pc, #376]	@ (800bc1c <handle_epin_slave+0x1c0>)
 800baa2:	4413      	add	r3, r2
 800baa4:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800baa6:	783b      	ldrb	r3, [r7, #0]
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d037      	beq.n	800bb22 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800bab2:	79bb      	ldrb	r3, [r7, #6]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <handle_epin_slave+0x72>
 800bab8:	4b59      	ldr	r3, [pc, #356]	@ (800bc20 <handle_epin_slave+0x1c4>)
 800baba:	885b      	ldrh	r3, [r3, #2]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d006      	beq.n	800bace <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800bac0:	79b9      	ldrb	r1, [r7, #6]
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	2201      	movs	r2, #1
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff f90e 	bl	800ace8 <edpt_schedule_packets>
 800bacc:	e029      	b.n	800bb22 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bace:	79bb      	ldrb	r3, [r7, #6]
 800bad0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	891b      	ldrh	r3, [r3, #8]
 800bada:	461a      	mov	r2, r3
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bae2:	460b      	mov	r3, r1
 800bae4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bae8:	627a      	str	r2, [r7, #36]	@ 0x24
 800baea:	2300      	movs	r3, #0
 800baec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800baf0:	2301      	movs	r3, #1
 800baf2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800baf6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bafa:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bafc:	2307      	movs	r3, #7
 800bafe:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800bb00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb04:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800bb0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bb0e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800bb10:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bb14:	f107 0310 	add.w	r3, r7, #16
 800bb18:	4611      	mov	r1, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fd ff4e 	bl	80099bc <dcd_event_handler>
}
 800bb20:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800bb22:	783b      	ldrb	r3, [r7, #0]
 800bb24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d070      	beq.n	800bc10 <handle_epin_slave+0x1b4>
 800bb2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb30:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bb34:	79ba      	ldrb	r2, [r7, #6]
 800bb36:	2101      	movs	r1, #1
 800bb38:	fa01 f202 	lsl.w	r2, r1, r2
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d066      	beq.n	800bc10 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800bb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800bb48:	89fb      	ldrh	r3, [r7, #14]
 800bb4a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bb52:	2300      	movs	r3, #0
 800bb54:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb58:	e03f      	b.n	800bbda <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800bb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb66:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	895a      	ldrh	r2, [r3, #10]
 800bb6c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bb6e:	843b      	strh	r3, [r7, #32]
 800bb70:	4613      	mov	r3, r2
 800bb72:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800bb74:	8c3a      	ldrh	r2, [r7, #32]
 800bb76:	8bfb      	ldrh	r3, [r7, #30]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	bf28      	it	cs
 800bb7c:	4613      	movcs	r3, r2
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800bb82:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bb84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	0099      	lsls	r1, r3, #2
 800bb8a:	4b26      	ldr	r3, [pc, #152]	@ (800bc24 <handle_epin_slave+0x1c8>)
 800bb8c:	400b      	ands	r3, r1
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d829      	bhi.n	800bbe6 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800bb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00d      	beq.n	800bbb6 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800bb9a:	79bb      	ldrb	r3, [r7, #6]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	031b      	lsls	r3, r3, #12
 800bba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bba2:	4413      	add	r3, r2
 800bba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800bba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bbac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fc fdab 	bl	800870a <tu_fifo_read_n_const_addr_full_words>
 800bbb4:	e00c      	b.n	800bbd0 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bbbc:	79b9      	ldrb	r1, [r7, #6]
 800bbbe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bbc0:	f000 fc55 	bl	800c46e <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bbca:	441a      	add	r2, r3
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bbd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bbda:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bbde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d3ba      	bcc.n	800bb5a <handle_epin_slave+0xfe>
 800bbe4:	e000      	b.n	800bbe8 <handle_epin_slave+0x18c>
        break;
 800bbe6:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800bbe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10b      	bne.n	800bc10 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800bbf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbfa:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bbfe:	79ba      	ldrb	r2, [r7, #6]
 800bc00:	2101      	movs	r1, #1
 800bc02:	fa01 f202 	lsl.w	r2, r1, r2
 800bc06:	43d2      	mvns	r2, r2
 800bc08:	401a      	ands	r2, r3
 800bc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc0c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800bc10:	bf00      	nop
 800bc12:	3748      	adds	r7, #72	@ 0x48
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	0800efcc 	.word	0x0800efcc
 800bc1c:	20001864 	.word	0x20001864
 800bc20:	200018e4 	.word	0x200018e4
 800bc24:	0003fffc 	.word	0x0003fffc

0800bc28 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08e      	sub	sp, #56	@ 0x38
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	460a      	mov	r2, r1
 800bc32:	71fb      	strb	r3, [r7, #7]
 800bc34:	4613      	mov	r3, r2
 800bc36:	71bb      	strb	r3, [r7, #6]
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bc3c:	7efb      	ldrb	r3, [r7, #27]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <handle_ep_irq+0x1e>
    rhport = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bc46:	7efb      	ldrb	r3, [r7, #27]
 800bc48:	4a38      	ldr	r2, [pc, #224]	@ (800bd2c <handle_ep_irq+0x104>)
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	4413      	add	r3, r2
 800bc4e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bc50:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc5a:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bc5c:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800bc5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc6a:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800bc6c:	7c7b      	ldrb	r3, [r7, #17]
 800bc6e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	3301      	adds	r3, #1
 800bc76:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800bc78:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800bc7c:	79bb      	ldrb	r3, [r7, #6]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d101      	bne.n	800bc86 <handle_ep_irq+0x5e>
 800bc82:	2300      	movs	r3, #0
 800bc84:	e000      	b.n	800bc88 <handle_ep_irq+0x60>
 800bc86:	2310      	movs	r3, #16
 800bc88:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800bc8c:	79bb      	ldrb	r3, [r7, #6]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	bf14      	ite	ne
 800bc92:	2301      	movne	r3, #1
 800bc94:	2300      	moveq	r3, #0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	025b      	lsls	r3, r3, #9
 800bc9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bca0:	4413      	add	r3, r2
 800bca2:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bcaa:	e034      	b.n	800bd16 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800bcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcae:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bcb2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bcb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcba:	440b      	add	r3, r1
 800bcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d021      	beq.n	800bd0c <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bccc:	015b      	lsls	r3, r3, #5
 800bcce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcd0:	4413      	add	r3, r2
 800bcd2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800bce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d111      	bne.n	800bd0c <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bce8:	79bb      	ldrb	r3, [r7, #6]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d107      	bne.n	800bcfe <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800bcee:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff feb0 	bl	800ba5c <handle_epin_slave>
 800bcfc:	e006      	b.n	800bd0c <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bcfe:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff fe28 	bl	800b95c <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd10:	3301      	adds	r3, #1
 800bd12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd16:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bd1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d3c4      	bcc.n	800bcac <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bd22:	bf00      	nop
 800bd24:	bf00      	nop
 800bd26:	3738      	adds	r7, #56	@ 0x38
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	0800efcc 	.word	0x0800efcc

0800bd30 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b098      	sub	sp, #96	@ 0x60
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	71fb      	strb	r3, [r7, #7]
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bd40:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <dcd_int_handler+0x1e>
    rhport = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bd4e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bd52:	4a80      	ldr	r2, [pc, #512]	@ (800bf54 <dcd_int_handler+0x224>)
 800bd54:	011b      	lsls	r3, r3, #4
 800bd56:	4413      	add	r3, r2
 800bd58:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bd5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800bd5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800bd62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd68:	4013      	ands	r3, r2
 800bd6a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800bd6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00d      	beq.n	800bd92 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800bd76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bd7c:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800bd7e:	2001      	movs	r0, #1
 800bd80:	f7fe f81a 	bl	8009db8 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff fc0e 	bl	800b5a8 <handle_bus_reset>
    usbd_spin_unlock(true);
 800bd8c:	2001      	movs	r0, #1
 800bd8e:	f7fe f82d 	bl	8009dec <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800bd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800bd9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bda2:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fcea 	bl	800b780 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800bdac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01d      	beq.n	800bdf2 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800bdb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdbc:	615a      	str	r2, [r3, #20]
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800bdc4:	2304      	movs	r3, #4
 800bdc6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800bdd0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800bdd4:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800bdd8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bddc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800bde0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800bde4:	f107 0320 	add.w	r3, r7, #32
 800bde8:	4611      	mov	r1, r2
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fd fde6 	bl	80099bc <dcd_event_handler>
}
 800bdf0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800bdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	da1d      	bge.n	800be34 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800bdf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bdfe:	615a      	str	r2, [r3, #20]
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800be06:	2305      	movs	r3, #5
 800be08:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800be12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be16:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800be1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800be1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800be22:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800be26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fd fdc5 	bl	80099bc <dcd_event_handler>
}
 800be32:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800be34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be36:	f003 0304 	and.w	r3, r3, #4
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d022      	beq.n	800be84 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800be3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800be44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d017      	beq.n	800be7e <dcd_int_handler+0x14e>
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800be54:	2302      	movs	r3, #2
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5a:	2301      	movs	r3, #1
 800be5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800be60:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800be64:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800be66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be6a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800be6c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800be70:	f107 0314 	add.w	r3, r7, #20
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7fd fda0 	bl	80099bc <dcd_event_handler>
}
 800be7c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800be7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be82:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800be84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d02e      	beq.n	800beec <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800be8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be90:	2208      	movs	r2, #8
 800be92:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800be94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be96:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bea0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800bea2:	4b2d      	ldr	r3, [pc, #180]	@ (800bf58 <dcd_int_handler+0x228>)
 800bea4:	79db      	ldrb	r3, [r3, #7]
 800bea6:	f083 0301 	eor.w	r3, r3, #1
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d005      	beq.n	800bebc <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800beb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	f023 0208 	bic.w	r2, r3, #8
 800beb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beba:	619a      	str	r2, [r3, #24]
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800bec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bec6:	2301      	movs	r3, #1
 800bec8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800becc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bed0:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800bed2:	2303      	movs	r3, #3
 800bed4:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800bed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed8:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800beda:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800bede:	f107 0308 	add.w	r3, r7, #8
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fd fd69 	bl	80099bc <dcd_event_handler>
}
 800beea:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800beec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beee:	f003 0310 	and.w	r3, r3, #16
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d015      	beq.n	800bf22 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800bef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	f023 0210 	bic.w	r2, r3, #16
 800befe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf00:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff fc81 	bl	800b80c <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	f003 0310 	and.w	r3, r3, #16
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1f5      	bne.n	800bf02 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800bf16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	f043 0210 	orr.w	r2, r3, #16
 800bf1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf20:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800bf22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fe79 	bl	800bc28 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800bf36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d004      	beq.n	800bf4a <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2101      	movs	r1, #1
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fe6f 	bl	800bc28 <handle_ep_irq>
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3760      	adds	r7, #96	@ 0x60
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	0800efcc 	.word	0x0800efcc
 800bf58:	200018e4 	.word	0x200018e4

0800bf5c <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800bf7a:	e005      	b.n	800bf88 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d152      	bne.n	800c04c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800bfa6:	4b2c      	ldr	r3, [pc, #176]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a2c      	ldr	r2, [pc, #176]	@ (800c05c <dwc2_phy_update+0xc8>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d302      	bcc.n	800bfb6 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800bfb0:	2306      	movs	r3, #6
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e041      	b.n	800c03a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800bfb6:	4b28      	ldr	r3, [pc, #160]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a29      	ldr	r2, [pc, #164]	@ (800c060 <dwc2_phy_update+0xcc>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d902      	bls.n	800bfc6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800bfc0:	2307      	movs	r3, #7
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e039      	b.n	800c03a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800bfc6:	4b24      	ldr	r3, [pc, #144]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a26      	ldr	r2, [pc, #152]	@ (800c064 <dwc2_phy_update+0xd0>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d302      	bcc.n	800bfd6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e031      	b.n	800c03a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800bfd6:	4b20      	ldr	r3, [pc, #128]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a23      	ldr	r2, [pc, #140]	@ (800c068 <dwc2_phy_update+0xd4>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d902      	bls.n	800bfe6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800bfe0:	2309      	movs	r3, #9
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	e029      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800bfe6:	4b1c      	ldr	r3, [pc, #112]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a20      	ldr	r2, [pc, #128]	@ (800c06c <dwc2_phy_update+0xd8>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d902      	bls.n	800bff6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800bff0:	230a      	movs	r3, #10
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e021      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800bff6:	4b18      	ldr	r3, [pc, #96]	@ (800c058 <dwc2_phy_update+0xc4>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a1d      	ldr	r2, [pc, #116]	@ (800c070 <dwc2_phy_update+0xdc>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d902      	bls.n	800c006 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800c000:	230b      	movs	r3, #11
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e019      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800c006:	4b14      	ldr	r3, [pc, #80]	@ (800c058 <dwc2_phy_update+0xc4>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a1a      	ldr	r2, [pc, #104]	@ (800c074 <dwc2_phy_update+0xe0>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d302      	bcc.n	800c016 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800c010:	230c      	movs	r3, #12
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e011      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800c016:	4b10      	ldr	r3, [pc, #64]	@ (800c058 <dwc2_phy_update+0xc4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a17      	ldr	r2, [pc, #92]	@ (800c078 <dwc2_phy_update+0xe4>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d302      	bcc.n	800c026 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800c020:	230d      	movs	r3, #13
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e009      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800c026:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <dwc2_phy_update+0xc4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a14      	ldr	r2, [pc, #80]	@ (800c07c <dwc2_phy_update+0xe8>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d302      	bcc.n	800c036 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800c030:	230e      	movs	r3, #14
 800c032:	60fb      	str	r3, [r7, #12]
 800c034:	e001      	b.n	800c03a <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800c036:	230f      	movs	r3, #15
 800c038:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	029b      	lsls	r3, r3, #10
 800c046:	431a      	orrs	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]
  }
}
 800c04c:	bf00      	nop
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	20000208 	.word	0x20000208
 800c05c:	01e84800 	.word	0x01e84800
 800c060:	01a39ddf 	.word	0x01a39ddf
 800c064:	016e3600 	.word	0x016e3600
 800c068:	014ca43f 	.word	0x014ca43f
 800c06c:	01312cff 	.word	0x01312cff
 800c070:	011a499f 	.word	0x011a499f
 800c074:	01067380 	.word	0x01067380
 800c078:	00f42400 	.word	0x00f42400
 800c07c:	00e4e1c0 	.word	0x00e4e1c0

0800c080 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	f043 0201 	orr.w	r2, r3, #1
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d807      	bhi.n	800c0b2 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c0a2:	bf00      	nop
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f9      	bne.n	800c0a4 <reset_core+0x24>
 800c0b0:	e010      	b.n	800c0d4 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c0b2:	bf00      	nop
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0f9      	beq.n	800c0b4 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c0c8:	f023 0301 	bic.w	r3, r3, #1
 800c0cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c0d4:	bf00      	nop
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dafb      	bge.n	800c0d6 <reset_core+0x56>
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c100:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff ff26 	bl	800bf5c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ffb5 	bl	800c080 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c11c:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c124:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c12c:	2100      	movs	r1, #0
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff ff30 	bl	800bf94 <dwc2_phy_update>
}
 800c134:	bf00      	nop
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c14e:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c154:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c15c:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c15e:	7c3b      	ldrb	r3, [r7, #16]
 800c160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b80      	cmp	r3, #128	@ 0x80
 800c168:	d114      	bne.n	800c194 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f043 0310 	orr.w	r3, r3, #16
 800c170:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f023 0308 	bic.w	r3, r3, #8
 800c178:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c180:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c188:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	e012      	b.n	800c1ba <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f023 0310 	bic.w	r3, r3, #16
 800c19a:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c19c:	7b7b      	ldrb	r3, [r7, #13]
 800c19e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f043 0308 	orr.w	r3, r3, #8
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	e003      	b.n	800c1ba <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f023 0308 	bic.w	r3, r3, #8
 800c1b8:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c1c0:	7c3b      	ldrb	r3, [r7, #16]
 800c1c2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fec6 	bl	800bf5c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff ff55 	bl	800c080 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c1dc:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c1de:	7b7b      	ldrb	r3, [r7, #13]
 800c1e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <phy_hs_init+0xb4>
 800c1ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c1ee:	e001      	b.n	800c1f4 <phy_hs_init+0xb8>
 800c1f0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c200:	7c3b      	ldrb	r3, [r7, #16]
 800c202:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c206:	b2db      	uxtb	r3, r3
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7ff fec2 	bl	800bf94 <dwc2_phy_update>
}
 800c210:	bf00      	nop
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	041b      	lsls	r3, r3, #16
 800c228:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4a0e      	ldr	r2, [pc, #56]	@ (800c268 <check_dwc2+0x50>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d012      	beq.n	800c258 <check_dwc2+0x40>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4a0d      	ldr	r2, [pc, #52]	@ (800c26c <check_dwc2+0x54>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d00e      	beq.n	800c258 <check_dwc2+0x40>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4a0c      	ldr	r2, [pc, #48]	@ (800c270 <check_dwc2+0x58>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00a      	beq.n	800c258 <check_dwc2+0x40>
 800c242:	4b0c      	ldr	r3, [pc, #48]	@ (800c274 <check_dwc2+0x5c>)
 800c244:	60bb      	str	r3, [r7, #8]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d000      	beq.n	800c254 <check_dwc2+0x3c>
 800c252:	be00      	bkpt	0x0000
 800c254:	2300      	movs	r3, #0
 800c256:	e000      	b.n	800c25a <check_dwc2+0x42>
#endif

  return true;
 800c258:	2301      	movs	r3, #1
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	4f540000 	.word	0x4f540000
 800c26c:	55310000 	.word	0x55310000
 800c270:	55320000 	.word	0x55320000
 800c274:	e000edf0 	.word	0xe000edf0

0800c278 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d101      	bne.n	800c28e <dwc2_core_is_highspeed+0x16>
    return false;
 800c28a:	2300      	movs	r3, #0
 800c28c:	e00b      	b.n	800c2a6 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c292:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c294:	7b3b      	ldrb	r3, [r7, #12]
 800c296:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	bf14      	ite	ne
 800c2a0:	2301      	movne	r3, #1
 800c2a2:	2300      	moveq	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
	...

0800c2b4 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	71fb      	strb	r3, [r7, #7]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	71bb      	strb	r3, [r7, #6]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	717b      	strb	r3, [r7, #5]
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <dwc2_core_init+0x20>
    rhport = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	4a3b      	ldr	r2, [pc, #236]	@ (800c3c4 <dwc2_core_init+0x110>)
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	4413      	add	r3, r2
 800c2dc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c2de:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c2e0:	69f8      	ldr	r0, [r7, #28]
 800c2e2:	f7ff ff99 	bl	800c218 <check_dwc2>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f083 0301 	eor.w	r3, r3, #1
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00a      	beq.n	800c308 <dwc2_core_init+0x54>
 800c2f2:	4b35      	ldr	r3, [pc, #212]	@ (800c3c8 <dwc2_core_init+0x114>)
 800c2f4:	61bb      	str	r3, [r7, #24]
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d000      	beq.n	800c304 <dwc2_core_init+0x50>
 800c302:	be00      	bkpt	0x0000
 800c304:	2300      	movs	r3, #0
 800c306:	e058      	b.n	800c3ba <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f023 0201 	bic.w	r2, r3, #1
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c314:	79bb      	ldrb	r3, [r7, #6]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c31a:	69f8      	ldr	r0, [r7, #28]
 800c31c:	f7ff ff0e 	bl	800c13c <phy_hs_init>
 800c320:	e002      	b.n	800c328 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c322:	69f8      	ldr	r0, [r7, #28]
 800c324:	f7ff fee2 	bl	800c0ec <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f043 0207 	orr.w	r2, r3, #7
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c33a:	f023 020f 	bic.w	r2, r3, #15
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	2310      	movs	r3, #16
 800c34a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	019b      	lsls	r3, r3, #6
 800c350:	f043 0220 	orr.w	r2, r3, #32
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c358:	bf00      	nop
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1f9      	bne.n	800c35a <dwc2_core_init+0xa6>
}
 800c366:	bf00      	nop
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	2210      	movs	r2, #16
 800c370:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c372:	bf00      	nop
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1f9      	bne.n	800c374 <dwc2_core_init+0xc0>
}
 800c380:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f04f 32ff 	mov.w	r2, #4294967295
 800c388:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295
 800c390:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2200      	movs	r2, #0
 800c396:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c398:	797b      	ldrb	r3, [r7, #5]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d006      	beq.n	800c3ac <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	609a      	str	r2, [r3, #8]
 800c3aa:	e005      	b.n	800c3b8 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	f043 0210 	orr.w	r2, r3, #16
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c3b8:	2301      	movs	r3, #1
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3720      	adds	r7, #32
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	0800efdc 	.word	0x0800efdc
 800c3c8:	e000edf0 	.word	0xe000edf0

0800c3cc <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c3cc:	b480      	push	{r7}
 800c3ce:	b08f      	sub	sp, #60	@ 0x3c
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3e0:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	089b      	lsrs	r3, r3, #2
 800c3e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c3e8:	e00b      	b.n	800c402 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3f2:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f6:	6a3a      	ldr	r2, [r7, #32]
 800c3f8:	601a      	str	r2, [r3, #0]
}
 800c3fa:	bf00      	nop
    dst += 4;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	3304      	adds	r3, #4
 800c400:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c404:	1e5a      	subs	r2, r3, #1
 800c406:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1ee      	bne.n	800c3ea <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c418:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d020      	beq.n	800c462 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c428:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c436:	2b01      	cmp	r3, #1
 800c438:	d907      	bls.n	800c44a <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	3301      	adds	r3, #1
 800c43e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c440:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c442:	69ba      	ldr	r2, [r7, #24]
 800c444:	0a12      	lsrs	r2, r2, #8
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c44a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d907      	bls.n	800c462 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	3302      	adds	r3, #2
 800c456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c458:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	0c12      	lsrs	r2, r2, #16
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c462:	bf00      	nop
 800c464:	373c      	adds	r7, #60	@ 0x3c
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c46e:	b480      	push	{r7}
 800c470:	b08b      	sub	sp, #44	@ 0x2c
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	461a      	mov	r2, r3
 800c47a:	460b      	mov	r3, r1
 800c47c:	72fb      	strb	r3, [r7, #11]
 800c47e:	4613      	mov	r3, r2
 800c480:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c482:	7afb      	ldrb	r3, [r7, #11]
 800c484:	3301      	adds	r3, #1
 800c486:	031b      	lsls	r3, r3, #12
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c48e:	893b      	ldrh	r3, [r7, #8]
 800c490:	089b      	lsrs	r3, r3, #2
 800c492:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c494:	e008      	b.n	800c4a8 <dfifo_write_packet+0x3a>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	601a      	str	r2, [r3, #0]
    src += 4;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c4a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4aa:	1e5a      	subs	r2, r3, #1
 800c4ac:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1f1      	bne.n	800c496 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c4b2:	893b      	ldrh	r3, [r7, #8]
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c4bc:	7efb      	ldrb	r3, [r7, #27]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d019      	beq.n	800c4f6 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c4c8:	7efb      	ldrb	r3, [r7, #27]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d906      	bls.n	800c4dc <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	021b      	lsls	r3, r3, #8
 800c4d6:	6a3a      	ldr	r2, [r7, #32]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d906      	bls.n	800c4f0 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3302      	adds	r3, #2
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	041b      	lsls	r3, r3, #16
 800c4ea:	6a3a      	ldr	r2, [r7, #32]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	6a3a      	ldr	r2, [r7, #32]
 800c4f4:	601a      	str	r2, [r3, #0]
  }
}
 800c4f6:	bf00      	nop
 800c4f8:	372c      	adds	r7, #44	@ 0x2c
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
	...

0800c504 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d11f      	bne.n	800c556 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c516:	2301      	movs	r3, #1
 800c518:	723b      	strb	r3, [r7, #8]
 800c51a:	2300      	movs	r3, #0
 800c51c:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c51e:	f107 0308 	add.w	r3, r7, #8
 800c522:	4619      	mov	r1, r3
 800c524:	2000      	movs	r0, #0
 800c526:	f7fc fa63 	bl	80089f0 <tud_rhport_init>
 800c52a:	4603      	mov	r3, r0
 800c52c:	f083 0301 	eor.w	r3, r3, #1
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00a      	beq.n	800c54c <tusb_rhport_init+0x48>
 800c536:	4b23      	ldr	r3, [pc, #140]	@ (800c5c4 <tusb_rhport_init+0xc0>)
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d000      	beq.n	800c548 <tusb_rhport_init+0x44>
 800c546:	be00      	bkpt	0x0000
 800c548:	2300      	movs	r3, #0
 800c54a:	e036      	b.n	800c5ba <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c54c:	4b1e      	ldr	r3, [pc, #120]	@ (800c5c8 <tusb_rhport_init+0xc4>)
 800c54e:	2201      	movs	r2, #1
 800c550:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c552:	2301      	movs	r3, #1
 800c554:	e031      	b.n	800c5ba <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d803      	bhi.n	800c564 <tusb_rhport_init+0x60>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10a      	bne.n	800c57a <tusb_rhport_init+0x76>
 800c564:	4b17      	ldr	r3, [pc, #92]	@ (800c5c4 <tusb_rhport_init+0xc0>)
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d000      	beq.n	800c576 <tusb_rhport_init+0x72>
 800c574:	be00      	bkpt	0x0000
 800c576:	2300      	movs	r3, #0
 800c578:	e01f      	b.n	800c5ba <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	7811      	ldrb	r1, [r2, #0]
 800c580:	4a11      	ldr	r2, [pc, #68]	@ (800c5c8 <tusb_rhport_init+0xc4>)
 800c582:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d115      	bne.n	800c5b8 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7fc fa2d 	bl	80089f0 <tud_rhport_init>
 800c596:	4603      	mov	r3, r0
 800c598:	f083 0301 	eor.w	r3, r3, #1
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <tusb_rhport_init+0xb4>
 800c5a2:	4b08      	ldr	r3, [pc, #32]	@ (800c5c4 <tusb_rhport_init+0xc0>)
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d000      	beq.n	800c5b4 <tusb_rhport_init+0xb0>
 800c5b2:	be00      	bkpt	0x0000
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	e000      	b.n	800c5ba <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c5b8:	2301      	movs	r3, #1
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	e000edf0 	.word	0xe000edf0
 800c5c8:	200018f4 	.word	0x200018f4

0800c5cc <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <tu_edpt_claim+0x26>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <tu_edpt_claim+0x2a>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e01e      	b.n	800c634 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d108      	bne.n	800c616 <tu_edpt_claim+0x4a>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <tu_edpt_claim+0x4a>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <tu_edpt_claim+0x4c>
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	7813      	ldrb	r3, [r2, #0]
 800c62c:	f043 0304 	orr.w	r3, r3, #4
 800c630:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c632:	7bfb      	ldrb	r3, [r7, #15]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b01      	cmp	r3, #1
 800c656:	d108      	bne.n	800c66a <tu_edpt_release+0x2a>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <tu_edpt_release+0x2a>
 800c666:	2301      	movs	r3, #1
 800c668:	e000      	b.n	800c66c <tu_edpt_release+0x2c>
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	7813      	ldrb	r3, [r2, #0]
 800c680:	f023 0304 	bic.w	r3, r3, #4
 800c684:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c694:	b480      	push	{r7}
 800c696:	b08b      	sub	sp, #44	@ 0x2c
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	70bb      	strb	r3, [r7, #2]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	889b      	ldrh	r3, [r3, #4]
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6b2:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c6b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	78db      	ldrb	r3, [r3, #3]
 800c6ba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d059      	beq.n	800c778 <tu_edpt_validate+0xe4>
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	dc6e      	bgt.n	800c7a6 <tu_edpt_validate+0x112>
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d002      	beq.n	800c6d2 <tu_edpt_validate+0x3e>
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d018      	beq.n	800c702 <tu_edpt_validate+0x6e>
 800c6d0:	e069      	b.n	800c7a6 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d102      	bne.n	800c6de <tu_edpt_validate+0x4a>
 800c6d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6dc:	e001      	b.n	800c6e2 <tu_edpt_validate+0x4e>
 800c6de:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c6e2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c6e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6e6:	8a7b      	ldrh	r3, [r7, #18]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d95e      	bls.n	800c7aa <tu_edpt_validate+0x116>
 800c6ec:	4b35      	ldr	r3, [pc, #212]	@ (800c7c4 <tu_edpt_validate+0x130>)
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0301 	and.w	r3, r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d000      	beq.n	800c6fe <tu_edpt_validate+0x6a>
 800c6fc:	be00      	bkpt	0x0000
 800c6fe:	2300      	movs	r3, #0
 800c700:	e059      	b.n	800c7b6 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c702:	78fb      	ldrb	r3, [r7, #3]
 800c704:	2b02      	cmp	r3, #2
 800c706:	d10e      	bne.n	800c726 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c70a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c70e:	d04e      	beq.n	800c7ae <tu_edpt_validate+0x11a>
 800c710:	4b2c      	ldr	r3, [pc, #176]	@ (800c7c4 <tu_edpt_validate+0x130>)
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d000      	beq.n	800c722 <tu_edpt_validate+0x8e>
 800c720:	be00      	bkpt	0x0000
 800c722:	2300      	movs	r3, #0
 800c724:	e047      	b.n	800c7b6 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c726:	78bb      	ldrb	r3, [r7, #2]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00e      	beq.n	800c74a <tu_edpt_validate+0xb6>
 800c72c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c72e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c732:	d10a      	bne.n	800c74a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c740:	711a      	strb	r2, [r3, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800c746:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800c748:	e031      	b.n	800c7ae <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800c74a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d02e      	beq.n	800c7ae <tu_edpt_validate+0x11a>
 800c750:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c752:	2b10      	cmp	r3, #16
 800c754:	d02b      	beq.n	800c7ae <tu_edpt_validate+0x11a>
 800c756:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c758:	2b20      	cmp	r3, #32
 800c75a:	d028      	beq.n	800c7ae <tu_edpt_validate+0x11a>
 800c75c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c75e:	2b40      	cmp	r3, #64	@ 0x40
 800c760:	d025      	beq.n	800c7ae <tu_edpt_validate+0x11a>
 800c762:	4b18      	ldr	r3, [pc, #96]	@ (800c7c4 <tu_edpt_validate+0x130>)
 800c764:	61bb      	str	r3, [r7, #24]
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d000      	beq.n	800c774 <tu_edpt_validate+0xe0>
 800c772:	be00      	bkpt	0x0000
 800c774:	2300      	movs	r3, #0
 800c776:	e01e      	b.n	800c7b6 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d102      	bne.n	800c784 <tu_edpt_validate+0xf0>
 800c77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c782:	e000      	b.n	800c786 <tu_edpt_validate+0xf2>
 800c784:	2340      	movs	r3, #64	@ 0x40
 800c786:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800c788:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c78a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d910      	bls.n	800c7b2 <tu_edpt_validate+0x11e>
 800c790:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c4 <tu_edpt_validate+0x130>)
 800c792:	623b      	str	r3, [r7, #32]
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d000      	beq.n	800c7a2 <tu_edpt_validate+0x10e>
 800c7a0:	be00      	bkpt	0x0000
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e007      	b.n	800c7b6 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e005      	b.n	800c7b6 <tu_edpt_validate+0x122>
      break;
 800c7aa:	bf00      	nop
 800c7ac:	e002      	b.n	800c7b4 <tu_edpt_validate+0x120>
      break;
 800c7ae:	bf00      	nop
 800c7b0:	e000      	b.n	800c7b4 <tu_edpt_validate+0x120>
      break;
 800c7b2:	bf00      	nop
  }

  return true;
 800c7b4:	2301      	movs	r3, #1
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	372c      	adds	r7, #44	@ 0x2c
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	e000edf0 	.word	0xe000edf0

0800c7c8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800c7c8:	b480      	push	{r7}
 800c7ca:	b08d      	sub	sp, #52	@ 0x34
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	80fb      	strh	r3, [r7, #6]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800c7e2:	88fb      	ldrh	r3, [r7, #6]
 800c7e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7e6:	4413      	add	r3, r2
 800c7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800c7ea:	e027      	b.n	800c83c <tu_edpt_bind_driver+0x74>
 800c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ee:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800c7f6:	2b05      	cmp	r3, #5
 800c7f8:	d116      	bne.n	800c828 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	789b      	ldrb	r3, [r3, #2]
 800c7fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c806:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800c808:	7fbb      	ldrb	r3, [r7, #30]
 800c80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c80e:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	4413      	add	r3, r2
 800c816:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c81a:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800c81c:	7ffa      	ldrb	r2, [r7, #31]
 800c81e:	09d2      	lsrs	r2, r2, #7
 800c820:	b2d2      	uxtb	r2, r2
 800c822:	4611      	mov	r1, r2
 800c824:	797a      	ldrb	r2, [r7, #5]
 800c826:	545a      	strb	r2, [r3, r1]
 800c828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800c83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800c83c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	429a      	cmp	r2, r3
 800c842:	d3d3      	bcc.n	800c7ec <tu_edpt_bind_driver+0x24>
  }
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3734      	adds	r7, #52	@ 0x34
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <atoi>:
 800c852:	220a      	movs	r2, #10
 800c854:	2100      	movs	r1, #0
 800c856:	f000 b87b 	b.w	800c950 <strtol>
	...

0800c85c <_strtol_l.isra.0>:
 800c85c:	2b24      	cmp	r3, #36	@ 0x24
 800c85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c862:	4686      	mov	lr, r0
 800c864:	4690      	mov	r8, r2
 800c866:	d801      	bhi.n	800c86c <_strtol_l.isra.0+0x10>
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d106      	bne.n	800c87a <_strtol_l.isra.0+0x1e>
 800c86c:	f000 fa82 	bl	800cd74 <__errno>
 800c870:	2316      	movs	r3, #22
 800c872:	6003      	str	r3, [r0, #0]
 800c874:	2000      	movs	r0, #0
 800c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87a:	4834      	ldr	r0, [pc, #208]	@ (800c94c <_strtol_l.isra.0+0xf0>)
 800c87c:	460d      	mov	r5, r1
 800c87e:	462a      	mov	r2, r5
 800c880:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c884:	5d06      	ldrb	r6, [r0, r4]
 800c886:	f016 0608 	ands.w	r6, r6, #8
 800c88a:	d1f8      	bne.n	800c87e <_strtol_l.isra.0+0x22>
 800c88c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c88e:	d110      	bne.n	800c8b2 <_strtol_l.isra.0+0x56>
 800c890:	782c      	ldrb	r4, [r5, #0]
 800c892:	2601      	movs	r6, #1
 800c894:	1c95      	adds	r5, r2, #2
 800c896:	f033 0210 	bics.w	r2, r3, #16
 800c89a:	d115      	bne.n	800c8c8 <_strtol_l.isra.0+0x6c>
 800c89c:	2c30      	cmp	r4, #48	@ 0x30
 800c89e:	d10d      	bne.n	800c8bc <_strtol_l.isra.0+0x60>
 800c8a0:	782a      	ldrb	r2, [r5, #0]
 800c8a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8a6:	2a58      	cmp	r2, #88	@ 0x58
 800c8a8:	d108      	bne.n	800c8bc <_strtol_l.isra.0+0x60>
 800c8aa:	786c      	ldrb	r4, [r5, #1]
 800c8ac:	3502      	adds	r5, #2
 800c8ae:	2310      	movs	r3, #16
 800c8b0:	e00a      	b.n	800c8c8 <_strtol_l.isra.0+0x6c>
 800c8b2:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8b4:	bf04      	itt	eq
 800c8b6:	782c      	ldrbeq	r4, [r5, #0]
 800c8b8:	1c95      	addeq	r5, r2, #2
 800c8ba:	e7ec      	b.n	800c896 <_strtol_l.isra.0+0x3a>
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f6      	bne.n	800c8ae <_strtol_l.isra.0+0x52>
 800c8c0:	2c30      	cmp	r4, #48	@ 0x30
 800c8c2:	bf14      	ite	ne
 800c8c4:	230a      	movne	r3, #10
 800c8c6:	2308      	moveq	r3, #8
 800c8c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c8cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	fbbc f9f3 	udiv	r9, ip, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c8dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c8e0:	2f09      	cmp	r7, #9
 800c8e2:	d80f      	bhi.n	800c904 <_strtol_l.isra.0+0xa8>
 800c8e4:	463c      	mov	r4, r7
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	dd1b      	ble.n	800c922 <_strtol_l.isra.0+0xc6>
 800c8ea:	1c57      	adds	r7, r2, #1
 800c8ec:	d007      	beq.n	800c8fe <_strtol_l.isra.0+0xa2>
 800c8ee:	4581      	cmp	r9, r0
 800c8f0:	d314      	bcc.n	800c91c <_strtol_l.isra.0+0xc0>
 800c8f2:	d101      	bne.n	800c8f8 <_strtol_l.isra.0+0x9c>
 800c8f4:	45a2      	cmp	sl, r4
 800c8f6:	db11      	blt.n	800c91c <_strtol_l.isra.0+0xc0>
 800c8f8:	fb00 4003 	mla	r0, r0, r3, r4
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c902:	e7eb      	b.n	800c8dc <_strtol_l.isra.0+0x80>
 800c904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c908:	2f19      	cmp	r7, #25
 800c90a:	d801      	bhi.n	800c910 <_strtol_l.isra.0+0xb4>
 800c90c:	3c37      	subs	r4, #55	@ 0x37
 800c90e:	e7ea      	b.n	800c8e6 <_strtol_l.isra.0+0x8a>
 800c910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c914:	2f19      	cmp	r7, #25
 800c916:	d804      	bhi.n	800c922 <_strtol_l.isra.0+0xc6>
 800c918:	3c57      	subs	r4, #87	@ 0x57
 800c91a:	e7e4      	b.n	800c8e6 <_strtol_l.isra.0+0x8a>
 800c91c:	f04f 32ff 	mov.w	r2, #4294967295
 800c920:	e7ed      	b.n	800c8fe <_strtol_l.isra.0+0xa2>
 800c922:	1c53      	adds	r3, r2, #1
 800c924:	d108      	bne.n	800c938 <_strtol_l.isra.0+0xdc>
 800c926:	2322      	movs	r3, #34	@ 0x22
 800c928:	f8ce 3000 	str.w	r3, [lr]
 800c92c:	4660      	mov	r0, ip
 800c92e:	f1b8 0f00 	cmp.w	r8, #0
 800c932:	d0a0      	beq.n	800c876 <_strtol_l.isra.0+0x1a>
 800c934:	1e69      	subs	r1, r5, #1
 800c936:	e006      	b.n	800c946 <_strtol_l.isra.0+0xea>
 800c938:	b106      	cbz	r6, 800c93c <_strtol_l.isra.0+0xe0>
 800c93a:	4240      	negs	r0, r0
 800c93c:	f1b8 0f00 	cmp.w	r8, #0
 800c940:	d099      	beq.n	800c876 <_strtol_l.isra.0+0x1a>
 800c942:	2a00      	cmp	r2, #0
 800c944:	d1f6      	bne.n	800c934 <_strtol_l.isra.0+0xd8>
 800c946:	f8c8 1000 	str.w	r1, [r8]
 800c94a:	e794      	b.n	800c876 <_strtol_l.isra.0+0x1a>
 800c94c:	0800efed 	.word	0x0800efed

0800c950 <strtol>:
 800c950:	4613      	mov	r3, r2
 800c952:	460a      	mov	r2, r1
 800c954:	4601      	mov	r1, r0
 800c956:	4802      	ldr	r0, [pc, #8]	@ (800c960 <strtol+0x10>)
 800c958:	6800      	ldr	r0, [r0, #0]
 800c95a:	f7ff bf7f 	b.w	800c85c <_strtol_l.isra.0>
 800c95e:	bf00      	nop
 800c960:	20000250 	.word	0x20000250

0800c964 <std>:
 800c964:	2300      	movs	r3, #0
 800c966:	b510      	push	{r4, lr}
 800c968:	4604      	mov	r4, r0
 800c96a:	e9c0 3300 	strd	r3, r3, [r0]
 800c96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c972:	6083      	str	r3, [r0, #8]
 800c974:	8181      	strh	r1, [r0, #12]
 800c976:	6643      	str	r3, [r0, #100]	@ 0x64
 800c978:	81c2      	strh	r2, [r0, #14]
 800c97a:	6183      	str	r3, [r0, #24]
 800c97c:	4619      	mov	r1, r3
 800c97e:	2208      	movs	r2, #8
 800c980:	305c      	adds	r0, #92	@ 0x5c
 800c982:	f000 f94c 	bl	800cc1e <memset>
 800c986:	4b0d      	ldr	r3, [pc, #52]	@ (800c9bc <std+0x58>)
 800c988:	6263      	str	r3, [r4, #36]	@ 0x24
 800c98a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c0 <std+0x5c>)
 800c98c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c98e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c4 <std+0x60>)
 800c990:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c992:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c8 <std+0x64>)
 800c994:	6323      	str	r3, [r4, #48]	@ 0x30
 800c996:	4b0d      	ldr	r3, [pc, #52]	@ (800c9cc <std+0x68>)
 800c998:	6224      	str	r4, [r4, #32]
 800c99a:	429c      	cmp	r4, r3
 800c99c:	d006      	beq.n	800c9ac <std+0x48>
 800c99e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c9a2:	4294      	cmp	r4, r2
 800c9a4:	d002      	beq.n	800c9ac <std+0x48>
 800c9a6:	33d0      	adds	r3, #208	@ 0xd0
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	d105      	bne.n	800c9b8 <std+0x54>
 800c9ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b4:	f000 ba08 	b.w	800cdc8 <__retarget_lock_init_recursive>
 800c9b8:	bd10      	pop	{r4, pc}
 800c9ba:	bf00      	nop
 800c9bc:	0800cb99 	.word	0x0800cb99
 800c9c0:	0800cbbb 	.word	0x0800cbbb
 800c9c4:	0800cbf3 	.word	0x0800cbf3
 800c9c8:	0800cc17 	.word	0x0800cc17
 800c9cc:	200018f8 	.word	0x200018f8

0800c9d0 <stdio_exit_handler>:
 800c9d0:	4a02      	ldr	r2, [pc, #8]	@ (800c9dc <stdio_exit_handler+0xc>)
 800c9d2:	4903      	ldr	r1, [pc, #12]	@ (800c9e0 <stdio_exit_handler+0x10>)
 800c9d4:	4803      	ldr	r0, [pc, #12]	@ (800c9e4 <stdio_exit_handler+0x14>)
 800c9d6:	f000 b869 	b.w	800caac <_fwalk_sglue>
 800c9da:	bf00      	nop
 800c9dc:	20000244 	.word	0x20000244
 800c9e0:	0800d97d 	.word	0x0800d97d
 800c9e4:	20000254 	.word	0x20000254

0800c9e8 <cleanup_stdio>:
 800c9e8:	6841      	ldr	r1, [r0, #4]
 800c9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800ca1c <cleanup_stdio+0x34>)
 800c9ec:	4299      	cmp	r1, r3
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	d001      	beq.n	800c9f8 <cleanup_stdio+0x10>
 800c9f4:	f000 ffc2 	bl	800d97c <_fflush_r>
 800c9f8:	68a1      	ldr	r1, [r4, #8]
 800c9fa:	4b09      	ldr	r3, [pc, #36]	@ (800ca20 <cleanup_stdio+0x38>)
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <cleanup_stdio+0x1e>
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 ffbb 	bl	800d97c <_fflush_r>
 800ca06:	68e1      	ldr	r1, [r4, #12]
 800ca08:	4b06      	ldr	r3, [pc, #24]	@ (800ca24 <cleanup_stdio+0x3c>)
 800ca0a:	4299      	cmp	r1, r3
 800ca0c:	d004      	beq.n	800ca18 <cleanup_stdio+0x30>
 800ca0e:	4620      	mov	r0, r4
 800ca10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca14:	f000 bfb2 	b.w	800d97c <_fflush_r>
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	bf00      	nop
 800ca1c:	200018f8 	.word	0x200018f8
 800ca20:	20001960 	.word	0x20001960
 800ca24:	200019c8 	.word	0x200019c8

0800ca28 <global_stdio_init.part.0>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca58 <global_stdio_init.part.0+0x30>)
 800ca2c:	4c0b      	ldr	r4, [pc, #44]	@ (800ca5c <global_stdio_init.part.0+0x34>)
 800ca2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ca60 <global_stdio_init.part.0+0x38>)
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	4620      	mov	r0, r4
 800ca34:	2200      	movs	r2, #0
 800ca36:	2104      	movs	r1, #4
 800ca38:	f7ff ff94 	bl	800c964 <std>
 800ca3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca40:	2201      	movs	r2, #1
 800ca42:	2109      	movs	r1, #9
 800ca44:	f7ff ff8e 	bl	800c964 <std>
 800ca48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca52:	2112      	movs	r1, #18
 800ca54:	f7ff bf86 	b.w	800c964 <std>
 800ca58:	20001a30 	.word	0x20001a30
 800ca5c:	200018f8 	.word	0x200018f8
 800ca60:	0800c9d1 	.word	0x0800c9d1

0800ca64 <__sfp_lock_acquire>:
 800ca64:	4801      	ldr	r0, [pc, #4]	@ (800ca6c <__sfp_lock_acquire+0x8>)
 800ca66:	f000 b9b0 	b.w	800cdca <__retarget_lock_acquire_recursive>
 800ca6a:	bf00      	nop
 800ca6c:	20001a39 	.word	0x20001a39

0800ca70 <__sfp_lock_release>:
 800ca70:	4801      	ldr	r0, [pc, #4]	@ (800ca78 <__sfp_lock_release+0x8>)
 800ca72:	f000 b9ab 	b.w	800cdcc <__retarget_lock_release_recursive>
 800ca76:	bf00      	nop
 800ca78:	20001a39 	.word	0x20001a39

0800ca7c <__sinit>:
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	4604      	mov	r4, r0
 800ca80:	f7ff fff0 	bl	800ca64 <__sfp_lock_acquire>
 800ca84:	6a23      	ldr	r3, [r4, #32]
 800ca86:	b11b      	cbz	r3, 800ca90 <__sinit+0x14>
 800ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca8c:	f7ff bff0 	b.w	800ca70 <__sfp_lock_release>
 800ca90:	4b04      	ldr	r3, [pc, #16]	@ (800caa4 <__sinit+0x28>)
 800ca92:	6223      	str	r3, [r4, #32]
 800ca94:	4b04      	ldr	r3, [pc, #16]	@ (800caa8 <__sinit+0x2c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1f5      	bne.n	800ca88 <__sinit+0xc>
 800ca9c:	f7ff ffc4 	bl	800ca28 <global_stdio_init.part.0>
 800caa0:	e7f2      	b.n	800ca88 <__sinit+0xc>
 800caa2:	bf00      	nop
 800caa4:	0800c9e9 	.word	0x0800c9e9
 800caa8:	20001a30 	.word	0x20001a30

0800caac <_fwalk_sglue>:
 800caac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab0:	4607      	mov	r7, r0
 800cab2:	4688      	mov	r8, r1
 800cab4:	4614      	mov	r4, r2
 800cab6:	2600      	movs	r6, #0
 800cab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cabc:	f1b9 0901 	subs.w	r9, r9, #1
 800cac0:	d505      	bpl.n	800cace <_fwalk_sglue+0x22>
 800cac2:	6824      	ldr	r4, [r4, #0]
 800cac4:	2c00      	cmp	r4, #0
 800cac6:	d1f7      	bne.n	800cab8 <_fwalk_sglue+0xc>
 800cac8:	4630      	mov	r0, r6
 800caca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cace:	89ab      	ldrh	r3, [r5, #12]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d907      	bls.n	800cae4 <_fwalk_sglue+0x38>
 800cad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cad8:	3301      	adds	r3, #1
 800cada:	d003      	beq.n	800cae4 <_fwalk_sglue+0x38>
 800cadc:	4629      	mov	r1, r5
 800cade:	4638      	mov	r0, r7
 800cae0:	47c0      	blx	r8
 800cae2:	4306      	orrs	r6, r0
 800cae4:	3568      	adds	r5, #104	@ 0x68
 800cae6:	e7e9      	b.n	800cabc <_fwalk_sglue+0x10>

0800cae8 <sniprintf>:
 800cae8:	b40c      	push	{r2, r3}
 800caea:	b530      	push	{r4, r5, lr}
 800caec:	4b18      	ldr	r3, [pc, #96]	@ (800cb50 <sniprintf+0x68>)
 800caee:	1e0c      	subs	r4, r1, #0
 800caf0:	681d      	ldr	r5, [r3, #0]
 800caf2:	b09d      	sub	sp, #116	@ 0x74
 800caf4:	da08      	bge.n	800cb08 <sniprintf+0x20>
 800caf6:	238b      	movs	r3, #139	@ 0x8b
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	f04f 30ff 	mov.w	r0, #4294967295
 800cafe:	b01d      	add	sp, #116	@ 0x74
 800cb00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb04:	b002      	add	sp, #8
 800cb06:	4770      	bx	lr
 800cb08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb10:	f04f 0300 	mov.w	r3, #0
 800cb14:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb16:	bf14      	ite	ne
 800cb18:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb1c:	4623      	moveq	r3, r4
 800cb1e:	9304      	str	r3, [sp, #16]
 800cb20:	9307      	str	r3, [sp, #28]
 800cb22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb26:	9002      	str	r0, [sp, #8]
 800cb28:	9006      	str	r0, [sp, #24]
 800cb2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb30:	ab21      	add	r3, sp, #132	@ 0x84
 800cb32:	a902      	add	r1, sp, #8
 800cb34:	4628      	mov	r0, r5
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	f000 fad2 	bl	800d0e0 <_svfiprintf_r>
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	bfbc      	itt	lt
 800cb40:	238b      	movlt	r3, #139	@ 0x8b
 800cb42:	602b      	strlt	r3, [r5, #0]
 800cb44:	2c00      	cmp	r4, #0
 800cb46:	d0da      	beq.n	800cafe <sniprintf+0x16>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	701a      	strb	r2, [r3, #0]
 800cb4e:	e7d6      	b.n	800cafe <sniprintf+0x16>
 800cb50:	20000250 	.word	0x20000250

0800cb54 <siprintf>:
 800cb54:	b40e      	push	{r1, r2, r3}
 800cb56:	b510      	push	{r4, lr}
 800cb58:	b09d      	sub	sp, #116	@ 0x74
 800cb5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cb5c:	9002      	str	r0, [sp, #8]
 800cb5e:	9006      	str	r0, [sp, #24]
 800cb60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb64:	480a      	ldr	r0, [pc, #40]	@ (800cb90 <siprintf+0x3c>)
 800cb66:	9107      	str	r1, [sp, #28]
 800cb68:	9104      	str	r1, [sp, #16]
 800cb6a:	490a      	ldr	r1, [pc, #40]	@ (800cb94 <siprintf+0x40>)
 800cb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb70:	9105      	str	r1, [sp, #20]
 800cb72:	2400      	movs	r4, #0
 800cb74:	a902      	add	r1, sp, #8
 800cb76:	6800      	ldr	r0, [r0, #0]
 800cb78:	9301      	str	r3, [sp, #4]
 800cb7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb7c:	f000 fab0 	bl	800d0e0 <_svfiprintf_r>
 800cb80:	9b02      	ldr	r3, [sp, #8]
 800cb82:	701c      	strb	r4, [r3, #0]
 800cb84:	b01d      	add	sp, #116	@ 0x74
 800cb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb8a:	b003      	add	sp, #12
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	20000250 	.word	0x20000250
 800cb94:	ffff0208 	.word	0xffff0208

0800cb98 <__sread>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba0:	f000 f8c4 	bl	800cd2c <_read_r>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	bfab      	itete	ge
 800cba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbaa:	89a3      	ldrhlt	r3, [r4, #12]
 800cbac:	181b      	addge	r3, r3, r0
 800cbae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbb2:	bfac      	ite	ge
 800cbb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbb6:	81a3      	strhlt	r3, [r4, #12]
 800cbb8:	bd10      	pop	{r4, pc}

0800cbba <__swrite>:
 800cbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbe:	461f      	mov	r7, r3
 800cbc0:	898b      	ldrh	r3, [r1, #12]
 800cbc2:	05db      	lsls	r3, r3, #23
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	4616      	mov	r6, r2
 800cbca:	d505      	bpl.n	800cbd8 <__swrite+0x1e>
 800cbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f000 f898 	bl	800cd08 <_lseek_r>
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbe2:	81a3      	strh	r3, [r4, #12]
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	463b      	mov	r3, r7
 800cbe8:	4628      	mov	r0, r5
 800cbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbee:	f000 b8af 	b.w	800cd50 <_write_r>

0800cbf2 <__sseek>:
 800cbf2:	b510      	push	{r4, lr}
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfa:	f000 f885 	bl	800cd08 <_lseek_r>
 800cbfe:	1c43      	adds	r3, r0, #1
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	bf15      	itete	ne
 800cc04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc0e:	81a3      	strheq	r3, [r4, #12]
 800cc10:	bf18      	it	ne
 800cc12:	81a3      	strhne	r3, [r4, #12]
 800cc14:	bd10      	pop	{r4, pc}

0800cc16 <__sclose>:
 800cc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1a:	f000 b865 	b.w	800cce8 <_close_r>

0800cc1e <memset>:
 800cc1e:	4402      	add	r2, r0
 800cc20:	4603      	mov	r3, r0
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d100      	bne.n	800cc28 <memset+0xa>
 800cc26:	4770      	bx	lr
 800cc28:	f803 1b01 	strb.w	r1, [r3], #1
 800cc2c:	e7f9      	b.n	800cc22 <memset+0x4>
	...

0800cc30 <strtok>:
 800cc30:	4b16      	ldr	r3, [pc, #88]	@ (800cc8c <strtok+0x5c>)
 800cc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc36:	681f      	ldr	r7, [r3, #0]
 800cc38:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	460e      	mov	r6, r1
 800cc3e:	b9ec      	cbnz	r4, 800cc7c <strtok+0x4c>
 800cc40:	2050      	movs	r0, #80	@ 0x50
 800cc42:	f000 f93b 	bl	800cebc <malloc>
 800cc46:	4602      	mov	r2, r0
 800cc48:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc4a:	b920      	cbnz	r0, 800cc56 <strtok+0x26>
 800cc4c:	4b10      	ldr	r3, [pc, #64]	@ (800cc90 <strtok+0x60>)
 800cc4e:	4811      	ldr	r0, [pc, #68]	@ (800cc94 <strtok+0x64>)
 800cc50:	215b      	movs	r1, #91	@ 0x5b
 800cc52:	f000 f8cb 	bl	800cdec <__assert_func>
 800cc56:	e9c0 4400 	strd	r4, r4, [r0]
 800cc5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cc5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cc62:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cc66:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cc6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cc6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cc72:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cc76:	6184      	str	r4, [r0, #24]
 800cc78:	7704      	strb	r4, [r0, #28]
 800cc7a:	6244      	str	r4, [r0, #36]	@ 0x24
 800cc7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4628      	mov	r0, r5
 800cc82:	2301      	movs	r3, #1
 800cc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	f000 b806 	b.w	800cc98 <__strtok_r>
 800cc8c:	20000250 	.word	0x20000250
 800cc90:	0800f0ed 	.word	0x0800f0ed
 800cc94:	0800f104 	.word	0x0800f104

0800cc98 <__strtok_r>:
 800cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	b908      	cbnz	r0, 800cca2 <__strtok_r+0xa>
 800cc9e:	6814      	ldr	r4, [r2, #0]
 800cca0:	b144      	cbz	r4, 800ccb4 <__strtok_r+0x1c>
 800cca2:	4620      	mov	r0, r4
 800cca4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cca8:	460f      	mov	r7, r1
 800ccaa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ccae:	b91e      	cbnz	r6, 800ccb8 <__strtok_r+0x20>
 800ccb0:	b965      	cbnz	r5, 800cccc <__strtok_r+0x34>
 800ccb2:	6015      	str	r5, [r2, #0]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e005      	b.n	800ccc4 <__strtok_r+0x2c>
 800ccb8:	42b5      	cmp	r5, r6
 800ccba:	d1f6      	bne.n	800ccaa <__strtok_r+0x12>
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1f0      	bne.n	800cca2 <__strtok_r+0xa>
 800ccc0:	6014      	str	r4, [r2, #0]
 800ccc2:	7003      	strb	r3, [r0, #0]
 800ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc6:	461c      	mov	r4, r3
 800ccc8:	e00c      	b.n	800cce4 <__strtok_r+0x4c>
 800ccca:	b91d      	cbnz	r5, 800ccd4 <__strtok_r+0x3c>
 800cccc:	4627      	mov	r7, r4
 800ccce:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccd2:	460e      	mov	r6, r1
 800ccd4:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ccd8:	42ab      	cmp	r3, r5
 800ccda:	d1f6      	bne.n	800ccca <__strtok_r+0x32>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d0f2      	beq.n	800ccc6 <__strtok_r+0x2e>
 800cce0:	2300      	movs	r3, #0
 800cce2:	703b      	strb	r3, [r7, #0]
 800cce4:	6014      	str	r4, [r2, #0]
 800cce6:	e7ed      	b.n	800ccc4 <__strtok_r+0x2c>

0800cce8 <_close_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	@ (800cd04 <_close_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f7f6 fe55 	bl	80039a2 <_close>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_close_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_close_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	20001a34 	.word	0x20001a34

0800cd08 <_lseek_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	@ (800cd28 <_lseek_r+0x20>)
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	4608      	mov	r0, r1
 800cd10:	4611      	mov	r1, r2
 800cd12:	2200      	movs	r2, #0
 800cd14:	602a      	str	r2, [r5, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	f7f6 fe6a 	bl	80039f0 <_lseek>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d102      	bne.n	800cd26 <_lseek_r+0x1e>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	b103      	cbz	r3, 800cd26 <_lseek_r+0x1e>
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	20001a34 	.word	0x20001a34

0800cd2c <_read_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d07      	ldr	r5, [pc, #28]	@ (800cd4c <_read_r+0x20>)
 800cd30:	4604      	mov	r4, r0
 800cd32:	4608      	mov	r0, r1
 800cd34:	4611      	mov	r1, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	602a      	str	r2, [r5, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f7f6 fdf8 	bl	8003930 <_read>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d102      	bne.n	800cd4a <_read_r+0x1e>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b103      	cbz	r3, 800cd4a <_read_r+0x1e>
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	20001a34 	.word	0x20001a34

0800cd50 <_write_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d07      	ldr	r5, [pc, #28]	@ (800cd70 <_write_r+0x20>)
 800cd54:	4604      	mov	r4, r0
 800cd56:	4608      	mov	r0, r1
 800cd58:	4611      	mov	r1, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f7f6 fe03 	bl	800396a <_write>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_write_r+0x1e>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_write_r+0x1e>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	20001a34 	.word	0x20001a34

0800cd74 <__errno>:
 800cd74:	4b01      	ldr	r3, [pc, #4]	@ (800cd7c <__errno+0x8>)
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	20000250 	.word	0x20000250

0800cd80 <__libc_init_array>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	4d0d      	ldr	r5, [pc, #52]	@ (800cdb8 <__libc_init_array+0x38>)
 800cd84:	4c0d      	ldr	r4, [pc, #52]	@ (800cdbc <__libc_init_array+0x3c>)
 800cd86:	1b64      	subs	r4, r4, r5
 800cd88:	10a4      	asrs	r4, r4, #2
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	42a6      	cmp	r6, r4
 800cd8e:	d109      	bne.n	800cda4 <__libc_init_array+0x24>
 800cd90:	4d0b      	ldr	r5, [pc, #44]	@ (800cdc0 <__libc_init_array+0x40>)
 800cd92:	4c0c      	ldr	r4, [pc, #48]	@ (800cdc4 <__libc_init_array+0x44>)
 800cd94:	f000 fff0 	bl	800dd78 <_init>
 800cd98:	1b64      	subs	r4, r4, r5
 800cd9a:	10a4      	asrs	r4, r4, #2
 800cd9c:	2600      	movs	r6, #0
 800cd9e:	42a6      	cmp	r6, r4
 800cda0:	d105      	bne.n	800cdae <__libc_init_array+0x2e>
 800cda2:	bd70      	pop	{r4, r5, r6, pc}
 800cda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda8:	4798      	blx	r3
 800cdaa:	3601      	adds	r6, #1
 800cdac:	e7ee      	b.n	800cd8c <__libc_init_array+0xc>
 800cdae:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb2:	4798      	blx	r3
 800cdb4:	3601      	adds	r6, #1
 800cdb6:	e7f2      	b.n	800cd9e <__libc_init_array+0x1e>
 800cdb8:	0800f1d8 	.word	0x0800f1d8
 800cdbc:	0800f1d8 	.word	0x0800f1d8
 800cdc0:	0800f1d8 	.word	0x0800f1d8
 800cdc4:	0800f1dc 	.word	0x0800f1dc

0800cdc8 <__retarget_lock_init_recursive>:
 800cdc8:	4770      	bx	lr

0800cdca <__retarget_lock_acquire_recursive>:
 800cdca:	4770      	bx	lr

0800cdcc <__retarget_lock_release_recursive>:
 800cdcc:	4770      	bx	lr

0800cdce <memcpy>:
 800cdce:	440a      	add	r2, r1
 800cdd0:	4291      	cmp	r1, r2
 800cdd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdd6:	d100      	bne.n	800cdda <memcpy+0xc>
 800cdd8:	4770      	bx	lr
 800cdda:	b510      	push	{r4, lr}
 800cddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cde0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cde4:	4291      	cmp	r1, r2
 800cde6:	d1f9      	bne.n	800cddc <memcpy+0xe>
 800cde8:	bd10      	pop	{r4, pc}
	...

0800cdec <__assert_func>:
 800cdec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdee:	4614      	mov	r4, r2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4b09      	ldr	r3, [pc, #36]	@ (800ce18 <__assert_func+0x2c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	68d8      	ldr	r0, [r3, #12]
 800cdfa:	b14c      	cbz	r4, 800ce10 <__assert_func+0x24>
 800cdfc:	4b07      	ldr	r3, [pc, #28]	@ (800ce1c <__assert_func+0x30>)
 800cdfe:	9100      	str	r1, [sp, #0]
 800ce00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce04:	4906      	ldr	r1, [pc, #24]	@ (800ce20 <__assert_func+0x34>)
 800ce06:	462b      	mov	r3, r5
 800ce08:	f000 fde0 	bl	800d9cc <fiprintf>
 800ce0c:	f000 feae 	bl	800db6c <abort>
 800ce10:	4b04      	ldr	r3, [pc, #16]	@ (800ce24 <__assert_func+0x38>)
 800ce12:	461c      	mov	r4, r3
 800ce14:	e7f3      	b.n	800cdfe <__assert_func+0x12>
 800ce16:	bf00      	nop
 800ce18:	20000250 	.word	0x20000250
 800ce1c:	0800f15e 	.word	0x0800f15e
 800ce20:	0800f16b 	.word	0x0800f16b
 800ce24:	0800f199 	.word	0x0800f199

0800ce28 <_free_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	2900      	cmp	r1, #0
 800ce2e:	d041      	beq.n	800ceb4 <_free_r+0x8c>
 800ce30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce34:	1f0c      	subs	r4, r1, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	bfb8      	it	lt
 800ce3a:	18e4      	addlt	r4, r4, r3
 800ce3c:	f000 f8e8 	bl	800d010 <__malloc_lock>
 800ce40:	4a1d      	ldr	r2, [pc, #116]	@ (800ceb8 <_free_r+0x90>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	b933      	cbnz	r3, 800ce54 <_free_r+0x2c>
 800ce46:	6063      	str	r3, [r4, #4]
 800ce48:	6014      	str	r4, [r2, #0]
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce50:	f000 b8e4 	b.w	800d01c <__malloc_unlock>
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	d908      	bls.n	800ce6a <_free_r+0x42>
 800ce58:	6820      	ldr	r0, [r4, #0]
 800ce5a:	1821      	adds	r1, r4, r0
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	bf01      	itttt	eq
 800ce60:	6819      	ldreq	r1, [r3, #0]
 800ce62:	685b      	ldreq	r3, [r3, #4]
 800ce64:	1809      	addeq	r1, r1, r0
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	e7ed      	b.n	800ce46 <_free_r+0x1e>
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	b10b      	cbz	r3, 800ce74 <_free_r+0x4c>
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	d9fa      	bls.n	800ce6a <_free_r+0x42>
 800ce74:	6811      	ldr	r1, [r2, #0]
 800ce76:	1850      	adds	r0, r2, r1
 800ce78:	42a0      	cmp	r0, r4
 800ce7a:	d10b      	bne.n	800ce94 <_free_r+0x6c>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	4401      	add	r1, r0
 800ce80:	1850      	adds	r0, r2, r1
 800ce82:	4283      	cmp	r3, r0
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	d1e0      	bne.n	800ce4a <_free_r+0x22>
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	6053      	str	r3, [r2, #4]
 800ce8e:	4408      	add	r0, r1
 800ce90:	6010      	str	r0, [r2, #0]
 800ce92:	e7da      	b.n	800ce4a <_free_r+0x22>
 800ce94:	d902      	bls.n	800ce9c <_free_r+0x74>
 800ce96:	230c      	movs	r3, #12
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	e7d6      	b.n	800ce4a <_free_r+0x22>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	1821      	adds	r1, r4, r0
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf04      	itt	eq
 800cea4:	6819      	ldreq	r1, [r3, #0]
 800cea6:	685b      	ldreq	r3, [r3, #4]
 800cea8:	6063      	str	r3, [r4, #4]
 800ceaa:	bf04      	itt	eq
 800ceac:	1809      	addeq	r1, r1, r0
 800ceae:	6021      	streq	r1, [r4, #0]
 800ceb0:	6054      	str	r4, [r2, #4]
 800ceb2:	e7ca      	b.n	800ce4a <_free_r+0x22>
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20001a40 	.word	0x20001a40

0800cebc <malloc>:
 800cebc:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <malloc+0xc>)
 800cebe:	4601      	mov	r1, r0
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	f000 b825 	b.w	800cf10 <_malloc_r>
 800cec6:	bf00      	nop
 800cec8:	20000250 	.word	0x20000250

0800cecc <sbrk_aligned>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4e0f      	ldr	r6, [pc, #60]	@ (800cf0c <sbrk_aligned+0x40>)
 800ced0:	460c      	mov	r4, r1
 800ced2:	6831      	ldr	r1, [r6, #0]
 800ced4:	4605      	mov	r5, r0
 800ced6:	b911      	cbnz	r1, 800cede <sbrk_aligned+0x12>
 800ced8:	f000 fe38 	bl	800db4c <_sbrk_r>
 800cedc:	6030      	str	r0, [r6, #0]
 800cede:	4621      	mov	r1, r4
 800cee0:	4628      	mov	r0, r5
 800cee2:	f000 fe33 	bl	800db4c <_sbrk_r>
 800cee6:	1c43      	adds	r3, r0, #1
 800cee8:	d103      	bne.n	800cef2 <sbrk_aligned+0x26>
 800ceea:	f04f 34ff 	mov.w	r4, #4294967295
 800ceee:	4620      	mov	r0, r4
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	1cc4      	adds	r4, r0, #3
 800cef4:	f024 0403 	bic.w	r4, r4, #3
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d0f8      	beq.n	800ceee <sbrk_aligned+0x22>
 800cefc:	1a21      	subs	r1, r4, r0
 800cefe:	4628      	mov	r0, r5
 800cf00:	f000 fe24 	bl	800db4c <_sbrk_r>
 800cf04:	3001      	adds	r0, #1
 800cf06:	d1f2      	bne.n	800ceee <sbrk_aligned+0x22>
 800cf08:	e7ef      	b.n	800ceea <sbrk_aligned+0x1e>
 800cf0a:	bf00      	nop
 800cf0c:	20001a3c 	.word	0x20001a3c

0800cf10 <_malloc_r>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	1ccd      	adds	r5, r1, #3
 800cf16:	f025 0503 	bic.w	r5, r5, #3
 800cf1a:	3508      	adds	r5, #8
 800cf1c:	2d0c      	cmp	r5, #12
 800cf1e:	bf38      	it	cc
 800cf20:	250c      	movcc	r5, #12
 800cf22:	2d00      	cmp	r5, #0
 800cf24:	4606      	mov	r6, r0
 800cf26:	db01      	blt.n	800cf2c <_malloc_r+0x1c>
 800cf28:	42a9      	cmp	r1, r5
 800cf2a:	d904      	bls.n	800cf36 <_malloc_r+0x26>
 800cf2c:	230c      	movs	r3, #12
 800cf2e:	6033      	str	r3, [r6, #0]
 800cf30:	2000      	movs	r0, #0
 800cf32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d00c <_malloc_r+0xfc>
 800cf3a:	f000 f869 	bl	800d010 <__malloc_lock>
 800cf3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf42:	461c      	mov	r4, r3
 800cf44:	bb44      	cbnz	r4, 800cf98 <_malloc_r+0x88>
 800cf46:	4629      	mov	r1, r5
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7ff ffbf 	bl	800cecc <sbrk_aligned>
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	4604      	mov	r4, r0
 800cf52:	d158      	bne.n	800d006 <_malloc_r+0xf6>
 800cf54:	f8d8 4000 	ldr.w	r4, [r8]
 800cf58:	4627      	mov	r7, r4
 800cf5a:	2f00      	cmp	r7, #0
 800cf5c:	d143      	bne.n	800cfe6 <_malloc_r+0xd6>
 800cf5e:	2c00      	cmp	r4, #0
 800cf60:	d04b      	beq.n	800cffa <_malloc_r+0xea>
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	4639      	mov	r1, r7
 800cf66:	4630      	mov	r0, r6
 800cf68:	eb04 0903 	add.w	r9, r4, r3
 800cf6c:	f000 fdee 	bl	800db4c <_sbrk_r>
 800cf70:	4581      	cmp	r9, r0
 800cf72:	d142      	bne.n	800cffa <_malloc_r+0xea>
 800cf74:	6821      	ldr	r1, [r4, #0]
 800cf76:	1a6d      	subs	r5, r5, r1
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7ff ffa6 	bl	800cecc <sbrk_aligned>
 800cf80:	3001      	adds	r0, #1
 800cf82:	d03a      	beq.n	800cffa <_malloc_r+0xea>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	442b      	add	r3, r5
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	bb62      	cbnz	r2, 800cfec <_malloc_r+0xdc>
 800cf92:	f8c8 7000 	str.w	r7, [r8]
 800cf96:	e00f      	b.n	800cfb8 <_malloc_r+0xa8>
 800cf98:	6822      	ldr	r2, [r4, #0]
 800cf9a:	1b52      	subs	r2, r2, r5
 800cf9c:	d420      	bmi.n	800cfe0 <_malloc_r+0xd0>
 800cf9e:	2a0b      	cmp	r2, #11
 800cfa0:	d917      	bls.n	800cfd2 <_malloc_r+0xc2>
 800cfa2:	1961      	adds	r1, r4, r5
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	6025      	str	r5, [r4, #0]
 800cfa8:	bf18      	it	ne
 800cfaa:	6059      	strne	r1, [r3, #4]
 800cfac:	6863      	ldr	r3, [r4, #4]
 800cfae:	bf08      	it	eq
 800cfb0:	f8c8 1000 	streq.w	r1, [r8]
 800cfb4:	5162      	str	r2, [r4, r5]
 800cfb6:	604b      	str	r3, [r1, #4]
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f000 f82f 	bl	800d01c <__malloc_unlock>
 800cfbe:	f104 000b 	add.w	r0, r4, #11
 800cfc2:	1d23      	adds	r3, r4, #4
 800cfc4:	f020 0007 	bic.w	r0, r0, #7
 800cfc8:	1ac2      	subs	r2, r0, r3
 800cfca:	bf1c      	itt	ne
 800cfcc:	1a1b      	subne	r3, r3, r0
 800cfce:	50a3      	strne	r3, [r4, r2]
 800cfd0:	e7af      	b.n	800cf32 <_malloc_r+0x22>
 800cfd2:	6862      	ldr	r2, [r4, #4]
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	bf0c      	ite	eq
 800cfd8:	f8c8 2000 	streq.w	r2, [r8]
 800cfdc:	605a      	strne	r2, [r3, #4]
 800cfde:	e7eb      	b.n	800cfb8 <_malloc_r+0xa8>
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	6864      	ldr	r4, [r4, #4]
 800cfe4:	e7ae      	b.n	800cf44 <_malloc_r+0x34>
 800cfe6:	463c      	mov	r4, r7
 800cfe8:	687f      	ldr	r7, [r7, #4]
 800cfea:	e7b6      	b.n	800cf5a <_malloc_r+0x4a>
 800cfec:	461a      	mov	r2, r3
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d1fb      	bne.n	800cfec <_malloc_r+0xdc>
 800cff4:	2300      	movs	r3, #0
 800cff6:	6053      	str	r3, [r2, #4]
 800cff8:	e7de      	b.n	800cfb8 <_malloc_r+0xa8>
 800cffa:	230c      	movs	r3, #12
 800cffc:	6033      	str	r3, [r6, #0]
 800cffe:	4630      	mov	r0, r6
 800d000:	f000 f80c 	bl	800d01c <__malloc_unlock>
 800d004:	e794      	b.n	800cf30 <_malloc_r+0x20>
 800d006:	6005      	str	r5, [r0, #0]
 800d008:	e7d6      	b.n	800cfb8 <_malloc_r+0xa8>
 800d00a:	bf00      	nop
 800d00c:	20001a40 	.word	0x20001a40

0800d010 <__malloc_lock>:
 800d010:	4801      	ldr	r0, [pc, #4]	@ (800d018 <__malloc_lock+0x8>)
 800d012:	f7ff beda 	b.w	800cdca <__retarget_lock_acquire_recursive>
 800d016:	bf00      	nop
 800d018:	20001a38 	.word	0x20001a38

0800d01c <__malloc_unlock>:
 800d01c:	4801      	ldr	r0, [pc, #4]	@ (800d024 <__malloc_unlock+0x8>)
 800d01e:	f7ff bed5 	b.w	800cdcc <__retarget_lock_release_recursive>
 800d022:	bf00      	nop
 800d024:	20001a38 	.word	0x20001a38

0800d028 <__ssputs_r>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	688e      	ldr	r6, [r1, #8]
 800d02e:	461f      	mov	r7, r3
 800d030:	42be      	cmp	r6, r7
 800d032:	680b      	ldr	r3, [r1, #0]
 800d034:	4682      	mov	sl, r0
 800d036:	460c      	mov	r4, r1
 800d038:	4690      	mov	r8, r2
 800d03a:	d82d      	bhi.n	800d098 <__ssputs_r+0x70>
 800d03c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d040:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d044:	d026      	beq.n	800d094 <__ssputs_r+0x6c>
 800d046:	6965      	ldr	r5, [r4, #20]
 800d048:	6909      	ldr	r1, [r1, #16]
 800d04a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d04e:	eba3 0901 	sub.w	r9, r3, r1
 800d052:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d056:	1c7b      	adds	r3, r7, #1
 800d058:	444b      	add	r3, r9
 800d05a:	106d      	asrs	r5, r5, #1
 800d05c:	429d      	cmp	r5, r3
 800d05e:	bf38      	it	cc
 800d060:	461d      	movcc	r5, r3
 800d062:	0553      	lsls	r3, r2, #21
 800d064:	d527      	bpl.n	800d0b6 <__ssputs_r+0x8e>
 800d066:	4629      	mov	r1, r5
 800d068:	f7ff ff52 	bl	800cf10 <_malloc_r>
 800d06c:	4606      	mov	r6, r0
 800d06e:	b360      	cbz	r0, 800d0ca <__ssputs_r+0xa2>
 800d070:	6921      	ldr	r1, [r4, #16]
 800d072:	464a      	mov	r2, r9
 800d074:	f7ff feab 	bl	800cdce <memcpy>
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d082:	81a3      	strh	r3, [r4, #12]
 800d084:	6126      	str	r6, [r4, #16]
 800d086:	6165      	str	r5, [r4, #20]
 800d088:	444e      	add	r6, r9
 800d08a:	eba5 0509 	sub.w	r5, r5, r9
 800d08e:	6026      	str	r6, [r4, #0]
 800d090:	60a5      	str	r5, [r4, #8]
 800d092:	463e      	mov	r6, r7
 800d094:	42be      	cmp	r6, r7
 800d096:	d900      	bls.n	800d09a <__ssputs_r+0x72>
 800d098:	463e      	mov	r6, r7
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	4632      	mov	r2, r6
 800d09e:	4641      	mov	r1, r8
 800d0a0:	f000 fd3a 	bl	800db18 <memmove>
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	1b9b      	subs	r3, r3, r6
 800d0a8:	60a3      	str	r3, [r4, #8]
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	4433      	add	r3, r6
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	f000 fd5f 	bl	800db7a <_realloc_r>
 800d0bc:	4606      	mov	r6, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d1e0      	bne.n	800d084 <__ssputs_r+0x5c>
 800d0c2:	6921      	ldr	r1, [r4, #16]
 800d0c4:	4650      	mov	r0, sl
 800d0c6:	f7ff feaf 	bl	800ce28 <_free_r>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	f8ca 3000 	str.w	r3, [sl]
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0dc:	e7e9      	b.n	800d0b2 <__ssputs_r+0x8a>
	...

0800d0e0 <_svfiprintf_r>:
 800d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	4698      	mov	r8, r3
 800d0e6:	898b      	ldrh	r3, [r1, #12]
 800d0e8:	061b      	lsls	r3, r3, #24
 800d0ea:	b09d      	sub	sp, #116	@ 0x74
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	d510      	bpl.n	800d116 <_svfiprintf_r+0x36>
 800d0f4:	690b      	ldr	r3, [r1, #16]
 800d0f6:	b973      	cbnz	r3, 800d116 <_svfiprintf_r+0x36>
 800d0f8:	2140      	movs	r1, #64	@ 0x40
 800d0fa:	f7ff ff09 	bl	800cf10 <_malloc_r>
 800d0fe:	6028      	str	r0, [r5, #0]
 800d100:	6128      	str	r0, [r5, #16]
 800d102:	b930      	cbnz	r0, 800d112 <_svfiprintf_r+0x32>
 800d104:	230c      	movs	r3, #12
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01d      	add	sp, #116	@ 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	2340      	movs	r3, #64	@ 0x40
 800d114:	616b      	str	r3, [r5, #20]
 800d116:	2300      	movs	r3, #0
 800d118:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11a:	2320      	movs	r3, #32
 800d11c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d120:	f8cd 800c 	str.w	r8, [sp, #12]
 800d124:	2330      	movs	r3, #48	@ 0x30
 800d126:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2c4 <_svfiprintf_r+0x1e4>
 800d12a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d12e:	f04f 0901 	mov.w	r9, #1
 800d132:	4623      	mov	r3, r4
 800d134:	469a      	mov	sl, r3
 800d136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d13a:	b10a      	cbz	r2, 800d140 <_svfiprintf_r+0x60>
 800d13c:	2a25      	cmp	r2, #37	@ 0x25
 800d13e:	d1f9      	bne.n	800d134 <_svfiprintf_r+0x54>
 800d140:	ebba 0b04 	subs.w	fp, sl, r4
 800d144:	d00b      	beq.n	800d15e <_svfiprintf_r+0x7e>
 800d146:	465b      	mov	r3, fp
 800d148:	4622      	mov	r2, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff ff6b 	bl	800d028 <__ssputs_r>
 800d152:	3001      	adds	r0, #1
 800d154:	f000 80a7 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d15a:	445a      	add	r2, fp
 800d15c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d15e:	f89a 3000 	ldrb.w	r3, [sl]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 809f 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d168:	2300      	movs	r3, #0
 800d16a:	f04f 32ff 	mov.w	r2, #4294967295
 800d16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d172:	f10a 0a01 	add.w	sl, sl, #1
 800d176:	9304      	str	r3, [sp, #16]
 800d178:	9307      	str	r3, [sp, #28]
 800d17a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d17e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d180:	4654      	mov	r4, sl
 800d182:	2205      	movs	r2, #5
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	484e      	ldr	r0, [pc, #312]	@ (800d2c4 <_svfiprintf_r+0x1e4>)
 800d18a:	f7f3 f841 	bl	8000210 <memchr>
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	b9d8      	cbnz	r0, 800d1ca <_svfiprintf_r+0xea>
 800d192:	06d0      	lsls	r0, r2, #27
 800d194:	bf44      	itt	mi
 800d196:	2320      	movmi	r3, #32
 800d198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d19c:	0711      	lsls	r1, r2, #28
 800d19e:	bf44      	itt	mi
 800d1a0:	232b      	movmi	r3, #43	@ 0x2b
 800d1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ac:	d015      	beq.n	800d1da <_svfiprintf_r+0xfa>
 800d1ae:	9a07      	ldr	r2, [sp, #28]
 800d1b0:	4654      	mov	r4, sl
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	f04f 0c0a 	mov.w	ip, #10
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1be:	3b30      	subs	r3, #48	@ 0x30
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d94b      	bls.n	800d25c <_svfiprintf_r+0x17c>
 800d1c4:	b1b0      	cbz	r0, 800d1f4 <_svfiprintf_r+0x114>
 800d1c6:	9207      	str	r2, [sp, #28]
 800d1c8:	e014      	b.n	800d1f4 <_svfiprintf_r+0x114>
 800d1ca:	eba0 0308 	sub.w	r3, r0, r8
 800d1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	9304      	str	r3, [sp, #16]
 800d1d6:	46a2      	mov	sl, r4
 800d1d8:	e7d2      	b.n	800d180 <_svfiprintf_r+0xa0>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	1d19      	adds	r1, r3, #4
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	9103      	str	r1, [sp, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	bfbb      	ittet	lt
 800d1e6:	425b      	neglt	r3, r3
 800d1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ec:	9307      	strge	r3, [sp, #28]
 800d1ee:	9307      	strlt	r3, [sp, #28]
 800d1f0:	bfb8      	it	lt
 800d1f2:	9204      	strlt	r2, [sp, #16]
 800d1f4:	7823      	ldrb	r3, [r4, #0]
 800d1f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1f8:	d10a      	bne.n	800d210 <_svfiprintf_r+0x130>
 800d1fa:	7863      	ldrb	r3, [r4, #1]
 800d1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fe:	d132      	bne.n	800d266 <_svfiprintf_r+0x186>
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	9203      	str	r2, [sp, #12]
 800d208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d20c:	3402      	adds	r4, #2
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2d4 <_svfiprintf_r+0x1f4>
 800d214:	7821      	ldrb	r1, [r4, #0]
 800d216:	2203      	movs	r2, #3
 800d218:	4650      	mov	r0, sl
 800d21a:	f7f2 fff9 	bl	8000210 <memchr>
 800d21e:	b138      	cbz	r0, 800d230 <_svfiprintf_r+0x150>
 800d220:	9b04      	ldr	r3, [sp, #16]
 800d222:	eba0 000a 	sub.w	r0, r0, sl
 800d226:	2240      	movs	r2, #64	@ 0x40
 800d228:	4082      	lsls	r2, r0
 800d22a:	4313      	orrs	r3, r2
 800d22c:	3401      	adds	r4, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	4824      	ldr	r0, [pc, #144]	@ (800d2c8 <_svfiprintf_r+0x1e8>)
 800d236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d23a:	2206      	movs	r2, #6
 800d23c:	f7f2 ffe8 	bl	8000210 <memchr>
 800d240:	2800      	cmp	r0, #0
 800d242:	d036      	beq.n	800d2b2 <_svfiprintf_r+0x1d2>
 800d244:	4b21      	ldr	r3, [pc, #132]	@ (800d2cc <_svfiprintf_r+0x1ec>)
 800d246:	bb1b      	cbnz	r3, 800d290 <_svfiprintf_r+0x1b0>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	4433      	add	r3, r6
 800d258:	9309      	str	r3, [sp, #36]	@ 0x24
 800d25a:	e76a      	b.n	800d132 <_svfiprintf_r+0x52>
 800d25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d260:	460c      	mov	r4, r1
 800d262:	2001      	movs	r0, #1
 800d264:	e7a8      	b.n	800d1b8 <_svfiprintf_r+0xd8>
 800d266:	2300      	movs	r3, #0
 800d268:	3401      	adds	r4, #1
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	4619      	mov	r1, r3
 800d26e:	f04f 0c0a 	mov.w	ip, #10
 800d272:	4620      	mov	r0, r4
 800d274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d278:	3a30      	subs	r2, #48	@ 0x30
 800d27a:	2a09      	cmp	r2, #9
 800d27c:	d903      	bls.n	800d286 <_svfiprintf_r+0x1a6>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c6      	beq.n	800d210 <_svfiprintf_r+0x130>
 800d282:	9105      	str	r1, [sp, #20]
 800d284:	e7c4      	b.n	800d210 <_svfiprintf_r+0x130>
 800d286:	fb0c 2101 	mla	r1, ip, r1, r2
 800d28a:	4604      	mov	r4, r0
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7f0      	b.n	800d272 <_svfiprintf_r+0x192>
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	462a      	mov	r2, r5
 800d296:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d0 <_svfiprintf_r+0x1f0>)
 800d298:	a904      	add	r1, sp, #16
 800d29a:	4638      	mov	r0, r7
 800d29c:	f3af 8000 	nop.w
 800d2a0:	1c42      	adds	r2, r0, #1
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	d1d6      	bne.n	800d254 <_svfiprintf_r+0x174>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	065b      	lsls	r3, r3, #25
 800d2aa:	f53f af2d 	bmi.w	800d108 <_svfiprintf_r+0x28>
 800d2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b0:	e72c      	b.n	800d10c <_svfiprintf_r+0x2c>
 800d2b2:	ab03      	add	r3, sp, #12
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	4b05      	ldr	r3, [pc, #20]	@ (800d2d0 <_svfiprintf_r+0x1f0>)
 800d2ba:	a904      	add	r1, sp, #16
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f000 f9bb 	bl	800d638 <_printf_i>
 800d2c2:	e7ed      	b.n	800d2a0 <_svfiprintf_r+0x1c0>
 800d2c4:	0800f19a 	.word	0x0800f19a
 800d2c8:	0800f1a4 	.word	0x0800f1a4
 800d2cc:	00000000 	.word	0x00000000
 800d2d0:	0800d029 	.word	0x0800d029
 800d2d4:	0800f1a0 	.word	0x0800f1a0

0800d2d8 <__sfputc_r>:
 800d2d8:	6893      	ldr	r3, [r2, #8]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	b410      	push	{r4}
 800d2e0:	6093      	str	r3, [r2, #8]
 800d2e2:	da08      	bge.n	800d2f6 <__sfputc_r+0x1e>
 800d2e4:	6994      	ldr	r4, [r2, #24]
 800d2e6:	42a3      	cmp	r3, r4
 800d2e8:	db01      	blt.n	800d2ee <__sfputc_r+0x16>
 800d2ea:	290a      	cmp	r1, #10
 800d2ec:	d103      	bne.n	800d2f6 <__sfputc_r+0x1e>
 800d2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2f2:	f000 bb7d 	b.w	800d9f0 <__swbuf_r>
 800d2f6:	6813      	ldr	r3, [r2, #0]
 800d2f8:	1c58      	adds	r0, r3, #1
 800d2fa:	6010      	str	r0, [r2, #0]
 800d2fc:	7019      	strb	r1, [r3, #0]
 800d2fe:	4608      	mov	r0, r1
 800d300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <__sfputs_r>:
 800d306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d308:	4606      	mov	r6, r0
 800d30a:	460f      	mov	r7, r1
 800d30c:	4614      	mov	r4, r2
 800d30e:	18d5      	adds	r5, r2, r3
 800d310:	42ac      	cmp	r4, r5
 800d312:	d101      	bne.n	800d318 <__sfputs_r+0x12>
 800d314:	2000      	movs	r0, #0
 800d316:	e007      	b.n	800d328 <__sfputs_r+0x22>
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	463a      	mov	r2, r7
 800d31e:	4630      	mov	r0, r6
 800d320:	f7ff ffda 	bl	800d2d8 <__sfputc_r>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d1f3      	bne.n	800d310 <__sfputs_r+0xa>
 800d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d32c <_vfiprintf_r>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	460d      	mov	r5, r1
 800d332:	b09d      	sub	sp, #116	@ 0x74
 800d334:	4614      	mov	r4, r2
 800d336:	4698      	mov	r8, r3
 800d338:	4606      	mov	r6, r0
 800d33a:	b118      	cbz	r0, 800d344 <_vfiprintf_r+0x18>
 800d33c:	6a03      	ldr	r3, [r0, #32]
 800d33e:	b90b      	cbnz	r3, 800d344 <_vfiprintf_r+0x18>
 800d340:	f7ff fb9c 	bl	800ca7c <__sinit>
 800d344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d346:	07d9      	lsls	r1, r3, #31
 800d348:	d405      	bmi.n	800d356 <_vfiprintf_r+0x2a>
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	059a      	lsls	r2, r3, #22
 800d34e:	d402      	bmi.n	800d356 <_vfiprintf_r+0x2a>
 800d350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d352:	f7ff fd3a 	bl	800cdca <__retarget_lock_acquire_recursive>
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	071b      	lsls	r3, r3, #28
 800d35a:	d501      	bpl.n	800d360 <_vfiprintf_r+0x34>
 800d35c:	692b      	ldr	r3, [r5, #16]
 800d35e:	b99b      	cbnz	r3, 800d388 <_vfiprintf_r+0x5c>
 800d360:	4629      	mov	r1, r5
 800d362:	4630      	mov	r0, r6
 800d364:	f000 fb82 	bl	800da6c <__swsetup_r>
 800d368:	b170      	cbz	r0, 800d388 <_vfiprintf_r+0x5c>
 800d36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36c:	07dc      	lsls	r4, r3, #31
 800d36e:	d504      	bpl.n	800d37a <_vfiprintf_r+0x4e>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	b01d      	add	sp, #116	@ 0x74
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	0598      	lsls	r0, r3, #22
 800d37e:	d4f7      	bmi.n	800d370 <_vfiprintf_r+0x44>
 800d380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d382:	f7ff fd23 	bl	800cdcc <__retarget_lock_release_recursive>
 800d386:	e7f3      	b.n	800d370 <_vfiprintf_r+0x44>
 800d388:	2300      	movs	r3, #0
 800d38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38c:	2320      	movs	r3, #32
 800d38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d392:	f8cd 800c 	str.w	r8, [sp, #12]
 800d396:	2330      	movs	r3, #48	@ 0x30
 800d398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d548 <_vfiprintf_r+0x21c>
 800d39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3a0:	f04f 0901 	mov.w	r9, #1
 800d3a4:	4623      	mov	r3, r4
 800d3a6:	469a      	mov	sl, r3
 800d3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ac:	b10a      	cbz	r2, 800d3b2 <_vfiprintf_r+0x86>
 800d3ae:	2a25      	cmp	r2, #37	@ 0x25
 800d3b0:	d1f9      	bne.n	800d3a6 <_vfiprintf_r+0x7a>
 800d3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b6:	d00b      	beq.n	800d3d0 <_vfiprintf_r+0xa4>
 800d3b8:	465b      	mov	r3, fp
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ffa1 	bl	800d306 <__sfputs_r>
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	f000 80a7 	beq.w	800d518 <_vfiprintf_r+0x1ec>
 800d3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3cc:	445a      	add	r2, fp
 800d3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 809f 	beq.w	800d518 <_vfiprintf_r+0x1ec>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e4:	f10a 0a01 	add.w	sl, sl, #1
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	9307      	str	r3, [sp, #28]
 800d3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2205      	movs	r2, #5
 800d3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fa:	4853      	ldr	r0, [pc, #332]	@ (800d548 <_vfiprintf_r+0x21c>)
 800d3fc:	f7f2 ff08 	bl	8000210 <memchr>
 800d400:	9a04      	ldr	r2, [sp, #16]
 800d402:	b9d8      	cbnz	r0, 800d43c <_vfiprintf_r+0x110>
 800d404:	06d1      	lsls	r1, r2, #27
 800d406:	bf44      	itt	mi
 800d408:	2320      	movmi	r3, #32
 800d40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40e:	0713      	lsls	r3, r2, #28
 800d410:	bf44      	itt	mi
 800d412:	232b      	movmi	r3, #43	@ 0x2b
 800d414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d418:	f89a 3000 	ldrb.w	r3, [sl]
 800d41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d41e:	d015      	beq.n	800d44c <_vfiprintf_r+0x120>
 800d420:	9a07      	ldr	r2, [sp, #28]
 800d422:	4654      	mov	r4, sl
 800d424:	2000      	movs	r0, #0
 800d426:	f04f 0c0a 	mov.w	ip, #10
 800d42a:	4621      	mov	r1, r4
 800d42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d430:	3b30      	subs	r3, #48	@ 0x30
 800d432:	2b09      	cmp	r3, #9
 800d434:	d94b      	bls.n	800d4ce <_vfiprintf_r+0x1a2>
 800d436:	b1b0      	cbz	r0, 800d466 <_vfiprintf_r+0x13a>
 800d438:	9207      	str	r2, [sp, #28]
 800d43a:	e014      	b.n	800d466 <_vfiprintf_r+0x13a>
 800d43c:	eba0 0308 	sub.w	r3, r0, r8
 800d440:	fa09 f303 	lsl.w	r3, r9, r3
 800d444:	4313      	orrs	r3, r2
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	46a2      	mov	sl, r4
 800d44a:	e7d2      	b.n	800d3f2 <_vfiprintf_r+0xc6>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	1d19      	adds	r1, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	9103      	str	r1, [sp, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfbb      	ittet	lt
 800d458:	425b      	neglt	r3, r3
 800d45a:	f042 0202 	orrlt.w	r2, r2, #2
 800d45e:	9307      	strge	r3, [sp, #28]
 800d460:	9307      	strlt	r3, [sp, #28]
 800d462:	bfb8      	it	lt
 800d464:	9204      	strlt	r2, [sp, #16]
 800d466:	7823      	ldrb	r3, [r4, #0]
 800d468:	2b2e      	cmp	r3, #46	@ 0x2e
 800d46a:	d10a      	bne.n	800d482 <_vfiprintf_r+0x156>
 800d46c:	7863      	ldrb	r3, [r4, #1]
 800d46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d470:	d132      	bne.n	800d4d8 <_vfiprintf_r+0x1ac>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	9203      	str	r2, [sp, #12]
 800d47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d47e:	3402      	adds	r4, #2
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d558 <_vfiprintf_r+0x22c>
 800d486:	7821      	ldrb	r1, [r4, #0]
 800d488:	2203      	movs	r2, #3
 800d48a:	4650      	mov	r0, sl
 800d48c:	f7f2 fec0 	bl	8000210 <memchr>
 800d490:	b138      	cbz	r0, 800d4a2 <_vfiprintf_r+0x176>
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	eba0 000a 	sub.w	r0, r0, sl
 800d498:	2240      	movs	r2, #64	@ 0x40
 800d49a:	4082      	lsls	r2, r0
 800d49c:	4313      	orrs	r3, r2
 800d49e:	3401      	adds	r4, #1
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a6:	4829      	ldr	r0, [pc, #164]	@ (800d54c <_vfiprintf_r+0x220>)
 800d4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4ac:	2206      	movs	r2, #6
 800d4ae:	f7f2 feaf 	bl	8000210 <memchr>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d03f      	beq.n	800d536 <_vfiprintf_r+0x20a>
 800d4b6:	4b26      	ldr	r3, [pc, #152]	@ (800d550 <_vfiprintf_r+0x224>)
 800d4b8:	bb1b      	cbnz	r3, 800d502 <_vfiprintf_r+0x1d6>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	3307      	adds	r3, #7
 800d4be:	f023 0307 	bic.w	r3, r3, #7
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c8:	443b      	add	r3, r7
 800d4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4cc:	e76a      	b.n	800d3a4 <_vfiprintf_r+0x78>
 800d4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	e7a8      	b.n	800d42a <_vfiprintf_r+0xfe>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	3401      	adds	r4, #1
 800d4dc:	9305      	str	r3, [sp, #20]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	f04f 0c0a 	mov.w	ip, #10
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ea:	3a30      	subs	r2, #48	@ 0x30
 800d4ec:	2a09      	cmp	r2, #9
 800d4ee:	d903      	bls.n	800d4f8 <_vfiprintf_r+0x1cc>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0c6      	beq.n	800d482 <_vfiprintf_r+0x156>
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	e7c4      	b.n	800d482 <_vfiprintf_r+0x156>
 800d4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	2301      	movs	r3, #1
 800d500:	e7f0      	b.n	800d4e4 <_vfiprintf_r+0x1b8>
 800d502:	ab03      	add	r3, sp, #12
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	462a      	mov	r2, r5
 800d508:	4b12      	ldr	r3, [pc, #72]	@ (800d554 <_vfiprintf_r+0x228>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	4630      	mov	r0, r6
 800d50e:	f3af 8000 	nop.w
 800d512:	4607      	mov	r7, r0
 800d514:	1c78      	adds	r0, r7, #1
 800d516:	d1d6      	bne.n	800d4c6 <_vfiprintf_r+0x19a>
 800d518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d51a:	07d9      	lsls	r1, r3, #31
 800d51c:	d405      	bmi.n	800d52a <_vfiprintf_r+0x1fe>
 800d51e:	89ab      	ldrh	r3, [r5, #12]
 800d520:	059a      	lsls	r2, r3, #22
 800d522:	d402      	bmi.n	800d52a <_vfiprintf_r+0x1fe>
 800d524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d526:	f7ff fc51 	bl	800cdcc <__retarget_lock_release_recursive>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	065b      	lsls	r3, r3, #25
 800d52e:	f53f af1f 	bmi.w	800d370 <_vfiprintf_r+0x44>
 800d532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d534:	e71e      	b.n	800d374 <_vfiprintf_r+0x48>
 800d536:	ab03      	add	r3, sp, #12
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	462a      	mov	r2, r5
 800d53c:	4b05      	ldr	r3, [pc, #20]	@ (800d554 <_vfiprintf_r+0x228>)
 800d53e:	a904      	add	r1, sp, #16
 800d540:	4630      	mov	r0, r6
 800d542:	f000 f879 	bl	800d638 <_printf_i>
 800d546:	e7e4      	b.n	800d512 <_vfiprintf_r+0x1e6>
 800d548:	0800f19a 	.word	0x0800f19a
 800d54c:	0800f1a4 	.word	0x0800f1a4
 800d550:	00000000 	.word	0x00000000
 800d554:	0800d307 	.word	0x0800d307
 800d558:	0800f1a0 	.word	0x0800f1a0

0800d55c <_printf_common>:
 800d55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d560:	4616      	mov	r6, r2
 800d562:	4698      	mov	r8, r3
 800d564:	688a      	ldr	r2, [r1, #8]
 800d566:	690b      	ldr	r3, [r1, #16]
 800d568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d56c:	4293      	cmp	r3, r2
 800d56e:	bfb8      	it	lt
 800d570:	4613      	movlt	r3, r2
 800d572:	6033      	str	r3, [r6, #0]
 800d574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d578:	4607      	mov	r7, r0
 800d57a:	460c      	mov	r4, r1
 800d57c:	b10a      	cbz	r2, 800d582 <_printf_common+0x26>
 800d57e:	3301      	adds	r3, #1
 800d580:	6033      	str	r3, [r6, #0]
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	0699      	lsls	r1, r3, #26
 800d586:	bf42      	ittt	mi
 800d588:	6833      	ldrmi	r3, [r6, #0]
 800d58a:	3302      	addmi	r3, #2
 800d58c:	6033      	strmi	r3, [r6, #0]
 800d58e:	6825      	ldr	r5, [r4, #0]
 800d590:	f015 0506 	ands.w	r5, r5, #6
 800d594:	d106      	bne.n	800d5a4 <_printf_common+0x48>
 800d596:	f104 0a19 	add.w	sl, r4, #25
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	6832      	ldr	r2, [r6, #0]
 800d59e:	1a9b      	subs	r3, r3, r2
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dc26      	bgt.n	800d5f2 <_printf_common+0x96>
 800d5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5a8:	6822      	ldr	r2, [r4, #0]
 800d5aa:	3b00      	subs	r3, #0
 800d5ac:	bf18      	it	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	0692      	lsls	r2, r2, #26
 800d5b2:	d42b      	bmi.n	800d60c <_printf_common+0xb0>
 800d5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5b8:	4641      	mov	r1, r8
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	47c8      	blx	r9
 800d5be:	3001      	adds	r0, #1
 800d5c0:	d01e      	beq.n	800d600 <_printf_common+0xa4>
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	6922      	ldr	r2, [r4, #16]
 800d5c6:	f003 0306 	and.w	r3, r3, #6
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	bf02      	ittt	eq
 800d5ce:	68e5      	ldreq	r5, [r4, #12]
 800d5d0:	6833      	ldreq	r3, [r6, #0]
 800d5d2:	1aed      	subeq	r5, r5, r3
 800d5d4:	68a3      	ldr	r3, [r4, #8]
 800d5d6:	bf0c      	ite	eq
 800d5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5dc:	2500      	movne	r5, #0
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	bfc4      	itt	gt
 800d5e2:	1a9b      	subgt	r3, r3, r2
 800d5e4:	18ed      	addgt	r5, r5, r3
 800d5e6:	2600      	movs	r6, #0
 800d5e8:	341a      	adds	r4, #26
 800d5ea:	42b5      	cmp	r5, r6
 800d5ec:	d11a      	bne.n	800d624 <_printf_common+0xc8>
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e008      	b.n	800d604 <_printf_common+0xa8>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4652      	mov	r2, sl
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	47c8      	blx	r9
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d103      	bne.n	800d608 <_printf_common+0xac>
 800d600:	f04f 30ff 	mov.w	r0, #4294967295
 800d604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d608:	3501      	adds	r5, #1
 800d60a:	e7c6      	b.n	800d59a <_printf_common+0x3e>
 800d60c:	18e1      	adds	r1, r4, r3
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	2030      	movs	r0, #48	@ 0x30
 800d612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d616:	4422      	add	r2, r4
 800d618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d61c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d620:	3302      	adds	r3, #2
 800d622:	e7c7      	b.n	800d5b4 <_printf_common+0x58>
 800d624:	2301      	movs	r3, #1
 800d626:	4622      	mov	r2, r4
 800d628:	4641      	mov	r1, r8
 800d62a:	4638      	mov	r0, r7
 800d62c:	47c8      	blx	r9
 800d62e:	3001      	adds	r0, #1
 800d630:	d0e6      	beq.n	800d600 <_printf_common+0xa4>
 800d632:	3601      	adds	r6, #1
 800d634:	e7d9      	b.n	800d5ea <_printf_common+0x8e>
	...

0800d638 <_printf_i>:
 800d638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d63c:	7e0f      	ldrb	r7, [r1, #24]
 800d63e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d640:	2f78      	cmp	r7, #120	@ 0x78
 800d642:	4691      	mov	r9, r2
 800d644:	4680      	mov	r8, r0
 800d646:	460c      	mov	r4, r1
 800d648:	469a      	mov	sl, r3
 800d64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d64e:	d807      	bhi.n	800d660 <_printf_i+0x28>
 800d650:	2f62      	cmp	r7, #98	@ 0x62
 800d652:	d80a      	bhi.n	800d66a <_printf_i+0x32>
 800d654:	2f00      	cmp	r7, #0
 800d656:	f000 80d1 	beq.w	800d7fc <_printf_i+0x1c4>
 800d65a:	2f58      	cmp	r7, #88	@ 0x58
 800d65c:	f000 80b8 	beq.w	800d7d0 <_printf_i+0x198>
 800d660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d668:	e03a      	b.n	800d6e0 <_printf_i+0xa8>
 800d66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d66e:	2b15      	cmp	r3, #21
 800d670:	d8f6      	bhi.n	800d660 <_printf_i+0x28>
 800d672:	a101      	add	r1, pc, #4	@ (adr r1, 800d678 <_printf_i+0x40>)
 800d674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6e5 	.word	0x0800d6e5
 800d680:	0800d661 	.word	0x0800d661
 800d684:	0800d661 	.word	0x0800d661
 800d688:	0800d661 	.word	0x0800d661
 800d68c:	0800d661 	.word	0x0800d661
 800d690:	0800d6e5 	.word	0x0800d6e5
 800d694:	0800d661 	.word	0x0800d661
 800d698:	0800d661 	.word	0x0800d661
 800d69c:	0800d661 	.word	0x0800d661
 800d6a0:	0800d661 	.word	0x0800d661
 800d6a4:	0800d7e3 	.word	0x0800d7e3
 800d6a8:	0800d70f 	.word	0x0800d70f
 800d6ac:	0800d79d 	.word	0x0800d79d
 800d6b0:	0800d661 	.word	0x0800d661
 800d6b4:	0800d661 	.word	0x0800d661
 800d6b8:	0800d805 	.word	0x0800d805
 800d6bc:	0800d661 	.word	0x0800d661
 800d6c0:	0800d70f 	.word	0x0800d70f
 800d6c4:	0800d661 	.word	0x0800d661
 800d6c8:	0800d661 	.word	0x0800d661
 800d6cc:	0800d7a5 	.word	0x0800d7a5
 800d6d0:	6833      	ldr	r3, [r6, #0]
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6032      	str	r2, [r6, #0]
 800d6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e09c      	b.n	800d81e <_printf_i+0x1e6>
 800d6e4:	6833      	ldr	r3, [r6, #0]
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	1d19      	adds	r1, r3, #4
 800d6ea:	6031      	str	r1, [r6, #0]
 800d6ec:	0606      	lsls	r6, r0, #24
 800d6ee:	d501      	bpl.n	800d6f4 <_printf_i+0xbc>
 800d6f0:	681d      	ldr	r5, [r3, #0]
 800d6f2:	e003      	b.n	800d6fc <_printf_i+0xc4>
 800d6f4:	0645      	lsls	r5, r0, #25
 800d6f6:	d5fb      	bpl.n	800d6f0 <_printf_i+0xb8>
 800d6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	da03      	bge.n	800d708 <_printf_i+0xd0>
 800d700:	232d      	movs	r3, #45	@ 0x2d
 800d702:	426d      	negs	r5, r5
 800d704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d708:	4858      	ldr	r0, [pc, #352]	@ (800d86c <_printf_i+0x234>)
 800d70a:	230a      	movs	r3, #10
 800d70c:	e011      	b.n	800d732 <_printf_i+0xfa>
 800d70e:	6821      	ldr	r1, [r4, #0]
 800d710:	6833      	ldr	r3, [r6, #0]
 800d712:	0608      	lsls	r0, r1, #24
 800d714:	f853 5b04 	ldr.w	r5, [r3], #4
 800d718:	d402      	bmi.n	800d720 <_printf_i+0xe8>
 800d71a:	0649      	lsls	r1, r1, #25
 800d71c:	bf48      	it	mi
 800d71e:	b2ad      	uxthmi	r5, r5
 800d720:	2f6f      	cmp	r7, #111	@ 0x6f
 800d722:	4852      	ldr	r0, [pc, #328]	@ (800d86c <_printf_i+0x234>)
 800d724:	6033      	str	r3, [r6, #0]
 800d726:	bf14      	ite	ne
 800d728:	230a      	movne	r3, #10
 800d72a:	2308      	moveq	r3, #8
 800d72c:	2100      	movs	r1, #0
 800d72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d732:	6866      	ldr	r6, [r4, #4]
 800d734:	60a6      	str	r6, [r4, #8]
 800d736:	2e00      	cmp	r6, #0
 800d738:	db05      	blt.n	800d746 <_printf_i+0x10e>
 800d73a:	6821      	ldr	r1, [r4, #0]
 800d73c:	432e      	orrs	r6, r5
 800d73e:	f021 0104 	bic.w	r1, r1, #4
 800d742:	6021      	str	r1, [r4, #0]
 800d744:	d04b      	beq.n	800d7de <_printf_i+0x1a6>
 800d746:	4616      	mov	r6, r2
 800d748:	fbb5 f1f3 	udiv	r1, r5, r3
 800d74c:	fb03 5711 	mls	r7, r3, r1, r5
 800d750:	5dc7      	ldrb	r7, [r0, r7]
 800d752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d756:	462f      	mov	r7, r5
 800d758:	42bb      	cmp	r3, r7
 800d75a:	460d      	mov	r5, r1
 800d75c:	d9f4      	bls.n	800d748 <_printf_i+0x110>
 800d75e:	2b08      	cmp	r3, #8
 800d760:	d10b      	bne.n	800d77a <_printf_i+0x142>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	07df      	lsls	r7, r3, #31
 800d766:	d508      	bpl.n	800d77a <_printf_i+0x142>
 800d768:	6923      	ldr	r3, [r4, #16]
 800d76a:	6861      	ldr	r1, [r4, #4]
 800d76c:	4299      	cmp	r1, r3
 800d76e:	bfde      	ittt	le
 800d770:	2330      	movle	r3, #48	@ 0x30
 800d772:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d776:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d77a:	1b92      	subs	r2, r2, r6
 800d77c:	6122      	str	r2, [r4, #16]
 800d77e:	f8cd a000 	str.w	sl, [sp]
 800d782:	464b      	mov	r3, r9
 800d784:	aa03      	add	r2, sp, #12
 800d786:	4621      	mov	r1, r4
 800d788:	4640      	mov	r0, r8
 800d78a:	f7ff fee7 	bl	800d55c <_printf_common>
 800d78e:	3001      	adds	r0, #1
 800d790:	d14a      	bne.n	800d828 <_printf_i+0x1f0>
 800d792:	f04f 30ff 	mov.w	r0, #4294967295
 800d796:	b004      	add	sp, #16
 800d798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	f043 0320 	orr.w	r3, r3, #32
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	4832      	ldr	r0, [pc, #200]	@ (800d870 <_printf_i+0x238>)
 800d7a6:	2778      	movs	r7, #120	@ 0x78
 800d7a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	6831      	ldr	r1, [r6, #0]
 800d7b0:	061f      	lsls	r7, r3, #24
 800d7b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7b6:	d402      	bmi.n	800d7be <_printf_i+0x186>
 800d7b8:	065f      	lsls	r7, r3, #25
 800d7ba:	bf48      	it	mi
 800d7bc:	b2ad      	uxthmi	r5, r5
 800d7be:	6031      	str	r1, [r6, #0]
 800d7c0:	07d9      	lsls	r1, r3, #31
 800d7c2:	bf44      	itt	mi
 800d7c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7c8:	6023      	strmi	r3, [r4, #0]
 800d7ca:	b11d      	cbz	r5, 800d7d4 <_printf_i+0x19c>
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	e7ad      	b.n	800d72c <_printf_i+0xf4>
 800d7d0:	4826      	ldr	r0, [pc, #152]	@ (800d86c <_printf_i+0x234>)
 800d7d2:	e7e9      	b.n	800d7a8 <_printf_i+0x170>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	f023 0320 	bic.w	r3, r3, #32
 800d7da:	6023      	str	r3, [r4, #0]
 800d7dc:	e7f6      	b.n	800d7cc <_printf_i+0x194>
 800d7de:	4616      	mov	r6, r2
 800d7e0:	e7bd      	b.n	800d75e <_printf_i+0x126>
 800d7e2:	6833      	ldr	r3, [r6, #0]
 800d7e4:	6825      	ldr	r5, [r4, #0]
 800d7e6:	6961      	ldr	r1, [r4, #20]
 800d7e8:	1d18      	adds	r0, r3, #4
 800d7ea:	6030      	str	r0, [r6, #0]
 800d7ec:	062e      	lsls	r6, r5, #24
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	d501      	bpl.n	800d7f6 <_printf_i+0x1be>
 800d7f2:	6019      	str	r1, [r3, #0]
 800d7f4:	e002      	b.n	800d7fc <_printf_i+0x1c4>
 800d7f6:	0668      	lsls	r0, r5, #25
 800d7f8:	d5fb      	bpl.n	800d7f2 <_printf_i+0x1ba>
 800d7fa:	8019      	strh	r1, [r3, #0]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	4616      	mov	r6, r2
 800d802:	e7bc      	b.n	800d77e <_printf_i+0x146>
 800d804:	6833      	ldr	r3, [r6, #0]
 800d806:	1d1a      	adds	r2, r3, #4
 800d808:	6032      	str	r2, [r6, #0]
 800d80a:	681e      	ldr	r6, [r3, #0]
 800d80c:	6862      	ldr	r2, [r4, #4]
 800d80e:	2100      	movs	r1, #0
 800d810:	4630      	mov	r0, r6
 800d812:	f7f2 fcfd 	bl	8000210 <memchr>
 800d816:	b108      	cbz	r0, 800d81c <_printf_i+0x1e4>
 800d818:	1b80      	subs	r0, r0, r6
 800d81a:	6060      	str	r0, [r4, #4]
 800d81c:	6863      	ldr	r3, [r4, #4]
 800d81e:	6123      	str	r3, [r4, #16]
 800d820:	2300      	movs	r3, #0
 800d822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d826:	e7aa      	b.n	800d77e <_printf_i+0x146>
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	4632      	mov	r2, r6
 800d82c:	4649      	mov	r1, r9
 800d82e:	4640      	mov	r0, r8
 800d830:	47d0      	blx	sl
 800d832:	3001      	adds	r0, #1
 800d834:	d0ad      	beq.n	800d792 <_printf_i+0x15a>
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	079b      	lsls	r3, r3, #30
 800d83a:	d413      	bmi.n	800d864 <_printf_i+0x22c>
 800d83c:	68e0      	ldr	r0, [r4, #12]
 800d83e:	9b03      	ldr	r3, [sp, #12]
 800d840:	4298      	cmp	r0, r3
 800d842:	bfb8      	it	lt
 800d844:	4618      	movlt	r0, r3
 800d846:	e7a6      	b.n	800d796 <_printf_i+0x15e>
 800d848:	2301      	movs	r3, #1
 800d84a:	4632      	mov	r2, r6
 800d84c:	4649      	mov	r1, r9
 800d84e:	4640      	mov	r0, r8
 800d850:	47d0      	blx	sl
 800d852:	3001      	adds	r0, #1
 800d854:	d09d      	beq.n	800d792 <_printf_i+0x15a>
 800d856:	3501      	adds	r5, #1
 800d858:	68e3      	ldr	r3, [r4, #12]
 800d85a:	9903      	ldr	r1, [sp, #12]
 800d85c:	1a5b      	subs	r3, r3, r1
 800d85e:	42ab      	cmp	r3, r5
 800d860:	dcf2      	bgt.n	800d848 <_printf_i+0x210>
 800d862:	e7eb      	b.n	800d83c <_printf_i+0x204>
 800d864:	2500      	movs	r5, #0
 800d866:	f104 0619 	add.w	r6, r4, #25
 800d86a:	e7f5      	b.n	800d858 <_printf_i+0x220>
 800d86c:	0800f1ab 	.word	0x0800f1ab
 800d870:	0800f1bc 	.word	0x0800f1bc

0800d874 <__sflush_r>:
 800d874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87c:	0716      	lsls	r6, r2, #28
 800d87e:	4605      	mov	r5, r0
 800d880:	460c      	mov	r4, r1
 800d882:	d454      	bmi.n	800d92e <__sflush_r+0xba>
 800d884:	684b      	ldr	r3, [r1, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	dc02      	bgt.n	800d890 <__sflush_r+0x1c>
 800d88a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	dd48      	ble.n	800d922 <__sflush_r+0xae>
 800d890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d892:	2e00      	cmp	r6, #0
 800d894:	d045      	beq.n	800d922 <__sflush_r+0xae>
 800d896:	2300      	movs	r3, #0
 800d898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d89c:	682f      	ldr	r7, [r5, #0]
 800d89e:	6a21      	ldr	r1, [r4, #32]
 800d8a0:	602b      	str	r3, [r5, #0]
 800d8a2:	d030      	beq.n	800d906 <__sflush_r+0x92>
 800d8a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8a6:	89a3      	ldrh	r3, [r4, #12]
 800d8a8:	0759      	lsls	r1, r3, #29
 800d8aa:	d505      	bpl.n	800d8b8 <__sflush_r+0x44>
 800d8ac:	6863      	ldr	r3, [r4, #4]
 800d8ae:	1ad2      	subs	r2, r2, r3
 800d8b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8b2:	b10b      	cbz	r3, 800d8b8 <__sflush_r+0x44>
 800d8b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8b6:	1ad2      	subs	r2, r2, r3
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8bc:	6a21      	ldr	r1, [r4, #32]
 800d8be:	4628      	mov	r0, r5
 800d8c0:	47b0      	blx	r6
 800d8c2:	1c43      	adds	r3, r0, #1
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	d106      	bne.n	800d8d6 <__sflush_r+0x62>
 800d8c8:	6829      	ldr	r1, [r5, #0]
 800d8ca:	291d      	cmp	r1, #29
 800d8cc:	d82b      	bhi.n	800d926 <__sflush_r+0xb2>
 800d8ce:	4a2a      	ldr	r2, [pc, #168]	@ (800d978 <__sflush_r+0x104>)
 800d8d0:	40ca      	lsrs	r2, r1
 800d8d2:	07d6      	lsls	r6, r2, #31
 800d8d4:	d527      	bpl.n	800d926 <__sflush_r+0xb2>
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	6062      	str	r2, [r4, #4]
 800d8da:	04d9      	lsls	r1, r3, #19
 800d8dc:	6922      	ldr	r2, [r4, #16]
 800d8de:	6022      	str	r2, [r4, #0]
 800d8e0:	d504      	bpl.n	800d8ec <__sflush_r+0x78>
 800d8e2:	1c42      	adds	r2, r0, #1
 800d8e4:	d101      	bne.n	800d8ea <__sflush_r+0x76>
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	b903      	cbnz	r3, 800d8ec <__sflush_r+0x78>
 800d8ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8ee:	602f      	str	r7, [r5, #0]
 800d8f0:	b1b9      	cbz	r1, 800d922 <__sflush_r+0xae>
 800d8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8f6:	4299      	cmp	r1, r3
 800d8f8:	d002      	beq.n	800d900 <__sflush_r+0x8c>
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f7ff fa94 	bl	800ce28 <_free_r>
 800d900:	2300      	movs	r3, #0
 800d902:	6363      	str	r3, [r4, #52]	@ 0x34
 800d904:	e00d      	b.n	800d922 <__sflush_r+0xae>
 800d906:	2301      	movs	r3, #1
 800d908:	4628      	mov	r0, r5
 800d90a:	47b0      	blx	r6
 800d90c:	4602      	mov	r2, r0
 800d90e:	1c50      	adds	r0, r2, #1
 800d910:	d1c9      	bne.n	800d8a6 <__sflush_r+0x32>
 800d912:	682b      	ldr	r3, [r5, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d0c6      	beq.n	800d8a6 <__sflush_r+0x32>
 800d918:	2b1d      	cmp	r3, #29
 800d91a:	d001      	beq.n	800d920 <__sflush_r+0xac>
 800d91c:	2b16      	cmp	r3, #22
 800d91e:	d11e      	bne.n	800d95e <__sflush_r+0xea>
 800d920:	602f      	str	r7, [r5, #0]
 800d922:	2000      	movs	r0, #0
 800d924:	e022      	b.n	800d96c <__sflush_r+0xf8>
 800d926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d92a:	b21b      	sxth	r3, r3
 800d92c:	e01b      	b.n	800d966 <__sflush_r+0xf2>
 800d92e:	690f      	ldr	r7, [r1, #16]
 800d930:	2f00      	cmp	r7, #0
 800d932:	d0f6      	beq.n	800d922 <__sflush_r+0xae>
 800d934:	0793      	lsls	r3, r2, #30
 800d936:	680e      	ldr	r6, [r1, #0]
 800d938:	bf08      	it	eq
 800d93a:	694b      	ldreq	r3, [r1, #20]
 800d93c:	600f      	str	r7, [r1, #0]
 800d93e:	bf18      	it	ne
 800d940:	2300      	movne	r3, #0
 800d942:	eba6 0807 	sub.w	r8, r6, r7
 800d946:	608b      	str	r3, [r1, #8]
 800d948:	f1b8 0f00 	cmp.w	r8, #0
 800d94c:	dde9      	ble.n	800d922 <__sflush_r+0xae>
 800d94e:	6a21      	ldr	r1, [r4, #32]
 800d950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d952:	4643      	mov	r3, r8
 800d954:	463a      	mov	r2, r7
 800d956:	4628      	mov	r0, r5
 800d958:	47b0      	blx	r6
 800d95a:	2800      	cmp	r0, #0
 800d95c:	dc08      	bgt.n	800d970 <__sflush_r+0xfc>
 800d95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d966:	81a3      	strh	r3, [r4, #12]
 800d968:	f04f 30ff 	mov.w	r0, #4294967295
 800d96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d970:	4407      	add	r7, r0
 800d972:	eba8 0800 	sub.w	r8, r8, r0
 800d976:	e7e7      	b.n	800d948 <__sflush_r+0xd4>
 800d978:	20400001 	.word	0x20400001

0800d97c <_fflush_r>:
 800d97c:	b538      	push	{r3, r4, r5, lr}
 800d97e:	690b      	ldr	r3, [r1, #16]
 800d980:	4605      	mov	r5, r0
 800d982:	460c      	mov	r4, r1
 800d984:	b913      	cbnz	r3, 800d98c <_fflush_r+0x10>
 800d986:	2500      	movs	r5, #0
 800d988:	4628      	mov	r0, r5
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	b118      	cbz	r0, 800d996 <_fflush_r+0x1a>
 800d98e:	6a03      	ldr	r3, [r0, #32]
 800d990:	b90b      	cbnz	r3, 800d996 <_fflush_r+0x1a>
 800d992:	f7ff f873 	bl	800ca7c <__sinit>
 800d996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f3      	beq.n	800d986 <_fflush_r+0xa>
 800d99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9a0:	07d0      	lsls	r0, r2, #31
 800d9a2:	d404      	bmi.n	800d9ae <_fflush_r+0x32>
 800d9a4:	0599      	lsls	r1, r3, #22
 800d9a6:	d402      	bmi.n	800d9ae <_fflush_r+0x32>
 800d9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9aa:	f7ff fa0e 	bl	800cdca <__retarget_lock_acquire_recursive>
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	f7ff ff5f 	bl	800d874 <__sflush_r>
 800d9b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9b8:	07da      	lsls	r2, r3, #31
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	d4e4      	bmi.n	800d988 <_fflush_r+0xc>
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	059b      	lsls	r3, r3, #22
 800d9c2:	d4e1      	bmi.n	800d988 <_fflush_r+0xc>
 800d9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9c6:	f7ff fa01 	bl	800cdcc <__retarget_lock_release_recursive>
 800d9ca:	e7dd      	b.n	800d988 <_fflush_r+0xc>

0800d9cc <fiprintf>:
 800d9cc:	b40e      	push	{r1, r2, r3}
 800d9ce:	b503      	push	{r0, r1, lr}
 800d9d0:	4601      	mov	r1, r0
 800d9d2:	ab03      	add	r3, sp, #12
 800d9d4:	4805      	ldr	r0, [pc, #20]	@ (800d9ec <fiprintf+0x20>)
 800d9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9da:	6800      	ldr	r0, [r0, #0]
 800d9dc:	9301      	str	r3, [sp, #4]
 800d9de:	f7ff fca5 	bl	800d32c <_vfiprintf_r>
 800d9e2:	b002      	add	sp, #8
 800d9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9e8:	b003      	add	sp, #12
 800d9ea:	4770      	bx	lr
 800d9ec:	20000250 	.word	0x20000250

0800d9f0 <__swbuf_r>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	4614      	mov	r4, r2
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	b118      	cbz	r0, 800da02 <__swbuf_r+0x12>
 800d9fa:	6a03      	ldr	r3, [r0, #32]
 800d9fc:	b90b      	cbnz	r3, 800da02 <__swbuf_r+0x12>
 800d9fe:	f7ff f83d 	bl	800ca7c <__sinit>
 800da02:	69a3      	ldr	r3, [r4, #24]
 800da04:	60a3      	str	r3, [r4, #8]
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	071a      	lsls	r2, r3, #28
 800da0a:	d501      	bpl.n	800da10 <__swbuf_r+0x20>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	b943      	cbnz	r3, 800da22 <__swbuf_r+0x32>
 800da10:	4621      	mov	r1, r4
 800da12:	4628      	mov	r0, r5
 800da14:	f000 f82a 	bl	800da6c <__swsetup_r>
 800da18:	b118      	cbz	r0, 800da22 <__swbuf_r+0x32>
 800da1a:	f04f 37ff 	mov.w	r7, #4294967295
 800da1e:	4638      	mov	r0, r7
 800da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	6922      	ldr	r2, [r4, #16]
 800da26:	1a98      	subs	r0, r3, r2
 800da28:	6963      	ldr	r3, [r4, #20]
 800da2a:	b2f6      	uxtb	r6, r6
 800da2c:	4283      	cmp	r3, r0
 800da2e:	4637      	mov	r7, r6
 800da30:	dc05      	bgt.n	800da3e <__swbuf_r+0x4e>
 800da32:	4621      	mov	r1, r4
 800da34:	4628      	mov	r0, r5
 800da36:	f7ff ffa1 	bl	800d97c <_fflush_r>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d1ed      	bne.n	800da1a <__swbuf_r+0x2a>
 800da3e:	68a3      	ldr	r3, [r4, #8]
 800da40:	3b01      	subs	r3, #1
 800da42:	60a3      	str	r3, [r4, #8]
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	6022      	str	r2, [r4, #0]
 800da4a:	701e      	strb	r6, [r3, #0]
 800da4c:	6962      	ldr	r2, [r4, #20]
 800da4e:	1c43      	adds	r3, r0, #1
 800da50:	429a      	cmp	r2, r3
 800da52:	d004      	beq.n	800da5e <__swbuf_r+0x6e>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	07db      	lsls	r3, r3, #31
 800da58:	d5e1      	bpl.n	800da1e <__swbuf_r+0x2e>
 800da5a:	2e0a      	cmp	r6, #10
 800da5c:	d1df      	bne.n	800da1e <__swbuf_r+0x2e>
 800da5e:	4621      	mov	r1, r4
 800da60:	4628      	mov	r0, r5
 800da62:	f7ff ff8b 	bl	800d97c <_fflush_r>
 800da66:	2800      	cmp	r0, #0
 800da68:	d0d9      	beq.n	800da1e <__swbuf_r+0x2e>
 800da6a:	e7d6      	b.n	800da1a <__swbuf_r+0x2a>

0800da6c <__swsetup_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4b29      	ldr	r3, [pc, #164]	@ (800db14 <__swsetup_r+0xa8>)
 800da70:	4605      	mov	r5, r0
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	460c      	mov	r4, r1
 800da76:	b118      	cbz	r0, 800da80 <__swsetup_r+0x14>
 800da78:	6a03      	ldr	r3, [r0, #32]
 800da7a:	b90b      	cbnz	r3, 800da80 <__swsetup_r+0x14>
 800da7c:	f7fe fffe 	bl	800ca7c <__sinit>
 800da80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da84:	0719      	lsls	r1, r3, #28
 800da86:	d422      	bmi.n	800dace <__swsetup_r+0x62>
 800da88:	06da      	lsls	r2, r3, #27
 800da8a:	d407      	bmi.n	800da9c <__swsetup_r+0x30>
 800da8c:	2209      	movs	r2, #9
 800da8e:	602a      	str	r2, [r5, #0]
 800da90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	f04f 30ff 	mov.w	r0, #4294967295
 800da9a:	e033      	b.n	800db04 <__swsetup_r+0x98>
 800da9c:	0758      	lsls	r0, r3, #29
 800da9e:	d512      	bpl.n	800dac6 <__swsetup_r+0x5a>
 800daa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daa2:	b141      	cbz	r1, 800dab6 <__swsetup_r+0x4a>
 800daa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daa8:	4299      	cmp	r1, r3
 800daaa:	d002      	beq.n	800dab2 <__swsetup_r+0x46>
 800daac:	4628      	mov	r0, r5
 800daae:	f7ff f9bb 	bl	800ce28 <_free_r>
 800dab2:	2300      	movs	r3, #0
 800dab4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	2300      	movs	r3, #0
 800dac0:	6063      	str	r3, [r4, #4]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	f043 0308 	orr.w	r3, r3, #8
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	b94b      	cbnz	r3, 800dae6 <__swsetup_r+0x7a>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dadc:	d003      	beq.n	800dae6 <__swsetup_r+0x7a>
 800dade:	4621      	mov	r1, r4
 800dae0:	4628      	mov	r0, r5
 800dae2:	f000 f89e 	bl	800dc22 <__smakebuf_r>
 800dae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daea:	f013 0201 	ands.w	r2, r3, #1
 800daee:	d00a      	beq.n	800db06 <__swsetup_r+0x9a>
 800daf0:	2200      	movs	r2, #0
 800daf2:	60a2      	str	r2, [r4, #8]
 800daf4:	6962      	ldr	r2, [r4, #20]
 800daf6:	4252      	negs	r2, r2
 800daf8:	61a2      	str	r2, [r4, #24]
 800dafa:	6922      	ldr	r2, [r4, #16]
 800dafc:	b942      	cbnz	r2, 800db10 <__swsetup_r+0xa4>
 800dafe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db02:	d1c5      	bne.n	800da90 <__swsetup_r+0x24>
 800db04:	bd38      	pop	{r3, r4, r5, pc}
 800db06:	0799      	lsls	r1, r3, #30
 800db08:	bf58      	it	pl
 800db0a:	6962      	ldrpl	r2, [r4, #20]
 800db0c:	60a2      	str	r2, [r4, #8]
 800db0e:	e7f4      	b.n	800dafa <__swsetup_r+0x8e>
 800db10:	2000      	movs	r0, #0
 800db12:	e7f7      	b.n	800db04 <__swsetup_r+0x98>
 800db14:	20000250 	.word	0x20000250

0800db18 <memmove>:
 800db18:	4288      	cmp	r0, r1
 800db1a:	b510      	push	{r4, lr}
 800db1c:	eb01 0402 	add.w	r4, r1, r2
 800db20:	d902      	bls.n	800db28 <memmove+0x10>
 800db22:	4284      	cmp	r4, r0
 800db24:	4623      	mov	r3, r4
 800db26:	d807      	bhi.n	800db38 <memmove+0x20>
 800db28:	1e43      	subs	r3, r0, #1
 800db2a:	42a1      	cmp	r1, r4
 800db2c:	d008      	beq.n	800db40 <memmove+0x28>
 800db2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db36:	e7f8      	b.n	800db2a <memmove+0x12>
 800db38:	4402      	add	r2, r0
 800db3a:	4601      	mov	r1, r0
 800db3c:	428a      	cmp	r2, r1
 800db3e:	d100      	bne.n	800db42 <memmove+0x2a>
 800db40:	bd10      	pop	{r4, pc}
 800db42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db4a:	e7f7      	b.n	800db3c <memmove+0x24>

0800db4c <_sbrk_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d06      	ldr	r5, [pc, #24]	@ (800db68 <_sbrk_r+0x1c>)
 800db50:	2300      	movs	r3, #0
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	f7f5 ff58 	bl	8003a0c <_sbrk>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_sbrk_r+0x1a>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_sbrk_r+0x1a>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	20001a34 	.word	0x20001a34

0800db6c <abort>:
 800db6c:	b508      	push	{r3, lr}
 800db6e:	2006      	movs	r0, #6
 800db70:	f000 f8bc 	bl	800dcec <raise>
 800db74:	2001      	movs	r0, #1
 800db76:	f7f5 fed0 	bl	800391a <_exit>

0800db7a <_realloc_r>:
 800db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	4607      	mov	r7, r0
 800db80:	4614      	mov	r4, r2
 800db82:	460d      	mov	r5, r1
 800db84:	b921      	cbnz	r1, 800db90 <_realloc_r+0x16>
 800db86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	4611      	mov	r1, r2
 800db8c:	f7ff b9c0 	b.w	800cf10 <_malloc_r>
 800db90:	b92a      	cbnz	r2, 800db9e <_realloc_r+0x24>
 800db92:	f7ff f949 	bl	800ce28 <_free_r>
 800db96:	4625      	mov	r5, r4
 800db98:	4628      	mov	r0, r5
 800db9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9e:	f000 f8e3 	bl	800dd68 <_malloc_usable_size_r>
 800dba2:	4284      	cmp	r4, r0
 800dba4:	4606      	mov	r6, r0
 800dba6:	d802      	bhi.n	800dbae <_realloc_r+0x34>
 800dba8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbac:	d8f4      	bhi.n	800db98 <_realloc_r+0x1e>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff f9ad 	bl	800cf10 <_malloc_r>
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	b908      	cbnz	r0, 800dbbe <_realloc_r+0x44>
 800dbba:	4645      	mov	r5, r8
 800dbbc:	e7ec      	b.n	800db98 <_realloc_r+0x1e>
 800dbbe:	42b4      	cmp	r4, r6
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	bf28      	it	cs
 800dbc6:	4632      	movcs	r2, r6
 800dbc8:	f7ff f901 	bl	800cdce <memcpy>
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f7ff f92a 	bl	800ce28 <_free_r>
 800dbd4:	e7f1      	b.n	800dbba <_realloc_r+0x40>

0800dbd6 <__swhatbuf_r>:
 800dbd6:	b570      	push	{r4, r5, r6, lr}
 800dbd8:	460c      	mov	r4, r1
 800dbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbde:	2900      	cmp	r1, #0
 800dbe0:	b096      	sub	sp, #88	@ 0x58
 800dbe2:	4615      	mov	r5, r2
 800dbe4:	461e      	mov	r6, r3
 800dbe6:	da0d      	bge.n	800dc04 <__swhatbuf_r+0x2e>
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dbee:	f04f 0100 	mov.w	r1, #0
 800dbf2:	bf14      	ite	ne
 800dbf4:	2340      	movne	r3, #64	@ 0x40
 800dbf6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	6031      	str	r1, [r6, #0]
 800dbfe:	602b      	str	r3, [r5, #0]
 800dc00:	b016      	add	sp, #88	@ 0x58
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	466a      	mov	r2, sp
 800dc06:	f000 f879 	bl	800dcfc <_fstat_r>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	dbec      	blt.n	800dbe8 <__swhatbuf_r+0x12>
 800dc0e:	9901      	ldr	r1, [sp, #4]
 800dc10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc18:	4259      	negs	r1, r3
 800dc1a:	4159      	adcs	r1, r3
 800dc1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc20:	e7eb      	b.n	800dbfa <__swhatbuf_r+0x24>

0800dc22 <__smakebuf_r>:
 800dc22:	898b      	ldrh	r3, [r1, #12]
 800dc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc26:	079d      	lsls	r5, r3, #30
 800dc28:	4606      	mov	r6, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	d507      	bpl.n	800dc3e <__smakebuf_r+0x1c>
 800dc2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	6123      	str	r3, [r4, #16]
 800dc36:	2301      	movs	r3, #1
 800dc38:	6163      	str	r3, [r4, #20]
 800dc3a:	b003      	add	sp, #12
 800dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc3e:	ab01      	add	r3, sp, #4
 800dc40:	466a      	mov	r2, sp
 800dc42:	f7ff ffc8 	bl	800dbd6 <__swhatbuf_r>
 800dc46:	9f00      	ldr	r7, [sp, #0]
 800dc48:	4605      	mov	r5, r0
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7ff f95f 	bl	800cf10 <_malloc_r>
 800dc52:	b948      	cbnz	r0, 800dc68 <__smakebuf_r+0x46>
 800dc54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc58:	059a      	lsls	r2, r3, #22
 800dc5a:	d4ee      	bmi.n	800dc3a <__smakebuf_r+0x18>
 800dc5c:	f023 0303 	bic.w	r3, r3, #3
 800dc60:	f043 0302 	orr.w	r3, r3, #2
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	e7e2      	b.n	800dc2e <__smakebuf_r+0xc>
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	6020      	str	r0, [r4, #0]
 800dc6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc70:	81a3      	strh	r3, [r4, #12]
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc78:	b15b      	cbz	r3, 800dc92 <__smakebuf_r+0x70>
 800dc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f000 f84e 	bl	800dd20 <_isatty_r>
 800dc84:	b128      	cbz	r0, 800dc92 <__smakebuf_r+0x70>
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	f023 0303 	bic.w	r3, r3, #3
 800dc8c:	f043 0301 	orr.w	r3, r3, #1
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	431d      	orrs	r5, r3
 800dc96:	81a5      	strh	r5, [r4, #12]
 800dc98:	e7cf      	b.n	800dc3a <__smakebuf_r+0x18>

0800dc9a <_raise_r>:
 800dc9a:	291f      	cmp	r1, #31
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4605      	mov	r5, r0
 800dca0:	460c      	mov	r4, r1
 800dca2:	d904      	bls.n	800dcae <_raise_r+0x14>
 800dca4:	2316      	movs	r3, #22
 800dca6:	6003      	str	r3, [r0, #0]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	bd38      	pop	{r3, r4, r5, pc}
 800dcae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcb0:	b112      	cbz	r2, 800dcb8 <_raise_r+0x1e>
 800dcb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcb6:	b94b      	cbnz	r3, 800dccc <_raise_r+0x32>
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f000 f853 	bl	800dd64 <_getpid_r>
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcc8:	f000 b83a 	b.w	800dd40 <_kill_r>
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d00a      	beq.n	800dce6 <_raise_r+0x4c>
 800dcd0:	1c59      	adds	r1, r3, #1
 800dcd2:	d103      	bne.n	800dcdc <_raise_r+0x42>
 800dcd4:	2316      	movs	r3, #22
 800dcd6:	6003      	str	r3, [r0, #0]
 800dcd8:	2001      	movs	r0, #1
 800dcda:	e7e7      	b.n	800dcac <_raise_r+0x12>
 800dcdc:	2100      	movs	r1, #0
 800dcde:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dce2:	4620      	mov	r0, r4
 800dce4:	4798      	blx	r3
 800dce6:	2000      	movs	r0, #0
 800dce8:	e7e0      	b.n	800dcac <_raise_r+0x12>
	...

0800dcec <raise>:
 800dcec:	4b02      	ldr	r3, [pc, #8]	@ (800dcf8 <raise+0xc>)
 800dcee:	4601      	mov	r1, r0
 800dcf0:	6818      	ldr	r0, [r3, #0]
 800dcf2:	f7ff bfd2 	b.w	800dc9a <_raise_r>
 800dcf6:	bf00      	nop
 800dcf8:	20000250 	.word	0x20000250

0800dcfc <_fstat_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4d07      	ldr	r5, [pc, #28]	@ (800dd1c <_fstat_r+0x20>)
 800dd00:	2300      	movs	r3, #0
 800dd02:	4604      	mov	r4, r0
 800dd04:	4608      	mov	r0, r1
 800dd06:	4611      	mov	r1, r2
 800dd08:	602b      	str	r3, [r5, #0]
 800dd0a:	f7f5 fe56 	bl	80039ba <_fstat>
 800dd0e:	1c43      	adds	r3, r0, #1
 800dd10:	d102      	bne.n	800dd18 <_fstat_r+0x1c>
 800dd12:	682b      	ldr	r3, [r5, #0]
 800dd14:	b103      	cbz	r3, 800dd18 <_fstat_r+0x1c>
 800dd16:	6023      	str	r3, [r4, #0]
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20001a34 	.word	0x20001a34

0800dd20 <_isatty_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d06      	ldr	r5, [pc, #24]	@ (800dd3c <_isatty_r+0x1c>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	602b      	str	r3, [r5, #0]
 800dd2c:	f7f5 fe55 	bl	80039da <_isatty>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	d102      	bne.n	800dd3a <_isatty_r+0x1a>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	b103      	cbz	r3, 800dd3a <_isatty_r+0x1a>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	20001a34 	.word	0x20001a34

0800dd40 <_kill_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d07      	ldr	r5, [pc, #28]	@ (800dd60 <_kill_r+0x20>)
 800dd44:	2300      	movs	r3, #0
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	602b      	str	r3, [r5, #0]
 800dd4e:	f7f5 fdd4 	bl	80038fa <_kill>
 800dd52:	1c43      	adds	r3, r0, #1
 800dd54:	d102      	bne.n	800dd5c <_kill_r+0x1c>
 800dd56:	682b      	ldr	r3, [r5, #0]
 800dd58:	b103      	cbz	r3, 800dd5c <_kill_r+0x1c>
 800dd5a:	6023      	str	r3, [r4, #0]
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	bf00      	nop
 800dd60:	20001a34 	.word	0x20001a34

0800dd64 <_getpid_r>:
 800dd64:	f7f5 bdc1 	b.w	80038ea <_getpid>

0800dd68 <_malloc_usable_size_r>:
 800dd68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd6c:	1f18      	subs	r0, r3, #4
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bfbc      	itt	lt
 800dd72:	580b      	ldrlt	r3, [r1, r0]
 800dd74:	18c0      	addlt	r0, r0, r3
 800dd76:	4770      	bx	lr

0800dd78 <_init>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr

0800dd84 <_fini>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	bf00      	nop
 800dd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8a:	bc08      	pop	{r3}
 800dd8c:	469e      	mov	lr, r3
 800dd8e:	4770      	bx	lr
