
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000100e0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ce98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001100  0800d038  0800d038  0000e038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e138  0800e138  000100e0  2**0
                  CONTENTS
  5 .ARM          00000008  0800e138  0800e138  0000f138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800e140  0800e140  000100e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e140  0800e140  0000f140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e144  0800e144  0000f144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  0800e148  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000011b8  200000e0  0800e228  000100e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001298  0800e228  00010298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e11f  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053cc  00000000  00000000  0002e22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00033600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e5  00000000  00000000  00034cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203b6  00000000  00000000  00035e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef7b  00000000  00000000  0005624b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9a79  00000000  00000000  000751c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ec3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069fc  00000000  00000000  0012ec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00135680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d020 	.word	0x0800d020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	0800d020 	.word	0x0800d020

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_task>:
static void load_config(void);
static void reset_config(void);
static void cdc_write_string_chunked(const char* str);
static void cdc_write_flush_wait(void);

void cdc_task(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f005 fb06 	bl	8005bf4 <tud_cdc_n_connected>
 80005e8:	4603      	mov	r3, r0
    if (tud_cdc_connected()) {
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d079      	beq.n	80006e2 <cdc_task+0x106>
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f005 fb3e 	bl	8005c70 <tud_cdc_n_available>
 80005f4:	4603      	mov	r3, r0
        if (tud_cdc_available()) {
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d076      	beq.n	80006e8 <cdc_task+0x10c>
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80005fe:	2340      	movs	r3, #64	@ 0x40
 8000600:	653b      	str	r3, [r7, #80]	@ 0x50
TU_ATTR_ALWAYS_INLINE static inline int32_t tud_cdc_read_char(void) {
  return tud_cdc_n_read_char(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_read(void* buffer, uint32_t bufsize) {
  return tud_cdc_n_read(0, buffer, bufsize);
 8000602:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000604:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000606:	2000      	movs	r0, #0
 8000608:	f005 fb48 	bl	8005c9c <tud_cdc_n_read>
 800060c:	4603      	mov	r3, r0
            uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
            uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800060e:	65bb      	str	r3, [r7, #88]	@ 0x58

            for (uint32_t i = 0; i < count; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000614:	e05e      	b.n	80006d4 <cdc_task+0xf8>
                char c = buf[i];
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

                // Handle backspace
                if (c == '\b' || c == 127) {
 8000622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000626:	2b08      	cmp	r3, #8
 8000628:	d003      	beq.n	8000632 <cdc_task+0x56>
 800062a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000630:	d10d      	bne.n	800064e <cdc_task+0x72>
                    if (cmd_index > 0) {
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <cdc_task+0x114>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d049      	beq.n	80006ce <cdc_task+0xf2>
                        cmd_index--;
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <cdc_task+0x114>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3b01      	subs	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <cdc_task+0x114>)
 8000644:	701a      	strb	r2, [r3, #0]
                        cdc_write_string_chunked("\b \b"); // Erase character
 8000646:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <cdc_task+0x118>)
 8000648:	f000 f85c 	bl	8000704 <cdc_write_string_chunked>
                    if (cmd_index > 0) {
 800064c:	e03f      	b.n	80006ce <cdc_task+0xf2>
                    }
                }
                // Handle enter/newline
                else if (c == '\r' || c == '\n') {
 800064e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000652:	2b0d      	cmp	r3, #13
 8000654:	d003      	beq.n	800065e <cdc_task+0x82>
 8000656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d116      	bne.n	800068c <cdc_task+0xb0>
                    cdc_write_string_chunked("\r\n");
 800065e:	4826      	ldr	r0, [pc, #152]	@ (80006f8 <cdc_task+0x11c>)
 8000660:	f000 f850 	bl	8000704 <cdc_write_string_chunked>
                    cmd_buffer[cmd_index] = '\0';
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <cdc_task+0x114>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <cdc_task+0x120>)
 800066c:	2100      	movs	r1, #0
 800066e:	5499      	strb	r1, [r3, r2]

                    if (cmd_index > 0) {
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <cdc_task+0x114>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <cdc_task+0xa8>
                        process_command(cmd_buffer);
 8000678:	4820      	ldr	r0, [pc, #128]	@ (80006fc <cdc_task+0x120>)
 800067a:	f000 f8af 	bl	80007dc <process_command>
                        cmd_index = 0;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <cdc_task+0x114>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
                    }

                    cdc_write_string_chunked("Ready> ");
 8000684:	481e      	ldr	r0, [pc, #120]	@ (8000700 <cdc_task+0x124>)
 8000686:	f000 f83d 	bl	8000704 <cdc_write_string_chunked>
 800068a:	e020      	b.n	80006ce <cdc_task+0xf2>
                }
                // Handle printable characters
                else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 800068c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000690:	2b1f      	cmp	r3, #31
 8000692:	d91c      	bls.n	80006ce <cdc_task+0xf2>
 8000694:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000698:	2b7e      	cmp	r3, #126	@ 0x7e
 800069a:	d818      	bhi.n	80006ce <cdc_task+0xf2>
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <cdc_task+0x114>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80006a2:	d814      	bhi.n	80006ce <cdc_task+0xf2>
                    cmd_buffer[cmd_index++] = c;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <cdc_task+0x114>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	b2d1      	uxtb	r1, r2
 80006ac:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <cdc_task+0x114>)
 80006ae:	7011      	strb	r1, [r2, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <cdc_task+0x120>)
 80006b8:	5499      	strb	r1, [r3, r2]
 80006ba:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006c0:	2301      	movs	r3, #1
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 80006c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80006c6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80006c8:	2000      	movs	r0, #0
 80006ca:	f005 fb13 	bl	8005cf4 <tud_cdc_n_write>
            for (uint32_t i = 0; i < count; i++) {
 80006ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006d0:	3301      	adds	r3, #1
 80006d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80006d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80006d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006d8:	429a      	cmp	r2, r3
 80006da:	d39c      	bcc.n	8000616 <cdc_task+0x3a>
                    tud_cdc_write(&c, 1); // Echo character
                }
            }

            cdc_write_flush_wait();
 80006dc:	f000 f85d 	bl	800079a <cdc_write_flush_wait>
        }
    } else {
        // Reset flag when disconnected
        cmd_index = 0;
    }
}
 80006e0:	e002      	b.n	80006e8 <cdc_task+0x10c>
        cmd_index = 0;
 80006e2:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <cdc_task+0x114>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	3760      	adds	r7, #96	@ 0x60
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	0800d038 	.word	0x0800d038
 80006f8:	0800d03c 	.word	0x0800d03c
 80006fc:	200000fc 	.word	0x200000fc
 8000700:	0800d040 	.word	0x0800d040

08000704 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char* str) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if (!str) return;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d03f      	beq.n	8000792 <cdc_write_string_chunked+0x8e>

    size_t len = strlen(str);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fd6e 	bl	80001f4 <strlen>
 8000718:	61b8      	str	r0, [r7, #24]
    size_t sent = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 800071e:	2338      	movs	r3, #56	@ 0x38
 8000720:	617b      	str	r3, [r7, #20]

    while (sent < len) {
 8000722:	e031      	b.n	8000788 <cdc_write_string_chunked+0x84>
        size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	4293      	cmp	r3, r2
 800072e:	bf28      	it	cs
 8000730:	4613      	movcs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]

        // Wait for space in buffer
        while (tud_cdc_write_available() < to_send) {
 8000734:	e005      	b.n	8000742 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000736:	2100      	movs	r1, #0
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f007 fbe8 	bl	8007f10 <tud_task_ext>
}
 8000740:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 8000742:	2000      	movs	r0, #0
 8000744:	f005 fb8c 	bl	8005e60 <tud_cdc_n_write_available>
 8000748:	4602      	mov	r2, r0
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	4293      	cmp	r3, r2
 800074e:	d8f2      	bhi.n	8000736 <cdc_write_string_chunked+0x32>
            tud_task(); // Process USB tasks
        }

        tud_cdc_write(str + sent, to_send);
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	68f9      	ldr	r1, [r7, #12]
 8000760:	2000      	movs	r0, #0
 8000762:	f005 fac7 	bl	8005cf4 <tud_cdc_n_write>
        sent += to_send;
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	4413      	add	r3, r2
 800076c:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f005 fb76 	bl	8005e60 <tud_cdc_n_write_available>
 8000774:	4602      	mov	r2, r0

        // Flush if buffer is getting full or we're done
        if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4293      	cmp	r3, r2
 800077a:	d803      	bhi.n	8000784 <cdc_write_string_chunked+0x80>
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	429a      	cmp	r2, r3
 8000782:	d301      	bcc.n	8000788 <cdc_write_string_chunked+0x84>
            cdc_write_flush_wait();
 8000784:	f000 f809 	bl	800079a <cdc_write_flush_wait>
    while (sent < len) {
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3c9      	bcc.n	8000724 <cdc_write_string_chunked+0x20>
 8000790:	e000      	b.n	8000794 <cdc_write_string_chunked+0x90>
    if (!str) return;
 8000792:	bf00      	nop
        }
    }
}
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f005 fadb 	bl	8005d5c <tud_cdc_n_write_flush>
    tud_cdc_write_flush();

    // Wait for data to be sent
    uint32_t timeout = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
    while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80007aa:	e008      	b.n	80007be <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 80007ac:	2100      	movs	r1, #0
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f007 fbad 	bl	8007f10 <tud_task_ext>
}
 80007b6:	bf00      	nop
        tud_task(); // Process USB tasks
        timeout++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f005 fb4e 	bl	8005e60 <tud_cdc_n_write_available>
 80007c4:	4603      	mov	r3, r0
    while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80007c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c8:	d804      	bhi.n	80007d4 <cdc_write_flush_wait+0x3a>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d9eb      	bls.n	80007ac <cdc_write_flush_wait+0x12>
    }
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <process_command>:

static void process_command(char* cmd) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    // Convert to lowercase for case-insensitive commands
    for (int i = 0; cmd[i]; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80007e8:	e018      	b.n	800081c <process_command+0x40>
        if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 80007ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b40      	cmp	r3, #64	@ 0x40
 80007f4:	d90f      	bls.n	8000816 <process_command+0x3a>
 80007f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000800:	d809      	bhi.n	8000816 <process_command+0x3a>
            cmd[i] += 32;
 8000802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	440b      	add	r3, r1
 8000810:	3220      	adds	r2, #32
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	701a      	strb	r2, [r3, #0]
    for (int i = 0; cmd[i]; i++) {
 8000816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000818:	3301      	adds	r3, #1
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
 800081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1e0      	bne.n	80007ea <process_command+0xe>
        }
    }

    char* token = strtok(cmd, " ");
 8000828:	496c      	ldr	r1, [pc, #432]	@ (80009dc <process_command+0x200>)
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f00b fb54 	bl	800bed8 <strtok>
 8000830:	6338      	str	r0, [r7, #48]	@ 0x30
    if (!token) return;
 8000832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 80cd 	beq.w	80009d4 <process_command+0x1f8>

    if (strcmp(token, "help") == 0) {
 800083a:	4969      	ldr	r1, [pc, #420]	@ (80009e0 <process_command+0x204>)
 800083c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800083e:	f7ff fccf 	bl	80001e0 <strcmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <process_command+0x72>
        print_help();
 8000848:	f000 f8e6 	bl	8000a18 <print_help>
 800084c:	e0c3      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "show") == 0) {
 800084e:	4965      	ldr	r1, [pc, #404]	@ (80009e4 <process_command+0x208>)
 8000850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000852:	f7ff fcc5 	bl	80001e0 <strcmp>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <process_command+0x86>
        print_config();
 800085c:	f000 f91c 	bl	8000a98 <print_config>
 8000860:	e0b9      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "set") == 0) {
 8000862:	4961      	ldr	r1, [pc, #388]	@ (80009e8 <process_command+0x20c>)
 8000864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000866:	f7ff fcbb 	bl	80001e0 <strcmp>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d118      	bne.n	80008a2 <process_command+0xc6>
        char* param = strtok(NULL, " ");
 8000870:	495a      	ldr	r1, [pc, #360]	@ (80009dc <process_command+0x200>)
 8000872:	2000      	movs	r0, #0
 8000874:	f00b fb30 	bl	800bed8 <strtok>
 8000878:	60f8      	str	r0, [r7, #12]
        char* value = strtok(NULL, " ");
 800087a:	4958      	ldr	r1, [pc, #352]	@ (80009dc <process_command+0x200>)
 800087c:	2000      	movs	r0, #0
 800087e:	f00b fb2b 	bl	800bed8 <strtok>
 8000882:	60b8      	str	r0, [r7, #8]
        if (param && value) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <process_command+0xbe>
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <process_command+0xbe>
            set_config_value(param, value);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 f962 	bl	8000b5c <set_config_value>
 8000898:	e09d      	b.n	80009d6 <process_command+0x1fa>
        } else {
            cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 800089a:	4854      	ldr	r0, [pc, #336]	@ (80009ec <process_command+0x210>)
 800089c:	f7ff ff32 	bl	8000704 <cdc_write_string_chunked>
 80008a0:	e099      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "keymap") == 0) {
 80008a2:	4953      	ldr	r1, [pc, #332]	@ (80009f0 <process_command+0x214>)
 80008a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008a6:	f7ff fc9b 	bl	80001e0 <strcmp>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d11c      	bne.n	80008ea <process_command+0x10e>
        char* layer_str = strtok(NULL, " ");
 80008b0:	494a      	ldr	r1, [pc, #296]	@ (80009dc <process_command+0x200>)
 80008b2:	2000      	movs	r0, #0
 80008b4:	f00b fb10 	bl	800bed8 <strtok>
 80008b8:	6178      	str	r0, [r7, #20]
        if (layer_str) {
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d010      	beq.n	80008e2 <process_command+0x106>
            uint8_t layer = atoi(layer_str);
 80008c0:	6978      	ldr	r0, [r7, #20]
 80008c2:	f00b f91a 	bl	800bafa <atoi>
 80008c6:	4603      	mov	r3, r0
 80008c8:	74fb      	strb	r3, [r7, #19]
            if (layer < LAYERS_COUNT) {
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d804      	bhi.n	80008da <process_command+0xfe>
                print_keymap(layer);
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f9f0 	bl	8000cb8 <print_keymap>
 80008d8:	e07d      	b.n	80009d6 <process_command+0x1fa>
            } else {
                cdc_write_string_chunked("Invalid layer number\r\n");
 80008da:	4846      	ldr	r0, [pc, #280]	@ (80009f4 <process_command+0x218>)
 80008dc:	f7ff ff12 	bl	8000704 <cdc_write_string_chunked>
 80008e0:	e079      	b.n	80009d6 <process_command+0x1fa>
            }
        } else {
            cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 80008e2:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <process_command+0x21c>)
 80008e4:	f7ff ff0e 	bl	8000704 <cdc_write_string_chunked>
 80008e8:	e075      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "setkey") == 0) {
 80008ea:	4944      	ldr	r1, [pc, #272]	@ (80009fc <process_command+0x220>)
 80008ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008ee:	f7ff fc77 	bl	80001e0 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14b      	bne.n	8000990 <process_command+0x1b4>
        char* layer_str = strtok(NULL, " ");
 80008f8:	4938      	ldr	r1, [pc, #224]	@ (80009dc <process_command+0x200>)
 80008fa:	2000      	movs	r0, #0
 80008fc:	f00b faec 	bl	800bed8 <strtok>
 8000900:	62f8      	str	r0, [r7, #44]	@ 0x2c
        char* row_str = strtok(NULL, " ");
 8000902:	4936      	ldr	r1, [pc, #216]	@ (80009dc <process_command+0x200>)
 8000904:	2000      	movs	r0, #0
 8000906:	f00b fae7 	bl	800bed8 <strtok>
 800090a:	62b8      	str	r0, [r7, #40]	@ 0x28
        char* col_str = strtok(NULL, " ");
 800090c:	4933      	ldr	r1, [pc, #204]	@ (80009dc <process_command+0x200>)
 800090e:	2000      	movs	r0, #0
 8000910:	f00b fae2 	bl	800bed8 <strtok>
 8000914:	6278      	str	r0, [r7, #36]	@ 0x24
        char* value_str = strtok(NULL, " ");
 8000916:	4931      	ldr	r1, [pc, #196]	@ (80009dc <process_command+0x200>)
 8000918:	2000      	movs	r0, #0
 800091a:	f00b fadd 	bl	800bed8 <strtok>
 800091e:	6238      	str	r0, [r7, #32]

        if (layer_str && row_str && col_str && value_str) {
 8000920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d030      	beq.n	8000988 <process_command+0x1ac>
 8000926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000928:	2b00      	cmp	r3, #0
 800092a:	d02d      	beq.n	8000988 <process_command+0x1ac>
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	2b00      	cmp	r3, #0
 8000930:	d02a      	beq.n	8000988 <process_command+0x1ac>
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d027      	beq.n	8000988 <process_command+0x1ac>
            uint8_t layer = atoi(layer_str);
 8000938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800093a:	f00b f8de 	bl	800bafa <atoi>
 800093e:	4603      	mov	r3, r0
 8000940:	77fb      	strb	r3, [r7, #31]
            uint8_t row = atoi(row_str);
 8000942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000944:	f00b f8d9 	bl	800bafa <atoi>
 8000948:	4603      	mov	r3, r0
 800094a:	77bb      	strb	r3, [r7, #30]
            uint8_t col = atoi(col_str);
 800094c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800094e:	f00b f8d4 	bl	800bafa <atoi>
 8000952:	4603      	mov	r3, r0
 8000954:	777b      	strb	r3, [r7, #29]
            uint16_t value = atoi(value_str);
 8000956:	6a38      	ldr	r0, [r7, #32]
 8000958:	f00b f8cf 	bl	800bafa <atoi>
 800095c:	4603      	mov	r3, r0
 800095e:	837b      	strh	r3, [r7, #26]

            if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d80c      	bhi.n	8000980 <process_command+0x1a4>
 8000966:	7fbb      	ldrb	r3, [r7, #30]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d809      	bhi.n	8000980 <process_command+0x1a4>
 800096c:	7f7b      	ldrb	r3, [r7, #29]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d806      	bhi.n	8000980 <process_command+0x1a4>
                set_keymap_value(layer, row, col, value);
 8000972:	8b7b      	ldrh	r3, [r7, #26]
 8000974:	7f7a      	ldrb	r2, [r7, #29]
 8000976:	7fb9      	ldrb	r1, [r7, #30]
 8000978:	7ff8      	ldrb	r0, [r7, #31]
 800097a:	f000 fa33 	bl	8000de4 <set_keymap_value>
        if (layer_str && row_str && col_str && value_str) {
 800097e:	e02a      	b.n	80009d6 <process_command+0x1fa>
            } else {
                cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <process_command+0x224>)
 8000982:	f7ff febf 	bl	8000704 <cdc_write_string_chunked>
        if (layer_str && row_str && col_str && value_str) {
 8000986:	e026      	b.n	80009d6 <process_command+0x1fa>
            }
        } else {
            cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000988:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <process_command+0x228>)
 800098a:	f7ff febb 	bl	8000704 <cdc_write_string_chunked>
 800098e:	e022      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "save") == 0) {
 8000990:	491d      	ldr	r1, [pc, #116]	@ (8000a08 <process_command+0x22c>)
 8000992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000994:	f7ff fc24 	bl	80001e0 <strcmp>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <process_command+0x1c8>
        save_config();
 800099e:	f000 fa5f 	bl	8000e60 <save_config>
 80009a2:	e018      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "load") == 0) {
 80009a4:	4919      	ldr	r1, [pc, #100]	@ (8000a0c <process_command+0x230>)
 80009a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009a8:	f7ff fc1a 	bl	80001e0 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <process_command+0x1dc>
        load_config();
 80009b2:	f000 fa67 	bl	8000e84 <load_config>
 80009b6:	e00e      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "reset") == 0) {
 80009b8:	4915      	ldr	r1, [pc, #84]	@ (8000a10 <process_command+0x234>)
 80009ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009bc:	f7ff fc10 	bl	80001e0 <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <process_command+0x1f0>
        reset_config();
 80009c6:	f000 fa69 	bl	8000e9c <reset_config>
 80009ca:	e004      	b.n	80009d6 <process_command+0x1fa>
    }
    else {
        cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <process_command+0x238>)
 80009ce:	f7ff fe99 	bl	8000704 <cdc_write_string_chunked>
 80009d2:	e000      	b.n	80009d6 <process_command+0x1fa>
    if (!token) return;
 80009d4:	bf00      	nop
    }
}
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800d048 	.word	0x0800d048
 80009e0:	0800d04c 	.word	0x0800d04c
 80009e4:	0800d054 	.word	0x0800d054
 80009e8:	0800d05c 	.word	0x0800d05c
 80009ec:	0800d060 	.word	0x0800d060
 80009f0:	0800d084 	.word	0x0800d084
 80009f4:	0800d08c 	.word	0x0800d08c
 80009f8:	0800d0a4 	.word	0x0800d0a4
 80009fc:	0800d0bc 	.word	0x0800d0bc
 8000a00:	0800d0c4 	.word	0x0800d0c4
 8000a04:	0800d0e4 	.word	0x0800d0e4
 8000a08:	0800d110 	.word	0x0800d110
 8000a0c:	0800d118 	.word	0x0800d118
 8000a10:	0800d120 	.word	0x0800d120
 8000a14:	0800d128 	.word	0x0800d128

08000a18 <print_help>:

static void print_help(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    cdc_write_string_chunked("Available commands:\r\n");
 8000a1c:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <print_help+0x50>)
 8000a1e:	f7ff fe71 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <print_help+0x54>)
 8000a24:	f7ff fe6e 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <print_help+0x58>)
 8000a2a:	f7ff fe6b 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <print_help+0x5c>)
 8000a30:	f7ff fe68 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <print_help+0x60>)
 8000a36:	f7ff fe65 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000a3a:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <print_help+0x64>)
 8000a3c:	f7ff fe62 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000a40:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <print_help+0x68>)
 8000a42:	f7ff fe5f 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000a46:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <print_help+0x6c>)
 8000a48:	f7ff fe5c 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000a4c:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <print_help+0x70>)
 8000a4e:	f7ff fe59 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("\r\nParameters:\r\n");
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <print_help+0x74>)
 8000a54:	f7ff fe56 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000a58:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <print_help+0x78>)
 8000a5a:	f7ff fe53 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <print_help+0x7c>)
 8000a60:	f7ff fe50 	bl	8000704 <cdc_write_string_chunked>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	0800d160 	.word	0x0800d160
 8000a6c:	0800d178 	.word	0x0800d178
 8000a70:	0800d1a8 	.word	0x0800d1a8
 8000a74:	0800d1e4 	.word	0x0800d1e4
 8000a78:	0800d220 	.word	0x0800d220
 8000a7c:	0800d254 	.word	0x0800d254
 8000a80:	0800d298 	.word	0x0800d298
 8000a84:	0800d2d4 	.word	0x0800d2d4
 8000a88:	0800d310 	.word	0x0800d310
 8000a8c:	0800d348 	.word	0x0800d348
 8000a90:	0800d358 	.word	0x0800d358
 8000a94:	0800d394 	.word	0x0800d394

08000a98 <print_config>:

static void print_config(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a0      	sub	sp, #128	@ 0x80
 8000a9c:	af00      	add	r7, sp, #0
    char buffer[128];

    cdc_write_string_chunked("Current Configuration:\r\n");
 8000a9e:	4826      	ldr	r0, [pc, #152]	@ (8000b38 <print_config+0xa0>)
 8000aa0:	f7ff fe30 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <print_config+0xa4>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	4a25      	ldr	r2, [pc, #148]	@ (8000b40 <print_config+0xa8>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	f00b f96f 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe25 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <print_config+0xa4>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	4638      	mov	r0, r7
 8000ac0:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <print_config+0xac>)
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	f00b f964 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe1a 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <print_config+0xa4>)
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <print_config+0xb0>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	f00b f959 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe0f 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <print_config+0xa4>)
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <print_config+0xb4>)
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	f00b f94e 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000af4:	463b      	mov	r3, r7
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe04 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <print_config+0xa4>)
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	4638      	mov	r0, r7
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <print_config+0xb8>)
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	f00b f943 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fdf9 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <print_config+0xa4>)
 8000b14:	88db      	ldrh	r3, [r3, #6]
 8000b16:	4638      	mov	r0, r7
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <print_config+0xbc>)
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	f00b f938 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdee 	bl	8000704 <cdc_write_string_chunked>

    cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <print_config+0xc0>)
 8000b2a:	f7ff fdeb 	bl	8000704 <cdc_write_string_chunked>
}
 8000b2e:	bf00      	nop
 8000b30:	3780      	adds	r7, #128	@ 0x80
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	0800d3d8 	.word	0x0800d3d8
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800d3f4 	.word	0x0800d3f4
 8000b44:	0800d410 	.word	0x0800d410
 8000b48:	0800d428 	.word	0x0800d428
 8000b4c:	0800d440 	.word	0x0800d440
 8000b50:	0800d460 	.word	0x0800d460
 8000b54:	0800d484 	.word	0x0800d484
 8000b58:	0800d498 	.word	0x0800d498

08000b5c <set_config_value>:

static void set_config_value(char* param, char* value) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    char buffer[64];
    uint32_t val = atoi(value);
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f00a ffc7 	bl	800bafa <atoi>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000b70:	4943      	ldr	r1, [pc, #268]	@ (8000c80 <set_config_value+0x124>)
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fb34 	bl	80001e0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <set_config_value+0x3c>
        keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b40      	ldr	r3, [pc, #256]	@ (8000c84 <set_config_value+0x128>)
 8000b84:	701a      	strb	r2, [r3, #0]
        snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <set_config_value+0x128>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f107 000c 	add.w	r0, r7, #12
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c88 <set_config_value+0x12c>)
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	f00b f8fd 	bl	800bd90 <sniprintf>
 8000b96:	e06a      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "trigger_offset") == 0) {
 8000b98:	493c      	ldr	r1, [pc, #240]	@ (8000c8c <set_config_value+0x130>)
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fb20 	bl	80001e0 <strcmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <set_config_value+0x64>
        keyboard_user_config.trigger_offset = (uint8_t)val;
 8000ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <set_config_value+0x128>)
 8000bac:	705a      	strb	r2, [r3, #1]
        snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000bae:	4b35      	ldr	r3, [pc, #212]	@ (8000c84 <set_config_value+0x128>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	f107 000c 	add.w	r0, r7, #12
 8000bb6:	4a36      	ldr	r2, [pc, #216]	@ (8000c90 <set_config_value+0x134>)
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	f00b f8e9 	bl	800bd90 <sniprintf>
 8000bbe:	e056      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "reset_threshold") == 0) {
 8000bc0:	4934      	ldr	r1, [pc, #208]	@ (8000c94 <set_config_value+0x138>)
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fb0c 	bl	80001e0 <strcmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <set_config_value+0x8c>
        keyboard_user_config.reset_threshold = (uint8_t)val;
 8000bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <set_config_value+0x128>)
 8000bd4:	709a      	strb	r2, [r3, #2]
        snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <set_config_value+0x128>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	f107 000c 	add.w	r0, r7, #12
 8000bde:	4a2e      	ldr	r2, [pc, #184]	@ (8000c98 <set_config_value+0x13c>)
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	f00b f8d5 	bl	800bd90 <sniprintf>
 8000be6:	e042      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000be8:	492c      	ldr	r1, [pc, #176]	@ (8000c9c <set_config_value+0x140>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff faf8 	bl	80001e0 <strcmp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <set_config_value+0xb4>
        keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <set_config_value+0x128>)
 8000bfc:	70da      	strb	r2, [r3, #3]
        snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <set_config_value+0x128>)
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	f107 000c 	add.w	r0, r7, #12
 8000c06:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <set_config_value+0x144>)
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	f00b f8c1 	bl	800bd90 <sniprintf>
 8000c0e:	e02e      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000c10:	4924      	ldr	r1, [pc, #144]	@ (8000ca4 <set_config_value+0x148>)
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fae4 	bl	80001e0 <strcmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <set_config_value+0xdc>
        keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <set_config_value+0x128>)
 8000c24:	711a      	strb	r2, [r3, #4]
        snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <set_config_value+0x128>)
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	f107 000c 	add.w	r0, r7, #12
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca8 <set_config_value+0x14c>)
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	f00b f8ad 	bl	800bd90 <sniprintf>
 8000c36:	e01a      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "tap_timeout") == 0) {
 8000c38:	491c      	ldr	r1, [pc, #112]	@ (8000cac <set_config_value+0x150>)
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fad0 	bl	80001e0 <strcmp>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10c      	bne.n	8000c60 <set_config_value+0x104>
        keyboard_user_config.tap_timeout = (uint16_t)val;
 8000c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <set_config_value+0x128>)
 8000c4c:	80da      	strh	r2, [r3, #6]
        snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <set_config_value+0x128>)
 8000c50:	88db      	ldrh	r3, [r3, #6]
 8000c52:	f107 000c 	add.w	r0, r7, #12
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <set_config_value+0x154>)
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	f00b f899 	bl	800bd90 <sniprintf>
 8000c5e:	e006      	b.n	8000c6e <set_config_value+0x112>
    }
    else {
        snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000c60:	f107 000c 	add.w	r0, r7, #12
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <set_config_value+0x158>)
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	f00b f891 	bl	800bd90 <sniprintf>
    }

    cdc_write_string_chunked(buffer);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd46 	bl	8000704 <cdc_write_string_chunked>
}
 8000c78:	bf00      	nop
 8000c7a:	3750      	adds	r7, #80	@ 0x50
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	0800d4c0 	.word	0x0800d4c0
 8000c84:	20000000 	.word	0x20000000
 8000c88:	0800d4d4 	.word	0x0800d4d4
 8000c8c:	0800d4f4 	.word	0x0800d4f4
 8000c90:	0800d504 	.word	0x0800d504
 8000c94:	0800d520 	.word	0x0800d520
 8000c98:	0800d530 	.word	0x0800d530
 8000c9c:	0800d54c 	.word	0x0800d54c
 8000ca0:	0800d564 	.word	0x0800d564
 8000ca4:	0800d588 	.word	0x0800d588
 8000ca8:	0800d5a4 	.word	0x0800d5a4
 8000cac:	0800d5cc 	.word	0x0800d5cc
 8000cb0:	0800d5d8 	.word	0x0800d5d8
 8000cb4:	0800d5f0 	.word	0x0800d5f0

08000cb8 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b0e6      	sub	sp, #408	@ 0x198
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000cc4:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000cc8:	701a      	strb	r2, [r3, #0]
    char buffer[128];

    snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000cca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000cce:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd0 <print_keymap+0x118>)
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	f00b f858 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ce0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd0d 	bl	8000704 <cdc_write_string_chunked>

    // Print keymap row by row with proper chunking
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8000cf0:	e064      	b.n	8000dbc <print_keymap+0x104>
        // Build the row string first
        char row_buffer[256]; // Large enough for a full row
        int pos = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	18d0      	adds	r0, r2, r3
 8000d02:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d06:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8000d0a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <print_keymap+0x11c>)
 8000d10:	f00b f83e 	bl	800bd90 <sniprintf>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8000d26:	e028      	b.n	8000d7a <print_keymap+0xc2>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8000d28:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	18d0      	adds	r0, r2, r3
 8000d32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d36:	f5c3 7480 	rsb	r4, r3, #256	@ 0x100
                          keyboard_user_config.keymaps[layer][row][col]);
 8000d3a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000d3e:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	f897 2197 	ldrb.w	r2, [r7, #407]	@ 0x197
 8000d48:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d4c:	4d22      	ldr	r5, [pc, #136]	@ (8000dd8 <print_keymap+0x120>)
 8000d4e:	0089      	lsls	r1, r1, #2
 8000d50:	440a      	add	r2, r1
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3304      	adds	r3, #4
 8000d58:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ddc <print_keymap+0x124>)
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f00b f816 	bl	800bd90 <sniprintf>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000d70:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d74:	3301      	adds	r3, #1
 8000d76:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8000d7a:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d9d2      	bls.n	8000d28 <print_keymap+0x70>
        }

        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 8000d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	18d0      	adds	r0, r2, r3
 8000d8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d90:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <print_keymap+0x128>)
 8000d96:	4619      	mov	r1, r3
 8000d98:	f00a fffa 	bl	800bd90 <sniprintf>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000da2:	4413      	add	r3, r2
 8000da4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        // Send the complete row
        cdc_write_string_chunked(row_buffer);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fca9 	bl	8000704 <cdc_write_string_chunked>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000db2:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000db6:	3301      	adds	r3, #1
 8000db8:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8000dbc:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d996      	bls.n	8000cf2 <print_keymap+0x3a>
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd0:	0800d608 	.word	0x0800d608
 8000dd4:	0800d620 	.word	0x0800d620
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	0800d62c 	.word	0x0800d62c
 8000de0:	0800d03c 	.word	0x0800d03c

08000de4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b097      	sub	sp, #92	@ 0x5c
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	4603      	mov	r3, r0
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	717b      	strb	r3, [r7, #5]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	807b      	strh	r3, [r7, #2]
    char buffer[64];

    keyboard_user_config.keymaps[layer][row][col] = value;
 8000e02:	79f9      	ldrb	r1, [r7, #7]
 8000e04:	79ba      	ldrb	r2, [r7, #6]
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <set_keymap_value+0x74>)
 8000e0a:	0089      	lsls	r1, r1, #2
 8000e0c:	440a      	add	r2, r1
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3304      	adds	r3, #4
 8000e14:	887a      	ldrh	r2, [r7, #2]
 8000e16:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000e1a:	2248      	movs	r2, #72	@ 0x48
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <set_keymap_value+0x74>)
 8000e20:	f001 f9ce 	bl	80021c0 <keyboard_write_config>
    keyboard_init_keys();
 8000e24:	f000 fd52 	bl	80018cc <keyboard_init_keys>

    snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8000e28:	79fc      	ldrb	r4, [r7, #7]
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	797a      	ldrb	r2, [r7, #5]
 8000e2e:	8879      	ldrh	r1, [r7, #2]
 8000e30:	f107 0008 	add.w	r0, r7, #8
 8000e34:	9102      	str	r1, [sp, #8]
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <set_keymap_value+0x78>)
 8000e3e:	2140      	movs	r1, #64	@ 0x40
 8000e40:	f00a ffa6 	bl	800bd90 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc5b 	bl	8000704 <cdc_write_string_chunked>
}
 8000e4e:	bf00      	nop
 8000e50:	374c      	adds	r7, #76	@ 0x4c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	0800d634 	.word	0x0800d634

08000e60 <save_config>:

static void save_config(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    // TODO: Implement flash save functionality
    // This would typically write the config struct to flash memory
	keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000e64:	2248      	movs	r2, #72	@ 0x48
 8000e66:	2100      	movs	r1, #0
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <save_config+0x1c>)
 8000e6a:	f001 f9a9 	bl	80021c0 <keyboard_write_config>
	keyboard_init_keys();
 8000e6e:	f000 fd2d 	bl	80018cc <keyboard_init_keys>
    cdc_write_string_chunked("Configuration saved to flash\r\n");
 8000e72:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <save_config+0x20>)
 8000e74:	f7ff fc46 	bl	8000704 <cdc_write_string_chunked>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	0800d654 	.word	0x0800d654

08000e84 <load_config>:

static void load_config(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    // TODO: Implement flash load functionality
    // This would typically read the config struct from flash memory
	keyboard_read_config();
 8000e88:	f001 f98a 	bl	80021a0 <keyboard_read_config>
    cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <load_config+0x14>)
 8000e8e:	f7ff fc39 	bl	8000704 <cdc_write_string_chunked>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800d674 	.word	0x0800d674

08000e9c <reset_config>:

static void reset_config(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    // Reset to default values
	keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 8000ea0:	2248      	movs	r2, #72	@ 0x48
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <reset_config+0x20>)
 8000ea6:	f001 f98b 	bl	80021c0 <keyboard_write_config>
	keyboard_read_config();
 8000eaa:	f001 f979 	bl	80021a0 <keyboard_read_config>
	keyboard_init_keys();
 8000eae:	f000 fd0d 	bl	80018cc <keyboard_init_keys>

    cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8000eb2:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <reset_config+0x24>)
 8000eb4:	f7ff fc26 	bl	8000704 <cdc_write_string_chunked>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0800d790 	.word	0x0800d790
 8000ec0:	0800d698 	.word	0x0800d698

08000ec4 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config* get_user_config(void) {
    return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    (void)itf;

    // Check if terminal is connecting (DTR asserted)
    if (dtr) {
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d015      	beq.n	8000f08 <tud_cdc_line_state_cb+0x44>
        // Give a small delay to ensure connection is stable
        for (volatile int i = 0; i < 10000; i++);
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e002      	b.n	8000ee8 <tud_cdc_line_state_cb+0x24>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	ddf7      	ble.n	8000ee2 <tud_cdc_line_state_cb+0x1e>

        cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <tud_cdc_line_state_cb+0x4c>)
 8000ef4:	f7ff fc06 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <tud_cdc_line_state_cb+0x50>)
 8000efa:	f7ff fc03 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_string_chunked("Ready> ");
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <tud_cdc_line_state_cb+0x54>)
 8000f00:	f7ff fc00 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_flush_wait();
 8000f04:	f7ff fc49 	bl	800079a <cdc_write_flush_wait>
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800d6bc 	.word	0x0800d6bc
 8000f14:	0800d6e8 	.word	0x0800d6e8
 8000f18:	0800d040 	.word	0x0800d040

08000f1c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    (void)itf;
    // Data handling is done in cdc_task()
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <hid_task>:
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;


void hid_task() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <hid_task+0x8c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <hid_task+0x16>
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <hid_task+0x90>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d035      	beq.n	8000fb6 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f005 fb3e 	bl	80065cc <tud_hid_n_ready>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d02f      	beq.n	8000fb6 <hid_task+0x82>
    if (tud_suspended()) {
 8000f56:	f006 fe55 	bl	8007c04 <tud_suspended>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <hid_task+0x32>
      tud_remote_wakeup();
 8000f60:	f006 fe64 	bl	8007c2c <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000f64:	e027      	b.n	8000fb6 <hid_task+0x82>
      if (should_send_consumer_report) {
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <hid_task+0x8c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00f      	beq.n	8000f8e <hid_task+0x5a>
        should_send_consumer_report = 0;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <hid_task+0x8c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <hid_task+0x94>)
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	7bf9      	ldrb	r1, [r7, #15]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	2000      	movs	r0, #0
 8000f88:	f005 fb62 	bl	8006650 <tud_hid_n_report>
 8000f8c:	e013      	b.n	8000fb6 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <hid_task+0x90>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00f      	beq.n	8000fb6 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <hid_task+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <hid_task+0x98>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	717a      	strb	r2, [r7, #5]
 8000fa4:	713b      	strb	r3, [r7, #4]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <hid_task+0x9c>)
 8000fa8:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000faa:	793a      	ldrb	r2, [r7, #4]
 8000fac:	7979      	ldrb	r1, [r7, #5]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f005 fbd3 	bl	800675c <tud_hid_n_keyboard_report>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000013d 	.word	0x2000013d
 8000fc4:	2000013e 	.word	0x2000013e
 8000fc8:	20000146 	.word	0x20000146
 8000fcc:	2000013f 	.word	0x2000013f
 8000fd0:	20000140 	.word	0x20000140

08000fd4 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	3305      	adds	r3, #5
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d038      	beq.n	8001066 <hid_press_key+0x92>
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	dc45      	bgt.n	8001084 <hid_press_key+0xb0>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <hid_press_key+0x52>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d141      	bne.n	8001084 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	440b      	add	r3, r1
 800100c:	88db      	ldrh	r3, [r3, #6]
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <hid_press_key+0xc0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <hid_press_key+0xc0>)
 800101c:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <hid_press_key+0xc4>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
    break;
 8001024:	e02f      	b.n	8001086 <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e018      	b.n	800105e <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <hid_press_key+0xc8>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d110      	bne.n	8001058 <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	440b      	add	r3, r1
 8001042:	88db      	ldrh	r3, [r3, #6]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b2d1      	uxtb	r1, r2
 800104a:	4a14      	ldr	r2, [pc, #80]	@ (800109c <hid_press_key+0xc8>)
 800104c:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <hid_press_key+0xc4>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
        break;
 8001054:	bf00      	nop
      }
    }
    break;
 8001056:	e016      	b.n	8001086 <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d9e3      	bls.n	800102c <hid_press_key+0x58>
    break;
 8001064:	e00f      	b.n	8001086 <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	440b      	add	r3, r1
 8001072:	88db      	ldrh	r3, [r3, #6]
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <hid_press_key+0xcc>)
 800107a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <hid_press_key+0xd0>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
    break;
 8001082:	e000      	b.n	8001086 <hid_press_key+0xb2>

  default:
    break;
 8001084:	bf00      	nop
  }
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000013f 	.word	0x2000013f
 8001098:	2000013e 	.word	0x2000013e
 800109c:	20000140 	.word	0x20000140
 80010a0:	20000146 	.word	0x20000146
 80010a4:	2000013d 	.word	0x2000013d

080010a8 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	440b      	add	r3, r1
 80010c0:	3305      	adds	r3, #5
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d03d      	beq.n	8001144 <hid_release_key+0x9c>
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	dc42      	bgt.n	8001152 <hid_release_key+0xaa>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d018      	beq.n	8001102 <hid_release_key+0x5a>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d13e      	bne.n	8001152 <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	440b      	add	r3, r1
 80010e0:	88db      	ldrh	r3, [r3, #6]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <hid_release_key+0xb8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <hid_release_key+0xb8>)
 80010f8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <hid_release_key+0xbc>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
    break;
 8001100:	e028      	b.n	8001154 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e019      	b.n	800113c <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <hid_release_key+0xc0>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	4618      	mov	r0, r3
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	440b      	add	r3, r1
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4298      	cmp	r0, r3
 8001122:	d108      	bne.n	8001136 <hid_release_key+0x8e>
        keycodes[i] = 0;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <hid_release_key+0xc0>)
 8001128:	2100      	movs	r1, #0
 800112a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <hid_release_key+0xbc>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
        break;
 8001132:	bf00      	nop
      }
    }
    break;
 8001134:	e00e      	b.n	8001154 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d9e2      	bls.n	8001108 <hid_release_key+0x60>
    break;
 8001142:	e007      	b.n	8001154 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <hid_release_key+0xc4>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <hid_release_key+0xc8>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
    break;
 8001150:	e000      	b.n	8001154 <hid_release_key+0xac>

  default:
    break;
 8001152:	bf00      	nop
  }
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	2000013f 	.word	0x2000013f
 8001164:	2000013e 	.word	0x2000013e
 8001168:	20000140 	.word	0x20000140
 800116c:	20000146 	.word	0x20000146
 8001170:	2000013d 	.word	0x2000013d

08001174 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <tud_hid_report_complete_cb>:


void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	460b      	mov	r3, r1
 80011ba:	71bb      	strb	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) bufsize;

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3be0      	subs	r3, #224	@ 0xe0
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d822      	bhi.n	8001248 <get_bitmask_for_modifier+0x58>
 8001202:	a201      	add	r2, pc, #4	@ (adr r2, 8001208 <get_bitmask_for_modifier+0x18>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001229 	.word	0x08001229
 800120c:	0800122d 	.word	0x0800122d
 8001210:	08001231 	.word	0x08001231
 8001214:	08001235 	.word	0x08001235
 8001218:	08001239 	.word	0x08001239
 800121c:	0800123d 	.word	0x0800123d
 8001220:	08001241 	.word	0x08001241
 8001224:	08001245 	.word	0x08001245
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001228:	2301      	movs	r3, #1
 800122a:	e00e      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 800122c:	2302      	movs	r3, #2
 800122e:	e00c      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001230:	2304      	movs	r3, #4
 8001232:	e00a      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001234:	2308      	movs	r3, #8
 8001236:	e008      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001238:	2310      	movs	r3, #16
 800123a:	e006      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 800123c:	2320      	movs	r3, #32
 800123e:	e004      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001240:	2340      	movs	r3, #64	@ 0x40
 8001242:	e002      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	e000      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001248:	2300      	movs	r3, #0
  }
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2bff      	cmp	r3, #255	@ 0xff
 8001266:	d904      	bls.n	8001272 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800126e:	b29b      	uxth	r3, r3
 8001270:	e000      	b.n	8001274 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001272:	2300      	movs	r3, #0
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4603      	mov	r3, r0
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	717b      	strb	r3, [r7, #5]
 800129a:	4613      	mov	r3, r2
 800129c:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 800129e:	79f9      	ldrb	r1, [r7, #7]
 80012a0:	79ba      	ldrb	r2, [r7, #6]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	4413      	add	r3, r2
 80012b6:	4a61      	ldr	r2, [pc, #388]	@ (800143c <init_key+0x1bc>)
 80012b8:	4413      	add	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2200      	movs	r2, #0
 80012c6:	711a      	strb	r2, [r3, #4]
  key->row = row;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	797a      	ldrb	r2, [r7, #5]
 80012cc:	705a      	strb	r2, [r3, #1]
  key->column = column;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	793a      	ldrb	r2, [r7, #4]
 80012d2:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2200      	movs	r2, #0
 80012d8:	72da      	strb	r2, [r3, #11]
 80012da:	2200      	movs	r2, #0
 80012dc:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	735a      	strb	r2, [r3, #13]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f042 0207 	orr.w	r2, r2, #7
 80012ee:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f062 020b 	orn	r2, r2, #11
 80012f8:	73da      	strb	r2, [r3, #15]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2203      	movs	r2, #3
 8001306:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001308:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <init_key+0x1c0>)
 800130a:	785a      	ldrb	r2, [r3, #1]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001312:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <init_key+0x1c0>)
 8001314:	785a      	ldrb	r2, [r3, #1]
 8001316:	4b4a      	ldr	r3, [pc, #296]	@ (8001440 <init_key+0x1c0>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001322:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <init_key+0x1c0>)
 8001324:	78da      	ldrb	r2, [r3, #3]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]
 8001338:	e078      	b.n	800142c <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 800133a:	7df9      	ldrb	r1, [r7, #23]
 800133c:	797a      	ldrb	r2, [r7, #5]
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	483f      	ldr	r0, [pc, #252]	@ (8001440 <init_key+0x1c0>)
 8001342:	0089      	lsls	r1, r1, #2
 8001344:	440a      	add	r2, r1
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d068      	beq.n	8001426 <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8001354:	7df9      	ldrb	r1, [r7, #23]
 8001356:	797a      	ldrb	r2, [r7, #5]
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	4839      	ldr	r0, [pc, #228]	@ (8001440 <init_key+0x1c0>)
 800135c:	0089      	lsls	r1, r1, #2
 800135e:	440a      	add	r2, r1
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4413      	add	r3, r2
 8001364:	3304      	adds	r3, #4
 8001366:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff74 	bl	8001258 <get_usage_consumer_control>
 8001370:	4603      	mov	r3, r0
 8001372:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d011      	beq.n	800139e <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 800137a:	7dfa      	ldrb	r2, [r7, #23]
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	440b      	add	r3, r1
 8001386:	3305      	adds	r3, #5
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 800138c:	7dfa      	ldrb	r2, [r7, #23]
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	440b      	add	r3, r1
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	80da      	strh	r2, [r3, #6]
 800139c:	e043      	b.n	8001426 <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 800139e:	7df9      	ldrb	r1, [r7, #23]
 80013a0:	797a      	ldrb	r2, [r7, #5]
 80013a2:	793b      	ldrb	r3, [r7, #4]
 80013a4:	4826      	ldr	r0, [pc, #152]	@ (8001440 <init_key+0x1c0>)
 80013a6:	0089      	lsls	r1, r1, #2
 80013a8:	440a      	add	r2, r1
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3304      	adds	r3, #4
 80013b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff1a 	bl	80011f0 <get_bitmask_for_modifier>
 80013bc:	4603      	mov	r3, r0
 80013be:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d013      	beq.n	80013ee <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 80013c6:	7dfa      	ldrb	r2, [r7, #23]
 80013c8:	6939      	ldr	r1, [r7, #16]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	3305      	adds	r3, #5
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 80013d8:	7dfa      	ldrb	r2, [r7, #23]
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	b298      	uxth	r0, r3
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	4602      	mov	r2, r0
 80013ea:	80da      	strh	r2, [r3, #6]
 80013ec:	e01b      	b.n	8001426 <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 80013ee:	7dfa      	ldrb	r2, [r7, #23]
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	3305      	adds	r3, #5
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8001400:	7df8      	ldrb	r0, [r7, #23]
 8001402:	7979      	ldrb	r1, [r7, #5]
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	7dfa      	ldrb	r2, [r7, #23]
 8001408:	4c0d      	ldr	r4, [pc, #52]	@ (8001440 <init_key+0x1c0>)
 800140a:	0080      	lsls	r0, r0, #2
 800140c:	4401      	add	r1, r0
 800140e:	0089      	lsls	r1, r1, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8001418:	6939      	ldr	r1, [r7, #16]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	440b      	add	r3, r1
 8001422:	4602      	mov	r2, r0
 8001424:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	3301      	adds	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d983      	bls.n	800133a <init_key+0xba>
        }
      }
    }
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	20000148 	.word	0x20000148
 8001440:	20000000 	.word	0x20000000

08001444 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 800144c:	4ba5      	ldr	r3, [pc, #660]	@ (80016e4 <update_key_state+0x2a0>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <update_key_state+0x20>
 8001454:	f000 ff3a 	bl	80022cc <keyboard_read_adc>
 8001458:	4603      	mov	r3, r0
 800145a:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800145e:	330f      	adds	r3, #15
 8001460:	b29b      	uxth	r3, r3
 8001462:	e002      	b.n	800146a <update_key_state+0x26>
 8001464:	f000 ff32 	bl	80022cc <keyboard_read_adc>
 8001468:	4603      	mov	r3, r0
 800146a:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b13      	cmp	r3, #19
 8001476:	d82f      	bhi.n	80014d8 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001478:	4b9b      	ldr	r3, [pc, #620]	@ (80016e8 <update_key_state+0x2a4>)
 800147a:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 800147c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800149c:	b29b      	uxth	r3, r3
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e101      	b.n	80016dc <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 80014d8:	893a      	ldrh	r2, [r7, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d929      	bls.n	800153a <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 80014e6:	4b81      	ldr	r3, [pc, #516]	@ (80016ec <update_key_state+0x2a8>)
 80014e8:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 80014ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001514:	edd7 7a07 	vldr	s15, [r7, #28]
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001536:	b29b      	uxth	r3, r3
 8001538:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d117      	bne.n	8001576 <update_key_state+0x132>
 8001546:	893b      	ldrh	r3, [r7, #8]
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b0a      	subs	r3, #10
 8001554:	429a      	cmp	r2, r3
 8001556:	db0e      	blt.n	8001576 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	2b0e      	cmp	r3, #14
 800155e:	d904      	bls.n	800156a <update_key_state+0x126>
      key->is_idle = 1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	711a      	strb	r2, [r3, #4]
      return 0;
 8001566:	2300      	movs	r3, #0
 8001568:	e0b8      	b.n	80016dc <update_key_state+0x298>
    }
    key->idle_counter++;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001576:	893b      	ldrh	r3, [r7, #8]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b0a      	subs	r3, #10
 8001584:	429a      	cmp	r2, r3
 8001586:	db05      	blt.n	8001594 <update_key_state+0x150>
    state.distance = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	775a      	strb	r2, [r3, #29]
 8001592:	e00f      	b.n	80015b4 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800159a:	b29a      	uxth	r2, r3
 800159c:	893b      	ldrh	r3, [r7, #8]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b0a      	subs	r3, #10
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	429a      	cmp	r2, r3
 80015c0:	d903      	bls.n	80015ca <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 80015c2:	897a      	ldrh	r2, [r7, #10]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b3c      	subs	r3, #60	@ 0x3c
 80015d8:	429a      	cmp	r2, r3
 80015da:	db04      	blt.n	80015e6 <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4613      	mov	r3, r2
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 80015f6:	b292      	uxth	r2, r2
 80015f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001600:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <update_key_state+0x2a8>)
 8001602:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001624:	edd7 7a06 	vldr	s15, [r7, #24]
 8001628:	ee06 3a90 	vmov	s13, r3
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 800163c:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001648:	edc7 7a00 	vstr	s15, [r7]
 800164c:	783b      	ldrb	r3, [r7, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001652:	7cba      	ldrb	r2, [r7, #18]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7edb      	ldrb	r3, [r3, #27]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	b25b      	sxtb	r3, r3
 800165e:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dd13      	ble.n	8001692 <update_key_state+0x24e>
 800166a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd0f      	ble.n	8001692 <update_key_state+0x24e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7f1b      	ldrb	r3, [r3, #28]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00b      	beq.n	8001692 <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f5b      	ldrb	r3, [r3, #29]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7eda      	ldrb	r2, [r3, #27]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8001690:	e017      	b.n	80016c2 <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da12      	bge.n	80016c2 <update_key_state+0x27e>
 800169c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0e      	bge.n	80016c2 <update_key_state+0x27e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7f5b      	ldrb	r3, [r3, #29]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d003      	beq.n	80016c2 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7eda      	ldrb	r2, [r3, #27]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f103 0211 	add.w	r2, r3, #17
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	cb03      	ldmia	r3!, {r0, r1}
 80016ce:	6010      	str	r0, [r2, #0]
 80016d0:	6051      	str	r1, [r2, #4]
 80016d2:	8819      	ldrh	r1, [r3, #0]
 80016d4:	789b      	ldrb	r3, [r3, #2]
 80016d6:	8111      	strh	r1, [r2, #8]
 80016d8:	7293      	strb	r3, [r2, #10]
  return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	3f19999a 	.word	0x3f19999a
 80016ec:	3f4ccccd 	.word	0x3f4ccccd

080016f0 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 80016f8:	f000 fdfe 	bl	80022f8 <keyboard_get_time>
 80016fc:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7d5a      	ldrb	r2, [r3, #21]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	bf8c      	ite	hi
 800170c:	2301      	movhi	r3, #1
 800170e:	2300      	movls	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7d5a      	ldrb	r2, [r3, #21]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7fdb      	ldrb	r3, [r3, #31]
 800171c:	429a      	cmp	r2, r3
 800171e:	bf34      	ite	cc
 8001720:	2301      	movcc	r3, #1
 8001722:	2300      	movcs	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7d5b      	ldrb	r3, [r3, #21]
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7f5b      	ldrb	r3, [r3, #29]
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a54      	ldr	r2, [pc, #336]	@ (80018a0 <update_key_actuation+0x1b0>)
 8001750:	7892      	ldrb	r2, [r2, #2]
 8001752:	4413      	add	r3, r2
 8001754:	4299      	cmp	r1, r3
 8001756:	bfcc      	ite	gt
 8001758:	2301      	movgt	r3, #1
 800175a:	2300      	movle	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7d5b      	ldrb	r3, [r3, #21]
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7f5b      	ldrb	r3, [r3, #29]
 800176a:	4619      	mov	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001772:	1acb      	subs	r3, r1, r3
 8001774:	429a      	cmp	r2, r3
 8001776:	bfb4      	ite	lt
 8001778:	2301      	movlt	r3, #1
 800177a:	2300      	movge	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f9b      	ldrb	r3, [r3, #30]
 8001784:	3b01      	subs	r3, #1
 8001786:	2b03      	cmp	r3, #3
 8001788:	d87f      	bhi.n	800188a <update_key_actuation+0x19a>
 800178a:	a201      	add	r2, pc, #4	@ (adr r2, 8001790 <update_key_actuation+0xa0>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	08001841 	.word	0x08001841
 8001794:	08001851 	.word	0x08001851
 8001798:	080017a1 	.word	0x080017a1
 800179c:	080017d9 	.word	0x080017d9

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d073      	beq.n	800188e <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	779a      	strb	r2, [r3, #30]
 80017b8:	e009      	b.n	80017ce <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <update_key_actuation+0x1b4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc03 	bl	8000fd4 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 80017d6:	e05a      	b.n	800188e <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 80017d8:	7c7b      	ldrb	r3, [r7, #17]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	779a      	strb	r2, [r3, #30]
      break;
 80017e4:	e058      	b.n	8001898 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <update_key_actuation+0x142>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7f1b      	ldrb	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d11e      	bne.n	8001832 <update_key_actuation+0x142>
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01b      	beq.n	8001832 <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 800180c:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <update_key_actuation+0x1b4>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e009      	b.n	8001828 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 800181a:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <update_key_actuation+0x1b4>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fbd6 	bl	8000fd4 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001830:	e02f      	b.n	8001892 <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 8001832:	7cbb      	ldrb	r3, [r7, #18]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02c      	beq.n	8001892 <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	779a      	strb	r2, [r3, #30]
    break;
 800183e:	e028      	b.n	8001892 <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8001846:	2101      	movs	r1, #1
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fc2d 	bl	80010a8 <hid_release_key>
    break;
 800184e:	e023      	b.n	8001898 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fc22 	bl	80010a8 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8001864:	e017      	b.n	8001896 <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8001866:	7c7b      	ldrb	r3, [r7, #17]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <update_key_actuation+0x1a6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7f1b      	ldrb	r3, [r3, #28]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d110      	bne.n	8001896 <update_key_actuation+0x1a6>
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc10 	bl	80010a8 <hid_release_key>
    break;
 8001888:	e005      	b.n	8001896 <update_key_actuation+0x1a6>

  default:
    break;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 8001896:	bf00      	nop
  }
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	200003bc 	.word	0x200003bc

080018a8 <update_key>:

void update_key(struct key *key) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fdc7 	bl	8001444 <update_key_state>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff17 	bl	80016f0 <update_key_actuation>
 80018c2:	e000      	b.n	80018c6 <update_key+0x1e>
    return;
 80018c4:	bf00      	nop
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <keyboard_init_keys>:

void keyboard_init_keys() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
//	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e027      	b.n	8001928 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	71bb      	strb	r3, [r7, #6]
 80018dc:	e01e      	b.n	800191c <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	4915      	ldr	r1, [pc, #84]	@ (8001938 <keyboard_init_keys+0x6c>)
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80018ec:	2bff      	cmp	r3, #255	@ 0xff
 80018ee:	d012      	beq.n	8001916 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4910      	ldr	r1, [pc, #64]	@ (8001938 <keyboard_init_keys+0x6c>)
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <keyboard_init_keys+0x6c>)
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	7859      	ldrb	r1, [r3, #1]
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	f7ff fcb5 	bl	8001280 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	3301      	adds	r3, #1
 800191a:	71bb      	strb	r3, [r7, #6]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d9dd      	bls.n	80018de <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3301      	adds	r3, #1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d9d4      	bls.n	80018d8 <keyboard_init_keys+0xc>
      }
    }
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800d7d8 	.word	0x0800d7d8

0800193c <keyboard_task>:

void keyboard_task() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8001942:	f000 fcd9 	bl	80022f8 <keyboard_get_time>
 8001946:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8001948:	4b64      	ldr	r3, [pc, #400]	@ (8001adc <keyboard_task+0x1a0>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e039      	b.n	80019c8 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fc74 	bl	8002244 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800195c:	2300      	movs	r3, #0
 800195e:	73bb      	strb	r3, [r7, #14]
 8001960:	e02c      	b.n	80019bc <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8001962:	7bb9      	ldrb	r1, [r7, #14]
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	485e      	ldr	r0, [pc, #376]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001976:	fb01 f202 	mul.w	r2, r1, r2
 800197a:	4413      	add	r3, r2
 800197c:	4403      	add	r3, r0
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fc84 	bl	8002294 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 800198c:	7bb9      	ldrb	r1, [r7, #14]
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800199e:	fb01 f202 	mul.w	r2, r1, r2
 80019a2:	4413      	add	r3, r2
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <keyboard_task+0x1a4>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff7d 	bl	80018a8 <update_key>

      keyboard_close_adc();
 80019ae:	f000 fc99 	bl	80022e4 <keyboard_close_adc>
 80019b2:	e000      	b.n	80019b6 <keyboard_task+0x7a>
        continue;
 80019b4:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73bb      	strb	r3, [r7, #14]
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0cf      	beq.n	8001962 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d9c2      	bls.n	8001954 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	737b      	strb	r3, [r7, #13]
 80019d2:	e074      	b.n	8001abe <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	733b      	strb	r3, [r7, #12]
 80019d8:	e06b      	b.n	8001ab2 <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80019da:	7b39      	ldrb	r1, [r7, #12]
 80019dc:	7b7a      	ldrb	r2, [r7, #13]
 80019de:	4840      	ldr	r0, [pc, #256]	@ (8001ae0 <keyboard_task+0x1a4>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
 80019f2:	4413      	add	r3, r2
 80019f4:	4403      	add	r3, r0
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d056      	beq.n	8001aaa <keyboard_task+0x16e>
 80019fc:	7b39      	ldrb	r1, [r7, #12]
 80019fe:	7b7a      	ldrb	r2, [r7, #13]
 8001a00:	4837      	ldr	r0, [pc, #220]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001a10:	fb01 f202 	mul.w	r2, r1, r2
 8001a14:	4413      	add	r3, r2
 8001a16:	4403      	add	r3, r0
 8001a18:	331e      	adds	r3, #30
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d144      	bne.n	8001aaa <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001a20:	7b39      	ldrb	r1, [r7, #12]
 8001a22:	7b7a      	ldrb	r2, [r7, #13]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001a32:	fb01 f202 	mul.w	r2, r1, r2
 8001a36:	4413      	add	r3, r2
 8001a38:	4a29      	ldr	r2, [pc, #164]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7d5a      	ldrb	r2, [r3, #21]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7fdb      	ldrb	r3, [r3, #31]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	bf34      	ite	cc
 8001a4a:	2301      	movcc	r3, #1
 8001a4c:	2300      	movcs	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8001a52:	f000 fc51 	bl	80022f8 <keyboard_get_time>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <keyboard_task+0x1a8>)
 8001a62:	88d2      	ldrh	r2, [r2, #6]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bf94      	ite	ls
 8001a68:	2301      	movls	r3, #1
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <keyboard_task+0x150>
 8001a76:	78bb      	ldrb	r3, [r7, #2]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 8001a82:	2101      	movs	r1, #1
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff faa5 	bl	8000fd4 <hid_press_key>
 8001a8a:	e00f      	b.n	8001aac <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 8001a8c:	78bb      	ldrb	r3, [r7, #2]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <keyboard_task+0x15e>
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <keyboard_task+0x1a0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fa96 	bl	8000fd4 <hid_press_key>
 8001aa8:	e000      	b.n	8001aac <keyboard_task+0x170>
        continue;
 8001aaa:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	733b      	strb	r3, [r7, #12]
 8001ab2:	7b3b      	ldrb	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d090      	beq.n	80019da <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001ab8:	7b7b      	ldrb	r3, [r7, #13]
 8001aba:	3301      	adds	r3, #1
 8001abc:	737b      	strb	r3, [r7, #13]
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d987      	bls.n	80019d4 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8001ac4:	f000 fc18 	bl	80022f8 <keyboard_get_time>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <keyboard_task+0x1ac>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200003bc 	.word	0x200003bc
 8001ae0:	20000148 	.word	0x20000148
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	200003b8 	.word	0x200003b8

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0a0      	sub	sp, #128	@ 0x80
 8001af0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f001 f9c9 	bl	8002e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f9eb 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 faff 	bl	80020fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001afe:	f000 fa4f 	bl	8001fa0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b02:	f000 facd 	bl	80020a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001b06:	f000 fa9d 	bl	8002044 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001b0a:	4b98      	ldr	r3, [pc, #608]	@ (8001d6c <main+0x280>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b10:	4b96      	ldr	r3, [pc, #600]	@ (8001d6c <main+0x280>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8001b16:	f7ff fed9 	bl	80018cc <keyboard_init_keys>
  ssd1306_Init();
 8001b1a:	f000 fc31 	bl	8002380 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 8001b1e:	4b94      	ldr	r3, [pc, #592]	@ (8001d70 <main+0x284>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8001b24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f009 fe3e 	bl	800b7ac <tusb_rhport_init>
  tud_task_ext(UINT32_MAX, false);
 8001b30:	2100      	movs	r1, #0
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f006 f9eb 	bl	8007f10 <tud_task_ext>
}
 8001b3a:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
	tud_task();
    keyboard_task();
 8001b3c:	f7ff fefe 	bl	800193c <keyboard_task>
        hid_task();
 8001b40:	f7ff f9f8 	bl	8000f34 <hid_task>
    cdc_task();
 8001b44:	f7fe fd4a 	bl	80005dc <cdc_task>

    ssd1306_Fill(White);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 fc83 	bl	8002454 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 feb7 	bl	80028c4 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	233f      	movs	r3, #63	@ 0x3f
 8001b5c:	227f      	movs	r2, #127	@ 0x7f
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 fe47 	bl	80027f4 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	227f      	movs	r2, #127	@ 0x7f
 8001b6e:	2120      	movs	r1, #32
 8001b70:	2026      	movs	r0, #38	@ 0x26
 8001b72:	f000 fdd3 	bl	800271c <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	233f      	movs	r3, #63	@ 0x3f
 8001b7c:	2226      	movs	r2, #38	@ 0x26
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2026      	movs	r0, #38	@ 0x26
 8001b82:	f000 fdcb 	bl	800271c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8001b86:	2301      	movs	r3, #1
 8001b88:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b8a:	e013      	b.n	8001bb4 <main+0xc8>
        int x = MOD_WIDTH + i * KEY_WIDTH;
 8001b8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3326      	adds	r3, #38	@ 0x26
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
        ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9c:	b2d8      	uxtb	r0, r3
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	233f      	movs	r3, #63	@ 0x3f
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f000 fdb7 	bl	800271c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8001bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	dde8      	ble.n	8001b8c <main+0xa0>
    }

    int mod_y = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	673b      	str	r3, [r7, #112]	@ 0x70
    const int mod_line_height = 10;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	65bb      	str	r3, [r7, #88]	@ 0x58

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8001bc2:	2322      	movs	r3, #34	@ 0x22
 8001bc4:	657b      	str	r3, [r7, #84]	@ 0x54
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8001bc6:	2336      	movs	r3, #54	@ 0x36
 8001bc8:	653b      	str	r3, [r7, #80]	@ 0x50

    int label_row_top = 2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int percent_row_top = label_row_bot - 11;
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	3b0b      	subs	r3, #11
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48

    char keycodes[6][4] = {0};
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bf8:	e0b1      	b.n	8001d5e <main+0x272>
        struct key* k = &keyboard_keys[0][amux];
 8001bfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	4a5b      	ldr	r2, [pc, #364]	@ (8001d74 <main+0x288>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if (k->state.distance_8bits >= 8 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8001c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0e:	7d5b      	ldrb	r3, [r3, #21]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d956      	bls.n	8001cc2 <main+0x1d6>
 8001c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c16:	795b      	ldrb	r3, [r3, #5]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d152      	bne.n	8001cc2 <main+0x1d6>
            uint8_t bitmask = k->layers[_BASE_LAYER].value;
 8001c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1e:	88db      	ldrh	r3, [r3, #6]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const char* label = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	667b      	str	r3, [r7, #100]	@ 0x64

            if (bitmask == 0b00000001) label = "LCtrl";
 8001c2a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <main+0x14c>
 8001c32:	4b51      	ldr	r3, [pc, #324]	@ (8001d78 <main+0x28c>)
 8001c34:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c36:	e02f      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b00000010) label = "LShift";
 8001c38:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d102      	bne.n	8001c46 <main+0x15a>
 8001c40:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <main+0x290>)
 8001c42:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c44:	e028      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b00000100) label = "LAlt";
 8001c46:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d102      	bne.n	8001c54 <main+0x168>
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d80 <main+0x294>)
 8001c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c52:	e021      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b00001000) label = "LGUI";
 8001c54:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d102      	bne.n	8001c62 <main+0x176>
 8001c5c:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <main+0x298>)
 8001c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c60:	e01a      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b00010000) label = "RCtrl";
 8001c62:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d102      	bne.n	8001c70 <main+0x184>
 8001c6a:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <main+0x29c>)
 8001c6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c6e:	e013      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b00100000) label = "RShift";
 8001c70:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d102      	bne.n	8001c7e <main+0x192>
 8001c78:	4b44      	ldr	r3, [pc, #272]	@ (8001d8c <main+0x2a0>)
 8001c7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c7c:	e00c      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b01000000) label = "RAlt";
 8001c7e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c82:	2b40      	cmp	r3, #64	@ 0x40
 8001c84:	d102      	bne.n	8001c8c <main+0x1a0>
 8001c86:	4b42      	ldr	r3, [pc, #264]	@ (8001d90 <main+0x2a4>)
 8001c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c8a:	e005      	b.n	8001c98 <main+0x1ac>
            else if (bitmask == 0b10000000) label = "RGUI";
 8001c8c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c90:	2b80      	cmp	r3, #128	@ 0x80
 8001c92:	d101      	bne.n	8001c98 <main+0x1ac>
 8001c94:	4b3f      	ldr	r3, [pc, #252]	@ (8001d94 <main+0x2a8>)
 8001c96:	667b      	str	r3, [r7, #100]	@ 0x64

            if (label) {
 8001c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d05b      	beq.n	8001d56 <main+0x26a>
                ssd1306_SetCursor(2, mod_y);
 8001c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f000 fd21 	bl	80026ec <ssd1306_SetCursor>
                ssd1306_WriteString((char*)label, Font_6x8, Black);
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <main+0x2ac>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	9200      	str	r2, [sp, #0]
 8001cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001cb4:	f000 fcf4 	bl	80026a0 <ssd1306_WriteString>
                mod_y += mod_line_height;
 8001cb8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cbc:	4413      	add	r3, r2
 8001cbe:	673b      	str	r3, [r7, #112]	@ 0x70
        if (k->state.distance_8bits >= 8 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8001cc0:	e049      	b.n	8001d56 <main+0x26a>
            }
        }

        else if (k->state.distance_8bits >= 8 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc4:	7d5b      	ldrb	r3, [r3, #21]
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d946      	bls.n	8001d58 <main+0x26c>
 8001cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	dc43      	bgt.n	8001d58 <main+0x26c>
 8001cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd2:	795b      	ldrb	r3, [r3, #5]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d13f      	bne.n	8001d58 <main+0x26c>
        	keycodes[tracker][0] = '0';
 8001cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3378      	adds	r3, #120	@ 0x78
 8001cde:	443b      	add	r3, r7
 8001ce0:	2230      	movs	r2, #48	@ 0x30
 8001ce2:	f803 2c60 	strb.w	r2, [r3, #-96]
            keycodes[tracker][1] = 'x';
 8001ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3378      	adds	r3, #120	@ 0x78
 8001cec:	443b      	add	r3, r7
 8001cee:	2278      	movs	r2, #120	@ 0x78
 8001cf0:	f803 2c5f 	strb.w	r2, [r3, #-95]
           	keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 8001cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	dc04      	bgt.n	8001d04 <main+0x218>
 8001cfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3330      	adds	r3, #48	@ 0x30
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	e003      	b.n	8001d0c <main+0x220>
 8001d04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3337      	adds	r3, #55	@ 0x37
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3378      	adds	r3, #120	@ 0x78
 8001d12:	443b      	add	r3, r7
 8001d14:	f803 2c5e 	strb.w	r2, [r3, #-94]
            keycodes[tracker][3] = '\0';
 8001d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	3378      	adds	r3, #120	@ 0x78
 8001d1e:	443b      	add	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	f803 2c5d 	strb.w	r2, [r3, #-93]

            key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	7d5b      	ldrb	r3, [r3, #21]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2364      	movs	r3, #100	@ 0x64
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4a1a      	ldr	r2, [pc, #104]	@ (8001d9c <main+0x2b0>)
 8001d34:	fb82 1203 	smull	r1, r2, r2, r3
 8001d38:	441a      	add	r2, r3
 8001d3a:	11d2      	asrs	r2, r2, #7
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	b2d9      	uxtb	r1, r3
 8001d42:	f107 0210 	add.w	r2, r7, #16
 8001d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d48:	4413      	add	r3, r2
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
            tracker++;
 8001d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d50:	3301      	adds	r3, #1
 8001d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d54:	e000      	b.n	8001d58 <main+0x26c>
        if (k->state.distance_8bits >= 8 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8001d56:	bf00      	nop
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8001d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	f77f af4a 	ble.w	8001bfa <main+0x10e>
        }
    }

    for (int i = 1; i <= 3; i++) {
 8001d66:	2301      	movs	r3, #1
 8001d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d6a:	e05e      	b.n	8001e2a <main+0x33e>
 8001d6c:	20000940 	.word	0x20000940
 8001d70:	0800d758 	.word	0x0800d758
 8001d74:	20000148 	.word	0x20000148
 8001d78:	0800d710 	.word	0x0800d710
 8001d7c:	0800d718 	.word	0x0800d718
 8001d80:	0800d720 	.word	0x0800d720
 8001d84:	0800d728 	.word	0x0800d728
 8001d88:	0800d730 	.word	0x0800d730
 8001d8c:	0800d738 	.word	0x0800d738
 8001d90:	0800d740 	.word	0x0800d740
 8001d94:	0800d748 	.word	0x0800d748
 8001d98:	0800ddf8 	.word	0x0800ddf8
 8001d9c:	80808081 	.word	0x80808081
    	if (keycodes[i - 1][0] != '\0') {
 8001da0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001da2:	3b01      	subs	r3, #1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3378      	adds	r3, #120	@ 0x78
 8001da8:	443b      	add	r3, r7
 8001daa:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d038      	beq.n	8001e24 <main+0x338>
    		int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8001db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	332a      	adds	r3, #42	@ 0x2a
 8001dc0:	643b      	str	r3, [r7, #64]	@ 0x40
    		ssd1306_SetCursor(x, label_row_top);
 8001dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fc8d 	bl	80026ec <ssd1306_SetCursor>
         	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 8001dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	f107 0218 	add.w	r2, r7, #24
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d0      	adds	r0, r2, r3
 8001dde:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <main+0x3dc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	9200      	str	r2, [sp, #0]
 8001de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de6:	f000 fc5b 	bl	80026a0 <ssd1306_WriteString>

    		char buf[6];
         	sprintf(buf, "%d%%", key_percents[i - 1]);
 8001dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dec:	3b01      	subs	r3, #1
 8001dee:	3378      	adds	r3, #120	@ 0x78
 8001df0:	443b      	add	r3, r7
 8001df2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	4933      	ldr	r1, [pc, #204]	@ (8001ecc <main+0x3e0>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f009 fffc 	bl	800bdfc <siprintf>
         	ssd1306_SetCursor(x, percent_row_top);
 8001e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fc6c 	bl	80026ec <ssd1306_SetCursor>
    		ssd1306_WriteString(buf, Font_6x8, Black);
 8001e14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <main+0x3dc>)
 8001e16:	f107 0008 	add.w	r0, r7, #8
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	9200      	str	r2, [sp, #0]
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	f000 fc3e 	bl	80026a0 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8001e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e26:	3301      	adds	r3, #1
 8001e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	ddb7      	ble.n	8001da0 <main+0x2b4>
    	}
    }

    for (int i = 4; i <= 6; i++) {
 8001e30:	2304      	movs	r3, #4
 8001e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e34:	e042      	b.n	8001ebc <main+0x3d0>
    	if (keycodes[i - 1][0] != '\0') {
 8001e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3378      	adds	r3, #120	@ 0x78
 8001e3e:	443b      	add	r3, r7
 8001e40:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d036      	beq.n	8001eb6 <main+0x3ca>
        	int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8001e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4a:	1f1a      	subs	r2, r3, #4
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	332a      	adds	r3, #42	@ 0x2a
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
            ssd1306_SetCursor(x, label_row_bot);
 8001e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fc42 	bl	80026ec <ssd1306_SetCursor>
           	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 8001e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f107 0218 	add.w	r2, r7, #24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	18d0      	adds	r0, r2, r3
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <main+0x3dc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7c:	f000 fc10 	bl	80026a0 <ssd1306_WriteString>

        	char buf[6];
           	sprintf(buf, "%d%%", key_percents[i - 1]);
 8001e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e82:	3b01      	subs	r3, #1
 8001e84:	3378      	adds	r3, #120	@ 0x78
 8001e86:	443b      	add	r3, r7
 8001e88:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	463b      	mov	r3, r7
 8001e90:	490e      	ldr	r1, [pc, #56]	@ (8001ecc <main+0x3e0>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f009 ffb2 	bl	800bdfc <siprintf>
           	ssd1306_SetCursor(x, percent_row_bot);
 8001e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fc22 	bl	80026ec <ssd1306_SetCursor>
           	ssd1306_WriteString(buf, Font_6x8, Black);
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <main+0x3dc>)
 8001eaa:	4638      	mov	r0, r7
 8001eac:	2200      	movs	r2, #0
 8001eae:	9200      	str	r2, [sp, #0]
 8001eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb2:	f000 fbf5 	bl	80026a0 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb8:	3301      	adds	r3, #1
 8001eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	ddb9      	ble.n	8001e36 <main+0x34a>
    	}
    }

    ssd1306_UpdateScreen();
 8001ec2:	f000 fadf 	bl	8002484 <ssd1306_UpdateScreen>
  while (1) {
 8001ec6:	e633      	b.n	8001b30 <main+0x44>
 8001ec8:	0800ddf8 	.word	0x0800ddf8
 8001ecc:	0800d750 	.word	0x0800d750

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	@ 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2230      	movs	r2, #48	@ 0x30
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f009 fff1 	bl	800bec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <SystemClock_Config+0xc8>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <SystemClock_Config+0xc8>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <SystemClock_Config+0xc8>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <SystemClock_Config+0xcc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <SystemClock_Config+0xcc>)
 8001f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <SystemClock_Config+0xcc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001f40:	230d      	movs	r3, #13
 8001f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f44:	23a8      	movs	r3, #168	@ 0xa8
 8001f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fe99 	bl	8004c8c <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f60:	f000 f9d1 	bl	8002306 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f8fb 	bl	800517c <HAL_RCC_ClockConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f8c:	f000 f9bb 	bl	8002306 <Error_Handler>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3750      	adds	r7, #80	@ 0x50
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fb4:	4a21      	ldr	r2, [pc, #132]	@ (800203c <MX_ADC1_Init+0x9c>)
 8001fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fe2:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <MX_ADC1_Init+0xa0>)
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <MX_ADC1_Init+0x98>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002000:	480d      	ldr	r0, [pc, #52]	@ (8002038 <MX_ADC1_Init+0x98>)
 8002002:	f000 ffd7 	bl	8002fb4 <HAL_ADC_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800200c:	f000 f97b 	bl	8002306 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002010:	2309      	movs	r3, #9
 8002012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002014:	2301      	movs	r3, #1
 8002016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_ADC1_Init+0x98>)
 8002022:	f001 f98b 	bl	800333c <HAL_ADC_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800202c:	f000 f96b 	bl	8002306 <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003c0 	.word	0x200003c0
 800203c:	40012000 	.word	0x40012000
 8002040:	0f000001 	.word	0x0f000001

08002044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_I2C1_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <MX_I2C1_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	@ (800209c <MX_I2C1_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_I2C1_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_I2C1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_I2C1_Init+0x50>)
 8002082:	f002 f847 	bl	8004114 <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800208c:	f000 f93b 	bl	8002306 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000408 	.word	0x20000408
 8002098:	40005400 	.word	0x40005400
 800209c:	000186a0 	.word	0x000186a0

080020a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020a4:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80020aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ae:	2204      	movs	r2, #4
 80020b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d8:	2200      	movs	r2, #0
 80020da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020de:	2200      	movs	r2, #0
 80020e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e4:	f002 fcc3 	bl	8004a6e <HAL_PCD_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80020ee:	f000 f90a 	bl	8002306 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000045c 	.word	0x2000045c

080020fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a1f      	ldr	r2, [pc, #124]	@ (8002198 <MX_GPIO_Init+0x9c>)
 800211c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <MX_GPIO_Init+0x9c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_GPIO_Init+0x9c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <MX_GPIO_Init+0xa0>)
 800216e:	f001 ffb7 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002172:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4619      	mov	r1, r3
 800218a:	4804      	ldr	r0, [pc, #16]	@ (800219c <MX_GPIO_Init+0xa0>)
 800218c:	f001 fe24 	bl	8003dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002190:	bf00      	nop
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40020400 	.word	0x40020400

080021a0 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <keyboard_read_config+0x18>)
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <keyboard_read_config+0x1c>)
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	2348      	movs	r3, #72	@ 0x48
 80021ae:	461a      	mov	r2, r3
 80021b0:	f009 ff61 	bl	800c076 <memcpy>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000000 	.word	0x20000000
 80021bc:	08040000 	.word	0x08040000

080021c0 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	2b47      	cmp	r3, #71	@ 0x47
 80021d4:	d901      	bls.n	80021da <keyboard_write_config+0x1a>
    return 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e02d      	b.n	8002236 <keyboard_write_config+0x76>
  }

  HAL_FLASH_Unlock();
 80021da:	f001 fc43 	bl	8003a64 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <keyboard_write_config+0x80>)
 80021e0:	22b3      	movs	r2, #179	@ 0xb3
 80021e2:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 80021e4:	2102      	movs	r1, #2
 80021e6:	2006      	movs	r0, #6
 80021e8:	f001 fdae 	bl	8003d48 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	81fb      	strh	r3, [r7, #14]
 80021f0:	e01a      	b.n	8002228 <keyboard_write_config+0x68>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80021f8:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80021fc:	4619      	mov	r1, r3
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	461c      	mov	r4, r3
 800220c:	4615      	mov	r5, r2
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	2000      	movs	r0, #0
 8002214:	f001 fbd2 	bl	80039bc <HAL_FLASH_Program>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <keyboard_write_config+0x62>
      HAL_FLASH_Lock();
 800221e:	f001 fc43 	bl	8003aa8 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	3301      	adds	r3, #1
 8002226:	81fb      	strh	r3, [r7, #14]
 8002228:	89fa      	ldrh	r2, [r7, #14]
 800222a:	883b      	ldrh	r3, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3e0      	bcc.n	80021f2 <keyboard_write_config+0x32>
    };
  }
  HAL_FLASH_Lock();
 8002230:	f001 fc3a 	bl	8003aa8 <HAL_FLASH_Lock>
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e013      	b.n	800227c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <keyboard_select_amux+0x48>)
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	b299      	uxth	r1, r3
 800225e:	79fa      	ldrb	r2, [r7, #7]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	fa42 f303 	asr.w	r3, r2, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4807      	ldr	r0, [pc, #28]	@ (8002290 <keyboard_select_amux+0x4c>)
 8002272:	f001 ff35 	bl	80040e0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d9e8      	bls.n	8002254 <keyboard_select_amux+0x10>
  }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800d7f8 	.word	0x0800d7f8
 8002290:	40020400 	.word	0x40020400

08002294 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 800229e:	2209      	movs	r2, #9
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <keyboard_select_adc+0x30>)
 80022a2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80022a4:	4907      	ldr	r1, [pc, #28]	@ (80022c4 <keyboard_select_adc+0x30>)
 80022a6:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <keyboard_select_adc+0x34>)
 80022a8:	f001 f848 	bl	800333c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <keyboard_select_adc+0x34>)
 80022ae:	f000 fec5 	bl	800303c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80022b2:	2101      	movs	r1, #1
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <keyboard_select_adc+0x34>)
 80022b6:	f000 ffa8 	bl	800320a <HAL_ADC_PollForConversion>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000940 	.word	0x20000940
 80022c8:	200003c0 	.word	0x200003c0

080022cc <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <keyboard_read_adc+0x14>)
 80022d2:	f001 f825 	bl	8003320 <HAL_ADC_GetValue>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29b      	uxth	r3, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003c0 	.word	0x200003c0

080022e4 <keyboard_close_adc>:

void keyboard_close_adc() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <keyboard_close_adc+0x10>)
 80022ea:	f000 ff5b 	bl	80031a4 <HAL_ADC_Stop>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200003c0 	.word	0x200003c0

080022f8 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80022fc:	f000 fe2a 	bl	8002f54 <HAL_GetTick>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}

08002306 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230a:	b672      	cpsid	i
}
 800230c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800230e:	bf00      	nop
 8002310:	e7fd      	b.n	800230e <Error_Handler+0x8>

08002312 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af04      	add	r7, sp, #16
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, OLED_TIMEOUT_MS);
 800232a:	2314      	movs	r3, #20
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2301      	movs	r3, #1
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	2200      	movs	r2, #0
 800233a:	2178      	movs	r1, #120	@ 0x78
 800233c:	4803      	ldr	r0, [pc, #12]	@ (800234c <ssd1306_WriteCommand+0x2c>)
 800233e:	f002 f82d 	bl	800439c <HAL_I2C_Mem_Write>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000408 	.word	0x20000408

08002350 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af04      	add	r7, sp, #16
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, OLED_TIMEOUT_MS);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	2214      	movs	r2, #20
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2240      	movs	r2, #64	@ 0x40
 800236c:	2178      	movs	r1, #120	@ 0x78
 800236e:	4803      	ldr	r0, [pc, #12]	@ (800237c <ssd1306_WriteData+0x2c>)
 8002370:	f002 f814 	bl	800439c <HAL_I2C_Mem_Write>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000408 	.word	0x20000408

08002380 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002384:	f7ff ffc5 	bl	8002312 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002388:	2064      	movs	r0, #100	@ 0x64
 800238a:	f000 fdef 	bl	8002f6c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800238e:	2000      	movs	r0, #0
 8002390:	f000 fa7a 	bl	8002888 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002394:	2020      	movs	r0, #32
 8002396:	f7ff ffc3 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff ffc0 	bl	8002320 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023a0:	20b0      	movs	r0, #176	@ 0xb0
 80023a2:	f7ff ffbd 	bl	8002320 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80023a6:	20c0      	movs	r0, #192	@ 0xc0
 80023a8:	f7ff ffba 	bl	8002320 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff ffb7 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80023b2:	2010      	movs	r0, #16
 80023b4:	f7ff ffb4 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80023b8:	2040      	movs	r0, #64	@ 0x40
 80023ba:	f7ff ffb1 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023be:	20ff      	movs	r0, #255	@ 0xff
 80023c0:	f000 fa4f 	bl	8002862 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80023c4:	20a0      	movs	r0, #160	@ 0xa0
 80023c6:	f7ff ffab 	bl	8002320 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 80023ca:	20a7      	movs	r0, #167	@ 0xa7
 80023cc:	f7ff ffa8 	bl	8002320 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023d0:	20a8      	movs	r0, #168	@ 0xa8
 80023d2:	f7ff ffa5 	bl	8002320 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80023d6:	203f      	movs	r0, #63	@ 0x3f
 80023d8:	f7ff ffa2 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023dc:	20a4      	movs	r0, #164	@ 0xa4
 80023de:	f7ff ff9f 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023e2:	20d3      	movs	r0, #211	@ 0xd3
 80023e4:	f7ff ff9c 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff99 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023ee:	20d5      	movs	r0, #213	@ 0xd5
 80023f0:	f7ff ff96 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023f4:	20f0      	movs	r0, #240	@ 0xf0
 80023f6:	f7ff ff93 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023fa:	20d9      	movs	r0, #217	@ 0xd9
 80023fc:	f7ff ff90 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002400:	2022      	movs	r0, #34	@ 0x22
 8002402:	f7ff ff8d 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002406:	20da      	movs	r0, #218	@ 0xda
 8002408:	f7ff ff8a 	bl	8002320 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800240c:	2012      	movs	r0, #18
 800240e:	f7ff ff87 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002412:	20db      	movs	r0, #219	@ 0xdb
 8002414:	f7ff ff84 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002418:	2020      	movs	r0, #32
 800241a:	f7ff ff81 	bl	8002320 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800241e:	208d      	movs	r0, #141	@ 0x8d
 8002420:	f7ff ff7e 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002424:	2014      	movs	r0, #20
 8002426:	f7ff ff7b 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800242a:	2001      	movs	r0, #1
 800242c:	f000 fa2c 	bl	8002888 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f80f 	bl	8002454 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002436:	f000 f825 	bl	8002484 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <ssd1306_Init+0xd0>)
 800243c:	2200      	movs	r2, #0
 800243e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <ssd1306_Init+0xd0>)
 8002442:	2200      	movs	r2, #0
 8002444:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002446:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <ssd1306_Init+0xd0>)
 8002448:	2201      	movs	r2, #1
 800244a:	711a      	strb	r2, [r3, #4]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000d50 	.word	0x20000d50

08002454 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <ssd1306_Fill+0x14>
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <ssd1306_Fill+0x16>
 8002468:	23ff      	movs	r3, #255	@ 0xff
 800246a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800246e:	4619      	mov	r1, r3
 8002470:	4803      	ldr	r0, [pc, #12]	@ (8002480 <ssd1306_Fill+0x2c>)
 8002472:	f009 fd28 	bl	800bec6 <memset>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000950 	.word	0x20000950

08002484 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800248a:	2300      	movs	r3, #0
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	e016      	b.n	80024be <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	3b50      	subs	r3, #80	@ 0x50
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff42 	bl	8002320 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff ff3f 	bl	8002320 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80024a2:	2010      	movs	r0, #16
 80024a4:	f7ff ff3c 	bl	8002320 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <ssd1306_UpdateScreen+0x4c>)
 80024ae:	4413      	add	r3, r2
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff4c 	bl	8002350 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	3301      	adds	r3, #1
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b07      	cmp	r3, #7
 80024c2:	d9e5      	bls.n	8002490 <ssd1306_UpdateScreen+0xc>
    }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000950 	.word	0x20000950

080024d4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	460b      	mov	r3, r1
 80024e0:	71bb      	strb	r3, [r7, #6]
 80024e2:	4613      	mov	r3, r2
 80024e4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db3d      	blt.n	800256a <ssd1306_DrawPixel+0x96>
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80024f2:	d83a      	bhi.n	800256a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024f4:	797b      	ldrb	r3, [r7, #5]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11a      	bne.n	8002530 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024fa:	79fa      	ldrb	r2, [r7, #7]
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	b2d8      	uxtb	r0, r3
 8002502:	4603      	mov	r3, r0
 8002504:	01db      	lsls	r3, r3, #7
 8002506:	4413      	add	r3, r2
 8002508:	4a1b      	ldr	r2, [pc, #108]	@ (8002578 <ssd1306_DrawPixel+0xa4>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	b25a      	sxtb	r2, r3
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	b25b      	sxtb	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b259      	sxtb	r1, r3
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	4603      	mov	r3, r0
 8002524:	01db      	lsls	r3, r3, #7
 8002526:	4413      	add	r3, r2
 8002528:	b2c9      	uxtb	r1, r1
 800252a:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <ssd1306_DrawPixel+0xa4>)
 800252c:	54d1      	strb	r1, [r2, r3]
 800252e:	e01d      	b.n	800256c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	79bb      	ldrb	r3, [r7, #6]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	b2d8      	uxtb	r0, r3
 8002538:	4603      	mov	r3, r0
 800253a:	01db      	lsls	r3, r3, #7
 800253c:	4413      	add	r3, r2
 800253e:	4a0e      	ldr	r2, [pc, #56]	@ (8002578 <ssd1306_DrawPixel+0xa4>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	b25a      	sxtb	r2, r3
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	b25b      	sxtb	r3, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	b25b      	sxtb	r3, r3
 8002556:	4013      	ands	r3, r2
 8002558:	b259      	sxtb	r1, r3
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	4603      	mov	r3, r0
 800255e:	01db      	lsls	r3, r3, #7
 8002560:	4413      	add	r3, r2
 8002562:	b2c9      	uxtb	r1, r1
 8002564:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <ssd1306_DrawPixel+0xa4>)
 8002566:	54d1      	strb	r1, [r2, r3]
 8002568:	e000      	b.n	800256c <ssd1306_DrawPixel+0x98>
        return;
 800256a:	bf00      	nop
    }
}
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000950 	.word	0x20000950

0800257c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4638      	mov	r0, r7
 8002586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800258a:	4623      	mov	r3, r4
 800258c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b1f      	cmp	r3, #31
 8002592:	d902      	bls.n	800259a <ssd1306_WriteChar+0x1e>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b7e      	cmp	r3, #126	@ 0x7e
 8002598:	d901      	bls.n	800259e <ssd1306_WriteChar+0x22>
        return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e079      	b.n	8002692 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <ssd1306_WriteChar+0x34>
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3b20      	subs	r3, #32
 80025aa:	4413      	add	r3, r2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	e000      	b.n	80025b2 <ssd1306_WriteChar+0x36>
 80025b0:	783b      	ldrb	r3, [r7, #0]
 80025b2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80025b4:	4b39      	ldr	r3, [pc, #228]	@ (800269c <ssd1306_WriteChar+0x120>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	4413      	add	r3, r2
 80025be:	2b80      	cmp	r3, #128	@ 0x80
 80025c0:	dc06      	bgt.n	80025d0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80025c2:	4b36      	ldr	r3, [pc, #216]	@ (800269c <ssd1306_WriteChar+0x120>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	461a      	mov	r2, r3
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80025cc:	2b40      	cmp	r3, #64	@ 0x40
 80025ce:	dd01      	ble.n	80025d4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e05e      	b.n	8002692 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e04d      	b.n	8002676 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3b20      	subs	r3, #32
 80025e0:	7879      	ldrb	r1, [r7, #1]
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e036      	b.n	8002668 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <ssd1306_WriteChar+0x120>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	4b20      	ldr	r3, [pc, #128]	@ (800269c <ssd1306_WriteChar+0x120>)
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800262a:	4619      	mov	r1, r3
 800262c:	f7ff ff52 	bl	80024d4 <ssd1306_DrawPixel>
 8002630:	e017      	b.n	8002662 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002632:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <ssd1306_WriteChar+0x120>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b2d8      	uxtb	r0, r3
 8002640:	4b16      	ldr	r3, [pc, #88]	@ (800269c <ssd1306_WriteChar+0x120>)
 8002642:	885b      	ldrh	r3, [r3, #2]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4413      	add	r3, r2
 800264c:	b2d9      	uxtb	r1, r3
 800264e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	f7ff ff39 	bl	80024d4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	3301      	adds	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d3c4      	bcc.n	80025fa <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	787b      	ldrb	r3, [r7, #1]
 8002678:	461a      	mov	r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4293      	cmp	r3, r2
 800267e:	d3ac      	bcc.n	80025da <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <ssd1306_WriteChar+0x120>)
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4413      	add	r3, r2
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <ssd1306_WriteChar+0x120>)
 800268e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	bf00      	nop
 800269c:	20000d50 	.word	0x20000d50

080026a0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	4638      	mov	r0, r7
 80026aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80026ae:	e013      	b.n	80026d8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	7818      	ldrb	r0, [r3, #0]
 80026b4:	7e3b      	ldrb	r3, [r7, #24]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	463b      	mov	r3, r7
 80026ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026bc:	f7ff ff5e 	bl	800257c <ssd1306_WriteChar>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d002      	beq.n	80026d2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	e008      	b.n	80026e4 <ssd1306_WriteString+0x44>
        }
        str++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e7      	bne.n	80026b0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	781b      	ldrb	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	460a      	mov	r2, r1
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <ssd1306_SetCursor+0x2c>)
 8002702:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <ssd1306_SetCursor+0x2c>)
 800270a:	805a      	strh	r2, [r3, #2]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000d50 	.word	0x20000d50

0800271c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	71fb      	strb	r3, [r7, #7]
 800272e:	4603      	mov	r3, r0
 8002730:	71bb      	strb	r3, [r7, #6]
 8002732:	460b      	mov	r3, r1
 8002734:	717b      	strb	r3, [r7, #5]
 8002736:	4613      	mov	r3, r2
 8002738:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800273a:	797a      	ldrb	r2, [r7, #5]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bfb8      	it	lt
 8002744:	425b      	neglt	r3, r3
 8002746:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002748:	793a      	ldrb	r2, [r7, #4]
 800274a:	79bb      	ldrb	r3, [r7, #6]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	425b      	neglt	r3, r3
 8002754:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	429a      	cmp	r2, r3
 800275c:	d201      	bcs.n	8002762 <ssd1306_Line+0x46>
 800275e:	2301      	movs	r3, #1
 8002760:	e001      	b.n	8002766 <ssd1306_Line+0x4a>
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002768:	79ba      	ldrb	r2, [r7, #6]
 800276a:	793b      	ldrb	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d201      	bcs.n	8002774 <ssd1306_Line+0x58>
 8002770:	2301      	movs	r3, #1
 8002772:	e001      	b.n	8002778 <ssd1306_Line+0x5c>
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002782:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002786:	7939      	ldrb	r1, [r7, #4]
 8002788:	797b      	ldrb	r3, [r7, #5]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fea2 	bl	80024d4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002790:	e024      	b.n	80027dc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002792:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002796:	79b9      	ldrb	r1, [r7, #6]
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe9a 	bl	80024d4 <ssd1306_DrawPixel>
        error2 = error * 2;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	425b      	negs	r3, r3
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dd08      	ble.n	80027c2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4413      	add	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	da08      	bge.n	80027dc <ssd1306_Line+0xc0>
            error += deltaX;
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	4413      	add	r3, r2
 80027da:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1d6      	bne.n	8002792 <ssd1306_Line+0x76>
 80027e4:	79ba      	ldrb	r2, [r7, #6]
 80027e6:	793b      	ldrb	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1d2      	bne.n	8002792 <ssd1306_Line+0x76>
        }
    }
    return;
 80027ec:	bf00      	nop
}
 80027ee:	3724      	adds	r7, #36	@ 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	71fb      	strb	r3, [r7, #7]
 8002806:	4603      	mov	r3, r0
 8002808:	71bb      	strb	r3, [r7, #6]
 800280a:	460b      	mov	r3, r1
 800280c:	717b      	strb	r3, [r7, #5]
 800280e:	4613      	mov	r3, r2
 8002810:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002812:	79bc      	ldrb	r4, [r7, #6]
 8002814:	797a      	ldrb	r2, [r7, #5]
 8002816:	79b9      	ldrb	r1, [r7, #6]
 8002818:	79f8      	ldrb	r0, [r7, #7]
 800281a:	7e3b      	ldrb	r3, [r7, #24]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4623      	mov	r3, r4
 8002820:	f7ff ff7c 	bl	800271c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002824:	793c      	ldrb	r4, [r7, #4]
 8002826:	797a      	ldrb	r2, [r7, #5]
 8002828:	79b9      	ldrb	r1, [r7, #6]
 800282a:	7978      	ldrb	r0, [r7, #5]
 800282c:	7e3b      	ldrb	r3, [r7, #24]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4623      	mov	r3, r4
 8002832:	f7ff ff73 	bl	800271c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002836:	793c      	ldrb	r4, [r7, #4]
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	7939      	ldrb	r1, [r7, #4]
 800283c:	7978      	ldrb	r0, [r7, #5]
 800283e:	7e3b      	ldrb	r3, [r7, #24]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4623      	mov	r3, r4
 8002844:	f7ff ff6a 	bl	800271c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002848:	79bc      	ldrb	r4, [r7, #6]
 800284a:	79fa      	ldrb	r2, [r7, #7]
 800284c:	7939      	ldrb	r1, [r7, #4]
 800284e:	79f8      	ldrb	r0, [r7, #7]
 8002850:	7e3b      	ldrb	r3, [r7, #24]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4623      	mov	r3, r4
 8002856:	f7ff ff61 	bl	800271c <ssd1306_Line>

    return;
 800285a:	bf00      	nop
}
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800286c:	2381      	movs	r3, #129	@ 0x81
 800286e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fd54 	bl	8002320 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fd50 	bl	8002320 <ssd1306_WriteCommand>
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002898:	23af      	movs	r3, #175	@ 0xaf
 800289a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <ssd1306_SetDisplayOn+0x38>)
 800289e:	2201      	movs	r2, #1
 80028a0:	715a      	strb	r2, [r3, #5]
 80028a2:	e004      	b.n	80028ae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80028a4:	23ae      	movs	r3, #174	@ 0xae
 80028a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <ssd1306_SetDisplayOn+0x38>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fd35 	bl	8002320 <ssd1306_WriteCommand>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000d50 	.word	0x20000d50

080028c4 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 80028da:	20a1      	movs	r0, #161	@ 0xa1
 80028dc:	f7ff fd20 	bl	8002320 <ssd1306_WriteCommand>
 80028e0:	e002      	b.n	80028e8 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 80028e2:	20a0      	movs	r0, #160	@ 0xa0
 80028e4:	f7ff fd1c 	bl	8002320 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 80028e8:	79bb      	ldrb	r3, [r7, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 80028ee:	20c8      	movs	r0, #200	@ 0xc8
 80028f0:	f7ff fd16 	bl	8002320 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 80028f4:	e002      	b.n	80028fc <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 80028f6:	20c0      	movs	r0, #192	@ 0xc0
 80028f8:	f7ff fd12 	bl	8002320 <ssd1306_WriteCommand>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a0f      	ldr	r2, [pc, #60]	@ (8002950 <HAL_MspInit+0x4c>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_MspInit+0x4c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	@ (8002950 <HAL_MspInit+0x4c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	@ 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_MspInit+0x4c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_ADC_MspInit+0x7c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d127      	bne.n	80029c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
 8002986:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <HAL_ADC_MspInit+0x80>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029ae:	2302      	movs	r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b2:	2303      	movs	r3, #3
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <HAL_ADC_MspInit+0x84>)
 80029c2:	f001 fa09 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012000 	.word	0x40012000
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020400 	.word	0x40020400

080029dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	@ 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_I2C_MspInit+0x84>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12b      	bne.n	8002a56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1e:	2312      	movs	r3, #18
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <HAL_I2C_MspInit+0x8c>)
 8002a36:	f001 f9cf 	bl	8003dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <HAL_I2C_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	3728      	adds	r7, #40	@ 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40005400 	.word	0x40005400
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020400 	.word	0x40020400

08002a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a8c:	d13a      	bne.n	8002b04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aaa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002abc:	230a      	movs	r3, #10
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4812      	ldr	r0, [pc, #72]	@ (8002b10 <HAL_PCD_MspInit+0xa4>)
 8002ac8:	f001 f986 	bl	8003dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <HAL_PCD_MspInit+0xa0>)
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2043      	movs	r0, #67	@ 0x43
 8002afa:	f000 ff28 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002afe:	2043      	movs	r0, #67	@ 0x43
 8002b00:	f000 ff41 	bl	8003986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	@ 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020000 	.word	0x40020000

08002b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <NMI_Handler+0x4>

08002b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8002b20:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <HardFault_Handler+0x6>

08002b26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <MemManage_Handler+0x4>

08002b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b32:	bf00      	nop
 8002b34:	e7fd      	b.n	8002b32 <BusFault_Handler+0x4>

08002b36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6c:	f000 f9de 	bl	8002f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <SysTick_Handler+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <SysTick_Handler+0x18>)
 8002b78:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000d58 	.word	0x20000d58

08002b84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f008 fa25 	bl	800afd8 <dcd_int_handler>
	return;
 8002b8e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  return 1;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <_kill>:

int _kill(int pid, int sig)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bac:	f009 fa36 	bl	800c01c <__errno>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2216      	movs	r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_exit>:

void _exit (int status)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bca:	f04f 31ff 	mov.w	r1, #4294967295
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffe7 	bl	8002ba2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <_exit+0x12>

08002bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00a      	b.n	8002c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bea:	f3af 8000 	nop.w
 8002bee:	4601      	mov	r1, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf0      	blt.n	8002bea <_read+0x12>
  }

  return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf1      	blt.n	8002c24 <_write+0x12>
  }
  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_close>:

int _close(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c72:	605a      	str	r2, [r3, #4]
  return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_isatty>:

int _isatty(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f009 f99a 	bl	800c01c <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20020000 	.word	0x20020000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000d5c 	.word	0x20000d5c
 8002d1c:	20001298 	.word	0x20001298

08002d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8002d48:	4b02      	ldr	r3, [pc, #8]	@ (8002d54 <tud_descriptor_device_cb+0x10>)
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	0800de1c 	.word	0x0800de1c

08002d58 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8002d62:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <tud_hid_descriptor_report_cb+0x18>)
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	0800de30 	.word	0x0800de30

08002d74 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8002d7e:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <tud_descriptor_configuration_cb+0x18>)
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	0800de8c 	.word	0x0800de8c

08002d90 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d108      	bne.n	8002db8 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <tud_descriptor_string_cb+0x9c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <tud_descriptor_string_cb+0xa0>)
 8002db0:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e027      	b.n	8002e08 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d901      	bls.n	8002dc2 <tud_descriptor_string_cb+0x32>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e02f      	b.n	8002e22 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <tud_descriptor_string_cb+0x9c>)
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8002dcc:	68b8      	ldr	r0, [r7, #8]
 8002dce:	f7fd fa11 	bl	80001f4 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b1f      	cmp	r3, #31
 8002dda:	d901      	bls.n	8002de0 <tud_descriptor_string_cb+0x50>
 8002ddc:	231f      	movs	r3, #31
 8002dde:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	73bb      	strb	r3, [r7, #14]
 8002de4:	e00c      	b.n	8002e00 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8002de6:	7bbb      	ldrb	r3, [r7, #14]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	3301      	adds	r3, #1
 8002df2:	4611      	mov	r1, r2
 8002df4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e30 <tud_descriptor_string_cb+0xa0>)
 8002df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8002dfa:	7bbb      	ldrb	r3, [r7, #14]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73bb      	strb	r3, [r7, #14]
 8002e00:	7bba      	ldrb	r2, [r7, #14]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3ee      	bcc.n	8002de6 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <tud_descriptor_string_cb+0xa0>)
 8002e1e:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <tud_descriptor_string_cb+0xa0>)
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000004c 	.word	0x2000004c
 8002e30:	20000d60 	.word	0x20000d60

08002e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e38:	f7ff ff72 	bl	8002d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e3c:	480c      	ldr	r0, [pc, #48]	@ (8002e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e3e:	490d      	ldr	r1, [pc, #52]	@ (8002e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e44:	e002      	b.n	8002e4c <LoopCopyDataInit>

08002e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4a:	3304      	adds	r3, #4

08002e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e50:	d3f9      	bcc.n	8002e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e54:	4c0a      	ldr	r4, [pc, #40]	@ (8002e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e58:	e001      	b.n	8002e5e <LoopFillZerobss>

08002e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e5c:	3204      	adds	r2, #4

08002e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e60:	d3fb      	bcc.n	8002e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e62:	f009 f8e1 	bl	800c028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e66:	f7fe fe41 	bl	8001aec <main>
  bx  lr    
 8002e6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e74:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002e78:	0800e148 	.word	0x0800e148
  ldr r2, =_sbss
 8002e7c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002e80:	20001298 	.word	0x20001298

08002e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC_IRQHandler>
	...

08002e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec8 <HAL_Init+0x40>)
 8002e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_Init+0x40>)
 8002e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea4:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <HAL_Init+0x40>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	f000 fd41 	bl	8003938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb6:	200f      	movs	r0, #15
 8002eb8:	f000 f808 	bl	8002ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ebc:	f7ff fd22 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00

08002ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed4:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_InitTick+0x54>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_InitTick+0x58>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fd59 	bl	80039a2 <HAL_SYSTICK_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00e      	b.n	8002f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d80a      	bhi.n	8002f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f00:	2200      	movs	r2, #0
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f000 fd21 	bl	800394e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f0c:	4a06      	ldr	r2, [pc, #24]	@ (8002f28 <HAL_InitTick+0x5c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000048 	.word	0x20000048
 8002f24:	20000068 	.word	0x20000068
 8002f28:	20000064 	.word	0x20000064

08002f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_IncTick+0x20>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_IncTick+0x24>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <HAL_IncTick+0x24>)
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000068 	.word	0x20000068
 8002f50:	20000da0 	.word	0x20000da0

08002f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_GetTick+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000da0 	.word	0x20000da0

08002f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff ffee 	bl	8002f54 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d005      	beq.n	8002f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_Delay+0x44>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f92:	bf00      	nop
 8002f94:	f7ff ffde 	bl	8002f54 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d8f7      	bhi.n	8002f94 <HAL_Delay+0x28>
  {
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000068 	.word	0x20000068

08002fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e033      	b.n	8003032 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff fcbe 	bl	8002954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ffa:	f023 0302 	bic.w	r3, r3, #2
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 faca 	bl	80035a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40
 8003022:	e001      	b.n	8003028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start+0x1a>
 8003052:	2302      	movs	r3, #2
 8003054:	e097      	b.n	8003186 <HAL_ADC_Start+0x14a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d018      	beq.n	800309e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800307c:	4b45      	ldr	r3, [pc, #276]	@ (8003194 <HAL_ADC_Start+0x158>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a45      	ldr	r2, [pc, #276]	@ (8003198 <HAL_ADC_Start+0x15c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9a      	lsrs	r2, r3, #18
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d15f      	bne.n	800316c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	f023 0206 	bic.w	r2, r3, #6
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80030f8:	e002      	b.n	8003100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_ADC_Start+0x160>)
 800310a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003114:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d129      	bne.n	8003184 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e020      	b.n	8003184 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <HAL_ADC_Start+0x164>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11b      	bne.n	8003184 <HAL_ADC_Start+0x148>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e00b      	b.n	8003184 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f043 0210 	orr.w	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000048 	.word	0x20000048
 8003198:	431bde83 	.word	0x431bde83
 800319c:	40012300 	.word	0x40012300
 80031a0:	40012000 	.word	0x40012000

080031a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Stop+0x16>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e021      	b.n	80031fe <HAL_ADC_Stop+0x5a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d113      	bne.n	8003250 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003236:	d10b      	bne.n	8003250 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e063      	b.n	8003318 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003250:	f7ff fe80 	bl	8002f54 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003256:	e021      	b.n	800329c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d01d      	beq.n	800329c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_ADC_PollForConversion+0x6c>
 8003266:	f7ff fe75 	bl	8002f54 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d212      	bcs.n	800329c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d00b      	beq.n	800329c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e03d      	b.n	8003318 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d1d6      	bne.n	8003258 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0212 	mvn.w	r2, #18
 80032b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d123      	bne.n	8003316 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11f      	bne.n	8003316 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d111      	bne.n	8003316 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e113      	b.n	8003580 <HAL_ADC_ConfigChannel+0x244>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d925      	bls.n	80033b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	3b1e      	subs	r3, #30
 800337e:	2207      	movs	r2, #7
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43da      	mvns	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	400a      	ands	r2, r1
 800338c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4403      	add	r3, r0
 80033a6:	3b1e      	subs	r3, #30
 80033a8:	409a      	lsls	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	e022      	b.n	80033fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6919      	ldr	r1, [r3, #16]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	2207      	movs	r2, #7
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	400a      	ands	r2, r1
 80033d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4403      	add	r3, r0
 80033f0:	409a      	lsls	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d824      	bhi.n	800344c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b05      	subs	r3, #5
 8003414:	221f      	movs	r2, #31
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	400a      	ands	r2, r1
 8003422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b05      	subs	r3, #5
 800343e:	fa00 f203 	lsl.w	r2, r0, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34
 800344a:	e04c      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d824      	bhi.n	800349e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3b23      	subs	r3, #35	@ 0x23
 8003466:	221f      	movs	r2, #31
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43da      	mvns	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	400a      	ands	r2, r1
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	4618      	mov	r0, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b23      	subs	r3, #35	@ 0x23
 8003490:	fa00 f203 	lsl.w	r2, r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
 800349c:	e023      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b41      	subs	r3, #65	@ 0x41
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b41      	subs	r3, #65	@ 0x41
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e6:	4b29      	ldr	r3, [pc, #164]	@ (800358c <HAL_ADC_ConfigChannel+0x250>)
 80034e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a28      	ldr	r2, [pc, #160]	@ (8003590 <HAL_ADC_ConfigChannel+0x254>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10f      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x1d8>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b12      	cmp	r3, #18
 80034fa:	d10b      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <HAL_ADC_ConfigChannel+0x254>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d12b      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x23a>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_ADC_ConfigChannel+0x258>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x1f4>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b11      	cmp	r3, #17
 800352e:	d122      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_ADC_ConfigChannel+0x258>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003552:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_ADC_ConfigChannel+0x25c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a11      	ldr	r2, [pc, #68]	@ (800359c <HAL_ADC_ConfigChannel+0x260>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0c9a      	lsrs	r2, r3, #18
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003568:	e002      	b.n	8003570 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	40012000 	.word	0x40012000
 8003594:	10000012 	.word	0x10000012
 8003598:	20000048 	.word	0x20000048
 800359c:	431bde83 	.word	0x431bde83

080035a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035a8:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <ADC_Init+0x1f0>)
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	021a      	lsls	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	4a58      	ldr	r2, [pc, #352]	@ (8003794 <ADC_Init+0x1f4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003646:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6899      	ldr	r1, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	e00f      	b.n	800369e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800368c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800369c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0202 	bic.w	r2, r2, #2
 80036ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7e1b      	ldrb	r3, [r3, #24]
 80036b8:	005a      	lsls	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01b      	beq.n	8003704 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	3b01      	subs	r3, #1
 80036f8:	035a      	lsls	r2, r3, #13
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	e007      	b.n	8003714 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	3b01      	subs	r3, #1
 8003730:	051a      	lsls	r2, r3, #20
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003756:	025a      	lsls	r2, r3, #9
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	029a      	lsls	r2, r3, #10
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40012300 	.word	0x40012300
 8003794:	0f000001 	.word	0x0f000001

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	@ (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	@ (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	@ (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	@ 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003904:	d301      	bcc.n	800390a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003906:	2301      	movs	r3, #1
 8003908:	e00f      	b.n	800392a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <SysTick_Config+0x40>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003912:	210f      	movs	r1, #15
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f7ff ff8e 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <SysTick_Config+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <SysTick_Config+0x40>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff29 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003960:	f7ff ff3e 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 8003964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	6978      	ldr	r0, [r7, #20]
 800396c:	f7ff ff8e 	bl	800388c <NVIC_EncodePriority>
 8003970:	4602      	mov	r2, r0
 8003972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff5d 	bl	8003838 <__NVIC_SetPriority>
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff31 	bl	80037fc <__NVIC_EnableIRQ>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ffa2 	bl	80038f4 <SysTick_Config>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <HAL_FLASH_Program+0xa0>)
 80039d0:	7e1b      	ldrb	r3, [r3, #24]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_FLASH_Program+0x1e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e03b      	b.n	8003a52 <HAL_FLASH_Program+0x96>
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <HAL_FLASH_Program+0xa0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80039e4:	f000 f870 	bl	8003ac8 <FLASH_WaitForLastOperation>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d12b      	bne.n	8003a4a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80039f8:	783b      	ldrb	r3, [r7, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	68b8      	ldr	r0, [r7, #8]
 80039fe:	f000 f91b 	bl	8003c38 <FLASH_Program_Byte>
 8003a02:	e016      	b.n	8003a32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a0a:	883b      	ldrh	r3, [r7, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f000 f8ee 	bl	8003bf0 <FLASH_Program_HalfWord>
 8003a14:	e00d      	b.n	8003a32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d105      	bne.n	8003a28 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f000 f8c3 	bl	8003bac <FLASH_Program_Word>
 8003a26:	e004      	b.n	8003a32 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2c:	68b8      	ldr	r0, [r7, #8]
 8003a2e:	f000 f88b 	bl	8003b48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a32:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003a36:	f000 f847 	bl	8003ac8 <FLASH_WaitForLastOperation>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_FLASH_Program+0xa4>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <HAL_FLASH_Program+0xa4>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <HAL_FLASH_Program+0xa0>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000da4 	.word	0x20000da4
 8003a60:	40023c00 	.word	0x40023c00

08003a64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_FLASH_Unlock+0x38>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da0b      	bge.n	8003a8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a76:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <HAL_FLASH_Unlock+0x38>)
 8003a78:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <HAL_FLASH_Unlock+0x3c>)
 8003a7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a7c:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <HAL_FLASH_Unlock+0x38>)
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <HAL_FLASH_Unlock+0x40>)
 8003a80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_FLASH_Unlock+0x38>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da01      	bge.n	8003a8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	45670123 	.word	0x45670123
 8003aa4:	cdef89ab 	.word	0xcdef89ab

08003aa8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_FLASH_Lock+0x1c>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <HAL_FLASH_Lock+0x1c>)
 8003ab2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ab6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40023c00 	.word	0x40023c00

08003ac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <FLASH_WaitForLastOperation+0x78>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ada:	f7ff fa3b 	bl	8002f54 <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003ae0:	e010      	b.n	8003b04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d00c      	beq.n	8003b04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <FLASH_WaitForLastOperation+0x38>
 8003af0:	f7ff fa30 	bl	8002f54 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d201      	bcs.n	8003b04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e019      	b.n	8003b38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b04:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e8      	bne.n	8003ae2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b1c:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b2e:	f000 f8a5 	bl	8003c7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
  
}  
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000da4 	.word	0x20000da4
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b54:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	4a13      	ldr	r2, [pc, #76]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b66:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <FLASH_Program_DoubleWord+0x60>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003b7e:	f3bf 8f6f 	isb	sy
}
 8003b82:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	000a      	movs	r2, r1
 8003b92:	2300      	movs	r3, #0
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	3104      	adds	r1, #4
 8003b98:	4613      	mov	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a0c      	ldr	r2, [pc, #48]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4a09      	ldr	r2, [pc, #36]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bce:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4a06      	ldr	r2, [pc, #24]	@ (8003bec <FLASH_Program_Word+0x40>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40023c00 	.word	0x40023c00

08003bf0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	4a0c      	ldr	r2, [pc, #48]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c14:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4a06      	ldr	r2, [pc, #24]	@ (8003c34 <FLASH_Program_HalfWord+0x44>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	801a      	strh	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4a0b      	ldr	r2, [pc, #44]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c52:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c58:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a06      	ldr	r2, [pc, #24]	@ (8003c78 <FLASH_Program_Byte+0x40>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	701a      	strb	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003c80:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003c96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003c98:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003c9e:	4b28      	ldr	r3, [pc, #160]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003caa:	4b26      	ldr	r3, [pc, #152]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f043 0308 	orr.w	r3, r3, #8
 8003cb2:	4a24      	ldr	r2, [pc, #144]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003cb4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cb8:	2220      	movs	r2, #32
 8003cba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003cbc:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003cd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003cda:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003ce6:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003cf0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003cf2:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d04:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003d0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d16:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d18:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	4a05      	ldr	r2, [pc, #20]	@ (8003d44 <FLASH_SetErrorCode+0xc8>)
 8003d2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <FLASH_SetErrorCode+0xc4>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	60da      	str	r2, [r3, #12]
  }
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	20000da4 	.word	0x20000da4

08003d48 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e010      	b.n	8003d86 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d103      	bne.n	8003d72 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e009      	b.n	8003d86 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d103      	bne.n	8003d80 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e002      	b.n	8003d86 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003d80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d86:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	4a12      	ldr	r2, [pc, #72]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	490f      	ldr	r1, [pc, #60]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003da4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003da8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <FLASH_Erase_Sector+0x8c>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6113      	str	r3, [r2, #16]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40023c00 	.word	0x40023c00

08003dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	@ 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e159      	b.n	80040a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df4:	2201      	movs	r2, #1
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	f040 8148 	bne.w	80040a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d005      	beq.n	8003e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d130      	bne.n	8003e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	2203      	movs	r2, #3
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e60:	2201      	movs	r2, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 0201 	and.w	r2, r3, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d017      	beq.n	8003ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d123      	bne.n	8003f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	08da      	lsrs	r2, r3, #3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3208      	adds	r2, #8
 8003edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	220f      	movs	r2, #15
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	08da      	lsrs	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3208      	adds	r2, #8
 8003f16:	69b9      	ldr	r1, [r7, #24]
 8003f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0203 	and.w	r2, r3, #3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a2 	beq.w	80040a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b57      	ldr	r3, [pc, #348]	@ (80040c0 <HAL_GPIO_Init+0x2e8>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	4a56      	ldr	r2, [pc, #344]	@ (80040c0 <HAL_GPIO_Init+0x2e8>)
 8003f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6e:	4b54      	ldr	r3, [pc, #336]	@ (80040c0 <HAL_GPIO_Init+0x2e8>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f7a:	4a52      	ldr	r2, [pc, #328]	@ (80040c4 <HAL_GPIO_Init+0x2ec>)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a49      	ldr	r2, [pc, #292]	@ (80040c8 <HAL_GPIO_Init+0x2f0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d019      	beq.n	8003fda <HAL_GPIO_Init+0x202>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	@ (80040cc <HAL_GPIO_Init+0x2f4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_GPIO_Init+0x1fe>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <HAL_GPIO_Init+0x2f8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_GPIO_Init+0x1fa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a46      	ldr	r2, [pc, #280]	@ (80040d4 <HAL_GPIO_Init+0x2fc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <HAL_GPIO_Init+0x1f6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a45      	ldr	r2, [pc, #276]	@ (80040d8 <HAL_GPIO_Init+0x300>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_GPIO_Init+0x1f2>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	e008      	b.n	8003fdc <HAL_GPIO_Init+0x204>
 8003fca:	2307      	movs	r3, #7
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x204>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e004      	b.n	8003fdc <HAL_GPIO_Init+0x204>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e002      	b.n	8003fdc <HAL_GPIO_Init+0x204>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_GPIO_Init+0x204>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f002 0203 	and.w	r2, r2, #3
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fec:	4935      	ldr	r1, [pc, #212]	@ (80040c4 <HAL_GPIO_Init+0x2ec>)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffa:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_GPIO_Init+0x304>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800401e:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <HAL_GPIO_Init+0x304>)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004024:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <HAL_GPIO_Init+0x304>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004048:	4a24      	ldr	r2, [pc, #144]	@ (80040dc <HAL_GPIO_Init+0x304>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_GPIO_Init+0x304>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_GPIO_Init+0x304>)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <HAL_GPIO_Init+0x304>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <HAL_GPIO_Init+0x304>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	f67f aea2 	bls.w	8003df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3724      	adds	r7, #36	@ 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40020000 	.word	0x40020000
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40020800 	.word	0x40020800
 80040d4:	40020c00 	.word	0x40020c00
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40013c00 	.word	0x40013c00

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040fc:	e003      	b.n	8004106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e12b      	b.n	800437e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe fc4e 	bl	80029dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2224      	movs	r2, #36	@ 0x24
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004178:	f001 f9b8 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 800417c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4a81      	ldr	r2, [pc, #516]	@ (8004388 <HAL_I2C_Init+0x274>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d807      	bhi.n	8004198 <HAL_I2C_Init+0x84>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a80      	ldr	r2, [pc, #512]	@ (800438c <HAL_I2C_Init+0x278>)
 800418c:	4293      	cmp	r3, r2
 800418e:	bf94      	ite	ls
 8004190:	2301      	movls	r3, #1
 8004192:	2300      	movhi	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e006      	b.n	80041a6 <HAL_I2C_Init+0x92>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a7d      	ldr	r2, [pc, #500]	@ (8004390 <HAL_I2C_Init+0x27c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	bf94      	ite	ls
 80041a0:	2301      	movls	r3, #1
 80041a2:	2300      	movhi	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0e7      	b.n	800437e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a78      	ldr	r2, [pc, #480]	@ (8004394 <HAL_I2C_Init+0x280>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0c9b      	lsrs	r3, r3, #18
 80041b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004388 <HAL_I2C_Init+0x274>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d802      	bhi.n	80041e8 <HAL_I2C_Init+0xd4>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	3301      	adds	r3, #1
 80041e6:	e009      	b.n	80041fc <HAL_I2C_Init+0xe8>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	4a69      	ldr	r2, [pc, #420]	@ (8004398 <HAL_I2C_Init+0x284>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	3301      	adds	r3, #1
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800420e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	495c      	ldr	r1, [pc, #368]	@ (8004388 <HAL_I2C_Init+0x274>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d819      	bhi.n	8004250 <HAL_I2C_Init+0x13c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1e59      	subs	r1, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fbb1 f3f3 	udiv	r3, r1, r3
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004230:	400b      	ands	r3, r1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_I2C_Init+0x138>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1e59      	subs	r1, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fbb1 f3f3 	udiv	r3, r1, r3
 8004244:	3301      	adds	r3, #1
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	e051      	b.n	80042f0 <HAL_I2C_Init+0x1dc>
 800424c:	2304      	movs	r3, #4
 800424e:	e04f      	b.n	80042f0 <HAL_I2C_Init+0x1dc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d111      	bne.n	800427c <HAL_I2C_Init+0x168>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	440b      	add	r3, r1
 8004266:	fbb0 f3f3 	udiv	r3, r0, r3
 800426a:	3301      	adds	r3, #1
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e012      	b.n	80042a2 <HAL_I2C_Init+0x18e>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e58      	subs	r0, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	0099      	lsls	r1, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Init+0x196>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e022      	b.n	80042f0 <HAL_I2C_Init+0x1dc>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10e      	bne.n	80042d0 <HAL_I2C_Init+0x1bc>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1e58      	subs	r0, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	440b      	add	r3, r1
 80042c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ce:	e00f      	b.n	80042f0 <HAL_I2C_Init+0x1dc>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	0099      	lsls	r1, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	6809      	ldr	r1, [r1, #0]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800431e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6911      	ldr	r1, [r2, #16]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68d2      	ldr	r2, [r2, #12]
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	430b      	orrs	r3, r1
 8004332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	000186a0 	.word	0x000186a0
 800438c:	001e847f 	.word	0x001e847f
 8004390:	003d08ff 	.word	0x003d08ff
 8004394:	431bde83 	.word	0x431bde83
 8004398:	10624dd3 	.word	0x10624dd3

0800439c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	460b      	mov	r3, r1
 80043b0:	813b      	strh	r3, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043b6:	f7fe fdcd 	bl	8002f54 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	f040 80d9 	bne.w	800457c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2319      	movs	r3, #25
 80043d0:	2201      	movs	r2, #1
 80043d2:	496d      	ldr	r1, [pc, #436]	@ (8004588 <HAL_I2C_Mem_Write+0x1ec>)
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f971 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
 80043e2:	e0cc      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_I2C_Mem_Write+0x56>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0c5      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d007      	beq.n	8004418 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2221      	movs	r2, #33	@ 0x21
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2240      	movs	r2, #64	@ 0x40
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a4d      	ldr	r2, [pc, #308]	@ (800458c <HAL_I2C_Mem_Write+0x1f0>)
 8004458:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800445a:	88f8      	ldrh	r0, [r7, #6]
 800445c:	893a      	ldrh	r2, [r7, #8]
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	4603      	mov	r3, r0
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f890 	bl	8004590 <I2C_RequestMemoryWrite>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d052      	beq.n	800451c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e081      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fa36 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06b      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11b      	bne.n	800451c <HAL_I2C_Mem_Write+0x180>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d017      	beq.n	800451c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1aa      	bne.n	800447a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fa29 	bl	8004980 <I2C_WaitOnBTFFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	2b04      	cmp	r3, #4
 800453a:	d107      	bne.n	800454c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e016      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	00100002 	.word	0x00100002
 800458c:	ffff0000 	.word	0xffff0000

08004590 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	460b      	mov	r3, r1
 80045a4:	813b      	strh	r3, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f878 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e0:	d103      	bne.n	80045ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e05f      	b.n	80046ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	492d      	ldr	r1, [pc, #180]	@ (80046b8 <I2C_RequestMemoryWrite+0x128>)
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f8d3 	bl	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e04c      	b.n	80046ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	6a39      	ldr	r1, [r7, #32]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f95e 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e02b      	b.n	80046ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e021      	b.n	80046ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	b29b      	uxth	r3, r3
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004678:	6a39      	ldr	r1, [r7, #32]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f938 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b04      	cmp	r3, #4
 800468c:	d107      	bne.n	800469e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e005      	b.n	80046ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a2:	893b      	ldrh	r3, [r7, #8]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	00010002 	.word	0x00010002

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e048      	b.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d044      	beq.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe fc3d 	bl	8002f54 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d139      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10d      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	e00c      	b.n	800472c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	d116      	bne.n	8004760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e023      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10d      	bne.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	43da      	mvns	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	e00c      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d093      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047be:	e071      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	d123      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e067      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d041      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fe fb98 	bl	8002f54 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d136      	bne.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e00b      	b.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e021      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10c      	bne.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e00b      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af6d 	bne.w	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f886 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e034      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d028      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe fb1d 	bl	8002f54 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11d      	bne.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d016      	beq.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d1c3      	bne.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f83e 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e034      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d028      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fe fad5 	bl	8002f54 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11d      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d016      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d1c3      	bne.n	800498e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d11b      	bne.n	8004a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e101      	b.n	8004c84 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd ffe6 	bl	8002a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aae:	d102      	bne.n	8004ab6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fd8e 	bl	80055dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7c1a      	ldrb	r2, [r3, #16]
 8004ac8:	f88d 2000 	strb.w	r2, [sp]
 8004acc:	3304      	adds	r3, #4
 8004ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad0:	f000 fd20 	bl	8005514 <USB_CoreInit>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0ce      	b.n	8004c84 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fd86 	bl	80055fe <USB_SetCurrentMode>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0bf      	b.n	8004c84 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e04a      	b.n	8004ba0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3315      	adds	r3, #21
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	b298      	uxth	r0, r3
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	332e      	adds	r3, #46	@ 0x2e
 8004b46:	4602      	mov	r2, r0
 8004b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3318      	adds	r3, #24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	331c      	adds	r3, #28
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3320      	adds	r3, #32
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b86:	7bfa      	ldrb	r2, [r7, #15]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3324      	adds	r3, #36	@ 0x24
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	791b      	ldrb	r3, [r3, #4]
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3af      	bcc.n	8004b0a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e044      	b.n	8004c3a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	3301      	adds	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3b5      	bcc.n	8004bb0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7c1a      	ldrb	r2, [r3, #16]
 8004c4c:	f88d 2000 	strb.w	r2, [sp]
 8004c50:	3304      	adds	r3, #4
 8004c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c54:	f000 fd20 	bl	8005698 <USB_DevInit>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00c      	b.n	8004c84 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fee8 	bl	8005a52 <USB_DevDisconnect>

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe f906 	bl	8002f54 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe f902 	bl	8002f54 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f8f2 	bl	8002f54 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe f8ee 	bl	8002f54 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe f8a7 	bl	8002f54 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fe f8a3 	bl	8002f54 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe f886 	bl	8002f54 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fe f882 	bl	8002f54 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fe f866 	bl	8002f54 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fe f862 	bl	8002f54 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe f84f 	bl	8002f54 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fe f84b 	bl	8002f54 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe f80b 	bl	8002f54 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fe f807 	bl	8002f54 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd ffcc 	bl	8002f54 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fd ffc8 	bl	8002f54 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd ffb6 	bl	8002f54 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd ffb2 	bl	8002f54 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd ff86 	bl	8002f54 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd ff82 	bl	8002f54 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd ff5b 	bl	8002f54 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd ff57 	bl	8002f54 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd ff44 	bl	8002f54 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd ff40 	bl	8002f54 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd fe72 	bl	8002f54 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd fe6e 	bl	8002f54 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd fdd2 	bl	8002ecc <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800de04 	.word	0x0800de04
 8005340:	20000048 	.word	0x20000048
 8005344:	20000064 	.word	0x20000064

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b090      	sub	sp, #64	@ 0x40
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005358:	2300      	movs	r3, #0
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e09b      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005380:	e09b      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005386:	e098      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b4f      	ldr	r3, [pc, #316]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b0:	2100      	movs	r1, #0
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b4:	fb03 f201 	mul.w	r2, r3, r1
 80053b8:	2300      	movs	r3, #0
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	4413      	add	r3, r2
 80053c0:	4a43      	ldr	r2, [pc, #268]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c2:	fba0 1202 	umull	r1, r2, r0, r2
 80053c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c8:	460a      	mov	r2, r1
 80053ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053e2:	f7fa ff65 	bl	80002b0 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ee:	e053      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	617a      	str	r2, [r7, #20]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ebb2 080a 	subs.w	r8, r2, sl
 8005422:	eb63 090b 	sbc.w	r9, r3, fp
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800543a:	ebb2 0408 	subs.w	r4, r2, r8
 800543e:	eb63 0509 	sbc.w	r5, r3, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	00eb      	lsls	r3, r5, #3
 800544c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	4614      	mov	r4, r2
 8005454:	461d      	mov	r5, r3
 8005456:	eb14 030a 	adds.w	r3, r4, sl
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	eb45 030b 	adc.w	r3, r5, fp
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	f7fa ff10 	bl	80002b0 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80054a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	@ 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	018cba80 	.word	0x018cba80

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000048 	.word	0x20000048

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800de14 	.word	0x0800de14

08005514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005514:	b084      	sub	sp, #16
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	f107 001c 	add.w	r0, r7, #28
 8005522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005526:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800552a:	2b01      	cmp	r3, #1
 800552c:	d123      	bne.n	8005576 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005532:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005556:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 faa0 	bl	8005ab0 <USB_CoreReset>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
 8005574:	e01b      	b.n	80055ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa94 	bl	8005ab0 <USB_CoreReset>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800558c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38
 80055a0:	e005      	b.n	80055ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055ae:	7fbb      	ldrb	r3, [r7, #30]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10b      	bne.n	80055cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f043 0206 	orr.w	r2, r3, #6
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f043 0220 	orr.w	r2, r3, #32
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d8:	b004      	add	sp, #16
 80055da:	4770      	bx	lr

080055dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 0201 	bic.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d115      	bne.n	800564c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800562c:	200a      	movs	r0, #10
 800562e:	f7fd fc9d 	bl	8002f6c <HAL_Delay>
      ms += 10U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	330a      	adds	r3, #10
 8005636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa2b 	bl	8005a94 <USB_GetMode>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d01e      	beq.n	8005682 <USB_SetCurrentMode+0x84>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2bc7      	cmp	r3, #199	@ 0xc7
 8005648:	d9f0      	bls.n	800562c <USB_SetCurrentMode+0x2e>
 800564a:	e01a      	b.n	8005682 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800565e:	200a      	movs	r0, #10
 8005660:	f7fd fc84 	bl	8002f6c <HAL_Delay>
      ms += 10U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	330a      	adds	r3, #10
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa12 	bl	8005a94 <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2bc7      	cmp	r3, #199	@ 0xc7
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x60>
 800567c:	e001      	b.n	8005682 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e005      	b.n	800568e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2bc8      	cmp	r3, #200	@ 0xc8
 8005686:	d101      	bne.n	800568c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005698:	b084      	sub	sp, #16
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	e009      	b.n	80056cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3340      	adds	r3, #64	@ 0x40
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3301      	adds	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b0e      	cmp	r3, #14
 80056d0:	d9f2      	bls.n	80056b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11c      	bne.n	8005714 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	@ 0x38
 8005712:	e00b      	b.n	800572c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005738:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10d      	bne.n	800575c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005748:	2100      	movs	r1, #0
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f968 	bl	8005a20 <USB_SetDevSpeed>
 8005750:	e008      	b.n	8005764 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005752:	2101      	movs	r1, #1
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f963 	bl	8005a20 <USB_SetDevSpeed>
 800575a:	e003      	b.n	8005764 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800575c:	2103      	movs	r1, #3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f95e 	bl	8005a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005764:	2110      	movs	r1, #16
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8fa 	bl	8005960 <USB_FlushTxFifo>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f924 	bl	80059c4 <USB_FlushRxFifo>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005798:	461a      	mov	r2, r3
 800579a:	2300      	movs	r3, #0
 800579c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e043      	b.n	8005838 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c6:	d118      	bne.n	80057fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	461a      	mov	r2, r3
 80057dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e013      	b.n	800580c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e008      	b.n	800580c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582a:	461a      	mov	r2, r3
 800582c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3301      	adds	r3, #1
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800583c:	461a      	mov	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4293      	cmp	r3, r2
 8005842:	d3b5      	bcc.n	80057b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e043      	b.n	80058d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800585c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005860:	d118      	bne.n	8005894 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e013      	b.n	80058a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588a:	461a      	mov	r2, r3
 800588c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e008      	b.n	80058a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3301      	adds	r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058d6:	461a      	mov	r2, r3
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4293      	cmp	r3, r2
 80058dc:	d3b5      	bcc.n	800584a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f043 0210 	orr.w	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <USB_DevInit+0x2c4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005920:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f043 0208 	orr.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005934:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005938:	2b01      	cmp	r3, #1
 800593a:	d107      	bne.n	800594c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	f043 0304 	orr.w	r3, r3, #4
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005958:	b004      	add	sp, #16
 800595a:	4770      	bx	lr
 800595c:	803c3800 	.word	0x803c3800

08005960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800597a:	d901      	bls.n	8005980 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e01b      	b.n	80059b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	daf2      	bge.n	800596e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	019b      	lsls	r3, r3, #6
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a4:	d901      	bls.n	80059aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e006      	b.n	80059b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d0f0      	beq.n	8005998 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059dc:	d901      	bls.n	80059e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e018      	b.n	8005a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	daf2      	bge.n	80059d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2210      	movs	r2, #16
 80059f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a00:	d901      	bls.n	8005a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e006      	b.n	8005a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d0f0      	beq.n	80059f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac8:	d901      	bls.n	8005ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e01b      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	daf2      	bge.n	8005abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af2:	d901      	bls.n	8005af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e006      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d0f0      	beq.n	8005ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	22e8      	movs	r2, #232	@ 0xe8
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	4a30      	ldr	r2, [pc, #192]	@ (8005bec <_prep_out_transaction+0xd8>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	01db      	lsls	r3, r3, #7
 8005b34:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf0 <_prep_out_transaction+0xdc>)
 8005b36:	4413      	add	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005b3a:	f002 f851 	bl	8007be0 <tud_mounted>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <_prep_out_transaction+0x44>
 8005b44:	f002 f85e 	bl	8007c04 <tud_suspended>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f083 0301 	eor.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <_prep_out_transaction+0x44>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <_prep_out_transaction+0x46>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8005b60:	f083 0301 	eor.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <_prep_out_transaction+0x5e>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <_prep_out_transaction+0x62>
 8005b72:	2300      	movs	r3, #0
 8005b74:	e035      	b.n	8005be2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3310      	adds	r3, #16
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 feab 	bl	80078d6 <tu_fifo_remaining>
 8005b80:	4603      	mov	r3, r0
 8005b82:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8005b84:	897b      	ldrh	r3, [r7, #10]
 8005b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b88:	d801      	bhi.n	8005b8e <_prep_out_transaction+0x7a>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e029      	b.n	8005be2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	78da      	ldrb	r2, [r3, #3]
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f003 fb44 	bl	8009224 <usbd_edpt_claim>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f083 0301 	eor.w	r3, r3, #1
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <_prep_out_transaction+0x98>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e01a      	b.n	8005be2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3310      	adds	r3, #16
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 fe90 	bl	80078d6 <tu_fifo_remaining>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8005bbe:	d908      	bls.n	8005bd2 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	78d9      	ldrb	r1, [r3, #3]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	7df8      	ldrb	r0, [r7, #23]
 8005bc8:	2340      	movs	r3, #64	@ 0x40
 8005bca:	f003 fb7b 	bl	80092c4 <usbd_edpt_xfer>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	e007      	b.n	8005be2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	78da      	ldrb	r2, [r3, #3]
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 fb4a 	bl	8009274 <usbd_edpt_release>
    return false;
 8005be0:	2300      	movs	r3, #0
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000dc4 	.word	0x20000dc4
 8005bf0:	20000eac 	.word	0x20000eac

08005bf4 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
 8005bfe:	f001 ffef 	bl	8007be0 <tud_mounted>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <tud_cdc_n_connected+0x28>
 8005c08:	f001 fffc 	bl	8007c04 <tud_suspended>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f083 0301 	eor.w	r3, r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <tud_cdc_n_connected+0x28>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <tud_cdc_n_connected+0x2a>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d019      	beq.n	8005c5c <tud_cdc_n_connected+0x68>
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	4a10      	ldr	r2, [pc, #64]	@ (8005c6c <tud_cdc_n_connected+0x78>)
 8005c2c:	21e8      	movs	r1, #232	@ 0xe8
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3304      	adds	r3, #4
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <tud_cdc_n_connected+0x68>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <tud_cdc_n_connected+0x6a>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2db      	uxtb	r3, r3
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000dc4 	.word	0x20000dc4

08005c70 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	22e8      	movs	r2, #232	@ 0xe8
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	3310      	adds	r3, #16
 8005c84:	4a04      	ldr	r2, [pc, #16]	@ (8005c98 <tud_cdc_n_available+0x28>)
 8005c86:	4413      	add	r3, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fdaf 	bl	80077ec <tu_fifo_count>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000dc4 	.word	0x20000dc4

08005c9c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	22e8      	movs	r2, #232	@ 0xe8
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf0 <tud_cdc_n_read+0x54>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f103 0010 	add.w	r0, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d802      	bhi.n	8005cce <tud_cdc_n_read+0x32>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	e001      	b.n	8005cd2 <tud_cdc_n_read+0x36>
 8005cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	f001 fe5a 	bl	800798e <tu_fifo_read_n>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff17 	bl	8005b14 <_prep_out_transaction>
  return num_read;
 8005ce6:	693b      	ldr	r3, [r7, #16]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000dc4 	.word	0x20000dc4

08005cf4 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	22e8      	movs	r2, #232	@ 0xe8
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	4a13      	ldr	r2, [pc, #76]	@ (8005d58 <tud_cdc_n_write+0x64>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f103 001c 	add.w	r0, r3, #28
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d802      	bhi.n	8005d26 <tud_cdc_n_write+0x32>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	e001      	b.n	8005d2a <tud_cdc_n_write+0x36>
 8005d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	f001 fe95 	bl	8007a5c <tu_fifo_write_n>
 8005d32:	4603      	mov	r3, r0
 8005d34:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	331c      	adds	r3, #28
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fd56 	bl	80077ec <tu_fifo_count>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b3f      	cmp	r3, #63	@ 0x3f
 8005d44:	d903      	bls.n	8005d4e <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f807 	bl	8005d5c <tud_cdc_n_write_flush>
  }

  return wr_count;
 8005d4e:	8a7b      	ldrh	r3, [r7, #18]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000dc4 	.word	0x20000dc4

08005d5c <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	22e8      	movs	r2, #232	@ 0xe8
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	4a39      	ldr	r2, [pc, #228]	@ (8005e54 <tud_cdc_n_write_flush+0xf8>)
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	01db      	lsls	r3, r3, #7
 8005d78:	4a37      	ldr	r2, [pc, #220]	@ (8005e58 <tud_cdc_n_write_flush+0xfc>)
 8005d7a:	4413      	add	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	f001 ff2f 	bl	8007be0 <tud_mounted>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <tud_cdc_n_write_flush+0x40>
 8005d88:	f001 ff3c 	bl	8007c04 <tud_suspended>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <tud_cdc_n_write_flush+0x40>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <tud_cdc_n_write_flush+0x42>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <tud_cdc_n_write_flush+0x56>
 8005dae:	2300      	movs	r3, #0
 8005db0:	e04c      	b.n	8005e4c <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	331c      	adds	r3, #28
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fd18 	bl	80077ec <tu_fifo_count>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e042      	b.n	8005e4c <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	789a      	ldrb	r2, [r3, #2]
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 fa26 	bl	8009224 <usbd_edpt_claim>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f083 0301 	eor.w	r3, r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <tud_cdc_n_write_flush+0x8c>
 8005de4:	2300      	movs	r3, #0
 8005de6:	e031      	b.n	8005e4c <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f103 001c 	add.w	r0, r3, #28
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3340      	adds	r3, #64	@ 0x40
 8005df2:	2240      	movs	r2, #64	@ 0x40
 8005df4:	4619      	mov	r1, r3
 8005df6:	f001 fdca 	bl	800798e <tu_fifo_read_n>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8005dfe:	89bb      	ldrh	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	7899      	ldrb	r1, [r3, #2]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005e0e:	89bb      	ldrh	r3, [r7, #12]
 8005e10:	7bf8      	ldrb	r0, [r7, #15]
 8005e12:	f003 fa57 	bl	80092c4 <usbd_edpt_xfer>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f083 0301 	eor.w	r3, r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <tud_cdc_n_write_flush+0xdc>
 8005e22:	4b0e      	ldr	r3, [pc, #56]	@ (8005e5c <tud_cdc_n_write_flush+0x100>)
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d000      	beq.n	8005e34 <tud_cdc_n_write_flush+0xd8>
 8005e32:	be00      	bkpt	0x0000
 8005e34:	2300      	movs	r3, #0
 8005e36:	e009      	b.n	8005e4c <tud_cdc_n_write_flush+0xf0>
    return count;
 8005e38:	89bb      	ldrh	r3, [r7, #12]
 8005e3a:	e007      	b.n	8005e4c <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	789a      	ldrb	r2, [r3, #2]
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f003 fa15 	bl	8009274 <usbd_edpt_release>
    return 0;
 8005e4a:	2300      	movs	r3, #0
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000dc4 	.word	0x20000dc4
 8005e58:	20000eac 	.word	0x20000eac
 8005e5c:	e000edf0 	.word	0xe000edf0

08005e60 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	22e8      	movs	r2, #232	@ 0xe8
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	3318      	adds	r3, #24
 8005e74:	4a05      	ldr	r2, [pc, #20]	@ (8005e8c <tud_cdc_n_write_available+0x2c>)
 8005e76:	4413      	add	r3, r2
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fd2b 	bl	80078d6 <tu_fifo_remaining>
 8005e80:	4603      	mov	r3, r0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000dc4 	.word	0x20000dc4

08005e90 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8005e96:	22e8      	movs	r2, #232	@ 0xe8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4824      	ldr	r0, [pc, #144]	@ (8005f2c <cdcd_init+0x9c>)
 8005e9c:	f006 f813 	bl	800bec6 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	71fb      	strb	r3, [r7, #7]
 8005ea4:	e03a      	b.n	8005f1c <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	22e8      	movs	r2, #232	@ 0xe8
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <cdcd_init+0x9c>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	22ff      	movs	r2, #255	@ 0xff
 8005eb8:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ec0:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f103 0010 	add.w	r0, r3, #16
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	2240      	movs	r2, #64	@ 0x40
 8005ee8:	f000 ffee 	bl	8006ec8 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	f103 001c 	add.w	r0, r3, #28
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <cdcd_init+0xa0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	2280      	movs	r2, #128	@ 0x80
 8005f12:	f000 ffd9 	bl	8006ec8 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	71fb      	strb	r3, [r7, #7]
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0c1      	beq.n	8005ea6 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20000dc4 	.word	0x20000dc4
 8005f30:	2000006c 	.word	0x2000006c

08005f34 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8005f38:	2301      	movs	r3, #1
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	e037      	b.n	8005fc4 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	22e8      	movs	r2, #232	@ 0xe8
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd4 <cdcd_reset+0x90>)
 8005f5e:	4413      	add	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8005f62:	2205      	movs	r2, #5
 8005f64:	2100      	movs	r1, #0
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f005 ffad 	bl	800bec6 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <cdcd_reset+0x94>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fd90 	bl	8007aa4 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8005f84:	4b14      	ldr	r3, [pc, #80]	@ (8005fd8 <cdcd_reset+0x94>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	331c      	adds	r3, #28
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 fd84 	bl	8007aa4 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f103 021c 	add.w	r2, r3, #28
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <cdcd_reset+0x94>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f001 fd84 	bl	8007ac6 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0c4      	beq.n	8005f54 <cdcd_reset+0x10>
  }
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000dc4 	.word	0x20000dc4
 8005fd8:	2000006c 	.word	0x2000006c

08005fdc <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b09a      	sub	sp, #104	@ 0x68
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	6039      	str	r1, [r7, #0]
 8005fe6:	71fb      	strb	r3, [r7, #7]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	795b      	ldrb	r3, [r3, #5]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d103      	bne.n	8005ffc <cdcd_open+0x20>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	799b      	ldrb	r3, [r3, #6]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d001      	beq.n	8006000 <cdcd_open+0x24>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e0da      	b.n	80061b6 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006000:	2300      	movs	r3, #0
 8006002:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006006:	e010      	b.n	800602a <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006008:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800600c:	22e8      	movs	r2, #232	@ 0xe8
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	4a6b      	ldr	r2, [pc, #428]	@ (80061c0 <cdcd_open+0x1e4>)
 8006014:	4413      	add	r3, r2
 8006016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800601a:	789b      	ldrb	r3, [r3, #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006020:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006024:	3301      	adds	r3, #1
 8006026:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800602a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0ea      	beq.n	8006008 <cdcd_open+0x2c>
 8006032:	e000      	b.n	8006036 <cdcd_open+0x5a>
      break;
 8006034:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8006036:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <cdcd_open+0x78>
 800603e:	4b61      	ldr	r3, [pc, #388]	@ (80061c4 <cdcd_open+0x1e8>)
 8006040:	647b      	str	r3, [r7, #68]	@ 0x44
 8006042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d000      	beq.n	8006050 <cdcd_open+0x74>
 800604e:	be00      	bkpt	0x0000
 8006050:	2300      	movs	r3, #0
 8006052:	e0b0      	b.n	80061b6 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	789a      	ldrb	r2, [r3, #2]
 8006058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800605a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800605c:	2309      	movs	r3, #9
 800605e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 800606a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006072:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8006074:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006076:	e013      	b.n	80060a0 <cdcd_open+0xc4>
 8006078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607a:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006080:	461a      	mov	r2, r3
 8006082:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006086:	4413      	add	r3, r2
 8006088:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800608c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800609e:	657b      	str	r3, [r7, #84]	@ 0x54
 80060a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	3301      	adds	r3, #1
 80060a8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80060aa:	2b24      	cmp	r3, #36	@ 0x24
 80060ac:	d104      	bne.n	80060b8 <cdcd_open+0xdc>
 80060ae:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80060b2:	88bb      	ldrh	r3, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d9df      	bls.n	8006078 <cdcd_open+0x9c>
 80060b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060be:	3301      	adds	r3, #1
 80060c0:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d12f      	bne.n	8006126 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060ce:	4618      	mov	r0, r3
 80060d0:	f003 f862 	bl	8009198 <usbd_edpt_open>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f083 0301 	eor.w	r3, r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <cdcd_open+0x11a>
 80060e0:	4b38      	ldr	r3, [pc, #224]	@ (80061c4 <cdcd_open+0x1e8>)
 80060e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d000      	beq.n	80060f2 <cdcd_open+0x116>
 80060f0:	be00      	bkpt	0x0000
 80060f2:	2300      	movs	r3, #0
 80060f4:	e05f      	b.n	80061b6 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80060f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f8:	789a      	ldrb	r2, [r3, #2]
 80060fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060fc:	705a      	strb	r2, [r3, #1]
 80060fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006100:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006106:	461a      	mov	r2, r3
 8006108:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800610c:	4413      	add	r3, r2
 800610e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006124:	657b      	str	r3, [r7, #84]	@ 0x54
 8006126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006128:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3301      	adds	r3, #1
 800612e:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006130:	2b04      	cmp	r3, #4
 8006132:	d139      	bne.n	80061a8 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8006134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006136:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d135      	bne.n	80061a8 <cdcd_open+0x1cc>
 800613c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8006144:	461a      	mov	r2, r3
 8006146:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800614a:	4413      	add	r3, r2
 800614c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006152:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006162:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8006164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006166:	3303      	adds	r3, #3
 8006168:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800616a:	3202      	adds	r2, #2
 800616c:	79f8      	ldrb	r0, [r7, #7]
 800616e:	9201      	str	r2, [sp, #4]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2302      	movs	r3, #2
 8006174:	2202      	movs	r2, #2
 8006176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006178:	f002 ffa6 	bl	80090c8 <usbd_open_edpt_pair>
 800617c:	4603      	mov	r3, r0
 800617e:	f083 0301 	eor.w	r3, r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <cdcd_open+0x1c2>
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <cdcd_open+0x1e8>)
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d000      	beq.n	800619a <cdcd_open+0x1be>
 8006198:	be00      	bkpt	0x0000
 800619a:	2300      	movs	r3, #0
 800619c:	e00b      	b.n	80061b6 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 800619e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80061a2:	330e      	adds	r3, #14
 80061a4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80061a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fcb1 	bl	8005b14 <_prep_out_transaction>

  return drv_len;
 80061b2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3760      	adds	r7, #96	@ 0x60
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000dc4 	.word	0x20000dc4
 80061c4:	e000edf0 	.word	0xe000edf0

080061c8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	603a      	str	r2, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
 80061d4:	460b      	mov	r3, r1
 80061d6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d001      	beq.n	80061ea <cdcd_control_xfer_cb+0x22>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e0e6      	b.n	80063b8 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80061f0:	e014      	b.n	800621c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80061f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061f6:	22e8      	movs	r2, #232	@ 0xe8
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	4a70      	ldr	r2, [pc, #448]	@ (80063c0 <cdcd_control_xfer_cb+0x1f8>)
 80061fe:	4413      	add	r3, r2
 8006200:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	889b      	ldrh	r3, [r3, #4]
 800620c:	b29b      	uxth	r3, r3
 800620e:	429a      	cmp	r2, r3
 8006210:	d009      	beq.n	8006226 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006216:	3301      	adds	r3, #1
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0e6      	beq.n	80061f2 <cdcd_control_xfer_cb+0x2a>
 8006224:	e000      	b.n	8006228 <cdcd_control_xfer_cb+0x60>
      break;
 8006226:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <cdcd_control_xfer_cb+0x6c>
 8006230:	2300      	movs	r3, #0
 8006232:	e0c1      	b.n	80063b8 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	3b20      	subs	r3, #32
 800623a:	2b03      	cmp	r3, #3
 800623c:	f200 80b2 	bhi.w	80063a4 <cdcd_control_xfer_cb+0x1dc>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <cdcd_control_xfer_cb+0x80>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006259 	.word	0x08006259
 800624c:	08006295 	.word	0x08006295
 8006250:	080062af 	.word	0x080062af
 8006254:	08006373 	.word	0x08006373
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006258:	79bb      	ldrb	r3, [r7, #6]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d108      	bne.n	8006270 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f103 0208 	add.w	r2, r3, #8
 8006264:	79f8      	ldrb	r0, [r7, #7]
 8006266:	2307      	movs	r3, #7
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	f003 fa13 	bl	8009694 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 800626e:	e09b      	b.n	80063a8 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006270:	79bb      	ldrb	r3, [r7, #6]
 8006272:	2b03      	cmp	r3, #3
 8006274:	f040 8098 	bne.w	80063a8 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8006278:	4b52      	ldr	r3, [pc, #328]	@ (80063c4 <cdcd_control_xfer_cb+0x1fc>)
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8094 	beq.w	80063a8 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	f103 0208 	add.w	r2, r3, #8
 8006286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f3af 8000 	nop.w
      break;
 8006292:	e089      	b.n	80063a8 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006294:	79bb      	ldrb	r3, [r7, #6]
 8006296:	2b01      	cmp	r3, #1
 8006298:	f040 8088 	bne.w	80063ac <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f103 0208 	add.w	r2, r3, #8
 80062a2:	79f8      	ldrb	r0, [r7, #7]
 80062a4:	2307      	movs	r3, #7
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	f003 f9f4 	bl	8009694 <tud_control_xfer>
      }
      break;
 80062ac:	e07e      	b.n	80063ac <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80062ae:	79bb      	ldrb	r3, [r7, #6]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d105      	bne.n	80062c0 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f003 f979 	bl	80095b0 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80062be:	e077      	b.n	80063b0 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 80062c0:	79bb      	ldrb	r3, [r7, #6]
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d174      	bne.n	80063b0 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	885b      	ldrh	r3, [r3, #2]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf14      	ite	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	2300      	moveq	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	885b      	ldrh	r3, [r3, #2]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	b29b      	uxth	r3, r3
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 800631a:	4b2b      	ldr	r3, [pc, #172]	@ (80063c8 <cdcd_control_xfer_cb+0x200>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d013      	beq.n	8006350 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	f103 021c 	add.w	r2, r3, #28
 800632e:	7ffb      	ldrb	r3, [r7, #31]
 8006330:	2b00      	cmp	r3, #0
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f001 fbbc 	bl	8007ac6 <tu_fifo_set_overwritable>
 800634e:	e005      	b.n	800635c <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	331c      	adds	r3, #28
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fbb5 	bl	8007ac6 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 800635c:	4b1b      	ldr	r3, [pc, #108]	@ (80063cc <cdcd_control_xfer_cb+0x204>)
 800635e:	2b00      	cmp	r3, #0
 8006360:	d026      	beq.n	80063b0 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8006362:	7fba      	ldrb	r2, [r7, #30]
 8006364:	7ff9      	ldrb	r1, [r7, #31]
 8006366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800636a:	4618      	mov	r0, r3
 800636c:	f7fa fdaa 	bl	8000ec4 <tud_cdc_line_state_cb>
      break;
 8006370:	e01e      	b.n	80063b0 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8006372:	79bb      	ldrb	r3, [r7, #6]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d105      	bne.n	8006384 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f003 f917 	bl	80095b0 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8006382:	e017      	b.n	80063b4 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006384:	79bb      	ldrb	r3, [r7, #6]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d114      	bne.n	80063b4 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <cdcd_control_xfer_cb+0x208>)
 800638c:	2b00      	cmp	r3, #0
 800638e:	d011      	beq.n	80063b4 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	b29a      	uxth	r2, r3
 8006396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f3af 8000 	nop.w
      break;
 80063a2:	e007      	b.n	80063b4 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80063a4:	2300      	movs	r3, #0
 80063a6:	e007      	b.n	80063b8 <cdcd_control_xfer_cb+0x1f0>
      break;
 80063a8:	bf00      	nop
 80063aa:	e004      	b.n	80063b6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80063b4:	bf00      	nop
  }

  return true;
 80063b6:	2301      	movs	r3, #1
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	@ 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000dc4 	.word	0x20000dc4
 80063c4:	00000000 	.word	0x00000000
 80063c8:	2000006c 	.word	0x2000006c
 80063cc:	08000ec5 	.word	0x08000ec5
 80063d0:	00000000 	.word	0x00000000

080063d4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4603      	mov	r3, r0
 80063de:	71fb      	strb	r3, [r7, #7]
 80063e0:	460b      	mov	r3, r1
 80063e2:	71bb      	strb	r3, [r7, #6]
 80063e4:	4613      	mov	r3, r2
 80063e6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e013      	b.n	8006416 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
 80063f0:	22e8      	movs	r2, #232	@ 0xe8
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	4a5f      	ldr	r2, [pc, #380]	@ (8006574 <cdcd_xfer_cb+0x1a0>)
 80063f8:	4413      	add	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	79ba      	ldrb	r2, [r7, #6]
 8006402:	429a      	cmp	r2, r3
 8006404:	d00a      	beq.n	800641c <cdcd_xfer_cb+0x48>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	789b      	ldrb	r3, [r3, #2]
 800640a:	79ba      	ldrb	r2, [r7, #6]
 800640c:	429a      	cmp	r2, r3
 800640e:	d005      	beq.n	800641c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	3301      	adds	r3, #1
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	7ffb      	ldrb	r3, [r7, #31]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0e8      	beq.n	80063ee <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800641c:	7ffb      	ldrb	r3, [r7, #31]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <cdcd_xfer_cb+0x64>
 8006422:	4b55      	ldr	r3, [pc, #340]	@ (8006578 <cdcd_xfer_cb+0x1a4>)
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d000      	beq.n	8006434 <cdcd_xfer_cb+0x60>
 8006432:	be00      	bkpt	0x0000
 8006434:	2300      	movs	r3, #0
 8006436:	e098      	b.n	800656a <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006438:	7ffb      	ldrb	r3, [r7, #31]
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	4a4f      	ldr	r2, [pc, #316]	@ (800657c <cdcd_xfer_cb+0x1a8>)
 800643e:	4413      	add	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	79ba      	ldrb	r2, [r7, #6]
 8006448:	429a      	cmp	r2, r3
 800644a:	d148      	bne.n	80064de <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	3310      	adds	r3, #16
 8006450:	6939      	ldr	r1, [r7, #16]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	b292      	uxth	r2, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f001 fb00 	bl	8007a5c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 800645c:	4b48      	ldr	r3, [pc, #288]	@ (8006580 <cdcd_xfer_cb+0x1ac>)
 800645e:	2b00      	cmp	r3, #0
 8006460:	d027      	beq.n	80064b2 <cdcd_xfer_cb+0xde>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	795b      	ldrb	r3, [r3, #5]
 8006466:	2bff      	cmp	r3, #255	@ 0xff
 8006468:	d023      	beq.n	80064b2 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e01c      	b.n	80064aa <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	795a      	ldrb	r2, [r3, #5]
 8006474:	6939      	ldr	r1, [r7, #16]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	440b      	add	r3, r1
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d111      	bne.n	80064a4 <cdcd_xfer_cb+0xd0>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	3310      	adds	r3, #16
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f9e3 	bl	8007850 <tu_fifo_empty>
 800648a:	4603      	mov	r3, r0
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	795a      	ldrb	r2, [r3, #5]
 800649a:	7ffb      	ldrb	r3, [r7, #31]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	3301      	adds	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3de      	bcc.n	8006470 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80064b2:	4b34      	ldr	r3, [pc, #208]	@ (8006584 <cdcd_xfer_cb+0x1b0>)
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00e      	beq.n	80064d6 <cdcd_xfer_cb+0x102>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	3310      	adds	r3, #16
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f9c7 	bl	8007850 <tu_fifo_empty>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f083 0301 	eor.w	r3, r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fa fd23 	bl	8000f1c <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fb1b 	bl	8005b14 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	789b      	ldrb	r3, [r3, #2]
 80064e2:	79ba      	ldrb	r2, [r7, #6]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d13f      	bne.n	8006568 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80064e8:	4b27      	ldr	r3, [pc, #156]	@ (8006588 <cdcd_xfer_cb+0x1b4>)
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fc2f 	bl	8005d5c <tud_cdc_n_write_flush>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d131      	bne.n	8006568 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	331c      	adds	r3, #28
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f96f 	bl	80077ec <tu_fifo_count>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d129      	bne.n	8006568 <cdcd_xfer_cb+0x194>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d026      	beq.n	8006568 <cdcd_xfer_cb+0x194>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006520:	2b00      	cmp	r3, #0
 8006522:	d121      	bne.n	8006568 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	789a      	ldrb	r2, [r3, #2]
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fe79 	bl	8009224 <usbd_edpt_claim>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d017      	beq.n	8006568 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	7899      	ldrb	r1, [r3, #2]
 800653c:	79f8      	ldrb	r0, [r7, #7]
 800653e:	2300      	movs	r3, #0
 8006540:	2200      	movs	r2, #0
 8006542:	f002 febf 	bl	80092c4 <usbd_edpt_xfer>
 8006546:	4603      	mov	r3, r0
 8006548:	f083 0301 	eor.w	r3, r3, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <cdcd_xfer_cb+0x194>
 8006552:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <cdcd_xfer_cb+0x1a4>)
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d000      	beq.n	8006564 <cdcd_xfer_cb+0x190>
 8006562:	be00      	bkpt	0x0000
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8006568:	2301      	movs	r3, #1
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000dc4 	.word	0x20000dc4
 8006578:	e000edf0 	.word	0xe000edf0
 800657c:	20000eac 	.word	0x20000eac
 8006580:	00000000 	.word	0x00000000
 8006584:	08000f1d 	.word	0x08000f1d
 8006588:	00000000 	.word	0x00000000

0800658c <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	460a      	mov	r2, r1
 8006596:	71fb      	strb	r3, [r7, #7]
 8006598:	4613      	mov	r3, r2
 800659a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800659c:	2301      	movs	r3, #1
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	603a      	str	r2, [r7, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	71fb      	strb	r3, [r7, #7]
 80065b8:	460b      	mov	r3, r1
 80065ba:	71bb      	strb	r3, [r7, #6]
 80065bc:	4613      	mov	r3, r2
 80065be:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80065da:	79fa      	ldrb	r2, [r7, #7]
 80065dc:	491b      	ldr	r1, [pc, #108]	@ (800664c <tud_hid_n_ready+0x80>)
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3301      	adds	r3, #1
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	73bb      	strb	r3, [r7, #14]
 80065ee:	f001 faf7 	bl	8007be0 <tud_mounted>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <tud_hid_n_ready+0x40>
 80065f8:	f001 fb04 	bl	8007c04 <tud_suspended>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f083 0301 	eor.w	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <tud_hid_n_ready+0x40>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <tud_hid_n_ready+0x42>
 800660c:	2300      	movs	r3, #0
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <tud_hid_n_ready+0x6e>
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <tud_hid_n_ready+0x6e>
 800661e:	7bba      	ldrb	r2, [r7, #14]
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	4611      	mov	r1, r2
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fec3 	bl	80093b0 <usbd_edpt_busy>
 800662a:	4603      	mov	r3, r0
 800662c:	f083 0301 	eor.w	r3, r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <tud_hid_n_ready+0x6e>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <tud_hid_n_ready+0x70>
 800663a:	2300      	movs	r3, #0
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	b2db      	uxtb	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000f2c 	.word	0x20000f2c

08006650 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	@ 0x38
 8006654:	af00      	add	r7, sp, #0
 8006656:	603a      	str	r2, [r7, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	4603      	mov	r3, r0
 800665c:	71fb      	strb	r3, [r7, #7]
 800665e:	460b      	mov	r3, r1
 8006660:	71bb      	strb	r3, [r7, #6]
 8006662:	4613      	mov	r3, r2
 8006664:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <tud_hid_n_report+0x20>
 800666c:	2300      	movs	r3, #0
 800666e:	e06d      	b.n	800674c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8006676:	79fa      	ldrb	r2, [r7, #7]
 8006678:	4613      	mov	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4a34      	ldr	r2, [pc, #208]	@ (8006754 <tud_hid_n_report+0x104>)
 8006682:	4413      	add	r3, r2
 8006684:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8006686:	79fa      	ldrb	r2, [r7, #7]
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4a31      	ldr	r2, [pc, #196]	@ (8006758 <tud_hid_n_report+0x108>)
 8006692:	4413      	add	r3, r2
 8006694:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	785a      	ldrb	r2, [r3, #1]
 800669a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f002 fdbf 	bl	8009224 <usbd_edpt_claim>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f083 0301 	eor.w	r3, r3, #1
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <tud_hid_n_report+0x66>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e04a      	b.n	800674c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80066b6:	79bb      	ldrb	r3, [r7, #6]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d021      	beq.n	8006700 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	79ba      	ldrb	r2, [r7, #6]
 80066c0:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c4:	3310      	adds	r3, #16
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	88bb      	ldrh	r3, [r7, #4]
 80066ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80066cc:	220f      	movs	r2, #15
 80066ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	623a      	str	r2, [r7, #32]
 80066d4:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d202      	bcs.n	80066e4 <tud_hid_n_report+0x94>
    return -1;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	e005      	b.n	80066f0 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	6a39      	ldr	r1, [r7, #32]
 80066e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ea:	f005 fcc4 	bl	800c076 <memcpy>
  return 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <tud_hid_n_report+0xa8>
 80066f4:	2300      	movs	r3, #0
 80066f6:	e029      	b.n	800674c <tud_hid_n_report+0xfc>
    len++;
 80066f8:	88bb      	ldrh	r3, [r7, #4]
 80066fa:	3301      	adds	r3, #1
 80066fc:	80bb      	strh	r3, [r7, #4]
 80066fe:	e01a      	b.n	8006736 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	f103 0210 	add.w	r2, r3, #16
 8006706:	88bb      	ldrh	r3, [r7, #4]
 8006708:	61ba      	str	r2, [r7, #24]
 800670a:	2210      	movs	r2, #16
 800670c:	617a      	str	r2, [r7, #20]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	613a      	str	r2, [r7, #16]
 8006712:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	429a      	cmp	r2, r3
 800671a:	d202      	bcs.n	8006722 <tud_hid_n_report+0xd2>
    return -1;
 800671c:	f04f 33ff 	mov.w	r3, #4294967295
 8006720:	e005      	b.n	800672e <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	6939      	ldr	r1, [r7, #16]
 8006726:	69b8      	ldr	r0, [r7, #24]
 8006728:	f005 fca5 	bl	800c076 <memcpy>
  return 0;
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <tud_hid_n_report+0xe6>
 8006732:	2300      	movs	r3, #0
 8006734:	e00a      	b.n	800674c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	7859      	ldrb	r1, [r3, #1]
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	f103 0210 	add.w	r2, r3, #16
 8006740:	88bb      	ldrh	r3, [r7, #4]
 8006742:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8006746:	f002 fdbd 	bl	80092c4 <usbd_edpt_xfer>
 800674a:	4603      	mov	r3, r0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3738      	adds	r7, #56	@ 0x38
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000f2c 	.word	0x20000f2c
 8006758:	20000f38 	.word	0x20000f38

0800675c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4603      	mov	r3, r0
 8006766:	71fb      	strb	r3, [r7, #7]
 8006768:	460b      	mov	r3, r1
 800676a:	71bb      	strb	r3, [r7, #6]
 800676c:	4613      	mov	r3, r2
 800676e:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8006770:	797b      	ldrb	r3, [r7, #5]
 8006772:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	f107 030a 	add.w	r3, r7, #10
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	6019      	str	r1, [r3, #0]
 8006788:	8892      	ldrh	r2, [r2, #4]
 800678a:	809a      	strh	r2, [r3, #4]
 800678c:	e007      	b.n	800679e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800678e:	f107 0308 	add.w	r3, r7, #8
 8006792:	3302      	adds	r3, #2
 8006794:	2206      	movs	r2, #6
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f005 fb94 	bl	800bec6 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800679e:	f107 0208 	add.w	r2, r7, #8
 80067a2:	79b9      	ldrb	r1, [r7, #6]
 80067a4:	79f8      	ldrb	r0, [r7, #7]
 80067a6:	2308      	movs	r3, #8
 80067a8:	f7ff ff52 	bl	8006650 <tud_hid_n_report>
 80067ac:	4603      	mov	r3, r0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80067b6:	b580      	push	{r7, lr}
 80067b8:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80067ba:	2000      	movs	r0, #0
 80067bc:	f000 f80a 	bl	80067d4 <hidd_reset>
}
 80067c0:	bf00      	nop
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <hidd_deinit>:

bool hidd_deinit(void) {
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return true;
 80067c8:	2301      	movs	r3, #1
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80067de:	220c      	movs	r2, #12
 80067e0:	2100      	movs	r1, #0
 80067e2:	4803      	ldr	r0, [pc, #12]	@ (80067f0 <hidd_reset+0x1c>)
 80067e4:	f005 fb6f 	bl	800bec6 <memset>
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000f2c 	.word	0x20000f2c

080067f4 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b094      	sub	sp, #80	@ 0x50
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
 8006800:	4613      	mov	r3, r2
 8006802:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	795b      	ldrb	r3, [r3, #5]
 8006808:	2b03      	cmp	r3, #3
 800680a:	d001      	beq.n	8006810 <hidd_open+0x1c>
 800680c:	2300      	movs	r3, #0
 800680e:	e0ce      	b.n	80069ae <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	791b      	ldrb	r3, [r3, #4]
 8006814:	461a      	mov	r2, r3
 8006816:	00d2      	lsls	r2, r2, #3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 800681c:	3312      	adds	r3, #18
 800681e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8006822:	88ba      	ldrh	r2, [r7, #4]
 8006824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006828:	429a      	cmp	r2, r3
 800682a:	d20a      	bcs.n	8006842 <hidd_open+0x4e>
 800682c:	4b62      	ldr	r3, [pc, #392]	@ (80069b8 <hidd_open+0x1c4>)
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d000      	beq.n	800683e <hidd_open+0x4a>
 800683c:	be00      	bkpt	0x0000
 800683e:	2300      	movs	r3, #0
 8006840:	e0b5      	b.n	80069ae <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8006842:	2300      	movs	r3, #0
 8006844:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006848:	e011      	b.n	800686e <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800684a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800684e:	4613      	mov	r3, r2
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4a59      	ldr	r2, [pc, #356]	@ (80069bc <hidd_open+0x1c8>)
 8006858:	4413      	add	r3, r2
 800685a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8006864:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006868:	3301      	adds	r3, #1
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0e9      	beq.n	800684a <hidd_open+0x56>
 8006876:	e000      	b.n	800687a <hidd_open+0x86>
      break;
 8006878:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800687a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <hidd_open+0xa4>
 8006882:	4b4d      	ldr	r3, [pc, #308]	@ (80069b8 <hidd_open+0x1c4>)
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d000      	beq.n	8006894 <hidd_open+0xa0>
 8006892:	be00      	bkpt	0x0000
 8006894:	2300      	movs	r3, #0
 8006896:	e08a      	b.n	80069ae <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8006898:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800689c:	4613      	mov	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	4413      	add	r3, r2
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	4a46      	ldr	r2, [pc, #280]	@ (80069c0 <hidd_open+0x1cc>)
 80068a6:	4413      	add	r3, r2
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b0:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80068c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80068cc:	2b21      	cmp	r3, #33	@ 0x21
 80068ce:	d00a      	beq.n	80068e6 <hidd_open+0xf2>
 80068d0:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <hidd_open+0x1c4>)
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d000      	beq.n	80068e2 <hidd_open+0xee>
 80068e0:	be00      	bkpt	0x0000
 80068e2:	2300      	movs	r3, #0
 80068e4:	e063      	b.n	80069ae <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80068e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	7919      	ldrb	r1, [r3, #4]
 8006904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006906:	3302      	adds	r3, #2
 8006908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690a:	3201      	adds	r2, #1
 800690c:	79f8      	ldrb	r0, [r7, #7]
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2303      	movs	r3, #3
 8006914:	460a      	mov	r2, r1
 8006916:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006918:	f002 fbd6 	bl	80090c8 <usbd_open_edpt_pair>
 800691c:	4603      	mov	r3, r0
 800691e:	f083 0301 	eor.w	r3, r3, #1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <hidd_open+0x14a>
 8006928:	4b23      	ldr	r3, [pc, #140]	@ (80069b8 <hidd_open+0x1c4>)
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d000      	beq.n	800693a <hidd_open+0x146>
 8006938:	be00      	bkpt	0x0000
 800693a:	2300      	movs	r3, #0
 800693c:	e037      	b.n	80069ae <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	799b      	ldrb	r3, [r3, #6]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d103      	bne.n	800694e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	79da      	ldrb	r2, [r3, #7]
 800694a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800694e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006950:	2201      	movs	r2, #1
 8006952:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	789a      	ldrb	r2, [r3, #2]
 8006958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 800695c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	3307      	adds	r3, #7
 8006962:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800696a:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 800696c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800696e:	789b      	ldrb	r3, [r3, #2]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01a      	beq.n	80069aa <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8006974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006976:	7899      	ldrb	r1, [r3, #2]
 8006978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697a:	f103 0220 	add.w	r2, r3, #32
 800697e:	79f8      	ldrb	r0, [r7, #7]
 8006980:	2310      	movs	r3, #16
 8006982:	f002 fc9f 	bl	80092c4 <usbd_edpt_xfer>
 8006986:	4603      	mov	r3, r0
 8006988:	f083 0301 	eor.w	r3, r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <hidd_open+0x1b6>
 8006992:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <hidd_open+0x1c4>)
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d000      	beq.n	80069a4 <hidd_open+0x1b0>
 80069a2:	be00      	bkpt	0x0000
 80069a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069a8:	e001      	b.n	80069ae <hidd_open+0x1ba>
  }

  return drv_len;
 80069aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3748      	adds	r7, #72	@ 0x48
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	e000edf0 	.word	0xe000edf0
 80069bc:	20000f2c 	.word	0x20000f2c
 80069c0:	20000f38 	.word	0x20000f38

080069c4 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b094      	sub	sp, #80	@ 0x50
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	4603      	mov	r3, r0
 80069cc:	603a      	str	r2, [r7, #0]
 80069ce:	71fb      	strb	r3, [r7, #7]
 80069d0:	460b      	mov	r3, r1
 80069d2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d001      	beq.n	80069e6 <hidd_control_xfer_cb+0x22>
 80069e2:	2300      	movs	r3, #0
 80069e4:	e1d6      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	889b      	ldrh	r3, [r3, #4]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80069f0:	2300      	movs	r3, #0
 80069f2:	77bb      	strb	r3, [r7, #30]
 80069f4:	e00f      	b.n	8006a16 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80069f6:	7fba      	ldrb	r2, [r7, #30]
 80069f8:	498f      	ldr	r1, [pc, #572]	@ (8006c38 <hidd_control_xfer_cb+0x274>)
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	7ffa      	ldrb	r2, [r7, #31]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d101      	bne.n	8006a10 <hidd_control_xfer_cb+0x4c>
      return i;
 8006a0c:	7fbb      	ldrb	r3, [r7, #30]
 8006a0e:	e006      	b.n	8006a1e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006a10:	7fbb      	ldrb	r3, [r7, #30]
 8006a12:	3301      	adds	r3, #1
 8006a14:	77bb      	strb	r3, [r7, #30]
 8006a16:	7fbb      	ldrb	r3, [r7, #30]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0ec      	beq.n	80069f6 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8006a1c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8006a1e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8006a22:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <hidd_control_xfer_cb+0x6a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e1b2      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8006a2e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4a7f      	ldr	r2, [pc, #508]	@ (8006c38 <hidd_control_xfer_cb+0x274>)
 8006a3c:	4413      	add	r3, r2
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8006a40:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	4a7b      	ldr	r2, [pc, #492]	@ (8006c3c <hidd_control_xfer_cb+0x278>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d145      	bne.n	8006aec <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8006a60:	79bb      	ldrb	r3, [r7, #6]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	f040 8195 	bne.w	8006d92 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	885b      	ldrh	r3, [r3, #2]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006a70:	8bbb      	ldrh	r3, [r7, #28]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d11b      	bne.n	8006abc <hidd_control_xfer_cb+0xf8>
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a88:	2b21      	cmp	r3, #33	@ 0x21
 8006a8a:	d117      	bne.n	8006abc <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <hidd_control_xfer_cb+0xd4>
 8006a94:	2300      	movs	r3, #0
 8006a96:	e17d      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8006a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	79f8      	ldrb	r0, [r7, #7]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	f002 fdf5 	bl	8009694 <tud_control_xfer>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f083 0301 	eor.w	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 816d 	beq.w	8006d92 <hidd_control_xfer_cb+0x3ce>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e16b      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d111      	bne.n	8006ae8 <hidd_control_xfer_cb+0x124>
 8006ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ac8:	2b22      	cmp	r3, #34	@ 0x22
 8006aca:	d10d      	bne.n	8006ae8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8006acc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fc f941 	bl	8002d58 <tud_hid_descriptor_report_cb>
 8006ad6:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	889b      	ldrh	r3, [r3, #4]
 8006adc:	79f8      	ldrb	r0, [r7, #7]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	f002 fdd7 	bl	8009694 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8006ae6:	e154      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e153      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	f040 813e 	bne.w	8006d78 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	2b0a      	cmp	r3, #10
 8006b04:	f200 8136 	bhi.w	8006d74 <hidd_control_xfer_cb+0x3b0>
 8006b08:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <hidd_control_xfer_cb+0x14c>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	08006d13 	.word	0x08006d13
 8006b18:	08006d29 	.word	0x08006d29
 8006b1c:	08006d75 	.word	0x08006d75
 8006b20:	08006d75 	.word	0x08006d75
 8006b24:	08006d75 	.word	0x08006d75
 8006b28:	08006d75 	.word	0x08006d75
 8006b2c:	08006d75 	.word	0x08006d75
 8006b30:	08006c13 	.word	0x08006c13
 8006b34:	08006ccd 	.word	0x08006ccd
 8006b38:	08006d3f 	.word	0x08006d3f
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006b3c:	79bb      	ldrb	r3, [r7, #6]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f040 811c 	bne.w	8006d7c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	885b      	ldrh	r3, [r3, #2]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	82bb      	strh	r3, [r7, #20]
 8006b4c:	8abb      	ldrh	r3, [r7, #20]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006b60:	8afb      	ldrh	r3, [r7, #22]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	88db      	ldrh	r3, [r3, #6]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	837b      	strh	r3, [r7, #26]
 8006b74:	2310      	movs	r3, #16
 8006b76:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006b78:	8b7a      	ldrh	r2, [r7, #26]
 8006b7a:	8b3b      	ldrh	r3, [r7, #24]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bf28      	it	cs
 8006b80:	4613      	movcs	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8006b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d013      	beq.n	8006bbe <hidd_control_xfer_cb+0x1fa>
 8006b96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d90f      	bls.n	8006bbe <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ba4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006ba8:	701a      	strb	r2, [r3, #0]
            req_len--;
 8006baa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8006bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8006bbe:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006bc2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8006bc6:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8006bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd2:	f7fa faeb 	bl	80011ac <tud_hid_get_report_cb>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006bde:	4413      	add	r3, r2
 8006be0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8006be4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <hidd_control_xfer_cb+0x23e>
 8006bec:	4b14      	ldr	r3, [pc, #80]	@ (8006c40 <hidd_control_xfer_cb+0x27c>)
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d000      	beq.n	8006bfe <hidd_control_xfer_cb+0x23a>
 8006bfc:	be00      	bkpt	0x0000
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e0c8      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8006c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006c08:	79f8      	ldrb	r0, [r7, #7]
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	f002 fd42 	bl	8009694 <tud_control_xfer>
        }
        break;
 8006c10:	e0b4      	b.n	8006d7c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006c12:	79bb      	ldrb	r3, [r7, #6]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d115      	bne.n	8006c44 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d901      	bls.n	8006c26 <hidd_control_xfer_cb+0x262>
 8006c22:	2300      	movs	r3, #0
 8006c24:	e0b6      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	88db      	ldrh	r3, [r3, #6]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	79f8      	ldrb	r0, [r7, #7]
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	f002 fd2f 	bl	8009694 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8006c36:	e0a3      	b.n	8006d80 <hidd_control_xfer_cb+0x3bc>
 8006c38:	20000f2c 	.word	0x20000f2c
 8006c3c:	20000f38 	.word	0x20000f38
 8006c40:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8006c44:	79bb      	ldrb	r3, [r7, #6]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	f040 809a 	bne.w	8006d80 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006c54:	89bb      	ldrh	r3, [r7, #12]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	885b      	ldrh	r3, [r3, #2]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006c68:	89fb      	ldrh	r3, [r7, #14]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	88db      	ldrh	r3, [r3, #6]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	827b      	strh	r3, [r7, #18]
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006c80:	8a7a      	ldrh	r2, [r7, #18]
 8006c82:	8a3b      	ldrh	r3, [r7, #16]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	bf28      	it	cs
 8006c88:	4613      	movcs	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8006c8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <hidd_control_xfer_cb+0x2f0>
 8006c96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d90b      	bls.n	8006cb4 <hidd_control_xfer_cb+0x2f0>
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d105      	bne.n	8006cb4 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006caa:	3301      	adds	r3, #1
 8006cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8006cae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8006cb4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006cb8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8006cbc:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8006cc0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc6:	f7fa fa82 	bl	80011ce <tud_hid_set_report_cb>
        break;
 8006cca:	e059      	b.n	8006d80 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8006ccc:	79bb      	ldrb	r3, [r7, #6]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d158      	bne.n	8006d84 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006cda:	897b      	ldrh	r3, [r7, #10]
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce4:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce8:	79da      	ldrb	r2, [r3, #7]
 8006cea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fc4b 	bl	800658c <tud_hid_set_idle_cb>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f083 0301 	eor.w	r3, r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <hidd_control_xfer_cb+0x342>
 8006d02:	2300      	movs	r3, #0
 8006d04:	e046      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 fc50 	bl	80095b0 <tud_control_status>
        }
        break;
 8006d10:	e038      	b.n	8006d84 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8006d12:	79bb      	ldrb	r3, [r7, #6]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d137      	bne.n	8006d88 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	1dda      	adds	r2, r3, #7
 8006d1c:	79f8      	ldrb	r0, [r7, #7]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	f002 fcb7 	bl	8009694 <tud_control_xfer>
        }
        break;
 8006d26:	e02f      	b.n	8006d88 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006d28:	79bb      	ldrb	r3, [r7, #6]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d12e      	bne.n	8006d8c <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d30:	1d9a      	adds	r2, r3, #6
 8006d32:	79f8      	ldrb	r0, [r7, #7]
 8006d34:	2301      	movs	r3, #1
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	f002 fcac 	bl	8009694 <tud_control_xfer>
        }
        break;
 8006d3c:	e026      	b.n	8006d8c <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006d3e:	79bb      	ldrb	r3, [r7, #6]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d105      	bne.n	8006d50 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 fc31 	bl	80095b0 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8006d4e:	e01f      	b.n	8006d90 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8006d50:	79bb      	ldrb	r3, [r7, #6]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d11c      	bne.n	8006d90 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d60:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8006d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d64:	799a      	ldrb	r2, [r3, #6]
 8006d66:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fa fa01 	bl	8001174 <tud_hid_set_protocol_cb>
        break;
 8006d72:	e00d      	b.n	8006d90 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8006d74:	2300      	movs	r3, #0
 8006d76:	e00d      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e00b      	b.n	8006d94 <hidd_control_xfer_cb+0x3d0>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e008      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
        break;
 8006d80:	bf00      	nop
 8006d82:	e006      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
        break;
 8006d84:	bf00      	nop
 8006d86:	e004      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
        break;
 8006d88:	bf00      	nop
 8006d8a:	e002      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
        break;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <hidd_control_xfer_cb+0x3ce>
        break;
 8006d90:	bf00      	nop
  }

  return true;
 8006d92:	2301      	movs	r3, #1
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3748      	adds	r7, #72	@ 0x48
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4603      	mov	r3, r0
 8006da6:	71fb      	strb	r3, [r7, #7]
 8006da8:	460b      	mov	r3, r1
 8006daa:	71bb      	strb	r3, [r7, #6]
 8006dac:	4613      	mov	r3, r2
 8006dae:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e014      	b.n	8006de0 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8006db6:	7ffa      	ldrb	r2, [r7, #31]
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8006ebc <hidd_xfer_cb+0x120>)
 8006dc2:	4413      	add	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	789b      	ldrb	r3, [r3, #2]
 8006dca:	79ba      	ldrb	r2, [r7, #6]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d00a      	beq.n	8006de6 <hidd_xfer_cb+0x4a>
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	79ba      	ldrb	r2, [r7, #6]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d005      	beq.n	8006de6 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	7ffb      	ldrb	r3, [r7, #31]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0e7      	beq.n	8006db6 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8006de6:	7ffb      	ldrb	r3, [r7, #31]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <hidd_xfer_cb+0x66>
 8006dec:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <hidd_xfer_cb+0x124>)
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d000      	beq.n	8006dfe <hidd_xfer_cb+0x62>
 8006dfc:	be00      	bkpt	0x0000
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e057      	b.n	8006eb2 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8006e02:	7ffa      	ldrb	r2, [r7, #31]
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec4 <hidd_xfer_cb+0x128>)
 8006e0e:	4413      	add	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	79ba      	ldrb	r2, [r7, #6]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d116      	bne.n	8006e4a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8006e1c:	797b      	ldrb	r3, [r7, #5]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f103 0110 	add.w	r1, r3, #16
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	7ffb      	ldrb	r3, [r7, #31]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa f9ae 	bl	8001190 <tud_hid_report_complete_cb>
 8006e34:	e03c      	b.n	8006eb0 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f103 0210 	add.w	r2, r3, #16
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	7ff8      	ldrb	r0, [r7, #31]
 8006e42:	2101      	movs	r1, #1
 8006e44:	f7ff fbb1 	bl	80065aa <tud_hid_report_failed_cb>
 8006e48:	e032      	b.n	8006eb0 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8006e4a:	797b      	ldrb	r3, [r7, #5]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10c      	bne.n	8006e6a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f103 0220 	add.w	r2, r3, #32
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	7ff8      	ldrb	r0, [r7, #31]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	2202      	movs	r2, #2
 8006e62:	2100      	movs	r1, #0
 8006e64:	f7fa f9b3 	bl	80011ce <tud_hid_set_report_cb>
 8006e68:	e008      	b.n	8006e7c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f103 0220 	add.w	r2, r3, #32
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	7ff8      	ldrb	r0, [r7, #31]
 8006e76:	2102      	movs	r1, #2
 8006e78:	f7ff fb97 	bl	80065aa <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	7899      	ldrb	r1, [r3, #2]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f103 0220 	add.w	r2, r3, #32
 8006e86:	79f8      	ldrb	r0, [r7, #7]
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f002 fa1b 	bl	80092c4 <usbd_edpt_xfer>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f083 0301 	eor.w	r3, r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <hidd_xfer_cb+0x114>
 8006e9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <hidd_xfer_cb+0x124>)
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d000      	beq.n	8006eac <hidd_xfer_cb+0x110>
 8006eaa:	be00      	bkpt	0x0000
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <hidd_xfer_cb+0x116>
  }

  return true;
 8006eb0:	2301      	movs	r3, #1
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000f2c 	.word	0x20000f2c
 8006ec0:	e000edf0 	.word	0xe000edf0
 8006ec4:	20000f38 	.word	0x20000f38

08006ec8 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee4:	d901      	bls.n	8006eea <tu_fifo_config+0x22>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e01b      	b.n	8006f22 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8006ef6:	88bb      	ldrh	r3, [r7, #4]
 8006ef8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006efc:	b299      	uxth	r1, r3
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	88d3      	ldrh	r3, [r2, #6]
 8006f02:	f361 030e 	bfi	r3, r1, #0, #15
 8006f06:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	79d3      	ldrb	r3, [r2, #7]
 8006f0c:	7e39      	ldrb	r1, [r7, #24]
 8006f0e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006f12:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b08a      	sub	sp, #40	@ 0x28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8006f46:	e00b      	b.n	8006f60 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	61ba      	str	r2, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
    ff_buf += 4;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006f60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1ee      	bne.n	8006f48 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8006f80:	7ffa      	ldrb	r2, [r7, #31]
 8006f82:	f107 0310 	add.w	r3, r7, #16
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f005 f874 	bl	800c076 <memcpy>
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3728      	adds	r7, #40	@ 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b08a      	sub	sp, #40	@ 0x28
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8006fae:	e008      	b.n	8006fc2 <_ff_pull_const_addr+0x2c>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8006fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fc4:	1e5a      	subs	r2, r3, #1
 8006fc6:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f1      	bne.n	8006fb0 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006fd6:	7ffb      	ldrb	r3, [r7, #31]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8006fe0:	7ffa      	ldrb	r2, [r7, #31]
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f005 f844 	bl	800c076 <memcpy>

    *reg_tx = tmp32;
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	601a      	str	r2, [r3, #0]
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	3728      	adds	r7, #40	@ 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	68f9      	ldr	r1, [r7, #12]
 8007012:	88c9      	ldrh	r1, [r1, #6]
 8007014:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007018:	b289      	uxth	r1, r1
 800701a:	fb01 f202 	mul.w	r2, r1, r2
 800701e:	1898      	adds	r0, r3, r2
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	88db      	ldrh	r3, [r3, #6]
 8007024:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	f005 f822 	bl	800c076 <memcpy>
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b08e      	sub	sp, #56	@ 0x38
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	4611      	mov	r1, r2
 8007046:	461a      	mov	r2, r3
 8007048:	460b      	mov	r3, r1
 800704a:	80fb      	strh	r3, [r7, #6]
 800704c:	4613      	mov	r3, r2
 800704e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	889a      	ldrh	r2, [r3, #4]
 8007054:	88bb      	ldrh	r3, [r7, #4]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	88db      	ldrh	r3, [r3, #6]
 8007066:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800706a:	b29b      	uxth	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007070:	fb13 f302 	smulbb	r3, r3, r2
 8007074:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007084:	fb13 f302 	smulbb	r3, r3, r2
 8007088:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	88ba      	ldrh	r2, [r7, #4]
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	88c9      	ldrh	r1, [r1, #6]
 8007094:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007098:	b289      	uxth	r1, r1
 800709a:	fb01 f202 	mul.w	r2, r1, r2
 800709e:	4413      	add	r3, r2
 80070a0:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80070a2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <_ff_push_n+0x76>
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d022      	beq.n	80070f4 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80070ae:	e09e      	b.n	80071ee <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d80d      	bhi.n	80070d4 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	88d2      	ldrh	r2, [r2, #6]
 80070be:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80070c2:	b292      	uxth	r2, r2
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ce:	f004 ffd2 	bl	800c076 <memcpy>
      break;
 80070d2:	e08c      	b.n	80071ee <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80070d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070d6:	461a      	mov	r2, r3
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070dc:	f004 ffcb 	bl	800c076 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80070ec:	4619      	mov	r1, r3
 80070ee:	f004 ffc2 	bl	800c076 <memcpy>
      break;
 80070f2:	e07c      	b.n	80071ee <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d80f      	bhi.n	800711c <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88db      	ldrh	r3, [r3, #6]
 8007100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	fb13 f302 	smulbb	r3, r3, r2
 800710e:	b29b      	uxth	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007116:	f7ff ff0a 	bl	8006f2e <_ff_push_const_addr>
      break;
 800711a:	e067      	b.n	80071ec <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800711c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8007124:	8c3b      	ldrh	r3, [r7, #32]
 8007126:	461a      	mov	r2, r3
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800712c:	f7ff feff 	bl	8006f2e <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007130:	8c3b      	ldrh	r3, [r7, #32]
 8007132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007134:	4413      	add	r3, r2
 8007136:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007138:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007148:	2b00      	cmp	r3, #0
 800714a:	d043      	beq.n	80071d4 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007154:	b29b      	uxth	r3, r3
 8007156:	f1c3 0304 	rsb	r3, r3, #4
 800715a:	b29a      	uxth	r2, r3
 800715c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800715e:	837b      	strh	r3, [r7, #26]
 8007160:	4613      	mov	r3, r2
 8007162:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007164:	8b7a      	ldrh	r2, [r7, #26]
 8007166:	8b3b      	ldrh	r3, [r7, #24]
 8007168:	4293      	cmp	r3, r2
 800716a:	bf28      	it	cs
 800716c:	4613      	movcs	r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007174:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007178:	b29b      	uxth	r3, r3
 800717a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8007186:	f107 0314 	add.w	r3, r7, #20
 800718a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800718c:	e007      	b.n	800719e <_ff_push_n+0x164>
 800718e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007190:	1c53      	adds	r3, r2, #1
 8007192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	6339      	str	r1, [r7, #48]	@ 0x30
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80071b2:	e007      	b.n	80071c4 <_ff_push_n+0x18a>
 80071b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071b6:	1c53      	adds	r3, r2, #1
 80071b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	1c59      	adds	r1, r3, #1
 80071be:	6339      	str	r1, [r7, #48]	@ 0x30
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071c8:	1e5a      	subs	r2, r3, #1
 80071ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <_ff_push_n+0x17a>
 80071d2:	e002      	b.n	80071da <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80071da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <_ff_push_n+0x1b2>
 80071e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071e2:	461a      	mov	r2, r3
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071e8:	f7ff fea1 	bl	8006f2e <_ff_push_const_addr>
      break;
 80071ec:	bf00      	nop
  }
}
 80071ee:	bf00      	nop
 80071f0:	3738      	adds	r7, #56	@ 0x38
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	88c9      	ldrh	r1, [r1, #6]
 800720e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007212:	b289      	uxth	r1, r1
 8007214:	fb01 f202 	mul.w	r2, r1, r2
 8007218:	1899      	adds	r1, r3, r2
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	88db      	ldrh	r3, [r3, #6]
 800721e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	f004 ff25 	bl	800c076 <memcpy>
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	@ 0x38
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	460b      	mov	r3, r1
 8007244:	80fb      	strh	r3, [r7, #6]
 8007246:	4613      	mov	r3, r2
 8007248:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	889a      	ldrh	r2, [r3, #4]
 800724e:	88bb      	ldrh	r3, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8007254:	88fa      	ldrh	r2, [r7, #6]
 8007256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007264:	b29b      	uxth	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800726a:	fb13 f302 	smulbb	r3, r3, r2
 800726e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88db      	ldrh	r3, [r3, #6]
 8007274:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007278:	b29b      	uxth	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800727e:	fb13 f302 	smulbb	r3, r3, r2
 8007282:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	88ba      	ldrh	r2, [r7, #4]
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	88c9      	ldrh	r1, [r1, #6]
 800728e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007292:	b289      	uxth	r1, r1
 8007294:	fb01 f202 	mul.w	r2, r1, r2
 8007298:	4413      	add	r3, r2
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800729c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <_ff_pull_n+0x76>
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d022      	beq.n	80072ee <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80072a8:	e0a0      	b.n	80073ec <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d80d      	bhi.n	80072ce <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	88d2      	ldrh	r2, [r2, #6]
 80072b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072bc:	b292      	uxth	r2, r2
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f004 fed5 	bl	800c076 <memcpy>
    break;
 80072cc:	e08e      	b.n	80073ec <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80072ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072d0:	461a      	mov	r2, r3
 80072d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f004 fece 	bl	800c076 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80072da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	18d0      	adds	r0, r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072e6:	4619      	mov	r1, r3
 80072e8:	f004 fec5 	bl	800c076 <memcpy>
    break;
 80072ec:	e07e      	b.n	80073ec <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d80f      	bhi.n	8007316 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	88db      	ldrh	r3, [r3, #6]
 80072fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072fe:	b29b      	uxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	fb13 f302 	smulbb	r3, r3, r2
 8007308:	b29b      	uxth	r3, r3
 800730a:	461a      	mov	r2, r3
 800730c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800730e:	68b8      	ldr	r0, [r7, #8]
 8007310:	f7ff fe41 	bl	8006f96 <_ff_pull_const_addr>
    break;
 8007314:	e069      	b.n	80073ea <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8007316:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007318:	f023 0303 	bic.w	r3, r3, #3
 800731c:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800731e:	8c3b      	ldrh	r3, [r7, #32]
 8007320:	461a      	mov	r2, r3
 8007322:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007324:	68b8      	ldr	r0, [r7, #8]
 8007326:	f7ff fe36 	bl	8006f96 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800732a:	8c3b      	ldrh	r3, [r7, #32]
 800732c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732e:	4413      	add	r3, r2
 8007330:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800733e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d045      	beq.n	80073d2 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800734a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800734e:	b29b      	uxth	r3, r3
 8007350:	f1c3 0304 	rsb	r3, r3, #4
 8007354:	b29a      	uxth	r2, r3
 8007356:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007358:	837b      	strh	r3, [r7, #26]
 800735a:	4613      	mov	r3, r2
 800735c:	833b      	strh	r3, [r7, #24]
 800735e:	8b7a      	ldrh	r2, [r7, #26]
 8007360:	8b3b      	ldrh	r3, [r7, #24]
 8007362:	4293      	cmp	r3, r2
 8007364:	bf28      	it	cs
 8007366:	4613      	movcs	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800736e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007372:	b29b      	uxth	r3, r3
 8007374:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800737e:	f107 0314 	add.w	r3, r7, #20
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8007384:	e007      	b.n	8007396 <_ff_pull_n+0x162>
 8007386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007388:	1c53      	adds	r3, r2, #1
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800739a:	1e5a      	subs	r2, r3, #1
 800739c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80073aa:	e007      	b.n	80073bc <_ff_pull_n+0x188>
 80073ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ae:	1c53      	adds	r3, r2, #1
 80073b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073b8:	7812      	ldrb	r2, [r2, #0]
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e002      	b.n	80073d8 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80073d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <_ff_pull_n+0x1b6>
 80073de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073e0:	461a      	mov	r2, r3
 80073e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073e4:	68b8      	ldr	r0, [r7, #8]
 80073e6:	f7ff fdd6 	bl	8006f96 <_ff_pull_const_addr>
    break;
 80073ea:	bf00      	nop
  }
}
 80073ec:	bf00      	nop
 80073ee:	3738      	adds	r7, #56	@ 0x38
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	80fb      	strh	r3, [r7, #6]
 80073fe:	460b      	mov	r3, r1
 8007400:	80bb      	strh	r3, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8007406:	88ba      	ldrh	r2, [r7, #4]
 8007408:	887b      	ldrh	r3, [r7, #2]
 800740a:	4413      	add	r3, r2
 800740c:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800740e:	88ba      	ldrh	r2, [r7, #4]
 8007410:	89fb      	ldrh	r3, [r7, #14]
 8007412:	429a      	cmp	r2, r3
 8007414:	d804      	bhi.n	8007420 <advance_index+0x2c>
 8007416:	89fa      	ldrh	r2, [r7, #14]
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	429a      	cmp	r2, r3
 800741e:	db08      	blt.n	8007432 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	425b      	negs	r3, r3
 8007428:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800742a:	89fa      	ldrh	r2, [r7, #14]
 800742c:	89bb      	ldrh	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8007432:	89fb      	ldrh	r3, [r7, #14]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	@ 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4611      	mov	r1, r2
 800744c:	461a      	mov	r2, r3
 800744e:	460b      	mov	r3, r1
 8007450:	80fb      	strh	r3, [r7, #6]
 8007452:	4613      	mov	r3, r2
 8007454:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	843b      	strh	r3, [r7, #32]
 8007460:	88bb      	ldrh	r3, [r7, #4]
 8007462:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8007464:	8c3a      	ldrh	r2, [r7, #32]
 8007466:	8bfb      	ldrh	r3, [r7, #30]
 8007468:	429a      	cmp	r2, r3
 800746a:	d304      	bcc.n	8007476 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800746c:	8c3a      	ldrh	r2, [r7, #32]
 800746e:	8bfb      	ldrh	r3, [r7, #30]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	b29b      	uxth	r3, r3
 8007474:	e008      	b.n	8007488 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007476:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	8c39      	ldrh	r1, [r7, #32]
 800747e:	8bfb      	ldrh	r3, [r7, #30]
 8007480:	1acb      	subs	r3, r1, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	4413      	add	r3, r2
 8007486:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007488:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800748a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <_tu_fifo_peek+0x54>
 8007490:	2300      	movs	r3, #0
 8007492:	e037      	b.n	8007504 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	889b      	ldrh	r3, [r3, #4]
 8007498:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800749a:	429a      	cmp	r2, r3
 800749c:	d91b      	bls.n	80074d6 <_tu_fifo_peek+0x96>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	889b      	ldrh	r3, [r3, #4]
 80074aa:	8afa      	ldrh	r2, [r7, #22]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d305      	bcc.n	80074bc <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	889b      	ldrh	r3, [r3, #4]
 80074b4:	8afa      	ldrh	r2, [r7, #22]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	82bb      	strh	r3, [r7, #20]
 80074ba:	e004      	b.n	80074c6 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	889a      	ldrh	r2, [r3, #4]
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	4413      	add	r3, r2
 80074c4:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	8aba      	ldrh	r2, [r7, #20]
 80074ca:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80074cc:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80074ce:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	889b      	ldrh	r3, [r3, #4]
 80074d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	889b      	ldrh	r3, [r3, #4]
 80074da:	827b      	strh	r3, [r7, #18]
 80074dc:	88bb      	ldrh	r3, [r7, #4]
 80074de:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80074e0:	e003      	b.n	80074ea <_tu_fifo_peek+0xaa>
 80074e2:	8a3a      	ldrh	r2, [r7, #16]
 80074e4:	8a7b      	ldrh	r3, [r7, #18]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	823b      	strh	r3, [r7, #16]
 80074ea:	8a7a      	ldrh	r2, [r7, #18]
 80074ec:	8a3b      	ldrh	r3, [r7, #16]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d9f7      	bls.n	80074e2 <_tu_fifo_peek+0xa2>
  return idx;
 80074f2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80074f4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80074f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074f8:	461a      	mov	r2, r3
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fe7a 	bl	80071f6 <_ff_pull>

  return true;
 8007502:	2301      	movs	r3, #1
}
 8007504:	4618      	mov	r0, r3
 8007506:	3728      	adds	r7, #40	@ 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	@ 0x30
 8007510:	af02      	add	r7, sp, #8
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	460b      	mov	r3, r1
 800751c:	80fb      	strh	r3, [r7, #6]
 800751e:	4613      	mov	r3, r2
 8007520:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	889b      	ldrh	r3, [r3, #4]
 8007526:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007528:	88bb      	ldrh	r3, [r7, #4]
 800752a:	843b      	strh	r3, [r7, #32]
 800752c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800752e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8007530:	8c3a      	ldrh	r2, [r7, #32]
 8007532:	8bfb      	ldrh	r3, [r7, #30]
 8007534:	429a      	cmp	r2, r3
 8007536:	d304      	bcc.n	8007542 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8007538:	8c3a      	ldrh	r2, [r7, #32]
 800753a:	8bfb      	ldrh	r3, [r7, #30]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	b29b      	uxth	r3, r3
 8007540:	e008      	b.n	8007554 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007542:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	8c39      	ldrh	r1, [r7, #32]
 800754a:	8bfb      	ldrh	r3, [r7, #30]
 800754c:	1acb      	subs	r3, r1, r3
 800754e:	b29b      	uxth	r3, r3
 8007550:	4413      	add	r3, r2
 8007552:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007554:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8007556:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <_tu_fifo_peek_n+0x54>
 800755c:	2300      	movs	r3, #0
 800755e:	e041      	b.n	80075e4 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	889b      	ldrh	r3, [r3, #4]
 8007564:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007566:	429a      	cmp	r2, r3
 8007568:	d91b      	bls.n	80075a2 <_tu_fifo_peek_n+0x96>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	88bb      	ldrh	r3, [r7, #4]
 8007570:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	889b      	ldrh	r3, [r3, #4]
 8007576:	8afa      	ldrh	r2, [r7, #22]
 8007578:	429a      	cmp	r2, r3
 800757a:	d305      	bcc.n	8007588 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	889b      	ldrh	r3, [r3, #4]
 8007580:	8afa      	ldrh	r2, [r7, #22]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	82bb      	strh	r3, [r7, #20]
 8007586:	e004      	b.n	8007592 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	889a      	ldrh	r2, [r3, #4]
 800758c:	8afb      	ldrh	r3, [r7, #22]
 800758e:	4413      	add	r3, r2
 8007590:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	8aba      	ldrh	r2, [r7, #20]
 8007596:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8007598:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800759a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	889b      	ldrh	r3, [r3, #4]
 80075a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80075a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d201      	bcs.n	80075ae <_tu_fifo_peek_n+0xa2>
 80075aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075ac:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	827b      	strh	r3, [r7, #18]
 80075b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80075b6:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80075b8:	e003      	b.n	80075c2 <_tu_fifo_peek_n+0xb6>
 80075ba:	8a3a      	ldrh	r2, [r7, #16]
 80075bc:	8a7b      	ldrh	r3, [r7, #18]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	823b      	strh	r3, [r7, #16]
 80075c2:	8a7a      	ldrh	r2, [r7, #18]
 80075c4:	8a3b      	ldrh	r3, [r7, #16]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d9f7      	bls.n	80075ba <_tu_fifo_peek_n+0xae>
  return idx;
 80075ca:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80075cc:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80075ce:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	460b      	mov	r3, r1
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fe29 	bl	8007234 <_ff_pull_n>

  return n;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3728      	adds	r7, #40	@ 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b092      	sub	sp, #72	@ 0x48
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4611      	mov	r1, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	460b      	mov	r3, r1
 80075fc:	80fb      	strh	r3, [r7, #6]
 80075fe:	4613      	mov	r3, r2
 8007600:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <_tu_fifo_write_n+0x20>
 8007608:	2300      	movs	r3, #0
 800760a:	e0bc      	b.n	8007786 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	891b      	ldrh	r3, [r3, #8]
 8007610:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	895b      	ldrh	r3, [r3, #10]
 8007616:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	79db      	ldrb	r3, [r3, #7]
 8007620:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f083 0301 	eor.w	r3, r3, #1
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d036      	beq.n	800769e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	889b      	ldrh	r3, [r3, #4]
 8007634:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007636:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007638:	853b      	strh	r3, [r7, #40]	@ 0x28
 800763a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800763c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800763e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007640:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007642:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007644:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007646:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007648:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800764a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800764c:	8c3b      	ldrh	r3, [r7, #32]
 800764e:	429a      	cmp	r2, r3
 8007650:	d304      	bcc.n	800765c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8007652:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007654:	8c3b      	ldrh	r3, [r7, #32]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	e008      	b.n	800766e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800765c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8007664:	8c3b      	ldrh	r3, [r7, #32]
 8007666:	1acb      	subs	r3, r1, r3
 8007668:	b29b      	uxth	r3, r3
 800766a:	4413      	add	r3, r2
 800766c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800766e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8007670:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8007672:	8bfb      	ldrh	r3, [r7, #30]
 8007674:	429a      	cmp	r2, r3
 8007676:	d904      	bls.n	8007682 <_tu_fifo_write_n+0x96>
 8007678:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800767a:	8bfb      	ldrh	r3, [r7, #30]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	e000      	b.n	8007684 <_tu_fifo_write_n+0x98>
 8007682:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8007684:	867b      	strh	r3, [r7, #50]	@ 0x32
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800768a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800768c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800768e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007690:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007692:	4293      	cmp	r3, r2
 8007694:	bf28      	it	cs
 8007696:	4613      	movcs	r3, r2
 8007698:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800769a:	80fb      	strh	r3, [r7, #6]
 800769c:	e04b      	b.n	8007736 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	889b      	ldrh	r3, [r3, #4]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d317      	bcc.n	80076d8 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80076a8:	797b      	ldrb	r3, [r7, #5]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10e      	bne.n	80076cc <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	8892      	ldrh	r2, [r2, #4]
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	88d2      	ldrh	r2, [r2, #6]
 80076ba:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80076be:	b292      	uxth	r2, r2
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	4413      	add	r3, r2
 80076ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	889b      	ldrh	r3, [r3, #4]
 80076d0:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80076d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80076d6:	e02e      	b.n	8007736 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	889b      	ldrh	r3, [r3, #4]
 80076dc:	83bb      	strh	r3, [r7, #28]
 80076de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076e0:	837b      	strh	r3, [r7, #26]
 80076e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076e4:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80076e6:	8b7a      	ldrh	r2, [r7, #26]
 80076e8:	8b3b      	ldrh	r3, [r7, #24]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d304      	bcc.n	80076f8 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80076ee:	8b7a      	ldrh	r2, [r7, #26]
 80076f0:	8b3b      	ldrh	r3, [r7, #24]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	e008      	b.n	800770a <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80076f8:	8bbb      	ldrh	r3, [r7, #28]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	8b79      	ldrh	r1, [r7, #26]
 8007700:	8b3b      	ldrh	r3, [r7, #24]
 8007702:	1acb      	subs	r3, r1, r3
 8007704:	b29b      	uxth	r3, r3
 8007706:	4413      	add	r3, r2
 8007708:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800770a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 800770c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	889b      	ldrh	r3, [r3, #4]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	429a      	cmp	r2, r3
 800771a:	db0c      	blt.n	8007736 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8898      	ldrh	r0, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	889a      	ldrh	r2, [r3, #4]
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	b29a      	uxth	r2, r3
 800772a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800772c:	4619      	mov	r1, r3
 800772e:	f7ff fe61 	bl	80073f4 <advance_index>
 8007732:	4603      	mov	r3, r0
 8007734:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d023      	beq.n	8007784 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	889b      	ldrh	r3, [r3, #4]
 8007740:	82fb      	strh	r3, [r7, #22]
 8007742:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007744:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8007746:	e003      	b.n	8007750 <_tu_fifo_write_n+0x164>
 8007748:	8aba      	ldrh	r2, [r7, #20]
 800774a:	8afb      	ldrh	r3, [r7, #22]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	82bb      	strh	r3, [r7, #20]
 8007750:	8afa      	ldrh	r2, [r7, #22]
 8007752:	8abb      	ldrh	r3, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	d9f7      	bls.n	8007748 <_tu_fifo_write_n+0x15c>
  return idx;
 8007758:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800775a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 800775c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	797b      	ldrb	r3, [r7, #5]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	460b      	mov	r3, r1
 8007766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fc66 	bl	800703a <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	889b      	ldrh	r3, [r3, #4]
 8007772:	88fa      	ldrh	r2, [r7, #6]
 8007774:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fe3c 	bl	80073f4 <advance_index>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8007784:	88fb      	ldrh	r3, [r7, #6]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3740      	adds	r7, #64	@ 0x40
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af02      	add	r7, sp, #8
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	4611      	mov	r1, r2
 800779a:	461a      	mov	r2, r3
 800779c:	460b      	mov	r3, r1
 800779e:	80fb      	strh	r3, [r7, #6]
 80077a0:	4613      	mov	r3, r2
 80077a2:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	891b      	ldrh	r3, [r3, #8]
 80077a8:	b298      	uxth	r0, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	88f9      	ldrh	r1, [r7, #6]
 80077b2:	797a      	ldrb	r2, [r7, #5]
 80077b4:	9201      	str	r2, [sp, #4]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4603      	mov	r3, r0
 80077ba:	460a      	mov	r2, r1
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fea4 	bl	800750c <_tu_fifo_peek_n>
 80077c4:	4603      	mov	r3, r0
 80077c6:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8898      	ldrh	r0, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	895b      	ldrh	r3, [r3, #10]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	88fa      	ldrh	r2, [r7, #6]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f7ff fe0d 	bl	80073f4 <advance_index>
 80077da:	4603      	mov	r3, r0
 80077dc:	461a      	mov	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80077e2:	88fb      	ldrh	r3, [r7, #6]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8899      	ldrh	r1, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	891b      	ldrh	r3, [r3, #8]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	895b      	ldrh	r3, [r3, #10]
 8007802:	b29b      	uxth	r3, r3
 8007804:	8279      	strh	r1, [r7, #18]
 8007806:	823a      	strh	r2, [r7, #16]
 8007808:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800780a:	8a3a      	ldrh	r2, [r7, #16]
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	429a      	cmp	r2, r3
 8007810:	d304      	bcc.n	800781c <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8007812:	8a3a      	ldrh	r2, [r7, #16]
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b29b      	uxth	r3, r3
 800781a:	e008      	b.n	800782e <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800781c:	8a7b      	ldrh	r3, [r7, #18]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	8a39      	ldrh	r1, [r7, #16]
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	1acb      	subs	r3, r1, r3
 8007828:	b29b      	uxth	r3, r3
 800782a:	4413      	add	r3, r2
 800782c:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	8892      	ldrh	r2, [r2, #4]
 8007832:	82fb      	strh	r3, [r7, #22]
 8007834:	4613      	mov	r3, r2
 8007836:	82bb      	strh	r3, [r7, #20]
 8007838:	8afa      	ldrh	r2, [r7, #22]
 800783a:	8abb      	ldrh	r3, [r7, #20]
 800783c:	4293      	cmp	r3, r2
 800783e:	bf28      	it	cs
 8007840:	4613      	movcs	r3, r2
 8007842:	b29b      	uxth	r3, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	891b      	ldrh	r3, [r3, #8]
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	895b      	ldrh	r3, [r3, #10]
 8007862:	b29b      	uxth	r3, r3
 8007864:	429a      	cmp	r2, r3
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8899      	ldrh	r1, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	891b      	ldrh	r3, [r3, #8]
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	895b      	ldrh	r3, [r3, #10]
 8007890:	b29b      	uxth	r3, r3
 8007892:	81f9      	strh	r1, [r7, #14]
 8007894:	81ba      	strh	r2, [r7, #12]
 8007896:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8007898:	89ba      	ldrh	r2, [r7, #12]
 800789a:	897b      	ldrh	r3, [r7, #10]
 800789c:	429a      	cmp	r2, r3
 800789e:	d304      	bcc.n	80078aa <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80078a0:	89ba      	ldrh	r2, [r7, #12]
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	e008      	b.n	80078bc <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80078aa:	89fb      	ldrh	r3, [r7, #14]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	89b9      	ldrh	r1, [r7, #12]
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	1acb      	subs	r3, r1, r3
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4413      	add	r3, r2
 80078ba:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	8892      	ldrh	r2, [r2, #4]
 80078c0:	4293      	cmp	r3, r2
 80078c2:	bf2c      	ite	cs
 80078c4:	2301      	movcs	r3, #1
 80078c6:	2300      	movcc	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8899      	ldrh	r1, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	891b      	ldrh	r3, [r3, #8]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	895b      	ldrh	r3, [r3, #10]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	82f9      	strh	r1, [r7, #22]
 80078f0:	82ba      	strh	r2, [r7, #20]
 80078f2:	827b      	strh	r3, [r7, #18]
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	823b      	strh	r3, [r7, #16]
 80078f8:	8abb      	ldrh	r3, [r7, #20]
 80078fa:	81fb      	strh	r3, [r7, #14]
 80078fc:	8a7b      	ldrh	r3, [r7, #18]
 80078fe:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8007900:	89fa      	ldrh	r2, [r7, #14]
 8007902:	89bb      	ldrh	r3, [r7, #12]
 8007904:	429a      	cmp	r2, r3
 8007906:	d304      	bcc.n	8007912 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8007908:	89fa      	ldrh	r2, [r7, #14]
 800790a:	89bb      	ldrh	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	b29b      	uxth	r3, r3
 8007910:	e008      	b.n	8007924 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007912:	8a3b      	ldrh	r3, [r7, #16]
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	89f9      	ldrh	r1, [r7, #14]
 800791a:	89bb      	ldrh	r3, [r7, #12]
 800791c:	1acb      	subs	r3, r1, r3
 800791e:	b29b      	uxth	r3, r3
 8007920:	4413      	add	r3, r2
 8007922:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8007924:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8007926:	8afa      	ldrh	r2, [r7, #22]
 8007928:	897b      	ldrh	r3, [r7, #10]
 800792a:	429a      	cmp	r2, r3
 800792c:	d904      	bls.n	8007938 <tu_fifo_remaining+0x62>
 800792e:	8afa      	ldrh	r2, [r7, #22]
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	b29b      	uxth	r3, r3
 8007936:	e000      	b.n	800793a <tu_fifo_remaining+0x64>
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	895b      	ldrh	r3, [r3, #10]
 800795a:	b29b      	uxth	r3, r3
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fd6e 	bl	8007440 <_tu_fifo_peek>
 8007964:	4603      	mov	r3, r0
 8007966:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8898      	ldrh	r0, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	895b      	ldrh	r3, [r3, #10]
 8007970:	b29b      	uxth	r3, r3
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	b292      	uxth	r2, r2
 8007976:	4619      	mov	r1, r3
 8007978:	f7ff fd3c 	bl	80073f4 <advance_index>
 800797c:	4603      	mov	r3, r0
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	4613      	mov	r3, r2
 800799a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	2300      	movs	r3, #0
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff fef3 	bl	800778e <_tu_fifo_read_n>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	4613      	mov	r3, r2
 80079be:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	2301      	movs	r3, #1
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7ff fee1 	bl	800778e <_tu_fifo_read_n>
 80079cc:	4603      	mov	r3, r0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	891b      	ldrh	r3, [r3, #8]
 80079e4:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff ff47 	bl	800787a <tu_fifo_full>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00c      	beq.n	8007a0c <tu_fifo_write+0x36>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	79db      	ldrb	r3, [r3, #7]
 80079f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f083 0301 	eor.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <tu_fifo_write+0x36>
  {
    ret = false;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]
 8007a0a:	e022      	b.n	8007a52 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	889b      	ldrh	r3, [r3, #4]
 8007a10:	823b      	strh	r3, [r7, #16]
 8007a12:	8abb      	ldrh	r3, [r7, #20]
 8007a14:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8007a16:	e003      	b.n	8007a20 <tu_fifo_write+0x4a>
 8007a18:	89fa      	ldrh	r2, [r7, #14]
 8007a1a:	8a3b      	ldrh	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	81fb      	strh	r3, [r7, #14]
 8007a20:	8a3a      	ldrh	r2, [r7, #16]
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d9f7      	bls.n	8007a18 <tu_fifo_write+0x42>
  return idx;
 8007a28:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007a2a:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8007a2c:	8a7b      	ldrh	r3, [r7, #18]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fae2 	bl	8006ffc <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	889b      	ldrh	r3, [r3, #4]
 8007a3c:	8ab9      	ldrh	r1, [r7, #20]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fcd7 	bl	80073f4 <advance_index>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	811a      	strh	r2, [r3, #8]

    ret = true;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fdbb 	bl	80075ec <_tu_fifo_write_n>
 8007a76:	4603      	mov	r3, r0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	2301      	movs	r3, #1
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff fda9 	bl	80075ec <_tu_fifo_write_n>
 8007a9a:	4603      	mov	r3, r0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8007ab8:	2301      	movs	r3, #1
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	79db      	ldrb	r3, [r3, #7]
 8007ad6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d101      	bne.n	8007ae6 <tu_fifo_set_overwritable+0x20>
    return true;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e006      	b.n	8007af4 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	79d3      	ldrb	r3, [r2, #7]
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	f361 13c7 	bfi	r3, r1, #7, #1
 8007af0:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007af2:	2301      	movs	r3, #1
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return NULL;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  return NULL;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0
}
 8007b7a:	bf00      	nop
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8007b9a:	b480      	push	{r7}
 8007b9c:	af00      	add	r7, sp, #0
}
 8007b9e:	bf00      	nop
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	603a      	str	r2, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8007bd0:	2301      	movs	r3, #1
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <tud_mounted+0x20>)
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	2300      	moveq	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000f68 	.word	0x20000f68

08007c04 <tud_suspended>:

bool tud_suspended(void) {
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8007c08:	4b07      	ldr	r3, [pc, #28]	@ (8007c28 <tud_suspended+0x24>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf14      	ite	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	2300      	moveq	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000f68 	.word	0x20000f68

08007c2c <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8007c30:	4b0f      	ldr	r3, [pc, #60]	@ (8007c70 <tud_remote_wakeup+0x44>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <tud_remote_wakeup+0x2e>
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <tud_remote_wakeup+0x44>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 0310 	and.w	r3, r3, #16
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <tud_remote_wakeup+0x2e>
 8007c4c:	4b08      	ldr	r3, [pc, #32]	@ (8007c70 <tud_remote_wakeup+0x44>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <tud_remote_wakeup+0x32>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e005      	b.n	8007c6a <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8007c5e:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <tud_remote_wakeup+0x48>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 fba4 	bl	800a3b0 <dcd_remote_wakeup>
  return true;
 8007c68:	2301      	movs	r3, #1
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000f68 	.word	0x20000f68
 8007c74:	2000006d 	.word	0x2000006d

08007c78 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8007c7c:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <tud_inited+0x1c>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2bff      	cmp	r3, #255	@ 0xff
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	2000006d 	.word	0x2000006d

08007c98 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	@ 0x30
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8007ca4:	f7ff ffe8 	bl	8007c78 <tud_inited>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e09e      	b.n	8007df0 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <tud_rhport_init+0x36>
 8007cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8007df8 <tud_rhport_init+0x160>)
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d000      	beq.n	8007cca <tud_rhport_init+0x32>
 8007cc8:	be00      	bkpt	0x0000
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e090      	b.n	8007df0 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8007cce:	222c      	movs	r2, #44	@ 0x2c
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	484a      	ldr	r0, [pc, #296]	@ (8007dfc <tud_rhport_init+0x164>)
 8007cd4:	f004 f8f7 	bl	800bec6 <memset>
  _usbd_queued_setup = 0;
 8007cd8:	4b49      	ldr	r3, [pc, #292]	@ (8007e00 <tud_rhport_init+0x168>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	4b49      	ldr	r3, [pc, #292]	@ (8007e04 <tud_rhport_init+0x16c>)
 8007ce0:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8007ce2:	bf00      	nop
 8007ce4:	4b48      	ldr	r3, [pc, #288]	@ (8007e08 <tud_rhport_init+0x170>)
 8007ce6:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fed9 	bl	8007aa4 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8007cf2:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8007cf4:	4a45      	ldr	r2, [pc, #276]	@ (8007e0c <tud_rhport_init+0x174>)
 8007cf6:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8007cf8:	4b44      	ldr	r3, [pc, #272]	@ (8007e0c <tud_rhport_init+0x174>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <tud_rhport_init+0x7e>
 8007d00:	4b3d      	ldr	r3, [pc, #244]	@ (8007df8 <tud_rhport_init+0x160>)
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d000      	beq.n	8007d12 <tud_rhport_init+0x7a>
 8007d10:	be00      	bkpt	0x0000
 8007d12:	2300      	movs	r3, #0
 8007d14:	e06c      	b.n	8007df0 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8007d16:	4b3e      	ldr	r3, [pc, #248]	@ (8007e10 <tud_rhport_init+0x178>)
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8007d1c:	483d      	ldr	r0, [pc, #244]	@ (8007e14 <tud_rhport_init+0x17c>)
 8007d1e:	f3af 8000 	nop.w
 8007d22:	4603      	mov	r3, r0
 8007d24:	4a3c      	ldr	r2, [pc, #240]	@ (8007e18 <tud_rhport_init+0x180>)
 8007d26:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007d2e:	e03a      	b.n	8007da6 <tud_rhport_init+0x10e>
 8007d30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d34:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007d3a:	4b36      	ldr	r3, [pc, #216]	@ (8007e14 <tud_rhport_init+0x17c>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	7bfa      	ldrb	r2, [r7, #15]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d206      	bcs.n	8007d52 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8007d44:	4b34      	ldr	r3, [pc, #208]	@ (8007e18 <tud_rhport_init+0x180>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	015b      	lsls	r3, r3, #5
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	e00d      	b.n	8007d6e <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007d52:	4b30      	ldr	r3, [pc, #192]	@ (8007e14 <tud_rhport_init+0x17c>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	db07      	blt.n	8007d6e <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <tud_rhport_init+0x17c>)
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	015b      	lsls	r3, r3, #5
 8007d68:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <tud_rhport_init+0x184>)
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60bb      	str	r3, [r7, #8]
  return driver;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <tud_rhport_init+0xe8>
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <tud_rhport_init+0xfe>
 8007d80:	4b1d      	ldr	r3, [pc, #116]	@ (8007df8 <tud_rhport_init+0x160>)
 8007d82:	623b      	str	r3, [r7, #32]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d000      	beq.n	8007d92 <tud_rhport_init+0xfa>
 8007d90:	be00      	bkpt	0x0000
 8007d92:	2300      	movs	r3, #0
 8007d94:	e02c      	b.n	8007df0 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007da0:	3301      	adds	r3, #1
 8007da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007da6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e14 <tud_rhport_init+0x17c>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dabd      	bge.n	8007d30 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8007db4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e20 <tud_rhport_init+0x188>)
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f002 f9cc 	bl	800a15c <dcd_init>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f083 0301 	eor.w	r3, r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <tud_rhport_init+0x14e>
 8007dd0:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <tud_rhport_init+0x160>)
 8007dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d000      	beq.n	8007de2 <tud_rhport_init+0x14a>
 8007de0:	be00      	bkpt	0x0000
 8007de2:	2300      	movs	r3, #0
 8007de4:	e004      	b.n	8007df0 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 fa55 	bl	800a298 <dcd_int_enable>

  return true;
 8007dee:	2301      	movs	r3, #1
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3730      	adds	r7, #48	@ 0x30
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000edf0 	.word	0xe000edf0
 8007dfc:	20000f68 	.word	0x20000f68
 8007e00:	20000f94 	.word	0x20000f94
 8007e04:	20000070 	.word	0x20000070
 8007e08:	20000074 	.word	0x20000074
 8007e0c:	20001060 	.word	0x20001060
 8007e10:	00000000 	.word	0x00000000
 8007e14:	20000f9c 	.word	0x20000f9c
 8007e18:	20000f98 	.word	0x20000f98
 8007e1c:	0800def4 	.word	0x0800def4
 8007e20:	2000006d 	.word	0x2000006d

08007e24 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007e2e:	2300      	movs	r3, #0
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e034      	b.n	8007e9e <configuration_reset+0x7a>
 8007e34:	7ffb      	ldrb	r3, [r7, #31]
 8007e36:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8007e3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <configuration_reset+0xb0>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	7cfa      	ldrb	r2, [r7, #19]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d206      	bcs.n	8007e54 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8007e46:	4b24      	ldr	r3, [pc, #144]	@ (8007ed8 <configuration_reset+0xb4>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	7cfb      	ldrb	r3, [r7, #19]
 8007e4c:	015b      	lsls	r3, r3, #5
 8007e4e:	4413      	add	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e00d      	b.n	8007e70 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007e54:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed4 <configuration_reset+0xb0>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	7cfb      	ldrb	r3, [r7, #19]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	db07      	blt.n	8007e70 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007e60:	7cfb      	ldrb	r3, [r7, #19]
 8007e62:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed4 <configuration_reset+0xb0>)
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	015b      	lsls	r3, r3, #5
 8007e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007edc <configuration_reset+0xb8>)
 8007e6c:	4413      	add	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  return driver;
 8007e70:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8007e72:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <configuration_reset+0x6a>
 8007e7a:	4b19      	ldr	r3, [pc, #100]	@ (8007ee0 <configuration_reset+0xbc>)
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01f      	beq.n	8007eca <configuration_reset+0xa6>
 8007e8a:	be00      	bkpt	0x0000
 8007e8c:	e01d      	b.n	8007eca <configuration_reset+0xa6>
    driver->reset(rhport);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	79fa      	ldrb	r2, [r7, #7]
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007e98:	7ffb      	ldrb	r3, [r7, #31]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <configuration_reset+0xb0>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	7ffb      	ldrb	r3, [r7, #31]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	dac4      	bge.n	8007e34 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8007eaa:	222c      	movs	r2, #44	@ 0x2c
 8007eac:	2100      	movs	r1, #0
 8007eae:	480d      	ldr	r0, [pc, #52]	@ (8007ee4 <configuration_reset+0xc0>)
 8007eb0:	f004 f809 	bl	800bec6 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	21ff      	movs	r1, #255	@ 0xff
 8007eb8:	480b      	ldr	r0, [pc, #44]	@ (8007ee8 <configuration_reset+0xc4>)
 8007eba:	f004 f804 	bl	800bec6 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8007ebe:	220c      	movs	r2, #12
 8007ec0:	21ff      	movs	r1, #255	@ 0xff
 8007ec2:	480a      	ldr	r0, [pc, #40]	@ (8007eec <configuration_reset+0xc8>)
 8007ec4:	f003 ffff 	bl	800bec6 <memset>
 8007ec8:	e000      	b.n	8007ecc <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8007eca:	bf00      	nop
}
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000f9c 	.word	0x20000f9c
 8007ed8:	20000f98 	.word	0x20000f98
 8007edc:	0800def4 	.word	0x0800def4
 8007ee0:	e000edf0 	.word	0xe000edf0
 8007ee4:	20000f68 	.word	0x20000f68
 8007ee8:	20000f6c 	.word	0x20000f6c
 8007eec:	20000f7c 	.word	0x20000f7c

08007ef0 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff91 	bl	8007e24 <configuration_reset>
  usbd_control_reset();
 8007f02:	f001 fc37 	bl	8009774 <usbd_control_reset>
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8007f10:	b590      	push	{r4, r7, lr}
 8007f12:	b093      	sub	sp, #76	@ 0x4c
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8007f1c:	f7ff feac 	bl	8007c78 <tud_inited>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f083 0301 	eor.w	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f040 8189 	bne.w	8008240 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007f2e:	4bb1      	ldr	r3, [pc, #708]	@ (80081f4 <tud_task_ext+0x2e4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f34:	f107 030c 	add.w	r3, r7, #12
 8007f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2000      	movs	r0, #0
 8007f44:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	3304      	adds	r3, #4
 8007f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fcfa 	bl	8007946 <tu_fifo_read>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	4798      	blx	r3

  return success;
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f64:	f083 0301 	eor.w	r3, r3, #1
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 816a 	bne.w	8008244 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8007f70:	7b7b      	ldrb	r3, [r7, #13]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	2b07      	cmp	r3, #7
 8007f76:	f200 814b 	bhi.w	8008210 <tud_task_ext+0x300>
 8007f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <tud_task_ext+0x70>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	080081c5 	.word	0x080081c5
 8007f8c:	08008177 	.word	0x08008177
 8007f90:	080081a1 	.word	0x080081a1
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	0800806f 	.word	0x0800806f
 8007f9c:	080081b5 	.word	0x080081b5
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8007fa0:	7b3b      	ldrb	r3, [r7, #12]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff ffa4 	bl	8007ef0 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8007fa8:	7c3a      	ldrb	r2, [r7, #16]
 8007faa:	4b93      	ldr	r3, [pc, #588]	@ (80081f8 <tud_task_ext+0x2e8>)
 8007fac:	709a      	strb	r2, [r3, #2]
        break;
 8007fae:	e146      	b.n	800823e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8007fb0:	7b3b      	ldrb	r3, [r7, #12]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff ff9c 	bl	8007ef0 <usbd_reset>
        tud_umount_cb();
 8007fb8:	f7ff fddd 	bl	8007b76 <tud_umount_cb>
        break;
 8007fbc:	e13f      	b.n	800823e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80081fc <tud_task_ext+0x2ec>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <tud_task_ext+0xce>
 8007fc8:	4b8d      	ldr	r3, [pc, #564]	@ (8008200 <tud_task_ext+0x2f0>)
 8007fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8137 	beq.w	8008248 <tud_task_ext+0x338>
 8007fda:	be00      	bkpt	0x0000
 8007fdc:	e134      	b.n	8008248 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8007fde:	4b87      	ldr	r3, [pc, #540]	@ (80081fc <tud_task_ext+0x2ec>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	4b84      	ldr	r3, [pc, #528]	@ (80081fc <tud_task_ext+0x2ec>)
 8007fea:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8007fec:	4b83      	ldr	r3, [pc, #524]	@ (80081fc <tud_task_ext+0x2ec>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 8116 	bne.w	8008224 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8007ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80081f8 <tud_task_ext+0x2e8>)
 8007ffa:	7813      	ldrb	r3, [r2, #0]
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008002:	4a7d      	ldr	r2, [pc, #500]	@ (80081f8 <tud_task_ext+0x2e8>)
 8008004:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008010:	4a79      	ldr	r2, [pc, #484]	@ (80081f8 <tud_task_ext+0x2e8>)
 8008012:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008016:	f023 0304 	bic.w	r3, r3, #4
 800801a:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800801e:	4a76      	ldr	r2, [pc, #472]	@ (80081f8 <tud_task_ext+0x2e8>)
 8008020:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008024:	f023 0301 	bic.w	r3, r3, #1
 8008028:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 800802c:	4a72      	ldr	r2, [pc, #456]	@ (80081f8 <tud_task_ext+0x2e8>)
 800802e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008032:	f023 0304 	bic.w	r3, r3, #4
 8008036:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800803a:	7b3a      	ldrb	r2, [r7, #12]
 800803c:	f107 030c 	add.w	r3, r7, #12
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f000 f91f 	bl	8008288 <process_control_request>
 800804a:	4603      	mov	r3, r0
 800804c:	f083 0301 	eor.w	r3, r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80e8 	beq.w	8008228 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008058:	7b3b      	ldrb	r3, [r7, #12]
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f002 fb7b 	bl	800a758 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8008062:	7b3b      	ldrb	r3, [r7, #12]
 8008064:	2180      	movs	r1, #128	@ 0x80
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fb76 	bl	800a758 <dcd_edpt_stall>
        }
        break;
 800806c:	e0dc      	b.n	8008228 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800806e:	7c3b      	ldrb	r3, [r7, #16]
 8008070:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008074:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008078:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800807c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008084:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8008086:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800808a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800808e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008092:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008096:	09db      	lsrs	r3, r3, #7
 8008098:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 800809a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800809e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80080a2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80080a6:	4954      	ldr	r1, [pc, #336]	@ (80081f8 <tud_task_ext+0x2e8>)
 80080a8:	0052      	lsls	r2, r2, #1
 80080aa:	440a      	add	r2, r1
 80080ac:	4413      	add	r3, r2
 80080ae:	f103 0220 	add.w	r2, r3, #32
 80080b2:	7813      	ldrb	r3, [r2, #0]
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80080ba:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80080be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80080c2:	494d      	ldr	r1, [pc, #308]	@ (80081f8 <tud_task_ext+0x2e8>)
 80080c4:	0052      	lsls	r2, r2, #1
 80080c6:	440a      	add	r2, r1
 80080c8:	4413      	add	r3, r2
 80080ca:	f103 0220 	add.w	r2, r3, #32
 80080ce:	7813      	ldrb	r3, [r2, #0]
 80080d0:	f023 0304 	bic.w	r3, r3, #4
 80080d4:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 80080d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d107      	bne.n	80080ee <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80080de:	7b38      	ldrb	r0, [r7, #12]
 80080e0:	7c7a      	ldrb	r2, [r7, #17]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80080e8:	f001 fb7a 	bl	80097e0 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 80080ec:	e0a7      	b.n	800823e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80080ee:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80080f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80080f6:	4940      	ldr	r1, [pc, #256]	@ (80081f8 <tud_task_ext+0x2e8>)
 80080f8:	0052      	lsls	r2, r2, #1
 80080fa:	440a      	add	r2, r1
 80080fc:	4413      	add	r3, r2
 80080fe:	3314      	adds	r3, #20
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800810a:	4b3e      	ldr	r3, [pc, #248]	@ (8008204 <tud_task_ext+0x2f4>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008112:	429a      	cmp	r2, r3
 8008114:	d207      	bcs.n	8008126 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8008116:	4b3c      	ldr	r3, [pc, #240]	@ (8008208 <tud_task_ext+0x2f8>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800811e:	015b      	lsls	r3, r3, #5
 8008120:	4413      	add	r3, r2
 8008122:	623b      	str	r3, [r7, #32]
 8008124:	e00f      	b.n	8008146 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008126:	4b37      	ldr	r3, [pc, #220]	@ (8008204 <tud_task_ext+0x2f4>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008130:	429a      	cmp	r2, r3
 8008132:	db08      	blt.n	8008146 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008134:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008138:	4a32      	ldr	r2, [pc, #200]	@ (8008204 <tud_task_ext+0x2f4>)
 800813a:	7812      	ldrb	r2, [r2, #0]
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	015b      	lsls	r3, r3, #5
 8008140:	4a32      	ldr	r2, [pc, #200]	@ (800820c <tud_task_ext+0x2fc>)
 8008142:	4413      	add	r3, r2
 8008144:	623b      	str	r3, [r7, #32]
  return driver;
 8008146:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008148:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800814a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <tud_task_ext+0x254>
 8008150:	4b2b      	ldr	r3, [pc, #172]	@ (8008200 <tud_task_ext+0x2f0>)
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d075      	beq.n	800824c <tud_task_ext+0x33c>
 8008160:	be00      	bkpt	0x0000
 8008162:	e073      	b.n	800824c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8008164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008166:	699c      	ldr	r4, [r3, #24]
 8008168:	7b38      	ldrb	r0, [r7, #12]
 800816a:	7c7a      	ldrb	r2, [r7, #17]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008172:	47a0      	blx	r4
        break;
 8008174:	e063      	b.n	800823e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8008176:	4b20      	ldr	r3, [pc, #128]	@ (80081f8 <tud_task_ext+0x2e8>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d053      	beq.n	800822c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008184:	4b1c      	ldr	r3, [pc, #112]	@ (80081f8 <tud_task_ext+0x2e8>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fcf3 	bl	8007b84 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800819e:	e045      	b.n	800822c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80081a0:	4b15      	ldr	r3, [pc, #84]	@ (80081f8 <tud_task_ext+0x2e8>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d040      	beq.n	8008230 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80081ae:	f7ff fcf4 	bl	8007b9a <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80081b2:	e03d      	b.n	8008230 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d03c      	beq.n	8008234 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4610      	mov	r0, r2
 80081c0:	4798      	blx	r3
        }
        break;
 80081c2:	e037      	b.n	8008234 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <tud_task_ext+0x2e8>)
 80081c6:	78db      	ldrb	r3, [r3, #3]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	2300      	movs	r3, #0
 80081ce:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80081d0:	7efb      	ldrb	r3, [r7, #27]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d026      	beq.n	8008238 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fc95 	bl	8007b1c <tud_sof_cb>
        }
      break;
 80081f2:	e021      	b.n	8008238 <tud_task_ext+0x328>
 80081f4:	20001060 	.word	0x20001060
 80081f8:	20000f68 	.word	0x20000f68
 80081fc:	20000f94 	.word	0x20000f94
 8008200:	e000edf0 	.word	0xe000edf0
 8008204:	20000f9c 	.word	0x20000f9c
 8008208:	20000f98 	.word	0x20000f98
 800820c:	0800def4 	.word	0x0800def4

      default:
        TU_BREAKPOINT();
 8008210:	4b10      	ldr	r3, [pc, #64]	@ (8008254 <tud_task_ext+0x344>)
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34
 8008214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <tud_task_ext+0x32c>
 8008220:	be00      	bkpt	0x0000
        break;
 8008222:	e00b      	b.n	800823c <tud_task_ext+0x32c>
          break;
 8008224:	bf00      	nop
 8008226:	e682      	b.n	8007f2e <tud_task_ext+0x1e>
        break;
 8008228:	bf00      	nop
 800822a:	e680      	b.n	8007f2e <tud_task_ext+0x1e>
        break;
 800822c:	bf00      	nop
 800822e:	e67e      	b.n	8007f2e <tud_task_ext+0x1e>
        break;
 8008230:	bf00      	nop
 8008232:	e67c      	b.n	8007f2e <tud_task_ext+0x1e>
        break;
 8008234:	bf00      	nop
 8008236:	e67a      	b.n	8007f2e <tud_task_ext+0x1e>
      break;
 8008238:	bf00      	nop
 800823a:	e678      	b.n	8007f2e <tud_task_ext+0x1e>
        break;
 800823c:	bf00      	nop
  while (1) {
 800823e:	e676      	b.n	8007f2e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008240:	bf00      	nop
 8008242:	e004      	b.n	800824e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800824c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800824e:	374c      	adds	r7, #76	@ 0x4c
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}
 8008254:	e000edf0 	.word	0xe000edf0

08008258 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fa8e 	bl	800978c <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	7bf8      	ldrb	r0, [r7, #15]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	2101      	movs	r1, #1
 800827a:	4798      	blx	r3
 800827c:	4603      	mov	r3, r0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b09a      	sub	sp, #104	@ 0x68
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	6039      	str	r1, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8008294:	2000      	movs	r0, #0
 8008296:	f001 fa79 	bl	800978c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b60      	cmp	r3, #96	@ 0x60
 80082a6:	d10a      	bne.n	80082be <process_control_request+0x36>
 80082a8:	4ba5      	ldr	r3, [pc, #660]	@ (8008540 <process_control_request+0x2b8>)
 80082aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d000      	beq.n	80082ba <process_control_request+0x32>
 80082b8:	be00      	bkpt	0x0000
 80082ba:	2300      	movs	r3, #0
 80082bc:	e2bb      	b.n	8008836 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b40      	cmp	r3, #64	@ 0x40
 80082ca:	d10a      	bne.n	80082e2 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80082cc:	489d      	ldr	r0, [pc, #628]	@ (8008544 <process_control_request+0x2bc>)
 80082ce:	f001 fa5d 	bl	800978c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	2101      	movs	r1, #1
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fc65 	bl	8007ba8 <tud_vendor_control_xfer_cb>
 80082de:	4603      	mov	r3, r0
 80082e0:	e2a9      	b.n	8008836 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f000 81ca 	beq.w	8008686 <process_control_request+0x3fe>
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	f300 8292 	bgt.w	800881c <process_control_request+0x594>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <process_control_request+0x7c>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	f000 8151 	beq.w	80085a4 <process_control_request+0x31c>
 8008302:	e28b      	b.n	800881c <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b20      	cmp	r3, #32
 8008310:	d143      	bne.n	800839a <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	889b      	ldrh	r3, [r3, #4]
 8008316:	b29b      	uxth	r3, r3
 8008318:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800831a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8008322:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d901      	bls.n	800832e <process_control_request+0xa6>
 800832a:	2300      	movs	r3, #0
 800832c:	e283      	b.n	8008836 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800832e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008332:	4a85      	ldr	r2, [pc, #532]	@ (8008548 <process_control_request+0x2c0>)
 8008334:	4413      	add	r3, r2
 8008336:	791b      	ldrb	r3, [r3, #4]
 8008338:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800833c:	2300      	movs	r3, #0
 800833e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8008340:	4b82      	ldr	r3, [pc, #520]	@ (800854c <process_control_request+0x2c4>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8008348:	429a      	cmp	r2, r3
 800834a:	d207      	bcs.n	800835c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800834c:	4b80      	ldr	r3, [pc, #512]	@ (8008550 <process_control_request+0x2c8>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008354:	015b      	lsls	r3, r3, #5
 8008356:	4413      	add	r3, r2
 8008358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800835a:	e00f      	b.n	800837c <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800835c:	4b7b      	ldr	r3, [pc, #492]	@ (800854c <process_control_request+0x2c4>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008366:	429a      	cmp	r2, r3
 8008368:	db08      	blt.n	800837c <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800836a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800836e:	4a77      	ldr	r2, [pc, #476]	@ (800854c <process_control_request+0x2c4>)
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	015b      	lsls	r3, r3, #5
 8008376:	4a77      	ldr	r2, [pc, #476]	@ (8008554 <process_control_request+0x2cc>)
 8008378:	4413      	add	r3, r2
 800837a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800837e:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <process_control_request+0x102>
 8008386:	2300      	movs	r3, #0
 8008388:	e255      	b.n	8008836 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ff61 	bl	8008258 <invoke_class_control>
 8008396:	4603      	mov	r3, r0
 8008398:	e24d      	b.n	8008836 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80083a8:	4b65      	ldr	r3, [pc, #404]	@ (8008540 <process_control_request+0x2b8>)
 80083aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d000      	beq.n	80083ba <process_control_request+0x132>
 80083b8:	be00      	bkpt	0x0000
        return false;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e23b      	b.n	8008836 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	785b      	ldrb	r3, [r3, #1]
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	f200 80e1 	bhi.w	800858a <process_control_request+0x302>
 80083c8:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <process_control_request+0x148>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	08008559 	.word	0x08008559
 80083d4:	0800851d 	.word	0x0800851d
 80083d8:	0800858b 	.word	0x0800858b
 80083dc:	080084f7 	.word	0x080084f7
 80083e0:	0800858b 	.word	0x0800858b
 80083e4:	080083f9 	.word	0x080083f9
 80083e8:	080084dd 	.word	0x080084dd
 80083ec:	0800858b 	.word	0x0800858b
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	08008435 	.word	0x08008435
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80083f8:	6838      	ldr	r0, [r7, #0]
 80083fa:	f001 f9d7 	bl	80097ac <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	b29b      	uxth	r3, r3
 8008404:	b2da      	uxtb	r2, r3
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	4611      	mov	r1, r2
 800840a:	4618      	mov	r0, r3
 800840c:	f001 ff94 	bl	800a338 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8008410:	4a4d      	ldr	r2, [pc, #308]	@ (8008548 <process_control_request+0x2c0>)
 8008412:	7813      	ldrb	r3, [r2, #0]
 8008414:	f043 0302 	orr.w	r3, r3, #2
 8008418:	7013      	strb	r3, [r2, #0]
        break;
 800841a:	e0c2      	b.n	80085a2 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800841c:	4b4a      	ldr	r3, [pc, #296]	@ (8008548 <process_control_request+0x2c0>)
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8008424:	f107 0213 	add.w	r2, r7, #19
 8008428:	79f8      	ldrb	r0, [r7, #7]
 800842a:	2301      	movs	r3, #1
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	f001 f931 	bl	8009694 <tud_control_xfer>
        }
        break;
 8008432:	e0b6      	b.n	80085a2 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800843e:	4b42      	ldr	r3, [pc, #264]	@ (8008548 <process_control_request+0x2c0>)
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008448:	429a      	cmp	r2, r3
 800844a:	d041      	beq.n	80084d0 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 800844c:	4b3e      	ldr	r3, [pc, #248]	@ (8008548 <process_control_request+0x2c0>)
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d014      	beq.n	8008480 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	2100      	movs	r1, #0
 800845a:	4618      	mov	r0, r3
 800845c:	f002 f832 	bl	800a4c4 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	4618      	mov	r0, r3
 8008464:	f002 f896 	bl	800a594 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8008468:	4b37      	ldr	r3, [pc, #220]	@ (8008548 <process_control_request+0x2c0>)
 800846a:	789b      	ldrb	r3, [r3, #2]
 800846c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fcd6 	bl	8007e24 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8008478:	4a33      	ldr	r2, [pc, #204]	@ (8008548 <process_control_request+0x2c0>)
 800847a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800847e:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8008480:	4a31      	ldr	r2, [pc, #196]	@ (8008548 <process_control_request+0x2c0>)
 8008482:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008486:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8008488:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01d      	beq.n	80084cc <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8008490:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f9d5 	bl	8008848 <process_set_config>
 800849e:	4603      	mov	r3, r0
 80084a0:	f083 0301 	eor.w	r3, r3, #1
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00d      	beq.n	80084c6 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80084aa:	4b25      	ldr	r3, [pc, #148]	@ (8008540 <process_control_request+0x2b8>)
 80084ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d000      	beq.n	80084bc <process_control_request+0x234>
 80084ba:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80084bc:	4b22      	ldr	r3, [pc, #136]	@ (8008548 <process_control_request+0x2c0>)
 80084be:	2200      	movs	r2, #0
 80084c0:	705a      	strb	r2, [r3, #1]
                return false;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e1b7      	b.n	8008836 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80084c6:	f7ff fb4f 	bl	8007b68 <tud_mount_cb>
 80084ca:	e001      	b.n	80084d0 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 80084cc:	f7ff fb53 	bl	8007b76 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f86b 	bl	80095b0 <tud_control_status>
        }
        break;
 80084da:	e062      	b.n	80085a2 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fae5 	bl	8008ab0 <process_get_descriptor>
 80084e6:	4603      	mov	r3, r0
 80084e8:	f083 0301 	eor.w	r3, r3, #1
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d056      	beq.n	80085a0 <process_control_request+0x318>
 80084f2:	2300      	movs	r3, #0
 80084f4:	e19f      	b.n	8008836 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d10b      	bne.n	8008518 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8008500:	4a11      	ldr	r2, [pc, #68]	@ (8008548 <process_control_request+0x2c0>)
 8008502:	7813      	ldrb	r3, [r2, #0]
 8008504:	f043 0308 	orr.w	r3, r3, #8
 8008508:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f001 f84e 	bl	80095b0 <tud_control_status>
            break;
 8008514:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8008516:	e044      	b.n	80085a2 <process_control_request+0x31a>
            default: return false;
 8008518:	2300      	movs	r3, #0
 800851a:	e18c      	b.n	8008836 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b01      	cmp	r3, #1
 8008524:	d001      	beq.n	800852a <process_control_request+0x2a2>
 8008526:	2300      	movs	r3, #0
 8008528:	e185      	b.n	8008836 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800852a:	4a07      	ldr	r2, [pc, #28]	@ (8008548 <process_control_request+0x2c0>)
 800852c:	7813      	ldrb	r3, [r2, #0]
 800852e:	f023 0308 	bic.w	r3, r3, #8
 8008532:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f839 	bl	80095b0 <tud_control_status>
        break;
 800853e:	e030      	b.n	80085a2 <process_control_request+0x31a>
 8008540:	e000edf0 	.word	0xe000edf0
 8008544:	08007ba9 	.word	0x08007ba9
 8008548:	20000f68 	.word	0x20000f68
 800854c:	20000f9c 	.word	0x20000f9c
 8008550:	20000f98 	.word	0x20000f98
 8008554:	0800def4 	.word	0x0800def4

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8008558:	4b94      	ldr	r3, [pc, #592]	@ (80087ac <process_control_request+0x524>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	4b91      	ldr	r3, [pc, #580]	@ (80087ac <process_control_request+0x524>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	b29b      	uxth	r3, r3
 8008574:	4313      	orrs	r3, r2
 8008576:	b29b      	uxth	r3, r3
 8008578:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800857a:	f107 0210 	add.w	r2, r7, #16
 800857e:	79f8      	ldrb	r0, [r7, #7]
 8008580:	2302      	movs	r3, #2
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	f001 f886 	bl	8009694 <tud_control_xfer>
          break;
 8008588:	e00b      	b.n	80085a2 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800858a:	4b89      	ldr	r3, [pc, #548]	@ (80087b0 <process_control_request+0x528>)
 800858c:	647b      	str	r3, [r7, #68]	@ 0x44
 800858e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d000      	beq.n	800859c <process_control_request+0x314>
 800859a:	be00      	bkpt	0x0000
 800859c:	2300      	movs	r3, #0
 800859e:	e14a      	b.n	8008836 <process_control_request+0x5ae>
        break;
 80085a0:	bf00      	nop
      }
    break;
 80085a2:	e147      	b.n	8008834 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	889b      	ldrh	r3, [r3, #4]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80085ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80085b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085b8:	2b0f      	cmp	r3, #15
 80085ba:	d901      	bls.n	80085c0 <process_control_request+0x338>
 80085bc:	2300      	movs	r3, #0
 80085be:	e13a      	b.n	8008836 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80085c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085c4:	4a79      	ldr	r2, [pc, #484]	@ (80087ac <process_control_request+0x524>)
 80085c6:	4413      	add	r3, r2
 80085c8:	791b      	ldrb	r3, [r3, #4]
 80085ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80085d2:	4b78      	ldr	r3, [pc, #480]	@ (80087b4 <process_control_request+0x52c>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80085da:	429a      	cmp	r2, r3
 80085dc:	d207      	bcs.n	80085ee <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80085de:	4b76      	ldr	r3, [pc, #472]	@ (80087b8 <process_control_request+0x530>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085e6:	015b      	lsls	r3, r3, #5
 80085e8:	4413      	add	r3, r2
 80085ea:	623b      	str	r3, [r7, #32]
 80085ec:	e00f      	b.n	800860e <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80085ee:	4b71      	ldr	r3, [pc, #452]	@ (80087b4 <process_control_request+0x52c>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085f8:	429a      	cmp	r2, r3
 80085fa:	db08      	blt.n	800860e <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80085fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008600:	4a6c      	ldr	r2, [pc, #432]	@ (80087b4 <process_control_request+0x52c>)
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	015b      	lsls	r3, r3, #5
 8008608:	4a6c      	ldr	r2, [pc, #432]	@ (80087bc <process_control_request+0x534>)
 800860a:	4413      	add	r3, r2
 800860c:	623b      	str	r3, [r7, #32]
  return driver;
 800860e:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8008610:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8008612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <process_control_request+0x394>
 8008618:	2300      	movs	r3, #0
 800861a:	e10c      	b.n	8008836 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fe18 	bl	8008258 <invoke_class_control>
 8008628:	4603      	mov	r3, r0
 800862a:	f083 0301 	eor.w	r3, r3, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80fe 	beq.w	8008832 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <process_control_request+0x3c0>
 8008644:	2300      	movs	r3, #0
 8008646:	e0f6      	b.n	8008836 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	3b0a      	subs	r3, #10
 800864e:	2b01      	cmp	r3, #1
 8008650:	d816      	bhi.n	8008680 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8008652:	2000      	movs	r0, #0
 8008654:	f001 f89a 	bl	800978c <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b0a      	cmp	r3, #10
 800865e:	d109      	bne.n	8008674 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8008664:	f107 020f 	add.w	r2, r7, #15
 8008668:	79f8      	ldrb	r0, [r7, #7]
 800866a:	2301      	movs	r3, #1
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	f001 f811 	bl	8009694 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8008672:	e007      	b.n	8008684 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 ff99 	bl	80095b0 <tud_control_status>
          break;
 800867e:	e001      	b.n	8008684 <process_control_request+0x3fc>

          default: return false;
 8008680:	2300      	movs	r3, #0
 8008682:	e0d8      	b.n	8008836 <process_control_request+0x5ae>
        }
      }
      break;
 8008684:	e0d5      	b.n	8008832 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	889b      	ldrh	r3, [r3, #4]
 800868a:	b29b      	uxth	r3, r3
 800868c:	83bb      	strh	r3, [r7, #28]
 800868e:	8bbb      	ldrh	r3, [r7, #28]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008696:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800869a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800869c:	7fbb      	ldrb	r3, [r7, #30]
 800869e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a2:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80086a4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80086a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086ac:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086ae:	7ffb      	ldrb	r3, [r7, #31]
 80086b0:	09db      	lsrs	r3, r3, #7
 80086b2:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80086b4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80086b8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80086bc:	2b05      	cmp	r3, #5
 80086be:	d90a      	bls.n	80086d6 <process_control_request+0x44e>
 80086c0:	4b3b      	ldr	r3, [pc, #236]	@ (80087b0 <process_control_request+0x528>)
 80086c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d000      	beq.n	80086d2 <process_control_request+0x44a>
 80086d0:	be00      	bkpt	0x0000
 80086d2:	2300      	movs	r3, #0
 80086d4:	e0af      	b.n	8008836 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80086d6:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80086da:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80086de:	4933      	ldr	r1, [pc, #204]	@ (80087ac <process_control_request+0x524>)
 80086e0:	0052      	lsls	r2, r2, #1
 80086e2:	440a      	add	r2, r1
 80086e4:	4413      	add	r3, r2
 80086e6:	3314      	adds	r3, #20
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80086f0:	4b30      	ldr	r3, [pc, #192]	@ (80087b4 <process_control_request+0x52c>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	7efa      	ldrb	r2, [r7, #27]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d206      	bcs.n	8008708 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80086fa:	4b2f      	ldr	r3, [pc, #188]	@ (80087b8 <process_control_request+0x530>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	7efb      	ldrb	r3, [r7, #27]
 8008700:	015b      	lsls	r3, r3, #5
 8008702:	4413      	add	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	e00d      	b.n	8008724 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008708:	4b2a      	ldr	r3, [pc, #168]	@ (80087b4 <process_control_request+0x52c>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	7efb      	ldrb	r3, [r7, #27]
 8008710:	429a      	cmp	r2, r3
 8008712:	db07      	blt.n	8008724 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008714:	7efb      	ldrb	r3, [r7, #27]
 8008716:	4a27      	ldr	r2, [pc, #156]	@ (80087b4 <process_control_request+0x52c>)
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	015b      	lsls	r3, r3, #5
 800871e:	4a27      	ldr	r2, [pc, #156]	@ (80087bc <process_control_request+0x534>)
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
  return driver;
 8008724:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8008726:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8008736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <process_control_request+0x4b8>
 800873c:	2300      	movs	r3, #0
 800873e:	e07a      	b.n	8008836 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fd86 	bl	8008258 <invoke_class_control>
 800874c:	4603      	mov	r3, r0
 800874e:	e072      	b.n	8008836 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	2b03      	cmp	r3, #3
 8008756:	d017      	beq.n	8008788 <process_control_request+0x500>
 8008758:	2b03      	cmp	r3, #3
 800875a:	dc52      	bgt.n	8008802 <process_control_request+0x57a>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <process_control_request+0x4de>
 8008760:	2b01      	cmp	r3, #1
 8008762:	d011      	beq.n	8008788 <process_control_request+0x500>
 8008764:	e04d      	b.n	8008802 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8008766:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fec8 	bl	8009504 <usbd_edpt_stalled>
 8008774:	4603      	mov	r3, r0
 8008776:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8008778:	f107 020c 	add.w	r2, r7, #12
 800877c:	79f8      	ldrb	r0, [r7, #7]
 800877e:	2302      	movs	r3, #2
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	f000 ff87 	bl	8009694 <tud_control_xfer>
          }
          break;
 8008786:	e048      	b.n	800881a <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	885b      	ldrh	r3, [r3, #2]
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d11d      	bne.n	80087ce <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d112      	bne.n	80087c0 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800879a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fe70 	bl	8009488 <usbd_edpt_clear_stall>
 80087a8:	e011      	b.n	80087ce <process_control_request+0x546>
 80087aa:	bf00      	nop
 80087ac:	20000f68 	.word	0x20000f68
 80087b0:	e000edf0 	.word	0xe000edf0
 80087b4:	20000f9c 	.word	0x20000f9c
 80087b8:	20000f98 	.word	0x20000f98
 80087bc:	0800def4 	.word	0x0800def4
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80087c0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fe1f 	bl	800940c <usbd_edpt_stall>
              }
            }

            if (driver) {
 80087ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d021      	beq.n	8008818 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fd3c 	bl	8008258 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80087e0:	2000      	movs	r0, #0
 80087e2:	f000 ffd3 	bl	800978c <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80087e6:	4b16      	ldr	r3, [pc, #88]	@ (8008840 <process_control_request+0x5b8>)
 80087e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80087ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d110      	bne.n	8008818 <process_control_request+0x590>
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fed8 	bl	80095b0 <tud_control_status>
            }
          }
          break;
 8008800:	e00a      	b.n	8008818 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8008802:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <process_control_request+0x5bc>)
 8008804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d000      	beq.n	8008814 <process_control_request+0x58c>
 8008812:	be00      	bkpt	0x0000
            return false;
 8008814:	2300      	movs	r3, #0
 8008816:	e00e      	b.n	8008836 <process_control_request+0x5ae>
          break;
 8008818:	bf00      	nop
        }
      }
    }
    break;
 800881a:	e00b      	b.n	8008834 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 800881c:	4b09      	ldr	r3, [pc, #36]	@ (8008844 <process_control_request+0x5bc>)
 800881e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d000      	beq.n	800882e <process_control_request+0x5a6>
 800882c:	be00      	bkpt	0x0000
      return false;
 800882e:	2300      	movs	r3, #0
 8008830:	e001      	b.n	8008836 <process_control_request+0x5ae>
      break;
 8008832:	bf00      	nop
  }

  return true;
 8008834:	2301      	movs	r3, #1
}
 8008836:	4618      	mov	r0, r3
 8008838:	3768      	adds	r7, #104	@ 0x68
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000f68 	.word	0x20000f68
 8008844:	e000edf0 	.word	0xe000edf0

08008848 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b096      	sub	sp, #88	@ 0x58
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	460a      	mov	r2, r1
 8008852:	71fb      	strb	r3, [r7, #7]
 8008854:	4613      	mov	r3, r2
 8008856:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8008858:	79bb      	ldrb	r3, [r7, #6]
 800885a:	3b01      	subs	r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4618      	mov	r0, r3
 8008860:	f7fa fa88 	bl	8002d74 <tud_descriptor_configuration_cb>
 8008864:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8008866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <process_set_config+0x2c>
 800886c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d00a      	beq.n	800888a <process_set_config+0x42>
 8008874:	4b87      	ldr	r3, [pc, #540]	@ (8008a94 <process_set_config+0x24c>)
 8008876:	623b      	str	r3, [r7, #32]
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d000      	beq.n	8008886 <process_set_config+0x3e>
 8008884:	be00      	bkpt	0x0000
 8008886:	2300      	movs	r3, #0
 8008888:	e100      	b.n	8008a8c <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800888a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800888c:	79db      	ldrb	r3, [r3, #7]
 800888e:	115b      	asrs	r3, r3, #5
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	b2d9      	uxtb	r1, r3
 8008896:	4a80      	ldr	r2, [pc, #512]	@ (8008a98 <process_set_config+0x250>)
 8008898:	7813      	ldrb	r3, [r2, #0]
 800889a:	f361 1304 	bfi	r3, r1, #4, #1
 800889e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80088a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a2:	79db      	ldrb	r3, [r3, #7]
 80088a4:	119b      	asrs	r3, r3, #6
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	b2d9      	uxtb	r1, r3
 80088ac:	4a7a      	ldr	r2, [pc, #488]	@ (8008a98 <process_set_config+0x250>)
 80088ae:	7813      	ldrb	r3, [r2, #0]
 80088b0:	f361 1345 	bfi	r3, r1, #5, #1
 80088b4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80088b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b8:	3309      	adds	r3, #9
 80088ba:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80088bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088be:	885b      	ldrh	r3, [r3, #2]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c6:	4413      	add	r3, r2
 80088c8:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80088ca:	e0d9      	b.n	8008a80 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80088d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088d4:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3301      	adds	r3, #1
 80088da:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d10f      	bne.n	8008900 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80088e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088e2:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80088e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088e6:	78db      	ldrb	r3, [r3, #3]
 80088e8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80088ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ee:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 80088fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008902:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	3301      	adds	r3, #1
 8008908:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800890a:	2b04      	cmp	r3, #4
 800890c:	d00a      	beq.n	8008924 <process_set_config+0xdc>
 800890e:	4b61      	ldr	r3, [pc, #388]	@ (8008a94 <process_set_config+0x24c>)
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d000      	beq.n	8008920 <process_set_config+0xd8>
 800891e:	be00      	bkpt	0x0000
 8008920:	2300      	movs	r3, #0
 8008922:	e0b3      	b.n	8008a8c <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8008924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008926:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8008928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800892a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008936:	e089      	b.n	8008a4c <process_set_config+0x204>
 8008938:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800893c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008942:	4b56      	ldr	r3, [pc, #344]	@ (8008a9c <process_set_config+0x254>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	7bfa      	ldrb	r2, [r7, #15]
 8008948:	429a      	cmp	r2, r3
 800894a:	d206      	bcs.n	800895a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 800894c:	4b54      	ldr	r3, [pc, #336]	@ (8008aa0 <process_set_config+0x258>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	015b      	lsls	r3, r3, #5
 8008954:	4413      	add	r3, r2
 8008956:	60bb      	str	r3, [r7, #8]
 8008958:	e00d      	b.n	8008976 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800895a:	4b50      	ldr	r3, [pc, #320]	@ (8008a9c <process_set_config+0x254>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	429a      	cmp	r2, r3
 8008964:	db07      	blt.n	8008976 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	4a4c      	ldr	r2, [pc, #304]	@ (8008a9c <process_set_config+0x254>)
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	1a9b      	subs	r3, r3, r2
 800896e:	015b      	lsls	r3, r3, #5
 8008970:	4a4c      	ldr	r2, [pc, #304]	@ (8008aa4 <process_set_config+0x25c>)
 8008972:	4413      	add	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]
  return driver;
 8008976:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8008978:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <process_set_config+0x14e>
 8008980:	4b44      	ldr	r3, [pc, #272]	@ (8008a94 <process_set_config+0x24c>)
 8008982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d000      	beq.n	8008992 <process_set_config+0x14a>
 8008990:	be00      	bkpt	0x0000
 8008992:	2300      	movs	r3, #0
 8008994:	e07a      	b.n	8008a8c <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800899c:	79f8      	ldrb	r0, [r7, #7]
 800899e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80089a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d94a      	bls.n	8008a42 <process_set_config+0x1fa>
 80089ac:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d846      	bhi.n	8008a42 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80089b4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a39      	ldr	r2, [pc, #228]	@ (8008aa8 <process_set_config+0x260>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d102      	bne.n	80089cc <process_set_config+0x184>
 80089c6:	2302      	movs	r3, #2
 80089c8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80089d2:	e024      	b.n	8008a1e <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80089d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089d6:	789a      	ldrb	r2, [r3, #2]
 80089d8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80089dc:	4413      	add	r3, r2
 80089de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80089e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80089e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a98 <process_set_config+0x250>)
 80089e8:	4413      	add	r3, r2
 80089ea:	791b      	ldrb	r3, [r3, #4]
 80089ec:	2bff      	cmp	r3, #255	@ 0xff
 80089ee:	d00a      	beq.n	8008a06 <process_set_config+0x1be>
 80089f0:	4b28      	ldr	r3, [pc, #160]	@ (8008a94 <process_set_config+0x24c>)
 80089f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d000      	beq.n	8008a02 <process_set_config+0x1ba>
 8008a00:	be00      	bkpt	0x0000
 8008a02:	2300      	movs	r3, #0
 8008a04:	e042      	b.n	8008a8c <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8008a06:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008a0a:	4a23      	ldr	r2, [pc, #140]	@ (8008a98 <process_set_config+0x250>)
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8008a12:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008a14:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008a18:	3301      	adds	r3, #1
 8008a1a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8008a1e:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8008a22:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d3d4      	bcc.n	80089d4 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8008a2a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008a2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008a30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a32:	481e      	ldr	r0, [pc, #120]	@ (8008aac <process_set_config+0x264>)
 8008a34:	f003 f81c 	bl	800ba70 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8008a38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a3c:	4413      	add	r3, r2
 8008a3e:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8008a40:	e00c      	b.n	8008a5c <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008a42:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008a46:	3301      	adds	r3, #1
 8008a48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008a4c:	4b13      	ldr	r3, [pc, #76]	@ (8008a9c <process_set_config+0x254>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f6bf af6e 	bge.w	8008938 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a9c <process_set_config+0x254>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008a66:	429a      	cmp	r2, r3
 8008a68:	da0a      	bge.n	8008a80 <process_set_config+0x238>
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <process_set_config+0x24c>)
 8008a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d000      	beq.n	8008a7c <process_set_config+0x234>
 8008a7a:	be00      	bkpt	0x0000
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e005      	b.n	8008a8c <process_set_config+0x244>
  while( p_desc < desc_end )
 8008a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a84:	429a      	cmp	r2, r3
 8008a86:	f4ff af21 	bcc.w	80088cc <process_set_config+0x84>
  }

  return true;
 8008a8a:	2301      	movs	r3, #1
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3758      	adds	r7, #88	@ 0x58
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	e000edf0 	.word	0xe000edf0
 8008a98:	20000f68 	.word	0x20000f68
 8008a9c:	20000f9c 	.word	0x20000f9c
 8008aa0:	20000f98 	.word	0x20000f98
 8008aa4:	0800def4 	.word	0x0800def4
 8008aa8:	08005fdd 	.word	0x08005fdd
 8008aac:	20000f7c 	.word	0x20000f7c

08008ab0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b094      	sub	sp, #80	@ 0x50
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	885b      	ldrh	r3, [r3, #2]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008ac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	885b      	ldrh	r3, [r3, #2]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008ad8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8008ae0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	2b0e      	cmp	r3, #14
 8008ae8:	f200 80b4 	bhi.w	8008c54 <process_get_descriptor+0x1a4>
 8008aec:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <process_get_descriptor+0x44>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b31 	.word	0x08008b31
 8008af8:	08008b95 	.word	0x08008b95
 8008afc:	08008bfb 	.word	0x08008bfb
 8008b00:	08008c55 	.word	0x08008c55
 8008b04:	08008c55 	.word	0x08008c55
 8008b08:	08008c2f 	.word	0x08008c2f
 8008b0c:	08008b95 	.word	0x08008b95
 8008b10:	08008c55 	.word	0x08008c55
 8008b14:	08008c55 	.word	0x08008c55
 8008b18:	08008c55 	.word	0x08008c55
 8008b1c:	08008c55 	.word	0x08008c55
 8008b20:	08008c55 	.word	0x08008c55
 8008b24:	08008c55 	.word	0x08008c55
 8008b28:	08008c55 	.word	0x08008c55
 8008b2c:	08008b63 	.word	0x08008b63
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8008b30:	f7fa f908 	bl	8002d44 <tud_descriptor_device_cb>
 8008b34:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <process_get_descriptor+0xa2>
 8008b3c:	4b48      	ldr	r3, [pc, #288]	@ (8008c60 <process_get_descriptor+0x1b0>)
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d000      	beq.n	8008b4e <process_get_descriptor+0x9e>
 8008b4c:	be00      	bkpt	0x0000
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e081      	b.n	8008c56 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8008b52:	79f8      	ldrb	r0, [r7, #7]
 8008b54:	2312      	movs	r3, #18
 8008b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	f000 fd9b 	bl	8009694 <tud_control_xfer>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	e079      	b.n	8008c56 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8008b62:	f7fe ffe5 	bl	8007b30 <tud_descriptor_bos_cb>
 8008b66:	4603      	mov	r3, r0
 8008b68:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8008b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <process_get_descriptor+0xc4>
 8008b70:	2300      	movs	r3, #0
 8008b72:	e070      	b.n	8008c56 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8008b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b76:	3302      	adds	r3, #2
 8008b78:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8008b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b88:	79f8      	ldrb	r0, [r7, #7]
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	f000 fd82 	bl	8009694 <tud_control_xfer>
 8008b90:	4603      	mov	r3, r0
 8008b92:	e060      	b.n	8008c56 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8008b94:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d114      	bne.n	8008bc6 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8008b9c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fa f8e7 	bl	8002d74 <tud_descriptor_configuration_cb>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8008baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d116      	bne.n	8008bde <process_get_descriptor+0x12e>
 8008bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8008c60 <process_get_descriptor+0x1b0>)
 8008bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d000      	beq.n	8008bc2 <process_get_descriptor+0x112>
 8008bc0:	be00      	bkpt	0x0000
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e047      	b.n	8008c56 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8008bc6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe ffc0 	bl	8007b50 <tud_descriptor_other_speed_configuration_cb>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8008bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <process_get_descriptor+0x12e>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e03b      	b.n	8008c56 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8008bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be0:	3302      	adds	r3, #2
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8008bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008bee:	79f8      	ldrb	r0, [r7, #7]
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	f000 fd4f 	bl	8009694 <tud_control_xfer>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	e02d      	b.n	8008c56 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fa f8c2 	bl	8002d90 <tud_descriptor_string_cb>
 8008c0c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <process_get_descriptor+0x168>
 8008c14:	2300      	movs	r3, #0
 8008c16:	e01e      	b.n	8008c56 <process_get_descriptor+0x1a6>
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8008c20:	79f8      	ldrb	r0, [r7, #7]
 8008c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	f000 fd35 	bl	8009694 <tud_control_xfer>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	e013      	b.n	8008c56 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8008c2e:	f7fe ff87 	bl	8007b40 <tud_descriptor_device_qualifier_cb>
 8008c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8008c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <process_get_descriptor+0x18e>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e00b      	b.n	8008c56 <process_get_descriptor+0x1a6>
 8008c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8008c46:	79f8      	ldrb	r0, [r7, #7]
 8008c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	f000 fd22 	bl	8009694 <tud_control_xfer>
 8008c50:	4603      	mov	r3, r0
 8008c52:	e000      	b.n	8008c56 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8008c54:	2300      	movs	r3, #0
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3750      	adds	r7, #80	@ 0x50
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	e000edf0 	.word	0xe000edf0

08008c64 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b0a0      	sub	sp, #128	@ 0x80
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	3b02      	subs	r3, #2
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	f200 8175 	bhi.w	8008f6c <dcd_event_handler+0x308>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <dcd_event_handler+0x24>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008c9d 	.word	0x08008c9d
 8008c8c:	08008d0d 	.word	0x08008d0d
 8008c90:	08008cc9 	.word	0x08008cc9
 8008c94:	08008ceb 	.word	0x08008ceb
 8008c98:	08008f39 	.word	0x08008f39
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8008c9c:	4aac      	ldr	r2, [pc, #688]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008c9e:	7813      	ldrb	r3, [r2, #0]
 8008ca0:	f023 0301 	bic.w	r3, r3, #1
 8008ca4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8008ca6:	4aaa      	ldr	r2, [pc, #680]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008ca8:	7813      	ldrb	r3, [r2, #0]
 8008caa:	f023 0302 	bic.w	r3, r3, #2
 8008cae:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8008cb0:	4ba7      	ldr	r3, [pc, #668]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8008cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cb8:	7813      	ldrb	r3, [r2, #0]
 8008cba:	f023 0304 	bic.w	r3, r3, #4
 8008cbe:	7013      	strb	r3, [r2, #0]
      send = true;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008cc6:	e15a      	b.n	8008f7e <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8008cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 814e 	beq.w	8008f74 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8008cd8:	4a9d      	ldr	r2, [pc, #628]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cda:	7813      	ldrb	r3, [r2, #0]
 8008cdc:	f043 0304 	orr.w	r3, r3, #4
 8008ce0:	7013      	strb	r3, [r2, #0]
        send = true;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008ce8:	e144      	b.n	8008f74 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8008cea:	4b99      	ldr	r3, [pc, #612]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 813f 	beq.w	8008f78 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8008cfa:	4a95      	ldr	r2, [pc, #596]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008cfc:	7813      	ldrb	r3, [r2, #0]
 8008cfe:	f023 0304 	bic.w	r3, r3, #4
 8008d02:	7013      	strb	r3, [r2, #0]
        send = true;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008d0a:	e135      	b.n	8008f78 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008d12:	e039      	b.n	8008d88 <dcd_event_handler+0x124>
 8008d14:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008d18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8008d20:	4b8c      	ldr	r3, [pc, #560]	@ (8008f54 <dcd_event_handler+0x2f0>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d207      	bcs.n	8008d3c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8008d2c:	4b8a      	ldr	r3, [pc, #552]	@ (8008f58 <dcd_event_handler+0x2f4>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d34:	015b      	lsls	r3, r3, #5
 8008d36:	4413      	add	r3, r2
 8008d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d3a:	e00f      	b.n	8008d5c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008d3c:	4b85      	ldr	r3, [pc, #532]	@ (8008f54 <dcd_event_handler+0x2f0>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d46:	429a      	cmp	r2, r3
 8008d48:	db08      	blt.n	8008d5c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008d4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d4e:	4a81      	ldr	r2, [pc, #516]	@ (8008f54 <dcd_event_handler+0x2f0>)
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	015b      	lsls	r3, r3, #5
 8008d56:	4a81      	ldr	r2, [pc, #516]	@ (8008f5c <dcd_event_handler+0x2f8>)
 8008d58:	4413      	add	r3, r2
 8008d5a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8008d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8008d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8008d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00b      	beq.n	8008d7e <dcd_event_handler+0x11a>
 8008d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8008d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	7810      	ldrb	r0, [r2, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6852      	ldr	r2, [r2, #4]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008d7e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008d82:	3301      	adds	r3, #1
 8008d84:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008d88:	4b72      	ldr	r3, [pc, #456]	@ (8008f54 <dcd_event_handler+0x2f0>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008d92:	429a      	cmp	r2, r3
 8008d94:	dabe      	bge.n	8008d14 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8008d96:	4b6e      	ldr	r3, [pc, #440]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d05a      	beq.n	8008e5a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8008da4:	4a6a      	ldr	r2, [pc, #424]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008da6:	7813      	ldrb	r3, [r2, #0]
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8008dae:	f107 0314 	add.w	r3, r7, #20
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	605a      	str	r2, [r3, #4]
 8008db8:	609a      	str	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	753b      	strb	r3, [r7, #20]
 8008dc0:	2305      	movs	r3, #5
 8008dc2:	757b      	strb	r3, [r7, #21]
 8008dc4:	f107 0314 	add.w	r3, r7, #20
 8008dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008dd0:	4b63      	ldr	r3, [pc, #396]	@ (8008f60 <dcd_event_handler+0x2fc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dda:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008dde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8008de2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008de6:	f083 0301 	eor.w	r3, r3, #1
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2000      	movs	r0, #0
 8008df6:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fde9 	bl	80079d6 <tu_fifo_write>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8008e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e0e:	f083 0301 	eor.w	r3, r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8008e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	4798      	blx	r3
  }

  return success;
 8008e20:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008e24:	f083 0301 	eor.w	r3, r3, #1
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <dcd_event_handler+0x1de>
 8008e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8008f64 <dcd_event_handler+0x300>)
 8008e30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <dcd_event_handler+0x1f4>
 8008e3e:	be00      	bkpt	0x0000
 8008e40:	e00a      	b.n	8008e58 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e44:	7818      	ldrb	r0, [r3, #0]
 8008e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008e50:	461a      	mov	r2, r3
 8008e52:	f7fe fe55 	bl	8007b00 <tud_event_hook_cb>
  return true;
 8008e56:	e000      	b.n	8008e5a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008e58:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8008f50 <dcd_event_handler+0x2ec>)
 8008e5c:	78db      	ldrb	r3, [r3, #3]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008e68:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008e6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bf14      	ite	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	2300      	moveq	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d07b      	beq.n	8008f7c <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	723b      	strb	r3, [r7, #8]
 8008e96:	2303      	movs	r3, #3
 8008e98:	727b      	strb	r3, [r7, #9]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008eac:	4b2c      	ldr	r3, [pc, #176]	@ (8008f60 <dcd_event_handler+0x2fc>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eb6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008eba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8008ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ec2:	f083 0301 	eor.w	r3, r3, #1
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8008ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fd7b 	bl	80079d6 <tu_fifo_write>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8008ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008eea:	f083 0301 	eor.w	r3, r3, #1
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8008ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2001      	movs	r0, #1
 8008efa:	4798      	blx	r3
  return success;
 8008efc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008f00:	f083 0301 	eor.w	r3, r3, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <dcd_event_handler+0x2ba>
 8008f0a:	4b16      	ldr	r3, [pc, #88]	@ (8008f64 <dcd_event_handler+0x300>)
 8008f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00c      	beq.n	8008f34 <dcd_event_handler+0x2d0>
 8008f1a:	be00      	bkpt	0x0000
 8008f1c:	e00a      	b.n	8008f34 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f20:	7818      	ldrb	r0, [r3, #0]
 8008f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	4619      	mov	r1, r3
 8008f28:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	f7fe fde7 	bl	8007b00 <tud_event_hook_cb>
  return true;
 8008f32:	e000      	b.n	8008f36 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008f34:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8008f36:	e021      	b.n	8008f7c <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8008f38:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <dcd_event_handler+0x304>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	3301      	adds	r3, #1
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b09      	ldr	r3, [pc, #36]	@ (8008f68 <dcd_event_handler+0x304>)
 8008f44:	701a      	strb	r2, [r3, #0]
      send = true;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008f4c:	e017      	b.n	8008f7e <dcd_event_handler+0x31a>
 8008f4e:	bf00      	nop
 8008f50:	20000f68 	.word	0x20000f68
 8008f54:	20000f9c 	.word	0x20000f9c
 8008f58:	20000f98 	.word	0x20000f98
 8008f5c:	0800def4 	.word	0x0800def4
 8008f60:	20001060 	.word	0x20001060
 8008f64:	e000edf0 	.word	0xe000edf0
 8008f68:	20000f94 	.word	0x20000f94

    default:
      send = true;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008f72:	e004      	b.n	8008f7e <dcd_event_handler+0x31a>
      break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <dcd_event_handler+0x31a>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <dcd_event_handler+0x31a>
      break;
 8008f7c:	bf00      	nop
  }

  if (send) {
 8008f7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d049      	beq.n	800901a <dcd_event_handler+0x3b6>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008f90:	4b24      	ldr	r3, [pc, #144]	@ (8009024 <dcd_event_handler+0x3c0>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8008fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fa6:	f083 0301 	eor.w	r3, r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fba:	3304      	adds	r3, #4
 8008fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fd09 	bl	80079d6 <tu_fifo_write>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8008fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fce:	f083 0301 	eor.w	r3, r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8008fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2001      	movs	r0, #1
 8008fde:	4798      	blx	r3
  return success;
 8008fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fe4:	f083 0301 	eor.w	r3, r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <dcd_event_handler+0x39e>
 8008fee:	4b0e      	ldr	r3, [pc, #56]	@ (8009028 <dcd_event_handler+0x3c4>)
 8008ff0:	623b      	str	r3, [r7, #32]
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <dcd_event_handler+0x3b4>
 8008ffe:	be00      	bkpt	0x0000
 8009000:	e00a      	b.n	8009018 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009004:	7818      	ldrb	r0, [r3, #0]
 8009006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	4619      	mov	r1, r3
 800900c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009010:	461a      	mov	r2, r3
 8009012:	f7fe fd75 	bl	8007b00 <tud_event_hook_cb>
  return true;
 8009016:	e000      	b.n	800901a <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009018:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800901a:	bf00      	nop
 800901c:	3780      	adds	r7, #128	@ 0x80
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20001060 	.word	0x20001060
 8009028:	e000edf0 	.word	0xe000edf0

0800902c <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800903c:	4b07      	ldr	r3, [pc, #28]	@ (800905c <usbd_int_set+0x30>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f001 f929 	bl	800a298 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8009046:	e004      	b.n	8009052 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009048:	4b04      	ldr	r3, [pc, #16]	@ (800905c <usbd_int_set+0x30>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	f001 f94b 	bl	800a2e8 <dcd_int_disable>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	2000006d 	.word	0x2000006d

08009060 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
 800906a:	4b09      	ldr	r3, [pc, #36]	@ (8009090 <usbd_spin_lock+0x30>)
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	f083 0301 	eor.w	r3, r3, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2000      	movs	r0, #0
 8009084:	4798      	blx	r3
}
 8009086:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20000070 	.word	0x20000070

08009094 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
 800909e:	4b09      	ldr	r3, [pc, #36]	@ (80090c4 <usbd_spin_unlock+0x30>)
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80090a6:	7afb      	ldrb	r3, [r7, #11]
 80090a8:	f083 0301 	eor.w	r3, r3, #1
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2001      	movs	r0, #1
 80090b8:	4798      	blx	r3
}
 80090ba:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20000070 	.word	0x20000070

080090c8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08a      	sub	sp, #40	@ 0x28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6039      	str	r1, [r7, #0]
 80090d0:	4611      	mov	r1, r2
 80090d2:	461a      	mov	r2, r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	71fb      	strb	r3, [r7, #7]
 80090d8:	460b      	mov	r3, r1
 80090da:	71bb      	strb	r3, [r7, #6]
 80090dc:	4613      	mov	r3, r2
 80090de:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e4:	e04d      	b.n	8009182 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	d108      	bne.n	8009104 <usbd_open_edpt_pair+0x3c>
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	78db      	ldrb	r3, [r3, #3]
 80090f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	797b      	ldrb	r3, [r7, #5]
 8009100:	4293      	cmp	r3, r2
 8009102:	d00a      	beq.n	800911a <usbd_open_edpt_pair+0x52>
 8009104:	4b23      	ldr	r3, [pc, #140]	@ (8009194 <usbd_open_edpt_pair+0xcc>)
 8009106:	61bb      	str	r3, [r7, #24]
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d000      	beq.n	8009116 <usbd_open_edpt_pair+0x4e>
 8009114:	be00      	bkpt	0x0000
 8009116:	2300      	movs	r3, #0
 8009118:	e038      	b.n	800918c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	6a39      	ldr	r1, [r7, #32]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 f83a 	bl	8009198 <usbd_edpt_open>
 8009124:	4603      	mov	r3, r0
 8009126:	f083 0301 	eor.w	r3, r3, #1
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <usbd_open_edpt_pair+0x7e>
 8009130:	4b18      	ldr	r3, [pc, #96]	@ (8009194 <usbd_open_edpt_pair+0xcc>)
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d000      	beq.n	8009142 <usbd_open_edpt_pair+0x7a>
 8009140:	be00      	bkpt	0x0000
 8009142:	2300      	movs	r3, #0
 8009144:	e022      	b.n	800918c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	789b      	ldrb	r3, [r3, #2]
 800914a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	09db      	lsrs	r3, r3, #7
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	d104      	bne.n	8009160 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	789a      	ldrb	r2, [r3, #2]
 800915a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	e003      	b.n	8009168 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	789a      	ldrb	r2, [r3, #2]
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800917a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	3301      	adds	r3, #1
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
 8009182:	79bb      	ldrb	r3, [r7, #6]
 8009184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009186:	429a      	cmp	r2, r3
 8009188:	dbad      	blt.n	80090e6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800918a:	2301      	movs	r3, #1
}
 800918c:	4618      	mov	r0, r3
 800918e:	3728      	adds	r7, #40	@ 0x28
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	e000edf0 	.word	0xe000edf0

08009198 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80091a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009218 <usbd_edpt_open+0x80>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	789b      	ldrb	r3, [r3, #2]
 80091ae:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	d90a      	bls.n	80091d2 <usbd_edpt_open+0x3a>
 80091bc:	4b17      	ldr	r3, [pc, #92]	@ (800921c <usbd_edpt_open+0x84>)
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d000      	beq.n	80091ce <usbd_edpt_open+0x36>
 80091cc:	be00      	bkpt	0x0000
 80091ce:	2300      	movs	r3, #0
 80091d0:	e01d      	b.n	800920e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 80091d2:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <usbd_edpt_open+0x88>)
 80091d4:	789b      	ldrb	r3, [r3, #2]
 80091d6:	2200      	movs	r2, #0
 80091d8:	4619      	mov	r1, r3
 80091da:	6838      	ldr	r0, [r7, #0]
 80091dc:	f002 fbae 	bl	800b93c <tu_edpt_validate>
 80091e0:	4603      	mov	r3, r0
 80091e2:	f083 0301 	eor.w	r3, r3, #1
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <usbd_edpt_open+0x6a>
 80091ec:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <usbd_edpt_open+0x84>)
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d000      	beq.n	80091fe <usbd_edpt_open+0x66>
 80091fc:	be00      	bkpt	0x0000
 80091fe:	2300      	movs	r3, #0
 8009200:	e005      	b.n	800920e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f992 	bl	800a530 <dcd_edpt_open>
 800920c:	4603      	mov	r3, r0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	2000006d 	.word	0x2000006d
 800921c:	e000edf0 	.word	0xe000edf0
 8009220:	20000f68 	.word	0x20000f68

08009224 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	460a      	mov	r2, r1
 800922e:	71fb      	strb	r3, [r7, #7]
 8009230:	4613      	mov	r3, r2
 8009232:	71bb      	strb	r3, [r7, #6]
 8009234:	79bb      	ldrb	r3, [r7, #6]
 8009236:	73bb      	strb	r3, [r7, #14]
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800923e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009240:	75fb      	strb	r3, [r7, #23]
 8009242:	79bb      	ldrb	r3, [r7, #6]
 8009244:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	09db      	lsrs	r3, r3, #7
 800924a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800924c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800924e:	7dfa      	ldrb	r2, [r7, #23]
 8009250:	7dbb      	ldrb	r3, [r7, #22]
 8009252:	0052      	lsls	r2, r2, #1
 8009254:	4413      	add	r3, r2
 8009256:	3320      	adds	r3, #32
 8009258:	4a05      	ldr	r2, [pc, #20]	@ (8009270 <usbd_edpt_claim+0x4c>)
 800925a:	4413      	add	r3, r2
 800925c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800925e:	2100      	movs	r1, #0
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f002 fb07 	bl	800b874 <tu_edpt_claim>
 8009266:	4603      	mov	r3, r0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000f68 	.word	0x20000f68

08009274 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	460a      	mov	r2, r1
 800927e:	71fb      	strb	r3, [r7, #7]
 8009280:	4613      	mov	r3, r2
 8009282:	71bb      	strb	r3, [r7, #6]
 8009284:	79bb      	ldrb	r3, [r7, #6]
 8009286:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009290:	75fb      	strb	r3, [r7, #23]
 8009292:	79bb      	ldrb	r3, [r7, #6]
 8009294:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	09db      	lsrs	r3, r3, #7
 800929a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800929c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800929e:	7dfa      	ldrb	r2, [r7, #23]
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	0052      	lsls	r2, r2, #1
 80092a4:	4413      	add	r3, r2
 80092a6:	3320      	adds	r3, #32
 80092a8:	4a05      	ldr	r2, [pc, #20]	@ (80092c0 <usbd_edpt_release+0x4c>)
 80092aa:	4413      	add	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80092ae:	2100      	movs	r1, #0
 80092b0:	6938      	ldr	r0, [r7, #16]
 80092b2:	f002 fb19 	bl	800b8e8 <tu_edpt_release>
 80092b6:	4603      	mov	r3, r0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000f68 	.word	0x20000f68

080092c4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	603a      	str	r2, [r7, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
 80092d2:	460b      	mov	r3, r1
 80092d4:	71bb      	strb	r3, [r7, #6]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80092da:	4b32      	ldr	r3, [pc, #200]	@ (80093a4 <usbd_edpt_xfer+0xe0>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	71fb      	strb	r3, [r7, #7]
 80092e0:	79bb      	ldrb	r3, [r7, #6]
 80092e2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80092e4:	7abb      	ldrb	r3, [r7, #10]
 80092e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ea:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80092ec:	75fb      	strb	r3, [r7, #23]
 80092ee:	79bb      	ldrb	r3, [r7, #6]
 80092f0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	09db      	lsrs	r3, r3, #7
 80092f6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80092f8:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80092fa:	7dfa      	ldrb	r2, [r7, #23]
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
 80092fe:	492a      	ldr	r1, [pc, #168]	@ (80093a8 <usbd_edpt_xfer+0xe4>)
 8009300:	0052      	lsls	r2, r2, #1
 8009302:	440a      	add	r2, r1
 8009304:	4413      	add	r3, r2
 8009306:	3320      	adds	r3, #32
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <usbd_edpt_xfer+0x66>
 8009314:	4b25      	ldr	r3, [pc, #148]	@ (80093ac <usbd_edpt_xfer+0xe8>)
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d000      	beq.n	8009326 <usbd_edpt_xfer+0x62>
 8009324:	be00      	bkpt	0x0000
 8009326:	2300      	movs	r3, #0
 8009328:	e038      	b.n	800939c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800932a:	7dfa      	ldrb	r2, [r7, #23]
 800932c:	7dbb      	ldrb	r3, [r7, #22]
 800932e:	491e      	ldr	r1, [pc, #120]	@ (80093a8 <usbd_edpt_xfer+0xe4>)
 8009330:	0052      	lsls	r2, r2, #1
 8009332:	440a      	add	r2, r1
 8009334:	4413      	add	r3, r2
 8009336:	f103 0220 	add.w	r2, r3, #32
 800933a:	7813      	ldrb	r3, [r2, #0]
 800933c:	f043 0301 	orr.w	r3, r3, #1
 8009340:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8009342:	88bb      	ldrh	r3, [r7, #4]
 8009344:	79b9      	ldrb	r1, [r7, #6]
 8009346:	79f8      	ldrb	r0, [r7, #7]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	f001 f9b5 	bl	800a6b8 <dcd_edpt_xfer>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <usbd_edpt_xfer+0x94>
    return true;
 8009354:	2301      	movs	r3, #1
 8009356:	e021      	b.n	800939c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8009358:	7dfa      	ldrb	r2, [r7, #23]
 800935a:	7dbb      	ldrb	r3, [r7, #22]
 800935c:	4912      	ldr	r1, [pc, #72]	@ (80093a8 <usbd_edpt_xfer+0xe4>)
 800935e:	0052      	lsls	r2, r2, #1
 8009360:	440a      	add	r2, r1
 8009362:	4413      	add	r3, r2
 8009364:	f103 0220 	add.w	r2, r3, #32
 8009368:	7813      	ldrb	r3, [r2, #0]
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8009370:	7dfa      	ldrb	r2, [r7, #23]
 8009372:	7dbb      	ldrb	r3, [r7, #22]
 8009374:	490c      	ldr	r1, [pc, #48]	@ (80093a8 <usbd_edpt_xfer+0xe4>)
 8009376:	0052      	lsls	r2, r2, #1
 8009378:	440a      	add	r2, r1
 800937a:	4413      	add	r3, r2
 800937c:	f103 0220 	add.w	r2, r3, #32
 8009380:	7813      	ldrb	r3, [r2, #0]
 8009382:	f023 0304 	bic.w	r3, r3, #4
 8009386:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8009388:	4b08      	ldr	r3, [pc, #32]	@ (80093ac <usbd_edpt_xfer+0xe8>)
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d000      	beq.n	800939a <usbd_edpt_xfer+0xd6>
 8009398:	be00      	bkpt	0x0000
    return false;
 800939a:	2300      	movs	r3, #0
  }
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	2000006d 	.word	0x2000006d
 80093a8:	20000f68 	.word	0x20000f68
 80093ac:	e000edf0 	.word	0xe000edf0

080093b0 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	460a      	mov	r2, r1
 80093ba:	71fb      	strb	r3, [r7, #7]
 80093bc:	4613      	mov	r3, r2
 80093be:	71bb      	strb	r3, [r7, #6]
 80093c0:	79bb      	ldrb	r3, [r7, #6]
 80093c2:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80093c4:	7b3b      	ldrb	r3, [r7, #12]
 80093c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ca:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80093cc:	73fb      	strb	r3, [r7, #15]
 80093ce:	79bb      	ldrb	r3, [r7, #6]
 80093d0:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	09db      	lsrs	r3, r3, #7
 80093d6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80093d8:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80093da:	7bfa      	ldrb	r2, [r7, #15]
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	490a      	ldr	r1, [pc, #40]	@ (8009408 <usbd_edpt_busy+0x58>)
 80093e0:	0052      	lsls	r2, r2, #1
 80093e2:	440a      	add	r2, r1
 80093e4:	4413      	add	r3, r2
 80093e6:	3320      	adds	r3, #32
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000f68 	.word	0x20000f68

0800940c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	460a      	mov	r2, r1
 8009416:	71fb      	strb	r3, [r7, #7]
 8009418:	4613      	mov	r3, r2
 800941a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800941c:	4b18      	ldr	r3, [pc, #96]	@ (8009480 <usbd_edpt_stall+0x74>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	71fb      	strb	r3, [r7, #7]
 8009422:	79bb      	ldrb	r3, [r7, #6]
 8009424:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009426:	7b3b      	ldrb	r3, [r7, #12]
 8009428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800942c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800942e:	73fb      	strb	r3, [r7, #15]
 8009430:	79bb      	ldrb	r3, [r7, #6]
 8009432:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009434:	7b7b      	ldrb	r3, [r7, #13]
 8009436:	09db      	lsrs	r3, r3, #7
 8009438:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800943a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800943c:	79ba      	ldrb	r2, [r7, #6]
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f988 	bl	800a758 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8009448:	7bfa      	ldrb	r2, [r7, #15]
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	490d      	ldr	r1, [pc, #52]	@ (8009484 <usbd_edpt_stall+0x78>)
 800944e:	0052      	lsls	r2, r2, #1
 8009450:	440a      	add	r2, r1
 8009452:	4413      	add	r3, r2
 8009454:	f103 0220 	add.w	r2, r3, #32
 8009458:	7813      	ldrb	r3, [r2, #0]
 800945a:	f043 0302 	orr.w	r3, r3, #2
 800945e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8009460:	7bfa      	ldrb	r2, [r7, #15]
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	4907      	ldr	r1, [pc, #28]	@ (8009484 <usbd_edpt_stall+0x78>)
 8009466:	0052      	lsls	r2, r2, #1
 8009468:	440a      	add	r2, r1
 800946a:	4413      	add	r3, r2
 800946c:	f103 0220 	add.w	r2, r3, #32
 8009470:	7813      	ldrb	r3, [r2, #0]
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	7013      	strb	r3, [r2, #0]
}
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	2000006d 	.word	0x2000006d
 8009484:	20000f68 	.word	0x20000f68

08009488 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	460a      	mov	r2, r1
 8009492:	71fb      	strb	r3, [r7, #7]
 8009494:	4613      	mov	r3, r2
 8009496:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8009498:	4b18      	ldr	r3, [pc, #96]	@ (80094fc <usbd_edpt_clear_stall+0x74>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	71fb      	strb	r3, [r7, #7]
 800949e:	79bb      	ldrb	r3, [r7, #6]
 80094a0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80094a2:	7b3b      	ldrb	r3, [r7, #12]
 80094a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	79bb      	ldrb	r3, [r7, #6]
 80094ae:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80094b0:	7b7b      	ldrb	r3, [r7, #13]
 80094b2:	09db      	lsrs	r3, r3, #7
 80094b4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80094b6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80094b8:	79ba      	ldrb	r2, [r7, #6]
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 f980 	bl	800a7c4 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80094c4:	7bfa      	ldrb	r2, [r7, #15]
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	490d      	ldr	r1, [pc, #52]	@ (8009500 <usbd_edpt_clear_stall+0x78>)
 80094ca:	0052      	lsls	r2, r2, #1
 80094cc:	440a      	add	r2, r1
 80094ce:	4413      	add	r3, r2
 80094d0:	f103 0220 	add.w	r2, r3, #32
 80094d4:	7813      	ldrb	r3, [r2, #0]
 80094d6:	f023 0302 	bic.w	r3, r3, #2
 80094da:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	4907      	ldr	r1, [pc, #28]	@ (8009500 <usbd_edpt_clear_stall+0x78>)
 80094e2:	0052      	lsls	r2, r2, #1
 80094e4:	440a      	add	r2, r1
 80094e6:	4413      	add	r3, r2
 80094e8:	f103 0220 	add.w	r2, r3, #32
 80094ec:	7813      	ldrb	r3, [r2, #0]
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	7013      	strb	r3, [r2, #0]
}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	2000006d 	.word	0x2000006d
 8009500:	20000f68 	.word	0x20000f68

08009504 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	460a      	mov	r2, r1
 800950e:	71fb      	strb	r3, [r7, #7]
 8009510:	4613      	mov	r3, r2
 8009512:	71bb      	strb	r3, [r7, #6]
 8009514:	79bb      	ldrb	r3, [r7, #6]
 8009516:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009518:	7b3b      	ldrb	r3, [r7, #12]
 800951a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800951e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009520:	73fb      	strb	r3, [r7, #15]
 8009522:	79bb      	ldrb	r3, [r7, #6]
 8009524:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009526:	7b7b      	ldrb	r3, [r7, #13]
 8009528:	09db      	lsrs	r3, r3, #7
 800952a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800952c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800952e:	7bfa      	ldrb	r2, [r7, #15]
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	490a      	ldr	r1, [pc, #40]	@ (800955c <usbd_edpt_stalled+0x58>)
 8009534:	0052      	lsls	r2, r2, #1
 8009536:	440a      	add	r2, r1
 8009538:	4413      	add	r3, r2
 800953a:	3320      	adds	r3, #32
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf14      	ite	ne
 8009548:	2301      	movne	r3, #1
 800954a:	2300      	moveq	r3, #0
 800954c:	b2db      	uxtb	r3, r3
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000f68 	.word	0x20000f68

08009560 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <status_stage_xact+0x1e>
 8009592:	2300      	movs	r3, #0
 8009594:	e000      	b.n	8009598 <status_stage_xact+0x20>
 8009596:	2380      	movs	r3, #128	@ 0x80
 8009598:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800959a:	7bf9      	ldrb	r1, [r7, #15]
 800959c:	79f8      	ldrb	r0, [r7, #7]
 800959e:	2300      	movs	r3, #0
 80095a0:	2200      	movs	r2, #0
 80095a2:	f7ff fe8f 	bl	80092c4 <usbd_edpt_xfer>
 80095a6:	4603      	mov	r3, r0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80095bc:	4b0b      	ldr	r3, [pc, #44]	@ (80095ec <tud_control_status+0x3c>)
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	6810      	ldr	r0, [r2, #0]
 80095c2:	6851      	ldr	r1, [r2, #4]
 80095c4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80095c6:	4b09      	ldr	r3, [pc, #36]	@ (80095ec <tud_control_status+0x3c>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <tud_control_status+0x3c>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80095d2:	4b06      	ldr	r3, [pc, #24]	@ (80095ec <tud_control_status+0x3c>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ffcb 	bl	8009578 <status_stage_xact>
 80095e2:	4603      	mov	r3, r0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20001064 	.word	0x20001064

080095f0 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80095fa:	4b24      	ldr	r3, [pc, #144]	@ (800968c <data_stage_xact+0x9c>)
 80095fc:	899a      	ldrh	r2, [r3, #12]
 80095fe:	4b23      	ldr	r3, [pc, #140]	@ (800968c <data_stage_xact+0x9c>)
 8009600:	89db      	ldrh	r3, [r3, #14]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	b29b      	uxth	r3, r3
 8009606:	837b      	strh	r3, [r7, #26]
 8009608:	2340      	movs	r3, #64	@ 0x40
 800960a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800960c:	8b7a      	ldrh	r2, [r7, #26]
 800960e:	8b3b      	ldrh	r3, [r7, #24]
 8009610:	4293      	cmp	r3, r2
 8009612:	bf28      	it	cs
 8009614:	4613      	movcs	r3, r2
 8009616:	b29b      	uxth	r3, r3
 8009618:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800961a:	2300      	movs	r3, #0
 800961c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800961e:	4b1b      	ldr	r3, [pc, #108]	@ (800968c <data_stage_xact+0x9c>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01e      	beq.n	800966a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800962c:	2380      	movs	r3, #128	@ 0x80
 800962e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8009630:	8bbb      	ldrh	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d019      	beq.n	800966a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8009636:	4b15      	ldr	r3, [pc, #84]	@ (800968c <data_stage_xact+0x9c>)
 8009638:	689a      	ldr	r2, [r3, #8]
 800963a:	8bbb      	ldrh	r3, [r7, #28]
 800963c:	4914      	ldr	r1, [pc, #80]	@ (8009690 <data_stage_xact+0xa0>)
 800963e:	6179      	str	r1, [r7, #20]
 8009640:	2140      	movs	r1, #64	@ 0x40
 8009642:	6139      	str	r1, [r7, #16]
 8009644:	60fa      	str	r2, [r7, #12]
 8009646:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	429a      	cmp	r2, r3
 800964e:	d202      	bcs.n	8009656 <data_stage_xact+0x66>
    return -1;
 8009650:	f04f 33ff 	mov.w	r3, #4294967295
 8009654:	e005      	b.n	8009662 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	68f9      	ldr	r1, [r7, #12]
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f002 fd0b 	bl	800c076 <memcpy>
  return 0;
 8009660:	2300      	movs	r3, #0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <data_stage_xact+0x7a>
 8009666:	2300      	movs	r3, #0
 8009668:	e00b      	b.n	8009682 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800966a:	8bbb      	ldrh	r3, [r7, #28]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <data_stage_xact+0x84>
 8009670:	4a07      	ldr	r2, [pc, #28]	@ (8009690 <data_stage_xact+0xa0>)
 8009672:	e000      	b.n	8009676 <data_stage_xact+0x86>
 8009674:	2200      	movs	r2, #0
 8009676:	8bbb      	ldrh	r3, [r7, #28]
 8009678:	7ff9      	ldrb	r1, [r7, #31]
 800967a:	79f8      	ldrb	r0, [r7, #7]
 800967c:	f7ff fe22 	bl	80092c4 <usbd_edpt_xfer>
 8009680:	4603      	mov	r3, r0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20001064 	.word	0x20001064
 8009690:	20001078 	.word	0x20001078

08009694 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
 800969e:	461a      	mov	r2, r3
 80096a0:	4603      	mov	r3, r0
 80096a2:	73fb      	strb	r3, [r7, #15]
 80096a4:	4613      	mov	r3, r2
 80096a6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80096a8:	4b30      	ldr	r3, [pc, #192]	@ (800976c <tud_control_xfer+0xd8>)
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	6810      	ldr	r0, [r2, #0]
 80096ae:	6851      	ldr	r1, [r2, #4]
 80096b0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80096b2:	4a2e      	ldr	r2, [pc, #184]	@ (800976c <tud_control_xfer+0xd8>)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80096b8:	4b2c      	ldr	r3, [pc, #176]	@ (800976c <tud_control_xfer+0xd8>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	88db      	ldrh	r3, [r3, #6]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	89bb      	ldrh	r3, [r7, #12]
 80096c6:	827b      	strh	r3, [r7, #18]
 80096c8:	4613      	mov	r3, r2
 80096ca:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80096cc:	8a7a      	ldrh	r2, [r7, #18]
 80096ce:	8a3b      	ldrh	r3, [r7, #16]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	bf28      	it	cs
 80096d4:	4613      	movcs	r3, r2
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	4b24      	ldr	r3, [pc, #144]	@ (800976c <tud_control_xfer+0xd8>)
 80096da:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	88db      	ldrh	r3, [r3, #6]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d026      	beq.n	8009734 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80096e6:	4b21      	ldr	r3, [pc, #132]	@ (800976c <tud_control_xfer+0xd8>)
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <tud_control_xfer+0x76>
 80096f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009770 <tud_control_xfer+0xdc>)
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d000      	beq.n	8009706 <tud_control_xfer+0x72>
 8009704:	be00      	bkpt	0x0000
 8009706:	2300      	movs	r3, #0
 8009708:	e02b      	b.n	8009762 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff ff6f 	bl	80095f0 <data_stage_xact>
 8009712:	4603      	mov	r3, r0
 8009714:	f083 0301 	eor.w	r3, r3, #1
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d020      	beq.n	8009760 <tud_control_xfer+0xcc>
 800971e:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <tud_control_xfer+0xdc>)
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d000      	beq.n	8009730 <tud_control_xfer+0x9c>
 800972e:	be00      	bkpt	0x0000
 8009730:	2300      	movs	r3, #0
 8009732:	e016      	b.n	8009762 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff ff1d 	bl	8009578 <status_stage_xact>
 800973e:	4603      	mov	r3, r0
 8009740:	f083 0301 	eor.w	r3, r3, #1
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <tud_control_xfer+0xcc>
 800974a:	4b09      	ldr	r3, [pc, #36]	@ (8009770 <tud_control_xfer+0xdc>)
 800974c:	61fb      	str	r3, [r7, #28]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d000      	beq.n	800975c <tud_control_xfer+0xc8>
 800975a:	be00      	bkpt	0x0000
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <tud_control_xfer+0xce>
  }

  return true;
 8009760:	2301      	movs	r3, #1
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001064 	.word	0x20001064
 8009770:	e000edf0 	.word	0xe000edf0

08009774 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8009778:	2214      	movs	r2, #20
 800977a:	2100      	movs	r1, #0
 800977c:	4802      	ldr	r0, [pc, #8]	@ (8009788 <usbd_control_reset+0x14>)
 800977e:	f002 fba2 	bl	800bec6 <memset>
}
 8009782:	bf00      	nop
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20001064 	.word	0x20001064

0800978c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8009794:	4a04      	ldr	r2, [pc, #16]	@ (80097a8 <usbd_control_set_complete_callback+0x1c>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6113      	str	r3, [r2, #16]
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20001064 	.word	0x20001064

080097ac <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80097b4:	4b09      	ldr	r3, [pc, #36]	@ (80097dc <usbd_control_set_request+0x30>)
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	6810      	ldr	r0, [r2, #0]
 80097ba:	6851      	ldr	r1, [r2, #4]
 80097bc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80097be:	4b07      	ldr	r3, [pc, #28]	@ (80097dc <usbd_control_set_request+0x30>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80097c4:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <usbd_control_set_request+0x30>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80097ca:	4b04      	ldr	r3, [pc, #16]	@ (80097dc <usbd_control_set_request+0x30>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	819a      	strh	r2, [r3, #12]
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20001064 	.word	0x20001064

080097e0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4603      	mov	r3, r0
 80097ea:	71fb      	strb	r3, [r7, #7]
 80097ec:	460b      	mov	r3, r1
 80097ee:	71bb      	strb	r3, [r7, #6]
 80097f0:	4613      	mov	r3, r2
 80097f2:	717b      	strb	r3, [r7, #5]
 80097f4:	79bb      	ldrb	r3, [r7, #6]
 80097f6:	73fb      	strb	r3, [r7, #15]
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	09db      	lsrs	r3, r3, #7
 80097fc:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 80097fe:	4a4f      	ldr	r2, [pc, #316]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009800:	7812      	ldrb	r2, [r2, #0]
 8009802:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	4293      	cmp	r3, r2
 800980a:	d01e      	beq.n	800984a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <usbd_control_xfer_cb+0x48>
 8009812:	4b4b      	ldr	r3, [pc, #300]	@ (8009940 <usbd_control_xfer_cb+0x160>)
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d000      	beq.n	8009824 <usbd_control_xfer_cb+0x44>
 8009822:	be00      	bkpt	0x0000
 8009824:	2300      	movs	r3, #0
 8009826:	e084      	b.n	8009932 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	4944      	ldr	r1, [pc, #272]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fe97 	bl	8009560 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8009832:	4b42      	ldr	r3, [pc, #264]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800983a:	4b40      	ldr	r3, [pc, #256]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	79f8      	ldrb	r0, [r7, #7]
 8009840:	4a3e      	ldr	r2, [pc, #248]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009842:	2103      	movs	r1, #3
 8009844:	4798      	blx	r3
    }

    return true;
 8009846:	2301      	movs	r3, #1
 8009848:	e073      	b.n	8009932 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800984a:	4b3c      	ldr	r3, [pc, #240]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10c      	bne.n	8009872 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8009858:	4b38      	ldr	r3, [pc, #224]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <usbd_control_xfer_cb+0x84>
 8009860:	2300      	movs	r3, #0
 8009862:	e066      	b.n	8009932 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8009864:	4b35      	ldr	r3, [pc, #212]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	4936      	ldr	r1, [pc, #216]	@ (8009944 <usbd_control_xfer_cb+0x164>)
 800986c:	4618      	mov	r0, r3
 800986e:	f002 fc02 	bl	800c076 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8009872:	4b32      	ldr	r3, [pc, #200]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009874:	89da      	ldrh	r2, [r3, #14]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	4413      	add	r3, r2
 800987c:	b29a      	uxth	r2, r3
 800987e:	4b2f      	ldr	r3, [pc, #188]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009880:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8009882:	4b2e      	ldr	r3, [pc, #184]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	4413      	add	r3, r2
 800988a:	4a2c      	ldr	r2, [pc, #176]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 800988c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800988e:	4b2b      	ldr	r3, [pc, #172]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009890:	88da      	ldrh	r2, [r3, #6]
 8009892:	4b2a      	ldr	r3, [pc, #168]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 8009894:	89db      	ldrh	r3, [r3, #14]
 8009896:	429a      	cmp	r2, r3
 8009898:	d002      	beq.n	80098a0 <usbd_control_xfer_cb+0xc0>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b3f      	cmp	r3, #63	@ 0x3f
 800989e:	d831      	bhi.n	8009904 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 80098a0:	2301      	movs	r3, #1
 80098a2:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 80098a4:	4b25      	ldr	r3, [pc, #148]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d007      	beq.n	80098bc <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80098ac:	4b23      	ldr	r3, [pc, #140]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	79f8      	ldrb	r0, [r7, #7]
 80098b2:	4a22      	ldr	r2, [pc, #136]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 80098b4:	2102      	movs	r1, #2
 80098b6:	4798      	blx	r3
 80098b8:	4603      	mov	r3, r0
 80098ba:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 80098bc:	7ffb      	ldrb	r3, [r7, #31]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d015      	beq.n	80098ee <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	491d      	ldr	r1, [pc, #116]	@ (800993c <usbd_control_xfer_cb+0x15c>)
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff fe56 	bl	8009578 <status_stage_xact>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f083 0301 	eor.w	r3, r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02a      	beq.n	800992e <usbd_control_xfer_cb+0x14e>
 80098d8:	4b19      	ldr	r3, [pc, #100]	@ (8009940 <usbd_control_xfer_cb+0x160>)
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d000      	beq.n	80098ea <usbd_control_xfer_cb+0x10a>
 80098e8:	be00      	bkpt	0x0000
 80098ea:	2300      	movs	r3, #0
 80098ec:	e021      	b.n	8009932 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 ff30 	bl	800a758 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	2180      	movs	r1, #128	@ 0x80
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 ff2b 	bl	800a758 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8009902:	e014      	b.n	800992e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fe72 	bl	80095f0 <data_stage_xact>
 800990c:	4603      	mov	r3, r0
 800990e:	f083 0301 	eor.w	r3, r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <usbd_control_xfer_cb+0x150>
 8009918:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <usbd_control_xfer_cb+0x160>)
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d000      	beq.n	800992a <usbd_control_xfer_cb+0x14a>
 8009928:	be00      	bkpt	0x0000
 800992a:	2300      	movs	r3, #0
 800992c:	e001      	b.n	8009932 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800992e:	bf00      	nop
  }

  return true;
 8009930:	2301      	movs	r3, #1
}
 8009932:	4618      	mov	r0, r3
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20001064 	.word	0x20001064
 8009940:	e000edf0 	.word	0xe000edf0
 8009944:	20001078 	.word	0x20001078

08009948 <__NVIC_EnableIRQ>:
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009956:	2b00      	cmp	r3, #0
 8009958:	db0b      	blt.n	8009972 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	f003 021f 	and.w	r2, r3, #31
 8009960:	4907      	ldr	r1, [pc, #28]	@ (8009980 <__NVIC_EnableIRQ+0x38>)
 8009962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009966:	095b      	lsrs	r3, r3, #5
 8009968:	2001      	movs	r0, #1
 800996a:	fa00 f202 	lsl.w	r2, r0, r2
 800996e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	e000e100 	.word	0xe000e100

08009984 <__NVIC_DisableIRQ>:
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800998e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009992:	2b00      	cmp	r3, #0
 8009994:	db12      	blt.n	80099bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	f003 021f 	and.w	r2, r3, #31
 800999c:	490a      	ldr	r1, [pc, #40]	@ (80099c8 <__NVIC_DisableIRQ+0x44>)
 800999e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a2:	095b      	lsrs	r3, r3, #5
 80099a4:	2001      	movs	r0, #1
 80099a6:	fa00 f202 	lsl.w	r2, r0, r2
 80099aa:	3320      	adds	r3, #32
 80099ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80099b0:	f3bf 8f4f 	dsb	sy
}
 80099b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80099b6:	f3bf 8f6f 	isb	sy
}
 80099ba:	bf00      	nop
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	e000e100 	.word	0xe000e100

080099cc <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	71fb      	strb	r3, [r7, #7]
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	4a13      	ldr	r2, [pc, #76]	@ (8009a34 <dma_setup_prepare+0x68>)
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	4413      	add	r3, r2
 80099ec:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099ee:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f4:	4a10      	ldr	r2, [pc, #64]	@ (8009a38 <dma_setup_prepare+0x6c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d904      	bls.n	8009a04 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	db10      	blt.n	8009a26 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a0d      	ldr	r2, [pc, #52]	@ (8009a3c <dma_setup_prepare+0x70>)
 8009a08:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8009a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009a40 <dma_setup_prepare+0x74>)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009a1a:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8009a24:	e000      	b.n	8009a28 <dma_setup_prepare+0x5c>
      return;
 8009a26:	bf00      	nop
}
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	0800df34 	.word	0x0800df34
 8009a38:	4f543009 	.word	0x4f543009
 8009a3c:	20080008 	.word	0x20080008
 8009a40:	20001140 	.word	0x20001140

08009a44 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8009a44:	b480      	push	{r7}
 8009a46:	b091      	sub	sp, #68	@ 0x44
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	71fb      	strb	r3, [r7, #7]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	71bb      	strb	r3, [r7, #6]
 8009a52:	4613      	mov	r3, r2
 8009a54:	80bb      	strh	r3, [r7, #4]
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009a5a:	7e7b      	ldrb	r3, [r7, #25]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <dfifo_alloc+0x20>
    rhport = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a64:	7e7b      	ldrb	r3, [r7, #25]
 8009a66:	4a65      	ldr	r2, [pc, #404]	@ (8009bfc <dfifo_alloc+0x1b8>)
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	4413      	add	r3, r2
 8009a6c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	4a61      	ldr	r2, [pc, #388]	@ (8009bfc <dfifo_alloc+0x1b8>)
 8009a76:	4413      	add	r3, r2
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8009a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7c:	7a1b      	ldrb	r3, [r3, #8]
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009a82:	79bb      	ldrb	r3, [r7, #6]
 8009a84:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009a86:	7ebb      	ldrb	r3, [r7, #26]
 8009a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8c:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009a8e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8009a92:	79bb      	ldrb	r3, [r7, #6]
 8009a94:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009a96:	7efb      	ldrb	r3, [r7, #27]
 8009a98:	09db      	lsrs	r3, r3, #7
 8009a9a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8009a9c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8009aa0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8009aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d30a      	bcc.n	8009ac2 <dfifo_alloc+0x7e>
 8009aac:	4b54      	ldr	r3, [pc, #336]	@ (8009c00 <dfifo_alloc+0x1bc>)
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d000      	beq.n	8009abe <dfifo_alloc+0x7a>
 8009abc:	be00      	bkpt	0x0000
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e095      	b.n	8009bee <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8009ac2:	88bb      	ldrh	r3, [r7, #4]
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	2304      	movs	r3, #4
 8009ac8:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	4413      	add	r3, r2
 8009ad0:	1e5a      	subs	r2, r3, #1
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8009ada:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d12a      	bne.n	8009b38 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009ae2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	81fb      	strh	r3, [r7, #14]
 8009aea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009aee:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009af0:	89fb      	ldrh	r3, [r7, #14]
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f103 0208 	add.w	r2, r3, #8
 8009afa:	7b7b      	ldrb	r3, [r7, #13]
 8009afc:	4413      	add	r3, r2
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009b04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8009b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d26d      	bcs.n	8009bec <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8009b10:	4b3c      	ldr	r3, [pc, #240]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009b12:	889b      	ldrh	r3, [r3, #4]
 8009b14:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d90a      	bls.n	8009b30 <dfifo_alloc+0xec>
 8009b1a:	4b39      	ldr	r3, [pc, #228]	@ (8009c00 <dfifo_alloc+0x1bc>)
 8009b1c:	623b      	str	r3, [r7, #32]
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d000      	beq.n	8009b2c <dfifo_alloc+0xe8>
 8009b2a:	be00      	bkpt	0x0000
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e05e      	b.n	8009bee <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8009b30:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b34:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b36:	e059      	b.n	8009bec <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8009b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3a:	7a5b      	ldrb	r3, [r3, #9]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8009b40:	4b30      	ldr	r3, [pc, #192]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009b42:	799a      	ldrb	r2, [r3, #6]
 8009b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b46:	7a5b      	ldrb	r3, [r3, #9]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d30a      	bcc.n	8009b62 <dfifo_alloc+0x11e>
 8009b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8009c00 <dfifo_alloc+0x1bc>)
 8009b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d000      	beq.n	8009b5e <dfifo_alloc+0x11a>
 8009b5c:	be00      	bkpt	0x0000
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e045      	b.n	8009bee <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8009b62:	4b28      	ldr	r3, [pc, #160]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009b64:	799b      	ldrb	r3, [r3, #6]
 8009b66:	3301      	adds	r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009b6c:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8009b7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8009b80:	4b20      	ldr	r3, [pc, #128]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009b82:	889b      	ldrh	r3, [r3, #4]
 8009b84:	4619      	mov	r1, r3
 8009b86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	4413      	add	r3, r2
 8009b8e:	4299      	cmp	r1, r3
 8009b90:	d20a      	bcs.n	8009ba8 <dfifo_alloc+0x164>
 8009b92:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <dfifo_alloc+0x1bc>)
 8009b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d000      	beq.n	8009ba4 <dfifo_alloc+0x160>
 8009ba2:	be00      	bkpt	0x0000
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e022      	b.n	8009bee <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8009ba8:	4b16      	ldr	r3, [pc, #88]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009baa:	889a      	ldrh	r2, [r3, #4]
 8009bac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	4b14      	ldr	r3, [pc, #80]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009bb4:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8009bb6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d108      	bne.n	8009bd0 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8009bbe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009bc0:	041b      	lsls	r3, r3, #16
 8009bc2:	4a10      	ldr	r2, [pc, #64]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009bc4:	8892      	ldrh	r2, [r2, #4]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bce:	e00d      	b.n	8009bec <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8009bd0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009bd2:	041b      	lsls	r3, r3, #16
 8009bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8009c04 <dfifo_alloc+0x1c0>)
 8009bd6:	8892      	ldrh	r2, [r2, #4]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8009bde:	3b01      	subs	r3, #1
 8009be0:	4611      	mov	r1, r2
 8009be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009be4:	3340      	adds	r3, #64	@ 0x40
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8009bec:	2301      	movs	r3, #1
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3744      	adds	r7, #68	@ 0x44
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	0800df34 	.word	0x0800df34
 8009c00:	e000edf0 	.word	0xe000edf0
 8009c04:	20001138 	.word	0x20001138

08009c08 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	4a27      	ldr	r2, [pc, #156]	@ (8009cb4 <dfifo_device_init+0xac>)
 8009c18:	4413      	add	r3, r2
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c20:	7b3b      	ldrb	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <dfifo_device_init+0x22>
    rhport = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c2a:	7b3b      	ldrb	r3, [r7, #12]
 8009c2c:	4a21      	ldr	r2, [pc, #132]	@ (8009cb4 <dfifo_device_init+0xac>)
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009c34:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	7a1b      	ldrb	r3, [r3, #8]
 8009c3a:	2240      	movs	r2, #64	@ 0x40
 8009c3c:	81fa      	strh	r2, [r7, #14]
 8009c3e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009c40:	89fb      	ldrh	r3, [r7, #14]
 8009c42:	089b      	lsrs	r3, r3, #2
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f103 0208 	add.w	r2, r3, #8
 8009c4a:	7b7b      	ldrb	r3, [r7, #13]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009c54:	461a      	mov	r2, r3
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c62:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009c64:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8009c66:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	089b      	lsrs	r3, r3, #2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	4b11      	ldr	r3, [pc, #68]	@ (8009cb8 <dfifo_device_init+0xb0>)
 8009c72:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb8 <dfifo_device_init+0xb0>)
 8009c7c:	889a      	ldrh	r2, [r3, #4]
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	7a1b      	ldrb	r3, [r3, #8]
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <dfifo_device_init+0xb0>)
 8009c8c:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <dfifo_device_init+0xb0>)
 8009c90:	889b      	ldrh	r3, [r3, #4]
 8009c92:	461a      	mov	r2, r3
 8009c94:	4613      	mov	r3, r2
 8009c96:	041b      	lsls	r3, r3, #16
 8009c98:	441a      	add	r2, r3
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	2240      	movs	r2, #64	@ 0x40
 8009ca2:	2180      	movs	r1, #128	@ 0x80
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fecd 	bl	8009a44 <dfifo_alloc>
}
 8009caa:	bf00      	nop
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800df34 	.word	0x0800df34
 8009cb8:	20001138 	.word	0x20001138

08009cbc <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8009cbc:	b480      	push	{r7}
 8009cbe:	b08b      	sub	sp, #44	@ 0x2c
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	71fb      	strb	r3, [r7, #7]
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009ccc:	7c7b      	ldrb	r3, [r7, #17]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <edpt_activate+0x1a>
    rhport = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009cd6:	7c7b      	ldrb	r3, [r7, #17]
 8009cd8:	4a45      	ldr	r2, [pc, #276]	@ (8009df0 <edpt_activate+0x134>)
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	4413      	add	r3, r2
 8009cde:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	789b      	ldrb	r3, [r3, #2]
 8009ce6:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ce8:	7cbb      	ldrb	r3, [r7, #18]
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	789b      	ldrb	r3, [r3, #2]
 8009cf8:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009cfa:	7cfb      	ldrb	r3, [r7, #19]
 8009cfc:	09db      	lsrs	r3, r3, #7
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009d04:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009d08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009d0c:	0052      	lsls	r2, r2, #1
 8009d0e:	4413      	add	r3, r2
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	4a38      	ldr	r2, [pc, #224]	@ (8009df4 <edpt_activate+0x138>)
 8009d14:	4413      	add	r3, r2
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	889b      	ldrh	r3, [r3, #4]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d26:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	799a      	ldrb	r2, [r3, #6]
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	895b      	ldrh	r3, [r3, #10]
 8009d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	89bb      	ldrh	r3, [r7, #12]
 8009d44:	f362 030a 	bfi	r3, r2, #0, #11
 8009d48:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8009d4a:	7b7b      	ldrb	r3, [r7, #13]
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d50:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	78db      	ldrb	r3, [r3, #3]
 8009d56:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	f362 0383 	bfi	r3, r2, #2, #2
 8009d62:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	78db      	ldrb	r3, [r3, #3]
 8009d68:	f003 0303 	and.w	r3, r3, #3
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d003      	beq.n	8009d7a <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	f043 0310 	orr.w	r3, r3, #16
 8009d78:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8009d7a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d108      	bne.n	8009d94 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8009d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	f362 1389 	bfi	r3, r2, #6, #4
 8009d92:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009d94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	bf14      	ite	ne
 8009d9c:	2301      	movne	r3, #1
 8009d9e:	2300      	moveq	r3, #0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	461a      	mov	r2, r3
 8009da4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009da8:	0112      	lsls	r2, r2, #4
 8009daa:	4413      	add	r3, r2
 8009dac:	3348      	adds	r3, #72	@ 0x48
 8009dae:	015b      	lsls	r3, r3, #5
 8009db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009db2:	4413      	add	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8009dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009dc6:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8009dca:	2901      	cmp	r1, #1
 8009dcc:	d101      	bne.n	8009dd2 <edpt_activate+0x116>
 8009dce:	2100      	movs	r1, #0
 8009dd0:	e000      	b.n	8009dd4 <edpt_activate+0x118>
 8009dd2:	2110      	movs	r1, #16
 8009dd4:	440b      	add	r3, r1
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8009de4:	bf00      	nop
 8009de6:	372c      	adds	r7, #44	@ 0x2c
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	0800df34 	.word	0x0800df34
 8009df4:	200010b8 	.word	0x200010b8

08009df8 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8009df8:	b480      	push	{r7}
 8009dfa:	b089      	sub	sp, #36	@ 0x24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]
 8009e02:	460b      	mov	r3, r1
 8009e04:	71bb      	strb	r3, [r7, #6]
 8009e06:	4613      	mov	r3, r2
 8009e08:	717b      	strb	r3, [r7, #5]
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009e0e:	7c7b      	ldrb	r3, [r7, #17]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <edpt_disable+0x20>
    rhport = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009e18:	7c7b      	ldrb	r3, [r7, #17]
 8009e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8009f88 <edpt_disable+0x190>)
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	4413      	add	r3, r2
 8009e20:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	79bb      	ldrb	r3, [r7, #6]
 8009e26:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009e28:	7cbb      	ldrb	r3, [r7, #18]
 8009e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e2e:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009e30:	76fb      	strb	r3, [r7, #27]
 8009e32:	79bb      	ldrb	r3, [r7, #6]
 8009e34:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009e36:	7cfb      	ldrb	r3, [r7, #19]
 8009e38:	09db      	lsrs	r3, r3, #7
 8009e3a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8009e3c:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009e3e:	7ebb      	ldrb	r3, [r7, #26]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	bf14      	ite	ne
 8009e44:	2301      	movne	r3, #1
 8009e46:	2300      	moveq	r3, #0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	7efb      	ldrb	r3, [r7, #27]
 8009e4e:	0112      	lsls	r2, r2, #4
 8009e50:	4413      	add	r3, r2
 8009e52:	3348      	adds	r3, #72	@ 0x48
 8009e54:	015b      	lsls	r3, r3, #5
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8009e5c:	7ebb      	ldrb	r3, [r7, #26]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d149      	bne.n	8009ef6 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8009e62:	7efb      	ldrb	r3, [r7, #27]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <edpt_disable+0x78>
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	db0d      	blt.n	8009e8c <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	797a      	ldrb	r2, [r7, #5]
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	d002      	beq.n	8009e80 <edpt_disable+0x88>
 8009e7a:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8009e7e:	e001      	b.n	8009e84 <edpt_disable+0x8c>
 8009e80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009e84:	431a      	orrs	r2, r3
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e022      	b.n	8009ed2 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8009e98:	bf00      	nop
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f9      	beq.n	8009e9a <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	797a      	ldrb	r2, [r7, #5]
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	d001      	beq.n	8009eb4 <edpt_disable+0xbc>
 8009eb0:	4a36      	ldr	r2, [pc, #216]	@ (8009f8c <edpt_disable+0x194>)
 8009eb2:	e001      	b.n	8009eb8 <edpt_disable+0xc0>
 8009eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8009ebe:	bf00      	nop
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0f9      	beq.n	8009ec0 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	609a      	str	r2, [r3, #8]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	7efb      	ldrb	r3, [r7, #27]
 8009ed8:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009eda:	7afb      	ldrb	r3, [r7, #11]
 8009edc:	019b      	lsls	r3, r3, #6
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009ee6:	bf00      	nop
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f9      	bne.n	8009ee8 <edpt_disable+0xf0>
}
 8009ef4:	e041      	b.n	8009f7a <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8009ef6:	7efb      	ldrb	r3, [r7, #27]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <edpt_disable+0x10c>
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	db0c      	blt.n	8009f1e <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	797a      	ldrb	r2, [r7, #5]
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	d002      	beq.n	8009f14 <edpt_disable+0x11c>
 8009f0e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009f12:	e000      	b.n	8009f16 <edpt_disable+0x11e>
 8009f14:	2200      	movs	r2, #0
 8009f16:	431a      	orrs	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e02d      	b.n	8009f7a <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8009f2e:	bf00      	nop
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0f9      	beq.n	8009f30 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	797a      	ldrb	r2, [r7, #5]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d001      	beq.n	8009f4a <edpt_disable+0x152>
 8009f46:	4a11      	ldr	r2, [pc, #68]	@ (8009f8c <edpt_disable+0x194>)
 8009f48:	e001      	b.n	8009f4e <edpt_disable+0x156>
 8009f4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009f54:	bf00      	nop
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0f9      	beq.n	8009f56 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2202      	movs	r2, #2
 8009f66:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009f6e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8009f78:	bf00      	nop
 8009f7a:	bf00      	nop
 8009f7c:	3724      	adds	r7, #36	@ 0x24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	0800df34 	.word	0x0800df34
 8009f8c:	40200000 	.word	0x40200000

08009f90 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b090      	sub	sp, #64	@ 0x40
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	71fb      	strb	r3, [r7, #7]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	71bb      	strb	r3, [r7, #6]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	717b      	strb	r3, [r7, #5]
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009fa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <edpt_schedule_packets+0x26>
    rhport = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fba:	4a65      	ldr	r2, [pc, #404]	@ (800a150 <edpt_schedule_packets+0x1c0>)
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	4413      	add	r3, r2
 8009fc0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8009fc4:	79ba      	ldrb	r2, [r7, #6]
 8009fc6:	797b      	ldrb	r3, [r7, #5]
 8009fc8:	0052      	lsls	r2, r2, #1
 8009fca:	4413      	add	r3, r2
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	4a61      	ldr	r2, [pc, #388]	@ (800a154 <edpt_schedule_packets+0x1c4>)
 8009fd0:	4413      	add	r3, r2
 8009fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009fd4:	797b      	ldrb	r3, [r7, #5]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	bf14      	ite	ne
 8009fda:	2301      	movne	r3, #1
 8009fdc:	2300      	moveq	r3, #0
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	79bb      	ldrb	r3, [r7, #6]
 8009fe4:	0112      	lsls	r2, r2, #4
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3348      	adds	r3, #72	@ 0x48
 8009fea:	015b      	lsls	r3, r3, #5
 8009fec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fee:	4413      	add	r3, r2
 8009ff0:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8009ff2:	79bb      	ldrb	r3, [r7, #6]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11c      	bne.n	800a032 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8009ff8:	797b      	ldrb	r3, [r7, #5]
 8009ffa:	4a57      	ldr	r2, [pc, #348]	@ (800a158 <edpt_schedule_packets+0x1c8>)
 8009ffc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a002:	895b      	ldrh	r3, [r3, #10]
 800a004:	853a      	strh	r2, [r7, #40]	@ 0x28
 800a006:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a008:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a00a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a00c:	4293      	cmp	r3, r2
 800a00e:	bf28      	it	cs
 800a010:	4613      	movcs	r3, r2
 800a012:	b29b      	uxth	r3, r3
 800a014:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800a016:	797b      	ldrb	r3, [r7, #5]
 800a018:	4a4f      	ldr	r2, [pc, #316]	@ (800a158 <edpt_schedule_packets+0x1c8>)
 800a01a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800a01e:	797b      	ldrb	r3, [r7, #5]
 800a020:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a022:	1a8a      	subs	r2, r1, r2
 800a024:	b291      	uxth	r1, r2
 800a026:	4a4c      	ldr	r2, [pc, #304]	@ (800a158 <edpt_schedule_packets+0x1c8>)
 800a028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800a02c:	2301      	movs	r3, #1
 800a02e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a030:	e014      	b.n	800a05c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800a032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a034:	891b      	ldrh	r3, [r3, #8]
 800a036:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800a038:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a03a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a03c:	8952      	ldrh	r2, [r2, #10]
 800a03e:	623b      	str	r3, [r7, #32]
 800a040:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a042:	6a3a      	ldr	r2, [r7, #32]
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a050:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800a052:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800a058:	2301      	movs	r3, #1
 800a05a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800a05c:	2300      	movs	r3, #0
 800a05e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800a060:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a062:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f362 0312 	bfi	r3, r2, #0, #19
 800a06c:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800a06e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a074:	b29a      	uxth	r2, r3
 800a076:	8afb      	ldrh	r3, [r7, #22]
 800a078:	f362 03cc 	bfi	r3, r2, #3, #10
 800a07c:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800a08a:	7cfb      	ldrb	r3, [r7, #19]
 800a08c:	f043 0304 	orr.w	r3, r3, #4
 800a090:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800a092:	7cfb      	ldrb	r3, [r7, #19]
 800a094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a098:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800a09a:	7cbb      	ldrb	r3, [r7, #18]
 800a09c:	f003 030c 	and.w	r3, r3, #12
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d11a      	bne.n	800a0dc <edpt_schedule_packets+0x14c>
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a8:	7b1b      	ldrb	r3, [r3, #12]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d116      	bne.n	800a0dc <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a0b4:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d004      	beq.n	800a0d4 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800a0ca:	7cfb      	ldrb	r3, [r7, #19]
 800a0cc:	f043 0310 	orr.w	r3, r3, #16
 800a0d0:	74fb      	strb	r3, [r7, #19]
 800a0d2:	e003      	b.n	800a0dc <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	f043 0320 	orr.w	r3, r3, #32
 800a0da:	74fb      	strb	r3, [r7, #19]
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0de:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0e4:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a0e6:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800a0e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800a0ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d015      	beq.n	800a120 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800a0f4:	797b      	ldrb	r3, [r7, #5]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d109      	bne.n	800a10e <edpt_schedule_packets+0x17e>
 800a0fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d006      	beq.n	800a10e <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800a100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fd fd5c 	bl	8007bc6 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800a10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800a11e:	e013      	b.n	800a148 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800a126:	797b      	ldrb	r3, [r7, #5]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d10d      	bne.n	800a148 <edpt_schedule_packets+0x1b8>
 800a12c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a138:	79ba      	ldrb	r2, [r7, #6]
 800a13a:	2101      	movs	r1, #1
 800a13c:	fa01 f202 	lsl.w	r2, r1, r2
 800a140:	431a      	orrs	r2, r3
 800a142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a144:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800a148:	bf00      	nop
 800a14a:	3740      	adds	r7, #64	@ 0x40
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	0800df34 	.word	0x0800df34
 800a154:	200010b8 	.word	0x200010b8
 800a158:	20001138 	.word	0x20001138

0800a15c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08c      	sub	sp, #48	@ 0x30
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <dcd_init+0x1a>
    rhport = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	4a43      	ldr	r2, [pc, #268]	@ (800a288 <dcd_init+0x12c>)
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	4413      	add	r3, r2
 800a17e:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a180:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800a182:	2208      	movs	r2, #8
 800a184:	2100      	movs	r1, #0
 800a186:	4841      	ldr	r0, [pc, #260]	@ (800a28c <dcd_init+0x130>)
 800a188:	f001 fe9d 	bl	800bec6 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800a18c:	2101      	movs	r1, #1
 800a18e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a190:	f001 f9c6 	bl	800b520 <dwc2_core_is_highspeed>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1a2:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a1a4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a1a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800a1aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a1ae:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f001 f9d1 	bl	800b55c <dwc2_core_init>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f083 0301 	eor.w	r3, r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <dcd_init+0x80>
 800a1c6:	4b32      	ldr	r3, [pc, #200]	@ (800a290 <dcd_init+0x134>)
 800a1c8:	61fb      	str	r3, [r7, #28]
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d000      	beq.n	800a1d8 <dcd_init+0x7c>
 800a1d6:	be00      	bkpt	0x0000
 800a1d8:	2300      	movs	r3, #0
 800a1da:	e050      	b.n	800a27e <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800a1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1de:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800a1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00d      	beq.n	800a20c <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1f4:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a1f6:	7b3b      	ldrb	r3, [r7, #12]
 800a1f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b80      	cmp	r3, #128	@ 0x80
 800a200:	d108      	bne.n	800a214 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800a202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a20a:	e003      	b.n	800a214 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20e:	f043 0303 	orr.w	r3, r3, #3
 800a212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800a214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a216:	f043 0304 	orr.w	r3, r3, #4
 800a21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a220:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f92a 	bl	800a480 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a234:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800a244:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	699a      	ldr	r2, [r3, #24]
 800a250:	4b10      	ldr	r3, [pc, #64]	@ (800a294 <dcd_init+0x138>)
 800a252:	4313      	orrs	r3, r2
 800a254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a256:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a264:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	f043 0301 	orr.w	r3, r3, #1
 800a26c:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800a26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f8e0 	bl	800a43c <dcd_connect>
  return true;
 800a27c:	2301      	movs	r3, #1
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3730      	adds	r7, #48	@ 0x30
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	0800df34 	.word	0x0800df34
 800a28c:	20001138 	.word	0x20001138
 800a290:	e000edf0 	.word	0xe000edf0
 800a294:	80003804 	.word	0x80003804

0800a298 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	71fb      	strb	r3, [r7, #7]
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73bb      	strb	r3, [r7, #14]
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a2e4 <dcd_int_enable+0x4c>)
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800a2bc:	7b7b      	ldrb	r3, [r7, #13]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800a2c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff fb3e 	bl	8009948 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800a2cc:	e004      	b.n	800a2d8 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800a2ce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff fb56 	bl	8009984 <__NVIC_DisableIRQ>
}
 800a2d8:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800df34 	.word	0x0800df34

0800a2e8 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	71fb      	strb	r3, [r7, #7]
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	73fb      	strb	r3, [r7, #15]
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	73bb      	strb	r3, [r7, #14]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	4a0c      	ldr	r2, [pc, #48]	@ (800a334 <dcd_int_disable+0x4c>)
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	4413      	add	r3, r2
 800a306:	3304      	adds	r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800a30c:	7b7b      	ldrb	r3, [r7, #13]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800a312:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fb16 	bl	8009948 <__NVIC_EnableIRQ>
}
 800a31c:	e004      	b.n	800a328 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800a31e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a322:	4618      	mov	r0, r3
 800a324:	f7ff fb2e 	bl	8009984 <__NVIC_DisableIRQ>
}
 800a328:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800a32a:	bf00      	nop
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	0800df34 	.word	0x0800df34

0800a338 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	460a      	mov	r2, r1
 800a342:	71fb      	strb	r3, [r7, #7]
 800a344:	4613      	mov	r3, r2
 800a346:	71bb      	strb	r3, [r7, #6]
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a34c:	7a7b      	ldrb	r3, [r7, #9]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <dcd_set_address+0x1e>
    rhport = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a356:	7a7b      	ldrb	r3, [r7, #9]
 800a358:	4a14      	ldr	r2, [pc, #80]	@ (800a3ac <dcd_set_address+0x74>)
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	4413      	add	r3, r2
 800a35e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a360:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a368:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800a36c:	79bb      	ldrb	r3, [r7, #6]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	431a      	orrs	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800a378:	2300      	movs	r3, #0
 800a37a:	72fb      	strb	r3, [r7, #11]
 800a37c:	2301      	movs	r3, #1
 800a37e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800a380:	7abb      	ldrb	r3, [r7, #10]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <dcd_set_address+0x54>
 800a386:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800a38a:	e000      	b.n	800a38e <dcd_set_address+0x56>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a392:	4313      	orrs	r3, r2
 800a394:	b25b      	sxtb	r3, r3
 800a396:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800a398:	79f8      	ldrb	r0, [r7, #7]
 800a39a:	2300      	movs	r3, #0
 800a39c:	2200      	movs	r2, #0
 800a39e:	f000 f98b 	bl	800a6b8 <dcd_edpt_xfer>
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	0800df34 	.word	0x0800df34

0800a3b0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	71fb      	strb	r3, [r7, #7]
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	4a19      	ldr	r2, [pc, #100]	@ (800a430 <dcd_remote_wakeup+0x80>)
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	4413      	add	r3, r2
 800a3d0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a3d2:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a3da:	f043 0201 	orr.w	r2, r3, #1
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2208      	movs	r2, #8
 800a3e8:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	f043 0208 	orr.w	r2, r3, #8
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a434 <dcd_remote_wakeup+0x84>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a0f      	ldr	r2, [pc, #60]	@ (800a438 <dcd_remote_wakeup+0x88>)
 800a3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a400:	099b      	lsrs	r3, r3, #6
 800a402:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800a404:	e000      	b.n	800a408 <dcd_remote_wakeup+0x58>
 800a406:	bf00      	nop
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	613a      	str	r2, [r7, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f9      	bne.n	800a406 <dcd_remote_wakeup+0x56>
}
 800a412:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a41a:	f023 0201 	bic.w	r2, r3, #1
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a424:	bf00      	nop
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	0800df34 	.word	0x0800df34
 800a434:	20000048 	.word	0x20000048
 800a438:	10624dd3 	.word	0x10624dd3

0800a43c <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <dcd_connect+0x18>
    rhport = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	4a09      	ldr	r2, [pc, #36]	@ (800a47c <dcd_connect+0x40>)
 800a458:	011b      	lsls	r3, r3, #4
 800a45a:	4413      	add	r3, r2
 800a45c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a45e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a466:	f023 0202 	bic.w	r2, r3, #2
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	0800df34 	.word	0x0800df34

0800a480 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a48e:	7afb      	ldrb	r3, [r7, #11]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <dcd_disconnect+0x18>
    rhport = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <dcd_disconnect+0x40>)
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	4413      	add	r3, r2
 800a4a0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a4a2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a4aa:	f043 0202 	orr.w	r2, r3, #2
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	0800df34 	.word	0x0800df34

0800a4c4 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	71fb      	strb	r3, [r7, #7]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	71bb      	strb	r3, [r7, #6]
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a4d8:	7afb      	ldrb	r3, [r7, #11]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <dcd_sof_enable+0x1e>
    rhport = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	4a10      	ldr	r2, [pc, #64]	@ (800a528 <dcd_sof_enable+0x64>)
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	4413      	add	r3, r2
 800a4ea:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a4ec:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800a4ee:	4a0f      	ldr	r2, [pc, #60]	@ (800a52c <dcd_sof_enable+0x68>)
 800a4f0:	79bb      	ldrb	r3, [r7, #6]
 800a4f2:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800a4f4:	79bb      	ldrb	r3, [r7, #6]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f043 0208 	orr.w	r2, r3, #8
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800a50c:	e005      	b.n	800a51a <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f023 0208 	bic.w	r2, r3, #8
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	619a      	str	r2, [r3, #24]
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	0800df34 	.word	0x0800df34
 800a52c:	20001138 	.word	0x20001138

0800a530 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	6039      	str	r1, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	7899      	ldrb	r1, [r3, #2]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	889b      	ldrh	r3, [r3, #4]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a54e:	b29a      	uxth	r2, r3
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fa76 	bl	8009a44 <dfifo_alloc>
 800a558:	4603      	mov	r3, r0
 800a55a:	f083 0301 	eor.w	r3, r3, #1
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <dcd_edpt_open+0x4a>
 800a564:	4b0a      	ldr	r3, [pc, #40]	@ (800a590 <dcd_edpt_open+0x60>)
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d000      	beq.n	800a576 <dcd_edpt_open+0x46>
 800a574:	be00      	bkpt	0x0000
 800a576:	2300      	movs	r3, #0
 800a578:	e005      	b.n	800a586 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fb9c 	bl	8009cbc <edpt_activate>
  return true;
 800a584:	2301      	movs	r3, #1
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	e000edf0 	.word	0xe000edf0

0800a594 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	@ 0x28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	71fb      	strb	r3, [r7, #7]
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <dcd_edpt_close_all+0x18>
    rhport = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a6ac <dcd_edpt_close_all+0x118>)
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	4413      	add	r3, r2
 800a5b4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a5b6:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	4a3c      	ldr	r2, [pc, #240]	@ (800a6ac <dcd_edpt_close_all+0x118>)
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	4413      	add	r3, r2
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f7fe fd4a 	bl	8009060 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800a5cc:	4b38      	ldr	r3, [pc, #224]	@ (800a6b0 <dcd_edpt_close_all+0x11c>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800a5d8:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a5e2:	e034      	b.n	800a64e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a5ea:	e027      	b.n	800a63c <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800a5ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5f4:	0112      	lsls	r2, r2, #4
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3348      	adds	r3, #72	@ 0x48
 800a5fa:	015b      	lsls	r3, r3, #5
 800a5fc:	6a3a      	ldr	r2, [r7, #32]
 800a5fe:	4413      	add	r3, r2
 800a600:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	da05      	bge.n	800a616 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800a616:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a61a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a61e:	f1c3 0301 	rsb	r3, r3, #1
 800a622:	4924      	ldr	r1, [pc, #144]	@ (800a6b4 <dcd_edpt_close_all+0x120>)
 800a624:	0052      	lsls	r2, r2, #1
 800a626:	4413      	add	r3, r2
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	440b      	add	r3, r1
 800a62c:	330a      	adds	r3, #10
 800a62e:	2200      	movs	r2, #0
 800a630:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800a632:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a636:	3301      	adds	r3, #1
 800a638:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a63c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a640:	2b01      	cmp	r3, #1
 800a642:	d9d3      	bls.n	800a5ec <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800a644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a648:	3301      	adds	r3, #1
 800a64a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a64e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a652:	7ffb      	ldrb	r3, [r7, #31]
 800a654:	429a      	cmp	r2, r3
 800a656:	d3c5      	bcc.n	800a5e4 <dcd_edpt_close_all+0x50>
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	2310      	movs	r3, #16
 800a65e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	019b      	lsls	r3, r3, #6
 800a664:	f043 0220 	orr.w	r2, r3, #32
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a66c:	bf00      	nop
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f9      	bne.n	800a66e <dcd_edpt_close_all+0xda>
}
 800a67a:	bf00      	nop
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2210      	movs	r2, #16
 800a684:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a686:	bf00      	nop
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f003 0310 	and.w	r3, r3, #16
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1f9      	bne.n	800a688 <dcd_edpt_close_all+0xf4>
}
 800a694:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fab5 	bl	8009c08 <dfifo_device_init>

  usbd_spin_unlock(false);
 800a69e:	2000      	movs	r0, #0
 800a6a0:	f7fe fcf8 	bl	8009094 <usbd_spin_unlock>
}
 800a6a4:	bf00      	nop
 800a6a6:	3728      	adds	r7, #40	@ 0x28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	0800df34 	.word	0x0800df34
 800a6b0:	20001138 	.word	0x20001138
 800a6b4:	200010b8 	.word	0x200010b8

0800a6b8 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	603a      	str	r2, [r7, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	71fb      	strb	r3, [r7, #7]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	71bb      	strb	r3, [r7, #6]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80bb      	strh	r3, [r7, #4]
 800a6ce:	79bb      	ldrb	r3, [r7, #6]
 800a6d0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a6da:	75bb      	strb	r3, [r7, #22]
 800a6dc:	79bb      	ldrb	r3, [r7, #6]
 800a6de:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	09db      	lsrs	r3, r3, #7
 800a6e4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a6e6:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800a6e8:	7dba      	ldrb	r2, [r7, #22]
 800a6ea:	7d7b      	ldrb	r3, [r7, #21]
 800a6ec:	0052      	lsls	r2, r2, #1
 800a6ee:	4413      	add	r3, r2
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	4a17      	ldr	r2, [pc, #92]	@ (800a750 <dcd_edpt_xfer+0x98>)
 800a6f4:	4413      	add	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f7fe fcb1 	bl	8009060 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	895b      	ldrh	r3, [r3, #10]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
 800a70a:	e018      	b.n	800a73e <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2200      	movs	r2, #0
 800a716:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	88ba      	ldrh	r2, [r7, #4]
 800a71c:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800a71e:	7dbb      	ldrb	r3, [r7, #22]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800a724:	7d7b      	ldrb	r3, [r7, #21]
 800a726:	490b      	ldr	r1, [pc, #44]	@ (800a754 <dcd_edpt_xfer+0x9c>)
 800a728:	88ba      	ldrh	r2, [r7, #4]
 800a72a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800a72e:	7d7a      	ldrb	r2, [r7, #21]
 800a730:	7db9      	ldrb	r1, [r7, #22]
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fc2b 	bl	8009f90 <edpt_schedule_packets>
    ret = true;
 800a73a:	2301      	movs	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800a73e:	2000      	movs	r0, #0
 800a740:	f7fe fca8 	bl	8009094 <usbd_spin_unlock>

  return ret;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	200010b8 	.word	0x200010b8
 800a754:	20001138 	.word	0x20001138

0800a758 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	460a      	mov	r2, r1
 800a762:	71fb      	strb	r3, [r7, #7]
 800a764:	4613      	mov	r3, r2
 800a766:	71bb      	strb	r3, [r7, #6]
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a76c:	7cbb      	ldrb	r3, [r7, #18]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <dcd_edpt_stall+0x1e>
    rhport = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a776:	7cbb      	ldrb	r3, [r7, #18]
 800a778:	4a11      	ldr	r2, [pc, #68]	@ (800a7c0 <dcd_edpt_stall+0x68>)
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	4413      	add	r3, r2
 800a77e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a780:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800a782:	79b9      	ldrb	r1, [r7, #6]
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2201      	movs	r2, #1
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fb35 	bl	8009df8 <edpt_disable>
 800a78e:	79bb      	ldrb	r3, [r7, #6]
 800a790:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a792:	7cfb      	ldrb	r3, [r7, #19]
 800a794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a798:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10b      	bne.n	800a7b6 <dcd_edpt_stall+0x5e>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7a6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a7a8:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff f90b 	bl	80099cc <dma_setup_prepare>
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	0800df34 	.word	0x0800df34

0800a7c4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	460a      	mov	r2, r1
 800a7ce:	71fb      	strb	r3, [r7, #7]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	71bb      	strb	r3, [r7, #6]
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a7d8:	7a7b      	ldrb	r3, [r7, #9]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a7e2:	7a7b      	ldrb	r3, [r7, #9]
 800a7e4:	4a19      	ldr	r2, [pc, #100]	@ (800a84c <dcd_edpt_clear_stall+0x88>)
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	4413      	add	r3, r2
 800a7ea:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	79bb      	ldrb	r3, [r7, #6]
 800a7f0:	72bb      	strb	r3, [r7, #10]
 800a7f2:	7abb      	ldrb	r3, [r7, #10]
 800a7f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7f8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a7fa:	74fb      	strb	r3, [r7, #19]
 800a7fc:	79bb      	ldrb	r3, [r7, #6]
 800a7fe:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	09db      	lsrs	r3, r3, #7
 800a804:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a806:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a808:	7cbb      	ldrb	r3, [r7, #18]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	bf14      	ite	ne
 800a80e:	2301      	movne	r3, #1
 800a810:	2300      	moveq	r3, #0
 800a812:	b2db      	uxtb	r3, r3
 800a814:	461a      	mov	r2, r3
 800a816:	7cfb      	ldrb	r3, [r7, #19]
 800a818:	0112      	lsls	r2, r2, #4
 800a81a:	4413      	add	r3, r2
 800a81c:	3348      	adds	r3, #72	@ 0x48
 800a81e:	015b      	lsls	r3, r3, #5
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4413      	add	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	601a      	str	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	371c      	adds	r7, #28
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	0800df34 	.word	0x0800df34

0800a850 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b08e      	sub	sp, #56	@ 0x38
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <handle_bus_reset+0x1e>
    rhport = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a86e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a872:	4a6a      	ldr	r2, [pc, #424]	@ (800aa1c <handle_bus_reset+0x1cc>)
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	4413      	add	r3, r2
 800a878:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800a87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a884:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800a886:	7a7b      	ldrb	r3, [r7, #9]
 800a888:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	3301      	adds	r3, #1
 800a890:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800a892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800a896:	2280      	movs	r2, #128	@ 0x80
 800a898:	2100      	movs	r1, #0
 800a89a:	4861      	ldr	r0, [pc, #388]	@ (800aa20 <handle_bus_reset+0x1d0>)
 800a89c:	f001 fb13 	bl	800bec6 <memset>

  _dcd_data.sof_en = false;
 800a8a0:	4b60      	ldr	r3, [pc, #384]	@ (800aa24 <handle_bus_reset+0x1d4>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800a8a6:	4b5f      	ldr	r3, [pc, #380]	@ (800aa24 <handle_bus_reset+0x1d4>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a8b2:	e014      	b.n	800a8de <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800a8b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ba:	3358      	adds	r3, #88	@ 0x58
 800a8bc:	015b      	lsls	r3, r3, #5
 800a8be:	4413      	add	r3, r2
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8c6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800a8ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8cc:	3358      	adds	r3, #88	@ 0x58
 800a8ce:	015b      	lsls	r3, r3, #5
 800a8d0:	440b      	add	r3, r1
 800a8d2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800a8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8d8:	3301      	adds	r3, #1
 800a8da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a8de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d3e4      	bcc.n	800a8b4 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a8f0:	e01d      	b.n	800a92e <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800a8f2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f8:	3348      	adds	r3, #72	@ 0x48
 800a8fa:	015b      	lsls	r3, r3, #5
 800a8fc:	4413      	add	r3, r2
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	da0f      	bge.n	800a924 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800a904:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90a:	3348      	adds	r3, #72	@ 0x48
 800a90c:	015b      	lsls	r3, r3, #5
 800a90e:	4413      	add	r3, r2
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a916:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800a91a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a91c:	3348      	adds	r3, #72	@ 0x48
 800a91e:	015b      	lsls	r3, r3, #5
 800a920:	440b      	add	r3, r1
 800a922:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800a924:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a928:	3301      	adds	r3, #1
 800a92a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a92e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a936:	429a      	cmp	r2, r3
 800a938:	d3db      	bcc.n	800a8f2 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800a940:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800a944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a946:	2209      	movs	r2, #9
 800a948:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	2209      	movs	r2, #9
 800a950:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a956:	61bb      	str	r3, [r7, #24]
 800a958:	2310      	movs	r3, #16
 800a95a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	019b      	lsls	r3, r3, #6
 800a960:	f043 0220 	orr.w	r2, r3, #32
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a968:	bf00      	nop
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f9      	bne.n	800a96a <handle_bus_reset+0x11a>
}
 800a976:	bf00      	nop
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	2210      	movs	r2, #16
 800a980:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a982:	bf00      	nop
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0310 	and.w	r3, r3, #16
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1f9      	bne.n	800a984 <handle_bus_reset+0x134>
}
 800a990:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	4618      	mov	r0, r3
 800a996:	f7ff f937 	bl	8009c08 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a9a0:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800a9a2:	8a3b      	ldrh	r3, [r7, #16]
 800a9a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a9a8:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ae:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800a9b8:	f023 0203 	bic.w	r2, r3, #3
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9be:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a9c8:	f023 0203 	bic.w	r2, r3, #3
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ce:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800a9d2:	4b13      	ldr	r3, [pc, #76]	@ (800aa20 <handle_bus_reset+0x1d0>)
 800a9d4:	2240      	movs	r2, #64	@ 0x40
 800a9d6:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800a9d8:	4b11      	ldr	r3, [pc, #68]	@ (800aa20 <handle_bus_reset+0x1d0>)
 800a9da:	2240      	movs	r2, #64	@ 0x40
 800a9dc:	835a      	strh	r2, [r3, #26]
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9e6:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a9e8:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe ffeb 	bl	80099cc <dma_setup_prepare>
 800a9f6:	e007      	b.n	800aa08 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800a9fe:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	619a      	str	r2, [r3, #24]
}
 800aa14:	bf00      	nop
 800aa16:	3738      	adds	r7, #56	@ 0x38
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	0800df34 	.word	0x0800df34
 800aa20:	200010b8 	.word	0x200010b8
 800aa24:	20001138 	.word	0x20001138

0800aa28 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	71fb      	strb	r3, [r7, #7]
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa36:	7ffb      	ldrb	r3, [r7, #31]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <handle_enum_done+0x18>
    rhport = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa40:	7ffb      	ldrb	r3, [r7, #31]
 800aa42:	4a1b      	ldr	r2, [pc, #108]	@ (800aab0 <handle_enum_done+0x88>)
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	4413      	add	r3, r2
 800aa48:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800aa4a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800aa52:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800aa54:	7e3b      	ldrb	r3, [r7, #24]
 800aa56:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <handle_enum_done+0x3e>
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d004      	beq.n	800aa6e <handle_enum_done+0x46>
 800aa64:	e007      	b.n	800aa76 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800aa66:	2302      	movs	r3, #2
 800aa68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800aa6c:	e007      	b.n	800aa7e <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800aa74:	e003      	b.n	800aa7e <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800aa7c:	bf00      	nop
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	77bb      	strb	r3, [r7, #30]
 800aa82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa86:	777b      	strb	r3, [r7, #29]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800aa8c:	7fbb      	ldrb	r3, [r7, #30]
 800aa8e:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800aa90:	2301      	movs	r3, #1
 800aa92:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800aa94:	7f7b      	ldrb	r3, [r7, #29]
 800aa96:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800aa98:	7f3a      	ldrb	r2, [r7, #28]
 800aa9a:	f107 030c 	add.w	r3, r7, #12
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe f8df 	bl	8008c64 <dcd_event_handler>
}
 800aaa6:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800aaa8:	bf00      	nop
 800aaaa:	3728      	adds	r7, #40	@ 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	0800df34 	.word	0x0800df34

0800aab4 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08c      	sub	sp, #48	@ 0x30
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aac2:	7cfb      	ldrb	r3, [r7, #19]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <handle_rxflvl_irq+0x18>
    rhport = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aacc:	7cfb      	ldrb	r3, [r7, #19]
 800aace:	4a49      	ldr	r2, [pc, #292]	@ (800abf4 <handle_rxflvl_irq+0x140>)
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	4413      	add	r3, r2
 800aad4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aade:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800aae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800aae6:	7b3b      	ldrb	r3, [r7, #12]
 800aae8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800aaf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaf6:	3358      	adds	r3, #88	@ 0x58
 800aaf8:	015b      	lsls	r3, r3, #5
 800aafa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aafc:	4413      	add	r3, r2
 800aafe:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	d86a      	bhi.n	800abe4 <handle_rxflvl_irq+0x130>
 800ab0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab14 <handle_rxflvl_irq+0x60>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800abe5 	.word	0x0800abe5
 800ab18:	0800ab53 	.word	0x0800ab53
 800ab1c:	0800abe5 	.word	0x0800abe5
 800ab20:	0800ab45 	.word	0x0800ab45
 800ab24:	0800abe5 	.word	0x0800abe5
 800ab28:	0800ab2d 	.word	0x0800ab2d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800ab2c:	4b32      	ldr	r3, [pc, #200]	@ (800abf8 <handle_rxflvl_irq+0x144>)
 800ab2e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800ab30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab3e:	6812      	ldr	r2, [r2, #0]
 800ab40:	601a      	str	r2, [r3, #0]
      break;
 800ab42:	e052      	b.n	800abea <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	611a      	str	r2, [r3, #16]
      break;
 800ab50:	e04b      	b.n	800abea <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800ab52:	89bb      	ldrh	r3, [r7, #12]
 800ab54:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800ab5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab60:	015b      	lsls	r3, r3, #5
 800ab62:	4a26      	ldr	r2, [pc, #152]	@ (800abfc <handle_rxflvl_irq+0x148>)
 800ab64:	4413      	add	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800ab68:	8b7b      	ldrh	r3, [r7, #26]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d03c      	beq.n	800abe8 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d007      	beq.n	800ab86 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	8b7a      	ldrh	r2, [r7, #26]
 800ab7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fc ff7e 	bl	8007a80 <tu_fifo_write_n_const_addr_full_words>
 800ab84:	e00c      	b.n	800aba0 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	8b7a      	ldrh	r2, [r7, #26]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab90:	f000 fd70 	bl	800b674 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	8b7b      	ldrh	r3, [r7, #26]
 800ab9a:	441a      	add	r2, r3
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	895b      	ldrh	r3, [r3, #10]
 800aba4:	8b7a      	ldrh	r2, [r7, #26]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d21e      	bcs.n	800abe8 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	891a      	ldrh	r2, [r3, #8]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abba:	b29b      	uxth	r3, r3
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800abc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10d      	bne.n	800abe8 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	891a      	ldrh	r2, [r3, #8]
 800abd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac00 <handle_rxflvl_irq+0x14c>)
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800abdc:	4b08      	ldr	r3, [pc, #32]	@ (800ac00 <handle_rxflvl_irq+0x14c>)
 800abde:	2200      	movs	r2, #0
 800abe0:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800abe2:	e001      	b.n	800abe8 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800abe4:	bf00      	nop
 800abe6:	e000      	b.n	800abea <handle_rxflvl_irq+0x136>
      break;
 800abe8:	bf00      	nop
  }
}
 800abea:	bf00      	nop
 800abec:	3730      	adds	r7, #48	@ 0x30
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	0800df34 	.word	0x0800df34
 800abf8:	20001140 	.word	0x20001140
 800abfc:	200010b8 	.word	0x200010b8
 800ac00:	20001138 	.word	0x20001138

0800ac04 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08e      	sub	sp, #56	@ 0x38
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	603a      	str	r2, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
 800ac10:	460b      	mov	r3, r1
 800ac12:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800ac14:	783b      	ldrb	r3, [r7, #0]
 800ac16:	f003 0308 	and.w	r3, r3, #8
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01c      	beq.n	800ac5a <handle_epout_slave+0x56>
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ac26:	4b34      	ldr	r3, [pc, #208]	@ (800acf8 <handle_epout_slave+0xf4>)
 800ac28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800ac30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac34:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800ac36:	2306      	movs	r3, #6
 800ac38:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800ac3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac3c:	f107 0318 	add.w	r3, r7, #24
 800ac40:	6810      	ldr	r0, [r2, #0]
 800ac42:	6851      	ldr	r1, [r2, #4]
 800ac44:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800ac46:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800ac4a:	f107 0314 	add.w	r3, r7, #20
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe f807 	bl	8008c64 <dcd_event_handler>
}
 800ac56:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800ac58:	e04a      	b.n	800acf0 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800ac5a:	783b      	ldrb	r3, [r7, #0]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d044      	beq.n	800acf0 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800ac66:	783b      	ldrb	r3, [r7, #0]
 800ac68:	f003 0320 	and.w	r3, r3, #32
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d13e      	bne.n	800acf0 <handle_epout_slave+0xec>
 800ac72:	787b      	ldrb	r3, [r7, #1]
 800ac74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d138      	bne.n	800acf0 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800ac7e:	79bb      	ldrb	r3, [r7, #6]
 800ac80:	015b      	lsls	r3, r3, #5
 800ac82:	4a1e      	ldr	r2, [pc, #120]	@ (800acfc <handle_epout_slave+0xf8>)
 800ac84:	4413      	add	r3, r2
 800ac86:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800ac88:	79bb      	ldrb	r3, [r7, #6]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <handle_epout_slave+0xa0>
 800ac8e:	4b1c      	ldr	r3, [pc, #112]	@ (800ad00 <handle_epout_slave+0xfc>)
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d006      	beq.n	800aca4 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800ac96:	79b9      	ldrb	r1, [r7, #6]
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff f977 	bl	8009f90 <edpt_schedule_packets>
 800aca2:	e025      	b.n	800acf0 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800aca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca6:	891b      	ldrh	r3, [r3, #8]
 800aca8:	461a      	mov	r2, r3
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acb0:	79bb      	ldrb	r3, [r7, #6]
 800acb2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800acb6:	627a      	str	r2, [r7, #36]	@ 0x24
 800acb8:	2300      	movs	r3, #0
 800acba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800acc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800acc8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800acca:	2307      	movs	r3, #7
 800accc:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800acce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800acd2:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800acd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800acdc:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800acde:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800ace2:	f107 0308 	add.w	r3, r7, #8
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fd ffbb 	bl	8008c64 <dcd_event_handler>
}
 800acee:	bf00      	nop
      }
    }
  }
}
 800acf0:	3738      	adds	r7, #56	@ 0x38
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20001140 	.word	0x20001140
 800acfc:	200010b8 	.word	0x200010b8
 800ad00:	20001138 	.word	0x20001138

0800ad04 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b092      	sub	sp, #72	@ 0x48
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	603a      	str	r2, [r7, #0]
 800ad0e:	71fb      	strb	r3, [r7, #7]
 800ad10:	460b      	mov	r3, r1
 800ad12:	71bb      	strb	r3, [r7, #6]
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ad1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <handle_epin_slave+0x24>
    rhport = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ad28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad2c:	4a64      	ldr	r2, [pc, #400]	@ (800aec0 <handle_epin_slave+0x1bc>)
 800ad2e:	011b      	lsls	r3, r3, #4
 800ad30:	4413      	add	r3, r2
 800ad32:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ad34:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800ad36:	79bb      	ldrb	r3, [r7, #6]
 800ad38:	3348      	adds	r3, #72	@ 0x48
 800ad3a:	015b      	lsls	r3, r3, #5
 800ad3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad3e:	4413      	add	r3, r2
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800ad42:	79bb      	ldrb	r3, [r7, #6]
 800ad44:	015b      	lsls	r3, r3, #5
 800ad46:	3310      	adds	r3, #16
 800ad48:	4a5e      	ldr	r2, [pc, #376]	@ (800aec4 <handle_epin_slave+0x1c0>)
 800ad4a:	4413      	add	r3, r2
 800ad4c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800ad4e:	783b      	ldrb	r3, [r7, #0]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d037      	beq.n	800adca <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800ad5a:	79bb      	ldrb	r3, [r7, #6]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <handle_epin_slave+0x72>
 800ad60:	4b59      	ldr	r3, [pc, #356]	@ (800aec8 <handle_epin_slave+0x1c4>)
 800ad62:	885b      	ldrh	r3, [r3, #2]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800ad68:	79b9      	ldrb	r1, [r7, #6]
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff f90e 	bl	8009f90 <edpt_schedule_packets>
 800ad74:	e029      	b.n	800adca <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800ad76:	79bb      	ldrb	r3, [r7, #6]
 800ad78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad7c:	b2d9      	uxtb	r1, r3
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	891b      	ldrh	r3, [r3, #8]
 800ad82:	461a      	mov	r2, r3
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800ad90:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad92:	2300      	movs	r3, #0
 800ad94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800ad9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ada2:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800ada4:	2307      	movs	r3, #7
 800ada6:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800ada8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800adac:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800adb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adb6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800adb8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800adbc:	f107 0310 	add.w	r3, r7, #16
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fd ff4e 	bl	8008c64 <dcd_event_handler>
}
 800adc8:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800adca:	783b      	ldrb	r3, [r7, #0]
 800adcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d070      	beq.n	800aeb8 <handle_epin_slave+0x1b4>
 800add6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800addc:	79ba      	ldrb	r2, [r7, #6]
 800adde:	2101      	movs	r1, #1
 800ade0:	fa01 f202 	lsl.w	r2, r1, r2
 800ade4:	4013      	ands	r3, r2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d066      	beq.n	800aeb8 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800adea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800adf0:	89fb      	ldrh	r3, [r7, #14]
 800adf2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800adfa:	2300      	movs	r3, #0
 800adfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ae00:	e03f      	b.n	800ae82 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800ae02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae0e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	895a      	ldrh	r2, [r3, #10]
 800ae14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ae16:	843b      	strh	r3, [r7, #32]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ae1c:	8c3a      	ldrh	r2, [r7, #32]
 800ae1e:	8bfb      	ldrh	r3, [r7, #30]
 800ae20:	4293      	cmp	r3, r2
 800ae22:	bf28      	it	cs
 800ae24:	4613      	movcs	r3, r2
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800ae2a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ae2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	0099      	lsls	r1, r3, #2
 800ae32:	4b26      	ldr	r3, [pc, #152]	@ (800aecc <handle_epin_slave+0x1c8>)
 800ae34:	400b      	ands	r3, r1
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d829      	bhi.n	800ae8e <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00d      	beq.n	800ae5e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800ae42:	79bb      	ldrb	r3, [r7, #6]
 800ae44:	3301      	adds	r3, #1
 800ae46:	031b      	lsls	r3, r3, #12
 800ae48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae4a:	4413      	add	r3, r2
 800ae4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ae54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fc fdab 	bl	80079b2 <tu_fifo_read_n_const_addr_full_words>
 800ae5c:	e00c      	b.n	800ae78 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ae64:	79b9      	ldrb	r1, [r7, #6]
 800ae66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ae68:	f000 fc55 	bl	800b716 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ae72:	441a      	add	r2, r3
 800ae74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae76:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800ae78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ae82:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ae86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d3ba      	bcc.n	800ae02 <handle_epin_slave+0xfe>
 800ae8c:	e000      	b.n	800ae90 <handle_epin_slave+0x18c>
        break;
 800ae8e:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800ae90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800aea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800aea6:	79ba      	ldrb	r2, [r7, #6]
 800aea8:	2101      	movs	r1, #1
 800aeaa:	fa01 f202 	lsl.w	r2, r1, r2
 800aeae:	43d2      	mvns	r2, r2
 800aeb0:	401a      	ands	r2, r3
 800aeb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800aeb8:	bf00      	nop
 800aeba:	3748      	adds	r7, #72	@ 0x48
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	0800df34 	.word	0x0800df34
 800aec4:	200010b8 	.word	0x200010b8
 800aec8:	20001138 	.word	0x20001138
 800aecc:	0003fffc 	.word	0x0003fffc

0800aed0 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08e      	sub	sp, #56	@ 0x38
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	460a      	mov	r2, r1
 800aeda:	71fb      	strb	r3, [r7, #7]
 800aedc:	4613      	mov	r3, r2
 800aede:	71bb      	strb	r3, [r7, #6]
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aee4:	7efb      	ldrb	r3, [r7, #27]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <handle_ep_irq+0x1e>
    rhport = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aeee:	7efb      	ldrb	r3, [r7, #27]
 800aef0:	4a38      	ldr	r2, [pc, #224]	@ (800afd4 <handle_ep_irq+0x104>)
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	4413      	add	r3, r2
 800aef6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aef8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af02:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800af04:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800af06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af12:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800af14:	7c7b      	ldrb	r3, [r7, #17]
 800af16:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	3301      	adds	r3, #1
 800af1e:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800af20:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800af24:	79bb      	ldrb	r3, [r7, #6]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <handle_ep_irq+0x5e>
 800af2a:	2300      	movs	r3, #0
 800af2c:	e000      	b.n	800af30 <handle_ep_irq+0x60>
 800af2e:	2310      	movs	r3, #16
 800af30:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800af34:	79bb      	ldrb	r3, [r7, #6]
 800af36:	2b01      	cmp	r3, #1
 800af38:	bf14      	ite	ne
 800af3a:	2301      	movne	r3, #1
 800af3c:	2300      	moveq	r3, #0
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	025b      	lsls	r3, r3, #9
 800af42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af48:	4413      	add	r3, r2
 800af4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800af52:	e034      	b.n	800afbe <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800af54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af56:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800af5a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800af5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af62:	440b      	add	r3, r1
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d021      	beq.n	800afb4 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800af70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af74:	015b      	lsls	r3, r3, #5
 800af76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af78:	4413      	add	r3, r2
 800af7a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800af88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d111      	bne.n	800afb4 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800af90:	79bb      	ldrb	r3, [r7, #6]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d107      	bne.n	800afa6 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800af96:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff feb0 	bl	800ad04 <handle_epin_slave>
 800afa4:	e006      	b.n	800afb4 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800afa6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff fe28 	bl	800ac04 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800afb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800afb8:	3301      	adds	r3, #1
 800afba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800afbe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800afc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d3c4      	bcc.n	800af54 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	3738      	adds	r7, #56	@ 0x38
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	0800df34 	.word	0x0800df34

0800afd8 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800afd8:	b580      	push	{r7, lr}
 800afda:	b098      	sub	sp, #96	@ 0x60
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	71fb      	strb	r3, [r7, #7]
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800afe8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <dcd_int_handler+0x1e>
    rhport = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aff6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800affa:	4a80      	ldr	r2, [pc, #512]	@ (800b1fc <dcd_int_handler+0x224>)
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	4413      	add	r3, r2
 800b000:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800b004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800b00a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b010:	4013      	ands	r3, r2
 800b012:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800b014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800b01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b020:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b024:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800b026:	2001      	movs	r0, #1
 800b028:	f7fe f81a 	bl	8009060 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800b02c:	79fb      	ldrb	r3, [r7, #7]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff fc0e 	bl	800a850 <handle_bus_reset>
    usbd_spin_unlock(true);
 800b034:	2001      	movs	r0, #1
 800b036:	f7fe f82d 	bl	8009094 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800b03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b03c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800b044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b04a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fcea 	bl	800aa28 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800b054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d01d      	beq.n	800b09a <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800b05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b064:	615a      	str	r2, [r3, #20]
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800b072:	2301      	movs	r3, #1
 800b074:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800b078:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b07c:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800b080:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b084:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800b088:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800b08c:	f107 0320 	add.w	r3, r7, #32
 800b090:	4611      	mov	r1, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f7fd fde6 	bl	8008c64 <dcd_event_handler>
}
 800b098:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800b09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	da1d      	bge.n	800b0dc <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800b0a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0a6:	615a      	str	r2, [r3, #20]
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b0ae:	2305      	movs	r3, #5
 800b0b0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800b0ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b0be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800b0c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b0c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800b0ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800b0ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fd fdc5 	bl	8008c64 <dcd_event_handler>
}
 800b0da:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800b0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d022      	beq.n	800b12c <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800b0e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800b0ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d017      	beq.n	800b126 <dcd_int_handler+0x14e>
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b102:	2301      	movs	r3, #1
 800b104:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800b108:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800b10c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800b10e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b112:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800b114:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800b118:	f107 0314 	add.w	r3, r7, #20
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fd fda0 	bl	8008c64 <dcd_event_handler>
}
 800b124:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800b126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b128:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b12a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800b12c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b12e:	f003 0308 	and.w	r3, r3, #8
 800b132:	2b00      	cmp	r3, #0
 800b134:	d02e      	beq.n	800b194 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800b136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b138:	2208      	movs	r2, #8
 800b13a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800b13c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b13e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b148:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800b14a:	4b2d      	ldr	r3, [pc, #180]	@ (800b200 <dcd_int_handler+0x228>)
 800b14c:	79db      	ldrb	r3, [r3, #7]
 800b14e:	f083 0301 	eor.w	r3, r3, #1
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	f023 0208 	bic.w	r2, r3, #8
 800b160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b162:	619a      	str	r2, [r3, #24]
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800b16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b16e:	2301      	movs	r3, #1
 800b170:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b174:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800b178:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800b17a:	2303      	movs	r3, #3
 800b17c:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800b17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b180:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800b182:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fd69 	bl	8008c64 <dcd_event_handler>
}
 800b192:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800b194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b196:	f003 0310 	and.w	r3, r3, #16
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d015      	beq.n	800b1ca <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800b19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	f023 0210 	bic.w	r2, r3, #16
 800b1a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1a8:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff fc81 	bl	800aab4 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800b1b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	f003 0310 	and.w	r3, r3, #16
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1f5      	bne.n	800b1aa <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800b1be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f043 0210 	orr.w	r2, r3, #16
 800b1c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1c8:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800b1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d004      	beq.n	800b1de <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fe79 	bl	800aed0 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800b1de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800b1e8:	79fb      	ldrb	r3, [r7, #7]
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fe6f 	bl	800aed0 <handle_ep_irq>
  }
}
 800b1f2:	bf00      	nop
 800b1f4:	3760      	adds	r7, #96	@ 0x60
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800df34 	.word	0x0800df34
 800b200:	20001138 	.word	0x20001138

0800b204 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800b222:	e005      	b.n	800b230 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b228:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d152      	bne.n	800b2f4 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800b24e:	4b2c      	ldr	r3, [pc, #176]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a2c      	ldr	r2, [pc, #176]	@ (800b304 <dwc2_phy_update+0xc8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d302      	bcc.n	800b25e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800b258:	2306      	movs	r3, #6
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e041      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800b25e:	4b28      	ldr	r3, [pc, #160]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a29      	ldr	r2, [pc, #164]	@ (800b308 <dwc2_phy_update+0xcc>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d902      	bls.n	800b26e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800b268:	2307      	movs	r3, #7
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e039      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800b26e:	4b24      	ldr	r3, [pc, #144]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a26      	ldr	r2, [pc, #152]	@ (800b30c <dwc2_phy_update+0xd0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d302      	bcc.n	800b27e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800b278:	2308      	movs	r3, #8
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	e031      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800b27e:	4b20      	ldr	r3, [pc, #128]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a23      	ldr	r2, [pc, #140]	@ (800b310 <dwc2_phy_update+0xd4>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d902      	bls.n	800b28e <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800b288:	2309      	movs	r3, #9
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	e029      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800b28e:	4b1c      	ldr	r3, [pc, #112]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a20      	ldr	r2, [pc, #128]	@ (800b314 <dwc2_phy_update+0xd8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d902      	bls.n	800b29e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800b298:	230a      	movs	r3, #10
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	e021      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800b29e:	4b18      	ldr	r3, [pc, #96]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a1d      	ldr	r2, [pc, #116]	@ (800b318 <dwc2_phy_update+0xdc>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d902      	bls.n	800b2ae <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800b2a8:	230b      	movs	r3, #11
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	e019      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800b2ae:	4b14      	ldr	r3, [pc, #80]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a1a      	ldr	r2, [pc, #104]	@ (800b31c <dwc2_phy_update+0xe0>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d302      	bcc.n	800b2be <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e011      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800b2be:	4b10      	ldr	r3, [pc, #64]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a17      	ldr	r2, [pc, #92]	@ (800b320 <dwc2_phy_update+0xe4>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d302      	bcc.n	800b2ce <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800b2c8:	230d      	movs	r3, #13
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e009      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <dwc2_phy_update+0xc4>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a14      	ldr	r2, [pc, #80]	@ (800b324 <dwc2_phy_update+0xe8>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d302      	bcc.n	800b2de <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800b2d8:	230e      	movs	r3, #14
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e001      	b.n	800b2e2 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800b2de:	230f      	movs	r3, #15
 800b2e0:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	029b      	lsls	r3, r3, #10
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	60da      	str	r2, [r3, #12]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	20000048 	.word	0x20000048
 800b304:	01e84800 	.word	0x01e84800
 800b308:	01a39ddf 	.word	0x01a39ddf
 800b30c:	016e3600 	.word	0x016e3600
 800b310:	014ca43f 	.word	0x014ca43f
 800b314:	01312cff 	.word	0x01312cff
 800b318:	011a499f 	.word	0x011a499f
 800b31c:	01067380 	.word	0x01067380
 800b320:	00f42400 	.word	0x00f42400
 800b324:	00e4e1c0 	.word	0x00e4e1c0

0800b328 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	f043 0201 	orr.w	r2, r3, #1
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b340:	b29b      	uxth	r3, r3
 800b342:	f244 2209 	movw	r2, #16905	@ 0x4209
 800b346:	4293      	cmp	r3, r2
 800b348:	d807      	bhi.n	800b35a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800b34a:	bf00      	nop
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1f9      	bne.n	800b34c <reset_core+0x24>
 800b358:	e010      	b.n	800b37c <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800b35a:	bf00      	nop
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0f9      	beq.n	800b35c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b370:	f023 0301 	bic.w	r3, r3, #1
 800b374:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800b37c:	bf00      	nop
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	dafb      	bge.n	800b37e <reset_core+0x56>
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3a8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff ff26 	bl	800b204 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff ffb5 	bl	800b328 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800b3c4:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800b3cc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff ff30 	bl	800b23c <dwc2_phy_update>
}
 800b3dc:	bf00      	nop
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3f6:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3fc:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b404:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800b406:	7c3b      	ldrb	r3, [r7, #16]
 800b408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b80      	cmp	r3, #128	@ 0x80
 800b410:	d114      	bne.n	800b43c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f043 0310 	orr.w	r3, r3, #16
 800b418:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f023 0308 	bic.w	r3, r3, #8
 800b420:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b428:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b430:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	e012      	b.n	800b462 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0310 	bic.w	r3, r3, #16
 800b442:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800b444:	7b7b      	ldrb	r3, [r7, #13]
 800b446:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d004      	beq.n	800b45a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f043 0308 	orr.w	r3, r3, #8
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e003      	b.n	800b462 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f023 0308 	bic.w	r3, r3, #8
 800b460:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800b468:	7c3b      	ldrb	r3, [r7, #16]
 800b46a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fec6 	bl	800b204 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff ff55 	bl	800b328 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800b484:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800b486:	7b7b      	ldrb	r3, [r7, #13]
 800b488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <phy_hs_init+0xb4>
 800b492:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800b496:	e001      	b.n	800b49c <phy_hs_init+0xb8>
 800b498:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800b4a8:	7c3b      	ldrb	r3, [r7, #16]
 800b4aa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff fec2 	bl	800b23c <dwc2_phy_update>
}
 800b4b8:	bf00      	nop
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	041b      	lsls	r3, r3, #16
 800b4d0:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4a0e      	ldr	r2, [pc, #56]	@ (800b510 <check_dwc2+0x50>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d012      	beq.n	800b500 <check_dwc2+0x40>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b514 <check_dwc2+0x54>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00e      	beq.n	800b500 <check_dwc2+0x40>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b518 <check_dwc2+0x58>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00a      	beq.n	800b500 <check_dwc2+0x40>
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b51c <check_dwc2+0x5c>)
 800b4ec:	60bb      	str	r3, [r7, #8]
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d000      	beq.n	800b4fc <check_dwc2+0x3c>
 800b4fa:	be00      	bkpt	0x0000
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e000      	b.n	800b502 <check_dwc2+0x42>
#endif

  return true;
 800b500:	2301      	movs	r3, #1
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	4f540000 	.word	0x4f540000
 800b514:	55310000 	.word	0x55310000
 800b518:	55320000 	.word	0x55320000
 800b51c:	e000edf0 	.word	0xe000edf0

0800b520 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d101      	bne.n	800b536 <dwc2_core_is_highspeed+0x16>
    return false;
 800b532:	2300      	movs	r3, #0
 800b534:	e00b      	b.n	800b54e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b53a:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800b53c:	7b3b      	ldrb	r3, [r7, #12]
 800b53e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	bf14      	ite	ne
 800b548:	2301      	movne	r3, #1
 800b54a:	2300      	moveq	r3, #0
 800b54c:	b2db      	uxtb	r3, r3
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
	...

0800b55c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
 800b566:	460b      	mov	r3, r1
 800b568:	71bb      	strb	r3, [r7, #6]
 800b56a:	4613      	mov	r3, r2
 800b56c:	717b      	strb	r3, [r7, #5]
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <dwc2_core_init+0x20>
    rhport = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	4a3b      	ldr	r2, [pc, #236]	@ (800b66c <dwc2_core_init+0x110>)
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	4413      	add	r3, r2
 800b584:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b586:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800b588:	69f8      	ldr	r0, [r7, #28]
 800b58a:	f7ff ff99 	bl	800b4c0 <check_dwc2>
 800b58e:	4603      	mov	r3, r0
 800b590:	f083 0301 	eor.w	r3, r3, #1
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <dwc2_core_init+0x54>
 800b59a:	4b35      	ldr	r3, [pc, #212]	@ (800b670 <dwc2_core_init+0x114>)
 800b59c:	61bb      	str	r3, [r7, #24]
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d000      	beq.n	800b5ac <dwc2_core_init+0x50>
 800b5aa:	be00      	bkpt	0x0000
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	e058      	b.n	800b662 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f023 0201 	bic.w	r2, r3, #1
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800b5bc:	79bb      	ldrb	r3, [r7, #6]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800b5c2:	69f8      	ldr	r0, [r7, #28]
 800b5c4:	f7ff ff0e 	bl	800b3e4 <phy_hs_init>
 800b5c8:	e002      	b.n	800b5d0 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800b5ca:	69f8      	ldr	r0, [r7, #28]
 800b5cc:	f7ff fee2 	bl	800b394 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f043 0207 	orr.w	r2, r3, #7
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800b5e2:	f023 020f 	bic.w	r2, r3, #15
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b5f4:	7afb      	ldrb	r3, [r7, #11]
 800b5f6:	019b      	lsls	r3, r3, #6
 800b5f8:	f043 0220 	orr.w	r2, r3, #32
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b600:	bf00      	nop
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1f9      	bne.n	800b602 <dwc2_core_init+0xa6>
}
 800b60e:	bf00      	nop
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2210      	movs	r2, #16
 800b618:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b61a:	bf00      	nop
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1f9      	bne.n	800b61c <dwc2_core_init+0xc0>
}
 800b628:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	f04f 32ff 	mov.w	r2, #4294967295
 800b638:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	2200      	movs	r2, #0
 800b63e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800b640:	797b      	ldrb	r3, [r7, #5]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d006      	beq.n	800b654 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	609a      	str	r2, [r3, #8]
 800b652:	e005      	b.n	800b660 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	f043 0210 	orr.w	r2, r3, #16
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800b660:	2301      	movs	r3, #1
}
 800b662:	4618      	mov	r0, r3
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	0800df44 	.word	0x0800df44
 800b670:	e000edf0 	.word	0xe000edf0

0800b674 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800b674:	b480      	push	{r7}
 800b676:	b08f      	sub	sp, #60	@ 0x3c
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b688:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800b68a:	88fb      	ldrh	r3, [r7, #6]
 800b68c:	089b      	lsrs	r3, r3, #2
 800b68e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800b690:	e00b      	b.n	800b6aa <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	627a      	str	r2, [r7, #36]	@ 0x24
 800b69a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	6a3a      	ldr	r2, [r7, #32]
 800b6a0:	601a      	str	r2, [r3, #0]
}
 800b6a2:	bf00      	nop
    dst += 4;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800b6aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1ee      	bne.n	800b692 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800b6b4:	88fb      	ldrh	r3, [r7, #6]
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	f003 0303 	and.w	r3, r3, #3
 800b6bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800b6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d020      	beq.n	800b70a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800b6da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d907      	bls.n	800b6f2 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6e8:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	0a12      	lsrs	r2, r2, #8
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800b6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d907      	bls.n	800b70a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	3302      	adds	r3, #2
 800b6fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b700:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	0c12      	lsrs	r2, r2, #16
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800b70a:	bf00      	nop
 800b70c:	373c      	adds	r7, #60	@ 0x3c
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800b716:	b480      	push	{r7}
 800b718:	b08b      	sub	sp, #44	@ 0x2c
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	461a      	mov	r2, r3
 800b722:	460b      	mov	r3, r1
 800b724:	72fb      	strb	r3, [r7, #11]
 800b726:	4613      	mov	r3, r2
 800b728:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	3301      	adds	r3, #1
 800b72e:	031b      	lsls	r3, r3, #12
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800b736:	893b      	ldrh	r3, [r7, #8]
 800b738:	089b      	lsrs	r3, r3, #2
 800b73a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800b73c:	e008      	b.n	800b750 <dfifo_write_packet+0x3a>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	601a      	str	r2, [r3, #0]
    src += 4;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3304      	adds	r3, #4
 800b74e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800b750:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b752:	1e5a      	subs	r2, r3, #1
 800b754:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f1      	bne.n	800b73e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800b75a:	893b      	ldrh	r3, [r7, #8]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800b764:	7efb      	ldrb	r3, [r7, #27]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d019      	beq.n	800b79e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800b770:	7efb      	ldrb	r3, [r7, #27]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d906      	bls.n	800b784 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3301      	adds	r3, #1
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	6a3a      	ldr	r2, [r7, #32]
 800b780:	4313      	orrs	r3, r2
 800b782:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800b784:	7efb      	ldrb	r3, [r7, #27]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d906      	bls.n	800b798 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3302      	adds	r3, #2
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	041b      	lsls	r3, r3, #16
 800b792:	6a3a      	ldr	r2, [r7, #32]
 800b794:	4313      	orrs	r3, r2
 800b796:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	6a3a      	ldr	r2, [r7, #32]
 800b79c:	601a      	str	r2, [r3, #0]
  }
}
 800b79e:	bf00      	nop
 800b7a0:	372c      	adds	r7, #44	@ 0x2c
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
	...

0800b7ac <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6039      	str	r1, [r7, #0]
 800b7b6:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11f      	bne.n	800b7fe <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800b7be:	2301      	movs	r3, #1
 800b7c0:	723b      	strb	r3, [r7, #8]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f7fc fa63 	bl	8007c98 <tud_rhport_init>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f083 0301 	eor.w	r3, r3, #1
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <tusb_rhport_init+0x48>
 800b7de:	4b23      	ldr	r3, [pc, #140]	@ (800b86c <tusb_rhport_init+0xc0>)
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d000      	beq.n	800b7f0 <tusb_rhport_init+0x44>
 800b7ee:	be00      	bkpt	0x0000
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e036      	b.n	800b862 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800b7f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b870 <tusb_rhport_init+0xc4>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e031      	b.n	800b862 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d803      	bhi.n	800b80c <tusb_rhport_init+0x60>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <tusb_rhport_init+0x76>
 800b80c:	4b17      	ldr	r3, [pc, #92]	@ (800b86c <tusb_rhport_init+0xc0>)
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0301 	and.w	r3, r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d000      	beq.n	800b81e <tusb_rhport_init+0x72>
 800b81c:	be00      	bkpt	0x0000
 800b81e:	2300      	movs	r3, #0
 800b820:	e01f      	b.n	800b862 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800b822:	79fb      	ldrb	r3, [r7, #7]
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	7811      	ldrb	r1, [r2, #0]
 800b828:	4a11      	ldr	r2, [pc, #68]	@ (800b870 <tusb_rhport_init+0xc4>)
 800b82a:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d115      	bne.n	800b860 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800b834:	79fb      	ldrb	r3, [r7, #7]
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fc fa2d 	bl	8007c98 <tud_rhport_init>
 800b83e:	4603      	mov	r3, r0
 800b840:	f083 0301 	eor.w	r3, r3, #1
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <tusb_rhport_init+0xb4>
 800b84a:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <tusb_rhport_init+0xc0>)
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d000      	beq.n	800b85c <tusb_rhport_init+0xb0>
 800b85a:	be00      	bkpt	0x0000
 800b85c:	2300      	movs	r3, #0
 800b85e:	e000      	b.n	800b862 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800b860:	2301      	movs	r3, #1
}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	e000edf0 	.word	0xe000edf0
 800b870:	20001148 	.word	0x20001148

0800b874 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <tu_edpt_claim+0x26>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <tu_edpt_claim+0x2a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e01e      	b.n	800b8dc <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d108      	bne.n	800b8be <tu_edpt_claim+0x4a>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <tu_edpt_claim+0x4a>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <tu_edpt_claim+0x4c>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73fb      	strb	r3, [r7, #15]
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	7813      	ldrb	r3, [r2, #0]
 800b8d4:	f043 0304 	orr.w	r3, r3, #4
 800b8d8:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800b8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d108      	bne.n	800b912 <tu_edpt_release+0x2a>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <tu_edpt_release+0x2a>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <tu_edpt_release+0x2c>
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	7813      	ldrb	r3, [r2, #0]
 800b928:	f023 0304 	bic.w	r3, r3, #4
 800b92c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800b93c:	b480      	push	{r7}
 800b93e:	b08b      	sub	sp, #44	@ 0x2c
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	460b      	mov	r3, r1
 800b946:	70fb      	strb	r3, [r7, #3]
 800b948:	4613      	mov	r3, r2
 800b94a:	70bb      	strb	r3, [r7, #2]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	889b      	ldrh	r3, [r3, #4]
 800b954:	b29b      	uxth	r3, r3
 800b956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b95a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800b95c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	78db      	ldrb	r3, [r3, #3]
 800b962:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d059      	beq.n	800ba20 <tu_edpt_validate+0xe4>
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	dc6e      	bgt.n	800ba4e <tu_edpt_validate+0x112>
 800b970:	2b01      	cmp	r3, #1
 800b972:	d002      	beq.n	800b97a <tu_edpt_validate+0x3e>
 800b974:	2b02      	cmp	r3, #2
 800b976:	d018      	beq.n	800b9aa <tu_edpt_validate+0x6e>
 800b978:	e069      	b.n	800ba4e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d102      	bne.n	800b986 <tu_edpt_validate+0x4a>
 800b980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b984:	e001      	b.n	800b98a <tu_edpt_validate+0x4e>
 800b986:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800b98a:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800b98c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b98e:	8a7b      	ldrh	r3, [r7, #18]
 800b990:	429a      	cmp	r2, r3
 800b992:	d95e      	bls.n	800ba52 <tu_edpt_validate+0x116>
 800b994:	4b35      	ldr	r3, [pc, #212]	@ (800ba6c <tu_edpt_validate+0x130>)
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d000      	beq.n	800b9a6 <tu_edpt_validate+0x6a>
 800b9a4:	be00      	bkpt	0x0000
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e059      	b.n	800ba5e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d10e      	bne.n	800b9ce <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800b9b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b9b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9b6:	d04e      	beq.n	800ba56 <tu_edpt_validate+0x11a>
 800b9b8:	4b2c      	ldr	r3, [pc, #176]	@ (800ba6c <tu_edpt_validate+0x130>)
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d000      	beq.n	800b9ca <tu_edpt_validate+0x8e>
 800b9c8:	be00      	bkpt	0x0000
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e047      	b.n	800ba5e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800b9ce:	78bb      	ldrb	r3, [r7, #2]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00e      	beq.n	800b9f2 <tu_edpt_validate+0xb6>
 800b9d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b9d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9da:	d10a      	bne.n	800b9f2 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9e8:	711a      	strb	r2, [r3, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800b9ee:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800b9f0:	e031      	b.n	800ba56 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800b9f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b9f4:	2b08      	cmp	r3, #8
 800b9f6:	d02e      	beq.n	800ba56 <tu_edpt_validate+0x11a>
 800b9f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b9fa:	2b10      	cmp	r3, #16
 800b9fc:	d02b      	beq.n	800ba56 <tu_edpt_validate+0x11a>
 800b9fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	d028      	beq.n	800ba56 <tu_edpt_validate+0x11a>
 800ba04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba06:	2b40      	cmp	r3, #64	@ 0x40
 800ba08:	d025      	beq.n	800ba56 <tu_edpt_validate+0x11a>
 800ba0a:	4b18      	ldr	r3, [pc, #96]	@ (800ba6c <tu_edpt_validate+0x130>)
 800ba0c:	61bb      	str	r3, [r7, #24]
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d000      	beq.n	800ba1c <tu_edpt_validate+0xe0>
 800ba1a:	be00      	bkpt	0x0000
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e01e      	b.n	800ba5e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d102      	bne.n	800ba2c <tu_edpt_validate+0xf0>
 800ba26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba2a:	e000      	b.n	800ba2e <tu_edpt_validate+0xf2>
 800ba2c:	2340      	movs	r3, #64	@ 0x40
 800ba2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ba30:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d910      	bls.n	800ba5a <tu_edpt_validate+0x11e>
 800ba38:	4b0c      	ldr	r3, [pc, #48]	@ (800ba6c <tu_edpt_validate+0x130>)
 800ba3a:	623b      	str	r3, [r7, #32]
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d000      	beq.n	800ba4a <tu_edpt_validate+0x10e>
 800ba48:	be00      	bkpt	0x0000
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e007      	b.n	800ba5e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e005      	b.n	800ba5e <tu_edpt_validate+0x122>
      break;
 800ba52:	bf00      	nop
 800ba54:	e002      	b.n	800ba5c <tu_edpt_validate+0x120>
      break;
 800ba56:	bf00      	nop
 800ba58:	e000      	b.n	800ba5c <tu_edpt_validate+0x120>
      break;
 800ba5a:	bf00      	nop
  }

  return true;
 800ba5c:	2301      	movs	r3, #1
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	372c      	adds	r7, #44	@ 0x2c
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	e000edf0 	.word	0xe000edf0

0800ba70 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ba70:	b480      	push	{r7}
 800ba72:	b08d      	sub	sp, #52	@ 0x34
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	460b      	mov	r3, r1
 800ba80:	80fb      	strh	r3, [r7, #6]
 800ba82:	4613      	mov	r3, r2
 800ba84:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba8e:	4413      	add	r3, r2
 800ba90:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800ba92:	e027      	b.n	800bae4 <tu_edpt_bind_driver+0x74>
 800ba94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba96:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	d116      	bne.n	800bad0 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800baa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa4:	789b      	ldrb	r3, [r3, #2]
 800baa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800baaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baae:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800bab0:	7fbb      	ldrb	r3, [r7, #30]
 800bab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bab6:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bac2:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800bac4:	7ffa      	ldrb	r2, [r7, #31]
 800bac6:	09d2      	lsrs	r2, r2, #7
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	4611      	mov	r1, r2
 800bacc:	797a      	ldrb	r2, [r7, #5]
 800bace:	545a      	strb	r2, [r3, r1]
 800bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	461a      	mov	r2, r3
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800bae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800bae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	429a      	cmp	r2, r3
 800baea:	d3d3      	bcc.n	800ba94 <tu_edpt_bind_driver+0x24>
  }
}
 800baec:	bf00      	nop
 800baee:	bf00      	nop
 800baf0:	3734      	adds	r7, #52	@ 0x34
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <atoi>:
 800bafa:	220a      	movs	r2, #10
 800bafc:	2100      	movs	r1, #0
 800bafe:	f000 b87b 	b.w	800bbf8 <strtol>
	...

0800bb04 <_strtol_l.isra.0>:
 800bb04:	2b24      	cmp	r3, #36	@ 0x24
 800bb06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0a:	4686      	mov	lr, r0
 800bb0c:	4690      	mov	r8, r2
 800bb0e:	d801      	bhi.n	800bb14 <_strtol_l.isra.0+0x10>
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d106      	bne.n	800bb22 <_strtol_l.isra.0+0x1e>
 800bb14:	f000 fa82 	bl	800c01c <__errno>
 800bb18:	2316      	movs	r3, #22
 800bb1a:	6003      	str	r3, [r0, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	4834      	ldr	r0, [pc, #208]	@ (800bbf4 <_strtol_l.isra.0+0xf0>)
 800bb24:	460d      	mov	r5, r1
 800bb26:	462a      	mov	r2, r5
 800bb28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb2c:	5d06      	ldrb	r6, [r0, r4]
 800bb2e:	f016 0608 	ands.w	r6, r6, #8
 800bb32:	d1f8      	bne.n	800bb26 <_strtol_l.isra.0+0x22>
 800bb34:	2c2d      	cmp	r4, #45	@ 0x2d
 800bb36:	d110      	bne.n	800bb5a <_strtol_l.isra.0+0x56>
 800bb38:	782c      	ldrb	r4, [r5, #0]
 800bb3a:	2601      	movs	r6, #1
 800bb3c:	1c95      	adds	r5, r2, #2
 800bb3e:	f033 0210 	bics.w	r2, r3, #16
 800bb42:	d115      	bne.n	800bb70 <_strtol_l.isra.0+0x6c>
 800bb44:	2c30      	cmp	r4, #48	@ 0x30
 800bb46:	d10d      	bne.n	800bb64 <_strtol_l.isra.0+0x60>
 800bb48:	782a      	ldrb	r2, [r5, #0]
 800bb4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb4e:	2a58      	cmp	r2, #88	@ 0x58
 800bb50:	d108      	bne.n	800bb64 <_strtol_l.isra.0+0x60>
 800bb52:	786c      	ldrb	r4, [r5, #1]
 800bb54:	3502      	adds	r5, #2
 800bb56:	2310      	movs	r3, #16
 800bb58:	e00a      	b.n	800bb70 <_strtol_l.isra.0+0x6c>
 800bb5a:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb5c:	bf04      	itt	eq
 800bb5e:	782c      	ldrbeq	r4, [r5, #0]
 800bb60:	1c95      	addeq	r5, r2, #2
 800bb62:	e7ec      	b.n	800bb3e <_strtol_l.isra.0+0x3a>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1f6      	bne.n	800bb56 <_strtol_l.isra.0+0x52>
 800bb68:	2c30      	cmp	r4, #48	@ 0x30
 800bb6a:	bf14      	ite	ne
 800bb6c:	230a      	movne	r3, #10
 800bb6e:	2308      	moveq	r3, #8
 800bb70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb78:	2200      	movs	r2, #0
 800bb7a:	fbbc f9f3 	udiv	r9, ip, r3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb88:	2f09      	cmp	r7, #9
 800bb8a:	d80f      	bhi.n	800bbac <_strtol_l.isra.0+0xa8>
 800bb8c:	463c      	mov	r4, r7
 800bb8e:	42a3      	cmp	r3, r4
 800bb90:	dd1b      	ble.n	800bbca <_strtol_l.isra.0+0xc6>
 800bb92:	1c57      	adds	r7, r2, #1
 800bb94:	d007      	beq.n	800bba6 <_strtol_l.isra.0+0xa2>
 800bb96:	4581      	cmp	r9, r0
 800bb98:	d314      	bcc.n	800bbc4 <_strtol_l.isra.0+0xc0>
 800bb9a:	d101      	bne.n	800bba0 <_strtol_l.isra.0+0x9c>
 800bb9c:	45a2      	cmp	sl, r4
 800bb9e:	db11      	blt.n	800bbc4 <_strtol_l.isra.0+0xc0>
 800bba0:	fb00 4003 	mla	r0, r0, r3, r4
 800bba4:	2201      	movs	r2, #1
 800bba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbaa:	e7eb      	b.n	800bb84 <_strtol_l.isra.0+0x80>
 800bbac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bbb0:	2f19      	cmp	r7, #25
 800bbb2:	d801      	bhi.n	800bbb8 <_strtol_l.isra.0+0xb4>
 800bbb4:	3c37      	subs	r4, #55	@ 0x37
 800bbb6:	e7ea      	b.n	800bb8e <_strtol_l.isra.0+0x8a>
 800bbb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bbbc:	2f19      	cmp	r7, #25
 800bbbe:	d804      	bhi.n	800bbca <_strtol_l.isra.0+0xc6>
 800bbc0:	3c57      	subs	r4, #87	@ 0x57
 800bbc2:	e7e4      	b.n	800bb8e <_strtol_l.isra.0+0x8a>
 800bbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc8:	e7ed      	b.n	800bba6 <_strtol_l.isra.0+0xa2>
 800bbca:	1c53      	adds	r3, r2, #1
 800bbcc:	d108      	bne.n	800bbe0 <_strtol_l.isra.0+0xdc>
 800bbce:	2322      	movs	r3, #34	@ 0x22
 800bbd0:	f8ce 3000 	str.w	r3, [lr]
 800bbd4:	4660      	mov	r0, ip
 800bbd6:	f1b8 0f00 	cmp.w	r8, #0
 800bbda:	d0a0      	beq.n	800bb1e <_strtol_l.isra.0+0x1a>
 800bbdc:	1e69      	subs	r1, r5, #1
 800bbde:	e006      	b.n	800bbee <_strtol_l.isra.0+0xea>
 800bbe0:	b106      	cbz	r6, 800bbe4 <_strtol_l.isra.0+0xe0>
 800bbe2:	4240      	negs	r0, r0
 800bbe4:	f1b8 0f00 	cmp.w	r8, #0
 800bbe8:	d099      	beq.n	800bb1e <_strtol_l.isra.0+0x1a>
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	d1f6      	bne.n	800bbdc <_strtol_l.isra.0+0xd8>
 800bbee:	f8c8 1000 	str.w	r1, [r8]
 800bbf2:	e794      	b.n	800bb1e <_strtol_l.isra.0+0x1a>
 800bbf4:	0800df55 	.word	0x0800df55

0800bbf8 <strtol>:
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	460a      	mov	r2, r1
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	4802      	ldr	r0, [pc, #8]	@ (800bc08 <strtol+0x10>)
 800bc00:	6800      	ldr	r0, [r0, #0]
 800bc02:	f7ff bf7f 	b.w	800bb04 <_strtol_l.isra.0>
 800bc06:	bf00      	nop
 800bc08:	20000090 	.word	0x20000090

0800bc0c <std>:
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	e9c0 3300 	strd	r3, r3, [r0]
 800bc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1a:	6083      	str	r3, [r0, #8]
 800bc1c:	8181      	strh	r1, [r0, #12]
 800bc1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc20:	81c2      	strh	r2, [r0, #14]
 800bc22:	6183      	str	r3, [r0, #24]
 800bc24:	4619      	mov	r1, r3
 800bc26:	2208      	movs	r2, #8
 800bc28:	305c      	adds	r0, #92	@ 0x5c
 800bc2a:	f000 f94c 	bl	800bec6 <memset>
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc64 <std+0x58>)
 800bc30:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc32:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <std+0x5c>)
 800bc34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc36:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <std+0x60>)
 800bc38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc70 <std+0x64>)
 800bc3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <std+0x68>)
 800bc40:	6224      	str	r4, [r4, #32]
 800bc42:	429c      	cmp	r4, r3
 800bc44:	d006      	beq.n	800bc54 <std+0x48>
 800bc46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc4a:	4294      	cmp	r4, r2
 800bc4c:	d002      	beq.n	800bc54 <std+0x48>
 800bc4e:	33d0      	adds	r3, #208	@ 0xd0
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d105      	bne.n	800bc60 <std+0x54>
 800bc54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc5c:	f000 ba08 	b.w	800c070 <__retarget_lock_init_recursive>
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	0800be41 	.word	0x0800be41
 800bc68:	0800be63 	.word	0x0800be63
 800bc6c:	0800be9b 	.word	0x0800be9b
 800bc70:	0800bebf 	.word	0x0800bebf
 800bc74:	2000114c 	.word	0x2000114c

0800bc78 <stdio_exit_handler>:
 800bc78:	4a02      	ldr	r2, [pc, #8]	@ (800bc84 <stdio_exit_handler+0xc>)
 800bc7a:	4903      	ldr	r1, [pc, #12]	@ (800bc88 <stdio_exit_handler+0x10>)
 800bc7c:	4803      	ldr	r0, [pc, #12]	@ (800bc8c <stdio_exit_handler+0x14>)
 800bc7e:	f000 b869 	b.w	800bd54 <_fwalk_sglue>
 800bc82:	bf00      	nop
 800bc84:	20000084 	.word	0x20000084
 800bc88:	0800cc25 	.word	0x0800cc25
 800bc8c:	20000094 	.word	0x20000094

0800bc90 <cleanup_stdio>:
 800bc90:	6841      	ldr	r1, [r0, #4]
 800bc92:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc4 <cleanup_stdio+0x34>)
 800bc94:	4299      	cmp	r1, r3
 800bc96:	b510      	push	{r4, lr}
 800bc98:	4604      	mov	r4, r0
 800bc9a:	d001      	beq.n	800bca0 <cleanup_stdio+0x10>
 800bc9c:	f000 ffc2 	bl	800cc24 <_fflush_r>
 800bca0:	68a1      	ldr	r1, [r4, #8]
 800bca2:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <cleanup_stdio+0x38>)
 800bca4:	4299      	cmp	r1, r3
 800bca6:	d002      	beq.n	800bcae <cleanup_stdio+0x1e>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f000 ffbb 	bl	800cc24 <_fflush_r>
 800bcae:	68e1      	ldr	r1, [r4, #12]
 800bcb0:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <cleanup_stdio+0x3c>)
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	d004      	beq.n	800bcc0 <cleanup_stdio+0x30>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcbc:	f000 bfb2 	b.w	800cc24 <_fflush_r>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2000114c 	.word	0x2000114c
 800bcc8:	200011b4 	.word	0x200011b4
 800bccc:	2000121c 	.word	0x2000121c

0800bcd0 <global_stdio_init.part.0>:
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <global_stdio_init.part.0+0x30>)
 800bcd4:	4c0b      	ldr	r4, [pc, #44]	@ (800bd04 <global_stdio_init.part.0+0x34>)
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd08 <global_stdio_init.part.0+0x38>)
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2104      	movs	r1, #4
 800bce0:	f7ff ff94 	bl	800bc0c <std>
 800bce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bce8:	2201      	movs	r2, #1
 800bcea:	2109      	movs	r1, #9
 800bcec:	f7ff ff8e 	bl	800bc0c <std>
 800bcf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfa:	2112      	movs	r1, #18
 800bcfc:	f7ff bf86 	b.w	800bc0c <std>
 800bd00:	20001284 	.word	0x20001284
 800bd04:	2000114c 	.word	0x2000114c
 800bd08:	0800bc79 	.word	0x0800bc79

0800bd0c <__sfp_lock_acquire>:
 800bd0c:	4801      	ldr	r0, [pc, #4]	@ (800bd14 <__sfp_lock_acquire+0x8>)
 800bd0e:	f000 b9b0 	b.w	800c072 <__retarget_lock_acquire_recursive>
 800bd12:	bf00      	nop
 800bd14:	2000128d 	.word	0x2000128d

0800bd18 <__sfp_lock_release>:
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <__sfp_lock_release+0x8>)
 800bd1a:	f000 b9ab 	b.w	800c074 <__retarget_lock_release_recursive>
 800bd1e:	bf00      	nop
 800bd20:	2000128d 	.word	0x2000128d

0800bd24 <__sinit>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
 800bd28:	f7ff fff0 	bl	800bd0c <__sfp_lock_acquire>
 800bd2c:	6a23      	ldr	r3, [r4, #32]
 800bd2e:	b11b      	cbz	r3, 800bd38 <__sinit+0x14>
 800bd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd34:	f7ff bff0 	b.w	800bd18 <__sfp_lock_release>
 800bd38:	4b04      	ldr	r3, [pc, #16]	@ (800bd4c <__sinit+0x28>)
 800bd3a:	6223      	str	r3, [r4, #32]
 800bd3c:	4b04      	ldr	r3, [pc, #16]	@ (800bd50 <__sinit+0x2c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f5      	bne.n	800bd30 <__sinit+0xc>
 800bd44:	f7ff ffc4 	bl	800bcd0 <global_stdio_init.part.0>
 800bd48:	e7f2      	b.n	800bd30 <__sinit+0xc>
 800bd4a:	bf00      	nop
 800bd4c:	0800bc91 	.word	0x0800bc91
 800bd50:	20001284 	.word	0x20001284

0800bd54 <_fwalk_sglue>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	4607      	mov	r7, r0
 800bd5a:	4688      	mov	r8, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	2600      	movs	r6, #0
 800bd60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd64:	f1b9 0901 	subs.w	r9, r9, #1
 800bd68:	d505      	bpl.n	800bd76 <_fwalk_sglue+0x22>
 800bd6a:	6824      	ldr	r4, [r4, #0]
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	d1f7      	bne.n	800bd60 <_fwalk_sglue+0xc>
 800bd70:	4630      	mov	r0, r6
 800bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd76:	89ab      	ldrh	r3, [r5, #12]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d907      	bls.n	800bd8c <_fwalk_sglue+0x38>
 800bd7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd80:	3301      	adds	r3, #1
 800bd82:	d003      	beq.n	800bd8c <_fwalk_sglue+0x38>
 800bd84:	4629      	mov	r1, r5
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c0      	blx	r8
 800bd8a:	4306      	orrs	r6, r0
 800bd8c:	3568      	adds	r5, #104	@ 0x68
 800bd8e:	e7e9      	b.n	800bd64 <_fwalk_sglue+0x10>

0800bd90 <sniprintf>:
 800bd90:	b40c      	push	{r2, r3}
 800bd92:	b530      	push	{r4, r5, lr}
 800bd94:	4b18      	ldr	r3, [pc, #96]	@ (800bdf8 <sniprintf+0x68>)
 800bd96:	1e0c      	subs	r4, r1, #0
 800bd98:	681d      	ldr	r5, [r3, #0]
 800bd9a:	b09d      	sub	sp, #116	@ 0x74
 800bd9c:	da08      	bge.n	800bdb0 <sniprintf+0x20>
 800bd9e:	238b      	movs	r3, #139	@ 0x8b
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	b01d      	add	sp, #116	@ 0x74
 800bda8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdac:	b002      	add	sp, #8
 800bdae:	4770      	bx	lr
 800bdb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bdb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bdb8:	f04f 0300 	mov.w	r3, #0
 800bdbc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bdbe:	bf14      	ite	ne
 800bdc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bdc4:	4623      	moveq	r3, r4
 800bdc6:	9304      	str	r3, [sp, #16]
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bdce:	9002      	str	r0, [sp, #8]
 800bdd0:	9006      	str	r0, [sp, #24]
 800bdd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdd8:	ab21      	add	r3, sp, #132	@ 0x84
 800bdda:	a902      	add	r1, sp, #8
 800bddc:	4628      	mov	r0, r5
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	f000 fad2 	bl	800c388 <_svfiprintf_r>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	bfbc      	itt	lt
 800bde8:	238b      	movlt	r3, #139	@ 0x8b
 800bdea:	602b      	strlt	r3, [r5, #0]
 800bdec:	2c00      	cmp	r4, #0
 800bdee:	d0da      	beq.n	800bda6 <sniprintf+0x16>
 800bdf0:	9b02      	ldr	r3, [sp, #8]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
 800bdf6:	e7d6      	b.n	800bda6 <sniprintf+0x16>
 800bdf8:	20000090 	.word	0x20000090

0800bdfc <siprintf>:
 800bdfc:	b40e      	push	{r1, r2, r3}
 800bdfe:	b510      	push	{r4, lr}
 800be00:	b09d      	sub	sp, #116	@ 0x74
 800be02:	ab1f      	add	r3, sp, #124	@ 0x7c
 800be04:	9002      	str	r0, [sp, #8]
 800be06:	9006      	str	r0, [sp, #24]
 800be08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be0c:	480a      	ldr	r0, [pc, #40]	@ (800be38 <siprintf+0x3c>)
 800be0e:	9107      	str	r1, [sp, #28]
 800be10:	9104      	str	r1, [sp, #16]
 800be12:	490a      	ldr	r1, [pc, #40]	@ (800be3c <siprintf+0x40>)
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	2400      	movs	r4, #0
 800be1c:	a902      	add	r1, sp, #8
 800be1e:	6800      	ldr	r0, [r0, #0]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	941b      	str	r4, [sp, #108]	@ 0x6c
 800be24:	f000 fab0 	bl	800c388 <_svfiprintf_r>
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	701c      	strb	r4, [r3, #0]
 800be2c:	b01d      	add	sp, #116	@ 0x74
 800be2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be32:	b003      	add	sp, #12
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20000090 	.word	0x20000090
 800be3c:	ffff0208 	.word	0xffff0208

0800be40 <__sread>:
 800be40:	b510      	push	{r4, lr}
 800be42:	460c      	mov	r4, r1
 800be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be48:	f000 f8c4 	bl	800bfd4 <_read_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	bfab      	itete	ge
 800be50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be52:	89a3      	ldrhlt	r3, [r4, #12]
 800be54:	181b      	addge	r3, r3, r0
 800be56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be5a:	bfac      	ite	ge
 800be5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be5e:	81a3      	strhlt	r3, [r4, #12]
 800be60:	bd10      	pop	{r4, pc}

0800be62 <__swrite>:
 800be62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be66:	461f      	mov	r7, r3
 800be68:	898b      	ldrh	r3, [r1, #12]
 800be6a:	05db      	lsls	r3, r3, #23
 800be6c:	4605      	mov	r5, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	4616      	mov	r6, r2
 800be72:	d505      	bpl.n	800be80 <__swrite+0x1e>
 800be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be78:	2302      	movs	r3, #2
 800be7a:	2200      	movs	r2, #0
 800be7c:	f000 f898 	bl	800bfb0 <_lseek_r>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	4628      	mov	r0, r5
 800be92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	f000 b8af 	b.w	800bff8 <_write_r>

0800be9a <__sseek>:
 800be9a:	b510      	push	{r4, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea2:	f000 f885 	bl	800bfb0 <_lseek_r>
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	bf15      	itete	ne
 800beac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800beb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beb6:	81a3      	strheq	r3, [r4, #12]
 800beb8:	bf18      	it	ne
 800beba:	81a3      	strhne	r3, [r4, #12]
 800bebc:	bd10      	pop	{r4, pc}

0800bebe <__sclose>:
 800bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec2:	f000 b865 	b.w	800bf90 <_close_r>

0800bec6 <memset>:
 800bec6:	4402      	add	r2, r0
 800bec8:	4603      	mov	r3, r0
 800beca:	4293      	cmp	r3, r2
 800becc:	d100      	bne.n	800bed0 <memset+0xa>
 800bece:	4770      	bx	lr
 800bed0:	f803 1b01 	strb.w	r1, [r3], #1
 800bed4:	e7f9      	b.n	800beca <memset+0x4>
	...

0800bed8 <strtok>:
 800bed8:	4b16      	ldr	r3, [pc, #88]	@ (800bf34 <strtok+0x5c>)
 800beda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bede:	681f      	ldr	r7, [r3, #0]
 800bee0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bee2:	4605      	mov	r5, r0
 800bee4:	460e      	mov	r6, r1
 800bee6:	b9ec      	cbnz	r4, 800bf24 <strtok+0x4c>
 800bee8:	2050      	movs	r0, #80	@ 0x50
 800beea:	f000 f93b 	bl	800c164 <malloc>
 800beee:	4602      	mov	r2, r0
 800bef0:	6478      	str	r0, [r7, #68]	@ 0x44
 800bef2:	b920      	cbnz	r0, 800befe <strtok+0x26>
 800bef4:	4b10      	ldr	r3, [pc, #64]	@ (800bf38 <strtok+0x60>)
 800bef6:	4811      	ldr	r0, [pc, #68]	@ (800bf3c <strtok+0x64>)
 800bef8:	215b      	movs	r1, #91	@ 0x5b
 800befa:	f000 f8cb 	bl	800c094 <__assert_func>
 800befe:	e9c0 4400 	strd	r4, r4, [r0]
 800bf02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bf06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bf0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bf0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800bf12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bf16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bf1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bf1e:	6184      	str	r4, [r0, #24]
 800bf20:	7704      	strb	r4, [r0, #28]
 800bf22:	6244      	str	r4, [r0, #36]	@ 0x24
 800bf24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf26:	4631      	mov	r1, r6
 800bf28:	4628      	mov	r0, r5
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	f000 b806 	b.w	800bf40 <__strtok_r>
 800bf34:	20000090 	.word	0x20000090
 800bf38:	0800e055 	.word	0x0800e055
 800bf3c:	0800e06c 	.word	0x0800e06c

0800bf40 <__strtok_r>:
 800bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf42:	4604      	mov	r4, r0
 800bf44:	b908      	cbnz	r0, 800bf4a <__strtok_r+0xa>
 800bf46:	6814      	ldr	r4, [r2, #0]
 800bf48:	b144      	cbz	r4, 800bf5c <__strtok_r+0x1c>
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bf50:	460f      	mov	r7, r1
 800bf52:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bf56:	b91e      	cbnz	r6, 800bf60 <__strtok_r+0x20>
 800bf58:	b965      	cbnz	r5, 800bf74 <__strtok_r+0x34>
 800bf5a:	6015      	str	r5, [r2, #0]
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e005      	b.n	800bf6c <__strtok_r+0x2c>
 800bf60:	42b5      	cmp	r5, r6
 800bf62:	d1f6      	bne.n	800bf52 <__strtok_r+0x12>
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1f0      	bne.n	800bf4a <__strtok_r+0xa>
 800bf68:	6014      	str	r4, [r2, #0]
 800bf6a:	7003      	strb	r3, [r0, #0]
 800bf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6e:	461c      	mov	r4, r3
 800bf70:	e00c      	b.n	800bf8c <__strtok_r+0x4c>
 800bf72:	b91d      	cbnz	r5, 800bf7c <__strtok_r+0x3c>
 800bf74:	4627      	mov	r7, r4
 800bf76:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf7a:	460e      	mov	r6, r1
 800bf7c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	d1f6      	bne.n	800bf72 <__strtok_r+0x32>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0f2      	beq.n	800bf6e <__strtok_r+0x2e>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	703b      	strb	r3, [r7, #0]
 800bf8c:	6014      	str	r4, [r2, #0]
 800bf8e:	e7ed      	b.n	800bf6c <__strtok_r+0x2c>

0800bf90 <_close_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d06      	ldr	r5, [pc, #24]	@ (800bfac <_close_r+0x1c>)
 800bf94:	2300      	movs	r3, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	602b      	str	r3, [r5, #0]
 800bf9c:	f7f6 fe55 	bl	8002c4a <_close>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_close_r+0x1a>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_close_r+0x1a>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	20001288 	.word	0x20001288

0800bfb0 <_lseek_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d07      	ldr	r5, [pc, #28]	@ (800bfd0 <_lseek_r+0x20>)
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	4611      	mov	r1, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f7f6 fe6a 	bl	8002c98 <_lseek>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_lseek_r+0x1e>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_lseek_r+0x1e>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20001288 	.word	0x20001288

0800bfd4 <_read_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d07      	ldr	r5, [pc, #28]	@ (800bff4 <_read_r+0x20>)
 800bfd8:	4604      	mov	r4, r0
 800bfda:	4608      	mov	r0, r1
 800bfdc:	4611      	mov	r1, r2
 800bfde:	2200      	movs	r2, #0
 800bfe0:	602a      	str	r2, [r5, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7f6 fdf8 	bl	8002bd8 <_read>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_read_r+0x1e>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_read_r+0x1e>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	20001288 	.word	0x20001288

0800bff8 <_write_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d07      	ldr	r5, [pc, #28]	@ (800c018 <_write_r+0x20>)
 800bffc:	4604      	mov	r4, r0
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	2200      	movs	r2, #0
 800c004:	602a      	str	r2, [r5, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f7f6 fe03 	bl	8002c12 <_write>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d102      	bne.n	800c016 <_write_r+0x1e>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	b103      	cbz	r3, 800c016 <_write_r+0x1e>
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	20001288 	.word	0x20001288

0800c01c <__errno>:
 800c01c:	4b01      	ldr	r3, [pc, #4]	@ (800c024 <__errno+0x8>)
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	20000090 	.word	0x20000090

0800c028 <__libc_init_array>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	4d0d      	ldr	r5, [pc, #52]	@ (800c060 <__libc_init_array+0x38>)
 800c02c:	4c0d      	ldr	r4, [pc, #52]	@ (800c064 <__libc_init_array+0x3c>)
 800c02e:	1b64      	subs	r4, r4, r5
 800c030:	10a4      	asrs	r4, r4, #2
 800c032:	2600      	movs	r6, #0
 800c034:	42a6      	cmp	r6, r4
 800c036:	d109      	bne.n	800c04c <__libc_init_array+0x24>
 800c038:	4d0b      	ldr	r5, [pc, #44]	@ (800c068 <__libc_init_array+0x40>)
 800c03a:	4c0c      	ldr	r4, [pc, #48]	@ (800c06c <__libc_init_array+0x44>)
 800c03c:	f000 fff0 	bl	800d020 <_init>
 800c040:	1b64      	subs	r4, r4, r5
 800c042:	10a4      	asrs	r4, r4, #2
 800c044:	2600      	movs	r6, #0
 800c046:	42a6      	cmp	r6, r4
 800c048:	d105      	bne.n	800c056 <__libc_init_array+0x2e>
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c050:	4798      	blx	r3
 800c052:	3601      	adds	r6, #1
 800c054:	e7ee      	b.n	800c034 <__libc_init_array+0xc>
 800c056:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05a:	4798      	blx	r3
 800c05c:	3601      	adds	r6, #1
 800c05e:	e7f2      	b.n	800c046 <__libc_init_array+0x1e>
 800c060:	0800e140 	.word	0x0800e140
 800c064:	0800e140 	.word	0x0800e140
 800c068:	0800e140 	.word	0x0800e140
 800c06c:	0800e144 	.word	0x0800e144

0800c070 <__retarget_lock_init_recursive>:
 800c070:	4770      	bx	lr

0800c072 <__retarget_lock_acquire_recursive>:
 800c072:	4770      	bx	lr

0800c074 <__retarget_lock_release_recursive>:
 800c074:	4770      	bx	lr

0800c076 <memcpy>:
 800c076:	440a      	add	r2, r1
 800c078:	4291      	cmp	r1, r2
 800c07a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c07e:	d100      	bne.n	800c082 <memcpy+0xc>
 800c080:	4770      	bx	lr
 800c082:	b510      	push	{r4, lr}
 800c084:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c08c:	4291      	cmp	r1, r2
 800c08e:	d1f9      	bne.n	800c084 <memcpy+0xe>
 800c090:	bd10      	pop	{r4, pc}
	...

0800c094 <__assert_func>:
 800c094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c096:	4614      	mov	r4, r2
 800c098:	461a      	mov	r2, r3
 800c09a:	4b09      	ldr	r3, [pc, #36]	@ (800c0c0 <__assert_func+0x2c>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4605      	mov	r5, r0
 800c0a0:	68d8      	ldr	r0, [r3, #12]
 800c0a2:	b14c      	cbz	r4, 800c0b8 <__assert_func+0x24>
 800c0a4:	4b07      	ldr	r3, [pc, #28]	@ (800c0c4 <__assert_func+0x30>)
 800c0a6:	9100      	str	r1, [sp, #0]
 800c0a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0ac:	4906      	ldr	r1, [pc, #24]	@ (800c0c8 <__assert_func+0x34>)
 800c0ae:	462b      	mov	r3, r5
 800c0b0:	f000 fde0 	bl	800cc74 <fiprintf>
 800c0b4:	f000 feae 	bl	800ce14 <abort>
 800c0b8:	4b04      	ldr	r3, [pc, #16]	@ (800c0cc <__assert_func+0x38>)
 800c0ba:	461c      	mov	r4, r3
 800c0bc:	e7f3      	b.n	800c0a6 <__assert_func+0x12>
 800c0be:	bf00      	nop
 800c0c0:	20000090 	.word	0x20000090
 800c0c4:	0800e0c6 	.word	0x0800e0c6
 800c0c8:	0800e0d3 	.word	0x0800e0d3
 800c0cc:	0800e101 	.word	0x0800e101

0800c0d0 <_free_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	2900      	cmp	r1, #0
 800c0d6:	d041      	beq.n	800c15c <_free_r+0x8c>
 800c0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0dc:	1f0c      	subs	r4, r1, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfb8      	it	lt
 800c0e2:	18e4      	addlt	r4, r4, r3
 800c0e4:	f000 f8e8 	bl	800c2b8 <__malloc_lock>
 800c0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c160 <_free_r+0x90>)
 800c0ea:	6813      	ldr	r3, [r2, #0]
 800c0ec:	b933      	cbnz	r3, 800c0fc <_free_r+0x2c>
 800c0ee:	6063      	str	r3, [r4, #4]
 800c0f0:	6014      	str	r4, [r2, #0]
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0f8:	f000 b8e4 	b.w	800c2c4 <__malloc_unlock>
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	d908      	bls.n	800c112 <_free_r+0x42>
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	1821      	adds	r1, r4, r0
 800c104:	428b      	cmp	r3, r1
 800c106:	bf01      	itttt	eq
 800c108:	6819      	ldreq	r1, [r3, #0]
 800c10a:	685b      	ldreq	r3, [r3, #4]
 800c10c:	1809      	addeq	r1, r1, r0
 800c10e:	6021      	streq	r1, [r4, #0]
 800c110:	e7ed      	b.n	800c0ee <_free_r+0x1e>
 800c112:	461a      	mov	r2, r3
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	b10b      	cbz	r3, 800c11c <_free_r+0x4c>
 800c118:	42a3      	cmp	r3, r4
 800c11a:	d9fa      	bls.n	800c112 <_free_r+0x42>
 800c11c:	6811      	ldr	r1, [r2, #0]
 800c11e:	1850      	adds	r0, r2, r1
 800c120:	42a0      	cmp	r0, r4
 800c122:	d10b      	bne.n	800c13c <_free_r+0x6c>
 800c124:	6820      	ldr	r0, [r4, #0]
 800c126:	4401      	add	r1, r0
 800c128:	1850      	adds	r0, r2, r1
 800c12a:	4283      	cmp	r3, r0
 800c12c:	6011      	str	r1, [r2, #0]
 800c12e:	d1e0      	bne.n	800c0f2 <_free_r+0x22>
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	6053      	str	r3, [r2, #4]
 800c136:	4408      	add	r0, r1
 800c138:	6010      	str	r0, [r2, #0]
 800c13a:	e7da      	b.n	800c0f2 <_free_r+0x22>
 800c13c:	d902      	bls.n	800c144 <_free_r+0x74>
 800c13e:	230c      	movs	r3, #12
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	e7d6      	b.n	800c0f2 <_free_r+0x22>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	1821      	adds	r1, r4, r0
 800c148:	428b      	cmp	r3, r1
 800c14a:	bf04      	itt	eq
 800c14c:	6819      	ldreq	r1, [r3, #0]
 800c14e:	685b      	ldreq	r3, [r3, #4]
 800c150:	6063      	str	r3, [r4, #4]
 800c152:	bf04      	itt	eq
 800c154:	1809      	addeq	r1, r1, r0
 800c156:	6021      	streq	r1, [r4, #0]
 800c158:	6054      	str	r4, [r2, #4]
 800c15a:	e7ca      	b.n	800c0f2 <_free_r+0x22>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	20001294 	.word	0x20001294

0800c164 <malloc>:
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <malloc+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f000 b825 	b.w	800c1b8 <_malloc_r>
 800c16e:	bf00      	nop
 800c170:	20000090 	.word	0x20000090

0800c174 <sbrk_aligned>:
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	4e0f      	ldr	r6, [pc, #60]	@ (800c1b4 <sbrk_aligned+0x40>)
 800c178:	460c      	mov	r4, r1
 800c17a:	6831      	ldr	r1, [r6, #0]
 800c17c:	4605      	mov	r5, r0
 800c17e:	b911      	cbnz	r1, 800c186 <sbrk_aligned+0x12>
 800c180:	f000 fe38 	bl	800cdf4 <_sbrk_r>
 800c184:	6030      	str	r0, [r6, #0]
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f000 fe33 	bl	800cdf4 <_sbrk_r>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d103      	bne.n	800c19a <sbrk_aligned+0x26>
 800c192:	f04f 34ff 	mov.w	r4, #4294967295
 800c196:	4620      	mov	r0, r4
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	1cc4      	adds	r4, r0, #3
 800c19c:	f024 0403 	bic.w	r4, r4, #3
 800c1a0:	42a0      	cmp	r0, r4
 800c1a2:	d0f8      	beq.n	800c196 <sbrk_aligned+0x22>
 800c1a4:	1a21      	subs	r1, r4, r0
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f000 fe24 	bl	800cdf4 <_sbrk_r>
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d1f2      	bne.n	800c196 <sbrk_aligned+0x22>
 800c1b0:	e7ef      	b.n	800c192 <sbrk_aligned+0x1e>
 800c1b2:	bf00      	nop
 800c1b4:	20001290 	.word	0x20001290

0800c1b8 <_malloc_r>:
 800c1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	1ccd      	adds	r5, r1, #3
 800c1be:	f025 0503 	bic.w	r5, r5, #3
 800c1c2:	3508      	adds	r5, #8
 800c1c4:	2d0c      	cmp	r5, #12
 800c1c6:	bf38      	it	cc
 800c1c8:	250c      	movcc	r5, #12
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	db01      	blt.n	800c1d4 <_malloc_r+0x1c>
 800c1d0:	42a9      	cmp	r1, r5
 800c1d2:	d904      	bls.n	800c1de <_malloc_r+0x26>
 800c1d4:	230c      	movs	r3, #12
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	2000      	movs	r0, #0
 800c1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2b4 <_malloc_r+0xfc>
 800c1e2:	f000 f869 	bl	800c2b8 <__malloc_lock>
 800c1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	bb44      	cbnz	r4, 800c240 <_malloc_r+0x88>
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f7ff ffbf 	bl	800c174 <sbrk_aligned>
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	d158      	bne.n	800c2ae <_malloc_r+0xf6>
 800c1fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c200:	4627      	mov	r7, r4
 800c202:	2f00      	cmp	r7, #0
 800c204:	d143      	bne.n	800c28e <_malloc_r+0xd6>
 800c206:	2c00      	cmp	r4, #0
 800c208:	d04b      	beq.n	800c2a2 <_malloc_r+0xea>
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	4639      	mov	r1, r7
 800c20e:	4630      	mov	r0, r6
 800c210:	eb04 0903 	add.w	r9, r4, r3
 800c214:	f000 fdee 	bl	800cdf4 <_sbrk_r>
 800c218:	4581      	cmp	r9, r0
 800c21a:	d142      	bne.n	800c2a2 <_malloc_r+0xea>
 800c21c:	6821      	ldr	r1, [r4, #0]
 800c21e:	1a6d      	subs	r5, r5, r1
 800c220:	4629      	mov	r1, r5
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff ffa6 	bl	800c174 <sbrk_aligned>
 800c228:	3001      	adds	r0, #1
 800c22a:	d03a      	beq.n	800c2a2 <_malloc_r+0xea>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	442b      	add	r3, r5
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	f8d8 3000 	ldr.w	r3, [r8]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	bb62      	cbnz	r2, 800c294 <_malloc_r+0xdc>
 800c23a:	f8c8 7000 	str.w	r7, [r8]
 800c23e:	e00f      	b.n	800c260 <_malloc_r+0xa8>
 800c240:	6822      	ldr	r2, [r4, #0]
 800c242:	1b52      	subs	r2, r2, r5
 800c244:	d420      	bmi.n	800c288 <_malloc_r+0xd0>
 800c246:	2a0b      	cmp	r2, #11
 800c248:	d917      	bls.n	800c27a <_malloc_r+0xc2>
 800c24a:	1961      	adds	r1, r4, r5
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	6025      	str	r5, [r4, #0]
 800c250:	bf18      	it	ne
 800c252:	6059      	strne	r1, [r3, #4]
 800c254:	6863      	ldr	r3, [r4, #4]
 800c256:	bf08      	it	eq
 800c258:	f8c8 1000 	streq.w	r1, [r8]
 800c25c:	5162      	str	r2, [r4, r5]
 800c25e:	604b      	str	r3, [r1, #4]
 800c260:	4630      	mov	r0, r6
 800c262:	f000 f82f 	bl	800c2c4 <__malloc_unlock>
 800c266:	f104 000b 	add.w	r0, r4, #11
 800c26a:	1d23      	adds	r3, r4, #4
 800c26c:	f020 0007 	bic.w	r0, r0, #7
 800c270:	1ac2      	subs	r2, r0, r3
 800c272:	bf1c      	itt	ne
 800c274:	1a1b      	subne	r3, r3, r0
 800c276:	50a3      	strne	r3, [r4, r2]
 800c278:	e7af      	b.n	800c1da <_malloc_r+0x22>
 800c27a:	6862      	ldr	r2, [r4, #4]
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	bf0c      	ite	eq
 800c280:	f8c8 2000 	streq.w	r2, [r8]
 800c284:	605a      	strne	r2, [r3, #4]
 800c286:	e7eb      	b.n	800c260 <_malloc_r+0xa8>
 800c288:	4623      	mov	r3, r4
 800c28a:	6864      	ldr	r4, [r4, #4]
 800c28c:	e7ae      	b.n	800c1ec <_malloc_r+0x34>
 800c28e:	463c      	mov	r4, r7
 800c290:	687f      	ldr	r7, [r7, #4]
 800c292:	e7b6      	b.n	800c202 <_malloc_r+0x4a>
 800c294:	461a      	mov	r2, r3
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d1fb      	bne.n	800c294 <_malloc_r+0xdc>
 800c29c:	2300      	movs	r3, #0
 800c29e:	6053      	str	r3, [r2, #4]
 800c2a0:	e7de      	b.n	800c260 <_malloc_r+0xa8>
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	6033      	str	r3, [r6, #0]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 f80c 	bl	800c2c4 <__malloc_unlock>
 800c2ac:	e794      	b.n	800c1d8 <_malloc_r+0x20>
 800c2ae:	6005      	str	r5, [r0, #0]
 800c2b0:	e7d6      	b.n	800c260 <_malloc_r+0xa8>
 800c2b2:	bf00      	nop
 800c2b4:	20001294 	.word	0x20001294

0800c2b8 <__malloc_lock>:
 800c2b8:	4801      	ldr	r0, [pc, #4]	@ (800c2c0 <__malloc_lock+0x8>)
 800c2ba:	f7ff beda 	b.w	800c072 <__retarget_lock_acquire_recursive>
 800c2be:	bf00      	nop
 800c2c0:	2000128c 	.word	0x2000128c

0800c2c4 <__malloc_unlock>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	@ (800c2cc <__malloc_unlock+0x8>)
 800c2c6:	f7ff bed5 	b.w	800c074 <__retarget_lock_release_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	2000128c 	.word	0x2000128c

0800c2d0 <__ssputs_r>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	688e      	ldr	r6, [r1, #8]
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	42be      	cmp	r6, r7
 800c2da:	680b      	ldr	r3, [r1, #0]
 800c2dc:	4682      	mov	sl, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4690      	mov	r8, r2
 800c2e2:	d82d      	bhi.n	800c340 <__ssputs_r+0x70>
 800c2e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2ec:	d026      	beq.n	800c33c <__ssputs_r+0x6c>
 800c2ee:	6965      	ldr	r5, [r4, #20]
 800c2f0:	6909      	ldr	r1, [r1, #16]
 800c2f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f6:	eba3 0901 	sub.w	r9, r3, r1
 800c2fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fe:	1c7b      	adds	r3, r7, #1
 800c300:	444b      	add	r3, r9
 800c302:	106d      	asrs	r5, r5, #1
 800c304:	429d      	cmp	r5, r3
 800c306:	bf38      	it	cc
 800c308:	461d      	movcc	r5, r3
 800c30a:	0553      	lsls	r3, r2, #21
 800c30c:	d527      	bpl.n	800c35e <__ssputs_r+0x8e>
 800c30e:	4629      	mov	r1, r5
 800c310:	f7ff ff52 	bl	800c1b8 <_malloc_r>
 800c314:	4606      	mov	r6, r0
 800c316:	b360      	cbz	r0, 800c372 <__ssputs_r+0xa2>
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	464a      	mov	r2, r9
 800c31c:	f7ff feab 	bl	800c076 <memcpy>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	6126      	str	r6, [r4, #16]
 800c32e:	6165      	str	r5, [r4, #20]
 800c330:	444e      	add	r6, r9
 800c332:	eba5 0509 	sub.w	r5, r5, r9
 800c336:	6026      	str	r6, [r4, #0]
 800c338:	60a5      	str	r5, [r4, #8]
 800c33a:	463e      	mov	r6, r7
 800c33c:	42be      	cmp	r6, r7
 800c33e:	d900      	bls.n	800c342 <__ssputs_r+0x72>
 800c340:	463e      	mov	r6, r7
 800c342:	6820      	ldr	r0, [r4, #0]
 800c344:	4632      	mov	r2, r6
 800c346:	4641      	mov	r1, r8
 800c348:	f000 fd3a 	bl	800cdc0 <memmove>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	1b9b      	subs	r3, r3, r6
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	4433      	add	r3, r6
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	2000      	movs	r0, #0
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35e:	462a      	mov	r2, r5
 800c360:	f000 fd5f 	bl	800ce22 <_realloc_r>
 800c364:	4606      	mov	r6, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	d1e0      	bne.n	800c32c <__ssputs_r+0x5c>
 800c36a:	6921      	ldr	r1, [r4, #16]
 800c36c:	4650      	mov	r0, sl
 800c36e:	f7ff feaf 	bl	800c0d0 <_free_r>
 800c372:	230c      	movs	r3, #12
 800c374:	f8ca 3000 	str.w	r3, [sl]
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e7e9      	b.n	800c35a <__ssputs_r+0x8a>
	...

0800c388 <_svfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	898b      	ldrh	r3, [r1, #12]
 800c390:	061b      	lsls	r3, r3, #24
 800c392:	b09d      	sub	sp, #116	@ 0x74
 800c394:	4607      	mov	r7, r0
 800c396:	460d      	mov	r5, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	d510      	bpl.n	800c3be <_svfiprintf_r+0x36>
 800c39c:	690b      	ldr	r3, [r1, #16]
 800c39e:	b973      	cbnz	r3, 800c3be <_svfiprintf_r+0x36>
 800c3a0:	2140      	movs	r1, #64	@ 0x40
 800c3a2:	f7ff ff09 	bl	800c1b8 <_malloc_r>
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	6128      	str	r0, [r5, #16]
 800c3aa:	b930      	cbnz	r0, 800c3ba <_svfiprintf_r+0x32>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	b01d      	add	sp, #116	@ 0x74
 800c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	2340      	movs	r3, #64	@ 0x40
 800c3bc:	616b      	str	r3, [r5, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3cc:	2330      	movs	r3, #48	@ 0x30
 800c3ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c56c <_svfiprintf_r+0x1e4>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3d6:	f04f 0901 	mov.w	r9, #1
 800c3da:	4623      	mov	r3, r4
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e2:	b10a      	cbz	r2, 800c3e8 <_svfiprintf_r+0x60>
 800c3e4:	2a25      	cmp	r2, #37	@ 0x25
 800c3e6:	d1f9      	bne.n	800c3dc <_svfiprintf_r+0x54>
 800c3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ec:	d00b      	beq.n	800c406 <_svfiprintf_r+0x7e>
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff6b 	bl	800c2d0 <__ssputs_r>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f000 80a7 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c402:	445a      	add	r2, fp
 800c404:	9209      	str	r2, [sp, #36]	@ 0x24
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 809f 	beq.w	800c54e <_svfiprintf_r+0x1c6>
 800c410:	2300      	movs	r3, #0
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41a:	f10a 0a01 	add.w	sl, sl, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c426:	931a      	str	r3, [sp, #104]	@ 0x68
 800c428:	4654      	mov	r4, sl
 800c42a:	2205      	movs	r2, #5
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	484e      	ldr	r0, [pc, #312]	@ (800c56c <_svfiprintf_r+0x1e4>)
 800c432:	f7f3 feed 	bl	8000210 <memchr>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	b9d8      	cbnz	r0, 800c472 <_svfiprintf_r+0xea>
 800c43a:	06d0      	lsls	r0, r2, #27
 800c43c:	bf44      	itt	mi
 800c43e:	2320      	movmi	r3, #32
 800c440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c444:	0711      	lsls	r1, r2, #28
 800c446:	bf44      	itt	mi
 800c448:	232b      	movmi	r3, #43	@ 0x2b
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b2a      	cmp	r3, #42	@ 0x2a
 800c454:	d015      	beq.n	800c482 <_svfiprintf_r+0xfa>
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	4654      	mov	r4, sl
 800c45a:	2000      	movs	r0, #0
 800c45c:	f04f 0c0a 	mov.w	ip, #10
 800c460:	4621      	mov	r1, r4
 800c462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c466:	3b30      	subs	r3, #48	@ 0x30
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d94b      	bls.n	800c504 <_svfiprintf_r+0x17c>
 800c46c:	b1b0      	cbz	r0, 800c49c <_svfiprintf_r+0x114>
 800c46e:	9207      	str	r2, [sp, #28]
 800c470:	e014      	b.n	800c49c <_svfiprintf_r+0x114>
 800c472:	eba0 0308 	sub.w	r3, r0, r8
 800c476:	fa09 f303 	lsl.w	r3, r9, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	46a2      	mov	sl, r4
 800c480:	e7d2      	b.n	800c428 <_svfiprintf_r+0xa0>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbb      	ittet	lt
 800c48e:	425b      	neglt	r3, r3
 800c490:	f042 0202 	orrlt.w	r2, r2, #2
 800c494:	9307      	strge	r3, [sp, #28]
 800c496:	9307      	strlt	r3, [sp, #28]
 800c498:	bfb8      	it	lt
 800c49a:	9204      	strlt	r2, [sp, #16]
 800c49c:	7823      	ldrb	r3, [r4, #0]
 800c49e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4a0:	d10a      	bne.n	800c4b8 <_svfiprintf_r+0x130>
 800c4a2:	7863      	ldrb	r3, [r4, #1]
 800c4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a6:	d132      	bne.n	800c50e <_svfiprintf_r+0x186>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	9203      	str	r2, [sp, #12]
 800c4b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4b4:	3402      	adds	r4, #2
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c57c <_svfiprintf_r+0x1f4>
 800c4bc:	7821      	ldrb	r1, [r4, #0]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f7f3 fea5 	bl	8000210 <memchr>
 800c4c6:	b138      	cbz	r0, 800c4d8 <_svfiprintf_r+0x150>
 800c4c8:	9b04      	ldr	r3, [sp, #16]
 800c4ca:	eba0 000a 	sub.w	r0, r0, sl
 800c4ce:	2240      	movs	r2, #64	@ 0x40
 800c4d0:	4082      	lsls	r2, r0
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	9304      	str	r3, [sp, #16]
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	4824      	ldr	r0, [pc, #144]	@ (800c570 <_svfiprintf_r+0x1e8>)
 800c4de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4e2:	2206      	movs	r2, #6
 800c4e4:	f7f3 fe94 	bl	8000210 <memchr>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d036      	beq.n	800c55a <_svfiprintf_r+0x1d2>
 800c4ec:	4b21      	ldr	r3, [pc, #132]	@ (800c574 <_svfiprintf_r+0x1ec>)
 800c4ee:	bb1b      	cbnz	r3, 800c538 <_svfiprintf_r+0x1b0>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	3307      	adds	r3, #7
 800c4f4:	f023 0307 	bic.w	r3, r3, #7
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	4433      	add	r3, r6
 800c500:	9309      	str	r3, [sp, #36]	@ 0x24
 800c502:	e76a      	b.n	800c3da <_svfiprintf_r+0x52>
 800c504:	fb0c 3202 	mla	r2, ip, r2, r3
 800c508:	460c      	mov	r4, r1
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7a8      	b.n	800c460 <_svfiprintf_r+0xd8>
 800c50e:	2300      	movs	r3, #0
 800c510:	3401      	adds	r4, #1
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	4619      	mov	r1, r3
 800c516:	f04f 0c0a 	mov.w	ip, #10
 800c51a:	4620      	mov	r0, r4
 800c51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c520:	3a30      	subs	r2, #48	@ 0x30
 800c522:	2a09      	cmp	r2, #9
 800c524:	d903      	bls.n	800c52e <_svfiprintf_r+0x1a6>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0c6      	beq.n	800c4b8 <_svfiprintf_r+0x130>
 800c52a:	9105      	str	r1, [sp, #20]
 800c52c:	e7c4      	b.n	800c4b8 <_svfiprintf_r+0x130>
 800c52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c532:	4604      	mov	r4, r0
 800c534:	2301      	movs	r3, #1
 800c536:	e7f0      	b.n	800c51a <_svfiprintf_r+0x192>
 800c538:	ab03      	add	r3, sp, #12
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	462a      	mov	r2, r5
 800c53e:	4b0e      	ldr	r3, [pc, #56]	@ (800c578 <_svfiprintf_r+0x1f0>)
 800c540:	a904      	add	r1, sp, #16
 800c542:	4638      	mov	r0, r7
 800c544:	f3af 8000 	nop.w
 800c548:	1c42      	adds	r2, r0, #1
 800c54a:	4606      	mov	r6, r0
 800c54c:	d1d6      	bne.n	800c4fc <_svfiprintf_r+0x174>
 800c54e:	89ab      	ldrh	r3, [r5, #12]
 800c550:	065b      	lsls	r3, r3, #25
 800c552:	f53f af2d 	bmi.w	800c3b0 <_svfiprintf_r+0x28>
 800c556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c558:	e72c      	b.n	800c3b4 <_svfiprintf_r+0x2c>
 800c55a:	ab03      	add	r3, sp, #12
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	462a      	mov	r2, r5
 800c560:	4b05      	ldr	r3, [pc, #20]	@ (800c578 <_svfiprintf_r+0x1f0>)
 800c562:	a904      	add	r1, sp, #16
 800c564:	4638      	mov	r0, r7
 800c566:	f000 f9bb 	bl	800c8e0 <_printf_i>
 800c56a:	e7ed      	b.n	800c548 <_svfiprintf_r+0x1c0>
 800c56c:	0800e102 	.word	0x0800e102
 800c570:	0800e10c 	.word	0x0800e10c
 800c574:	00000000 	.word	0x00000000
 800c578:	0800c2d1 	.word	0x0800c2d1
 800c57c:	0800e108 	.word	0x0800e108

0800c580 <__sfputc_r>:
 800c580:	6893      	ldr	r3, [r2, #8]
 800c582:	3b01      	subs	r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	b410      	push	{r4}
 800c588:	6093      	str	r3, [r2, #8]
 800c58a:	da08      	bge.n	800c59e <__sfputc_r+0x1e>
 800c58c:	6994      	ldr	r4, [r2, #24]
 800c58e:	42a3      	cmp	r3, r4
 800c590:	db01      	blt.n	800c596 <__sfputc_r+0x16>
 800c592:	290a      	cmp	r1, #10
 800c594:	d103      	bne.n	800c59e <__sfputc_r+0x1e>
 800c596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c59a:	f000 bb7d 	b.w	800cc98 <__swbuf_r>
 800c59e:	6813      	ldr	r3, [r2, #0]
 800c5a0:	1c58      	adds	r0, r3, #1
 800c5a2:	6010      	str	r0, [r2, #0]
 800c5a4:	7019      	strb	r1, [r3, #0]
 800c5a6:	4608      	mov	r0, r1
 800c5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <__sfputs_r>:
 800c5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b0:	4606      	mov	r6, r0
 800c5b2:	460f      	mov	r7, r1
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	18d5      	adds	r5, r2, r3
 800c5b8:	42ac      	cmp	r4, r5
 800c5ba:	d101      	bne.n	800c5c0 <__sfputs_r+0x12>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e007      	b.n	800c5d0 <__sfputs_r+0x22>
 800c5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c4:	463a      	mov	r2, r7
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7ff ffda 	bl	800c580 <__sfputc_r>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d1f3      	bne.n	800c5b8 <__sfputs_r+0xa>
 800c5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5d4 <_vfiprintf_r>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	460d      	mov	r5, r1
 800c5da:	b09d      	sub	sp, #116	@ 0x74
 800c5dc:	4614      	mov	r4, r2
 800c5de:	4698      	mov	r8, r3
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	b118      	cbz	r0, 800c5ec <_vfiprintf_r+0x18>
 800c5e4:	6a03      	ldr	r3, [r0, #32]
 800c5e6:	b90b      	cbnz	r3, 800c5ec <_vfiprintf_r+0x18>
 800c5e8:	f7ff fb9c 	bl	800bd24 <__sinit>
 800c5ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	d405      	bmi.n	800c5fe <_vfiprintf_r+0x2a>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	059a      	lsls	r2, r3, #22
 800c5f6:	d402      	bmi.n	800c5fe <_vfiprintf_r+0x2a>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5fa:	f7ff fd3a 	bl	800c072 <__retarget_lock_acquire_recursive>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	071b      	lsls	r3, r3, #28
 800c602:	d501      	bpl.n	800c608 <_vfiprintf_r+0x34>
 800c604:	692b      	ldr	r3, [r5, #16]
 800c606:	b99b      	cbnz	r3, 800c630 <_vfiprintf_r+0x5c>
 800c608:	4629      	mov	r1, r5
 800c60a:	4630      	mov	r0, r6
 800c60c:	f000 fb82 	bl	800cd14 <__swsetup_r>
 800c610:	b170      	cbz	r0, 800c630 <_vfiprintf_r+0x5c>
 800c612:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c614:	07dc      	lsls	r4, r3, #31
 800c616:	d504      	bpl.n	800c622 <_vfiprintf_r+0x4e>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	b01d      	add	sp, #116	@ 0x74
 800c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	0598      	lsls	r0, r3, #22
 800c626:	d4f7      	bmi.n	800c618 <_vfiprintf_r+0x44>
 800c628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62a:	f7ff fd23 	bl	800c074 <__retarget_lock_release_recursive>
 800c62e:	e7f3      	b.n	800c618 <_vfiprintf_r+0x44>
 800c630:	2300      	movs	r3, #0
 800c632:	9309      	str	r3, [sp, #36]	@ 0x24
 800c634:	2320      	movs	r3, #32
 800c636:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c63a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63e:	2330      	movs	r3, #48	@ 0x30
 800c640:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7f0 <_vfiprintf_r+0x21c>
 800c644:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c648:	f04f 0901 	mov.w	r9, #1
 800c64c:	4623      	mov	r3, r4
 800c64e:	469a      	mov	sl, r3
 800c650:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c654:	b10a      	cbz	r2, 800c65a <_vfiprintf_r+0x86>
 800c656:	2a25      	cmp	r2, #37	@ 0x25
 800c658:	d1f9      	bne.n	800c64e <_vfiprintf_r+0x7a>
 800c65a:	ebba 0b04 	subs.w	fp, sl, r4
 800c65e:	d00b      	beq.n	800c678 <_vfiprintf_r+0xa4>
 800c660:	465b      	mov	r3, fp
 800c662:	4622      	mov	r2, r4
 800c664:	4629      	mov	r1, r5
 800c666:	4630      	mov	r0, r6
 800c668:	f7ff ffa1 	bl	800c5ae <__sfputs_r>
 800c66c:	3001      	adds	r0, #1
 800c66e:	f000 80a7 	beq.w	800c7c0 <_vfiprintf_r+0x1ec>
 800c672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c674:	445a      	add	r2, fp
 800c676:	9209      	str	r2, [sp, #36]	@ 0x24
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 809f 	beq.w	800c7c0 <_vfiprintf_r+0x1ec>
 800c682:	2300      	movs	r3, #0
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c68c:	f10a 0a01 	add.w	sl, sl, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	9307      	str	r3, [sp, #28]
 800c694:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c698:	931a      	str	r3, [sp, #104]	@ 0x68
 800c69a:	4654      	mov	r4, sl
 800c69c:	2205      	movs	r2, #5
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	4853      	ldr	r0, [pc, #332]	@ (800c7f0 <_vfiprintf_r+0x21c>)
 800c6a4:	f7f3 fdb4 	bl	8000210 <memchr>
 800c6a8:	9a04      	ldr	r2, [sp, #16]
 800c6aa:	b9d8      	cbnz	r0, 800c6e4 <_vfiprintf_r+0x110>
 800c6ac:	06d1      	lsls	r1, r2, #27
 800c6ae:	bf44      	itt	mi
 800c6b0:	2320      	movmi	r3, #32
 800c6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b6:	0713      	lsls	r3, r2, #28
 800c6b8:	bf44      	itt	mi
 800c6ba:	232b      	movmi	r3, #43	@ 0x2b
 800c6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c6:	d015      	beq.n	800c6f4 <_vfiprintf_r+0x120>
 800c6c8:	9a07      	ldr	r2, [sp, #28]
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f04f 0c0a 	mov.w	ip, #10
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d8:	3b30      	subs	r3, #48	@ 0x30
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	d94b      	bls.n	800c776 <_vfiprintf_r+0x1a2>
 800c6de:	b1b0      	cbz	r0, 800c70e <_vfiprintf_r+0x13a>
 800c6e0:	9207      	str	r2, [sp, #28]
 800c6e2:	e014      	b.n	800c70e <_vfiprintf_r+0x13a>
 800c6e4:	eba0 0308 	sub.w	r3, r0, r8
 800c6e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	9304      	str	r3, [sp, #16]
 800c6f0:	46a2      	mov	sl, r4
 800c6f2:	e7d2      	b.n	800c69a <_vfiprintf_r+0xc6>
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	1d19      	adds	r1, r3, #4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	9103      	str	r1, [sp, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bfbb      	ittet	lt
 800c700:	425b      	neglt	r3, r3
 800c702:	f042 0202 	orrlt.w	r2, r2, #2
 800c706:	9307      	strge	r3, [sp, #28]
 800c708:	9307      	strlt	r3, [sp, #28]
 800c70a:	bfb8      	it	lt
 800c70c:	9204      	strlt	r2, [sp, #16]
 800c70e:	7823      	ldrb	r3, [r4, #0]
 800c710:	2b2e      	cmp	r3, #46	@ 0x2e
 800c712:	d10a      	bne.n	800c72a <_vfiprintf_r+0x156>
 800c714:	7863      	ldrb	r3, [r4, #1]
 800c716:	2b2a      	cmp	r3, #42	@ 0x2a
 800c718:	d132      	bne.n	800c780 <_vfiprintf_r+0x1ac>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9203      	str	r2, [sp, #12]
 800c722:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c726:	3402      	adds	r4, #2
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c800 <_vfiprintf_r+0x22c>
 800c72e:	7821      	ldrb	r1, [r4, #0]
 800c730:	2203      	movs	r2, #3
 800c732:	4650      	mov	r0, sl
 800c734:	f7f3 fd6c 	bl	8000210 <memchr>
 800c738:	b138      	cbz	r0, 800c74a <_vfiprintf_r+0x176>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	eba0 000a 	sub.w	r0, r0, sl
 800c740:	2240      	movs	r2, #64	@ 0x40
 800c742:	4082      	lsls	r2, r0
 800c744:	4313      	orrs	r3, r2
 800c746:	3401      	adds	r4, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4829      	ldr	r0, [pc, #164]	@ (800c7f4 <_vfiprintf_r+0x220>)
 800c750:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c754:	2206      	movs	r2, #6
 800c756:	f7f3 fd5b 	bl	8000210 <memchr>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d03f      	beq.n	800c7de <_vfiprintf_r+0x20a>
 800c75e:	4b26      	ldr	r3, [pc, #152]	@ (800c7f8 <_vfiprintf_r+0x224>)
 800c760:	bb1b      	cbnz	r3, 800c7aa <_vfiprintf_r+0x1d6>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	3307      	adds	r3, #7
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	3308      	adds	r3, #8
 800c76c:	9303      	str	r3, [sp, #12]
 800c76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c770:	443b      	add	r3, r7
 800c772:	9309      	str	r3, [sp, #36]	@ 0x24
 800c774:	e76a      	b.n	800c64c <_vfiprintf_r+0x78>
 800c776:	fb0c 3202 	mla	r2, ip, r2, r3
 800c77a:	460c      	mov	r4, r1
 800c77c:	2001      	movs	r0, #1
 800c77e:	e7a8      	b.n	800c6d2 <_vfiprintf_r+0xfe>
 800c780:	2300      	movs	r3, #0
 800c782:	3401      	adds	r4, #1
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	4619      	mov	r1, r3
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4620      	mov	r0, r4
 800c78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c792:	3a30      	subs	r2, #48	@ 0x30
 800c794:	2a09      	cmp	r2, #9
 800c796:	d903      	bls.n	800c7a0 <_vfiprintf_r+0x1cc>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0c6      	beq.n	800c72a <_vfiprintf_r+0x156>
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	e7c4      	b.n	800c72a <_vfiprintf_r+0x156>
 800c7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e7f0      	b.n	800c78c <_vfiprintf_r+0x1b8>
 800c7aa:	ab03      	add	r3, sp, #12
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4b12      	ldr	r3, [pc, #72]	@ (800c7fc <_vfiprintf_r+0x228>)
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f3af 8000 	nop.w
 800c7ba:	4607      	mov	r7, r0
 800c7bc:	1c78      	adds	r0, r7, #1
 800c7be:	d1d6      	bne.n	800c76e <_vfiprintf_r+0x19a>
 800c7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7c2:	07d9      	lsls	r1, r3, #31
 800c7c4:	d405      	bmi.n	800c7d2 <_vfiprintf_r+0x1fe>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d402      	bmi.n	800c7d2 <_vfiprintf_r+0x1fe>
 800c7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ce:	f7ff fc51 	bl	800c074 <__retarget_lock_release_recursive>
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	065b      	lsls	r3, r3, #25
 800c7d6:	f53f af1f 	bmi.w	800c618 <_vfiprintf_r+0x44>
 800c7da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7dc:	e71e      	b.n	800c61c <_vfiprintf_r+0x48>
 800c7de:	ab03      	add	r3, sp, #12
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <_vfiprintf_r+0x228>)
 800c7e6:	a904      	add	r1, sp, #16
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 f879 	bl	800c8e0 <_printf_i>
 800c7ee:	e7e4      	b.n	800c7ba <_vfiprintf_r+0x1e6>
 800c7f0:	0800e102 	.word	0x0800e102
 800c7f4:	0800e10c 	.word	0x0800e10c
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	0800c5af 	.word	0x0800c5af
 800c800:	0800e108 	.word	0x0800e108

0800c804 <_printf_common>:
 800c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c808:	4616      	mov	r6, r2
 800c80a:	4698      	mov	r8, r3
 800c80c:	688a      	ldr	r2, [r1, #8]
 800c80e:	690b      	ldr	r3, [r1, #16]
 800c810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c814:	4293      	cmp	r3, r2
 800c816:	bfb8      	it	lt
 800c818:	4613      	movlt	r3, r2
 800c81a:	6033      	str	r3, [r6, #0]
 800c81c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c820:	4607      	mov	r7, r0
 800c822:	460c      	mov	r4, r1
 800c824:	b10a      	cbz	r2, 800c82a <_printf_common+0x26>
 800c826:	3301      	adds	r3, #1
 800c828:	6033      	str	r3, [r6, #0]
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	0699      	lsls	r1, r3, #26
 800c82e:	bf42      	ittt	mi
 800c830:	6833      	ldrmi	r3, [r6, #0]
 800c832:	3302      	addmi	r3, #2
 800c834:	6033      	strmi	r3, [r6, #0]
 800c836:	6825      	ldr	r5, [r4, #0]
 800c838:	f015 0506 	ands.w	r5, r5, #6
 800c83c:	d106      	bne.n	800c84c <_printf_common+0x48>
 800c83e:	f104 0a19 	add.w	sl, r4, #25
 800c842:	68e3      	ldr	r3, [r4, #12]
 800c844:	6832      	ldr	r2, [r6, #0]
 800c846:	1a9b      	subs	r3, r3, r2
 800c848:	42ab      	cmp	r3, r5
 800c84a:	dc26      	bgt.n	800c89a <_printf_common+0x96>
 800c84c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c850:	6822      	ldr	r2, [r4, #0]
 800c852:	3b00      	subs	r3, #0
 800c854:	bf18      	it	ne
 800c856:	2301      	movne	r3, #1
 800c858:	0692      	lsls	r2, r2, #26
 800c85a:	d42b      	bmi.n	800c8b4 <_printf_common+0xb0>
 800c85c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c860:	4641      	mov	r1, r8
 800c862:	4638      	mov	r0, r7
 800c864:	47c8      	blx	r9
 800c866:	3001      	adds	r0, #1
 800c868:	d01e      	beq.n	800c8a8 <_printf_common+0xa4>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	6922      	ldr	r2, [r4, #16]
 800c86e:	f003 0306 	and.w	r3, r3, #6
 800c872:	2b04      	cmp	r3, #4
 800c874:	bf02      	ittt	eq
 800c876:	68e5      	ldreq	r5, [r4, #12]
 800c878:	6833      	ldreq	r3, [r6, #0]
 800c87a:	1aed      	subeq	r5, r5, r3
 800c87c:	68a3      	ldr	r3, [r4, #8]
 800c87e:	bf0c      	ite	eq
 800c880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c884:	2500      	movne	r5, #0
 800c886:	4293      	cmp	r3, r2
 800c888:	bfc4      	itt	gt
 800c88a:	1a9b      	subgt	r3, r3, r2
 800c88c:	18ed      	addgt	r5, r5, r3
 800c88e:	2600      	movs	r6, #0
 800c890:	341a      	adds	r4, #26
 800c892:	42b5      	cmp	r5, r6
 800c894:	d11a      	bne.n	800c8cc <_printf_common+0xc8>
 800c896:	2000      	movs	r0, #0
 800c898:	e008      	b.n	800c8ac <_printf_common+0xa8>
 800c89a:	2301      	movs	r3, #1
 800c89c:	4652      	mov	r2, sl
 800c89e:	4641      	mov	r1, r8
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	47c8      	blx	r9
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d103      	bne.n	800c8b0 <_printf_common+0xac>
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b0:	3501      	adds	r5, #1
 800c8b2:	e7c6      	b.n	800c842 <_printf_common+0x3e>
 800c8b4:	18e1      	adds	r1, r4, r3
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	2030      	movs	r0, #48	@ 0x30
 800c8ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8be:	4422      	add	r2, r4
 800c8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8c8:	3302      	adds	r3, #2
 800c8ca:	e7c7      	b.n	800c85c <_printf_common+0x58>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	4641      	mov	r1, r8
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	47c8      	blx	r9
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d0e6      	beq.n	800c8a8 <_printf_common+0xa4>
 800c8da:	3601      	adds	r6, #1
 800c8dc:	e7d9      	b.n	800c892 <_printf_common+0x8e>
	...

0800c8e0 <_printf_i>:
 800c8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e4:	7e0f      	ldrb	r7, [r1, #24]
 800c8e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8e8:	2f78      	cmp	r7, #120	@ 0x78
 800c8ea:	4691      	mov	r9, r2
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	469a      	mov	sl, r3
 800c8f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8f6:	d807      	bhi.n	800c908 <_printf_i+0x28>
 800c8f8:	2f62      	cmp	r7, #98	@ 0x62
 800c8fa:	d80a      	bhi.n	800c912 <_printf_i+0x32>
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	f000 80d1 	beq.w	800caa4 <_printf_i+0x1c4>
 800c902:	2f58      	cmp	r7, #88	@ 0x58
 800c904:	f000 80b8 	beq.w	800ca78 <_printf_i+0x198>
 800c908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c90c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c910:	e03a      	b.n	800c988 <_printf_i+0xa8>
 800c912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c916:	2b15      	cmp	r3, #21
 800c918:	d8f6      	bhi.n	800c908 <_printf_i+0x28>
 800c91a:	a101      	add	r1, pc, #4	@ (adr r1, 800c920 <_printf_i+0x40>)
 800c91c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c920:	0800c979 	.word	0x0800c979
 800c924:	0800c98d 	.word	0x0800c98d
 800c928:	0800c909 	.word	0x0800c909
 800c92c:	0800c909 	.word	0x0800c909
 800c930:	0800c909 	.word	0x0800c909
 800c934:	0800c909 	.word	0x0800c909
 800c938:	0800c98d 	.word	0x0800c98d
 800c93c:	0800c909 	.word	0x0800c909
 800c940:	0800c909 	.word	0x0800c909
 800c944:	0800c909 	.word	0x0800c909
 800c948:	0800c909 	.word	0x0800c909
 800c94c:	0800ca8b 	.word	0x0800ca8b
 800c950:	0800c9b7 	.word	0x0800c9b7
 800c954:	0800ca45 	.word	0x0800ca45
 800c958:	0800c909 	.word	0x0800c909
 800c95c:	0800c909 	.word	0x0800c909
 800c960:	0800caad 	.word	0x0800caad
 800c964:	0800c909 	.word	0x0800c909
 800c968:	0800c9b7 	.word	0x0800c9b7
 800c96c:	0800c909 	.word	0x0800c909
 800c970:	0800c909 	.word	0x0800c909
 800c974:	0800ca4d 	.word	0x0800ca4d
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6032      	str	r2, [r6, #0]
 800c980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c988:	2301      	movs	r3, #1
 800c98a:	e09c      	b.n	800cac6 <_printf_i+0x1e6>
 800c98c:	6833      	ldr	r3, [r6, #0]
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	1d19      	adds	r1, r3, #4
 800c992:	6031      	str	r1, [r6, #0]
 800c994:	0606      	lsls	r6, r0, #24
 800c996:	d501      	bpl.n	800c99c <_printf_i+0xbc>
 800c998:	681d      	ldr	r5, [r3, #0]
 800c99a:	e003      	b.n	800c9a4 <_printf_i+0xc4>
 800c99c:	0645      	lsls	r5, r0, #25
 800c99e:	d5fb      	bpl.n	800c998 <_printf_i+0xb8>
 800c9a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	da03      	bge.n	800c9b0 <_printf_i+0xd0>
 800c9a8:	232d      	movs	r3, #45	@ 0x2d
 800c9aa:	426d      	negs	r5, r5
 800c9ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9b0:	4858      	ldr	r0, [pc, #352]	@ (800cb14 <_printf_i+0x234>)
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e011      	b.n	800c9da <_printf_i+0xfa>
 800c9b6:	6821      	ldr	r1, [r4, #0]
 800c9b8:	6833      	ldr	r3, [r6, #0]
 800c9ba:	0608      	lsls	r0, r1, #24
 800c9bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9c0:	d402      	bmi.n	800c9c8 <_printf_i+0xe8>
 800c9c2:	0649      	lsls	r1, r1, #25
 800c9c4:	bf48      	it	mi
 800c9c6:	b2ad      	uxthmi	r5, r5
 800c9c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9ca:	4852      	ldr	r0, [pc, #328]	@ (800cb14 <_printf_i+0x234>)
 800c9cc:	6033      	str	r3, [r6, #0]
 800c9ce:	bf14      	ite	ne
 800c9d0:	230a      	movne	r3, #10
 800c9d2:	2308      	moveq	r3, #8
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9da:	6866      	ldr	r6, [r4, #4]
 800c9dc:	60a6      	str	r6, [r4, #8]
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	db05      	blt.n	800c9ee <_printf_i+0x10e>
 800c9e2:	6821      	ldr	r1, [r4, #0]
 800c9e4:	432e      	orrs	r6, r5
 800c9e6:	f021 0104 	bic.w	r1, r1, #4
 800c9ea:	6021      	str	r1, [r4, #0]
 800c9ec:	d04b      	beq.n	800ca86 <_printf_i+0x1a6>
 800c9ee:	4616      	mov	r6, r2
 800c9f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9f4:	fb03 5711 	mls	r7, r3, r1, r5
 800c9f8:	5dc7      	ldrb	r7, [r0, r7]
 800c9fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9fe:	462f      	mov	r7, r5
 800ca00:	42bb      	cmp	r3, r7
 800ca02:	460d      	mov	r5, r1
 800ca04:	d9f4      	bls.n	800c9f0 <_printf_i+0x110>
 800ca06:	2b08      	cmp	r3, #8
 800ca08:	d10b      	bne.n	800ca22 <_printf_i+0x142>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	07df      	lsls	r7, r3, #31
 800ca0e:	d508      	bpl.n	800ca22 <_printf_i+0x142>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	6861      	ldr	r1, [r4, #4]
 800ca14:	4299      	cmp	r1, r3
 800ca16:	bfde      	ittt	le
 800ca18:	2330      	movle	r3, #48	@ 0x30
 800ca1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca22:	1b92      	subs	r2, r2, r6
 800ca24:	6122      	str	r2, [r4, #16]
 800ca26:	f8cd a000 	str.w	sl, [sp]
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	aa03      	add	r2, sp, #12
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4640      	mov	r0, r8
 800ca32:	f7ff fee7 	bl	800c804 <_printf_common>
 800ca36:	3001      	adds	r0, #1
 800ca38:	d14a      	bne.n	800cad0 <_printf_i+0x1f0>
 800ca3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3e:	b004      	add	sp, #16
 800ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	f043 0320 	orr.w	r3, r3, #32
 800ca4a:	6023      	str	r3, [r4, #0]
 800ca4c:	4832      	ldr	r0, [pc, #200]	@ (800cb18 <_printf_i+0x238>)
 800ca4e:	2778      	movs	r7, #120	@ 0x78
 800ca50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	6831      	ldr	r1, [r6, #0]
 800ca58:	061f      	lsls	r7, r3, #24
 800ca5a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca5e:	d402      	bmi.n	800ca66 <_printf_i+0x186>
 800ca60:	065f      	lsls	r7, r3, #25
 800ca62:	bf48      	it	mi
 800ca64:	b2ad      	uxthmi	r5, r5
 800ca66:	6031      	str	r1, [r6, #0]
 800ca68:	07d9      	lsls	r1, r3, #31
 800ca6a:	bf44      	itt	mi
 800ca6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ca70:	6023      	strmi	r3, [r4, #0]
 800ca72:	b11d      	cbz	r5, 800ca7c <_printf_i+0x19c>
 800ca74:	2310      	movs	r3, #16
 800ca76:	e7ad      	b.n	800c9d4 <_printf_i+0xf4>
 800ca78:	4826      	ldr	r0, [pc, #152]	@ (800cb14 <_printf_i+0x234>)
 800ca7a:	e7e9      	b.n	800ca50 <_printf_i+0x170>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	f023 0320 	bic.w	r3, r3, #32
 800ca82:	6023      	str	r3, [r4, #0]
 800ca84:	e7f6      	b.n	800ca74 <_printf_i+0x194>
 800ca86:	4616      	mov	r6, r2
 800ca88:	e7bd      	b.n	800ca06 <_printf_i+0x126>
 800ca8a:	6833      	ldr	r3, [r6, #0]
 800ca8c:	6825      	ldr	r5, [r4, #0]
 800ca8e:	6961      	ldr	r1, [r4, #20]
 800ca90:	1d18      	adds	r0, r3, #4
 800ca92:	6030      	str	r0, [r6, #0]
 800ca94:	062e      	lsls	r6, r5, #24
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	d501      	bpl.n	800ca9e <_printf_i+0x1be>
 800ca9a:	6019      	str	r1, [r3, #0]
 800ca9c:	e002      	b.n	800caa4 <_printf_i+0x1c4>
 800ca9e:	0668      	lsls	r0, r5, #25
 800caa0:	d5fb      	bpl.n	800ca9a <_printf_i+0x1ba>
 800caa2:	8019      	strh	r1, [r3, #0]
 800caa4:	2300      	movs	r3, #0
 800caa6:	6123      	str	r3, [r4, #16]
 800caa8:	4616      	mov	r6, r2
 800caaa:	e7bc      	b.n	800ca26 <_printf_i+0x146>
 800caac:	6833      	ldr	r3, [r6, #0]
 800caae:	1d1a      	adds	r2, r3, #4
 800cab0:	6032      	str	r2, [r6, #0]
 800cab2:	681e      	ldr	r6, [r3, #0]
 800cab4:	6862      	ldr	r2, [r4, #4]
 800cab6:	2100      	movs	r1, #0
 800cab8:	4630      	mov	r0, r6
 800caba:	f7f3 fba9 	bl	8000210 <memchr>
 800cabe:	b108      	cbz	r0, 800cac4 <_printf_i+0x1e4>
 800cac0:	1b80      	subs	r0, r0, r6
 800cac2:	6060      	str	r0, [r4, #4]
 800cac4:	6863      	ldr	r3, [r4, #4]
 800cac6:	6123      	str	r3, [r4, #16]
 800cac8:	2300      	movs	r3, #0
 800caca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cace:	e7aa      	b.n	800ca26 <_printf_i+0x146>
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	4632      	mov	r2, r6
 800cad4:	4649      	mov	r1, r9
 800cad6:	4640      	mov	r0, r8
 800cad8:	47d0      	blx	sl
 800cada:	3001      	adds	r0, #1
 800cadc:	d0ad      	beq.n	800ca3a <_printf_i+0x15a>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	079b      	lsls	r3, r3, #30
 800cae2:	d413      	bmi.n	800cb0c <_printf_i+0x22c>
 800cae4:	68e0      	ldr	r0, [r4, #12]
 800cae6:	9b03      	ldr	r3, [sp, #12]
 800cae8:	4298      	cmp	r0, r3
 800caea:	bfb8      	it	lt
 800caec:	4618      	movlt	r0, r3
 800caee:	e7a6      	b.n	800ca3e <_printf_i+0x15e>
 800caf0:	2301      	movs	r3, #1
 800caf2:	4632      	mov	r2, r6
 800caf4:	4649      	mov	r1, r9
 800caf6:	4640      	mov	r0, r8
 800caf8:	47d0      	blx	sl
 800cafa:	3001      	adds	r0, #1
 800cafc:	d09d      	beq.n	800ca3a <_printf_i+0x15a>
 800cafe:	3501      	adds	r5, #1
 800cb00:	68e3      	ldr	r3, [r4, #12]
 800cb02:	9903      	ldr	r1, [sp, #12]
 800cb04:	1a5b      	subs	r3, r3, r1
 800cb06:	42ab      	cmp	r3, r5
 800cb08:	dcf2      	bgt.n	800caf0 <_printf_i+0x210>
 800cb0a:	e7eb      	b.n	800cae4 <_printf_i+0x204>
 800cb0c:	2500      	movs	r5, #0
 800cb0e:	f104 0619 	add.w	r6, r4, #25
 800cb12:	e7f5      	b.n	800cb00 <_printf_i+0x220>
 800cb14:	0800e113 	.word	0x0800e113
 800cb18:	0800e124 	.word	0x0800e124

0800cb1c <__sflush_r>:
 800cb1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb24:	0716      	lsls	r6, r2, #28
 800cb26:	4605      	mov	r5, r0
 800cb28:	460c      	mov	r4, r1
 800cb2a:	d454      	bmi.n	800cbd6 <__sflush_r+0xba>
 800cb2c:	684b      	ldr	r3, [r1, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dc02      	bgt.n	800cb38 <__sflush_r+0x1c>
 800cb32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dd48      	ble.n	800cbca <__sflush_r+0xae>
 800cb38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d045      	beq.n	800cbca <__sflush_r+0xae>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb44:	682f      	ldr	r7, [r5, #0]
 800cb46:	6a21      	ldr	r1, [r4, #32]
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	d030      	beq.n	800cbae <__sflush_r+0x92>
 800cb4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	0759      	lsls	r1, r3, #29
 800cb52:	d505      	bpl.n	800cb60 <__sflush_r+0x44>
 800cb54:	6863      	ldr	r3, [r4, #4]
 800cb56:	1ad2      	subs	r2, r2, r3
 800cb58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb5a:	b10b      	cbz	r3, 800cb60 <__sflush_r+0x44>
 800cb5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb5e:	1ad2      	subs	r2, r2, r3
 800cb60:	2300      	movs	r3, #0
 800cb62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb64:	6a21      	ldr	r1, [r4, #32]
 800cb66:	4628      	mov	r0, r5
 800cb68:	47b0      	blx	r6
 800cb6a:	1c43      	adds	r3, r0, #1
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	d106      	bne.n	800cb7e <__sflush_r+0x62>
 800cb70:	6829      	ldr	r1, [r5, #0]
 800cb72:	291d      	cmp	r1, #29
 800cb74:	d82b      	bhi.n	800cbce <__sflush_r+0xb2>
 800cb76:	4a2a      	ldr	r2, [pc, #168]	@ (800cc20 <__sflush_r+0x104>)
 800cb78:	40ca      	lsrs	r2, r1
 800cb7a:	07d6      	lsls	r6, r2, #31
 800cb7c:	d527      	bpl.n	800cbce <__sflush_r+0xb2>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	6062      	str	r2, [r4, #4]
 800cb82:	04d9      	lsls	r1, r3, #19
 800cb84:	6922      	ldr	r2, [r4, #16]
 800cb86:	6022      	str	r2, [r4, #0]
 800cb88:	d504      	bpl.n	800cb94 <__sflush_r+0x78>
 800cb8a:	1c42      	adds	r2, r0, #1
 800cb8c:	d101      	bne.n	800cb92 <__sflush_r+0x76>
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	b903      	cbnz	r3, 800cb94 <__sflush_r+0x78>
 800cb92:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb96:	602f      	str	r7, [r5, #0]
 800cb98:	b1b9      	cbz	r1, 800cbca <__sflush_r+0xae>
 800cb9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb9e:	4299      	cmp	r1, r3
 800cba0:	d002      	beq.n	800cba8 <__sflush_r+0x8c>
 800cba2:	4628      	mov	r0, r5
 800cba4:	f7ff fa94 	bl	800c0d0 <_free_r>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbac:	e00d      	b.n	800cbca <__sflush_r+0xae>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b0      	blx	r6
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	1c50      	adds	r0, r2, #1
 800cbb8:	d1c9      	bne.n	800cb4e <__sflush_r+0x32>
 800cbba:	682b      	ldr	r3, [r5, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0c6      	beq.n	800cb4e <__sflush_r+0x32>
 800cbc0:	2b1d      	cmp	r3, #29
 800cbc2:	d001      	beq.n	800cbc8 <__sflush_r+0xac>
 800cbc4:	2b16      	cmp	r3, #22
 800cbc6:	d11e      	bne.n	800cc06 <__sflush_r+0xea>
 800cbc8:	602f      	str	r7, [r5, #0]
 800cbca:	2000      	movs	r0, #0
 800cbcc:	e022      	b.n	800cc14 <__sflush_r+0xf8>
 800cbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	e01b      	b.n	800cc0e <__sflush_r+0xf2>
 800cbd6:	690f      	ldr	r7, [r1, #16]
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	d0f6      	beq.n	800cbca <__sflush_r+0xae>
 800cbdc:	0793      	lsls	r3, r2, #30
 800cbde:	680e      	ldr	r6, [r1, #0]
 800cbe0:	bf08      	it	eq
 800cbe2:	694b      	ldreq	r3, [r1, #20]
 800cbe4:	600f      	str	r7, [r1, #0]
 800cbe6:	bf18      	it	ne
 800cbe8:	2300      	movne	r3, #0
 800cbea:	eba6 0807 	sub.w	r8, r6, r7
 800cbee:	608b      	str	r3, [r1, #8]
 800cbf0:	f1b8 0f00 	cmp.w	r8, #0
 800cbf4:	dde9      	ble.n	800cbca <__sflush_r+0xae>
 800cbf6:	6a21      	ldr	r1, [r4, #32]
 800cbf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbfa:	4643      	mov	r3, r8
 800cbfc:	463a      	mov	r2, r7
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b0      	blx	r6
 800cc02:	2800      	cmp	r0, #0
 800cc04:	dc08      	bgt.n	800cc18 <__sflush_r+0xfc>
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	f04f 30ff 	mov.w	r0, #4294967295
 800cc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc18:	4407      	add	r7, r0
 800cc1a:	eba8 0800 	sub.w	r8, r8, r0
 800cc1e:	e7e7      	b.n	800cbf0 <__sflush_r+0xd4>
 800cc20:	20400001 	.word	0x20400001

0800cc24 <_fflush_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	690b      	ldr	r3, [r1, #16]
 800cc28:	4605      	mov	r5, r0
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	b913      	cbnz	r3, 800cc34 <_fflush_r+0x10>
 800cc2e:	2500      	movs	r5, #0
 800cc30:	4628      	mov	r0, r5
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	b118      	cbz	r0, 800cc3e <_fflush_r+0x1a>
 800cc36:	6a03      	ldr	r3, [r0, #32]
 800cc38:	b90b      	cbnz	r3, 800cc3e <_fflush_r+0x1a>
 800cc3a:	f7ff f873 	bl	800bd24 <__sinit>
 800cc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0f3      	beq.n	800cc2e <_fflush_r+0xa>
 800cc46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc48:	07d0      	lsls	r0, r2, #31
 800cc4a:	d404      	bmi.n	800cc56 <_fflush_r+0x32>
 800cc4c:	0599      	lsls	r1, r3, #22
 800cc4e:	d402      	bmi.n	800cc56 <_fflush_r+0x32>
 800cc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc52:	f7ff fa0e 	bl	800c072 <__retarget_lock_acquire_recursive>
 800cc56:	4628      	mov	r0, r5
 800cc58:	4621      	mov	r1, r4
 800cc5a:	f7ff ff5f 	bl	800cb1c <__sflush_r>
 800cc5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc60:	07da      	lsls	r2, r3, #31
 800cc62:	4605      	mov	r5, r0
 800cc64:	d4e4      	bmi.n	800cc30 <_fflush_r+0xc>
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	059b      	lsls	r3, r3, #22
 800cc6a:	d4e1      	bmi.n	800cc30 <_fflush_r+0xc>
 800cc6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc6e:	f7ff fa01 	bl	800c074 <__retarget_lock_release_recursive>
 800cc72:	e7dd      	b.n	800cc30 <_fflush_r+0xc>

0800cc74 <fiprintf>:
 800cc74:	b40e      	push	{r1, r2, r3}
 800cc76:	b503      	push	{r0, r1, lr}
 800cc78:	4601      	mov	r1, r0
 800cc7a:	ab03      	add	r3, sp, #12
 800cc7c:	4805      	ldr	r0, [pc, #20]	@ (800cc94 <fiprintf+0x20>)
 800cc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc82:	6800      	ldr	r0, [r0, #0]
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	f7ff fca5 	bl	800c5d4 <_vfiprintf_r>
 800cc8a:	b002      	add	sp, #8
 800cc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc90:	b003      	add	sp, #12
 800cc92:	4770      	bx	lr
 800cc94:	20000090 	.word	0x20000090

0800cc98 <__swbuf_r>:
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	460e      	mov	r6, r1
 800cc9c:	4614      	mov	r4, r2
 800cc9e:	4605      	mov	r5, r0
 800cca0:	b118      	cbz	r0, 800ccaa <__swbuf_r+0x12>
 800cca2:	6a03      	ldr	r3, [r0, #32]
 800cca4:	b90b      	cbnz	r3, 800ccaa <__swbuf_r+0x12>
 800cca6:	f7ff f83d 	bl	800bd24 <__sinit>
 800ccaa:	69a3      	ldr	r3, [r4, #24]
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	071a      	lsls	r2, r3, #28
 800ccb2:	d501      	bpl.n	800ccb8 <__swbuf_r+0x20>
 800ccb4:	6923      	ldr	r3, [r4, #16]
 800ccb6:	b943      	cbnz	r3, 800ccca <__swbuf_r+0x32>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f000 f82a 	bl	800cd14 <__swsetup_r>
 800ccc0:	b118      	cbz	r0, 800ccca <__swbuf_r+0x32>
 800ccc2:	f04f 37ff 	mov.w	r7, #4294967295
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	6922      	ldr	r2, [r4, #16]
 800ccce:	1a98      	subs	r0, r3, r2
 800ccd0:	6963      	ldr	r3, [r4, #20]
 800ccd2:	b2f6      	uxtb	r6, r6
 800ccd4:	4283      	cmp	r3, r0
 800ccd6:	4637      	mov	r7, r6
 800ccd8:	dc05      	bgt.n	800cce6 <__swbuf_r+0x4e>
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff ffa1 	bl	800cc24 <_fflush_r>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d1ed      	bne.n	800ccc2 <__swbuf_r+0x2a>
 800cce6:	68a3      	ldr	r3, [r4, #8]
 800cce8:	3b01      	subs	r3, #1
 800ccea:	60a3      	str	r3, [r4, #8]
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	1c5a      	adds	r2, r3, #1
 800ccf0:	6022      	str	r2, [r4, #0]
 800ccf2:	701e      	strb	r6, [r3, #0]
 800ccf4:	6962      	ldr	r2, [r4, #20]
 800ccf6:	1c43      	adds	r3, r0, #1
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d004      	beq.n	800cd06 <__swbuf_r+0x6e>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	07db      	lsls	r3, r3, #31
 800cd00:	d5e1      	bpl.n	800ccc6 <__swbuf_r+0x2e>
 800cd02:	2e0a      	cmp	r6, #10
 800cd04:	d1df      	bne.n	800ccc6 <__swbuf_r+0x2e>
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7ff ff8b 	bl	800cc24 <_fflush_r>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d0d9      	beq.n	800ccc6 <__swbuf_r+0x2e>
 800cd12:	e7d6      	b.n	800ccc2 <__swbuf_r+0x2a>

0800cd14 <__swsetup_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4b29      	ldr	r3, [pc, #164]	@ (800cdbc <__swsetup_r+0xa8>)
 800cd18:	4605      	mov	r5, r0
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	b118      	cbz	r0, 800cd28 <__swsetup_r+0x14>
 800cd20:	6a03      	ldr	r3, [r0, #32]
 800cd22:	b90b      	cbnz	r3, 800cd28 <__swsetup_r+0x14>
 800cd24:	f7fe fffe 	bl	800bd24 <__sinit>
 800cd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2c:	0719      	lsls	r1, r3, #28
 800cd2e:	d422      	bmi.n	800cd76 <__swsetup_r+0x62>
 800cd30:	06da      	lsls	r2, r3, #27
 800cd32:	d407      	bmi.n	800cd44 <__swsetup_r+0x30>
 800cd34:	2209      	movs	r2, #9
 800cd36:	602a      	str	r2, [r5, #0]
 800cd38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd42:	e033      	b.n	800cdac <__swsetup_r+0x98>
 800cd44:	0758      	lsls	r0, r3, #29
 800cd46:	d512      	bpl.n	800cd6e <__swsetup_r+0x5a>
 800cd48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd4a:	b141      	cbz	r1, 800cd5e <__swsetup_r+0x4a>
 800cd4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd50:	4299      	cmp	r1, r3
 800cd52:	d002      	beq.n	800cd5a <__swsetup_r+0x46>
 800cd54:	4628      	mov	r0, r5
 800cd56:	f7ff f9bb 	bl	800c0d0 <_free_r>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd64:	81a3      	strh	r3, [r4, #12]
 800cd66:	2300      	movs	r3, #0
 800cd68:	6063      	str	r3, [r4, #4]
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f043 0308 	orr.w	r3, r3, #8
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	b94b      	cbnz	r3, 800cd8e <__swsetup_r+0x7a>
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd84:	d003      	beq.n	800cd8e <__swsetup_r+0x7a>
 800cd86:	4621      	mov	r1, r4
 800cd88:	4628      	mov	r0, r5
 800cd8a:	f000 f89e 	bl	800ceca <__smakebuf_r>
 800cd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd92:	f013 0201 	ands.w	r2, r3, #1
 800cd96:	d00a      	beq.n	800cdae <__swsetup_r+0x9a>
 800cd98:	2200      	movs	r2, #0
 800cd9a:	60a2      	str	r2, [r4, #8]
 800cd9c:	6962      	ldr	r2, [r4, #20]
 800cd9e:	4252      	negs	r2, r2
 800cda0:	61a2      	str	r2, [r4, #24]
 800cda2:	6922      	ldr	r2, [r4, #16]
 800cda4:	b942      	cbnz	r2, 800cdb8 <__swsetup_r+0xa4>
 800cda6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cdaa:	d1c5      	bne.n	800cd38 <__swsetup_r+0x24>
 800cdac:	bd38      	pop	{r3, r4, r5, pc}
 800cdae:	0799      	lsls	r1, r3, #30
 800cdb0:	bf58      	it	pl
 800cdb2:	6962      	ldrpl	r2, [r4, #20]
 800cdb4:	60a2      	str	r2, [r4, #8]
 800cdb6:	e7f4      	b.n	800cda2 <__swsetup_r+0x8e>
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e7f7      	b.n	800cdac <__swsetup_r+0x98>
 800cdbc:	20000090 	.word	0x20000090

0800cdc0 <memmove>:
 800cdc0:	4288      	cmp	r0, r1
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	eb01 0402 	add.w	r4, r1, r2
 800cdc8:	d902      	bls.n	800cdd0 <memmove+0x10>
 800cdca:	4284      	cmp	r4, r0
 800cdcc:	4623      	mov	r3, r4
 800cdce:	d807      	bhi.n	800cde0 <memmove+0x20>
 800cdd0:	1e43      	subs	r3, r0, #1
 800cdd2:	42a1      	cmp	r1, r4
 800cdd4:	d008      	beq.n	800cde8 <memmove+0x28>
 800cdd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdde:	e7f8      	b.n	800cdd2 <memmove+0x12>
 800cde0:	4402      	add	r2, r0
 800cde2:	4601      	mov	r1, r0
 800cde4:	428a      	cmp	r2, r1
 800cde6:	d100      	bne.n	800cdea <memmove+0x2a>
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdf2:	e7f7      	b.n	800cde4 <memmove+0x24>

0800cdf4 <_sbrk_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d06      	ldr	r5, [pc, #24]	@ (800ce10 <_sbrk_r+0x1c>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	602b      	str	r3, [r5, #0]
 800ce00:	f7f5 ff58 	bl	8002cb4 <_sbrk>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_sbrk_r+0x1a>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_sbrk_r+0x1a>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20001288 	.word	0x20001288

0800ce14 <abort>:
 800ce14:	b508      	push	{r3, lr}
 800ce16:	2006      	movs	r0, #6
 800ce18:	f000 f8bc 	bl	800cf94 <raise>
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	f7f5 fed0 	bl	8002bc2 <_exit>

0800ce22 <_realloc_r>:
 800ce22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce26:	4607      	mov	r7, r0
 800ce28:	4614      	mov	r4, r2
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	b921      	cbnz	r1, 800ce38 <_realloc_r+0x16>
 800ce2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce32:	4611      	mov	r1, r2
 800ce34:	f7ff b9c0 	b.w	800c1b8 <_malloc_r>
 800ce38:	b92a      	cbnz	r2, 800ce46 <_realloc_r+0x24>
 800ce3a:	f7ff f949 	bl	800c0d0 <_free_r>
 800ce3e:	4625      	mov	r5, r4
 800ce40:	4628      	mov	r0, r5
 800ce42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce46:	f000 f8e3 	bl	800d010 <_malloc_usable_size_r>
 800ce4a:	4284      	cmp	r4, r0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	d802      	bhi.n	800ce56 <_realloc_r+0x34>
 800ce50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce54:	d8f4      	bhi.n	800ce40 <_realloc_r+0x1e>
 800ce56:	4621      	mov	r1, r4
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff f9ad 	bl	800c1b8 <_malloc_r>
 800ce5e:	4680      	mov	r8, r0
 800ce60:	b908      	cbnz	r0, 800ce66 <_realloc_r+0x44>
 800ce62:	4645      	mov	r5, r8
 800ce64:	e7ec      	b.n	800ce40 <_realloc_r+0x1e>
 800ce66:	42b4      	cmp	r4, r6
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	bf28      	it	cs
 800ce6e:	4632      	movcs	r2, r6
 800ce70:	f7ff f901 	bl	800c076 <memcpy>
 800ce74:	4629      	mov	r1, r5
 800ce76:	4638      	mov	r0, r7
 800ce78:	f7ff f92a 	bl	800c0d0 <_free_r>
 800ce7c:	e7f1      	b.n	800ce62 <_realloc_r+0x40>

0800ce7e <__swhatbuf_r>:
 800ce7e:	b570      	push	{r4, r5, r6, lr}
 800ce80:	460c      	mov	r4, r1
 800ce82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce86:	2900      	cmp	r1, #0
 800ce88:	b096      	sub	sp, #88	@ 0x58
 800ce8a:	4615      	mov	r5, r2
 800ce8c:	461e      	mov	r6, r3
 800ce8e:	da0d      	bge.n	800ceac <__swhatbuf_r+0x2e>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce96:	f04f 0100 	mov.w	r1, #0
 800ce9a:	bf14      	ite	ne
 800ce9c:	2340      	movne	r3, #64	@ 0x40
 800ce9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cea2:	2000      	movs	r0, #0
 800cea4:	6031      	str	r1, [r6, #0]
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	b016      	add	sp, #88	@ 0x58
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	466a      	mov	r2, sp
 800ceae:	f000 f879 	bl	800cfa4 <_fstat_r>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	dbec      	blt.n	800ce90 <__swhatbuf_r+0x12>
 800ceb6:	9901      	ldr	r1, [sp, #4]
 800ceb8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cebc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cec0:	4259      	negs	r1, r3
 800cec2:	4159      	adcs	r1, r3
 800cec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cec8:	e7eb      	b.n	800cea2 <__swhatbuf_r+0x24>

0800ceca <__smakebuf_r>:
 800ceca:	898b      	ldrh	r3, [r1, #12]
 800cecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cece:	079d      	lsls	r5, r3, #30
 800ced0:	4606      	mov	r6, r0
 800ced2:	460c      	mov	r4, r1
 800ced4:	d507      	bpl.n	800cee6 <__smakebuf_r+0x1c>
 800ced6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	6123      	str	r3, [r4, #16]
 800cede:	2301      	movs	r3, #1
 800cee0:	6163      	str	r3, [r4, #20]
 800cee2:	b003      	add	sp, #12
 800cee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee6:	ab01      	add	r3, sp, #4
 800cee8:	466a      	mov	r2, sp
 800ceea:	f7ff ffc8 	bl	800ce7e <__swhatbuf_r>
 800ceee:	9f00      	ldr	r7, [sp, #0]
 800cef0:	4605      	mov	r5, r0
 800cef2:	4639      	mov	r1, r7
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7ff f95f 	bl	800c1b8 <_malloc_r>
 800cefa:	b948      	cbnz	r0, 800cf10 <__smakebuf_r+0x46>
 800cefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf00:	059a      	lsls	r2, r3, #22
 800cf02:	d4ee      	bmi.n	800cee2 <__smakebuf_r+0x18>
 800cf04:	f023 0303 	bic.w	r3, r3, #3
 800cf08:	f043 0302 	orr.w	r3, r3, #2
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	e7e2      	b.n	800ced6 <__smakebuf_r+0xc>
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	6020      	str	r0, [r4, #0]
 800cf14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	9b01      	ldr	r3, [sp, #4]
 800cf1c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf20:	b15b      	cbz	r3, 800cf3a <__smakebuf_r+0x70>
 800cf22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf26:	4630      	mov	r0, r6
 800cf28:	f000 f84e 	bl	800cfc8 <_isatty_r>
 800cf2c:	b128      	cbz	r0, 800cf3a <__smakebuf_r+0x70>
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	f023 0303 	bic.w	r3, r3, #3
 800cf34:	f043 0301 	orr.w	r3, r3, #1
 800cf38:	81a3      	strh	r3, [r4, #12]
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	431d      	orrs	r5, r3
 800cf3e:	81a5      	strh	r5, [r4, #12]
 800cf40:	e7cf      	b.n	800cee2 <__smakebuf_r+0x18>

0800cf42 <_raise_r>:
 800cf42:	291f      	cmp	r1, #31
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4605      	mov	r5, r0
 800cf48:	460c      	mov	r4, r1
 800cf4a:	d904      	bls.n	800cf56 <_raise_r+0x14>
 800cf4c:	2316      	movs	r3, #22
 800cf4e:	6003      	str	r3, [r0, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf58:	b112      	cbz	r2, 800cf60 <_raise_r+0x1e>
 800cf5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf5e:	b94b      	cbnz	r3, 800cf74 <_raise_r+0x32>
 800cf60:	4628      	mov	r0, r5
 800cf62:	f000 f853 	bl	800d00c <_getpid_r>
 800cf66:	4622      	mov	r2, r4
 800cf68:	4601      	mov	r1, r0
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf70:	f000 b83a 	b.w	800cfe8 <_kill_r>
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d00a      	beq.n	800cf8e <_raise_r+0x4c>
 800cf78:	1c59      	adds	r1, r3, #1
 800cf7a:	d103      	bne.n	800cf84 <_raise_r+0x42>
 800cf7c:	2316      	movs	r3, #22
 800cf7e:	6003      	str	r3, [r0, #0]
 800cf80:	2001      	movs	r0, #1
 800cf82:	e7e7      	b.n	800cf54 <_raise_r+0x12>
 800cf84:	2100      	movs	r1, #0
 800cf86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	4798      	blx	r3
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e7e0      	b.n	800cf54 <_raise_r+0x12>
	...

0800cf94 <raise>:
 800cf94:	4b02      	ldr	r3, [pc, #8]	@ (800cfa0 <raise+0xc>)
 800cf96:	4601      	mov	r1, r0
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	f7ff bfd2 	b.w	800cf42 <_raise_r>
 800cf9e:	bf00      	nop
 800cfa0:	20000090 	.word	0x20000090

0800cfa4 <_fstat_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d07      	ldr	r5, [pc, #28]	@ (800cfc4 <_fstat_r+0x20>)
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4608      	mov	r0, r1
 800cfae:	4611      	mov	r1, r2
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	f7f5 fe56 	bl	8002c62 <_fstat>
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	d102      	bne.n	800cfc0 <_fstat_r+0x1c>
 800cfba:	682b      	ldr	r3, [r5, #0]
 800cfbc:	b103      	cbz	r3, 800cfc0 <_fstat_r+0x1c>
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20001288 	.word	0x20001288

0800cfc8 <_isatty_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d06      	ldr	r5, [pc, #24]	@ (800cfe4 <_isatty_r+0x1c>)
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	602b      	str	r3, [r5, #0]
 800cfd4:	f7f5 fe55 	bl	8002c82 <_isatty>
 800cfd8:	1c43      	adds	r3, r0, #1
 800cfda:	d102      	bne.n	800cfe2 <_isatty_r+0x1a>
 800cfdc:	682b      	ldr	r3, [r5, #0]
 800cfde:	b103      	cbz	r3, 800cfe2 <_isatty_r+0x1a>
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
 800cfe4:	20001288 	.word	0x20001288

0800cfe8 <_kill_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d07      	ldr	r5, [pc, #28]	@ (800d008 <_kill_r+0x20>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	4611      	mov	r1, r2
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	f7f5 fdd4 	bl	8002ba2 <_kill>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d102      	bne.n	800d004 <_kill_r+0x1c>
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	b103      	cbz	r3, 800d004 <_kill_r+0x1c>
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	bd38      	pop	{r3, r4, r5, pc}
 800d006:	bf00      	nop
 800d008:	20001288 	.word	0x20001288

0800d00c <_getpid_r>:
 800d00c:	f7f5 bdc1 	b.w	8002b92 <_getpid>

0800d010 <_malloc_usable_size_r>:
 800d010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d014:	1f18      	subs	r0, r3, #4
 800d016:	2b00      	cmp	r3, #0
 800d018:	bfbc      	itt	lt
 800d01a:	580b      	ldrlt	r3, [r1, r0]
 800d01c:	18c0      	addlt	r0, r0, r3
 800d01e:	4770      	bx	lr

0800d020 <_init>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	bf00      	nop
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr

0800d02c <_fini>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	bf00      	nop
 800d030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d032:	bc08      	pop	{r3}
 800d034:	469e      	mov	lr, r3
 800d036:	4770      	bx	lr
