
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000db8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001440  0800dd2c  0800dd2c  0000ed2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f16c  0800f16c  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800f16c  0800f16c  0001016c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f174  0800f174  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f174  0800f174  00010174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f178  0800f178  00010178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800f17c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000013a4  200002a0  0800f41c  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001644  0800f41c  00011644  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea27  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005508  00000000  00000000  0002fcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001202  00000000  00000000  000368c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002038e  00000000  00000000  00037ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eee7  00000000  00000000  00057e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9c26  00000000  00000000  00076d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013095d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a58  00000000  00000000  001309a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001373f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd14 	.word	0x0800dd14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800dd14 	.word	0x0800dd14

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void cdc_write_string_chunked(const char *str);
static void cdc_write_flush_wait(void);

extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 f97f 	bl	80068e8 <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <cdc_performance_measure+0x56>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fb27 	bl	8003c48 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 8000606:	f107 000c 	add.w	r0, r7, #12
 800060a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <cdc_performance_measure+0x60>)
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f00c fa38 	bl	800ca84 <sniprintf>
 8000614:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 8000616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	653a      	str	r2, [r7, #80]	@ 0x50
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000624:	2000      	movs	r0, #0
 8000626:	f006 f9df 	bl	80069e8 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f006 fa10 	bl	8006a50 <tud_cdc_n_write_flush>
 8000630:	e000      	b.n	8000634 <cdc_performance_measure+0x58>
    return;
 8000632:	bf00      	nop
  tud_cdc_write_flush(); // Make sure data is sent
}
 8000634:	3760      	adds	r7, #96	@ 0x60
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	0800dd2c 	.word	0x0800dd2c

08000640 <cdc_task>:
void cdc_task(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f006 f94e 	bl	80068e8 <tud_cdc_n_connected>
 800064c:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 800064e:	2b00      	cmp	r3, #0
 8000650:	d079      	beq.n	8000746 <cdc_task+0x106>
  return tud_cdc_n_available(0);
 8000652:	2000      	movs	r0, #0
 8000654:	f006 f986 	bl	8006964 <tud_cdc_n_available>
 8000658:	4603      	mov	r3, r0
    if (tud_cdc_available()) {
 800065a:	2b00      	cmp	r3, #0
 800065c:	d076      	beq.n	800074c <cdc_task+0x10c>
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	657b      	str	r3, [r7, #84]	@ 0x54
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 8000666:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800066a:	2000      	movs	r0, #0
 800066c:	f006 f990 	bl	8006990 <tud_cdc_n_read>
 8000670:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000678:	e05e      	b.n	8000738 <cdc_task+0xf8>
        char c = buf[i];
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle backspace
        if (c == '\b' || c == 127) {
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b08      	cmp	r3, #8
 800068c:	d003      	beq.n	8000696 <cdc_task+0x56>
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b7f      	cmp	r3, #127	@ 0x7f
 8000694:	d10d      	bne.n	80006b2 <cdc_task+0x72>
          if (cmd_index > 0) {
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <cdc_task+0x114>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d049      	beq.n	8000732 <cdc_task+0xf2>
            cmd_index--;
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <cdc_task+0x114>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <cdc_task+0x114>)
 80006a8:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006aa:	482b      	ldr	r0, [pc, #172]	@ (8000758 <cdc_task+0x118>)
 80006ac:	f000 f85c 	bl	8000768 <cdc_write_string_chunked>
          if (cmd_index > 0) {
 80006b0:	e03f      	b.n	8000732 <cdc_task+0xf2>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d003      	beq.n	80006c2 <cdc_task+0x82>
 80006ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d116      	bne.n	80006f0 <cdc_task+0xb0>
          cdc_write_string_chunked("\r\n");
 80006c2:	4826      	ldr	r0, [pc, #152]	@ (800075c <cdc_task+0x11c>)
 80006c4:	f000 f850 	bl	8000768 <cdc_write_string_chunked>
          cmd_buffer[cmd_index] = '\0';
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <cdc_task+0x114>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <cdc_task+0x120>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	5499      	strb	r1, [r3, r2]

          if (cmd_index > 0) {
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <cdc_task+0x114>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <cdc_task+0xa8>
            process_command(cmd_buffer);
 80006dc:	4820      	ldr	r0, [pc, #128]	@ (8000760 <cdc_task+0x120>)
 80006de:	f000 f8af 	bl	8000840 <process_command>
            cmd_index = 0;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <cdc_task+0x114>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
          }

          cdc_write_string_chunked("Ready> ");
 80006e8:	481e      	ldr	r0, [pc, #120]	@ (8000764 <cdc_task+0x124>)
 80006ea:	f000 f83d 	bl	8000768 <cdc_write_string_chunked>
 80006ee:	e020      	b.n	8000732 <cdc_task+0xf2>
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 80006f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	d91c      	bls.n	8000732 <cdc_task+0xf2>
 80006f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80006fe:	d818      	bhi.n	8000732 <cdc_task+0xf2>
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <cdc_task+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b3e      	cmp	r3, #62	@ 0x3e
 8000706:	d814      	bhi.n	8000732 <cdc_task+0xf2>
          cmd_buffer[cmd_index++] = c;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <cdc_task+0x114>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <cdc_task+0x114>)
 8000712:	7011      	strb	r1, [r2, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <cdc_task+0x120>)
 800071c:	5499      	strb	r1, [r3, r2]
 800071e:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000724:	2301      	movs	r3, #1
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 8000728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800072a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800072c:	2000      	movs	r0, #0
 800072e:	f006 f95b 	bl	80069e8 <tud_cdc_n_write>
      for (uint32_t i = 0; i < count; i++) {
 8000732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000734:	3301      	adds	r3, #1
 8000736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800073a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800073c:	429a      	cmp	r2, r3
 800073e:	d39c      	bcc.n	800067a <cdc_task+0x3a>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      cdc_write_flush_wait();
 8000740:	f000 f85d 	bl	80007fe <cdc_write_flush_wait>
    }
  } else {
    // Reset flag when disconnected
    cmd_index = 0;
  }
}
 8000744:	e002      	b.n	800074c <cdc_task+0x10c>
    cmd_index = 0;
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <cdc_task+0x114>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3760      	adds	r7, #96	@ 0x60
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200002fc 	.word	0x200002fc
 8000758:	0800dd48 	.word	0x0800dd48
 800075c:	0800dd4c 	.word	0x0800dd4c
 8000760:	200002bc 	.word	0x200002bc
 8000764:	0800dd50 	.word	0x0800dd50

08000768 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if (!str)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d03f      	beq.n	80007f6 <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fd3c 	bl	80001f4 <strlen>
 800077c:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 8000782:	2338      	movs	r3, #56	@ 0x38
 8000784:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 8000786:	e031      	b.n	80007ec <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	4293      	cmp	r3, r2
 8000792:	bf28      	it	cs
 8000794:	4613      	movcs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000798:	e005      	b.n	80007a6 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800079a:	2100      	movs	r1, #0
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f008 fa30 	bl	8008c04 <tud_task_ext>
}
 80007a4:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f006 f9d4 	bl	8006b54 <tud_cdc_n_write_available>
 80007ac:	4602      	mov	r2, r0
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d8f2      	bhi.n	800079a <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	4413      	add	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f006 f90f 	bl	80069e8 <tud_cdc_n_write>
    sent += to_send;
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4413      	add	r3, r2
 80007d0:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f006 f9be 	bl	8006b54 <tud_cdc_n_write_available>
 80007d8:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d803      	bhi.n	80007e8 <cdc_write_string_chunked+0x80>
 80007e0:	69fa      	ldr	r2, [r7, #28]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d301      	bcc.n	80007ec <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 80007e8:	f000 f809 	bl	80007fe <cdc_write_flush_wait>
  while (sent < len) {
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c9      	bcc.n	8000788 <cdc_write_string_chunked+0x20>
 80007f4:	e000      	b.n	80007f8 <cdc_write_string_chunked+0x90>
    return;
 80007f6:	bf00      	nop
    }
  }
}
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f006 f923 	bl	8006a50 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800080e:	e008      	b.n	8000822 <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000810:	2100      	movs	r1, #0
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	f008 f9f5 	bl	8008c04 <tud_task_ext>
}
 800081a:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f006 f996 	bl	8006b54 <tud_cdc_n_write_available>
 8000828:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800082a:	2b7f      	cmp	r3, #127	@ 0x7f
 800082c:	d804      	bhi.n	8000838 <cdc_write_flush_wait+0x3a>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000834:	4293      	cmp	r3, r2
 8000836:	d9eb      	bls.n	8000810 <cdc_write_flush_wait+0x12>
  }
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <process_command>:

static void process_command(char *cmd) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	@ 0x58
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
 800084c:	e018      	b.n	8000880 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 800084e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b40      	cmp	r3, #64	@ 0x40
 8000858:	d90f      	bls.n	800087a <process_command+0x3a>
 800085a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b5a      	cmp	r3, #90	@ 0x5a
 8000864:	d809      	bhi.n	800087a <process_command+0x3a>
      cmd[i] += 32;
 8000866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	440b      	add	r3, r1
 8000874:	3220      	adds	r2, #32
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 800087a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800087c:	3301      	adds	r3, #1
 800087e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e0      	bne.n	800084e <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 800088c:	49ad      	ldr	r1, [pc, #692]	@ (8000b44 <process_command+0x304>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f00c f99c 	bl	800cbcc <strtok>
 8000894:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 817f 	beq.w	8000b9c <process_command+0x35c>
    return;

  if (strcmp(token, "help") == 0) {
 800089e:	49aa      	ldr	r1, [pc, #680]	@ (8000b48 <process_command+0x308>)
 80008a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008a2:	f7ff fc9d 	bl	80001e0 <strcmp>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <process_command+0x72>
    print_help();
 80008ac:	f000 f97e 	bl	8000bac <print_help>
 80008b0:	e175      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "show") == 0) {
 80008b2:	49a6      	ldr	r1, [pc, #664]	@ (8000b4c <process_command+0x30c>)
 80008b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b6:	f7ff fc93 	bl	80001e0 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <process_command+0x86>
    print_config();
 80008c0:	f000 f9ba 	bl	8000c38 <print_config>
 80008c4:	e16b      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "set") == 0) {
 80008c6:	49a2      	ldr	r1, [pc, #648]	@ (8000b50 <process_command+0x310>)
 80008c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008ca:	f7ff fc89 	bl	80001e0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d118      	bne.n	8000906 <process_command+0xc6>
    char *param = strtok(NULL, " ");
 80008d4:	499b      	ldr	r1, [pc, #620]	@ (8000b44 <process_command+0x304>)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f00c f978 	bl	800cbcc <strtok>
 80008dc:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 80008de:	4999      	ldr	r1, [pc, #612]	@ (8000b44 <process_command+0x304>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f00c f973 	bl	800cbcc <strtok>
 80008e6:	6138      	str	r0, [r7, #16]
    if (param && value) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <process_command+0xbe>
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <process_command+0xbe>
      set_config_value(param, value);
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f000 fa00 	bl	8000cfc <set_config_value>
 80008fc:	e14f      	b.n	8000b9e <process_command+0x35e>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 80008fe:	4895      	ldr	r0, [pc, #596]	@ (8000b54 <process_command+0x314>)
 8000900:	f7ff ff32 	bl	8000768 <cdc_write_string_chunked>
 8000904:	e14b      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000906:	4994      	ldr	r1, [pc, #592]	@ (8000b58 <process_command+0x318>)
 8000908:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800090a:	f7ff fc69 	bl	80001e0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11c      	bne.n	800094e <process_command+0x10e>
    char *layer_str = strtok(NULL, " ");
 8000914:	498b      	ldr	r1, [pc, #556]	@ (8000b44 <process_command+0x304>)
 8000916:	2000      	movs	r0, #0
 8000918:	f00c f958 	bl	800cbcc <strtok>
 800091c:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <process_command+0x106>
      uint8_t layer = atoi(layer_str);
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f00b ff62 	bl	800c7ee <atoi>
 800092a:	4603      	mov	r3, r0
 800092c:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d804      	bhi.n	800093e <process_command+0xfe>
        print_keymap(layer);
 8000934:	7efb      	ldrb	r3, [r7, #27]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa8e 	bl	8000e58 <print_keymap>
 800093c:	e12f      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 800093e:	4887      	ldr	r0, [pc, #540]	@ (8000b5c <process_command+0x31c>)
 8000940:	f7ff ff12 	bl	8000768 <cdc_write_string_chunked>
 8000944:	e12b      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000946:	4886      	ldr	r0, [pc, #536]	@ (8000b60 <process_command+0x320>)
 8000948:	f7ff ff0e 	bl	8000768 <cdc_write_string_chunked>
 800094c:	e127      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setkey") == 0) {
 800094e:	4985      	ldr	r1, [pc, #532]	@ (8000b64 <process_command+0x324>)
 8000950:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000952:	f7ff fc45 	bl	80001e0 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d154      	bne.n	8000a06 <process_command+0x1c6>
    char *layer_str = strtok(NULL, " ");
 800095c:	4979      	ldr	r1, [pc, #484]	@ (8000b44 <process_command+0x304>)
 800095e:	2000      	movs	r0, #0
 8000960:	f00c f934 	bl	800cbcc <strtok>
 8000964:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000966:	4977      	ldr	r1, [pc, #476]	@ (8000b44 <process_command+0x304>)
 8000968:	2000      	movs	r0, #0
 800096a:	f00c f92f 	bl	800cbcc <strtok>
 800096e:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000970:	4974      	ldr	r1, [pc, #464]	@ (8000b44 <process_command+0x304>)
 8000972:	2000      	movs	r0, #0
 8000974:	f00c f92a 	bl	800cbcc <strtok>
 8000978:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 800097a:	4972      	ldr	r1, [pc, #456]	@ (8000b44 <process_command+0x304>)
 800097c:	2000      	movs	r0, #0
 800097e:	f00c f925 	bl	800cbcc <strtok>
 8000982:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	2b00      	cmp	r3, #0
 8000988:	d039      	beq.n	80009fe <process_command+0x1be>
 800098a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098c:	2b00      	cmp	r3, #0
 800098e:	d036      	beq.n	80009fe <process_command+0x1be>
 8000990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d033      	beq.n	80009fe <process_command+0x1be>
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	2b00      	cmp	r3, #0
 800099a:	d030      	beq.n	80009fe <process_command+0x1be>
      uint8_t layer = atoi(layer_str);
 800099c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800099e:	f00b ff26 	bl	800c7ee <atoi>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 80009a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009aa:	f00b ff20 	bl	800c7ee <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 80009b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009b6:	f00b ff1a 	bl	800c7ee <atoi>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 80009c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009c2:	f00b ff14 	bl	800c7ee <atoi>
 80009c6:	4603      	mov	r3, r0
 80009c8:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d811      	bhi.n	80009f6 <process_command+0x1b6>
 80009d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80d      	bhi.n	80009f6 <process_command+0x1b6>
 80009da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d809      	bhi.n	80009f6 <process_command+0x1b6>
        set_keymap_value(layer, row, col, value);
 80009e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009e4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80009e8:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80009ec:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80009f0:	f000 fb78 	bl	80010e4 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 80009f4:	e0d3      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 80009f6:	485c      	ldr	r0, [pc, #368]	@ (8000b68 <process_command+0x328>)
 80009f8:	f7ff feb6 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 80009fc:	e0cf      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 80009fe:	485b      	ldr	r0, [pc, #364]	@ (8000b6c <process_command+0x32c>)
 8000a00:	f7ff feb2 	bl	8000768 <cdc_write_string_chunked>
 8000a04:	e0cb      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000a06:	495a      	ldr	r1, [pc, #360]	@ (8000b70 <process_command+0x330>)
 8000a08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a0a:	f7ff fbe9 	bl	80001e0 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 8082 	bne.w	8000b1a <process_command+0x2da>
    char *layer_str = strtok(NULL, " ");
 8000a16:	494b      	ldr	r1, [pc, #300]	@ (8000b44 <process_command+0x304>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f00c f8d7 	bl	800cbcc <strtok>
 8000a1e:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000a20:	4948      	ldr	r1, [pc, #288]	@ (8000b44 <process_command+0x304>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f00c f8d2 	bl	800cbcc <strtok>
 8000a28:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000a2a:	4946      	ldr	r1, [pc, #280]	@ (8000b44 <process_command+0x304>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f00c f8cd 	bl	800cbcc <strtok>
 8000a32:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d06b      	beq.n	8000b12 <process_command+0x2d2>
 8000a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d068      	beq.n	8000b12 <process_command+0x2d2>
 8000a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d065      	beq.n	8000b12 <process_command+0x2d2>
      uint8_t layer = atoi(layer_str);
 8000a46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000a48:	f00b fed1 	bl	800c7ee <atoi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000a52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000a54:	f00b fecb 	bl	800c7ee <atoi>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000a5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a60:	f00b fec5 	bl	800c7ee <atoi>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000a6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d84b      	bhi.n	8000b0a <process_command+0x2ca>
 8000a72:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d847      	bhi.n	8000b0a <process_command+0x2ca>
 8000a7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d843      	bhi.n	8000b0a <process_command+0x2ca>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000a88:	492e      	ldr	r1, [pc, #184]	@ (8000b44 <process_command+0x304>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00c f89e 	bl	800cbcc <strtok>
 8000a90:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000a92:	e015      	b.n	8000ac0 <process_command+0x280>
          values[value_count] = atoi(value_str);
 8000a94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a96:	f00b feaa 	bl	800c7ee <atoi>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	3358      	adds	r3, #88	@ 0x58
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000aac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <process_command+0x304>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f00c f887 	bl	800cbcc <strtok>
 8000abe:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <process_command+0x2aa>
 8000ac6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d9e2      	bls.n	8000a94 <process_command+0x254>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000ace:	e00c      	b.n	8000aea <process_command+0x2aa>
          values[value_count] = ____;
 8000ad0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3358      	adds	r3, #88	@ 0x58
 8000ad8:	443b      	add	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ae0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000aea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9ee      	bls.n	8000ad0 <process_command+0x290>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000afa:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000afe:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000b02:	f000 fb4b 	bl	800119c <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000b06:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000b08:	e049      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <process_command+0x328>)
 8000b0c:	f7ff fe2c 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000b10:	e045      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000b12:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <process_command+0x334>)
 8000b14:	f7ff fe28 	bl	8000768 <cdc_write_string_chunked>
 8000b18:	e041      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "save") == 0) {
 8000b1a:	4917      	ldr	r1, [pc, #92]	@ (8000b78 <process_command+0x338>)
 8000b1c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b1e:	f7ff fb5f 	bl	80001e0 <strcmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <process_command+0x2ee>
    save_config();
 8000b28:	f000 fbde 	bl	80012e8 <save_config>
 8000b2c:	e037      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "load") == 0) {
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <process_command+0x33c>)
 8000b30:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b32:	f7ff fb55 	bl	80001e0 <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d121      	bne.n	8000b80 <process_command+0x340>
    load_config();
 8000b3c:	f000 fbe8 	bl	8001310 <load_config>
 8000b40:	e02d      	b.n	8000b9e <process_command+0x35e>
 8000b42:	bf00      	nop
 8000b44:	0800dd58 	.word	0x0800dd58
 8000b48:	0800dd5c 	.word	0x0800dd5c
 8000b4c:	0800dd64 	.word	0x0800dd64
 8000b50:	0800dd6c 	.word	0x0800dd6c
 8000b54:	0800dd70 	.word	0x0800dd70
 8000b58:	0800dd94 	.word	0x0800dd94
 8000b5c:	0800dd9c 	.word	0x0800dd9c
 8000b60:	0800ddb4 	.word	0x0800ddb4
 8000b64:	0800ddcc 	.word	0x0800ddcc
 8000b68:	0800ddd4 	.word	0x0800ddd4
 8000b6c:	0800ddf4 	.word	0x0800ddf4
 8000b70:	0800de20 	.word	0x0800de20
 8000b74:	0800de2c 	.word	0x0800de2c
 8000b78:	0800de78 	.word	0x0800de78
 8000b7c:	0800de80 	.word	0x0800de80
  } else if (strcmp(token, "reset") == 0) {
 8000b80:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <process_command+0x364>)
 8000b82:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b84:	f7ff fb2c 	bl	80001e0 <strcmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <process_command+0x354>
    reset_config();
 8000b8e:	f000 fbcb 	bl	8001328 <reset_config>
 8000b92:	e004      	b.n	8000b9e <process_command+0x35e>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <process_command+0x368>)
 8000b96:	f7ff fde7 	bl	8000768 <cdc_write_string_chunked>
 8000b9a:	e000      	b.n	8000b9e <process_command+0x35e>
    return;
 8000b9c:	bf00      	nop
  }
}
 8000b9e:	3758      	adds	r7, #88	@ 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800de88 	.word	0x0800de88
 8000ba8:	0800de90 	.word	0x0800de90

08000bac <print_help>:

static void print_help(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <print_help+0x58>)
 8000bb2:	f7ff fdd9 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <print_help+0x5c>)
 8000bb8:	f7ff fdd6 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <print_help+0x60>)
 8000bbe:	f7ff fdd3 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <print_help+0x64>)
 8000bc4:	f7ff fdd0 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <print_help+0x68>)
 8000bca:	f7ff fdcd 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <print_help+0x6c>)
 8000bd0:	f7ff fdca 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <print_help+0x70>)
 8000bd6:	f7ff fdc7 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <print_help+0x74>)
 8000bdc:	f7ff fdc4 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <print_help+0x78>)
 8000be2:	f7ff fdc1 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <print_help+0x7c>)
 8000be8:	f7ff fdbe 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <print_help+0x80>)
 8000bee:	f7ff fdbb 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_help+0x84>)
 8000bf4:	f7ff fdb8 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000bf8:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <print_help+0x88>)
 8000bfa:	f7ff fdb5 	bl	8000768 <cdc_write_string_chunked>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800dec8 	.word	0x0800dec8
 8000c08:	0800dee0 	.word	0x0800dee0
 8000c0c:	0800df10 	.word	0x0800df10
 8000c10:	0800df4c 	.word	0x0800df4c
 8000c14:	0800df88 	.word	0x0800df88
 8000c18:	0800dfbc 	.word	0x0800dfbc
 8000c1c:	0800e000 	.word	0x0800e000
 8000c20:	0800e078 	.word	0x0800e078
 8000c24:	0800e0b4 	.word	0x0800e0b4
 8000c28:	0800e0f0 	.word	0x0800e0f0
 8000c2c:	0800e128 	.word	0x0800e128
 8000c30:	0800e138 	.word	0x0800e138
 8000c34:	0800e174 	.word	0x0800e174

08000c38 <print_config>:

static void print_config(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0a0      	sub	sp, #128	@ 0x80
 8000c3c:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <print_config+0xa0>)
 8000c40:	f7ff fd92 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <print_config+0xa4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4638      	mov	r0, r7
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <print_config+0xa8>)
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	f00b ff19 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd87 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <print_config+0xa4>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <print_config+0xac>)
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	f00b ff0e 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd7c 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <print_config+0xa4>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	4638      	mov	r0, r7
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <print_config+0xb0>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	f00b ff03 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd71 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <print_config+0xa4>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <print_config+0xb4>)
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	f00b fef8 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd66 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <print_config+0xa4>)
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <print_config+0xb8>)
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	f00b feed 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd5b 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <print_config+0xa4>)
 8000cb4:	88db      	ldrh	r3, [r3, #6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <print_config+0xbc>)
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	f00b fee2 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd50 	bl	8000768 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <print_config+0xc0>)
 8000cca:	f7ff fd4d 	bl	8000768 <cdc_write_string_chunked>
}
 8000cce:	bf00      	nop
 8000cd0:	3780      	adds	r7, #128	@ 0x80
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800e1b8 	.word	0x0800e1b8
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	0800e1d4 	.word	0x0800e1d4
 8000ce4:	0800e1f0 	.word	0x0800e1f0
 8000ce8:	0800e208 	.word	0x0800e208
 8000cec:	0800e220 	.word	0x0800e220
 8000cf0:	0800e240 	.word	0x0800e240
 8000cf4:	0800e264 	.word	0x0800e264
 8000cf8:	0800e278 	.word	0x0800e278

08000cfc <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	@ 0x50
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f00b fd71 	bl	800c7ee <atoi>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000d10:	4943      	ldr	r1, [pc, #268]	@ (8000e20 <set_config_value+0x124>)
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fa64 	bl	80001e0 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <set_config_value+0x128>)
 8000d24:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000d26:	4b3f      	ldr	r3, [pc, #252]	@ (8000e24 <set_config_value+0x128>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f107 000c 	add.w	r0, r7, #12
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <set_config_value+0x12c>)
 8000d30:	2140      	movs	r1, #64	@ 0x40
 8000d32:	f00b fea7 	bl	800ca84 <sniprintf>
 8000d36:	e06a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000d38:	493c      	ldr	r1, [pc, #240]	@ (8000e2c <set_config_value+0x130>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fa50 	bl	80001e0 <strcmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <set_config_value+0x64>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <set_config_value+0x128>)
 8000d4c:	705a      	strb	r2, [r3, #1]
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <set_config_value+0x128>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	4a36      	ldr	r2, [pc, #216]	@ (8000e30 <set_config_value+0x134>)
 8000d58:	2140      	movs	r1, #64	@ 0x40
 8000d5a:	f00b fe93 	bl	800ca84 <sniprintf>
 8000d5e:	e056      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <set_config_value+0x138>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fa3c 	bl	80001e0 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <set_config_value+0x8c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <set_config_value+0x128>)
 8000d74:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <set_config_value+0x128>)
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	f107 000c 	add.w	r0, r7, #12
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <set_config_value+0x13c>)
 8000d80:	2140      	movs	r1, #64	@ 0x40
 8000d82:	f00b fe7f 	bl	800ca84 <sniprintf>
 8000d86:	e042      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000d88:	492c      	ldr	r1, [pc, #176]	@ (8000e3c <set_config_value+0x140>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fa28 	bl	80001e0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <set_config_value+0xb4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <set_config_value+0x128>)
 8000d9c:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <set_config_value+0x128>)
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	f107 000c 	add.w	r0, r7, #12
 8000da6:	4a26      	ldr	r2, [pc, #152]	@ (8000e40 <set_config_value+0x144>)
 8000da8:	2140      	movs	r1, #64	@ 0x40
 8000daa:	f00b fe6b 	bl	800ca84 <sniprintf>
 8000dae:	e02e      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000db0:	4924      	ldr	r1, [pc, #144]	@ (8000e44 <set_config_value+0x148>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa14 	bl	80001e0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <set_config_value+0xdc>
    keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <set_config_value+0x128>)
 8000dc4:	711a      	strb	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <set_config_value+0x128>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	f107 000c 	add.w	r0, r7, #12
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <set_config_value+0x14c>)
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	f00b fe57 	bl	800ca84 <sniprintf>
 8000dd6:	e01a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000dd8:	491c      	ldr	r1, [pc, #112]	@ (8000e4c <set_config_value+0x150>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fa00 	bl	80001e0 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <set_config_value+0x104>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <set_config_value+0x128>)
 8000dec:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <set_config_value+0x128>)
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	f107 000c 	add.w	r0, r7, #12
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <set_config_value+0x154>)
 8000df8:	2140      	movs	r1, #64	@ 0x40
 8000dfa:	f00b fe43 	bl	800ca84 <sniprintf>
 8000dfe:	e006      	b.n	8000e0e <set_config_value+0x112>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000e00:	f107 000c 	add.w	r0, r7, #12
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <set_config_value+0x158>)
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	f00b fe3b 	bl	800ca84 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fca8 	bl	8000768 <cdc_write_string_chunked>
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	@ 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800e2a0 	.word	0x0800e2a0
 8000e24:	20000000 	.word	0x20000000
 8000e28:	0800e2b4 	.word	0x0800e2b4
 8000e2c:	0800e2d4 	.word	0x0800e2d4
 8000e30:	0800e2e4 	.word	0x0800e2e4
 8000e34:	0800e300 	.word	0x0800e300
 8000e38:	0800e310 	.word	0x0800e310
 8000e3c:	0800e32c 	.word	0x0800e32c
 8000e40:	0800e344 	.word	0x0800e344
 8000e44:	0800e368 	.word	0x0800e368
 8000e48:	0800e384 	.word	0x0800e384
 8000e4c:	0800e3ac 	.word	0x0800e3ac
 8000e50:	0800e3b8 	.word	0x0800e3b8
 8000e54:	0800e3d0 	.word	0x0800e3d0

08000e58 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4602      	mov	r2, r0
 8000e62:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e66:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e6a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000e6c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e70:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 8000e7a:	4a91      	ldr	r2, [pc, #580]	@ (80010c0 <print_keymap+0x268>)
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	f00b fe01 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e82:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc6e 	bl	8000768 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8000e92:	e109      	b.n	80010a8 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000e9a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	18d0      	adds	r0, r2, r3
 8000ea4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ea8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8000eac:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000eb0:	4a84      	ldr	r2, [pc, #528]	@ (80010c4 <print_keymap+0x26c>)
 8000eb2:	f00b fde7 	bl	800ca84 <sniprintf>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8000ec8:	e0cc      	b.n	8001064 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000ed6:	e020      	b.n	8000f1a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8000ed8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000edc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000ee6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000eea:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000eee:	4c76      	ldr	r4, [pc, #472]	@ (80010c8 <print_keymap+0x270>)
 8000ef0:	0080      	lsls	r0, r0, #2
 8000ef2:	4401      	add	r1, r0
 8000ef4:	0089      	lsls	r1, r1, #2
 8000ef6:	440a      	add	r2, r1
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3304      	adds	r3, #4
 8000efe:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <print_keymap+0xb8>
          macro_count++;
 8000f06:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f10:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000f1a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9da      	bls.n	8000ed8 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8000f22:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d973      	bls.n	8001012 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 8000f2a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	18d0      	adds	r0, r2, r3
 8000f34:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f3c:	4a63      	ldr	r2, [pc, #396]	@ (80010cc <print_keymap+0x274>)
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f00b fda0 	bl	800ca84 <sniprintf>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000f56:	e044      	b.n	8000fe2 <print_keymap+0x18a>
          if (i > 0)
 8000f58:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d012      	beq.n	8000f86 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8000f60:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f72:	4a57      	ldr	r2, [pc, #348]	@ (80010d0 <print_keymap+0x278>)
 8000f74:	4619      	mov	r1, r3
 8000f76:	f00b fd85 	bl	800ca84 <sniprintf>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f80:	4413      	add	r3, r2
 8000f82:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000f86:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	18d4      	adds	r4, r2, r3
 8000f90:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f94:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8000f98:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f9c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000fa0:	7818      	ldrb	r0, [r3, #0]
 8000fa2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000fa6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000faa:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fae:	4e46      	ldr	r6, [pc, #280]	@ (80010c8 <print_keymap+0x270>)
 8000fb0:	0080      	lsls	r0, r0, #2
 8000fb2:	4401      	add	r1, r0
 8000fb4:	0089      	lsls	r1, r1, #2
 8000fb6:	440a      	add	r2, r1
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000fc2:	4a44      	ldr	r2, [pc, #272]	@ (80010d4 <print_keymap+0x27c>)
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f00b fd5c 	bl	800ca84 <sniprintf>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000fd8:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000fe2:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9b6      	bls.n	8000f58 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 8000fea:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fee:	f107 020c 	add.w	r2, r7, #12
 8000ff2:	18d0      	adds	r0, r2, r3
 8000ff4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ff8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000ffc:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <print_keymap+0x280>)
 8000ffe:	4619      	mov	r1, r3
 8001000:	f00b fd40 	bl	800ca84 <sniprintf>
 8001004:	4602      	mov	r2, r0
 8001006:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800100a:	4413      	add	r3, r2
 800100c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001010:	e023      	b.n	800105a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001012:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	18d0      	adds	r0, r2, r3
 800101c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001020:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001024:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001028:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800102c:	7819      	ldrb	r1, [r3, #0]
 800102e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001032:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001036:	4d24      	ldr	r5, [pc, #144]	@ (80010c8 <print_keymap+0x270>)
 8001038:	0089      	lsls	r1, r1, #2
 800103a:	440a      	add	r2, r1
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4413      	add	r3, r2
 8001040:	3301      	adds	r3, #1
 8001042:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <print_keymap+0x284>)
 8001048:	4621      	mov	r1, r4
 800104a:	f00b fd1b 	bl	800ca84 <sniprintf>
 800104e:	4602      	mov	r2, r0
 8001050:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001054:	4413      	add	r3, r2
 8001056:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800105a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800105e:	3301      	adds	r3, #1
 8001060:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001064:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001068:	2b03      	cmp	r3, #3
 800106a:	f67f af2e 	bls.w	8000eca <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800106e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	18d0      	adds	r0, r2, r3
 8001078:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800107c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <print_keymap+0x288>)
 8001082:	4619      	mov	r1, r3
 8001084:	f00b fcfe 	bl	800ca84 <sniprintf>
 8001088:	4602      	mov	r2, r0
 800108a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800108e:	4413      	add	r3, r2
 8001090:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb65 	bl	8000768 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800109e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80010a8:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f67f aef1 	bls.w	8000e94 <print_keymap+0x3c>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800e3e8 	.word	0x0800e3e8
 80010c4:	0800e400 	.word	0x0800e400
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800e40c 	.word	0x0800e40c
 80010d0:	0800e410 	.word	0x0800e410
 80010d4:	0800e414 	.word	0x0800e414
 80010d8:	0800e418 	.word	0x0800e418
 80010dc:	0800e41c 	.word	0x0800e41c
 80010e0:	0800dd4c 	.word	0x0800dd4c

080010e4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b099      	sub	sp, #100	@ 0x64
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4603      	mov	r3, r0
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	460b      	mov	r3, r1
 80010fc:	717b      	strb	r3, [r7, #5]
 80010fe:	4613      	mov	r3, r2
 8001100:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 8001102:	79f9      	ldrb	r1, [r7, #7]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	4822      	ldr	r0, [pc, #136]	@ (8001194 <set_keymap_value+0xb0>)
 800110a:	0089      	lsls	r1, r1, #2
 800110c:	440a      	add	r2, r1
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4413      	add	r3, r2
 8001112:	3301      	adds	r3, #1
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800111a:	2301      	movs	r3, #1
 800111c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001120:	e014      	b.n	800114c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001122:	79f8      	ldrb	r0, [r7, #7]
 8001124:	79b9      	ldrb	r1, [r7, #6]
 8001126:	797a      	ldrb	r2, [r7, #5]
 8001128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800112c:	4c19      	ldr	r4, [pc, #100]	@ (8001194 <set_keymap_value+0xb0>)
 800112e:	0080      	lsls	r0, r0, #2
 8001130:	4401      	add	r1, r0
 8001132:	0089      	lsls	r1, r1, #2
 8001134:	440a      	add	r2, r1
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	2200      	movs	r2, #0
 800113e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001142:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001146:	3301      	adds	r3, #1
 8001148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800114c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001150:	2b03      	cmp	r3, #3
 8001152:	d9e6      	bls.n	8001122 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001154:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001158:	2100      	movs	r1, #0
 800115a:	480e      	ldr	r0, [pc, #56]	@ (8001194 <set_keymap_value+0xb0>)
 800115c:	f001 fea8 	bl	8002eb0 <keyboard_write_config>
  keyboard_init_keys();
 8001160:	f000 ff94 	bl	800208c <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001164:	79fc      	ldrb	r4, [r7, #7]
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	797a      	ldrb	r2, [r7, #5]
 800116a:	8879      	ldrh	r1, [r7, #2]
 800116c:	f107 000c 	add.w	r0, r7, #12
 8001170:	9102      	str	r1, [sp, #8]
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4623      	mov	r3, r4
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <set_keymap_value+0xb4>)
 800117a:	2140      	movs	r1, #64	@ 0x40
 800117c:	f00b fc82 	bl	800ca84 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff faef 	bl	8000768 <cdc_write_string_chunked>
}
 800118a:	bf00      	nop
 800118c:	3754      	adds	r7, #84	@ 0x54
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	0800e424 	.word	0x0800e424

0800119c <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0a8      	sub	sp, #160	@ 0xa0
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011b6:	e01a      	b.n	80011ee <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80011b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	18d4      	adds	r4, r2, r3
 80011c2:	79f8      	ldrb	r0, [r7, #7]
 80011c4:	79b9      	ldrb	r1, [r7, #6]
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011cc:	8825      	ldrh	r5, [r4, #0]
 80011ce:	4c41      	ldr	r4, [pc, #260]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011d0:	0080      	lsls	r0, r0, #2
 80011d2:	4401      	add	r1, r0
 80011d4:	0089      	lsls	r1, r1, #2
 80011d6:	440a      	add	r2, r1
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	462a      	mov	r2, r5
 80011e0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9e0      	bls.n	80011b8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80011f6:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80011fa:	2100      	movs	r1, #0
 80011fc:	4835      	ldr	r0, [pc, #212]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011fe:	f001 fe57 	bl	8002eb0 <keyboard_write_config>
  keyboard_init_keys();
 8001202:	f000 ff43 	bl	800208c <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 8001206:	79f9      	ldrb	r1, [r7, #7]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	797a      	ldrb	r2, [r7, #5]
 800120c:	f107 000c 	add.w	r0, r7, #12
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <set_macro_keymap_value+0x13c>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	f00b fc33 	bl	800ca84 <sniprintf>
 800121e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001228:	e033      	b.n	8001292 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800122a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001232:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001240:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <set_macro_keymap_value+0x140>)
 8001246:	4619      	mov	r1, r3
 8001248:	f00b fc1c 	bl	800ca84 <sniprintf>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001252:	4413      	add	r3, r2
 8001254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	18d0      	adds	r0, r2, r3
 8001262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001266:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800126a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4a1a      	ldr	r2, [pc, #104]	@ (80012e0 <set_macro_keymap_value+0x144>)
 8001278:	f00b fc04 	bl	800ca84 <sniprintf>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001282:	4413      	add	r3, r2
 8001284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001288:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800128c:	3301      	adds	r3, #1
 800128e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001292:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001296:	2b03      	cmp	r3, #3
 8001298:	d9c7      	bls.n	800122a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800129a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	18d0      	adds	r0, r2, r3
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012a8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <set_macro_keymap_value+0x148>)
 80012ae:	4619      	mov	r1, r3
 80012b0:	f00b fbe8 	bl	800ca84 <sniprintf>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa4f 	bl	8000768 <cdc_write_string_chunked>
}
 80012ca:	bf00      	nop
 80012cc:	3798      	adds	r7, #152	@ 0x98
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000
 80012d8:	0800e444 	.word	0x0800e444
 80012dc:	0800e468 	.word	0x0800e468
 80012e0:	0800e414 	.word	0x0800e414
 80012e4:	0800e46c 	.word	0x0800e46c

080012e8 <save_config>:

static void save_config(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80012ec:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80012f0:	2100      	movs	r1, #0
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <save_config+0x20>)
 80012f4:	f001 fddc 	bl	8002eb0 <keyboard_write_config>
  keyboard_init_keys();
 80012f8:	f000 fec8 	bl	800208c <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <save_config+0x24>)
 80012fe:	f7ff fa33 	bl	8000768 <cdc_write_string_chunked>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	0800e470 	.word	0x0800e470

08001310 <load_config>:

static void load_config(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001314:	f001 fdba 	bl	8002e8c <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <load_config+0x14>)
 800131a:	f7ff fa25 	bl	8000768 <cdc_write_string_chunked>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800e490 	.word	0x0800e490

08001328 <reset_config>:

static void reset_config(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800132c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001330:	2100      	movs	r1, #0
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <reset_config+0x24>)
 8001334:	f001 fdbc 	bl	8002eb0 <keyboard_write_config>
  keyboard_read_config();
 8001338:	f001 fda8 	bl	8002e8c <keyboard_read_config>
  keyboard_init_keys();
 800133c:	f000 fea6 	bl	800208c <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <reset_config+0x28>)
 8001342:	f7ff fa11 	bl	8000768 <cdc_write_string_chunked>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800e604 	.word	0x0800e604
 8001350:	0800e4b4 	.word	0x0800e4b4

08001354 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	460b      	mov	r3, r1
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	4613      	mov	r3, r2
 8001364:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d015      	beq.n	8001398 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e002      	b.n	8001378 <tud_cdc_line_state_cb+0x24>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800137e:	4293      	cmp	r3, r2
 8001380:	ddf7      	ble.n	8001372 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <tud_cdc_line_state_cb+0x4c>)
 8001384:	f7ff f9f0 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001388:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <tud_cdc_line_state_cb+0x50>)
 800138a:	f7ff f9ed 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <tud_cdc_line_state_cb+0x54>)
 8001390:	f7ff f9ea 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001394:	f7ff fa33 	bl	80007fe <cdc_write_flush_wait>
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800e4d8 	.word	0x0800e4d8
 80013a4:	0800e504 	.word	0x0800e504
 80013a8:	0800dd50 	.word	0x0800dd50

080013ac <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <hid_task+0x8c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <hid_task+0x16>
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <hid_task+0x90>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d035      	beq.n	8001446 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f005 ff70 	bl	80072c0 <tud_hid_n_ready>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d02f      	beq.n	8001446 <hid_task+0x82>
    if (tud_suspended()) {
 80013e6:	f007 fa87 	bl	80088f8 <tud_suspended>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <hid_task+0x32>
      tud_remote_wakeup();
 80013f0:	f007 fa96 	bl	8008920 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80013f4:	e027      	b.n	8001446 <hid_task+0x82>
      if (should_send_consumer_report) {
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <hid_task+0x8c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00f      	beq.n	800141e <hid_task+0x5a>
        should_send_consumer_report = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <hid_task+0x8c>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <hid_task+0x94>)
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	2302      	movs	r3, #2
 800140e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	7bf9      	ldrb	r1, [r7, #15]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	2000      	movs	r0, #0
 8001418:	f005 ff94 	bl	8007344 <tud_hid_n_report>
 800141c:	e013      	b.n	8001446 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <hid_task+0x90>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00f      	beq.n	8001446 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <hid_task+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <hid_task+0x98>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	717a      	strb	r2, [r7, #5]
 8001434:	713b      	strb	r3, [r7, #4]
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <hid_task+0x9c>)
 8001438:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800143a:	793a      	ldrb	r2, [r7, #4]
 800143c:	7979      	ldrb	r1, [r7, #5]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2000      	movs	r0, #0
 8001442:	f006 f805 	bl	8007450 <tud_hid_n_keyboard_report>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002fd 	.word	0x200002fd
 8001454:	200002fe 	.word	0x200002fe
 8001458:	20000306 	.word	0x20000306
 800145c:	200002ff 	.word	0x200002ff
 8001460:	20000300 	.word	0x20000300

08001464 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	3305      	adds	r3, #5
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	2b03      	cmp	r3, #3
 8001484:	f200 80f7 	bhi.w	8001676 <hid_press_key+0x212>
 8001488:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <hid_press_key+0x2c>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c7 	.word	0x080014c7
 8001494:	080014a1 	.word	0x080014a1
 8001498:	08001507 	.word	0x08001507
 800149c:	08001525 	.word	0x08001525
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b74      	ldr	r3, [pc, #464]	@ (8001684 <hid_press_key+0x220>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b72      	ldr	r3, [pc, #456]	@ (8001684 <hid_press_key+0x220>)
 80014bc:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80014be:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <hid_press_key+0x224>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    break;
 80014c4:	e0da      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e018      	b.n	80014fe <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	4a6f      	ldr	r2, [pc, #444]	@ (800168c <hid_press_key+0x228>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d110      	bne.n	80014f8 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	88db      	ldrh	r3, [r3, #6]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	b2d1      	uxtb	r1, r2
 80014ea:	4a68      	ldr	r2, [pc, #416]	@ (800168c <hid_press_key+0x228>)
 80014ec:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <hid_press_key+0x224>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
        break;
 80014f4:	bf00      	nop
      }
    }
    break;
 80014f6:	e0c1      	b.n	800167c <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d9e3      	bls.n	80014cc <hid_press_key+0x68>
    break;
 8001504:	e0ba      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	440b      	add	r3, r1
 8001512:	88db      	ldrh	r3, [r3, #6]
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <hid_press_key+0x22c>)
 800151a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800151c:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <hid_press_key+0x230>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
    break;
 8001522:	e0ab      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	757b      	strb	r3, [r7, #21]
 800152c:	e025      	b.n	800157a <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	7d7b      	ldrb	r3, [r7, #21]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	0058      	lsls	r0, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	4403      	add	r3, r0
 800153e:	440b      	add	r3, r1
 8001540:	88db      	ldrh	r3, [r3, #6]
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	0058      	lsls	r0, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	4403      	add	r3, r0
 8001558:	440b      	add	r3, r1
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f9a0 	bl	80018a4 <get_bitmask_for_modifier>
 8001564:	4603      	mov	r3, r0
 8001566:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 800156e:	7dbb      	ldrb	r3, [r7, #22]
 8001570:	3301      	adds	r3, #1
 8001572:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001574:	7d7b      	ldrb	r3, [r7, #21]
 8001576:	3301      	adds	r3, #1
 8001578:	757b      	strb	r3, [r7, #21]
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d9d6      	bls.n	800152e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	74fb      	strb	r3, [r7, #19]
 8001588:	e00a      	b.n	80015a0 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800158a:	7cfb      	ldrb	r3, [r7, #19]
 800158c:	4a3f      	ldr	r2, [pc, #252]	@ (800168c <hid_press_key+0x228>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <hid_press_key+0x136>
        start_slot = i;
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	753b      	strb	r3, [r7, #20]
        break;
 8001598:	e005      	b.n	80015a6 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d9f1      	bls.n	800158a <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015aa:	7d3b      	ldrb	r3, [r7, #20]
 80015ac:	747b      	strb	r3, [r7, #17]
 80015ae:	e00a      	b.n	80015c6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	4a36      	ldr	r2, [pc, #216]	@ (800168c <hid_press_key+0x228>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <hid_press_key+0x16a>
        available_slots++;
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	3301      	adds	r3, #1
 80015be:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	3301      	adds	r3, #1
 80015c4:	747b      	strb	r3, [r7, #17]
 80015c6:	7c7b      	ldrb	r3, [r7, #17]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d9f1      	bls.n	80015b0 <hid_press_key+0x14c>
 80015cc:	e000      	b.n	80015d0 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80015ce:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80015d0:	7cba      	ldrb	r2, [r7, #18]
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d350      	bcc.n	800167a <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e042      	b.n	8001668 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	7c3b      	ldrb	r3, [r7, #16]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	0058      	lsls	r0, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	4403      	add	r3, r0
 80015f2:	440b      	add	r3, r1
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d032      	beq.n	8001662 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	7c3b      	ldrb	r3, [r7, #16]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	0058      	lsls	r0, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	4403      	add	r3, r0
 800160c:	440b      	add	r3, r1
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f946 	bl	80018a4 <get_bitmask_for_modifier>
 8001618:	4603      	mov	r3, r0
 800161a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <hid_press_key+0x220>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	4313      	orrs	r3, r2
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <hid_press_key+0x220>)
 800162e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <hid_press_key+0x224>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e014      	b.n	8001662 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	7c3b      	ldrb	r3, [r7, #16]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	0058      	lsls	r0, r3, #1
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	4403      	add	r3, r0
 8001648:	440b      	add	r3, r1
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	b29a      	uxth	r2, r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	b2d1      	uxtb	r1, r2
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <hid_press_key+0x228>)
 8001654:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <hid_press_key+0x224>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001662:	7c3b      	ldrb	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	743b      	strb	r3, [r7, #16]
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d805      	bhi.n	800167a <hid_press_key+0x216>
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9b6      	bls.n	80015e2 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001674:	e001      	b.n	800167a <hid_press_key+0x216>

  default:
    break;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <hid_press_key+0x218>
    break;
 800167a:	bf00      	nop
  }
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002ff 	.word	0x200002ff
 8001688:	200002fe 	.word	0x200002fe
 800168c:	20000300 	.word	0x20000300
 8001690:	20000306 	.word	0x20000306
 8001694:	200002fd 	.word	0x200002fd

08001698 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3305      	adds	r3, #5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	f200 80a7 	bhi.w	800180a <hid_release_key+0x172>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <hid_release_key+0x2c>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	08001703 	.word	0x08001703
 80016c8:	080016d5 	.word	0x080016d5
 80016cc:	08001745 	.word	0x08001745
 80016d0:	08001753 	.word	0x08001753
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	440b      	add	r3, r1
 80016e0:	88db      	ldrh	r3, [r3, #6]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <hid_release_key+0x17c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <hid_release_key+0x17c>)
 80016f8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <hid_release_key+0x180>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
    break;
 8001700:	e084      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e019      	b.n	800173c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a44      	ldr	r2, [pc, #272]	@ (800181c <hid_release_key+0x184>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	4618      	mov	r0, r3
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4298      	cmp	r0, r3
 8001722:	d108      	bne.n	8001736 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4a3d      	ldr	r2, [pc, #244]	@ (800181c <hid_release_key+0x184>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <hid_release_key+0x180>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
        break;
 8001732:	bf00      	nop
      }
    }
    break;
 8001734:	e06a      	b.n	800180c <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9e2      	bls.n	8001708 <hid_release_key+0x70>
    break;
 8001742:	e063      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <hid_release_key+0x188>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <hid_release_key+0x18c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
    break;
 8001750:	e05c      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
 8001756:	e054      	b.n	8001802 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	0058      	lsls	r0, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	4403      	add	r3, r0
 8001768:	440b      	add	r3, r1
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	0058      	lsls	r0, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	4403      	add	r3, r0
 8001782:	440b      	add	r3, r1
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f88b 	bl	80018a4 <get_bitmask_for_modifier>
 800178e:	4603      	mov	r3, r0
 8001790:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00f      	beq.n	80017b8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001798:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <hid_release_key+0x17c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <hid_release_key+0x17c>)
 80017ae:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <hid_release_key+0x180>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e021      	b.n	80017fc <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e01b      	b.n	80017f6 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <hid_release_key+0x184>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	461c      	mov	r4, r3
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	0058      	lsls	r0, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	4403      	add	r3, r0
 80017d6:	440b      	add	r3, r1
 80017d8:	88db      	ldrh	r3, [r3, #6]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	429c      	cmp	r4, r3
 80017de:	d107      	bne.n	80017f0 <hid_release_key+0x158>
              keycodes[i] = 0;
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <hid_release_key+0x184>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <hid_release_key+0x180>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
              break;
 80017ee:	e005      	b.n	80017fc <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	3301      	adds	r3, #1
 80017f4:	737b      	strb	r3, [r7, #13]
 80017f6:	7b7b      	ldrb	r3, [r7, #13]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d9e0      	bls.n	80017be <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	3301      	adds	r3, #1
 8001800:	73bb      	strb	r3, [r7, #14]
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d9a7      	bls.n	8001758 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 8001808:	e000      	b.n	800180c <hid_release_key+0x174>

  default:
    break;
 800180a:	bf00      	nop
  }
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	200002ff 	.word	0x200002ff
 8001818:	200002fe 	.word	0x200002fe
 800181c:	20000300 	.word	0x20000300
 8001820:	20000306 	.word	0x20000306
 8001824:	200002fd 	.word	0x200002fd

08001828 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3be0      	subs	r3, #224	@ 0xe0
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	d822      	bhi.n	80018fc <get_bitmask_for_modifier+0x58>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <get_bitmask_for_modifier+0x18>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018e9 	.word	0x080018e9
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	080018f9 	.word	0x080018f9
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00e      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00c      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 80018e4:	2304      	movs	r3, #4
 80018e6:	e00a      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 80018e8:	2308      	movs	r3, #8
 80018ea:	e008      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 80018ec:	2310      	movs	r3, #16
 80018ee:	e006      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e004      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 80018f4:	2340      	movs	r3, #64	@ 0x40
 80018f6:	e002      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	e000      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 80018fc:	2300      	movs	r3, #0
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d904      	bls.n	8001926 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001922:	b29b      	uxth	r3, r3
 8001924:	e000      	b.n	8001928 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001926:	2300      	movs	r3, #0
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001952:	79f9      	ldrb	r1, [r7, #7]
 8001954:	79ba      	ldrb	r2, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8001964:	fb01 f202 	mul.w	r2, r1, r2
 8001968:	4413      	add	r3, r2
 800196a:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba0 <init_key+0x26c>)
 800196c:	4413      	add	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2200      	movs	r2, #0
 800197a:	711a      	strb	r2, [r3, #4]
  key->row = row;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	793a      	ldrb	r2, [r7, #4]
 8001986:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001990:	2200      	movs	r2, #0
 8001992:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2200      	movs	r2, #0
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 80019a2:	2200      	movs	r2, #0
 80019a4:	f042 0207 	orr.w	r2, r2, #7
 80019a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f062 020b 	orn	r2, r2, #11
 80019b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80019b8:	2200      	movs	r2, #0
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 80019ca:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <init_key+0x270>)
 80019cc:	785a      	ldrb	r2, [r3, #1]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <init_key+0x270>)
 80019d6:	785a      	ldrb	r2, [r3, #1]
 80019d8:	4b72      	ldr	r3, [pc, #456]	@ (8001ba4 <init_key+0x270>)
 80019da:	789b      	ldrb	r3, [r3, #2]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 80019e6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <init_key+0x270>)
 80019e8:	78da      	ldrb	r2, [r3, #3]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e0c6      	b.n	8001b8c <init_key+0x258>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 80019fe:	7df9      	ldrb	r1, [r7, #23]
 8001a00:	797a      	ldrb	r2, [r7, #5]
 8001a02:	793b      	ldrb	r3, [r7, #4]
 8001a04:	4867      	ldr	r0, [pc, #412]	@ (8001ba4 <init_key+0x270>)
 8001a06:	0089      	lsls	r1, r1, #2
 8001a08:	440a      	add	r2, r1
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80b6 	beq.w	8001b86 <init_key+0x252>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	757b      	strb	r3, [r7, #21]
 8001a22:	e015      	b.n	8001a50 <init_key+0x11c>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001a24:	7df8      	ldrb	r0, [r7, #23]
 8001a26:	7979      	ldrb	r1, [r7, #5]
 8001a28:	793a      	ldrb	r2, [r7, #4]
 8001a2a:	7d7b      	ldrb	r3, [r7, #21]
 8001a2c:	4c5d      	ldr	r4, [pc, #372]	@ (8001ba4 <init_key+0x270>)
 8001a2e:	0080      	lsls	r0, r0, #2
 8001a30:	4401      	add	r1, r0
 8001a32:	0089      	lsls	r1, r1, #2
 8001a34:	440a      	add	r2, r1
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <init_key+0x116>
          macro_count++;
 8001a44:	7dbb      	ldrb	r3, [r7, #22]
 8001a46:	3301      	adds	r3, #1
 8001a48:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a4a:	7d7b      	ldrb	r3, [r7, #21]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	757b      	strb	r3, [r7, #21]
 8001a50:	7d7b      	ldrb	r3, [r7, #21]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d9e6      	bls.n	8001a24 <init_key+0xf0>
        }
      }

      if (macro_count > 1) {
 8001a56:	7dbb      	ldrb	r3, [r7, #22]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d92b      	bls.n	8001ab4 <init_key+0x180>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001a5c:	7dfa      	ldrb	r2, [r7, #23]
 8001a5e:	6939      	ldr	r1, [r7, #16]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	3305      	adds	r3, #5
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	753b      	strb	r3, [r7, #20]
 8001a72:	e01b      	b.n	8001aac <init_key+0x178>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001a74:	7dfd      	ldrb	r5, [r7, #23]
 8001a76:	797c      	ldrb	r4, [r7, #5]
 8001a78:	7938      	ldrb	r0, [r7, #4]
 8001a7a:	7d39      	ldrb	r1, [r7, #20]
 8001a7c:	7dfa      	ldrb	r2, [r7, #23]
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4e48      	ldr	r6, [pc, #288]	@ (8001ba4 <init_key+0x270>)
 8001a82:	00ad      	lsls	r5, r5, #2
 8001a84:	442c      	add	r4, r5
 8001a86:	00a4      	lsls	r4, r4, #2
 8001a88:	4420      	add	r0, r4
 8001a8a:	0080      	lsls	r0, r0, #2
 8001a8c:	4401      	add	r1, r0
 8001a8e:	3104      	adds	r1, #4
 8001a90:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	0058      	lsls	r0, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4403      	add	r3, r0
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001aa6:	7d3b      	ldrb	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	753b      	strb	r3, [r7, #20]
 8001aac:	7d3b      	ldrb	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d9e0      	bls.n	8001a74 <init_key+0x140>
 8001ab2:	e068      	b.n	8001b86 <init_key+0x252>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001ab4:	7df9      	ldrb	r1, [r7, #23]
 8001ab6:	797a      	ldrb	r2, [r7, #5]
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	483a      	ldr	r0, [pc, #232]	@ (8001ba4 <init_key+0x270>)
 8001abc:	0089      	lsls	r1, r1, #2
 8001abe:	440a      	add	r2, r1
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff1e 	bl	800190c <get_usage_consumer_control>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d011      	beq.n	8001afe <init_key+0x1ca>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001ada:	7dfa      	ldrb	r2, [r7, #23]
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3305      	adds	r3, #5
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001aec:	7dfa      	ldrb	r2, [r7, #23]
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	89fa      	ldrh	r2, [r7, #14]
 8001afa:	80da      	strh	r2, [r3, #6]
 8001afc:	e043      	b.n	8001b86 <init_key+0x252>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001afe:	7df9      	ldrb	r1, [r7, #23]
 8001b00:	797a      	ldrb	r2, [r7, #5]
 8001b02:	793b      	ldrb	r3, [r7, #4]
 8001b04:	4827      	ldr	r0, [pc, #156]	@ (8001ba4 <init_key+0x270>)
 8001b06:	0089      	lsls	r1, r1, #2
 8001b08:	440a      	add	r2, r1
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fec4 	bl	80018a4 <get_bitmask_for_modifier>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d013      	beq.n	8001b4e <init_key+0x21a>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001b26:	7dfa      	ldrb	r2, [r7, #23]
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	3305      	adds	r3, #5
 8001b34:	2202      	movs	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	4602      	mov	r2, r0
 8001b4a:	80da      	strh	r2, [r3, #6]
 8001b4c:	e01b      	b.n	8001b86 <init_key+0x252>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3305      	adds	r3, #5
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001b60:	7df8      	ldrb	r0, [r7, #23]
 8001b62:	7979      	ldrb	r1, [r7, #5]
 8001b64:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001b66:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001b68:	4c0e      	ldr	r4, [pc, #56]	@ (8001ba4 <init_key+0x270>)
 8001b6a:	0080      	lsls	r0, r0, #2
 8001b6c:	4401      	add	r1, r0
 8001b6e:	0089      	lsls	r1, r1, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3301      	adds	r3, #1
 8001b74:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	4602      	mov	r2, r0
 8001b84:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f67f af35 	bls.w	80019fe <init_key+0xca>
          }
        }
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000308 	.word	0x20000308
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001bb0:	4bab      	ldr	r3, [pc, #684]	@ (8001e60 <update_key_state+0x2b8>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <update_key_state+0x20>
 8001bb8:	f001 fa00 	bl	8002fbc <keyboard_read_adc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001bc2:	330f      	adds	r3, #15
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	e002      	b.n	8001bce <update_key_state+0x26>
 8001bc8:	f001 f9f8 	bl	8002fbc <keyboard_read_adc>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b13      	cmp	r3, #19
 8001bda:	d82f      	bhi.n	8001c3c <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8001e64 <update_key_state+0x2bc>)
 8001bde:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1a:	ee17 3a90 	vmov	r3, s15
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e10c      	b.n	8001e56 <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001c3c:	893a      	ldrh	r2, [r7, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d929      	bls.n	8001c9e <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001c4a:	4b87      	ldr	r3, [pc, #540]	@ (8001e68 <update_key_state+0x2c0>)
 8001c4c:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5a:	893b      	ldrh	r3, [r7, #8]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d117      	bne.n	8001cda <update_key_state+0x132>
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b0a      	subs	r3, #10
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	db0e      	blt.n	8001cda <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	2b0e      	cmp	r3, #14
 8001cc2:	d904      	bls.n	8001cce <update_key_state+0x126>
      key->is_idle = 1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
      return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e0c3      	b.n	8001e56 <update_key_state+0x2ae>
    }
    key->idle_counter++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	78db      	ldrb	r3, [r3, #3]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b0a      	subs	r3, #10
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	db06      	blt.n	8001cfa <update_key_state+0x152>
    state.distance = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001cf8:	e00f      	b.n	8001d1a <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b0a      	subs	r3, #10
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001d1a:	897a      	ldrh	r2, [r7, #10]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d903      	bls.n	8001d30 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001d28:	897a      	ldrh	r2, [r7, #10]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001d30:	897b      	ldrh	r3, [r7, #10]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b3c      	subs	r3, #60	@ 0x3c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	db04      	blt.n	8001d4c <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4613      	mov	r3, r2
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001d66:	4b40      	ldr	r3, [pc, #256]	@ (8001e68 <update_key_state+0x2c0>)
 8001d68:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8c:	ee06 3a90 	vmov	s13, r3
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	ee17 3a90 	vmov	r3, s15
 8001d9c:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001da0:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	edc7 7a00 	vstr	s15, [r7]
 8001db0:	783b      	ldrb	r3, [r7, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001db6:	7cba      	ldrb	r2, [r7, #18]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dd18      	ble.n	8001e02 <update_key_state+0x25a>
 8001dd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd14      	ble.n	8001e02 <update_key_state+0x25a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00f      	beq.n	8001e02 <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8001e00:	e01c      	b.n	8001e3c <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da17      	bge.n	8001e3c <update_key_state+0x294>
 8001e0c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da13      	bge.n	8001e3c <update_key_state+0x294>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001e2c:	2bff      	cmp	r3, #255	@ 0xff
 8001e2e:	d005      	beq.n	8001e3c <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	cb03      	ldmia	r3!, {r0, r1}
 8001e48:	6010      	str	r0, [r2, #0]
 8001e4a:	6051      	str	r1, [r2, #4]
 8001e4c:	8819      	ldrh	r1, [r3, #0]
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	8111      	strh	r1, [r2, #8]
 8001e52:	7293      	strb	r3, [r2, #10]
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	3f19999a 	.word	0x3f19999a
 8001e68:	3f4ccccd 	.word	0x3f4ccccd

08001e6c <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001e78:	f001 f8b6 	bl	8002fe8 <keyboard_get_time>
 8001e7c:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	bf8c      	ite	hi
 8001e8e:	2301      	movhi	r3, #1
 8001e90:	2300      	movls	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	bf34      	ite	cc
 8001ea6:	2301      	movcc	r3, #1
 8001ea8:	2300      	movcs	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ece:	461a      	mov	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8002054 <update_key_actuation+0x1e8>)
 8001eda:	7892      	ldrb	r2, [r2, #2]
 8001edc:	4413      	add	r3, r2
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	bfcc      	ite	gt
 8001ee2:	2301      	movgt	r3, #1
 8001ee4:	2300      	movle	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ef8:	4619      	mov	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	bfb4      	ite	lt
 8001f06:	2301      	movlt	r3, #1
 8001f08:	2300      	movge	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f14:	3b01      	subs	r3, #1
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	f200 8091 	bhi.w	800203e <update_key_actuation+0x1d2>
 8001f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <update_key_actuation+0xb8>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001fe9 	.word	0x08001fe9
 8001f28:	08001ffb 	.word	0x08001ffb
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001f75 	.word	0x08001f75

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8083 	beq.w	8002042 <update_key_actuation+0x1d6>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f50:	e00b      	b.n	8001f6a <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <update_key_actuation+0x1ec>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fa7d 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    }
    break;
 8001f72:	e066      	b.n	8002042 <update_key_actuation+0x1d6>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <update_key_actuation+0x118>
      key->actuation.status = STATUS_RESET;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 8001f82:	e063      	b.n	800204c <update_key_actuation+0x1e0>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d026      	beq.n	8001fd8 <update_key_actuation+0x16c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d121      	bne.n	8001fd8 <update_key_actuation+0x16c>
 8001f94:	7c3b      	ldrb	r3, [r7, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01e      	beq.n	8001fd8 <update_key_actuation+0x16c>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <update_key_actuation+0x14a>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <update_key_actuation+0x1ec>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e00b      	b.n	8001fce <update_key_actuation+0x162>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <update_key_actuation+0x1ec>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fa4b 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001fd6:	e036      	b.n	8002046 <update_key_actuation+0x1da>
    } else if (is_before_reset_offset) {
 8001fd8:	7cbb      	ldrb	r3, [r7, #18]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d033      	beq.n	8002046 <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RESET;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 8001fe6:	e02e      	b.n	8002046 <update_key_actuation+0x1da>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fb50 	bl	8001698 <hid_release_key>
    break;
 8001ff8:	e028      	b.n	800204c <update_key_actuation+0x1e0>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001ffa:	7cbb      	ldrb	r3, [r7, #18]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <update_key_actuation+0x1a8>
      key->actuation.status = STATUS_RESET;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fb43 	bl	8001698 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 8002012:	e01a      	b.n	800204a <update_key_actuation+0x1de>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8002014:	7c7b      	ldrb	r3, [r7, #17]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <update_key_actuation+0x1de>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <update_key_actuation+0x1de>
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00f      	beq.n	800204a <update_key_actuation+0x1de>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2204      	movs	r2, #4
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fb2e 	bl	8001698 <hid_release_key>
    break;
 800203c:	e005      	b.n	800204a <update_key_actuation+0x1de>

  default:
    break;
 800203e:	bf00      	nop
 8002040:	e004      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 800204a:	bf00      	nop
  }
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000000 	.word	0x20000000
 8002058:	2000075c 	.word	0x2000075c

0800205c <update_key>:

void update_key(struct key *key) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fd9f 	bl	8001ba8 <update_key_state>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <update_key+0x2c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fef7 	bl	8001e6c <update_key_actuation>
 800207e:	e000      	b.n	8002082 <update_key+0x26>
    return;
 8002080:	bf00      	nop
}
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000cf8 	.word	0x20000cf8

0800208c <keyboard_init_keys>:

void keyboard_init_keys() {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e027      	b.n	80020e8 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002098:	2300      	movs	r3, #0
 800209a:	71bb      	strb	r3, [r7, #6]
 800209c:	e01e      	b.n	80020dc <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	4915      	ldr	r1, [pc, #84]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80020ac:	2bff      	cmp	r3, #255	@ 0xff
 80020ae:	d012      	beq.n	80020d6 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80020b0:	79fa      	ldrb	r2, [r7, #7]
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	4910      	ldr	r1, [pc, #64]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80020be:	79fa      	ldrb	r2, [r7, #7]
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	440b      	add	r3, r1
 80020cc:	7859      	ldrb	r1, [r3, #1]
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	f7ff fc2f 	bl	8001934 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	3301      	adds	r3, #1
 80020da:	71bb      	strb	r3, [r7, #6]
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9dd      	bls.n	800209e <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	3301      	adds	r3, #1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d9d4      	bls.n	8002098 <keyboard_init_keys+0xc>
      }
    }
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	0800e80c 	.word	0x0800e80c

080020fc <keyboard_task>:

void keyboard_task() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002102:	f000 ff71 	bl	8002fe8 <keyboard_get_time>
 8002106:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <keyboard_task+0x1a8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e039      	b.n	8002188 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 ff0c 	bl	8002f34 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800211c:	2300      	movs	r3, #0
 800211e:	73bb      	strb	r3, [r7, #14]
 8002120:	e02c      	b.n	800217c <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8002122:	7bb9      	ldrb	r1, [r7, #14]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	4860      	ldr	r0, [pc, #384]	@ (80022a8 <keyboard_task+0x1ac>)
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002136:	fb01 f202 	mul.w	r2, r1, r2
 800213a:	4413      	add	r3, r2
 800213c:	4403      	add	r3, r0
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ff1c 	bl	8002f84 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 800214c:	7bb9      	ldrb	r1, [r7, #14]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	4413      	add	r3, r2
 8002164:	4a50      	ldr	r2, [pc, #320]	@ (80022a8 <keyboard_task+0x1ac>)
 8002166:	4413      	add	r3, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff77 	bl	800205c <update_key>

      keyboard_close_adc();
 800216e:	f000 ff31 	bl	8002fd4 <keyboard_close_adc>
 8002172:	e000      	b.n	8002176 <keyboard_task+0x7a>
        continue;
 8002174:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	3301      	adds	r3, #1
 800217a:	73bb      	strb	r3, [r7, #14]
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0cf      	beq.n	8002122 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3301      	adds	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d9c2      	bls.n	8002114 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800218e:	2300      	movs	r3, #0
 8002190:	737b      	strb	r3, [r7, #13]
 8002192:	e078      	b.n	8002286 <keyboard_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002194:	2300      	movs	r3, #0
 8002196:	733b      	strb	r3, [r7, #12]
 8002198:	e06f      	b.n	800227a <keyboard_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800219a:	7b39      	ldrb	r1, [r7, #12]
 800219c:	7b7a      	ldrb	r2, [r7, #13]
 800219e:	4842      	ldr	r0, [pc, #264]	@ (80022a8 <keyboard_task+0x1ac>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
 80021b2:	4413      	add	r3, r2
 80021b4:	4403      	add	r3, r0
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05a      	beq.n	8002272 <keyboard_task+0x176>
 80021bc:	7b39      	ldrb	r1, [r7, #12]
 80021be:	7b7a      	ldrb	r2, [r7, #13]
 80021c0:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <keyboard_task+0x1ac>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021d0:	fb01 f202 	mul.w	r2, r1, r2
 80021d4:	4413      	add	r3, r2
 80021d6:	4403      	add	r3, r0
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d148      	bne.n	8002272 <keyboard_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80021e0:	7b39      	ldrb	r1, [r7, #12]
 80021e2:	7b7a      	ldrb	r2, [r7, #13]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021f2:	fb01 f202 	mul.w	r2, r1, r2
 80021f6:	4413      	add	r3, r2
 80021f8:	4a2b      	ldr	r2, [pc, #172]	@ (80022a8 <keyboard_task+0x1ac>)
 80021fa:	4413      	add	r3, r2
 80021fc:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220a:	429a      	cmp	r2, r3
 800220c:	bf34      	ite	cc
 800220e:	2301      	movcc	r3, #1
 8002210:	2300      	movcs	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8002216:	f000 fee7 	bl	8002fe8 <keyboard_get_time>
 800221a:	4602      	mov	r2, r0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <keyboard_task+0x1b0>)
 8002226:	88d2      	ldrh	r2, [r2, #6]
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <keyboard_task+0x156>
 800223a:	78bb      	ldrb	r3, [r7, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <keyboard_task+0x156>
        key->actuation.status = STATUS_TAP;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002248:	2101      	movs	r1, #1
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f90a 	bl	8001464 <hid_press_key>
 8002250:	e010      	b.n	8002274 <keyboard_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 8002252:	78bb      	ldrb	r3, [r7, #2]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <keyboard_task+0x164>
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <keyboard_task+0x1a8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <keyboard_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff f8fa 	bl	8001464 <hid_press_key>
 8002270:	e000      	b.n	8002274 <keyboard_task+0x178>
        continue;
 8002272:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	733b      	strb	r3, [r7, #12]
 800227a:	7b3b      	ldrb	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d08c      	beq.n	800219a <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	3301      	adds	r3, #1
 8002284:	737b      	strb	r3, [r7, #13]
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d983      	bls.n	8002194 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800228c:	f000 feac 	bl	8002fe8 <keyboard_get_time>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <keyboard_task+0x1b4>)
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000075c 	.word	0x2000075c
 80022a8:	20000308 	.word	0x20000308
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000758 	.word	0x20000758

080022b4 <snaptap_task>:

void snaptap_task() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80022ba:	f000 fe95 	bl	8002fe8 <keyboard_get_time>
 80022be:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 80022c0:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <snaptap_task+0x234>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	77fb      	strb	r3, [r7, #31]
 80022ca:	e039      	b.n	8002340 <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80022cc:	7ffb      	ldrb	r3, [r7, #31]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fe30 	bl	8002f34 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	77bb      	strb	r3, [r7, #30]
 80022d8:	e02c      	b.n	8002334 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80022da:	7fb9      	ldrb	r1, [r7, #30]
 80022dc:	7ffa      	ldrb	r2, [r7, #31]
 80022de:	4883      	ldr	r0, [pc, #524]	@ (80024ec <snaptap_task+0x238>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80022ee:	fb01 f202 	mul.w	r2, r1, r2
 80022f2:	4413      	add	r3, r2
 80022f4:	4403      	add	r3, r0
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80022fc:	7fbb      	ldrb	r3, [r7, #30]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fe40 	bl	8002f84 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002304:	7fb9      	ldrb	r1, [r7, #30]
 8002306:	7ffa      	ldrb	r2, [r7, #31]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002316:	fb01 f202 	mul.w	r2, r1, r2
 800231a:	4413      	add	r3, r2
 800231c:	4a73      	ldr	r2, [pc, #460]	@ (80024ec <snaptap_task+0x238>)
 800231e:	4413      	add	r3, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe9b 	bl	800205c <update_key>

      keyboard_close_adc();
 8002326:	f000 fe55 	bl	8002fd4 <keyboard_close_adc>
 800232a:	e000      	b.n	800232e <snaptap_task+0x7a>
        continue;
 800232c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800232e:	7fbb      	ldrb	r3, [r7, #30]
 8002330:	3301      	adds	r3, #1
 8002332:	77bb      	strb	r3, [r7, #30]
 8002334:	7fbb      	ldrb	r3, [r7, #30]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0cf      	beq.n	80022da <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	3301      	adds	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d9c2      	bls.n	80022cc <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002346:	2300      	movs	r3, #0
 8002348:	777b      	strb	r3, [r7, #29]
 800234a:	e078      	b.n	800243e <snaptap_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800234c:	2300      	movs	r3, #0
 800234e:	773b      	strb	r3, [r7, #28]
 8002350:	e06f      	b.n	8002432 <snaptap_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002352:	7f39      	ldrb	r1, [r7, #28]
 8002354:	7f7a      	ldrb	r2, [r7, #29]
 8002356:	4865      	ldr	r0, [pc, #404]	@ (80024ec <snaptap_task+0x238>)
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002366:	fb01 f202 	mul.w	r2, r1, r2
 800236a:	4413      	add	r3, r2
 800236c:	4403      	add	r3, r0
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05a      	beq.n	800242a <snaptap_task+0x176>
 8002374:	7f39      	ldrb	r1, [r7, #28]
 8002376:	7f7a      	ldrb	r2, [r7, #29]
 8002378:	485c      	ldr	r0, [pc, #368]	@ (80024ec <snaptap_task+0x238>)
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002388:	fb01 f202 	mul.w	r2, r1, r2
 800238c:	4413      	add	r3, r2
 800238e:	4403      	add	r3, r0
 8002390:	333c      	adds	r3, #60	@ 0x3c
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d148      	bne.n	800242a <snaptap_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002398:	7f39      	ldrb	r1, [r7, #28]
 800239a:	7f7a      	ldrb	r2, [r7, #29]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80023aa:	fb01 f202 	mul.w	r2, r1, r2
 80023ae:	4413      	add	r3, r2
 80023b0:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <snaptap_task+0x238>)
 80023b2:	4413      	add	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c2:	429a      	cmp	r2, r3
 80023c4:	bf34      	ite	cc
 80023c6:	2301      	movcc	r3, #1
 80023c8:	2300      	movcs	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023ce:	f000 fe0b 	bl	8002fe8 <keyboard_get_time>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a44      	ldr	r2, [pc, #272]	@ (80024f0 <snaptap_task+0x23c>)
 80023de:	88d2      	ldrh	r2, [r2, #6]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <snaptap_task+0x156>
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <snaptap_task+0x156>
        key->actuation.status = STATUS_TAP;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002400:	2101      	movs	r1, #1
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	f7ff f82e 	bl	8001464 <hid_press_key>
 8002408:	e010      	b.n	800242c <snaptap_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 800240a:	79bb      	ldrb	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <snaptap_task+0x164>
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <snaptap_task+0x234>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <snaptap_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002420:	2100      	movs	r1, #0
 8002422:	68b8      	ldr	r0, [r7, #8]
 8002424:	f7ff f81e 	bl	8001464 <hid_press_key>
 8002428:	e000      	b.n	800242c <snaptap_task+0x178>
        continue;
 800242a:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800242c:	7f3b      	ldrb	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	773b      	strb	r3, [r7, #28]
 8002432:	7f3b      	ldrb	r3, [r7, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d08c      	beq.n	8002352 <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002438:	7f7b      	ldrb	r3, [r7, #29]
 800243a:	3301      	adds	r3, #1
 800243c:	777b      	strb	r3, [r7, #29]
 800243e:	7f7b      	ldrb	r3, [r7, #29]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d983      	bls.n	800234c <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002444:	f000 fdd0 	bl	8002fe8 <keyboard_get_time>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <snaptap_task+0x240>)
 8002450:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	e029      	b.n	80024b0 <snaptap_task+0x1fc>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800245c:	2300      	movs	r3, #0
 800245e:	75bb      	strb	r3, [r7, #22]
 8002460:	e01d      	b.n	800249e <snaptap_task+0x1ea>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8002462:	7db9      	ldrb	r1, [r7, #22]
 8002464:	7dfa      	ldrb	r2, [r7, #23]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002474:	fb01 f202 	mul.w	r2, r1, r2
 8002478:	4413      	add	r3, r2
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <snaptap_task+0x238>)
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <snaptap_task+0x1e4>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b02      	cmp	r3, #2
 8002490:	d102      	bne.n	8002498 <snaptap_task+0x1e4>
              new_pressed_key = key;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	61bb      	str	r3, [r7, #24]
              break;
 8002496:	e005      	b.n	80024a4 <snaptap_task+0x1f0>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002498:	7dbb      	ldrb	r3, [r7, #22]
 800249a:	3301      	adds	r3, #1
 800249c:	75bb      	strb	r3, [r7, #22]
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0de      	beq.n	8002462 <snaptap_task+0x1ae>
          }
      }
      if (new_pressed_key) break;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <snaptap_task+0x204>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	3301      	adds	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d9d2      	bls.n	800245c <snaptap_task+0x1a8>
 80024b6:	e000      	b.n	80024ba <snaptap_task+0x206>
      if (new_pressed_key) break;
 80024b8:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <snaptap_task+0x244>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d00c      	beq.n	80024de <snaptap_task+0x22a>
      if (current_pressed_key) {
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <snaptap_task+0x244>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <snaptap_task+0x224>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <snaptap_task+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8e0 	bl	8001698 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <snaptap_task+0x244>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  }
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000075c 	.word	0x2000075c
 80024ec:	20000308 	.word	0x20000308
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000758 	.word	0x20000758
 80024f8:	20000760 	.word	0x20000760

080024fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b8      	sub	sp, #224	@ 0xe0
 8002500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002502:	f001 fb3b 	bl	8003b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002506:	f000 fb59 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250a:	f000 fc6d 	bl	8002de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800250e:	f000 fbbd 	bl	8002c8c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002512:	f000 fc3b 	bl	8002d8c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002516:	f000 fc0b 	bl	8002d30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800251a:	4bb0      	ldr	r3, [pc, #704]	@ (80027dc <main+0x2e0>)
 800251c:	2201      	movs	r2, #1
 800251e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002520:	4bae      	ldr	r3, [pc, #696]	@ (80027dc <main+0x2e0>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8002526:	f7ff fdb1 	bl	800208c <keyboard_init_keys>
  ssd1306_Init();
 800252a:	f000 fda3 	bl	8003074 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 800252e:	4bac      	ldr	r3, [pc, #688]	@ (80027e0 <main+0x2e4>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002534:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002538:	4619      	mov	r1, r3
 800253a:	2000      	movs	r0, #0
 800253c:	f009 ffb0 	bl	800c4a0 <tusb_rhport_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;
  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 8002540:	f001 fb82 	bl	8003c48 <HAL_GetTick>
 8002544:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  tud_task_ext(UINT32_MAX, false);
 8002548:	2100      	movs	r1, #0
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f006 fb59 	bl	8008c04 <tud_task_ext>
}
 8002552:	bf00      	nop
    tud_task();
    
    // Detect mode key by HID code
    struct key *mode_key = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    struct key *layer_key = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002566:	e032      	b.n	80025ce <main+0xd2>
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800256e:	e025      	b.n	80025bc <main+0xc0>
            struct key *k = &keyboard_keys[adc][amux];
 8002570:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002582:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002586:	fb01 f202 	mul.w	r2, r1, r2
 800258a:	4413      	add	r3, r2
 800258c:	4a95      	ldr	r2, [pc, #596]	@ (80027e4 <main+0x2e8>)
 800258e:	4413      	add	r3, r2
 8002590:	673b      	str	r3, [r7, #112]	@ 0x70
            if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 8002592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002594:	88db      	ldrh	r3, [r3, #6]
 8002596:	b29b      	uxth	r3, r3
 8002598:	2bf0      	cmp	r3, #240	@ 0xf0
 800259a:	d102      	bne.n	80025a2 <main+0xa6>
                mode_key = k;
 800259c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            }
            if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 80025a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a4:	88db      	ldrh	r3, [r3, #6]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2bf1      	cmp	r3, #241	@ 0xf1
 80025aa:	d102      	bne.n	80025b2 <main+0xb6>
                layer_key = k;
 80025ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 80025b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025b6:	3301      	adds	r3, #1
 80025b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	ddd5      	ble.n	8002570 <main+0x74>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 80025c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	ddc8      	ble.n	8002568 <main+0x6c>
            }
        }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 80025d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <main+0xf2>
 80025de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d101      	bne.n	80025ee <main+0xf2>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <main+0xf4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 80025f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <main+0x110>
 80025fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b02      	cmp	r3, #2
 8002606:	d101      	bne.n	800260c <main+0x110>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <main+0x112>
 800260c:	2300      	movs	r3, #0
 800260e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    if (mode_key_pressed && !last_mode_key_pressed) {
 8002612:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d033      	beq.n	8002682 <main+0x186>
 800261a:	4b73      	ldr	r3, [pc, #460]	@ (80027e8 <main+0x2ec>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12f      	bne.n	8002682 <main+0x186>
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 8002622:	4b72      	ldr	r3, [pc, #456]	@ (80027ec <main+0x2f0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4b6e      	ldr	r3, [pc, #440]	@ (80027ec <main+0x2f0>)
 8002634:	701a      	strb	r2, [r3, #0]
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002636:	4b6d      	ldr	r3, [pc, #436]	@ (80027ec <main+0x2f0>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <main+0x162>
 800263e:	4b6c      	ldr	r3, [pc, #432]	@ (80027f0 <main+0x2f4>)
 8002640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002642:	2300      	movs	r3, #0
 8002644:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 800264c:	2211      	movs	r2, #17
 800264e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002652:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002654:	4618      	mov	r0, r3
 8002656:	f004 f9c7 	bl	80069e8 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 800265a:	bf00      	nop
 800265c:	e00e      	b.n	800267c <main+0x180>
 800265e:	4b65      	ldr	r3, [pc, #404]	@ (80027f4 <main+0x2f8>)
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
 8002662:	2300      	movs	r3, #0
 8002664:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 800266c:	2210      	movs	r2, #16
 800266e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002672:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002674:	4618      	mov	r0, r3
 8002676:	f004 f9b7 	bl	80069e8 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 800267a:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 800267c:	2000      	movs	r0, #0
 800267e:	f004 f9e7 	bl	8006a50 <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 8002682:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d046      	beq.n	8002718 <main+0x21c>
 800268a:	4b5b      	ldr	r3, [pc, #364]	@ (80027f8 <main+0x2fc>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d142      	bne.n	8002718 <main+0x21c>
        // Toggle tuần tự giữa BASE, ALT, ALT2
        if (current_layer == _BASE_LAYER) {
 8002692:	4b5a      	ldr	r3, [pc, #360]	@ (80027fc <main+0x300>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d112      	bne.n	80026c0 <main+0x1c4>
            current_layer = _ALT_LAYER;
 800269a:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <main+0x300>)
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b57      	ldr	r3, [pc, #348]	@ (8002800 <main+0x304>)
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80026aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 80026ae:	220c      	movs	r2, #12
 80026b0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80026b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f996 	bl	80069e8 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026bc:	bf00      	nop
 80026be:	e028      	b.n	8002712 <main+0x216>
            tud_cdc_write_str("Layer: ALT\r\n");
        } else if (current_layer == _ALT_LAYER) {
 80026c0:	4b4e      	ldr	r3, [pc, #312]	@ (80027fc <main+0x300>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d112      	bne.n	80026ee <main+0x1f2>
            current_layer = _ALT_LAYER_2;
 80026c8:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <main+0x300>)
 80026ca:	2203      	movs	r2, #3
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002804 <main+0x308>)
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80026d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 80026dc:	220d      	movs	r2, #13
 80026de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f97f 	bl	80069e8 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026ea:	bf00      	nop
 80026ec:	e011      	b.n	8002712 <main+0x216>
            tud_cdc_write_str("Layer: ALT2\r\n");
        } else {
            current_layer = _BASE_LAYER;
 80026ee:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <main+0x300>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <main+0x30c>)
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80026fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 8002702:	220d      	movs	r2, #13
 8002704:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002708:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f96c 	bl	80069e8 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002710:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002712:	2000      	movs	r0, #0
 8002714:	f004 f99c 	bl	8006a50 <tud_cdc_n_write_flush>
            tud_cdc_write_str("Layer: BASE\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 8002718:	4a33      	ldr	r2, [pc, #204]	@ (80027e8 <main+0x2ec>)
 800271a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800271e:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 8002720:	4a35      	ldr	r2, [pc, #212]	@ (80027f8 <main+0x2fc>)
 8002722:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8002726:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002728:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <main+0x2f0>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <main+0x23a>
        keyboard_task();
 8002730:	f7ff fce4 	bl	80020fc <keyboard_task>
 8002734:	e001      	b.n	800273a <main+0x23e>
    } else {
        snaptap_task();
 8002736:	f7ff fdbd 	bl	80022b4 <snaptap_task>
    }
    //snaptap_task();
    //keyboard_task();
    hid_task();
 800273a:	f7fe fe43 	bl	80013c4 <hid_task>
    cdc_task();
 800273e:	f7fd ff7f 	bl	8000640 <cdc_task>
    cdc_performance_measure(start_at);
 8002742:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002746:	f7fd ff49 	bl	80005dc <cdc_performance_measure>
    ssd1306_Fill(White);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 fcfc 	bl	8003148 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
 8002754:	f000 ff30 	bl	80035b8 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	233f      	movs	r3, #63	@ 0x3f
 800275e:	227f      	movs	r2, #127	@ 0x7f
 8002760:	2100      	movs	r1, #0
 8002762:	2000      	movs	r0, #0
 8002764:	f000 fec0 	bl	80034e8 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 8002768:	2300      	movs	r3, #0
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2320      	movs	r3, #32
 800276e:	227f      	movs	r2, #127	@ 0x7f
 8002770:	2120      	movs	r1, #32
 8002772:	2026      	movs	r0, #38	@ 0x26
 8002774:	f000 fe4c 	bl	8003410 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 8002778:	2300      	movs	r3, #0
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	233f      	movs	r3, #63	@ 0x3f
 800277e:	2226      	movs	r2, #38	@ 0x26
 8002780:	2100      	movs	r1, #0
 8002782:	2026      	movs	r0, #38	@ 0x26
 8002784:	f000 fe44 	bl	8003410 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002788:	2301      	movs	r3, #1
 800278a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800278e:	e016      	b.n	80027be <main+0x2c2>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002790:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	3326      	adds	r3, #38	@ 0x26
 800279e:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 80027a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a2:	b2d8      	uxtb	r0, r3
 80027a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	233f      	movs	r3, #63	@ 0x3f
 80027ae:	2100      	movs	r1, #0
 80027b0:	f000 fe2e 	bl	8003410 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80027b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027b8:	3301      	adds	r3, #1
 80027ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	dde4      	ble.n	8002790 <main+0x294>
    }

    int mod_y = 2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    const int mod_line_height = 10;
 80027cc:	230a      	movs	r3, #10
 80027ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80027d8:	e090      	b.n	80028fc <main+0x400>
 80027da:	bf00      	nop
 80027dc:	20000ce4 	.word	0x20000ce4
 80027e0:	0800e5cc 	.word	0x0800e5cc
 80027e4:	20000308 	.word	0x20000308
 80027e8:	20000cf5 	.word	0x20000cf5
 80027ec:	20000cf4 	.word	0x20000cf4
 80027f0:	0800e52c 	.word	0x0800e52c
 80027f4:	0800e540 	.word	0x0800e540
 80027f8:	20000cf6 	.word	0x20000cf6
 80027fc:	20000cf8 	.word	0x20000cf8
 8002800:	0800e554 	.word	0x0800e554
 8002804:	0800e564 	.word	0x0800e564
 8002808:	0800e574 	.word	0x0800e574
      struct key *k = &keyboard_keys[0][amux];
 800280c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	4ab0      	ldr	r2, [pc, #704]	@ (8002adc <main+0x5e0>)
 800281c:	4413      	add	r3, r2
 800281e:	67fb      	str	r3, [r7, #124]	@ 0x7c

      if (k->state.distance_8bits > 20 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002820:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002822:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002826:	2b14      	cmp	r3, #20
 8002828:	d963      	bls.n	80028f2 <main+0x3f6>
 800282a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800282c:	795b      	ldrb	r3, [r3, #5]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d15f      	bne.n	80028f2 <main+0x3f6>
        uint8_t bitmask = k->layers[_BASE_LAYER].value;
 8002832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002834:	3306      	adds	r3, #6
 8002836:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        const char *label = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

        if (bitmask == 0b00000001)
 8002840:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002844:	2b01      	cmp	r3, #1
 8002846:	d103      	bne.n	8002850 <main+0x354>
          label = "LCtrl";
 8002848:	4ba5      	ldr	r3, [pc, #660]	@ (8002ae0 <main+0x5e4>)
 800284a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800284e:	e036      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b00000010)
 8002850:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002854:	2b02      	cmp	r3, #2
 8002856:	d103      	bne.n	8002860 <main+0x364>
          label = "LShift";
 8002858:	4ba2      	ldr	r3, [pc, #648]	@ (8002ae4 <main+0x5e8>)
 800285a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800285e:	e02e      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b00000100)
 8002860:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002864:	2b04      	cmp	r3, #4
 8002866:	d103      	bne.n	8002870 <main+0x374>
          label = "LAlt";
 8002868:	4b9f      	ldr	r3, [pc, #636]	@ (8002ae8 <main+0x5ec>)
 800286a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800286e:	e026      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b00001000)
 8002870:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002874:	2b08      	cmp	r3, #8
 8002876:	d103      	bne.n	8002880 <main+0x384>
          label = "LGUI";
 8002878:	4b9c      	ldr	r3, [pc, #624]	@ (8002aec <main+0x5f0>)
 800287a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800287e:	e01e      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b00010000)
 8002880:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002884:	2b10      	cmp	r3, #16
 8002886:	d103      	bne.n	8002890 <main+0x394>
          label = "RCtrl";
 8002888:	4b99      	ldr	r3, [pc, #612]	@ (8002af0 <main+0x5f4>)
 800288a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800288e:	e016      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b00100000)
 8002890:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002894:	2b20      	cmp	r3, #32
 8002896:	d103      	bne.n	80028a0 <main+0x3a4>
          label = "RShift";
 8002898:	4b96      	ldr	r3, [pc, #600]	@ (8002af4 <main+0x5f8>)
 800289a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800289e:	e00e      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b01000000)
 80028a0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028a4:	2b40      	cmp	r3, #64	@ 0x40
 80028a6:	d103      	bne.n	80028b0 <main+0x3b4>
          label = "RAlt";
 80028a8:	4b93      	ldr	r3, [pc, #588]	@ (8002af8 <main+0x5fc>)
 80028aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028ae:	e006      	b.n	80028be <main+0x3c2>
        else if (bitmask == 0b10000000)
 80028b0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028b4:	2b80      	cmp	r3, #128	@ 0x80
 80028b6:	d102      	bne.n	80028be <main+0x3c2>
          label = "RGUI";
 80028b8:	4b90      	ldr	r3, [pc, #576]	@ (8002afc <main+0x600>)
 80028ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

        if (label) {
 80028be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <main+0x3f6>
          ssd1306_SetCursor(2, mod_y);
 80028c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	2002      	movs	r0, #2
 80028d0:	f000 fd86 	bl	80033e0 <ssd1306_SetCursor>
          ssd1306_WriteString(label, Font_6x8, Black);
 80028d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002b00 <main+0x604>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80028e0:	f000 fd58 	bl	8003394 <ssd1306_WriteString>
          mod_y += mod_line_height;
 80028e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028ec:	4413      	add	r3, r2
 80028ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80028f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028f6:	3301      	adds	r3, #1
 80028f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80028fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002900:	2b0f      	cmp	r3, #15
 8002902:	dd83      	ble.n	800280c <main+0x310>
        }
      }
    }

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8002904:	2322      	movs	r3, #34	@ 0x22
 8002906:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 800290a:	2336      	movs	r3, #54	@ 0x36
 800290c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    int label_row_top = 2;
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    int percent_row_top = label_row_bot - 11;
 8002916:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800291a:	3b0b      	subs	r3, #11
 800291c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    char keycodes[6][4] = {0};
 8002920:	f107 0318 	add.w	r3, r7, #24
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
 8002930:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002948:	e068      	b.n	8002a1c <main+0x520>
      struct key *k = &keyboard_keys[0][amux];
 800294a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	4a60      	ldr	r2, [pc, #384]	@ (8002adc <main+0x5e0>)
 800295a:	4413      	add	r3, r2
 800295c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

      if (k->state.distance_8bits > 20 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 8002960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002964:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002968:	2b14      	cmp	r3, #20
 800296a:	d952      	bls.n	8002a12 <main+0x516>
 800296c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002970:	2b05      	cmp	r3, #5
 8002972:	dc4e      	bgt.n	8002a12 <main+0x516>
 8002974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002978:	795b      	ldrb	r3, [r3, #5]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d149      	bne.n	8002a12 <main+0x516>
        keycodes[tracker][0] = '0';
 800297e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	33d8      	adds	r3, #216	@ 0xd8
 8002986:	443b      	add	r3, r7
 8002988:	2230      	movs	r2, #48	@ 0x30
 800298a:	f803 2cc0 	strb.w	r2, [r3, #-192]
        keycodes[tracker][1] = 'x';
 800298e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	33d8      	adds	r3, #216	@ 0xd8
 8002996:	443b      	add	r3, r7
 8002998:	2278      	movs	r2, #120	@ 0x78
 800299a:	f803 2cbf 	strb.w	r2, [r3, #-191]
        keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 800299e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029a2:	2b09      	cmp	r3, #9
 80029a4:	dc05      	bgt.n	80029b2 <main+0x4b6>
 80029a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3330      	adds	r3, #48	@ 0x30
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	e004      	b.n	80029bc <main+0x4c0>
 80029b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3337      	adds	r3, #55	@ 0x37
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	33d8      	adds	r3, #216	@ 0xd8
 80029c4:	443b      	add	r3, r7
 80029c6:	f803 2cbe 	strb.w	r2, [r3, #-190]
        keycodes[tracker][3] = '\0';
 80029ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	33d8      	adds	r3, #216	@ 0xd8
 80029d2:	443b      	add	r3, r7
 80029d4:	2200      	movs	r2, #0
 80029d6:	f803 2cbd 	strb.w	r2, [r3, #-189]

        key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 80029da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80029e2:	461a      	mov	r2, r3
 80029e4:	2364      	movs	r3, #100	@ 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	4a46      	ldr	r2, [pc, #280]	@ (8002b04 <main+0x608>)
 80029ec:	fb82 1203 	smull	r1, r2, r2, r3
 80029f0:	441a      	add	r2, r3
 80029f2:	11d2      	asrs	r2, r2, #7
 80029f4:	17db      	asrs	r3, r3, #31
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	f107 0210 	add.w	r2, r7, #16
 80029fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a02:	4413      	add	r3, r2
 8002a04:	460a      	mov	r2, r1
 8002a06:	701a      	strb	r2, [r3, #0]
        tracker++;
 8002a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a16:	3301      	adds	r3, #1
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	dd92      	ble.n	800294a <main+0x44e>
      }
    }

    for (int i = 1; i <= 3; i++) {
 8002a24:	2301      	movs	r3, #1
 8002a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a2a:	e04f      	b.n	8002acc <main+0x5d0>
      if (keycodes[i - 1][0] != '\0') {
 8002a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a30:	3b01      	subs	r3, #1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	33d8      	adds	r3, #216	@ 0xd8
 8002a36:	443b      	add	r3, r7
 8002a38:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d040      	beq.n	8002ac2 <main+0x5c6>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8002a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a44:	1e5a      	subs	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	332a      	adds	r3, #42	@ 0x2a
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_top);
 8002a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fcbc 	bl	80033e0 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	f107 0218 	add.w	r2, r7, #24
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	18d0      	adds	r0, r2, r3
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <main+0x604>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7e:	f000 fc89 	bl	8003394 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a86:	3b01      	subs	r3, #1
 8002a88:	33d8      	adds	r3, #216	@ 0xd8
 8002a8a:	443b      	add	r3, r7
 8002a8c:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	491c      	ldr	r1, [pc, #112]	@ (8002b08 <main+0x60c>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00a f829 	bl	800caf0 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 8002a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fc97 	bl	80033e0 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <main+0x604>)
 8002ab4:	f107 0008 	add.w	r0, r7, #8
 8002ab8:	2200      	movs	r2, #0
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002abe:	f000 fc69 	bl	8003394 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8002ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	ddab      	ble.n	8002a2c <main+0x530>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ada:	e065      	b.n	8002ba8 <main+0x6ac>
 8002adc:	20000308 	.word	0x20000308
 8002ae0:	0800e584 	.word	0x0800e584
 8002ae4:	0800e58c 	.word	0x0800e58c
 8002ae8:	0800e594 	.word	0x0800e594
 8002aec:	0800e59c 	.word	0x0800e59c
 8002af0:	0800e5a4 	.word	0x0800e5a4
 8002af4:	0800e5ac 	.word	0x0800e5ac
 8002af8:	0800e5b4 	.word	0x0800e5b4
 8002afc:	0800e5bc 	.word	0x0800e5bc
 8002b00:	0800ee2c 	.word	0x0800ee2c
 8002b04:	80808081 	.word	0x80808081
 8002b08:	0800e5c4 	.word	0x0800e5c4
      if (keycodes[i - 1][0] != '\0') {
 8002b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b10:	3b01      	subs	r3, #1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	33d8      	adds	r3, #216	@ 0xd8
 8002b16:	443b      	add	r3, r7
 8002b18:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03e      	beq.n	8002b9e <main+0x6a2>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b24:	1f1a      	subs	r2, r3, #4
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	332a      	adds	r3, #42	@ 0x2a
 8002b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        ssd1306_SetCursor(x, label_row_bot);
 8002b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fc4c 	bl	80033e0 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	f107 0218 	add.w	r2, r7, #24
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	18d0      	adds	r0, r2, r3
 8002b56:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <main+0x6b8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	9200      	str	r2, [sp, #0]
 8002b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5e:	f000 fc19 	bl	8003394 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b66:	3b01      	subs	r3, #1
 8002b68:	33d8      	adds	r3, #216	@ 0xd8
 8002b6a:	443b      	add	r3, r7
 8002b6c:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
 8002b70:	461a      	mov	r2, r3
 8002b72:	463b      	mov	r3, r7
 8002b74:	4910      	ldr	r1, [pc, #64]	@ (8002bb8 <main+0x6bc>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f009 ffba 	bl	800caf0 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8002b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fc28 	bl	80033e0 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002b90:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <main+0x6b8>)
 8002b92:	4638      	mov	r0, r7
 8002b94:	2200      	movs	r2, #0
 8002b96:	9200      	str	r2, [sp, #0]
 8002b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9a:	f000 fbfb 	bl	8003394 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8002b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	ddad      	ble.n	8002b0c <main+0x610>
  while (1) {
 8002bb0:	e4c6      	b.n	8002540 <main+0x44>
 8002bb2:	bf00      	nop
 8002bb4:	0800ee2c 	.word	0x0800ee2c
 8002bb8:	0800e5c4 	.word	0x0800e5c4

08002bbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	@ 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	@ 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f009 fff5 	bl	800cbba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <SystemClock_Config+0xc8>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <SystemClock_Config+0xcc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c22:	2302      	movs	r3, #2
 8002c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002c2c:	230d      	movs	r3, #13
 8002c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c30:	23a8      	movs	r3, #168	@ 0xa8
 8002c32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c34:	2304      	movs	r3, #4
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c3c:	f107 0320 	add.w	r3, r7, #32
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fe9d 	bl	8005980 <HAL_RCC_OscConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0x94>
    Error_Handler();
 8002c4c:	f000 f9d3 	bl	8002ff6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c50:	230f      	movs	r3, #15
 8002c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	2302      	movs	r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f8ff 	bl	8005e70 <HAL_RCC_ClockConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0xc0>
    Error_Handler();
 8002c78:	f000 f9bd 	bl	8002ff6 <Error_Handler>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3750      	adds	r7, #80	@ 0x50
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000

08002c8c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c92:	463b      	mov	r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ca0:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <MX_ADC1_Init+0x9c>)
 8002ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ca6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cbe:	4b19      	ldr	r3, [pc, #100]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <MX_ADC1_Init+0xa0>)
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002cec:	480d      	ldr	r0, [pc, #52]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002cee:	f000 ffdb 	bl	8003ca8 <HAL_ADC_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_ADC1_Init+0x70>
    Error_Handler();
 8002cf8:	f000 f97d 	bl	8002ff6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002cfc:	2309      	movs	r3, #9
 8002cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d00:	2301      	movs	r3, #1
 8002d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002d08:	463b      	mov	r3, r7
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4805      	ldr	r0, [pc, #20]	@ (8002d24 <MX_ADC1_Init+0x98>)
 8002d0e:	f001 f98f 	bl	8004030 <HAL_ADC_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_ADC1_Init+0x90>
    Error_Handler();
 8002d18:	f000 f96d 	bl	8002ff6 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000764 	.word	0x20000764
 8002d28:	40012000 	.word	0x40012000
 8002d2c:	0f000001 	.word	0x0f000001

08002d30 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <MX_I2C1_Init+0x54>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d3c:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <MX_I2C1_Init+0x58>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002d6c:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <MX_I2C1_Init+0x50>)
 8002d6e:	f002 f84b 	bl	8004e08 <HAL_I2C_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002d78:	f000 f93d 	bl	8002ff6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200007ac 	.word	0x200007ac
 8002d84:	40005400 	.word	0x40005400
 8002d88:	000186a0 	.word	0x000186a0

08002d8c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002d98:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da0:	2202      	movs	r2, #2
 8002da2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8002dce:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dd0:	f002 fcc7 	bl	8005762 <HAL_PCD_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8002dda:	f000 f90c 	bl	8002ff6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000800 	.word	0x20000800

08002de8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	4a18      	ldr	r2, [pc, #96]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <MX_GPIO_Init+0x9c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002e58:	480b      	ldr	r0, [pc, #44]	@ (8002e88 <MX_GPIO_Init+0xa0>)
 8002e5a:	f001 ffbb 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002e5e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e64:	2301      	movs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	4619      	mov	r1, r3
 8002e76:	4804      	ldr	r0, [pc, #16]	@ (8002e88 <MX_GPIO_Init+0xa0>)
 8002e78:	f001 fe28 	bl	8004acc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400

08002e8c <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8002e90:	4a05      	ldr	r2, [pc, #20]	@ (8002ea8 <keyboard_read_config+0x1c>)
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <keyboard_read_config+0x20>)
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f009 ff64 	bl	800cd6a <memcpy>
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	08040000 	.word	0x08040000

08002eb0 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8002ec6:	d301      	bcc.n	8002ecc <keyboard_write_config+0x1c>
    return 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e02d      	b.n	8002f28 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 8002ecc:	f001 fc44 	bl	8004758 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8002ed0:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <keyboard_write_config+0x80>)
 8002ed2:	22b3      	movs	r2, #179	@ 0xb3
 8002ed4:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	2006      	movs	r0, #6
 8002eda:	f001 fdaf 	bl	8004a3c <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	81fb      	strh	r3, [r7, #14]
 8002ee2:	e01a      	b.n	8002f1a <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8002ee4:	89fb      	ldrh	r3, [r7, #14]
 8002ee6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002eea:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8002eee:	4619      	mov	r1, r3
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	461c      	mov	r4, r3
 8002efe:	4615      	mov	r5, r2
 8002f00:	4622      	mov	r2, r4
 8002f02:	462b      	mov	r3, r5
 8002f04:	2000      	movs	r0, #0
 8002f06:	f001 fbd3 	bl	80046b0 <HAL_FLASH_Program>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002f10:	f001 fc44 	bl	800479c <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	3301      	adds	r3, #1
 8002f18:	81fb      	strh	r3, [r7, #14]
 8002f1a:	89fa      	ldrh	r2, [r7, #14]
 8002f1c:	883b      	ldrh	r3, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3e0      	bcc.n	8002ee4 <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 8002f22:	f001 fc3b 	bl	800479c <HAL_FLASH_Lock>
  return 1;
 8002f26:	2301      	movs	r3, #1
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f30:	40023c00 	.word	0x40023c00

08002f34 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e013      	b.n	8002f6c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <keyboard_select_amux+0x48>)
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	79fa      	ldrb	r2, [r7, #7]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	fa42 f303 	asr.w	r3, r2, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <keyboard_select_amux+0x4c>)
 8002f62:	f001 ff37 	bl	8004dd4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d9e8      	bls.n	8002f44 <keyboard_select_amux+0x10>
  }
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	0800e82c 	.word	0x0800e82c
 8002f80:	40020400 	.word	0x40020400

08002f84 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8002f8e:	2209      	movs	r2, #9
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <keyboard_select_adc+0x30>)
 8002f92:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8002f94:	4907      	ldr	r1, [pc, #28]	@ (8002fb4 <keyboard_select_adc+0x30>)
 8002f96:	4808      	ldr	r0, [pc, #32]	@ (8002fb8 <keyboard_select_adc+0x34>)
 8002f98:	f001 f84a 	bl	8004030 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8002f9c:	4806      	ldr	r0, [pc, #24]	@ (8002fb8 <keyboard_select_adc+0x34>)
 8002f9e:	f000 fec7 	bl	8003d30 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4804      	ldr	r0, [pc, #16]	@ (8002fb8 <keyboard_select_adc+0x34>)
 8002fa6:	f000 ffaa 	bl	8003efe <HAL_ADC_PollForConversion>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000ce4 	.word	0x20000ce4
 8002fb8:	20000764 	.word	0x20000764

08002fbc <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8002fc0:	4803      	ldr	r0, [pc, #12]	@ (8002fd0 <keyboard_read_adc+0x14>)
 8002fc2:	f001 f827 	bl	8004014 <HAL_ADC_GetValue>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b29b      	uxth	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000764 	.word	0x20000764

08002fd4 <keyboard_close_adc>:

void keyboard_close_adc() {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <keyboard_close_adc+0x10>)
 8002fda:	f000 ff5d 	bl	8003e98 <HAL_ADC_Stop>
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000764 	.word	0x20000764

08002fe8 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002fec:	f000 fe2c 	bl	8003c48 <HAL_GetTick>
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ffa:	b672      	cpsid	i
}
 8002ffc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <Error_Handler+0x8>

08003002 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af04      	add	r7, sp, #16
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	2301      	movs	r3, #1
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	2200      	movs	r2, #0
 800302c:	2178      	movs	r1, #120	@ 0x78
 800302e:	4803      	ldr	r0, [pc, #12]	@ (800303c <ssd1306_WriteCommand+0x2c>)
 8003030:	f002 f82e 	bl	8005090 <HAL_I2C_Mem_Write>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200007ac 	.word	0x200007ac

08003040 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af04      	add	r7, sp, #16
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	9202      	str	r2, [sp, #8]
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2301      	movs	r3, #1
 800305c:	2240      	movs	r2, #64	@ 0x40
 800305e:	2178      	movs	r1, #120	@ 0x78
 8003060:	4803      	ldr	r0, [pc, #12]	@ (8003070 <ssd1306_WriteData+0x30>)
 8003062:	f002 f815 	bl	8005090 <HAL_I2C_Mem_Write>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200007ac 	.word	0x200007ac

08003074 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003078:	f7ff ffc3 	bl	8003002 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800307c:	2064      	movs	r0, #100	@ 0x64
 800307e:	f000 fdef 	bl	8003c60 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003082:	2000      	movs	r0, #0
 8003084:	f000 fa7a 	bl	800357c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003088:	2020      	movs	r0, #32
 800308a:	f7ff ffc1 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800308e:	2000      	movs	r0, #0
 8003090:	f7ff ffbe 	bl	8003010 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003094:	20b0      	movs	r0, #176	@ 0xb0
 8003096:	f7ff ffbb 	bl	8003010 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800309a:	20c0      	movs	r0, #192	@ 0xc0
 800309c:	f7ff ffb8 	bl	8003010 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff ffb5 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80030a6:	2010      	movs	r0, #16
 80030a8:	f7ff ffb2 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80030ac:	2040      	movs	r0, #64	@ 0x40
 80030ae:	f7ff ffaf 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80030b2:	20ff      	movs	r0, #255	@ 0xff
 80030b4:	f000 fa4f 	bl	8003556 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80030b8:	20a0      	movs	r0, #160	@ 0xa0
 80030ba:	f7ff ffa9 	bl	8003010 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 80030be:	20a7      	movs	r0, #167	@ 0xa7
 80030c0:	f7ff ffa6 	bl	8003010 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80030c4:	20a8      	movs	r0, #168	@ 0xa8
 80030c6:	f7ff ffa3 	bl	8003010 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80030ca:	203f      	movs	r0, #63	@ 0x3f
 80030cc:	f7ff ffa0 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80030d0:	20a4      	movs	r0, #164	@ 0xa4
 80030d2:	f7ff ff9d 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80030d6:	20d3      	movs	r0, #211	@ 0xd3
 80030d8:	f7ff ff9a 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80030dc:	2000      	movs	r0, #0
 80030de:	f7ff ff97 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80030e2:	20d5      	movs	r0, #213	@ 0xd5
 80030e4:	f7ff ff94 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80030e8:	20f0      	movs	r0, #240	@ 0xf0
 80030ea:	f7ff ff91 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80030ee:	20d9      	movs	r0, #217	@ 0xd9
 80030f0:	f7ff ff8e 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80030f4:	2022      	movs	r0, #34	@ 0x22
 80030f6:	f7ff ff8b 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80030fa:	20da      	movs	r0, #218	@ 0xda
 80030fc:	f7ff ff88 	bl	8003010 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003100:	2012      	movs	r0, #18
 8003102:	f7ff ff85 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003106:	20db      	movs	r0, #219	@ 0xdb
 8003108:	f7ff ff82 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800310c:	2020      	movs	r0, #32
 800310e:	f7ff ff7f 	bl	8003010 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003112:	208d      	movs	r0, #141	@ 0x8d
 8003114:	f7ff ff7c 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003118:	2014      	movs	r0, #20
 800311a:	f7ff ff79 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800311e:	2001      	movs	r0, #1
 8003120:	f000 fa2c 	bl	800357c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003124:	2000      	movs	r0, #0
 8003126:	f000 f80f 	bl	8003148 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800312a:	f000 f825 	bl	8003178 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <ssd1306_Init+0xd0>)
 8003130:	2200      	movs	r2, #0
 8003132:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <ssd1306_Init+0xd0>)
 8003136:	2200      	movs	r2, #0
 8003138:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800313a:	4b02      	ldr	r3, [pc, #8]	@ (8003144 <ssd1306_Init+0xd0>)
 800313c:	2201      	movs	r2, #1
 800313e:	711a      	strb	r2, [r3, #4]
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200010fc 	.word	0x200010fc

08003148 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <ssd1306_Fill+0x14>
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <ssd1306_Fill+0x16>
 800315c:	23ff      	movs	r3, #255	@ 0xff
 800315e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003162:	4619      	mov	r1, r3
 8003164:	4803      	ldr	r0, [pc, #12]	@ (8003174 <ssd1306_Fill+0x2c>)
 8003166:	f009 fd28 	bl	800cbba <memset>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000cfc 	.word	0x20000cfc

08003178 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800317e:	2300      	movs	r3, #0
 8003180:	71fb      	strb	r3, [r7, #7]
 8003182:	e016      	b.n	80031b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	3b50      	subs	r3, #80	@ 0x50
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff40 	bl	8003010 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003190:	2000      	movs	r0, #0
 8003192:	f7ff ff3d 	bl	8003010 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003196:	2010      	movs	r0, #16
 8003198:	f7ff ff3a 	bl	8003010 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	01db      	lsls	r3, r3, #7
 80031a0:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <ssd1306_UpdateScreen+0x4c>)
 80031a2:	4413      	add	r3, r2
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff4a 	bl	8003040 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	3301      	adds	r3, #1
 80031b0:	71fb      	strb	r3, [r7, #7]
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	2b07      	cmp	r3, #7
 80031b6:	d9e5      	bls.n	8003184 <ssd1306_UpdateScreen+0xc>
    }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000cfc 	.word	0x20000cfc

080031c8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
 80031d2:	460b      	mov	r3, r1
 80031d4:	71bb      	strb	r3, [r7, #6]
 80031d6:	4613      	mov	r3, r2
 80031d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db3d      	blt.n	800325e <ssd1306_DrawPixel+0x96>
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80031e6:	d83a      	bhi.n	800325e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80031e8:	797b      	ldrb	r3, [r7, #5]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d11a      	bne.n	8003224 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031ee:	79fa      	ldrb	r2, [r7, #7]
 80031f0:	79bb      	ldrb	r3, [r7, #6]
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	4413      	add	r3, r2
 80031fc:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <ssd1306_DrawPixel+0xa4>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	b25a      	sxtb	r2, r3
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	b25b      	sxtb	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b259      	sxtb	r1, r3
 8003214:	79fa      	ldrb	r2, [r7, #7]
 8003216:	4603      	mov	r3, r0
 8003218:	01db      	lsls	r3, r3, #7
 800321a:	4413      	add	r3, r2
 800321c:	b2c9      	uxtb	r1, r1
 800321e:	4a13      	ldr	r2, [pc, #76]	@ (800326c <ssd1306_DrawPixel+0xa4>)
 8003220:	54d1      	strb	r1, [r2, r3]
 8003222:	e01d      	b.n	8003260 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003224:	79fa      	ldrb	r2, [r7, #7]
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	4603      	mov	r3, r0
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	4413      	add	r3, r2
 8003232:	4a0e      	ldr	r2, [pc, #56]	@ (800326c <ssd1306_DrawPixel+0xa4>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	b25a      	sxtb	r2, r3
 8003238:	79bb      	ldrb	r3, [r7, #6]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	b25b      	sxtb	r3, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	b25b      	sxtb	r3, r3
 800324a:	4013      	ands	r3, r2
 800324c:	b259      	sxtb	r1, r3
 800324e:	79fa      	ldrb	r2, [r7, #7]
 8003250:	4603      	mov	r3, r0
 8003252:	01db      	lsls	r3, r3, #7
 8003254:	4413      	add	r3, r2
 8003256:	b2c9      	uxtb	r1, r1
 8003258:	4a04      	ldr	r2, [pc, #16]	@ (800326c <ssd1306_DrawPixel+0xa4>)
 800325a:	54d1      	strb	r1, [r2, r3]
 800325c:	e000      	b.n	8003260 <ssd1306_DrawPixel+0x98>
        return;
 800325e:	bf00      	nop
    }
}
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000cfc 	.word	0x20000cfc

08003270 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4604      	mov	r4, r0
 8003278:	4638      	mov	r0, r7
 800327a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800327e:	4623      	mov	r3, r4
 8003280:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b1f      	cmp	r3, #31
 8003286:	d902      	bls.n	800328e <ssd1306_WriteChar+0x1e>
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b7e      	cmp	r3, #126	@ 0x7e
 800328c:	d901      	bls.n	8003292 <ssd1306_WriteChar+0x22>
        return 0;
 800328e:	2300      	movs	r3, #0
 8003290:	e079      	b.n	8003386 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <ssd1306_WriteChar+0x34>
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3b20      	subs	r3, #32
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <ssd1306_WriteChar+0x36>
 80032a4:	783b      	ldrb	r3, [r7, #0]
 80032a6:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80032a8:	4b39      	ldr	r3, [pc, #228]	@ (8003390 <ssd1306_WriteChar+0x120>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	4413      	add	r3, r2
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	dc06      	bgt.n	80032c4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80032b6:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <ssd1306_WriteChar+0x120>)
 80032b8:	885b      	ldrh	r3, [r3, #2]
 80032ba:	461a      	mov	r2, r3
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	dd01      	ble.n	80032c8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e05e      	b.n	8003386 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e04d      	b.n	800336a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	3b20      	subs	r3, #32
 80032d4:	7879      	ldrb	r1, [r7, #1]
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4619      	mov	r1, r3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	440b      	add	r3, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e036      	b.n	800335c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d013      	beq.n	8003326 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <ssd1306_WriteChar+0x120>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4413      	add	r3, r2
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <ssd1306_WriteChar+0x120>)
 800330e:	885b      	ldrh	r3, [r3, #2]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4413      	add	r3, r2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800331e:	4619      	mov	r1, r3
 8003320:	f7ff ff52 	bl	80031c8 <ssd1306_DrawPixel>
 8003324:	e017      	b.n	8003356 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <ssd1306_WriteChar+0x120>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	4413      	add	r3, r2
 8003332:	b2d8      	uxtb	r0, r3
 8003334:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <ssd1306_WriteChar+0x120>)
 8003336:	885b      	ldrh	r3, [r3, #2]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	4413      	add	r3, r2
 8003340:	b2d9      	uxtb	r1, r3
 8003342:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	f7ff ff39 	bl	80031c8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3301      	adds	r3, #1
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3c4      	bcc.n	80032ee <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	787b      	ldrb	r3, [r7, #1]
 800336c:	461a      	mov	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4293      	cmp	r3, r2
 8003372:	d3ac      	bcc.n	80032ce <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <ssd1306_WriteChar+0x120>)
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	b29b      	uxth	r3, r3
 800337c:	4413      	add	r3, r2
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <ssd1306_WriteChar+0x120>)
 8003382:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	@ 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	bf00      	nop
 8003390:	200010fc 	.word	0x200010fc

08003394 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4638      	mov	r0, r7
 800339e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80033a2:	e013      	b.n	80033cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	7818      	ldrb	r0, [r3, #0]
 80033a8:	7e3b      	ldrb	r3, [r7, #24]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	463b      	mov	r3, r7
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	f7ff ff5e 	bl	8003270 <ssd1306_WriteChar>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d002      	beq.n	80033c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	e008      	b.n	80033d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e7      	bne.n	80033a4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	781b      	ldrb	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	460a      	mov	r2, r1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	4613      	mov	r3, r2
 80033ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <ssd1306_SetCursor+0x2c>)
 80033f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80033f8:	79bb      	ldrb	r3, [r7, #6]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <ssd1306_SetCursor+0x2c>)
 80033fe:	805a      	strh	r2, [r3, #2]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	200010fc 	.word	0x200010fc

08003410 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	4604      	mov	r4, r0
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4623      	mov	r3, r4
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	4603      	mov	r3, r0
 8003424:	71bb      	strb	r3, [r7, #6]
 8003426:	460b      	mov	r3, r1
 8003428:	717b      	strb	r3, [r7, #5]
 800342a:	4613      	mov	r3, r2
 800342c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800342e:	797a      	ldrb	r2, [r7, #5]
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	bfb8      	it	lt
 8003438:	425b      	neglt	r3, r3
 800343a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800343c:	793a      	ldrb	r2, [r7, #4]
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	425b      	neglt	r3, r3
 8003448:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800344a:	79fa      	ldrb	r2, [r7, #7]
 800344c:	797b      	ldrb	r3, [r7, #5]
 800344e:	429a      	cmp	r2, r3
 8003450:	d201      	bcs.n	8003456 <ssd1306_Line+0x46>
 8003452:	2301      	movs	r3, #1
 8003454:	e001      	b.n	800345a <ssd1306_Line+0x4a>
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800345c:	79ba      	ldrb	r2, [r7, #6]
 800345e:	793b      	ldrb	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d201      	bcs.n	8003468 <ssd1306_Line+0x58>
 8003464:	2301      	movs	r3, #1
 8003466:	e001      	b.n	800346c <ssd1306_Line+0x5c>
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
 800346c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003476:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800347a:	7939      	ldrb	r1, [r7, #4]
 800347c:	797b      	ldrb	r3, [r7, #5]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fea2 	bl	80031c8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003484:	e024      	b.n	80034d0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003486:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800348a:	79b9      	ldrb	r1, [r7, #6]
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fe9a 	bl	80031c8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	425b      	negs	r3, r3
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dd08      	ble.n	80034b6 <ssd1306_Line+0xa6>
            error -= deltaY;
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	4413      	add	r3, r2
 80034b4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	da08      	bge.n	80034d0 <ssd1306_Line+0xc0>
            error += deltaX;
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	4413      	add	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	79bb      	ldrb	r3, [r7, #6]
 80034cc:	4413      	add	r3, r2
 80034ce:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80034d0:	79fa      	ldrb	r2, [r7, #7]
 80034d2:	797b      	ldrb	r3, [r7, #5]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1d6      	bne.n	8003486 <ssd1306_Line+0x76>
 80034d8:	79ba      	ldrb	r2, [r7, #6]
 80034da:	793b      	ldrb	r3, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1d2      	bne.n	8003486 <ssd1306_Line+0x76>
        }
    }
    return;
 80034e0:	bf00      	nop
}
 80034e2:	3724      	adds	r7, #36	@ 0x24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}

080034e8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	71fb      	strb	r3, [r7, #7]
 80034fa:	4603      	mov	r3, r0
 80034fc:	71bb      	strb	r3, [r7, #6]
 80034fe:	460b      	mov	r3, r1
 8003500:	717b      	strb	r3, [r7, #5]
 8003502:	4613      	mov	r3, r2
 8003504:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003506:	79bc      	ldrb	r4, [r7, #6]
 8003508:	797a      	ldrb	r2, [r7, #5]
 800350a:	79b9      	ldrb	r1, [r7, #6]
 800350c:	79f8      	ldrb	r0, [r7, #7]
 800350e:	7e3b      	ldrb	r3, [r7, #24]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4623      	mov	r3, r4
 8003514:	f7ff ff7c 	bl	8003410 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003518:	793c      	ldrb	r4, [r7, #4]
 800351a:	797a      	ldrb	r2, [r7, #5]
 800351c:	79b9      	ldrb	r1, [r7, #6]
 800351e:	7978      	ldrb	r0, [r7, #5]
 8003520:	7e3b      	ldrb	r3, [r7, #24]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4623      	mov	r3, r4
 8003526:	f7ff ff73 	bl	8003410 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800352a:	793c      	ldrb	r4, [r7, #4]
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	7939      	ldrb	r1, [r7, #4]
 8003530:	7978      	ldrb	r0, [r7, #5]
 8003532:	7e3b      	ldrb	r3, [r7, #24]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	4623      	mov	r3, r4
 8003538:	f7ff ff6a 	bl	8003410 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800353c:	79bc      	ldrb	r4, [r7, #6]
 800353e:	79fa      	ldrb	r2, [r7, #7]
 8003540:	7939      	ldrb	r1, [r7, #4]
 8003542:	79f8      	ldrb	r0, [r7, #7]
 8003544:	7e3b      	ldrb	r3, [r7, #24]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4623      	mov	r3, r4
 800354a:	f7ff ff61 	bl	8003410 <ssd1306_Line>

    return;
 800354e:	bf00      	nop
}
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}

08003556 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003560:	2381      	movs	r3, #129	@ 0x81
 8003562:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fd52 	bl	8003010 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fd4e 	bl	8003010 <ssd1306_WriteCommand>
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800358c:	23af      	movs	r3, #175	@ 0xaf
 800358e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003590:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <ssd1306_SetDisplayOn+0x38>)
 8003592:	2201      	movs	r2, #1
 8003594:	715a      	strb	r2, [r3, #5]
 8003596:	e004      	b.n	80035a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003598:	23ae      	movs	r3, #174	@ 0xae
 800359a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <ssd1306_SetDisplayOn+0x38>)
 800359e:	2200      	movs	r2, #0
 80035a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fd33 	bl	8003010 <ssd1306_WriteCommand>
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200010fc 	.word	0x200010fc

080035b8 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	460a      	mov	r2, r1
 80035c2:	71fb      	strb	r3, [r7, #7]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 80035ce:	20a1      	movs	r0, #161	@ 0xa1
 80035d0:	f7ff fd1e 	bl	8003010 <ssd1306_WriteCommand>
 80035d4:	e002      	b.n	80035dc <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 80035d6:	20a0      	movs	r0, #160	@ 0xa0
 80035d8:	f7ff fd1a 	bl	8003010 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 80035dc:	79bb      	ldrb	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 80035e2:	20c8      	movs	r0, #200	@ 0xc8
 80035e4:	f7ff fd14 	bl	8003010 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 80035e8:	e002      	b.n	80035f0 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 80035ea:	20c0      	movs	r0, #192	@ 0xc0
 80035ec:	f7ff fd10 	bl	8003010 <ssd1306_WriteCommand>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <HAL_MspInit+0x4c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	4a0f      	ldr	r2, [pc, #60]	@ (8003644 <HAL_MspInit+0x4c>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800360c:	6453      	str	r3, [r2, #68]	@ 0x44
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_MspInit+0x4c>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <HAL_MspInit+0x4c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <HAL_MspInit+0x4c>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	@ 0x40
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_MspInit+0x4c>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	@ 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <HAL_ADC_MspInit+0x7c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d127      	bne.n	80036ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	6453      	str	r3, [r2, #68]	@ 0x44
 800367a:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	4a0e      	ldr	r2, [pc, #56]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	6313      	str	r3, [r2, #48]	@ 0x30
 8003696:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <HAL_ADC_MspInit+0x80>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036a2:	2302      	movs	r3, #2
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a6:	2303      	movs	r3, #3
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	4805      	ldr	r0, [pc, #20]	@ (80036cc <HAL_ADC_MspInit+0x84>)
 80036b6:	f001 fa09 	bl	8004acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	@ 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40012000 	.word	0x40012000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020400 	.word	0x40020400

080036d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_I2C_MspInit+0x84>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d12b      	bne.n	800374a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6313      	str	r3, [r2, #48]	@ 0x30
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800370e:	23c0      	movs	r3, #192	@ 0xc0
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003712:	2312      	movs	r3, #18
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003716:	2301      	movs	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	2303      	movs	r3, #3
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800371e:	2304      	movs	r3, #4
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	480c      	ldr	r0, [pc, #48]	@ (800375c <HAL_I2C_MspInit+0x8c>)
 800372a:	f001 f9cf 	bl	8004acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 8003738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_I2C_MspInit+0x88>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800374a:	bf00      	nop
 800374c:	3728      	adds	r7, #40	@ 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40005400 	.word	0x40005400
 8003758:	40023800 	.word	0x40023800
 800375c:	40020400 	.word	0x40020400

08003760 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	@ 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003780:	d13a      	bne.n	80037f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	@ 0x30
 8003792:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800379e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80037a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ac:	2303      	movs	r3, #3
 80037ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80037b0:	230a      	movs	r3, #10
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4619      	mov	r1, r3
 80037ba:	4812      	ldr	r0, [pc, #72]	@ (8003804 <HAL_PCD_MspInit+0xa4>)
 80037bc:	f001 f986 	bl	8004acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 80037c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 80037c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 80037d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037da:	6453      	str	r3, [r2, #68]	@ 0x44
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_PCD_MspInit+0xa0>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	2043      	movs	r0, #67	@ 0x43
 80037ee:	f000 ff28 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80037f2:	2043      	movs	r0, #67	@ 0x43
 80037f4:	f000 ff41 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80037f8:	bf00      	nop
 80037fa:	3728      	adds	r7, #40	@ 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	40020000 	.word	0x40020000

08003808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <NMI_Handler+0x4>

08003810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003814:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <HardFault_Handler+0x6>

0800381a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <MemManage_Handler+0x4>

08003822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <BusFault_Handler+0x4>

0800382a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <UsageFault_Handler+0x4>

08003832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003860:	f000 f9de 	bl	8003c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <SysTick_Handler+0x18>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	4a02      	ldr	r2, [pc, #8]	@ (8003874 <SysTick_Handler+0x18>)
 800386c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20001104 	.word	0x20001104

08003878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 800387c:	2000      	movs	r0, #0
 800387e:	f008 fa25 	bl	800bccc <dcd_int_handler>
	return;
 8003882:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003884:	bd80      	pop	{r7, pc}

08003886 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  return 1;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_kill>:

int _kill(int pid, int sig)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038a0:	f009 fa36 	bl	800cd10 <__errno>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2216      	movs	r2, #22
 80038a8:	601a      	str	r2, [r3, #0]
  return -1;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <_exit>:

void _exit (int status)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038be:	f04f 31ff 	mov.w	r1, #4294967295
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffe7 	bl	8003896 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <_exit+0x12>

080038cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e00a      	b.n	80038f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038de:	f3af 8000 	nop.w
 80038e2:	4601      	mov	r1, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	60ba      	str	r2, [r7, #8]
 80038ea:	b2ca      	uxtb	r2, r1
 80038ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dbf0      	blt.n	80038de <_read+0x12>
  }

  return len;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e009      	b.n	800392c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	60ba      	str	r2, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3301      	adds	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	dbf1      	blt.n	8003918 <_write+0x12>
  }
  return len;
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_close>:

int _close(int file)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003966:	605a      	str	r2, [r3, #4]
  return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <_isatty>:

int _isatty(int file)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b0:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <_sbrk+0x5c>)
 80039b2:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <_sbrk+0x60>)
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <_sbrk+0x64>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <_sbrk+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d207      	bcs.n	80039e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d8:	f009 f99a 	bl	800cd10 <__errno>
 80039dc:	4603      	mov	r3, r0
 80039de:	220c      	movs	r2, #12
 80039e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	e009      	b.n	80039fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <_sbrk+0x64>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <_sbrk+0x64>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <_sbrk+0x64>)
 80039f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20020000 	.word	0x20020000
 8003a08:	00000400 	.word	0x00000400
 8003a0c:	20001108 	.word	0x20001108
 8003a10:	20001648 	.word	0x20001648

08003a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <SystemInit+0x20>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	4a05      	ldr	r2, [pc, #20]	@ (8003a34 <SystemInit+0x20>)
 8003a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003a3c:	4b02      	ldr	r3, [pc, #8]	@ (8003a48 <tud_descriptor_device_cb+0x10>)
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	0800ee50 	.word	0x0800ee50

08003a4c <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8003a56:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <tud_hid_descriptor_report_cb+0x18>)
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	0800ee64 	.word	0x0800ee64

08003a68 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8003a72:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <tud_descriptor_configuration_cb+0x18>)
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	0800eec0 	.word	0x0800eec0

08003a84 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	71fb      	strb	r3, [r7, #7]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <tud_descriptor_string_cb+0x9c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <tud_descriptor_string_cb+0xa0>)
 8003aa4:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e027      	b.n	8003afc <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d901      	bls.n	8003ab6 <tud_descriptor_string_cb+0x32>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e02f      	b.n	8003b16 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <tud_descriptor_string_cb+0x9c>)
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f7fc fb97 	bl	80001f4 <strlen>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b1f      	cmp	r3, #31
 8003ace:	d901      	bls.n	8003ad4 <tud_descriptor_string_cb+0x50>
 8003ad0:	231f      	movs	r3, #31
 8003ad2:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73bb      	strb	r3, [r7, #14]
 8003ad8:	e00c      	b.n	8003af4 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8003ada:	7bbb      	ldrb	r3, [r7, #14]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b24 <tud_descriptor_string_cb+0xa0>)
 8003aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003aee:	7bbb      	ldrb	r3, [r7, #14]
 8003af0:	3301      	adds	r3, #1
 8003af2:	73bb      	strb	r3, [r7, #14]
 8003af4:	7bba      	ldrb	r2, [r7, #14]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d3ee      	bcc.n	8003ada <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <tud_descriptor_string_cb+0xa0>)
 8003b12:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <tud_descriptor_string_cb+0xa0>)
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000020c 	.word	0x2000020c
 8003b24:	2000110c 	.word	0x2000110c

08003b28 <Reset_Handler>:
 8003b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b60 <LoopFillZerobss+0xe>
 8003b2c:	f7ff ff72 	bl	8003a14 <SystemInit>
 8003b30:	480c      	ldr	r0, [pc, #48]	@ (8003b64 <LoopFillZerobss+0x12>)
 8003b32:	490d      	ldr	r1, [pc, #52]	@ (8003b68 <LoopFillZerobss+0x16>)
 8003b34:	4a0d      	ldr	r2, [pc, #52]	@ (8003b6c <LoopFillZerobss+0x1a>)
 8003b36:	2300      	movs	r3, #0
 8003b38:	e002      	b.n	8003b40 <LoopCopyDataInit>

08003b3a <CopyDataInit>:
 8003b3a:	58d4      	ldr	r4, [r2, r3]
 8003b3c:	50c4      	str	r4, [r0, r3]
 8003b3e:	3304      	adds	r3, #4

08003b40 <LoopCopyDataInit>:
 8003b40:	18c4      	adds	r4, r0, r3
 8003b42:	428c      	cmp	r4, r1
 8003b44:	d3f9      	bcc.n	8003b3a <CopyDataInit>
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <LoopFillZerobss+0x1e>)
 8003b48:	4c0a      	ldr	r4, [pc, #40]	@ (8003b74 <LoopFillZerobss+0x22>)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e001      	b.n	8003b52 <LoopFillZerobss>

08003b4e <FillZerobss>:
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	3204      	adds	r2, #4

08003b52 <LoopFillZerobss>:
 8003b52:	42a2      	cmp	r2, r4
 8003b54:	d3fb      	bcc.n	8003b4e <FillZerobss>
 8003b56:	f009 f8e1 	bl	800cd1c <__libc_init_array>
 8003b5a:	f7fe fccf 	bl	80024fc <main>
 8003b5e:	4770      	bx	lr
 8003b60:	20020000 	.word	0x20020000
 8003b64:	20000000 	.word	0x20000000
 8003b68:	200002a0 	.word	0x200002a0
 8003b6c:	0800f17c 	.word	0x0800f17c
 8003b70:	200002a0 	.word	0x200002a0
 8003b74:	20001644 	.word	0x20001644

08003b78 <ADC_IRQHandler>:
 8003b78:	e7fe      	b.n	8003b78 <ADC_IRQHandler>
	...

08003b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b80:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <HAL_Init+0x40>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <HAL_Init+0x40>)
 8003b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_Init+0x40>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <HAL_Init+0x40>)
 8003b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a07      	ldr	r2, [pc, #28]	@ (8003bbc <HAL_Init+0x40>)
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ba4:	2003      	movs	r0, #3
 8003ba6:	f000 fd41 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003baa:	200f      	movs	r0, #15
 8003bac:	f000 f808 	bl	8003bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb0:	f7ff fd22 	bl	80035f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023c00 	.word	0x40023c00

08003bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <HAL_InitTick+0x54>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_InitTick+0x58>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd59 	bl	8004696 <HAL_SYSTICK_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00e      	b.n	8003c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b0f      	cmp	r3, #15
 8003bf2:	d80a      	bhi.n	8003c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	f000 fd21 	bl	8004642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c00:	4a06      	ldr	r2, [pc, #24]	@ (8003c1c <HAL_InitTick+0x5c>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000208 	.word	0x20000208
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000224 	.word	0x20000224

08003c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c24:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_IncTick+0x20>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_IncTick+0x24>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <HAL_IncTick+0x24>)
 8003c32:	6013      	str	r3, [r2, #0]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000228 	.word	0x20000228
 8003c44:	2000114c 	.word	0x2000114c

08003c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c4c:	4b03      	ldr	r3, [pc, #12]	@ (8003c5c <HAL_GetTick+0x14>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	2000114c 	.word	0x2000114c

08003c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c68:	f7ff ffee 	bl	8003c48 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d005      	beq.n	8003c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_Delay+0x44>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c86:	bf00      	nop
 8003c88:	f7ff ffde 	bl	8003c48 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d8f7      	bhi.n	8003c88 <HAL_Delay+0x28>
  {
  }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000228 	.word	0x20000228

08003ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e033      	b.n	8003d26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fcbe 	bl	8003648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cee:	f023 0302 	bic.w	r3, r3, #2
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 faca 	bl	8004294 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f023 0303 	bic.w	r3, r3, #3
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d16:	e001      	b.n	8003d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_Start+0x1a>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e097      	b.n	8003e7a <HAL_ADC_Start+0x14a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d018      	beq.n	8003d92 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d70:	4b45      	ldr	r3, [pc, #276]	@ (8003e88 <HAL_ADC_Start+0x158>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a45      	ldr	r2, [pc, #276]	@ (8003e8c <HAL_ADC_Start+0x15c>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0c9a      	lsrs	r2, r3, #18
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d84:	e002      	b.n	8003d8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f9      	bne.n	8003d86 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d15f      	bne.n	8003e60 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d106      	bne.n	8003dee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de4:	f023 0206 	bic.w	r2, r3, #6
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dec:	e002      	b.n	8003df4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_ADC_Start+0x160>)
 8003dfe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d129      	bne.n	8003e78 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	e020      	b.n	8003e78 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <HAL_ADC_Start+0x164>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d11b      	bne.n	8003e78 <HAL_ADC_Start+0x148>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d114      	bne.n	8003e78 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e00b      	b.n	8003e78 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000208 	.word	0x20000208
 8003e8c:	431bde83 	.word	0x431bde83
 8003e90:	40012300 	.word	0x40012300
 8003e94:	40012000 	.word	0x40012000

08003e98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_Stop+0x16>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e021      	b.n	8003ef2 <HAL_ADC_Stop+0x5a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1a:	d113      	bne.n	8003f44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e063      	b.n	800400c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f44:	f7ff fe80 	bl	8003c48 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f4a:	e021      	b.n	8003f90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d01d      	beq.n	8003f90 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_ADC_PollForConversion+0x6c>
 8003f5a:	f7ff fe75 	bl	8003c48 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d212      	bcs.n	8003f90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d00b      	beq.n	8003f90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e03d      	b.n	800400c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d1d6      	bne.n	8003f4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0212 	mvn.w	r2, #18
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d123      	bne.n	800400a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11f      	bne.n	800400a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d111      	bne.n	800400a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x1c>
 8004048:	2302      	movs	r3, #2
 800404a:	e113      	b.n	8004274 <HAL_ADC_ConfigChannel+0x244>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b09      	cmp	r3, #9
 800405a:	d925      	bls.n	80040a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	3b1e      	subs	r3, #30
 8004072:	2207      	movs	r2, #7
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43da      	mvns	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	400a      	ands	r2, r1
 8004080:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68d9      	ldr	r1, [r3, #12]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	4618      	mov	r0, r3
 8004094:	4603      	mov	r3, r0
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4403      	add	r3, r0
 800409a:	3b1e      	subs	r3, #30
 800409c:	409a      	lsls	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e022      	b.n	80040ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	2207      	movs	r2, #7
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	400a      	ands	r2, r1
 80040ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6919      	ldr	r1, [r3, #16]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4618      	mov	r0, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4403      	add	r3, r0
 80040e4:	409a      	lsls	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d824      	bhi.n	8004140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	3b05      	subs	r3, #5
 8004108:	221f      	movs	r2, #31
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	400a      	ands	r2, r1
 8004116:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b05      	subs	r3, #5
 8004132:	fa00 f203 	lsl.w	r2, r0, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34
 800413e:	e04c      	b.n	80041da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d824      	bhi.n	8004192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	3b23      	subs	r3, #35	@ 0x23
 800415a:	221f      	movs	r2, #31
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43da      	mvns	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	400a      	ands	r2, r1
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	4618      	mov	r0, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	3b23      	subs	r3, #35	@ 0x23
 8004184:	fa00 f203 	lsl.w	r2, r0, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004190:	e023      	b.n	80041da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b41      	subs	r3, #65	@ 0x41
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b41      	subs	r3, #65	@ 0x41
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041da:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <HAL_ADC_ConfigChannel+0x250>)
 80041dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a28      	ldr	r2, [pc, #160]	@ (8004284 <HAL_ADC_ConfigChannel+0x254>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10f      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1d8>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d10b      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <HAL_ADC_ConfigChannel+0x254>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12b      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_ADC_ConfigChannel+0x258>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x1f4>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b11      	cmp	r3, #17
 8004222:	d122      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_ADC_ConfigChannel+0x258>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_ADC_ConfigChannel+0x25c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a11      	ldr	r2, [pc, #68]	@ (8004290 <HAL_ADC_ConfigChannel+0x260>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	0c9a      	lsrs	r2, r3, #18
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800425c:	e002      	b.n	8004264 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f9      	bne.n	800425e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012300 	.word	0x40012300
 8004284:	40012000 	.word	0x40012000
 8004288:	10000012 	.word	0x10000012
 800428c:	20000208 	.word	0x20000208
 8004290:	431bde83 	.word	0x431bde83

08004294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800429c:	4b79      	ldr	r3, [pc, #484]	@ (8004484 <ADC_Init+0x1f0>)
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	021a      	lsls	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	4a58      	ldr	r2, [pc, #352]	@ (8004488 <ADC_Init+0x1f4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800433a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800435c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	e00f      	b.n	8004392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0202 	bic.w	r2, r2, #2
 80043a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6899      	ldr	r1, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7e1b      	ldrb	r3, [r3, #24]
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	3b01      	subs	r3, #1
 80043ec:	035a      	lsls	r2, r3, #13
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e007      	b.n	8004408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	3b01      	subs	r3, #1
 8004424:	051a      	lsls	r2, r3, #20
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800443c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800444a:	025a      	lsls	r2, r3, #9
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	029a      	lsls	r2, r3, #10
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012300 	.word	0x40012300
 8004488:	0f000001 	.word	0x0f000001

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	@ (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff29 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004654:	f7ff ff3e 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	6978      	ldr	r0, [r7, #20]
 8004660:	f7ff ff8e 	bl	8004580 <NVIC_EncodePriority>
 8004664:	4602      	mov	r2, r0
 8004666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff5d 	bl	800452c <__NVIC_SetPriority>
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff31 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ffa2 	bl	80045e8 <SysTick_Config>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046c2:	4b23      	ldr	r3, [pc, #140]	@ (8004750 <HAL_FLASH_Program+0xa0>)
 80046c4:	7e1b      	ldrb	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_FLASH_Program+0x1e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e03b      	b.n	8004746 <HAL_FLASH_Program+0x96>
 80046ce:	4b20      	ldr	r3, [pc, #128]	@ (8004750 <HAL_FLASH_Program+0xa0>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80046d8:	f000 f870 	bl	80047bc <FLASH_WaitForLastOperation>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12b      	bne.n	800473e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80046ec:	783b      	ldrb	r3, [r7, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	68b8      	ldr	r0, [r7, #8]
 80046f2:	f000 f91b 	bl	800492c <FLASH_Program_Byte>
 80046f6:	e016      	b.n	8004726 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80046fe:	883b      	ldrh	r3, [r7, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	68b8      	ldr	r0, [r7, #8]
 8004704:	f000 f8ee 	bl	80048e4 <FLASH_Program_HalfWord>
 8004708:	e00d      	b.n	8004726 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d105      	bne.n	800471c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	68b8      	ldr	r0, [r7, #8]
 8004716:	f000 f8c3 	bl	80048a0 <FLASH_Program_Word>
 800471a:	e004      	b.n	8004726 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800471c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004720:	68b8      	ldr	r0, [r7, #8]
 8004722:	f000 f88b 	bl	800483c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004726:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800472a:	f000 f847 	bl	80047bc <FLASH_WaitForLastOperation>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004732:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_FLASH_Program+0xa4>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	4a07      	ldr	r2, [pc, #28]	@ (8004754 <HAL_FLASH_Program+0xa4>)
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800473e:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <HAL_FLASH_Program+0xa0>)
 8004740:	2200      	movs	r2, #0
 8004742:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20001150 	.word	0x20001150
 8004754:	40023c00 	.word	0x40023c00

08004758 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_FLASH_Unlock+0x38>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da0b      	bge.n	8004782 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800476a:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <HAL_FLASH_Unlock+0x38>)
 800476c:	4a09      	ldr	r2, [pc, #36]	@ (8004794 <HAL_FLASH_Unlock+0x3c>)
 800476e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <HAL_FLASH_Unlock+0x38>)
 8004772:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <HAL_FLASH_Unlock+0x40>)
 8004774:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_FLASH_Unlock+0x38>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da01      	bge.n	8004782 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004782:	79fb      	ldrb	r3, [r7, #7]
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40023c00 	.word	0x40023c00
 8004794:	45670123 	.word	0x45670123
 8004798:	cdef89ab 	.word	0xcdef89ab

0800479c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_FLASH_Lock+0x1c>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <HAL_FLASH_Lock+0x1c>)
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40023c00 	.word	0x40023c00

080047bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <FLASH_WaitForLastOperation+0x78>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80047ce:	f7ff fa3b 	bl	8003c48 <HAL_GetTick>
 80047d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80047d4:	e010      	b.n	80047f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d00c      	beq.n	80047f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <FLASH_WaitForLastOperation+0x38>
 80047e4:	f7ff fa30 	bl	8003c48 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d201      	bcs.n	80047f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e019      	b.n	800482c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80047f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <FLASH_WaitForLastOperation+0x7c>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e8      	bne.n	80047d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <FLASH_WaitForLastOperation+0x7c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <FLASH_WaitForLastOperation+0x7c>)
 8004812:	2201      	movs	r2, #1
 8004814:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <FLASH_WaitForLastOperation+0x7c>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004822:	f000 f8a5 	bl	8004970 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
  
}  
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20001150 	.word	0x20001150
 8004838:	40023c00 	.word	0x40023c00

0800483c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4a13      	ldr	r2, [pc, #76]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 800484e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	4a10      	ldr	r2, [pc, #64]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 800485a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800485e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004860:	4b0e      	ldr	r3, [pc, #56]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <FLASH_Program_DoubleWord+0x60>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004872:	f3bf 8f6f 	isb	sy
}
 8004876:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	000a      	movs	r2, r1
 8004886:	2300      	movs	r3, #0
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	3104      	adds	r1, #4
 800488c:	4613      	mov	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40023c00 	.word	0x40023c00

080048a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	4a09      	ldr	r2, [pc, #36]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4a06      	ldr	r2, [pc, #24]	@ (80048e0 <FLASH_Program_Word+0x40>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 80048f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4a06      	ldr	r2, [pc, #24]	@ (8004928 <FLASH_Program_HalfWord+0x44>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	887a      	ldrh	r2, [r7, #2]
 8004918:	801a      	strh	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00

0800492c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <FLASH_Program_Byte+0x40>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	4a0b      	ldr	r2, [pc, #44]	@ (800496c <FLASH_Program_Byte+0x40>)
 800493e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004944:	4b09      	ldr	r3, [pc, #36]	@ (800496c <FLASH_Program_Byte+0x40>)
 8004946:	4a09      	ldr	r2, [pc, #36]	@ (800496c <FLASH_Program_Byte+0x40>)
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800494c:	4b07      	ldr	r3, [pc, #28]	@ (800496c <FLASH_Program_Byte+0x40>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	4a06      	ldr	r2, [pc, #24]	@ (800496c <FLASH_Program_Byte+0x40>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	701a      	strb	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00

08004970 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004974:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004980:	4b2d      	ldr	r3, [pc, #180]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	4a2b      	ldr	r2, [pc, #172]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 800498a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800498c:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 800498e:	2210      	movs	r2, #16
 8004990:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004992:	4b28      	ldr	r3, [pc, #160]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800499e:	4b26      	ldr	r3, [pc, #152]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f043 0308 	orr.w	r3, r3, #8
 80049a6:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80049aa:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049ac:	2220      	movs	r2, #32
 80049ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80049b0:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f043 0304 	orr.w	r3, r3, #4
 80049c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80049c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049ca:	2240      	movs	r2, #64	@ 0x40
 80049cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80049da:	4b17      	ldr	r3, [pc, #92]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049e8:	2280      	movs	r2, #128	@ 0x80
 80049ea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80049f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 8004a02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 8004a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a0a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a18:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f043 0320 	orr.w	r3, r3, #32
 8004a20:	4a05      	ldr	r2, [pc, #20]	@ (8004a38 <FLASH_SetErrorCode+0xc8>)
 8004a22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <FLASH_SetErrorCode+0xc4>)
 8004a26:	2202      	movs	r2, #2
 8004a28:	60da      	str	r2, [r3, #12]
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40023c00 	.word	0x40023c00
 8004a38:	20001150 	.word	0x20001150

08004a3c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e010      	b.n	8004a7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d103      	bne.n	8004a66 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e009      	b.n	8004a7a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d103      	bne.n	8004a74 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e002      	b.n	8004a7a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004a74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004a86:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	490f      	ldr	r1, [pc, #60]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004a98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004a9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004aaa:	f043 0302 	orr.w	r3, r3, #2
 8004aae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <FLASH_Erase_Sector+0x8c>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aba:	6113      	str	r3, [r2, #16]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40023c00 	.word	0x40023c00

08004acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	@ 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e159      	b.n	8004d9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	f040 8148 	bne.w	8004d96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d005      	beq.n	8004b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d130      	bne.n	8004b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	2203      	movs	r2, #3
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b54:	2201      	movs	r2, #1
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 0201 	and.w	r2, r3, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d017      	beq.n	8004bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	2203      	movs	r2, #3
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d123      	bne.n	8004c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	08da      	lsrs	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3208      	adds	r2, #8
 8004bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	220f      	movs	r2, #15
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	08da      	lsrs	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3208      	adds	r2, #8
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a2 	beq.w	8004d96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	4b57      	ldr	r3, [pc, #348]	@ (8004db4 <HAL_GPIO_Init+0x2e8>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	4a56      	ldr	r2, [pc, #344]	@ (8004db4 <HAL_GPIO_Init+0x2e8>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c62:	4b54      	ldr	r3, [pc, #336]	@ (8004db4 <HAL_GPIO_Init+0x2e8>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c6e:	4a52      	ldr	r2, [pc, #328]	@ (8004db8 <HAL_GPIO_Init+0x2ec>)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	3302      	adds	r3, #2
 8004c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	220f      	movs	r2, #15
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a49      	ldr	r2, [pc, #292]	@ (8004dbc <HAL_GPIO_Init+0x2f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d019      	beq.n	8004cce <HAL_GPIO_Init+0x202>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a48      	ldr	r2, [pc, #288]	@ (8004dc0 <HAL_GPIO_Init+0x2f4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_GPIO_Init+0x1fe>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a47      	ldr	r2, [pc, #284]	@ (8004dc4 <HAL_GPIO_Init+0x2f8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_GPIO_Init+0x1fa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a46      	ldr	r2, [pc, #280]	@ (8004dc8 <HAL_GPIO_Init+0x2fc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <HAL_GPIO_Init+0x1f6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a45      	ldr	r2, [pc, #276]	@ (8004dcc <HAL_GPIO_Init+0x300>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_GPIO_Init+0x1f2>
 8004cba:	2304      	movs	r3, #4
 8004cbc:	e008      	b.n	8004cd0 <HAL_GPIO_Init+0x204>
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	e006      	b.n	8004cd0 <HAL_GPIO_Init+0x204>
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e004      	b.n	8004cd0 <HAL_GPIO_Init+0x204>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e002      	b.n	8004cd0 <HAL_GPIO_Init+0x204>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_GPIO_Init+0x204>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f002 0203 	and.w	r2, r2, #3
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	4093      	lsls	r3, r2
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ce0:	4935      	ldr	r1, [pc, #212]	@ (8004db8 <HAL_GPIO_Init+0x2ec>)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cee:	4b38      	ldr	r3, [pc, #224]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d12:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d18:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d3c:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d42:	4b23      	ldr	r3, [pc, #140]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d66:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d6c:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d90:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd0 <HAL_GPIO_Init+0x304>)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b0f      	cmp	r3, #15
 8004da0:	f67f aea2 	bls.w	8004ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40013800 	.word	0x40013800
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	40020400 	.word	0x40020400
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	40020c00 	.word	0x40020c00
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40013c00 	.word	0x40013c00

08004dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de4:	787b      	ldrb	r3, [r7, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004df0:	e003      	b.n	8004dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	041a      	lsls	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e12b      	b.n	8005072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fe fc4e 	bl	80036d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	@ 0x24
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f001 f9b8 	bl	80061e0 <HAL_RCC_GetPCLK1Freq>
 8004e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4a81      	ldr	r2, [pc, #516]	@ (800507c <HAL_I2C_Init+0x274>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d807      	bhi.n	8004e8c <HAL_I2C_Init+0x84>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a80      	ldr	r2, [pc, #512]	@ (8005080 <HAL_I2C_Init+0x278>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bf94      	ite	ls
 8004e84:	2301      	movls	r3, #1
 8004e86:	2300      	movhi	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e006      	b.n	8004e9a <HAL_I2C_Init+0x92>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005084 <HAL_I2C_Init+0x27c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bf94      	ite	ls
 8004e94:	2301      	movls	r3, #1
 8004e96:	2300      	movhi	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0e7      	b.n	8005072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a78      	ldr	r2, [pc, #480]	@ (8005088 <HAL_I2C_Init+0x280>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0c9b      	lsrs	r3, r3, #18
 8004eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800507c <HAL_I2C_Init+0x274>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <HAL_I2C_Init+0xd4>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	e009      	b.n	8004ef0 <HAL_I2C_Init+0xe8>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	4a69      	ldr	r2, [pc, #420]	@ (800508c <HAL_I2C_Init+0x284>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	099b      	lsrs	r3, r3, #6
 8004eee:	3301      	adds	r3, #1
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	495c      	ldr	r1, [pc, #368]	@ (800507c <HAL_I2C_Init+0x274>)
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d819      	bhi.n	8004f44 <HAL_I2C_Init+0x13c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1e59      	subs	r1, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f24:	400b      	ands	r3, r1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_I2C_Init+0x138>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1e59      	subs	r1, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3e:	e051      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f40:	2304      	movs	r3, #4
 8004f42:	e04f      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d111      	bne.n	8004f70 <HAL_I2C_Init+0x168>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1e58      	subs	r0, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	440b      	add	r3, r1
 8004f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e012      	b.n	8004f96 <HAL_I2C_Init+0x18e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1e58      	subs	r0, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	0099      	lsls	r1, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Init+0x196>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e022      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_I2C_Init+0x1bc>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1e58      	subs	r0, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	440b      	add	r3, r1
 8004fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc2:	e00f      	b.n	8004fe4 <HAL_I2C_Init+0x1dc>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1e58      	subs	r0, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	0099      	lsls	r1, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	6809      	ldr	r1, [r1, #0]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005012:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6911      	ldr	r1, [r2, #16]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	430b      	orrs	r3, r1
 8005026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	000186a0 	.word	0x000186a0
 8005080:	001e847f 	.word	0x001e847f
 8005084:	003d08ff 	.word	0x003d08ff
 8005088:	431bde83 	.word	0x431bde83
 800508c:	10624dd3 	.word	0x10624dd3

08005090 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	460b      	mov	r3, r1
 80050a4:	813b      	strh	r3, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050aa:	f7fe fdcd 	bl	8003c48 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	f040 80d9 	bne.w	8005270 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2319      	movs	r3, #25
 80050c4:	2201      	movs	r2, #1
 80050c6:	496d      	ldr	r1, [pc, #436]	@ (800527c <HAL_I2C_Mem_Write+0x1ec>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f971 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
 80050d6:	e0cc      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Mem_Write+0x56>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0c5      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d007      	beq.n	800510c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	@ 0x21
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	@ 0x40
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800513c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a4d      	ldr	r2, [pc, #308]	@ (8005280 <HAL_I2C_Mem_Write+0x1f0>)
 800514c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514e:	88f8      	ldrh	r0, [r7, #6]
 8005150:	893a      	ldrh	r2, [r7, #8]
 8005152:	8979      	ldrh	r1, [r7, #10]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4603      	mov	r3, r0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f890 	bl	8005284 <I2C_RequestMemoryWrite>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d052      	beq.n	8005210 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e081      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fa36 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e06b      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_I2C_Mem_Write+0x180>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d017      	beq.n	8005210 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1aa      	bne.n	800516e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fa29 	bl	8005674 <I2C_WaitOnBTFFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	2b04      	cmp	r3, #4
 800522e:	d107      	bne.n	8005240 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e016      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e000      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
  }
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	00100002 	.word	0x00100002
 8005280:	ffff0000 	.word	0xffff0000

08005284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f878 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d4:	d103      	bne.n	80052de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e05f      	b.n	80053a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	492d      	ldr	r1, [pc, #180]	@ (80053ac <I2C_RequestMemoryWrite+0x128>)
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8d3 	bl	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e04c      	b.n	80053a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f95e 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	2b04      	cmp	r3, #4
 8005334:	d107      	bne.n	8005346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e02b      	b.n	80053a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]
 800535a:	e021      	b.n	80053a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	b29b      	uxth	r3, r3
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536c:	6a39      	ldr	r1, [r7, #32]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f938 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	2b04      	cmp	r3, #4
 8005380:	d107      	bne.n	8005392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e005      	b.n	80053a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	00010002 	.word	0x00010002

080053b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c0:	e048      	b.n	8005454 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d044      	beq.n	8005454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fe fc3d 	bl	8003c48 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d139      	bne.n	8005454 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10d      	bne.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	43da      	mvns	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	e00c      	b.n	8005420 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	43da      	mvns	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d116      	bne.n	8005454 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e023      	b.n	800549c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10d      	bne.n	800547a <I2C_WaitOnFlagUntilTimeout+0xca>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	43da      	mvns	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	e00c      	b.n	8005494 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	43da      	mvns	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	429a      	cmp	r2, r3
 8005498:	d093      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b2:	e071      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c2:	d123      	bne.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	f043 0204 	orr.w	r2, r3, #4
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e067      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d041      	beq.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fe fb98 	bl	8003c48 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d136      	bne.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10c      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e00b      	b.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e021      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10c      	bne.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e00b      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	43da      	mvns	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f af6d 	bne.w	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f0:	e034      	b.n	800565c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f886 	bl	8005704 <I2C_IsAcknowledgeFailed>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e034      	b.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d028      	beq.n	800565c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fe fb1d 	bl	8003c48 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11d      	bne.n	800565c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d016      	beq.n	800565c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005666:	2b80      	cmp	r3, #128	@ 0x80
 8005668:	d1c3      	bne.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005680:	e034      	b.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f83e 	bl	8005704 <I2C_IsAcknowledgeFailed>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e034      	b.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d028      	beq.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fe fad5 	bl	8003c48 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11d      	bne.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d016      	beq.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e007      	b.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d1c3      	bne.n	8005682 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571a:	d11b      	bne.n	8005754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	f043 0204 	orr.w	r2, r3, #4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af02      	add	r7, sp, #8
 8005768:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e101      	b.n	8005978 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fd ffe6 	bl	8003760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a2:	d102      	bne.n	80057aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fd8e 	bl	80062d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7c1a      	ldrb	r2, [r3, #16]
 80057bc:	f88d 2000 	strb.w	r2, [sp]
 80057c0:	3304      	adds	r3, #4
 80057c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c4:	f000 fd20 	bl	8006208 <USB_CoreInit>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0ce      	b.n	8005978 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fd86 	bl	80062f2 <USB_SetCurrentMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0bf      	b.n	8005978 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	e04a      	b.n	8005894 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3315      	adds	r3, #21
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3314      	adds	r3, #20
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	b298      	uxth	r0, r3
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	332e      	adds	r3, #46	@ 0x2e
 800583a:	4602      	mov	r2, r0
 800583c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	3318      	adds	r3, #24
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	331c      	adds	r3, #28
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3320      	adds	r3, #32
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3324      	adds	r3, #36	@ 0x24
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	3301      	adds	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	791b      	ldrb	r3, [r3, #4]
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3af      	bcc.n	80057fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e044      	b.n	800592e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058a4:	7bfa      	ldrb	r2, [r7, #15]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058ba:	7bfa      	ldrb	r2, [r7, #15]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058d0:	7bfa      	ldrb	r2, [r7, #15]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058e6:	7bfa      	ldrb	r2, [r7, #15]
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	3301      	adds	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	791b      	ldrb	r3, [r3, #4]
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	429a      	cmp	r2, r3
 8005936:	d3b5      	bcc.n	80058a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7c1a      	ldrb	r2, [r3, #16]
 8005940:	f88d 2000 	strb.w	r2, [sp]
 8005944:	3304      	adds	r3, #4
 8005946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005948:	f000 fd20 	bl	800638c <USB_DevInit>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e00c      	b.n	8005978 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fee8 	bl	8006746 <USB_DevDisconnect>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e267      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d075      	beq.n	8005a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800599e:	4b88      	ldr	r3, [pc, #544]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d00c      	beq.n	80059c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059aa:	4b85      	ldr	r3, [pc, #532]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d112      	bne.n	80059dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b6:	4b82      	ldr	r3, [pc, #520]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059c2:	d10b      	bne.n	80059dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c4:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d05b      	beq.n	8005a88 <HAL_RCC_OscConfig+0x108>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d157      	bne.n	8005a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e242      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e4:	d106      	bne.n	80059f4 <HAL_RCC_OscConfig+0x74>
 80059e6:	4b76      	ldr	r3, [pc, #472]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a75      	ldr	r2, [pc, #468]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e01d      	b.n	8005a30 <HAL_RCC_OscConfig+0xb0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059fc:	d10c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x98>
 80059fe:	4b70      	ldr	r3, [pc, #448]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6f      	ldr	r2, [pc, #444]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e00b      	b.n	8005a30 <HAL_RCC_OscConfig+0xb0>
 8005a18:	4b69      	ldr	r3, [pc, #420]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a68      	ldr	r2, [pc, #416]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a65      	ldr	r2, [pc, #404]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d013      	beq.n	8005a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a38:	f7fe f906 	bl	8003c48 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a40:	f7fe f902 	bl	8003c48 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	@ 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e207      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0xc0>
 8005a5e:	e014      	b.n	8005a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fe f8f2 	bl	8003c48 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a68:	f7fe f8ee 	bl	8003c48 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	@ 0x64
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e1f3      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7a:	4b51      	ldr	r3, [pc, #324]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0xe8>
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d063      	beq.n	8005b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a96:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa2:	4b47      	ldr	r3, [pc, #284]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d11c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aae:	4b44      	ldr	r3, [pc, #272]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d116      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aba:	4b41      	ldr	r3, [pc, #260]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x152>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e1c7      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4937      	ldr	r1, [pc, #220]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae6:	e03a      	b.n	8005b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d020      	beq.n	8005b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af0:	4b34      	ldr	r3, [pc, #208]	@ (8005bc4 <HAL_RCC_OscConfig+0x244>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fe f8a7 	bl	8003c48 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005afe:	f7fe f8a3 	bl	8003c48 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e1a8      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b10:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1c:	4b28      	ldr	r3, [pc, #160]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4925      	ldr	r1, [pc, #148]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]
 8005b30:	e015      	b.n	8005b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b32:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <HAL_RCC_OscConfig+0x244>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fe f886 	bl	8003c48 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b40:	f7fe f882 	bl	8003c48 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e187      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d036      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b72:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <HAL_RCC_OscConfig+0x248>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fe f866 	bl	8003c48 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b80:	f7fe f862 	bl	8003c48 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e167      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b92:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <HAL_RCC_OscConfig+0x240>)
 8005b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x200>
 8005b9e:	e01b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba0:	4b09      	ldr	r3, [pc, #36]	@ (8005bc8 <HAL_RCC_OscConfig+0x248>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba6:	f7fe f84f 	bl	8003c48 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bac:	e00e      	b.n	8005bcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bae:	f7fe f84b 	bl	8003c48 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d907      	bls.n	8005bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e150      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	42470000 	.word	0x42470000
 8005bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bcc:	4b88      	ldr	r3, [pc, #544]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1ea      	bne.n	8005bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8097 	beq.w	8005d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bea:	4b81      	ldr	r3, [pc, #516]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10f      	bne.n	8005c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c06:	4b7a      	ldr	r3, [pc, #488]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c16:	4b77      	ldr	r3, [pc, #476]	@ (8005df4 <HAL_RCC_OscConfig+0x474>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d118      	bne.n	8005c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c22:	4b74      	ldr	r3, [pc, #464]	@ (8005df4 <HAL_RCC_OscConfig+0x474>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	@ (8005df4 <HAL_RCC_OscConfig+0x474>)
 8005c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c2e:	f7fe f80b 	bl	8003c48 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c36:	f7fe f807 	bl	8003c48 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e10c      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c48:	4b6a      	ldr	r3, [pc, #424]	@ (8005df4 <HAL_RCC_OscConfig+0x474>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCC_OscConfig+0x2ea>
 8005c5c:	4b64      	ldr	r3, [pc, #400]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c60:	4a63      	ldr	r2, [pc, #396]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c68:	e01c      	b.n	8005ca4 <HAL_RCC_OscConfig+0x324>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCC_OscConfig+0x30c>
 8005c72:	4b5f      	ldr	r3, [pc, #380]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c76:	4a5e      	ldr	r2, [pc, #376]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c82:	4a5b      	ldr	r2, [pc, #364]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c8a:	e00b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x324>
 8005c8c:	4b58      	ldr	r3, [pc, #352]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c90:	4a57      	ldr	r2, [pc, #348]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c98:	4b55      	ldr	r3, [pc, #340]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9c:	4a54      	ldr	r2, [pc, #336]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	f023 0304 	bic.w	r3, r3, #4
 8005ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fd ffcc 	bl	8003c48 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fd ffc8 	bl	8003c48 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0cb      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cca:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0ee      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x334>
 8005cd6:	e014      	b.n	8005d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd8:	f7fd ffb6 	bl	8003c48 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7fd ffb2 	bl	8003c48 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e0b5      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ee      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d105      	bne.n	8005d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d08:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	4a38      	ldr	r2, [pc, #224]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80a1 	beq.w	8005e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d1e:	4b34      	ldr	r3, [pc, #208]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d05c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d141      	bne.n	8005db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d32:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <HAL_RCC_OscConfig+0x478>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fd ff86 	bl	8003c48 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fd ff82 	bl	8003c48 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e087      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	019b      	lsls	r3, r3, #6
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	3b01      	subs	r3, #1
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	061b      	lsls	r3, r3, #24
 8005d82:	491b      	ldr	r1, [pc, #108]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d88:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <HAL_RCC_OscConfig+0x478>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fd ff5b 	bl	8003c48 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fd ff57 	bl	8003c48 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e05c      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x416>
 8005db4:	e054      	b.n	8005e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <HAL_RCC_OscConfig+0x478>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fd ff44 	bl	8003c48 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fd ff40 	bl	8003c48 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e045      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x444>
 8005de2:	e03d      	b.n	8005e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e038      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
 8005df0:	40023800 	.word	0x40023800
 8005df4:	40007000 	.word	0x40007000
 8005df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e6c <HAL_RCC_OscConfig+0x4ec>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d028      	beq.n	8005e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d121      	bne.n	8005e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d11a      	bne.n	8005e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d111      	bne.n	8005e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	3b01      	subs	r3, #1
 8005e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d107      	bne.n	8005e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0cc      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e84:	4b68      	ldr	r3, [pc, #416]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d90c      	bls.n	8005eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b65      	ldr	r3, [pc, #404]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b63      	ldr	r3, [pc, #396]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0b8      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d020      	beq.n	8005efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ec4:	4b59      	ldr	r3, [pc, #356]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a58      	ldr	r2, [pc, #352]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005edc:	4b53      	ldr	r3, [pc, #332]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a52      	ldr	r2, [pc, #328]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee8:	4b50      	ldr	r3, [pc, #320]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	494d      	ldr	r1, [pc, #308]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d044      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0e:	4b47      	ldr	r3, [pc, #284]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d119      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e07f      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d003      	beq.n	8005f2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d107      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e06f      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e067      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f4e:	4b37      	ldr	r3, [pc, #220]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f023 0203 	bic.w	r2, r3, #3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4934      	ldr	r1, [pc, #208]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f60:	f7fd fe72 	bl	8003c48 <HAL_GetTick>
 8005f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f66:	e00a      	b.n	8005f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f68:	f7fd fe6e 	bl	8003c48 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e04f      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 020c 	and.w	r2, r3, #12
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d1eb      	bne.n	8005f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f90:	4b25      	ldr	r3, [pc, #148]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d20c      	bcs.n	8005fb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9e:	4b22      	ldr	r3, [pc, #136]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	4b20      	ldr	r3, [pc, #128]	@ (8006028 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e032      	b.n	800601e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fc4:	4b19      	ldr	r3, [pc, #100]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4916      	ldr	r1, [pc, #88]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fe2:	4b12      	ldr	r3, [pc, #72]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	490e      	ldr	r1, [pc, #56]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ff6:	f000 f821 	bl	800603c <HAL_RCC_GetSysClockFreq>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800602c <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	091b      	lsrs	r3, r3, #4
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	490a      	ldr	r1, [pc, #40]	@ (8006030 <HAL_RCC_ClockConfig+0x1c0>)
 8006008:	5ccb      	ldrb	r3, [r1, r3]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <HAL_RCC_ClockConfig+0x1c4>)
 8006010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006012:	4b09      	ldr	r3, [pc, #36]	@ (8006038 <HAL_RCC_ClockConfig+0x1c8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd fdd2 	bl	8003bc0 <HAL_InitTick>

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023c00 	.word	0x40023c00
 800602c:	40023800 	.word	0x40023800
 8006030:	0800ee38 	.word	0x0800ee38
 8006034:	20000208 	.word	0x20000208
 8006038:	20000224 	.word	0x20000224

0800603c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b090      	sub	sp, #64	@ 0x40
 8006042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	637b      	str	r3, [r7, #52]	@ 0x34
 8006048:	2300      	movs	r3, #0
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800604c:	2300      	movs	r3, #0
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006054:	4b59      	ldr	r3, [pc, #356]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 030c 	and.w	r3, r3, #12
 800605c:	2b08      	cmp	r3, #8
 800605e:	d00d      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0x40>
 8006060:	2b08      	cmp	r3, #8
 8006062:	f200 80a1 	bhi.w	80061a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x34>
 800606a:	2b04      	cmp	r3, #4
 800606c:	d003      	beq.n	8006076 <HAL_RCC_GetSysClockFreq+0x3a>
 800606e:	e09b      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b53      	ldr	r3, [pc, #332]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006074:	e09b      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006076:	4b53      	ldr	r3, [pc, #332]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800607a:	e098      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800607c:	4b4f      	ldr	r3, [pc, #316]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006086:	4b4d      	ldr	r3, [pc, #308]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d028      	beq.n	80060e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006092:	4b4a      	ldr	r3, [pc, #296]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	2200      	movs	r2, #0
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	627a      	str	r2, [r7, #36]	@ 0x24
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060a4:	2100      	movs	r1, #0
 80060a6:	4b47      	ldr	r3, [pc, #284]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80060a8:	fb03 f201 	mul.w	r2, r3, r1
 80060ac:	2300      	movs	r3, #0
 80060ae:	fb00 f303 	mul.w	r3, r0, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	4a43      	ldr	r2, [pc, #268]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80060b6:	fba0 1202 	umull	r1, r2, r0, r2
 80060ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060bc:	460a      	mov	r2, r1
 80060be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80060c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c2:	4413      	add	r3, r2
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c8:	2200      	movs	r2, #0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	61fa      	str	r2, [r7, #28]
 80060ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80060d6:	f7fa f8eb 	bl	80002b0 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4613      	mov	r3, r2
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060e2:	e053      	b.n	800618c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e4:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	099b      	lsrs	r3, r3, #6
 80060ea:	2200      	movs	r2, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	617a      	str	r2, [r7, #20]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060f6:	f04f 0b00 	mov.w	fp, #0
 80060fa:	4652      	mov	r2, sl
 80060fc:	465b      	mov	r3, fp
 80060fe:	f04f 0000 	mov.w	r0, #0
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	0159      	lsls	r1, r3, #5
 8006108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610c:	0150      	lsls	r0, r2, #5
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	ebb2 080a 	subs.w	r8, r2, sl
 8006116:	eb63 090b 	sbc.w	r9, r3, fp
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800612a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800612e:	ebb2 0408 	subs.w	r4, r2, r8
 8006132:	eb63 0509 	sbc.w	r5, r3, r9
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	00eb      	lsls	r3, r5, #3
 8006140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006144:	00e2      	lsls	r2, r4, #3
 8006146:	4614      	mov	r4, r2
 8006148:	461d      	mov	r5, r3
 800614a:	eb14 030a 	adds.w	r3, r4, sl
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	eb45 030b 	adc.w	r3, r5, fp
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006162:	4629      	mov	r1, r5
 8006164:	028b      	lsls	r3, r1, #10
 8006166:	4621      	mov	r1, r4
 8006168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800616c:	4621      	mov	r1, r4
 800616e:	028a      	lsls	r2, r1, #10
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	2200      	movs	r2, #0
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	60fa      	str	r2, [r7, #12]
 800617c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006180:	f7fa f896 	bl	80002b0 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4613      	mov	r3, r2
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x180>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	3301      	adds	r3, #1
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800619c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061a6:	e002      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80061aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3740      	adds	r7, #64	@ 0x40
 80061b4:	46bd      	mov	sp, r7
 80061b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800
 80061c0:	00f42400 	.word	0x00f42400
 80061c4:	018cba80 	.word	0x018cba80

080061c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061cc:	4b03      	ldr	r3, [pc, #12]	@ (80061dc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000208 	.word	0x20000208

080061e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061e4:	f7ff fff0 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	0a9b      	lsrs	r3, r3, #10
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	4903      	ldr	r1, [pc, #12]	@ (8006204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061f6:	5ccb      	ldrb	r3, [r1, r3]
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40023800 	.word	0x40023800
 8006204:	0800ee48 	.word	0x0800ee48

08006208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006208:	b084      	sub	sp, #16
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	f107 001c 	add.w	r0, r7, #28
 8006216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800621a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800621e:	2b01      	cmp	r3, #1
 8006220:	d123      	bne.n	800626a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800624a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 faa0 	bl	80067a4 <USB_CoreReset>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e01b      	b.n	80062a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa94 	bl	80067a4 <USB_CoreReset>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006280:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38
 8006294:	e005      	b.n	80062a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062a2:	7fbb      	ldrb	r3, [r7, #30]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10b      	bne.n	80062c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f043 0206 	orr.w	r2, r3, #6
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062cc:	b004      	add	sp, #16
 80062ce:	4770      	bx	lr

080062d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 0201 	bic.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d115      	bne.n	8006340 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006320:	200a      	movs	r0, #10
 8006322:	f7fd fc9d 	bl	8003c60 <HAL_Delay>
      ms += 10U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	330a      	adds	r3, #10
 800632a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa2b 	bl	8006788 <USB_GetMode>
 8006332:	4603      	mov	r3, r0
 8006334:	2b01      	cmp	r3, #1
 8006336:	d01e      	beq.n	8006376 <USB_SetCurrentMode+0x84>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2bc7      	cmp	r3, #199	@ 0xc7
 800633c:	d9f0      	bls.n	8006320 <USB_SetCurrentMode+0x2e>
 800633e:	e01a      	b.n	8006376 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d115      	bne.n	8006372 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006352:	200a      	movs	r0, #10
 8006354:	f7fd fc84 	bl	8003c60 <HAL_Delay>
      ms += 10U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	330a      	adds	r3, #10
 800635c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa12 	bl	8006788 <USB_GetMode>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <USB_SetCurrentMode+0x84>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2bc7      	cmp	r3, #199	@ 0xc7
 800636e:	d9f0      	bls.n	8006352 <USB_SetCurrentMode+0x60>
 8006370:	e001      	b.n	8006376 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e005      	b.n	8006382 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2bc8      	cmp	r3, #200	@ 0xc8
 800637a:	d101      	bne.n	8006380 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800638c:	b084      	sub	sp, #16
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800639a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	e009      	b.n	80063c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3340      	adds	r3, #64	@ 0x40
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3301      	adds	r3, #1
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b0e      	cmp	r3, #14
 80063c4:	d9f2      	bls.n	80063ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d11c      	bne.n	8006408 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063dc:	f043 0302 	orr.w	r3, r3, #2
 80063e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	@ 0x38
 8006406:	e00b      	b.n	8006420 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800642c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006430:	2b01      	cmp	r3, #1
 8006432:	d10d      	bne.n	8006450 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800643c:	2100      	movs	r1, #0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f968 	bl	8006714 <USB_SetDevSpeed>
 8006444:	e008      	b.n	8006458 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006446:	2101      	movs	r1, #1
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f963 	bl	8006714 <USB_SetDevSpeed>
 800644e:	e003      	b.n	8006458 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006450:	2103      	movs	r1, #3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f95e 	bl	8006714 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006458:	2110      	movs	r1, #16
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f8fa 	bl	8006654 <USB_FlushTxFifo>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f924 	bl	80066b8 <USB_FlushRxFifo>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e043      	b.n	800652c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ba:	d118      	bne.n	80064ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ce:	461a      	mov	r2, r3
 80064d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e013      	b.n	8006500 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e4:	461a      	mov	r2, r3
 80064e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e008      	b.n	8006500 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fa:	461a      	mov	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650c:	461a      	mov	r2, r3
 800650e:	2300      	movs	r3, #0
 8006510:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651e:	461a      	mov	r2, r3
 8006520:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3301      	adds	r3, #1
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006530:	461a      	mov	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4293      	cmp	r3, r2
 8006536:	d3b5      	bcc.n	80064a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	e043      	b.n	80065c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006554:	d118      	bne.n	8006588 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e013      	b.n	800659a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e008      	b.n	800659a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006594:	461a      	mov	r2, r3
 8006596:	2300      	movs	r3, #0
 8006598:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a6:	461a      	mov	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	3301      	adds	r3, #1
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065ca:	461a      	mov	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d3b5      	bcc.n	800653e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f043 0210 	orr.w	r2, r3, #16
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <USB_DevInit+0x2c4>)
 800660e:	4313      	orrs	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006614:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f043 0208 	orr.w	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006628:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	803c3800 	.word	0x803c3800

08006654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800666e:	d901      	bls.n	8006674 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e01b      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	daf2      	bge.n	8006662 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	019b      	lsls	r3, r3, #6
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006698:	d901      	bls.n	800669e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e006      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d0f0      	beq.n	800668c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3301      	adds	r3, #1
 80066c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d0:	d901      	bls.n	80066d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e018      	b.n	8006708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	daf2      	bge.n	80066c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2210      	movs	r2, #16
 80066e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f4:	d901      	bls.n	80066fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e006      	b.n	8006708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b10      	cmp	r3, #16
 8006704:	d0f0      	beq.n	80066e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006734:	4313      	orrs	r3, r2
 8006736:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006760:	f023 0303 	bic.w	r3, r3, #3
 8006764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0301 	and.w	r3, r3, #1
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067bc:	d901      	bls.n	80067c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e01b      	b.n	80067fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	daf2      	bge.n	80067b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e6:	d901      	bls.n	80067ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d0f0      	beq.n	80067da <USB_CoreReset+0x36>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	22e8      	movs	r2, #232	@ 0xe8
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	4a30      	ldr	r2, [pc, #192]	@ (80068e0 <_prep_out_transaction+0xd8>)
 8006820:	4413      	add	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	01db      	lsls	r3, r3, #7
 8006828:	4a2e      	ldr	r2, [pc, #184]	@ (80068e4 <_prep_out_transaction+0xdc>)
 800682a:	4413      	add	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 800682e:	f002 f851 	bl	80088d4 <tud_mounted>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <_prep_out_transaction+0x44>
 8006838:	f002 f85e 	bl	80088f8 <tud_suspended>
 800683c:	4603      	mov	r3, r0
 800683e:	f083 0301 	eor.w	r3, r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <_prep_out_transaction+0x44>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <_prep_out_transaction+0x46>
 800684c:	2300      	movs	r3, #0
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8006854:	f083 0301 	eor.w	r3, r3, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <_prep_out_transaction+0x5e>
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <_prep_out_transaction+0x62>
 8006866:	2300      	movs	r3, #0
 8006868:	e035      	b.n	80068d6 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3310      	adds	r3, #16
 800686e:	4618      	mov	r0, r3
 8006870:	f001 feab 	bl	80085ca <tu_fifo_remaining>
 8006874:	4603      	mov	r3, r0
 8006876:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8006878:	897b      	ldrh	r3, [r7, #10]
 800687a:	2b3f      	cmp	r3, #63	@ 0x3f
 800687c:	d801      	bhi.n	8006882 <_prep_out_transaction+0x7a>
 800687e:	2300      	movs	r3, #0
 8006880:	e029      	b.n	80068d6 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	78da      	ldrb	r2, [r3, #3]
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f003 fb44 	bl	8009f18 <usbd_edpt_claim>
 8006890:	4603      	mov	r3, r0
 8006892:	f083 0301 	eor.w	r3, r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <_prep_out_transaction+0x98>
 800689c:	2300      	movs	r3, #0
 800689e:	e01a      	b.n	80068d6 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	3310      	adds	r3, #16
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fe90 	bl	80085ca <tu_fifo_remaining>
 80068aa:	4603      	mov	r3, r0
 80068ac:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 80068ae:	897b      	ldrh	r3, [r7, #10]
 80068b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80068b2:	d908      	bls.n	80068c6 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	78d9      	ldrb	r1, [r3, #3]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	7df8      	ldrb	r0, [r7, #23]
 80068bc:	2340      	movs	r3, #64	@ 0x40
 80068be:	f003 fb7b 	bl	8009fb8 <usbd_edpt_xfer>
 80068c2:	4603      	mov	r3, r0
 80068c4:	e007      	b.n	80068d6 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	78da      	ldrb	r2, [r3, #3]
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f003 fb4a 	bl	8009f68 <usbd_edpt_release>
    return false;
 80068d4:	2300      	movs	r3, #0
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20001170 	.word	0x20001170
 80068e4:	20001258 	.word	0x20001258

080068e8 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
 80068f2:	f001 ffef 	bl	80088d4 <tud_mounted>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <tud_cdc_n_connected+0x28>
 80068fc:	f001 fffc 	bl	80088f8 <tud_suspended>
 8006900:	4603      	mov	r3, r0
 8006902:	f083 0301 	eor.w	r3, r3, #1
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <tud_cdc_n_connected+0x28>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <tud_cdc_n_connected+0x2a>
 8006910:	2300      	movs	r3, #0
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006918:	2b00      	cmp	r3, #0
 800691a:	d019      	beq.n	8006950 <tud_cdc_n_connected+0x68>
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	4a10      	ldr	r2, [pc, #64]	@ (8006960 <tud_cdc_n_connected+0x78>)
 8006920:	21e8      	movs	r1, #232	@ 0xe8
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	3304      	adds	r3, #4
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	2300      	movs	r3, #0
 8006930:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <tud_cdc_n_connected+0x68>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <tud_cdc_n_connected+0x6a>
 8006950:	2300      	movs	r3, #0
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	b2db      	uxtb	r3, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20001170 	.word	0x20001170

08006964 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	22e8      	movs	r2, #232	@ 0xe8
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	3310      	adds	r3, #16
 8006978:	4a04      	ldr	r2, [pc, #16]	@ (800698c <tud_cdc_n_available+0x28>)
 800697a:	4413      	add	r3, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fdaf 	bl	80084e0 <tu_fifo_count>
 8006982:	4603      	mov	r3, r0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20001170 	.word	0x20001170

08006990 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	22e8      	movs	r2, #232	@ 0xe8
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	4a0f      	ldr	r2, [pc, #60]	@ (80069e4 <tud_cdc_n_read+0x54>)
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f103 0010 	add.w	r0, r3, #16
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d802      	bhi.n	80069c2 <tud_cdc_n_read+0x32>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	e001      	b.n	80069c6 <tud_cdc_n_read+0x36>
 80069c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069c6:	461a      	mov	r2, r3
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	f001 fe5a 	bl	8008682 <tu_fifo_read_n>
 80069ce:	4603      	mov	r3, r0
 80069d0:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff17 	bl	8006808 <_prep_out_transaction>
  return num_read;
 80069da:	693b      	ldr	r3, [r7, #16]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20001170 	.word	0x20001170

080069e8 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	22e8      	movs	r2, #232	@ 0xe8
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	4a13      	ldr	r2, [pc, #76]	@ (8006a4c <tud_cdc_n_write+0x64>)
 8006a00:	4413      	add	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f103 001c 	add.w	r0, r3, #28
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d802      	bhi.n	8006a1a <tud_cdc_n_write+0x32>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	e001      	b.n	8006a1e <tud_cdc_n_write+0x36>
 8006a1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	f001 fe95 	bl	8008750 <tu_fifo_write_n>
 8006a26:	4603      	mov	r3, r0
 8006a28:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	331c      	adds	r3, #28
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fd56 	bl	80084e0 <tu_fifo_count>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a38:	d903      	bls.n	8006a42 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f807 	bl	8006a50 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8006a42:	8a7b      	ldrh	r3, [r7, #18]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20001170 	.word	0x20001170

08006a50 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	22e8      	movs	r2, #232	@ 0xe8
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	4a39      	ldr	r2, [pc, #228]	@ (8006b48 <tud_cdc_n_write_flush+0xf8>)
 8006a64:	4413      	add	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	01db      	lsls	r3, r3, #7
 8006a6c:	4a37      	ldr	r2, [pc, #220]	@ (8006b4c <tud_cdc_n_write_flush+0xfc>)
 8006a6e:	4413      	add	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	f001 ff2f 	bl	80088d4 <tud_mounted>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <tud_cdc_n_write_flush+0x40>
 8006a7c:	f001 ff3c 	bl	80088f8 <tud_suspended>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f083 0301 	eor.w	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <tud_cdc_n_write_flush+0x40>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <tud_cdc_n_write_flush+0x42>
 8006a90:	2300      	movs	r3, #0
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8006a98:	f083 0301 	eor.w	r3, r3, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <tud_cdc_n_write_flush+0x56>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e04c      	b.n	8006b40 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	331c      	adds	r3, #28
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fd18 	bl	80084e0 <tu_fifo_count>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e042      	b.n	8006b40 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	789a      	ldrb	r2, [r3, #2]
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f003 fa26 	bl	8009f18 <usbd_edpt_claim>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f083 0301 	eor.w	r3, r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <tud_cdc_n_write_flush+0x8c>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e031      	b.n	8006b40 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f103 001c 	add.w	r0, r3, #28
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3340      	adds	r3, #64	@ 0x40
 8006ae6:	2240      	movs	r2, #64	@ 0x40
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f001 fdca 	bl	8008682 <tu_fifo_read_n>
 8006aee:	4603      	mov	r3, r0
 8006af0:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006af2:	89bb      	ldrh	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01b      	beq.n	8006b30 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	7899      	ldrb	r1, [r3, #2]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006b02:	89bb      	ldrh	r3, [r7, #12]
 8006b04:	7bf8      	ldrb	r0, [r7, #15]
 8006b06:	f003 fa57 	bl	8009fb8 <usbd_edpt_xfer>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f083 0301 	eor.w	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <tud_cdc_n_write_flush+0xdc>
 8006b16:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <tud_cdc_n_write_flush+0x100>)
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d000      	beq.n	8006b28 <tud_cdc_n_write_flush+0xd8>
 8006b26:	be00      	bkpt	0x0000
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e009      	b.n	8006b40 <tud_cdc_n_write_flush+0xf0>
    return count;
 8006b2c:	89bb      	ldrh	r3, [r7, #12]
 8006b2e:	e007      	b.n	8006b40 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	789a      	ldrb	r2, [r3, #2]
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f003 fa15 	bl	8009f68 <usbd_edpt_release>
    return 0;
 8006b3e:	2300      	movs	r3, #0
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20001170 	.word	0x20001170
 8006b4c:	20001258 	.word	0x20001258
 8006b50:	e000edf0 	.word	0xe000edf0

08006b54 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	22e8      	movs	r2, #232	@ 0xe8
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	3318      	adds	r3, #24
 8006b68:	4a05      	ldr	r2, [pc, #20]	@ (8006b80 <tud_cdc_n_write_available+0x2c>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fd2b 	bl	80085ca <tu_fifo_remaining>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20001170 	.word	0x20001170

08006b84 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006b8a:	22e8      	movs	r2, #232	@ 0xe8
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4824      	ldr	r0, [pc, #144]	@ (8006c20 <cdcd_init+0x9c>)
 8006b90:	f006 f813 	bl	800cbba <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006b94:	2300      	movs	r3, #0
 8006b96:	71fb      	strb	r3, [r7, #7]
 8006b98:	e03a      	b.n	8006c10 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	22e8      	movs	r2, #232	@ 0xe8
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c20 <cdcd_init+0x9c>)
 8006ba4:	4413      	add	r3, r2
 8006ba6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	22ff      	movs	r2, #255	@ 0xff
 8006bac:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006bb4:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f103 0010 	add.w	r0, r3, #16
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	2240      	movs	r2, #64	@ 0x40
 8006bdc:	f000 ffee 	bl	8007bbc <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f103 001c 	add.w	r0, r3, #28
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006bec:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <cdcd_init+0xa0>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2301      	movs	r3, #1
 8006c04:	2280      	movs	r2, #128	@ 0x80
 8006c06:	f000 ffd9 	bl	8007bbc <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	71fb      	strb	r3, [r7, #7]
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c1      	beq.n	8006b9a <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20001170 	.word	0x20001170
 8006c24:	2000022c 	.word	0x2000022c

08006c28 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006c2c:	2301      	movs	r3, #1
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
 8006c46:	e037      	b.n	8006cb8 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	22e8      	movs	r2, #232	@ 0xe8
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <cdcd_reset+0x90>)
 8006c52:	4413      	add	r3, r2
 8006c54:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006c56:	2205      	movs	r2, #5
 8006c58:	2100      	movs	r1, #0
 8006c5a:	68b8      	ldr	r0, [r7, #8]
 8006c5c:	f005 ffad 	bl	800cbba <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006c60:	4b1a      	ldr	r3, [pc, #104]	@ (8006ccc <cdcd_reset+0x94>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3310      	adds	r3, #16
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 fd90 	bl	8008798 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006c78:	4b14      	ldr	r3, [pc, #80]	@ (8006ccc <cdcd_reset+0x94>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	331c      	adds	r3, #28
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fd84 	bl	8008798 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f103 021c 	add.w	r2, r3, #28
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <cdcd_reset+0x94>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f001 fd84 	bl	80087ba <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0c4      	beq.n	8006c48 <cdcd_reset+0x10>
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20001170 	.word	0x20001170
 8006ccc:	2000022c 	.word	0x2000022c

08006cd0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b09a      	sub	sp, #104	@ 0x68
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	795b      	ldrb	r3, [r3, #5]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d103      	bne.n	8006cf0 <cdcd_open+0x20>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	799b      	ldrb	r3, [r3, #6]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d001      	beq.n	8006cf4 <cdcd_open+0x24>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e0da      	b.n	8006eaa <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006cfa:	e010      	b.n	8006d1e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006cfc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d00:	22e8      	movs	r2, #232	@ 0xe8
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	4a6b      	ldr	r2, [pc, #428]	@ (8006eb4 <cdcd_open+0x1e4>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0e:	789b      	ldrb	r3, [r3, #2]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006d14:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ea      	beq.n	8006cfc <cdcd_open+0x2c>
 8006d26:	e000      	b.n	8006d2a <cdcd_open+0x5a>
      break;
 8006d28:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8006d2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <cdcd_open+0x78>
 8006d32:	4b61      	ldr	r3, [pc, #388]	@ (8006eb8 <cdcd_open+0x1e8>)
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d000      	beq.n	8006d44 <cdcd_open+0x74>
 8006d42:	be00      	bkpt	0x0000
 8006d44:	2300      	movs	r3, #0
 8006d46:	e0b0      	b.n	8006eaa <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	789a      	ldrb	r2, [r3, #2]
 8006d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d4e:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006d50:	2309      	movs	r3, #9
 8006d52:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d66:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8006d68:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006d6a:	e013      	b.n	8006d94 <cdcd_open+0xc4>
 8006d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d90:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006d9e:	2b24      	cmp	r3, #36	@ 0x24
 8006da0:	d104      	bne.n	8006dac <cdcd_open+0xdc>
 8006da2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006da6:	88bb      	ldrh	r3, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d9df      	bls.n	8006d6c <cdcd_open+0x9c>
 8006dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	3301      	adds	r3, #1
 8006db4:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d12f      	bne.n	8006e1a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8006dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dbc:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f003 f862 	bl	8009e8c <usbd_edpt_open>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f083 0301 	eor.w	r3, r3, #1
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <cdcd_open+0x11a>
 8006dd4:	4b38      	ldr	r3, [pc, #224]	@ (8006eb8 <cdcd_open+0x1e8>)
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d000      	beq.n	8006de6 <cdcd_open+0x116>
 8006de4:	be00      	bkpt	0x0000
 8006de6:	2300      	movs	r3, #0
 8006de8:	e05f      	b.n	8006eaa <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8006dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dec:	789a      	ldrb	r2, [r3, #2]
 8006dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006df0:	705a      	strb	r2, [r3, #1]
 8006df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df4:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006e00:	4413      	add	r3, r2
 8006e02:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3301      	adds	r3, #1
 8006e22:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d139      	bne.n	8006e9c <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006e2c:	2b0a      	cmp	r3, #10
 8006e2e:	d135      	bne.n	8006e9c <cdcd_open+0x1cc>
 8006e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e32:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006e3e:	4413      	add	r3, r2
 8006e40:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e46:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006e56:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8006e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5a:	3303      	adds	r3, #3
 8006e5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e5e:	3202      	adds	r2, #2
 8006e60:	79f8      	ldrb	r0, [r7, #7]
 8006e62:	9201      	str	r2, [sp, #4]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2302      	movs	r3, #2
 8006e68:	2202      	movs	r2, #2
 8006e6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e6c:	f002 ffa6 	bl	8009dbc <usbd_open_edpt_pair>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f083 0301 	eor.w	r3, r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <cdcd_open+0x1c2>
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <cdcd_open+0x1e8>)
 8006e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d000      	beq.n	8006e8e <cdcd_open+0x1be>
 8006e8c:	be00      	bkpt	0x0000
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e00b      	b.n	8006eaa <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8006e92:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006e96:	330e      	adds	r3, #14
 8006e98:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8006e9c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fcb1 	bl	8006808 <_prep_out_transaction>

  return drv_len;
 8006ea6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3760      	adds	r7, #96	@ 0x60
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20001170 	.word	0x20001170
 8006eb8:	e000edf0 	.word	0xe000edf0

08006ebc <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	603a      	str	r2, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d001      	beq.n	8006ede <cdcd_control_xfer_cb+0x22>
 8006eda:	2300      	movs	r3, #0
 8006edc:	e0e6      	b.n	80070ac <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ee4:	e014      	b.n	8006f10 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8006ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eea:	22e8      	movs	r2, #232	@ 0xe8
 8006eec:	fb02 f303 	mul.w	r3, r2, r3
 8006ef0:	4a70      	ldr	r2, [pc, #448]	@ (80070b4 <cdcd_control_xfer_cb+0x1f8>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	889b      	ldrh	r3, [r3, #4]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d009      	beq.n	8006f1a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0e6      	beq.n	8006ee6 <cdcd_control_xfer_cb+0x2a>
 8006f18:	e000      	b.n	8006f1c <cdcd_control_xfer_cb+0x60>
      break;
 8006f1a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <cdcd_control_xfer_cb+0x6c>
 8006f24:	2300      	movs	r3, #0
 8006f26:	e0c1      	b.n	80070ac <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	3b20      	subs	r3, #32
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	f200 80b2 	bhi.w	8007098 <cdcd_control_xfer_cb+0x1dc>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <cdcd_control_xfer_cb+0x80>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f89 	.word	0x08006f89
 8006f44:	08006fa3 	.word	0x08006fa3
 8006f48:	08007067 	.word	0x08007067
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006f4c:	79bb      	ldrb	r3, [r7, #6]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d108      	bne.n	8006f64 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f103 0208 	add.w	r2, r3, #8
 8006f58:	79f8      	ldrb	r0, [r7, #7]
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	f003 fa13 	bl	800a388 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8006f62:	e09b      	b.n	800709c <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006f64:	79bb      	ldrb	r3, [r7, #6]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f040 8098 	bne.w	800709c <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8006f6c:	4b52      	ldr	r3, [pc, #328]	@ (80070b8 <cdcd_control_xfer_cb+0x1fc>)
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8094 	beq.w	800709c <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	f103 0208 	add.w	r2, r3, #8
 8006f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f3af 8000 	nop.w
      break;
 8006f86:	e089      	b.n	800709c <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	f040 8088 	bne.w	80070a0 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	f103 0208 	add.w	r2, r3, #8
 8006f96:	79f8      	ldrb	r0, [r7, #7]
 8006f98:	2307      	movs	r3, #7
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	f003 f9f4 	bl	800a388 <tud_control_xfer>
      }
      break;
 8006fa0:	e07e      	b.n	80070a0 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8006fa2:	79bb      	ldrb	r3, [r7, #6]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d105      	bne.n	8006fb4 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f003 f979 	bl	800a2a4 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8006fb2:	e077      	b.n	80070a4 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006fb4:	79bb      	ldrb	r3, [r7, #6]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d174      	bne.n	80070a4 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	fa22 f303 	lsr.w	r3, r2, r3
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b29b      	uxth	r3, r3
 8007008:	b2da      	uxtb	r2, r3
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 800700e:	4b2b      	ldr	r3, [pc, #172]	@ (80070bc <cdcd_control_xfer_cb+0x200>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d013      	beq.n	8007044 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f103 021c 	add.w	r2, r3, #28
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f083 0301 	eor.w	r3, r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	b2db      	uxtb	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f001 fbbc 	bl	80087ba <tu_fifo_set_overwritable>
 8007042:	e005      	b.n	8007050 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	331c      	adds	r3, #28
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fbb5 	bl	80087ba <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8007050:	4b1b      	ldr	r3, [pc, #108]	@ (80070c0 <cdcd_control_xfer_cb+0x204>)
 8007052:	2b00      	cmp	r3, #0
 8007054:	d026      	beq.n	80070a4 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8007056:	7fba      	ldrb	r2, [r7, #30]
 8007058:	7ff9      	ldrb	r1, [r7, #31]
 800705a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800705e:	4618      	mov	r0, r3
 8007060:	f7fa f978 	bl	8001354 <tud_cdc_line_state_cb>
      break;
 8007064:	e01e      	b.n	80070a4 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8007066:	79bb      	ldrb	r3, [r7, #6]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d105      	bne.n	8007078 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f003 f917 	bl	800a2a4 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8007076:	e017      	b.n	80070a8 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007078:	79bb      	ldrb	r3, [r7, #6]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d114      	bne.n	80070a8 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 800707e:	4b11      	ldr	r3, [pc, #68]	@ (80070c4 <cdcd_control_xfer_cb+0x208>)
 8007080:	2b00      	cmp	r3, #0
 8007082:	d011      	beq.n	80070a8 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	885b      	ldrh	r3, [r3, #2]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f3af 8000 	nop.w
      break;
 8007096:	e007      	b.n	80070a8 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8007098:	2300      	movs	r3, #0
 800709a:	e007      	b.n	80070ac <cdcd_control_xfer_cb+0x1f0>
      break;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <cdcd_control_xfer_cb+0x1ee>
      break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <cdcd_control_xfer_cb+0x1ee>
      break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <cdcd_control_xfer_cb+0x1ee>
      break;
 80070a8:	bf00      	nop
  }

  return true;
 80070aa:	2301      	movs	r3, #1
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	@ 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20001170 	.word	0x20001170
 80070b8:	00000000 	.word	0x00000000
 80070bc:	2000022c 	.word	0x2000022c
 80070c0:	08001355 	.word	0x08001355
 80070c4:	00000000 	.word	0x00000000

080070c8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4603      	mov	r3, r0
 80070d2:	71fb      	strb	r3, [r7, #7]
 80070d4:	460b      	mov	r3, r1
 80070d6:	71bb      	strb	r3, [r7, #6]
 80070d8:	4613      	mov	r3, r2
 80070da:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80070dc:	2300      	movs	r3, #0
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e013      	b.n	800710a <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80070e2:	7ffb      	ldrb	r3, [r7, #31]
 80070e4:	22e8      	movs	r2, #232	@ 0xe8
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007268 <cdcd_xfer_cb+0x1a0>)
 80070ec:	4413      	add	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	78db      	ldrb	r3, [r3, #3]
 80070f4:	79ba      	ldrb	r2, [r7, #6]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d00a      	beq.n	8007110 <cdcd_xfer_cb+0x48>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	789b      	ldrb	r3, [r3, #2]
 80070fe:	79ba      	ldrb	r2, [r7, #6]
 8007100:	429a      	cmp	r2, r3
 8007102:	d005      	beq.n	8007110 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007104:	7ffb      	ldrb	r3, [r7, #31]
 8007106:	3301      	adds	r3, #1
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	7ffb      	ldrb	r3, [r7, #31]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0e8      	beq.n	80070e2 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8007110:	7ffb      	ldrb	r3, [r7, #31]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <cdcd_xfer_cb+0x64>
 8007116:	4b55      	ldr	r3, [pc, #340]	@ (800726c <cdcd_xfer_cb+0x1a4>)
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d000      	beq.n	8007128 <cdcd_xfer_cb+0x60>
 8007126:	be00      	bkpt	0x0000
 8007128:	2300      	movs	r3, #0
 800712a:	e098      	b.n	800725e <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 800712c:	7ffb      	ldrb	r3, [r7, #31]
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	4a4f      	ldr	r2, [pc, #316]	@ (8007270 <cdcd_xfer_cb+0x1a8>)
 8007132:	4413      	add	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	79ba      	ldrb	r2, [r7, #6]
 800713c:	429a      	cmp	r2, r3
 800713e:	d148      	bne.n	80071d2 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	3310      	adds	r3, #16
 8007144:	6939      	ldr	r1, [r7, #16]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	b292      	uxth	r2, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f001 fb00 	bl	8008750 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8007150:	4b48      	ldr	r3, [pc, #288]	@ (8007274 <cdcd_xfer_cb+0x1ac>)
 8007152:	2b00      	cmp	r3, #0
 8007154:	d027      	beq.n	80071a6 <cdcd_xfer_cb+0xde>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	795b      	ldrb	r3, [r3, #5]
 800715a:	2bff      	cmp	r3, #255	@ 0xff
 800715c:	d023      	beq.n	80071a6 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e01c      	b.n	800719e <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	795a      	ldrb	r2, [r3, #5]
 8007168:	6939      	ldr	r1, [r7, #16]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	440b      	add	r3, r1
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d111      	bne.n	8007198 <cdcd_xfer_cb+0xd0>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	3310      	adds	r3, #16
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f9e3 	bl	8008544 <tu_fifo_empty>
 800717e:	4603      	mov	r3, r0
 8007180:	f083 0301 	eor.w	r3, r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d006      	beq.n	8007198 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	795a      	ldrb	r2, [r3, #5]
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	4611      	mov	r1, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3301      	adds	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3de      	bcc.n	8007164 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80071a6:	4b34      	ldr	r3, [pc, #208]	@ (8007278 <cdcd_xfer_cb+0x1b0>)
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <cdcd_xfer_cb+0x102>
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	3310      	adds	r3, #16
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f9c7 	bl	8008544 <tu_fifo_empty>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f083 0301 	eor.w	r3, r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80071c2:	7ffb      	ldrb	r3, [r7, #31]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fa f8f1 	bl	80013ac <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80071ca:	7ffb      	ldrb	r3, [r7, #31]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fb1b 	bl	8006808 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	789b      	ldrb	r3, [r3, #2]
 80071d6:	79ba      	ldrb	r2, [r7, #6]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d13f      	bne.n	800725c <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80071dc:	4b27      	ldr	r3, [pc, #156]	@ (800727c <cdcd_xfer_cb+0x1b4>)
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80071ea:	7ffb      	ldrb	r3, [r7, #31]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fc2f 	bl	8006a50 <tud_cdc_n_write_flush>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d131      	bne.n	800725c <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	331c      	adds	r3, #28
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 f96f 	bl	80084e0 <tu_fifo_count>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d129      	bne.n	800725c <cdcd_xfer_cb+0x194>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d026      	beq.n	800725c <cdcd_xfer_cb+0x194>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007214:	2b00      	cmp	r3, #0
 8007216:	d121      	bne.n	800725c <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	789a      	ldrb	r2, [r3, #2]
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f002 fe79 	bl	8009f18 <usbd_edpt_claim>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d017      	beq.n	800725c <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	7899      	ldrb	r1, [r3, #2]
 8007230:	79f8      	ldrb	r0, [r7, #7]
 8007232:	2300      	movs	r3, #0
 8007234:	2200      	movs	r2, #0
 8007236:	f002 febf 	bl	8009fb8 <usbd_edpt_xfer>
 800723a:	4603      	mov	r3, r0
 800723c:	f083 0301 	eor.w	r3, r3, #1
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <cdcd_xfer_cb+0x194>
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <cdcd_xfer_cb+0x1a4>)
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d000      	beq.n	8007258 <cdcd_xfer_cb+0x190>
 8007256:	be00      	bkpt	0x0000
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800725c:	2301      	movs	r3, #1
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20001170 	.word	0x20001170
 800726c:	e000edf0 	.word	0xe000edf0
 8007270:	20001258 	.word	0x20001258
 8007274:	00000000 	.word	0x00000000
 8007278:	080013ad 	.word	0x080013ad
 800727c:	00000000 	.word	0x00000000

08007280 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	460a      	mov	r2, r1
 800728a:	71fb      	strb	r3, [r7, #7]
 800728c:	4613      	mov	r3, r2
 800728e:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8007290:	2301      	movs	r3, #1
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	603a      	str	r2, [r7, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	4603      	mov	r3, r0
 80072aa:	71fb      	strb	r3, [r7, #7]
 80072ac:	460b      	mov	r3, r1
 80072ae:	71bb      	strb	r3, [r7, #6]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80072ce:	79fa      	ldrb	r2, [r7, #7]
 80072d0:	491b      	ldr	r1, [pc, #108]	@ (8007340 <tud_hid_n_ready+0x80>)
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3301      	adds	r3, #1
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	73bb      	strb	r3, [r7, #14]
 80072e2:	f001 faf7 	bl	80088d4 <tud_mounted>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d009      	beq.n	8007300 <tud_hid_n_ready+0x40>
 80072ec:	f001 fb04 	bl	80088f8 <tud_suspended>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f083 0301 	eor.w	r3, r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <tud_hid_n_ready+0x40>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <tud_hid_n_ready+0x42>
 8007300:	2300      	movs	r3, #0
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8007308:	2b00      	cmp	r3, #0
 800730a:	d010      	beq.n	800732e <tud_hid_n_ready+0x6e>
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <tud_hid_n_ready+0x6e>
 8007312:	7bba      	ldrb	r2, [r7, #14]
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f002 fec3 	bl	800a0a4 <usbd_edpt_busy>
 800731e:	4603      	mov	r3, r0
 8007320:	f083 0301 	eor.w	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <tud_hid_n_ready+0x6e>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <tud_hid_n_ready+0x70>
 800732e:	2300      	movs	r3, #0
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	b2db      	uxtb	r3, r3
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	200012d8 	.word	0x200012d8

08007344 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	@ 0x38
 8007348:	af00      	add	r7, sp, #0
 800734a:	603a      	str	r2, [r7, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
 8007352:	460b      	mov	r3, r1
 8007354:	71bb      	strb	r3, [r7, #6]
 8007356:	4613      	mov	r3, r2
 8007358:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <tud_hid_n_report+0x20>
 8007360:	2300      	movs	r3, #0
 8007362:	e06d      	b.n	8007440 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 800736a:	79fa      	ldrb	r2, [r7, #7]
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4a34      	ldr	r2, [pc, #208]	@ (8007448 <tud_hid_n_report+0x104>)
 8007376:	4413      	add	r3, r2
 8007378:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 800737a:	79fa      	ldrb	r2, [r7, #7]
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	4a31      	ldr	r2, [pc, #196]	@ (800744c <tud_hid_n_report+0x108>)
 8007386:	4413      	add	r3, r2
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	785a      	ldrb	r2, [r3, #1]
 800738e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 fdbf 	bl	8009f18 <usbd_edpt_claim>
 800739a:	4603      	mov	r3, r0
 800739c:	f083 0301 	eor.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <tud_hid_n_report+0x66>
 80073a6:	2300      	movs	r3, #0
 80073a8:	e04a      	b.n	8007440 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80073aa:	79bb      	ldrb	r3, [r7, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d021      	beq.n	80073f4 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	79ba      	ldrb	r2, [r7, #6]
 80073b4:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	3310      	adds	r3, #16
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	88bb      	ldrh	r3, [r7, #4]
 80073be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073c0:	220f      	movs	r2, #15
 80073c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	623a      	str	r2, [r7, #32]
 80073c8:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 80073ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d202      	bcs.n	80073d8 <tud_hid_n_report+0x94>
    return -1;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	e005      	b.n	80073e4 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	6a39      	ldr	r1, [r7, #32]
 80073dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073de:	f005 fcc4 	bl	800cd6a <memcpy>
  return 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <tud_hid_n_report+0xa8>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e029      	b.n	8007440 <tud_hid_n_report+0xfc>
    len++;
 80073ec:	88bb      	ldrh	r3, [r7, #4]
 80073ee:	3301      	adds	r3, #1
 80073f0:	80bb      	strh	r3, [r7, #4]
 80073f2:	e01a      	b.n	800742a <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80073f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f6:	f103 0210 	add.w	r2, r3, #16
 80073fa:	88bb      	ldrh	r3, [r7, #4]
 80073fc:	61ba      	str	r2, [r7, #24]
 80073fe:	2210      	movs	r2, #16
 8007400:	617a      	str	r2, [r7, #20]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	613a      	str	r2, [r7, #16]
 8007406:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d202      	bcs.n	8007416 <tud_hid_n_report+0xd2>
    return -1;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295
 8007414:	e005      	b.n	8007422 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	6939      	ldr	r1, [r7, #16]
 800741a:	69b8      	ldr	r0, [r7, #24]
 800741c:	f005 fca5 	bl	800cd6a <memcpy>
  return 0;
 8007420:	2300      	movs	r3, #0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <tud_hid_n_report+0xe6>
 8007426:	2300      	movs	r3, #0
 8007428:	e00a      	b.n	8007440 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	7859      	ldrb	r1, [r3, #1]
 800742e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007430:	f103 0210 	add.w	r2, r3, #16
 8007434:	88bb      	ldrh	r3, [r7, #4]
 8007436:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800743a:	f002 fdbd 	bl	8009fb8 <usbd_edpt_xfer>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3738      	adds	r7, #56	@ 0x38
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200012d8 	.word	0x200012d8
 800744c:	200012e4 	.word	0x200012e4

08007450 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	4603      	mov	r3, r0
 800745a:	71fb      	strb	r3, [r7, #7]
 800745c:	460b      	mov	r3, r1
 800745e:	71bb      	strb	r3, [r7, #6]
 8007460:	4613      	mov	r3, r2
 8007462:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8007464:	797b      	ldrb	r3, [r7, #5]
 8007466:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	f107 030a 	add.w	r3, r7, #10
 8007478:	6811      	ldr	r1, [r2, #0]
 800747a:	6019      	str	r1, [r3, #0]
 800747c:	8892      	ldrh	r2, [r2, #4]
 800747e:	809a      	strh	r2, [r3, #4]
 8007480:	e007      	b.n	8007492 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	3302      	adds	r3, #2
 8007488:	2206      	movs	r2, #6
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f005 fb94 	bl	800cbba <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8007492:	f107 0208 	add.w	r2, r7, #8
 8007496:	79b9      	ldrb	r1, [r7, #6]
 8007498:	79f8      	ldrb	r0, [r7, #7]
 800749a:	2308      	movs	r3, #8
 800749c:	f7ff ff52 	bl	8007344 <tud_hid_n_report>
 80074a0:	4603      	mov	r3, r0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80074aa:	b580      	push	{r7, lr}
 80074ac:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80074ae:	2000      	movs	r0, #0
 80074b0:	f000 f80a 	bl	80074c8 <hidd_reset>
}
 80074b4:	bf00      	nop
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <hidd_deinit>:

bool hidd_deinit(void) {
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return true;
 80074bc:	2301      	movs	r3, #1
}
 80074be:	4618      	mov	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80074d2:	220c      	movs	r2, #12
 80074d4:	2100      	movs	r1, #0
 80074d6:	4803      	ldr	r0, [pc, #12]	@ (80074e4 <hidd_reset+0x1c>)
 80074d8:	f005 fb6f 	bl	800cbba <memset>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200012d8 	.word	0x200012d8

080074e8 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b094      	sub	sp, #80	@ 0x50
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	4603      	mov	r3, r0
 80074f0:	6039      	str	r1, [r7, #0]
 80074f2:	71fb      	strb	r3, [r7, #7]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	795b      	ldrb	r3, [r3, #5]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d001      	beq.n	8007504 <hidd_open+0x1c>
 8007500:	2300      	movs	r3, #0
 8007502:	e0ce      	b.n	80076a2 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	791b      	ldrb	r3, [r3, #4]
 8007508:	461a      	mov	r2, r3
 800750a:	00d2      	lsls	r2, r2, #3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007510:	3312      	adds	r3, #18
 8007512:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8007516:	88ba      	ldrh	r2, [r7, #4]
 8007518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800751c:	429a      	cmp	r2, r3
 800751e:	d20a      	bcs.n	8007536 <hidd_open+0x4e>
 8007520:	4b62      	ldr	r3, [pc, #392]	@ (80076ac <hidd_open+0x1c4>)
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d000      	beq.n	8007532 <hidd_open+0x4a>
 8007530:	be00      	bkpt	0x0000
 8007532:	2300      	movs	r3, #0
 8007534:	e0b5      	b.n	80076a2 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007536:	2300      	movs	r3, #0
 8007538:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753c:	e011      	b.n	8007562 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800753e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4a59      	ldr	r2, [pc, #356]	@ (80076b0 <hidd_open+0x1c8>)
 800754c:	4413      	add	r3, r2
 800754e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8007550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007558:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800755c:	3301      	adds	r3, #1
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0e9      	beq.n	800753e <hidd_open+0x56>
 800756a:	e000      	b.n	800756e <hidd_open+0x86>
      break;
 800756c:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800756e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <hidd_open+0xa4>
 8007576:	4b4d      	ldr	r3, [pc, #308]	@ (80076ac <hidd_open+0x1c4>)
 8007578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d000      	beq.n	8007588 <hidd_open+0xa0>
 8007586:	be00      	bkpt	0x0000
 8007588:	2300      	movs	r3, #0
 800758a:	e08a      	b.n	80076a2 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 800758c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	4a46      	ldr	r2, [pc, #280]	@ (80076b4 <hidd_open+0x1cc>)
 800759a:	4413      	add	r3, r2
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80075b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b8:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	3301      	adds	r3, #1
 80075be:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80075c0:	2b21      	cmp	r3, #33	@ 0x21
 80075c2:	d00a      	beq.n	80075da <hidd_open+0xf2>
 80075c4:	4b39      	ldr	r3, [pc, #228]	@ (80076ac <hidd_open+0x1c4>)
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d000      	beq.n	80075d6 <hidd_open+0xee>
 80075d4:	be00      	bkpt	0x0000
 80075d6:	2300      	movs	r3, #0
 80075d8:	e063      	b.n	80076a2 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80075da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075de:	609a      	str	r2, [r3, #8]
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	7919      	ldrb	r1, [r3, #4]
 80075f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fa:	3302      	adds	r3, #2
 80075fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075fe:	3201      	adds	r2, #1
 8007600:	79f8      	ldrb	r0, [r7, #7]
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2303      	movs	r3, #3
 8007608:	460a      	mov	r2, r1
 800760a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800760c:	f002 fbd6 	bl	8009dbc <usbd_open_edpt_pair>
 8007610:	4603      	mov	r3, r0
 8007612:	f083 0301 	eor.w	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <hidd_open+0x14a>
 800761c:	4b23      	ldr	r3, [pc, #140]	@ (80076ac <hidd_open+0x1c4>)
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d000      	beq.n	800762e <hidd_open+0x146>
 800762c:	be00      	bkpt	0x0000
 800762e:	2300      	movs	r3, #0
 8007630:	e037      	b.n	80076a2 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	799b      	ldrb	r3, [r3, #6]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d103      	bne.n	8007642 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	79da      	ldrb	r2, [r3, #7]
 800763e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007640:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8007642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007644:	2201      	movs	r2, #1
 8007646:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	789a      	ldrb	r2, [r3, #2]
 800764c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764e:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8007650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	3307      	adds	r3, #7
 8007656:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765e:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8007660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007662:	789b      	ldrb	r3, [r3, #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8007668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766a:	7899      	ldrb	r1, [r3, #2]
 800766c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766e:	f103 0220 	add.w	r2, r3, #32
 8007672:	79f8      	ldrb	r0, [r7, #7]
 8007674:	2310      	movs	r3, #16
 8007676:	f002 fc9f 	bl	8009fb8 <usbd_edpt_xfer>
 800767a:	4603      	mov	r3, r0
 800767c:	f083 0301 	eor.w	r3, r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <hidd_open+0x1b6>
 8007686:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <hidd_open+0x1c4>)
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d000      	beq.n	8007698 <hidd_open+0x1b0>
 8007696:	be00      	bkpt	0x0000
 8007698:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800769c:	e001      	b.n	80076a2 <hidd_open+0x1ba>
  }

  return drv_len;
 800769e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3748      	adds	r7, #72	@ 0x48
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	e000edf0 	.word	0xe000edf0
 80076b0:	200012d8 	.word	0x200012d8
 80076b4:	200012e4 	.word	0x200012e4

080076b8 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b094      	sub	sp, #80	@ 0x50
 80076bc:	af02      	add	r7, sp, #8
 80076be:	4603      	mov	r3, r0
 80076c0:	603a      	str	r2, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	460b      	mov	r3, r1
 80076c6:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d001      	beq.n	80076da <hidd_control_xfer_cb+0x22>
 80076d6:	2300      	movs	r3, #0
 80076d8:	e1d6      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	889b      	ldrh	r3, [r3, #4]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80076e4:	2300      	movs	r3, #0
 80076e6:	77bb      	strb	r3, [r7, #30]
 80076e8:	e00f      	b.n	800770a <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80076ea:	7fba      	ldrb	r2, [r7, #30]
 80076ec:	498f      	ldr	r1, [pc, #572]	@ (800792c <hidd_control_xfer_cb+0x274>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	7ffa      	ldrb	r2, [r7, #31]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d101      	bne.n	8007704 <hidd_control_xfer_cb+0x4c>
      return i;
 8007700:	7fbb      	ldrb	r3, [r7, #30]
 8007702:	e006      	b.n	8007712 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007704:	7fbb      	ldrb	r3, [r7, #30]
 8007706:	3301      	adds	r3, #1
 8007708:	77bb      	strb	r3, [r7, #30]
 800770a:	7fbb      	ldrb	r3, [r7, #30]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0ec      	beq.n	80076ea <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007710:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007712:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007716:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <hidd_control_xfer_cb+0x6a>
 800771e:	2300      	movs	r3, #0
 8007720:	e1b2      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007722:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007726:	4613      	mov	r3, r2
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4a7f      	ldr	r2, [pc, #508]	@ (800792c <hidd_control_xfer_cb+0x274>)
 8007730:	4413      	add	r3, r2
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007734:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007738:	4613      	mov	r3, r2
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	4413      	add	r3, r2
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	4a7b      	ldr	r2, [pc, #492]	@ (8007930 <hidd_control_xfer_cb+0x278>)
 8007742:	4413      	add	r3, r2
 8007744:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d145      	bne.n	80077e0 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8007754:	79bb      	ldrb	r3, [r7, #6]
 8007756:	2b01      	cmp	r3, #1
 8007758:	f040 8195 	bne.w	8007a86 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	885b      	ldrh	r3, [r3, #2]
 8007760:	b29b      	uxth	r3, r3
 8007762:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007764:	8bbb      	ldrh	r3, [r7, #28]
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	b29b      	uxth	r3, r3
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b06      	cmp	r3, #6
 8007776:	d11b      	bne.n	80077b0 <hidd_control_xfer_cb+0xf8>
 8007778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800777c:	2b21      	cmp	r3, #33	@ 0x21
 800777e:	d117      	bne.n	80077b0 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8007780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <hidd_control_xfer_cb+0xd4>
 8007788:	2300      	movs	r3, #0
 800778a:	e17d      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 800778c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	79f8      	ldrb	r0, [r7, #7]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	f002 fdf5 	bl	800a388 <tud_control_xfer>
 800779e:	4603      	mov	r3, r0
 80077a0:	f083 0301 	eor.w	r3, r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 816d 	beq.w	8007a86 <hidd_control_xfer_cb+0x3ce>
 80077ac:	2300      	movs	r3, #0
 80077ae:	e16b      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d111      	bne.n	80077dc <hidd_control_xfer_cb+0x124>
 80077b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077bc:	2b22      	cmp	r3, #34	@ 0x22
 80077be:	d10d      	bne.n	80077dc <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80077c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fc f941 	bl	8003a4c <tud_hid_descriptor_report_cb>
 80077ca:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80077cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ce:	889b      	ldrh	r3, [r3, #4]
 80077d0:	79f8      	ldrb	r0, [r7, #7]
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	f002 fdd7 	bl	800a388 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80077da:	e154      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 80077dc:	2300      	movs	r3, #0
 80077de:	e153      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	f040 813e 	bne.w	8007a6c <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b0a      	cmp	r3, #10
 80077f8:	f200 8136 	bhi.w	8007a68 <hidd_control_xfer_cb+0x3b0>
 80077fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <hidd_control_xfer_cb+0x14c>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007831 	.word	0x08007831
 8007808:	08007a07 	.word	0x08007a07
 800780c:	08007a1d 	.word	0x08007a1d
 8007810:	08007a69 	.word	0x08007a69
 8007814:	08007a69 	.word	0x08007a69
 8007818:	08007a69 	.word	0x08007a69
 800781c:	08007a69 	.word	0x08007a69
 8007820:	08007a69 	.word	0x08007a69
 8007824:	08007907 	.word	0x08007907
 8007828:	080079c1 	.word	0x080079c1
 800782c:	08007a33 	.word	0x08007a33
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007830:	79bb      	ldrb	r3, [r7, #6]
 8007832:	2b01      	cmp	r3, #1
 8007834:	f040 811c 	bne.w	8007a70 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	b29b      	uxth	r3, r3
 800783e:	82bb      	strh	r3, [r7, #20]
 8007840:	8abb      	ldrh	r3, [r7, #20]
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	b29b      	uxth	r3, r3
 8007852:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007854:	8afb      	ldrh	r3, [r7, #22]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	88db      	ldrh	r3, [r3, #6]
 8007864:	b29b      	uxth	r3, r3
 8007866:	837b      	strh	r3, [r7, #26]
 8007868:	2310      	movs	r3, #16
 800786a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800786c:	8b7a      	ldrh	r2, [r7, #26]
 800786e:	8b3b      	ldrh	r3, [r7, #24]
 8007870:	4293      	cmp	r3, r2
 8007872:	bf28      	it	cs
 8007874:	4613      	movcs	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8007882:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d013      	beq.n	80078b2 <hidd_control_xfer_cb+0x1fa>
 800788a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800788e:	2b01      	cmp	r3, #1
 8007890:	d90f      	bls.n	80078b2 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8007892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	647a      	str	r2, [r7, #68]	@ 0x44
 8007898:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800789c:	701a      	strb	r2, [r3, #0]
            req_len--;
 800789e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 80078a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80078ac:	3301      	adds	r3, #1
 80078ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80078b2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80078b6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80078ba:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80078be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c6:	f7f9 ffcb 	bl	8001860 <tud_hid_get_report_cb>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461a      	mov	r2, r3
 80078ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80078d2:	4413      	add	r3, r2
 80078d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 80078d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <hidd_control_xfer_cb+0x23e>
 80078e0:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <hidd_control_xfer_cb+0x27c>)
 80078e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d000      	beq.n	80078f2 <hidd_control_xfer_cb+0x23a>
 80078f0:	be00      	bkpt	0x0000
 80078f2:	2300      	movs	r3, #0
 80078f4:	e0c8      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 80078f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80078fc:	79f8      	ldrb	r0, [r7, #7]
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	f002 fd42 	bl	800a388 <tud_control_xfer>
        }
        break;
 8007904:	e0b4      	b.n	8007a70 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007906:	79bb      	ldrb	r3, [r7, #6]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d115      	bne.n	8007938 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b10      	cmp	r3, #16
 8007914:	d901      	bls.n	800791a <hidd_control_xfer_cb+0x262>
 8007916:	2300      	movs	r3, #0
 8007918:	e0b6      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 800791a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	88db      	ldrh	r3, [r3, #6]
 8007920:	b29b      	uxth	r3, r3
 8007922:	79f8      	ldrb	r0, [r7, #7]
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	f002 fd2f 	bl	800a388 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 800792a:	e0a3      	b.n	8007a74 <hidd_control_xfer_cb+0x3bc>
 800792c:	200012d8 	.word	0x200012d8
 8007930:	200012e4 	.word	0x200012e4
 8007934:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8007938:	79bb      	ldrb	r3, [r7, #6]
 800793a:	2b03      	cmp	r3, #3
 800793c:	f040 809a 	bne.w	8007a74 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	885b      	ldrh	r3, [r3, #2]
 8007944:	b29b      	uxth	r3, r3
 8007946:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007948:	89bb      	ldrh	r3, [r7, #12]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b29b      	uxth	r3, r3
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	b29b      	uxth	r3, r3
 800795a:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800795c:	89fb      	ldrh	r3, [r7, #14]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	b29b      	uxth	r3, r3
 800796e:	827b      	strh	r3, [r7, #18]
 8007970:	2310      	movs	r3, #16
 8007972:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007974:	8a7a      	ldrh	r2, [r7, #18]
 8007976:	8a3b      	ldrh	r3, [r7, #16]
 8007978:	4293      	cmp	r3, r2
 800797a:	bf28      	it	cs
 800797c:	4613      	movcs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8007982:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00e      	beq.n	80079a8 <hidd_control_xfer_cb+0x2f0>
 800798a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800798c:	2b01      	cmp	r3, #1
 800798e:	d90b      	bls.n	80079a8 <hidd_control_xfer_cb+0x2f0>
 8007990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007998:	429a      	cmp	r2, r3
 800799a:	d105      	bne.n	80079a8 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 800799c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799e:	3301      	adds	r3, #1
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 80079a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80079a4:	3b01      	subs	r3, #1
 80079a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80079a8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80079ac:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80079b0:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80079b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	f7f9 ff62 	bl	8001882 <tud_hid_set_report_cb>
        break;
 80079be:	e059      	b.n	8007a74 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 80079c0:	79bb      	ldrb	r3, [r7, #6]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d158      	bne.n	8007a78 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079dc:	79da      	ldrb	r2, [r3, #7]
 80079de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fc4b 	bl	8007280 <tud_hid_set_idle_cb>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f083 0301 	eor.w	r3, r3, #1
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <hidd_control_xfer_cb+0x342>
 80079f6:	2300      	movs	r3, #0
 80079f8:	e046      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 fc50 	bl	800a2a4 <tud_control_status>
        }
        break;
 8007a04:	e038      	b.n	8007a78 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a06:	79bb      	ldrb	r3, [r7, #6]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d137      	bne.n	8007a7c <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0e:	1dda      	adds	r2, r3, #7
 8007a10:	79f8      	ldrb	r0, [r7, #7]
 8007a12:	2301      	movs	r3, #1
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	f002 fcb7 	bl	800a388 <tud_control_xfer>
        }
        break;
 8007a1a:	e02f      	b.n	8007a7c <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a1c:	79bb      	ldrb	r3, [r7, #6]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d12e      	bne.n	8007a80 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a24:	1d9a      	adds	r2, r3, #6
 8007a26:	79f8      	ldrb	r0, [r7, #7]
 8007a28:	2301      	movs	r3, #1
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	f002 fcac 	bl	800a388 <tud_control_xfer>
        }
        break;
 8007a30:	e026      	b.n	8007a80 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a32:	79bb      	ldrb	r3, [r7, #6]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d105      	bne.n	8007a44 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fc31 	bl	800a2a4 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8007a42:	e01f      	b.n	8007a84 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8007a44:	79bb      	ldrb	r3, [r7, #6]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d11c      	bne.n	8007a84 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	799a      	ldrb	r2, [r3, #6]
 8007a5a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f9 fee1 	bl	8001828 <tud_hid_set_protocol_cb>
        break;
 8007a66:	e00d      	b.n	8007a84 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e00d      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e00b      	b.n	8007a88 <hidd_control_xfer_cb+0x3d0>
        break;
 8007a70:	bf00      	nop
 8007a72:	e008      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
        break;
 8007a74:	bf00      	nop
 8007a76:	e006      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
        break;
 8007a78:	bf00      	nop
 8007a7a:	e004      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
        break;
 8007a7c:	bf00      	nop
 8007a7e:	e002      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
        break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <hidd_control_xfer_cb+0x3ce>
        break;
 8007a84:	bf00      	nop
  }

  return true;
 8007a86:	2301      	movs	r3, #1
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3748      	adds	r7, #72	@ 0x48
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	@ 0x28
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	71fb      	strb	r3, [r7, #7]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	71bb      	strb	r3, [r7, #6]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e014      	b.n	8007ad4 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8007aaa:	7ffa      	ldrb	r2, [r7, #31]
 8007aac:	4613      	mov	r3, r2
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <hidd_xfer_cb+0x120>)
 8007ab6:	4413      	add	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	789b      	ldrb	r3, [r3, #2]
 8007abe:	79ba      	ldrb	r2, [r7, #6]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d00a      	beq.n	8007ada <hidd_xfer_cb+0x4a>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	79ba      	ldrb	r2, [r7, #6]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d005      	beq.n	8007ada <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	7ffb      	ldrb	r3, [r7, #31]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0e7      	beq.n	8007aaa <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8007ada:	7ffb      	ldrb	r3, [r7, #31]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <hidd_xfer_cb+0x66>
 8007ae0:	4b34      	ldr	r3, [pc, #208]	@ (8007bb4 <hidd_xfer_cb+0x124>)
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d000      	beq.n	8007af2 <hidd_xfer_cb+0x62>
 8007af0:	be00      	bkpt	0x0000
 8007af2:	2300      	movs	r3, #0
 8007af4:	e057      	b.n	8007ba6 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007af6:	7ffa      	ldrb	r2, [r7, #31]
 8007af8:	4613      	mov	r3, r2
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4a2d      	ldr	r2, [pc, #180]	@ (8007bb8 <hidd_xfer_cb+0x128>)
 8007b02:	4413      	add	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	79ba      	ldrb	r2, [r7, #6]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d116      	bne.n	8007b3e <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007b10:	797b      	ldrb	r3, [r7, #5]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f103 0110 	add.w	r1, r3, #16
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	7ffb      	ldrb	r3, [r7, #31]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f9 fe8e 	bl	8001844 <tud_hid_report_complete_cb>
 8007b28:	e03c      	b.n	8007ba4 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f103 0210 	add.w	r2, r3, #16
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	7ff8      	ldrb	r0, [r7, #31]
 8007b36:	2101      	movs	r1, #1
 8007b38:	f7ff fbb1 	bl	800729e <tud_hid_report_failed_cb>
 8007b3c:	e032      	b.n	8007ba4 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007b3e:	797b      	ldrb	r3, [r7, #5]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10c      	bne.n	8007b5e <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f103 0220 	add.w	r2, r3, #32
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	7ff8      	ldrb	r0, [r7, #31]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	2202      	movs	r2, #2
 8007b56:	2100      	movs	r1, #0
 8007b58:	f7f9 fe93 	bl	8001882 <tud_hid_set_report_cb>
 8007b5c:	e008      	b.n	8007b70 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f103 0220 	add.w	r2, r3, #32
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	7ff8      	ldrb	r0, [r7, #31]
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	f7ff fb97 	bl	800729e <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	7899      	ldrb	r1, [r3, #2]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f103 0220 	add.w	r2, r3, #32
 8007b7a:	79f8      	ldrb	r0, [r7, #7]
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	f002 fa1b 	bl	8009fb8 <usbd_edpt_xfer>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f083 0301 	eor.w	r3, r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <hidd_xfer_cb+0x114>
 8007b8e:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <hidd_xfer_cb+0x124>)
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d000      	beq.n	8007ba0 <hidd_xfer_cb+0x110>
 8007b9e:	be00      	bkpt	0x0000
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <hidd_xfer_cb+0x116>
  }

  return true;
 8007ba4:	2301      	movs	r3, #1
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3720      	adds	r7, #32
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200012d8 	.word	0x200012d8
 8007bb4:	e000edf0 	.word	0xe000edf0
 8007bb8:	200012e4 	.word	0x200012e4

08007bbc <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	461a      	mov	r2, r3
 8007bca:	460b      	mov	r3, r1
 8007bcc:	80fb      	strh	r3, [r7, #6]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd8:	d901      	bls.n	8007bde <tu_fifo_config+0x22>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e01b      	b.n	8007c16 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007bea:	88bb      	ldrh	r3, [r7, #4]
 8007bec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bf0:	b299      	uxth	r1, r3
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	88d3      	ldrh	r3, [r2, #6]
 8007bf6:	f361 030e 	bfi	r3, r1, #0, #15
 8007bfa:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	79d3      	ldrb	r3, [r2, #7]
 8007c00:	7e39      	ldrb	r1, [r7, #24]
 8007c02:	f361 13c7 	bfi	r3, r1, #7, #1
 8007c06:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007c14:	2301      	movs	r3, #1
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08a      	sub	sp, #40	@ 0x28
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007c3a:	e00b      	b.n	8007c54 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	61ba      	str	r2, [r7, #24]
 8007c44:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	601a      	str	r2, [r3, #0]
}
 8007c4c:	bf00      	nop
    ff_buf += 4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3304      	adds	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007c54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c56:	1e5a      	subs	r2, r3, #1
 8007c58:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1ee      	bne.n	8007c3c <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007c68:	7ffb      	ldrb	r3, [r7, #31]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d009      	beq.n	8007c82 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007c74:	7ffa      	ldrb	r2, [r7, #31]
 8007c76:	f107 0310 	add.w	r3, r7, #16
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f005 f874 	bl	800cd6a <memcpy>
  }
}
 8007c82:	bf00      	nop
 8007c84:	3728      	adds	r7, #40	@ 0x28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b08a      	sub	sp, #40	@ 0x28
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	4613      	mov	r3, r2
 8007c96:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007ca2:	e008      	b.n	8007cb6 <_ff_pull_const_addr+0x2c>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007cb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f1      	bne.n	8007ca4 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007cca:	7ffb      	ldrb	r3, [r7, #31]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007cd4:	7ffa      	ldrb	r2, [r7, #31]
 8007cd6:	f107 0314 	add.w	r3, r7, #20
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f005 f844 	bl	800cd6a <memcpy>

    *reg_tx = tmp32;
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	601a      	str	r2, [r3, #0]
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	88c9      	ldrh	r1, [r1, #6]
 8007d08:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007d0c:	b289      	uxth	r1, r1
 8007d0e:	fb01 f202 	mul.w	r2, r1, r2
 8007d12:	1898      	adds	r0, r3, r2
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	88db      	ldrh	r3, [r3, #6]
 8007d18:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	f005 f822 	bl	800cd6a <memcpy>
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b08e      	sub	sp, #56	@ 0x38
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	80fb      	strh	r3, [r7, #6]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	889a      	ldrh	r2, [r3, #4]
 8007d48:	88bb      	ldrh	r3, [r7, #4]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	88db      	ldrh	r3, [r3, #6]
 8007d5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d64:	fb13 f302 	smulbb	r3, r3, r2
 8007d68:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88db      	ldrh	r3, [r3, #6]
 8007d6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d78:	fb13 f302 	smulbb	r3, r3, r2
 8007d7c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	88ba      	ldrh	r2, [r7, #4]
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	88c9      	ldrh	r1, [r1, #6]
 8007d88:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007d8c:	b289      	uxth	r1, r1
 8007d8e:	fb01 f202 	mul.w	r2, r1, r2
 8007d92:	4413      	add	r3, r2
 8007d94:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007d96:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <_ff_push_n+0x76>
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d022      	beq.n	8007de8 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8007da2:	e09e      	b.n	8007ee2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007da4:	88fa      	ldrh	r2, [r7, #6]
 8007da6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d80d      	bhi.n	8007dc8 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	88d2      	ldrh	r2, [r2, #6]
 8007db2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007db6:	b292      	uxth	r2, r2
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dc2:	f004 ffd2 	bl	800cd6a <memcpy>
      break;
 8007dc6:	e08c      	b.n	8007ee2 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8007dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dd0:	f004 ffcb 	bl	800cd6a <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007de0:	4619      	mov	r1, r3
 8007de2:	f004 ffc2 	bl	800cd6a <memcpy>
      break;
 8007de6:	e07c      	b.n	8007ee2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d80f      	bhi.n	8007e10 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88db      	ldrh	r3, [r3, #6]
 8007df4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	fb13 f302 	smulbb	r3, r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e0a:	f7ff ff0a 	bl	8007c22 <_ff_push_const_addr>
      break;
 8007e0e:	e067      	b.n	8007ee0 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8007e10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8007e18:	8c3b      	ldrh	r3, [r7, #32]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e20:	f7ff feff 	bl	8007c22 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007e24:	8c3b      	ldrh	r3, [r7, #32]
 8007e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e28:	4413      	add	r3, r2
 8007e2a:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007e2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d043      	beq.n	8007ec8 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f1c3 0304 	rsb	r3, r3, #4
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e52:	837b      	strh	r3, [r7, #26]
 8007e54:	4613      	mov	r3, r2
 8007e56:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007e58:	8b7a      	ldrh	r2, [r7, #26]
 8007e5a:	8b3b      	ldrh	r3, [r7, #24]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	bf28      	it	cs
 8007e60:	4613      	movcs	r3, r2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007e68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8007e80:	e007      	b.n	8007e92 <_ff_push_n+0x164>
 8007e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e84:	1c53      	adds	r3, r2, #1
 8007e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	1c59      	adds	r1, r3, #1
 8007e8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e96:	1e5a      	subs	r2, r3, #1
 8007e98:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1f0      	bne.n	8007e82 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8007ea6:	e007      	b.n	8007eb8 <_ff_push_n+0x18a>
 8007ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eaa:	1c53      	adds	r3, r2, #1
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	1c59      	adds	r1, r3, #1
 8007eb2:	6339      	str	r1, [r7, #48]	@ 0x30
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f0      	bne.n	8007ea8 <_ff_push_n+0x17a>
 8007ec6:	e002      	b.n	8007ece <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8007ece:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <_ff_push_n+0x1b2>
 8007ed4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007edc:	f7ff fea1 	bl	8007c22 <_ff_push_const_addr>
      break;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3738      	adds	r7, #56	@ 0x38
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	88c9      	ldrh	r1, [r1, #6]
 8007f02:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007f06:	b289      	uxth	r1, r1
 8007f08:	fb01 f202 	mul.w	r2, r1, r2
 8007f0c:	1899      	adds	r1, r3, r2
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68b8      	ldr	r0, [r7, #8]
 8007f1c:	f004 ff25 	bl	800cd6a <memcpy>
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	@ 0x38
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4611      	mov	r1, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	460b      	mov	r3, r1
 8007f38:	80fb      	strh	r3, [r7, #6]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	889a      	ldrh	r2, [r3, #4]
 8007f42:	88bb      	ldrh	r3, [r7, #4]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	88db      	ldrh	r3, [r3, #6]
 8007f54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f5e:	fb13 f302 	smulbb	r3, r3, r2
 8007f62:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f72:	fb13 f302 	smulbb	r3, r3, r2
 8007f76:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	88ba      	ldrh	r2, [r7, #4]
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	88c9      	ldrh	r1, [r1, #6]
 8007f82:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007f86:	b289      	uxth	r1, r1
 8007f88:	fb01 f202 	mul.w	r2, r1, r2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007f90:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <_ff_pull_n+0x76>
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d022      	beq.n	8007fe2 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8007f9c:	e0a0      	b.n	80080e0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d80d      	bhi.n	8007fc2 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	88d2      	ldrh	r2, [r2, #6]
 8007fac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f004 fed5 	bl	800cd6a <memcpy>
    break;
 8007fc0:	e08e      	b.n	80080e0 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8007fc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	f004 fece 	bl	800cd6a <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8007fce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	18d0      	adds	r0, r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f004 fec5 	bl	800cd6a <memcpy>
    break;
 8007fe0:	e07e      	b.n	80080e0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d80f      	bhi.n	800800a <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88db      	ldrh	r3, [r3, #6]
 8007fee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	fb13 f302 	smulbb	r3, r3, r2
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008002:	68b8      	ldr	r0, [r7, #8]
 8008004:	f7ff fe41 	bl	8007c8a <_ff_pull_const_addr>
    break;
 8008008:	e069      	b.n	80080de <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800800a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800800c:	f023 0303 	bic.w	r3, r3, #3
 8008010:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8008012:	8c3b      	ldrh	r3, [r7, #32]
 8008014:	461a      	mov	r2, r3
 8008016:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008018:	68b8      	ldr	r0, [r7, #8]
 800801a:	f7ff fe36 	bl	8007c8a <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800801e:	8c3b      	ldrh	r3, [r7, #32]
 8008020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008022:	4413      	add	r3, r2
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8008026:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8008032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008036:	2b00      	cmp	r3, #0
 8008038:	d045      	beq.n	80080c6 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800803e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008042:	b29b      	uxth	r3, r3
 8008044:	f1c3 0304 	rsb	r3, r3, #4
 8008048:	b29a      	uxth	r2, r3
 800804a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800804c:	837b      	strh	r3, [r7, #26]
 800804e:	4613      	mov	r3, r2
 8008050:	833b      	strh	r3, [r7, #24]
 8008052:	8b7a      	ldrh	r2, [r7, #26]
 8008054:	8b3b      	ldrh	r3, [r7, #24]
 8008056:	4293      	cmp	r3, r2
 8008058:	bf28      	it	cs
 800805a:	4613      	movcs	r3, r2
 800805c:	b29b      	uxth	r3, r3
 800805e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8008062:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008066:	b29b      	uxth	r3, r3
 8008068:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8008078:	e007      	b.n	800808a <_ff_pull_n+0x162>
 800807a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807c:	1c53      	adds	r3, r2, #1
 800807e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008082:	1c59      	adds	r1, r3, #1
 8008084:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008086:	7812      	ldrb	r2, [r2, #0]
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800808e:	1e5a      	subs	r2, r3, #1
 8008090:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800809e:	e007      	b.n	80080b0 <_ff_pull_n+0x188>
 80080a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a2:	1c53      	adds	r3, r2, #1
 80080a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	1c59      	adds	r1, r3, #1
 80080aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080ac:	7812      	ldrb	r2, [r2, #0]
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f0      	bne.n	80080a0 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e002      	b.n	80080cc <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80080cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <_ff_pull_n+0x1b6>
 80080d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080d4:	461a      	mov	r2, r3
 80080d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f7ff fdd6 	bl	8007c8a <_ff_pull_const_addr>
    break;
 80080de:	bf00      	nop
  }
}
 80080e0:	bf00      	nop
 80080e2:	3738      	adds	r7, #56	@ 0x38
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	80fb      	strh	r3, [r7, #6]
 80080f2:	460b      	mov	r3, r1
 80080f4:	80bb      	strh	r3, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80080fa:	88ba      	ldrh	r2, [r7, #4]
 80080fc:	887b      	ldrh	r3, [r7, #2]
 80080fe:	4413      	add	r3, r2
 8008100:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8008102:	88ba      	ldrh	r2, [r7, #4]
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	429a      	cmp	r2, r3
 8008108:	d804      	bhi.n	8008114 <advance_index+0x2c>
 800810a:	89fa      	ldrh	r2, [r7, #14]
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	429a      	cmp	r2, r3
 8008112:	db08      	blt.n	8008126 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	425b      	negs	r3, r3
 800811c:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800811e:	89fa      	ldrh	r2, [r7, #14]
 8008120:	89bb      	ldrh	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8008126:	89fb      	ldrh	r3, [r7, #14]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4611      	mov	r1, r2
 8008140:	461a      	mov	r2, r3
 8008142:	460b      	mov	r3, r1
 8008144:	80fb      	strh	r3, [r7, #6]
 8008146:	4613      	mov	r3, r2
 8008148:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	889b      	ldrh	r3, [r3, #4]
 800814e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	843b      	strh	r3, [r7, #32]
 8008154:	88bb      	ldrh	r3, [r7, #4]
 8008156:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008158:	8c3a      	ldrh	r2, [r7, #32]
 800815a:	8bfb      	ldrh	r3, [r7, #30]
 800815c:	429a      	cmp	r2, r3
 800815e:	d304      	bcc.n	800816a <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008160:	8c3a      	ldrh	r2, [r7, #32]
 8008162:	8bfb      	ldrh	r3, [r7, #30]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	b29b      	uxth	r3, r3
 8008168:	e008      	b.n	800817c <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800816a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	8c39      	ldrh	r1, [r7, #32]
 8008172:	8bfb      	ldrh	r3, [r7, #30]
 8008174:	1acb      	subs	r3, r1, r3
 8008176:	b29b      	uxth	r3, r3
 8008178:	4413      	add	r3, r2
 800817a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800817c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800817e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <_tu_fifo_peek+0x54>
 8008184:	2300      	movs	r3, #0
 8008186:	e037      	b.n	80081f8 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	889b      	ldrh	r3, [r3, #4]
 800818c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800818e:	429a      	cmp	r2, r3
 8008190:	d91b      	bls.n	80081ca <_tu_fifo_peek+0x96>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	8afa      	ldrh	r2, [r7, #22]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d305      	bcc.n	80081b0 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	889b      	ldrh	r3, [r3, #4]
 80081a8:	8afa      	ldrh	r2, [r7, #22]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	82bb      	strh	r3, [r7, #20]
 80081ae:	e004      	b.n	80081ba <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	889a      	ldrh	r2, [r3, #4]
 80081b4:	8afb      	ldrh	r3, [r7, #22]
 80081b6:	4413      	add	r3, r2
 80081b8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	8aba      	ldrh	r2, [r7, #20]
 80081be:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80081c0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80081c2:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	889b      	ldrh	r3, [r3, #4]
 80081c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	889b      	ldrh	r3, [r3, #4]
 80081ce:	827b      	strh	r3, [r7, #18]
 80081d0:	88bb      	ldrh	r3, [r7, #4]
 80081d2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80081d4:	e003      	b.n	80081de <_tu_fifo_peek+0xaa>
 80081d6:	8a3a      	ldrh	r2, [r7, #16]
 80081d8:	8a7b      	ldrh	r3, [r7, #18]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	823b      	strh	r3, [r7, #16]
 80081de:	8a7a      	ldrh	r2, [r7, #18]
 80081e0:	8a3b      	ldrh	r3, [r7, #16]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d9f7      	bls.n	80081d6 <_tu_fifo_peek+0xa2>
  return idx;
 80081e6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80081e8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80081ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081ec:	461a      	mov	r2, r3
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fe7a 	bl	8007eea <_ff_pull>

  return true;
 80081f6:	2301      	movs	r3, #1
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3728      	adds	r7, #40	@ 0x28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08c      	sub	sp, #48	@ 0x30
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	80fb      	strh	r3, [r7, #6]
 8008212:	4613      	mov	r3, r2
 8008214:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	889b      	ldrh	r3, [r3, #4]
 800821a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800821c:	88bb      	ldrh	r3, [r7, #4]
 800821e:	843b      	strh	r3, [r7, #32]
 8008220:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008222:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008224:	8c3a      	ldrh	r2, [r7, #32]
 8008226:	8bfb      	ldrh	r3, [r7, #30]
 8008228:	429a      	cmp	r2, r3
 800822a:	d304      	bcc.n	8008236 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800822c:	8c3a      	ldrh	r2, [r7, #32]
 800822e:	8bfb      	ldrh	r3, [r7, #30]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	b29b      	uxth	r3, r3
 8008234:	e008      	b.n	8008248 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008236:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	8c39      	ldrh	r1, [r7, #32]
 800823e:	8bfb      	ldrh	r3, [r7, #30]
 8008240:	1acb      	subs	r3, r1, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	4413      	add	r3, r2
 8008246:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008248:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800824a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <_tu_fifo_peek_n+0x54>
 8008250:	2300      	movs	r3, #0
 8008252:	e041      	b.n	80082d8 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	889b      	ldrh	r3, [r3, #4]
 8008258:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800825a:	429a      	cmp	r2, r3
 800825c:	d91b      	bls.n	8008296 <_tu_fifo_peek_n+0x96>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	88bb      	ldrh	r3, [r7, #4]
 8008264:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	889b      	ldrh	r3, [r3, #4]
 800826a:	8afa      	ldrh	r2, [r7, #22]
 800826c:	429a      	cmp	r2, r3
 800826e:	d305      	bcc.n	800827c <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	889b      	ldrh	r3, [r3, #4]
 8008274:	8afa      	ldrh	r2, [r7, #22]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	82bb      	strh	r3, [r7, #20]
 800827a:	e004      	b.n	8008286 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	889a      	ldrh	r2, [r3, #4]
 8008280:	8afb      	ldrh	r3, [r7, #22]
 8008282:	4413      	add	r3, r2
 8008284:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	8aba      	ldrh	r2, [r7, #20]
 800828a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800828c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800828e:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	889b      	ldrh	r3, [r3, #4]
 8008294:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8008296:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	429a      	cmp	r2, r3
 800829c:	d201      	bcs.n	80082a2 <_tu_fifo_peek_n+0xa2>
 800829e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082a0:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	889b      	ldrh	r3, [r3, #4]
 80082a6:	827b      	strh	r3, [r7, #18]
 80082a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80082aa:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80082ac:	e003      	b.n	80082b6 <_tu_fifo_peek_n+0xb6>
 80082ae:	8a3a      	ldrh	r2, [r7, #16]
 80082b0:	8a7b      	ldrh	r3, [r7, #18]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	823b      	strh	r3, [r7, #16]
 80082b6:	8a7a      	ldrh	r2, [r7, #18]
 80082b8:	8a3b      	ldrh	r3, [r7, #16]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d9f7      	bls.n	80082ae <_tu_fifo_peek_n+0xae>
  return idx;
 80082be:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80082c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80082c2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	460b      	mov	r3, r1
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fe29 	bl	8007f28 <_ff_pull_n>

  return n;
 80082d6:	88fb      	ldrh	r3, [r7, #6]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3728      	adds	r7, #40	@ 0x28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b092      	sub	sp, #72	@ 0x48
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4611      	mov	r1, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	460b      	mov	r3, r1
 80082f0:	80fb      	strh	r3, [r7, #6]
 80082f2:	4613      	mov	r3, r2
 80082f4:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <_tu_fifo_write_n+0x20>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e0bc      	b.n	800847a <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	891b      	ldrh	r3, [r3, #8]
 8008304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	895b      	ldrh	r3, [r3, #10]
 800830a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	79db      	ldrb	r3, [r3, #7]
 8008314:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f083 0301 	eor.w	r3, r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d036      	beq.n	8008392 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	889b      	ldrh	r3, [r3, #4]
 8008328:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800832a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800832c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800832e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008330:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008332:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008334:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008336:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008338:	847b      	strh	r3, [r7, #34]	@ 0x22
 800833a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800833c:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800833e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008340:	8c3b      	ldrh	r3, [r7, #32]
 8008342:	429a      	cmp	r2, r3
 8008344:	d304      	bcc.n	8008350 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8008346:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008348:	8c3b      	ldrh	r3, [r7, #32]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	b29b      	uxth	r3, r3
 800834e:	e008      	b.n	8008362 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008358:	8c3b      	ldrh	r3, [r7, #32]
 800835a:	1acb      	subs	r3, r1, r3
 800835c:	b29b      	uxth	r3, r3
 800835e:	4413      	add	r3, r2
 8008360:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008362:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8008364:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008366:	8bfb      	ldrh	r3, [r7, #30]
 8008368:	429a      	cmp	r2, r3
 800836a:	d904      	bls.n	8008376 <_tu_fifo_write_n+0x96>
 800836c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800836e:	8bfb      	ldrh	r3, [r7, #30]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	b29b      	uxth	r3, r3
 8008374:	e000      	b.n	8008378 <_tu_fifo_write_n+0x98>
 8008376:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008378:	867b      	strh	r3, [r7, #50]	@ 0x32
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800837e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008380:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008382:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008384:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008386:	4293      	cmp	r3, r2
 8008388:	bf28      	it	cs
 800838a:	4613      	movcs	r3, r2
 800838c:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800838e:	80fb      	strh	r3, [r7, #6]
 8008390:	e04b      	b.n	800842a <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	889b      	ldrh	r3, [r3, #4]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	429a      	cmp	r2, r3
 800839a:	d317      	bcc.n	80083cc <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800839c:	797b      	ldrb	r3, [r7, #5]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10e      	bne.n	80083c0 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	8892      	ldrh	r2, [r2, #4]
 80083a8:	1a9b      	subs	r3, r3, r2
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	88d2      	ldrh	r2, [r2, #6]
 80083ae:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083b2:	b292      	uxth	r2, r2
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	4413      	add	r3, r2
 80083be:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	889b      	ldrh	r3, [r3, #4]
 80083c4:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80083c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80083ca:	e02e      	b.n	800842a <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	889b      	ldrh	r3, [r3, #4]
 80083d0:	83bb      	strh	r3, [r7, #28]
 80083d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80083d4:	837b      	strh	r3, [r7, #26]
 80083d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083d8:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80083da:	8b7a      	ldrh	r2, [r7, #26]
 80083dc:	8b3b      	ldrh	r3, [r7, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d304      	bcc.n	80083ec <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80083e2:	8b7a      	ldrh	r2, [r7, #26]
 80083e4:	8b3b      	ldrh	r3, [r7, #24]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	e008      	b.n	80083fe <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80083ec:	8bbb      	ldrh	r3, [r7, #28]
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	8b79      	ldrh	r1, [r7, #26]
 80083f4:	8b3b      	ldrh	r3, [r7, #24]
 80083f6:	1acb      	subs	r3, r1, r3
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80083fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008400:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	889b      	ldrh	r3, [r3, #4]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	429a      	cmp	r2, r3
 800840e:	db0c      	blt.n	800842a <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8898      	ldrh	r0, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	889a      	ldrh	r2, [r3, #4]
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	b29a      	uxth	r2, r3
 800841e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008420:	4619      	mov	r1, r3
 8008422:	f7ff fe61 	bl	80080e8 <advance_index>
 8008426:	4603      	mov	r3, r0
 8008428:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d023      	beq.n	8008478 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	889b      	ldrh	r3, [r3, #4]
 8008434:	82fb      	strh	r3, [r7, #22]
 8008436:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008438:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800843a:	e003      	b.n	8008444 <_tu_fifo_write_n+0x164>
 800843c:	8aba      	ldrh	r2, [r7, #20]
 800843e:	8afb      	ldrh	r3, [r7, #22]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	82bb      	strh	r3, [r7, #20]
 8008444:	8afa      	ldrh	r2, [r7, #22]
 8008446:	8abb      	ldrh	r3, [r7, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	d9f7      	bls.n	800843c <_tu_fifo_write_n+0x15c>
  return idx;
 800844c:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800844e:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8008450:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	797b      	ldrb	r3, [r7, #5]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	460b      	mov	r3, r1
 800845a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fc66 	bl	8007d2e <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	889b      	ldrh	r3, [r3, #4]
 8008466:	88fa      	ldrh	r2, [r7, #6]
 8008468:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fe3c 	bl	80080e8 <advance_index>
 8008470:	4603      	mov	r3, r0
 8008472:	461a      	mov	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8008478:	88fb      	ldrh	r3, [r7, #6]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3740      	adds	r7, #64	@ 0x40
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af02      	add	r7, sp, #8
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	4611      	mov	r1, r2
 800848e:	461a      	mov	r2, r3
 8008490:	460b      	mov	r3, r1
 8008492:	80fb      	strh	r3, [r7, #6]
 8008494:	4613      	mov	r3, r2
 8008496:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	891b      	ldrh	r3, [r3, #8]
 800849c:	b298      	uxth	r0, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	895b      	ldrh	r3, [r3, #10]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	88f9      	ldrh	r1, [r7, #6]
 80084a6:	797a      	ldrb	r2, [r7, #5]
 80084a8:	9201      	str	r2, [sp, #4]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4603      	mov	r3, r0
 80084ae:	460a      	mov	r2, r1
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fea4 	bl	8008200 <_tu_fifo_peek_n>
 80084b8:	4603      	mov	r3, r0
 80084ba:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8898      	ldrh	r0, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	895b      	ldrh	r3, [r3, #10]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7ff fe0d 	bl	80080e8 <advance_index>
 80084ce:	4603      	mov	r3, r0
 80084d0:	461a      	mov	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80084d6:	88fb      	ldrh	r3, [r7, #6]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8899      	ldrh	r1, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	891b      	ldrh	r3, [r3, #8]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	895b      	ldrh	r3, [r3, #10]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	8279      	strh	r1, [r7, #18]
 80084fa:	823a      	strh	r2, [r7, #16]
 80084fc:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80084fe:	8a3a      	ldrh	r2, [r7, #16]
 8008500:	89fb      	ldrh	r3, [r7, #14]
 8008502:	429a      	cmp	r2, r3
 8008504:	d304      	bcc.n	8008510 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008506:	8a3a      	ldrh	r2, [r7, #16]
 8008508:	89fb      	ldrh	r3, [r7, #14]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	e008      	b.n	8008522 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008510:	8a7b      	ldrh	r3, [r7, #18]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	8a39      	ldrh	r1, [r7, #16]
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	1acb      	subs	r3, r1, r3
 800851c:	b29b      	uxth	r3, r3
 800851e:	4413      	add	r3, r2
 8008520:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	8892      	ldrh	r2, [r2, #4]
 8008526:	82fb      	strh	r3, [r7, #22]
 8008528:	4613      	mov	r3, r2
 800852a:	82bb      	strh	r3, [r7, #20]
 800852c:	8afa      	ldrh	r2, [r7, #22]
 800852e:	8abb      	ldrh	r3, [r7, #20]
 8008530:	4293      	cmp	r3, r2
 8008532:	bf28      	it	cs
 8008534:	4613      	movcs	r3, r2
 8008536:	b29b      	uxth	r3, r3
}
 8008538:	4618      	mov	r0, r3
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	891b      	ldrh	r3, [r3, #8]
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	895b      	ldrh	r3, [r3, #10]
 8008556:	b29b      	uxth	r3, r3
 8008558:	429a      	cmp	r2, r3
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8899      	ldrh	r1, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	891b      	ldrh	r3, [r3, #8]
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	895b      	ldrh	r3, [r3, #10]
 8008584:	b29b      	uxth	r3, r3
 8008586:	81f9      	strh	r1, [r7, #14]
 8008588:	81ba      	strh	r2, [r7, #12]
 800858a:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 800858c:	89ba      	ldrh	r2, [r7, #12]
 800858e:	897b      	ldrh	r3, [r7, #10]
 8008590:	429a      	cmp	r2, r3
 8008592:	d304      	bcc.n	800859e <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008594:	89ba      	ldrh	r2, [r7, #12]
 8008596:	897b      	ldrh	r3, [r7, #10]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	b29b      	uxth	r3, r3
 800859c:	e008      	b.n	80085b0 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800859e:	89fb      	ldrh	r3, [r7, #14]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	89b9      	ldrh	r1, [r7, #12]
 80085a6:	897b      	ldrh	r3, [r7, #10]
 80085a8:	1acb      	subs	r3, r1, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	4413      	add	r3, r2
 80085ae:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	8892      	ldrh	r2, [r2, #4]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bf2c      	ite	cs
 80085b8:	2301      	movcs	r3, #1
 80085ba:	2300      	movcc	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b087      	sub	sp, #28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	8899      	ldrh	r1, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	891b      	ldrh	r3, [r3, #8]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	895b      	ldrh	r3, [r3, #10]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	82f9      	strh	r1, [r7, #22]
 80085e4:	82ba      	strh	r2, [r7, #20]
 80085e6:	827b      	strh	r3, [r7, #18]
 80085e8:	8afb      	ldrh	r3, [r7, #22]
 80085ea:	823b      	strh	r3, [r7, #16]
 80085ec:	8abb      	ldrh	r3, [r7, #20]
 80085ee:	81fb      	strh	r3, [r7, #14]
 80085f0:	8a7b      	ldrh	r3, [r7, #18]
 80085f2:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80085f4:	89fa      	ldrh	r2, [r7, #14]
 80085f6:	89bb      	ldrh	r3, [r7, #12]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d304      	bcc.n	8008606 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80085fc:	89fa      	ldrh	r2, [r7, #14]
 80085fe:	89bb      	ldrh	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	b29b      	uxth	r3, r3
 8008604:	e008      	b.n	8008618 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008606:	8a3b      	ldrh	r3, [r7, #16]
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	89f9      	ldrh	r1, [r7, #14]
 800860e:	89bb      	ldrh	r3, [r7, #12]
 8008610:	1acb      	subs	r3, r1, r3
 8008612:	b29b      	uxth	r3, r3
 8008614:	4413      	add	r3, r2
 8008616:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008618:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800861a:	8afa      	ldrh	r2, [r7, #22]
 800861c:	897b      	ldrh	r3, [r7, #10]
 800861e:	429a      	cmp	r2, r3
 8008620:	d904      	bls.n	800862c <tu_fifo_remaining+0x62>
 8008622:	8afa      	ldrh	r2, [r7, #22]
 8008624:	897b      	ldrh	r3, [r7, #10]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	b29b      	uxth	r3, r3
 800862a:	e000      	b.n	800862e <tu_fifo_remaining+0x64>
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	891b      	ldrh	r3, [r3, #8]
 8008648:	b29a      	uxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	895b      	ldrh	r3, [r3, #10]
 800864e:	b29b      	uxth	r3, r3
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fd6e 	bl	8008134 <_tu_fifo_peek>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8898      	ldrh	r0, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	895b      	ldrh	r3, [r3, #10]
 8008664:	b29b      	uxth	r3, r3
 8008666:	7bfa      	ldrb	r2, [r7, #15]
 8008668:	b292      	uxth	r2, r2
 800866a:	4619      	mov	r1, r3
 800866c:	f7ff fd3c 	bl	80080e8 <advance_index>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	4613      	mov	r3, r2
 800868e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	2300      	movs	r3, #0
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fef3 	bl	8008482 <_tu_fifo_read_n>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	2301      	movs	r3, #1
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff fee1 	bl	8008482 <_tu_fifo_read_n>
 80086c0:	4603      	mov	r3, r0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	891b      	ldrh	r3, [r3, #8]
 80086d8:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff ff47 	bl	800856e <tu_fifo_full>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <tu_fifo_write+0x36>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	79db      	ldrb	r3, [r3, #7]
 80086ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f083 0301 	eor.w	r3, r3, #1
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <tu_fifo_write+0x36>
  {
    ret = false;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e022      	b.n	8008746 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	889b      	ldrh	r3, [r3, #4]
 8008704:	823b      	strh	r3, [r7, #16]
 8008706:	8abb      	ldrh	r3, [r7, #20]
 8008708:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800870a:	e003      	b.n	8008714 <tu_fifo_write+0x4a>
 800870c:	89fa      	ldrh	r2, [r7, #14]
 800870e:	8a3b      	ldrh	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	81fb      	strh	r3, [r7, #14]
 8008714:	8a3a      	ldrh	r2, [r7, #16]
 8008716:	89fb      	ldrh	r3, [r7, #14]
 8008718:	429a      	cmp	r2, r3
 800871a:	d9f7      	bls.n	800870c <tu_fifo_write+0x42>
  return idx;
 800871c:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800871e:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008720:	8a7b      	ldrh	r3, [r7, #18]
 8008722:	461a      	mov	r2, r3
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff fae2 	bl	8007cf0 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	889b      	ldrh	r3, [r3, #4]
 8008730:	8ab9      	ldrh	r1, [r7, #20]
 8008732:	2201      	movs	r2, #1
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fcd7 	bl	80080e8 <advance_index>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	811a      	strh	r2, [r3, #8]

    ret = true;
 8008742:	2301      	movs	r3, #1
 8008744:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	2300      	movs	r3, #0
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fdbb 	bl	80082e0 <_tu_fifo_write_n>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008782:	88fa      	ldrh	r2, [r7, #6]
 8008784:	2301      	movs	r3, #1
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fda9 	bl	80082e0 <_tu_fifo_write_n>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80087ac:	2301      	movs	r3, #1
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	460b      	mov	r3, r1
 80087c4:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	79db      	ldrb	r3, [r3, #7]
 80087ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d101      	bne.n	80087da <tu_fifo_set_overwritable+0x20>
    return true;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e006      	b.n	80087e8 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	79d3      	ldrb	r3, [r2, #7]
 80087de:	78f9      	ldrb	r1, [r7, #3]
 80087e0:	f361 13c7 	bfi	r3, r1, #7, #1
 80087e4:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80087e6:	2301      	movs	r3, #1
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
 8008800:	4613      	mov	r3, r2
 8008802:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  return NULL;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
  return NULL;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 800886a:	b480      	push	{r7}
 800886c:	af00      	add	r7, sp, #0
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 800888e:	b480      	push	{r7}
 8008890:	af00      	add	r7, sp, #0
}
 8008892:	bf00      	nop
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	603a      	str	r2, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
 80088a8:	460b      	mov	r3, r1
 80088aa:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 80088c4:	2301      	movs	r3, #1
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
	...

080088d4 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <tud_mounted+0x20>)
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf14      	ite	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	2300      	moveq	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20001314 	.word	0x20001314

080088f8 <tud_suspended>:

bool tud_suspended(void) {
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 80088fc:	4b07      	ldr	r3, [pc, #28]	@ (800891c <tud_suspended+0x24>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	2301      	movne	r3, #1
 800890c:	2300      	moveq	r3, #0
 800890e:	b2db      	uxtb	r3, r3
}
 8008910:	4618      	mov	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20001314 	.word	0x20001314

08008920 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8008924:	4b0f      	ldr	r3, [pc, #60]	@ (8008964 <tud_remote_wakeup+0x44>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00d      	beq.n	800894e <tud_remote_wakeup+0x2e>
 8008932:	4b0c      	ldr	r3, [pc, #48]	@ (8008964 <tud_remote_wakeup+0x44>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <tud_remote_wakeup+0x2e>
 8008940:	4b08      	ldr	r3, [pc, #32]	@ (8008964 <tud_remote_wakeup+0x44>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <tud_remote_wakeup+0x32>
 800894e:	2300      	movs	r3, #0
 8008950:	e005      	b.n	800895e <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8008952:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <tud_remote_wakeup+0x48>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fba4 	bl	800b0a4 <dcd_remote_wakeup>
  return true;
 800895c:	2301      	movs	r3, #1
}
 800895e:	4618      	mov	r0, r3
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20001314 	.word	0x20001314
 8008968:	2000022d 	.word	0x2000022d

0800896c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8008970:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <tud_inited+0x1c>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2bff      	cmp	r3, #255	@ 0xff
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
}
 800897e:	4618      	mov	r0, r3
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	2000022d 	.word	0x2000022d

0800898c <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	@ 0x30
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8008998:	f7ff ffe8 	bl	800896c <tud_inited>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80089a2:	2301      	movs	r3, #1
 80089a4:	e09e      	b.n	8008ae4 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <tud_rhport_init+0x36>
 80089ac:	4b4f      	ldr	r3, [pc, #316]	@ (8008aec <tud_rhport_init+0x160>)
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d000      	beq.n	80089be <tud_rhport_init+0x32>
 80089bc:	be00      	bkpt	0x0000
 80089be:	2300      	movs	r3, #0
 80089c0:	e090      	b.n	8008ae4 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80089c2:	222c      	movs	r2, #44	@ 0x2c
 80089c4:	2100      	movs	r1, #0
 80089c6:	484a      	ldr	r0, [pc, #296]	@ (8008af0 <tud_rhport_init+0x164>)
 80089c8:	f004 f8f7 	bl	800cbba <memset>
  _usbd_queued_setup = 0;
 80089cc:	4b49      	ldr	r3, [pc, #292]	@ (8008af4 <tud_rhport_init+0x168>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	4b49      	ldr	r3, [pc, #292]	@ (8008af8 <tud_rhport_init+0x16c>)
 80089d4:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 80089d6:	bf00      	nop
 80089d8:	4b48      	ldr	r3, [pc, #288]	@ (8008afc <tud_rhport_init+0x170>)
 80089da:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	3304      	adds	r3, #4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fed9 	bl	8008798 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80089e6:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80089e8:	4a45      	ldr	r2, [pc, #276]	@ (8008b00 <tud_rhport_init+0x174>)
 80089ea:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80089ec:	4b44      	ldr	r3, [pc, #272]	@ (8008b00 <tud_rhport_init+0x174>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <tud_rhport_init+0x7e>
 80089f4:	4b3d      	ldr	r3, [pc, #244]	@ (8008aec <tud_rhport_init+0x160>)
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d000      	beq.n	8008a06 <tud_rhport_init+0x7a>
 8008a04:	be00      	bkpt	0x0000
 8008a06:	2300      	movs	r3, #0
 8008a08:	e06c      	b.n	8008ae4 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8008a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b04 <tud_rhport_init+0x178>)
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008a10:	483d      	ldr	r0, [pc, #244]	@ (8008b08 <tud_rhport_init+0x17c>)
 8008a12:	f3af 8000 	nop.w
 8008a16:	4603      	mov	r3, r0
 8008a18:	4a3c      	ldr	r2, [pc, #240]	@ (8008b0c <tud_rhport_init+0x180>)
 8008a1a:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a22:	e03a      	b.n	8008a9a <tud_rhport_init+0x10e>
 8008a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a28:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008a2e:	4b36      	ldr	r3, [pc, #216]	@ (8008b08 <tud_rhport_init+0x17c>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	7bfa      	ldrb	r2, [r7, #15]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d206      	bcs.n	8008a46 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008a38:	4b34      	ldr	r3, [pc, #208]	@ (8008b0c <tud_rhport_init+0x180>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	015b      	lsls	r3, r3, #5
 8008a40:	4413      	add	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]
 8008a44:	e00d      	b.n	8008a62 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008a46:	4b30      	ldr	r3, [pc, #192]	@ (8008b08 <tud_rhport_init+0x17c>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	db07      	blt.n	8008a62 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	4a2c      	ldr	r2, [pc, #176]	@ (8008b08 <tud_rhport_init+0x17c>)
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	015b      	lsls	r3, r3, #5
 8008a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8008b10 <tud_rhport_init+0x184>)
 8008a5e:	4413      	add	r3, r2
 8008a60:	60bb      	str	r3, [r7, #8]
  return driver;
 8008a62:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <tud_rhport_init+0xe8>
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <tud_rhport_init+0xfe>
 8008a74:	4b1d      	ldr	r3, [pc, #116]	@ (8008aec <tud_rhport_init+0x160>)
 8008a76:	623b      	str	r3, [r7, #32]
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d000      	beq.n	8008a86 <tud_rhport_init+0xfa>
 8008a84:	be00      	bkpt	0x0000
 8008a86:	2300      	movs	r3, #0
 8008a88:	e02c      	b.n	8008ae4 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a94:	3301      	adds	r3, #1
 8008a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008b08 <tud_rhport_init+0x17c>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	dabd      	bge.n	8008a24 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <tud_rhport_init+0x188>)
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 f9cc 	bl	800ae50 <dcd_init>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f083 0301 	eor.w	r3, r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <tud_rhport_init+0x14e>
 8008ac4:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <tud_rhport_init+0x160>)
 8008ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d000      	beq.n	8008ad6 <tud_rhport_init+0x14a>
 8008ad4:	be00      	bkpt	0x0000
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e004      	b.n	8008ae4 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f002 fa55 	bl	800af8c <dcd_int_enable>

  return true;
 8008ae2:	2301      	movs	r3, #1
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3730      	adds	r7, #48	@ 0x30
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	e000edf0 	.word	0xe000edf0
 8008af0:	20001314 	.word	0x20001314
 8008af4:	20001340 	.word	0x20001340
 8008af8:	20000230 	.word	0x20000230
 8008afc:	20000234 	.word	0x20000234
 8008b00:	2000140c 	.word	0x2000140c
 8008b04:	00000000 	.word	0x00000000
 8008b08:	20001348 	.word	0x20001348
 8008b0c:	20001344 	.word	0x20001344
 8008b10:	0800ef28 	.word	0x0800ef28
 8008b14:	2000022d 	.word	0x2000022d

08008b18 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008b22:	2300      	movs	r3, #0
 8008b24:	77fb      	strb	r3, [r7, #31]
 8008b26:	e034      	b.n	8008b92 <configuration_reset+0x7a>
 8008b28:	7ffb      	ldrb	r3, [r7, #31]
 8008b2a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008b30:	4b25      	ldr	r3, [pc, #148]	@ (8008bc8 <configuration_reset+0xb0>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	7cfa      	ldrb	r2, [r7, #19]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d206      	bcs.n	8008b48 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8008b3a:	4b24      	ldr	r3, [pc, #144]	@ (8008bcc <configuration_reset+0xb4>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	7cfb      	ldrb	r3, [r7, #19]
 8008b40:	015b      	lsls	r3, r3, #5
 8008b42:	4413      	add	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e00d      	b.n	8008b64 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008b48:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc8 <configuration_reset+0xb0>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	7cfb      	ldrb	r3, [r7, #19]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	db07      	blt.n	8008b64 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008b54:	7cfb      	ldrb	r3, [r7, #19]
 8008b56:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc8 <configuration_reset+0xb0>)
 8008b58:	7812      	ldrb	r2, [r2, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	015b      	lsls	r3, r3, #5
 8008b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd0 <configuration_reset+0xb8>)
 8008b60:	4413      	add	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  return driver;
 8008b64:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8008b66:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <configuration_reset+0x6a>
 8008b6e:	4b19      	ldr	r3, [pc, #100]	@ (8008bd4 <configuration_reset+0xbc>)
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01f      	beq.n	8008bbe <configuration_reset+0xa6>
 8008b7e:	be00      	bkpt	0x0000
 8008b80:	e01d      	b.n	8008bbe <configuration_reset+0xa6>
    driver->reset(rhport);
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	79fa      	ldrb	r2, [r7, #7]
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008b8c:	7ffb      	ldrb	r3, [r7, #31]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	77fb      	strb	r3, [r7, #31]
 8008b92:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc8 <configuration_reset+0xb0>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	7ffb      	ldrb	r3, [r7, #31]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	dac4      	bge.n	8008b28 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8008b9e:	222c      	movs	r2, #44	@ 0x2c
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	480d      	ldr	r0, [pc, #52]	@ (8008bd8 <configuration_reset+0xc0>)
 8008ba4:	f004 f809 	bl	800cbba <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008ba8:	2210      	movs	r2, #16
 8008baa:	21ff      	movs	r1, #255	@ 0xff
 8008bac:	480b      	ldr	r0, [pc, #44]	@ (8008bdc <configuration_reset+0xc4>)
 8008bae:	f004 f804 	bl	800cbba <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008bb2:	220c      	movs	r2, #12
 8008bb4:	21ff      	movs	r1, #255	@ 0xff
 8008bb6:	480a      	ldr	r0, [pc, #40]	@ (8008be0 <configuration_reset+0xc8>)
 8008bb8:	f003 ffff 	bl	800cbba <memset>
 8008bbc:	e000      	b.n	8008bc0 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008bbe:	bf00      	nop
}
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20001348 	.word	0x20001348
 8008bcc:	20001344 	.word	0x20001344
 8008bd0:	0800ef28 	.word	0x0800ef28
 8008bd4:	e000edf0 	.word	0xe000edf0
 8008bd8:	20001314 	.word	0x20001314
 8008bdc:	20001318 	.word	0x20001318
 8008be0:	20001328 	.word	0x20001328

08008be4 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff91 	bl	8008b18 <configuration_reset>
  usbd_control_reset();
 8008bf6:	f001 fc37 	bl	800a468 <usbd_control_reset>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b093      	sub	sp, #76	@ 0x4c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008c10:	f7ff feac 	bl	800896c <tud_inited>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f083 0301 	eor.w	r3, r3, #1
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f040 8189 	bne.w	8008f34 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008c22:	4bb1      	ldr	r3, [pc, #708]	@ (8008ee8 <tud_task_ext+0x2e4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2000      	movs	r0, #0
 8008c38:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fcfa 	bl	800863a <tu_fifo_read>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2001      	movs	r0, #1
 8008c52:	4798      	blx	r3

  return success;
 8008c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c58:	f083 0301 	eor.w	r3, r3, #1
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 816a 	bne.w	8008f38 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008c64:	7b7b      	ldrb	r3, [r7, #13]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b07      	cmp	r3, #7
 8008c6a:	f200 814b 	bhi.w	8008f04 <tud_task_ext+0x300>
 8008c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <tud_task_ext+0x70>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	08008eb9 	.word	0x08008eb9
 8008c80:	08008e6b 	.word	0x08008e6b
 8008c84:	08008e95 	.word	0x08008e95
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	08008d63 	.word	0x08008d63
 8008c90:	08008ea9 	.word	0x08008ea9
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008c94:	7b3b      	ldrb	r3, [r7, #12]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff ffa4 	bl	8008be4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008c9c:	7c3a      	ldrb	r2, [r7, #16]
 8008c9e:	4b93      	ldr	r3, [pc, #588]	@ (8008eec <tud_task_ext+0x2e8>)
 8008ca0:	709a      	strb	r2, [r3, #2]
        break;
 8008ca2:	e146      	b.n	8008f32 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008ca4:	7b3b      	ldrb	r3, [r7, #12]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff ff9c 	bl	8008be4 <usbd_reset>
        tud_umount_cb();
 8008cac:	f7ff fddd 	bl	800886a <tud_umount_cb>
        break;
 8008cb0:	e13f      	b.n	8008f32 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008cb2:	4b8f      	ldr	r3, [pc, #572]	@ (8008ef0 <tud_task_ext+0x2ec>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <tud_task_ext+0xce>
 8008cbc:	4b8d      	ldr	r3, [pc, #564]	@ (8008ef4 <tud_task_ext+0x2f0>)
 8008cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8137 	beq.w	8008f3c <tud_task_ext+0x338>
 8008cce:	be00      	bkpt	0x0000
 8008cd0:	e134      	b.n	8008f3c <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008cd2:	4b87      	ldr	r3, [pc, #540]	@ (8008ef0 <tud_task_ext+0x2ec>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	4b84      	ldr	r3, [pc, #528]	@ (8008ef0 <tud_task_ext+0x2ec>)
 8008cde:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008ce0:	4b83      	ldr	r3, [pc, #524]	@ (8008ef0 <tud_task_ext+0x2ec>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 8116 	bne.w	8008f18 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008cec:	4a7f      	ldr	r2, [pc, #508]	@ (8008eec <tud_task_ext+0x2e8>)
 8008cee:	7813      	ldrb	r3, [r2, #0]
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008cf6:	4a7d      	ldr	r2, [pc, #500]	@ (8008eec <tud_task_ext+0x2e8>)
 8008cf8:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008cfc:	f023 0301 	bic.w	r3, r3, #1
 8008d00:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008d04:	4a79      	ldr	r2, [pc, #484]	@ (8008eec <tud_task_ext+0x2e8>)
 8008d06:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008d0a:	f023 0304 	bic.w	r3, r3, #4
 8008d0e:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8008d12:	4a76      	ldr	r2, [pc, #472]	@ (8008eec <tud_task_ext+0x2e8>)
 8008d14:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8008d20:	4a72      	ldr	r2, [pc, #456]	@ (8008eec <tud_task_ext+0x2e8>)
 8008d22:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008d26:	f023 0304 	bic.w	r3, r3, #4
 8008d2a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8008d2e:	7b3a      	ldrb	r2, [r7, #12]
 8008d30:	f107 030c 	add.w	r3, r7, #12
 8008d34:	3304      	adds	r3, #4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f000 f91f 	bl	8008f7c <process_control_request>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f083 0301 	eor.w	r3, r3, #1
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80e8 	beq.w	8008f1c <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008d4c:	7b3b      	ldrb	r3, [r7, #12]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fb7b 	bl	800b44c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8008d56:	7b3b      	ldrb	r3, [r7, #12]
 8008d58:	2180      	movs	r1, #128	@ 0x80
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 fb76 	bl	800b44c <dcd_edpt_stall>
        }
        break;
 8008d60:	e0dc      	b.n	8008f1c <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8008d62:	7c3b      	ldrb	r3, [r7, #16]
 8008d64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008d6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008d70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d78:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8008d7a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008d82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008d86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d8a:	09db      	lsrs	r3, r3, #7
 8008d8c:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8008d8e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8008d92:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008d96:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008d9a:	4954      	ldr	r1, [pc, #336]	@ (8008eec <tud_task_ext+0x2e8>)
 8008d9c:	0052      	lsls	r2, r2, #1
 8008d9e:	440a      	add	r2, r1
 8008da0:	4413      	add	r3, r2
 8008da2:	f103 0220 	add.w	r2, r3, #32
 8008da6:	7813      	ldrb	r3, [r2, #0]
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8008dae:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008db2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008db6:	494d      	ldr	r1, [pc, #308]	@ (8008eec <tud_task_ext+0x2e8>)
 8008db8:	0052      	lsls	r2, r2, #1
 8008dba:	440a      	add	r2, r1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f103 0220 	add.w	r2, r3, #32
 8008dc2:	7813      	ldrb	r3, [r2, #0]
 8008dc4:	f023 0304 	bic.w	r3, r3, #4
 8008dc8:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8008dca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8008dd2:	7b38      	ldrb	r0, [r7, #12]
 8008dd4:	7c7a      	ldrb	r2, [r7, #17]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008ddc:	f001 fb7a 	bl	800a4d4 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8008de0:	e0a7      	b.n	8008f32 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008de2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008de6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008dea:	4940      	ldr	r1, [pc, #256]	@ (8008eec <tud_task_ext+0x2e8>)
 8008dec:	0052      	lsls	r2, r2, #1
 8008dee:	440a      	add	r2, r1
 8008df0:	4413      	add	r3, r2
 8008df2:	3314      	adds	r3, #20
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef8 <tud_task_ext+0x2f4>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d207      	bcs.n	8008e1a <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8008e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8008efc <tud_task_ext+0x2f8>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e12:	015b      	lsls	r3, r3, #5
 8008e14:	4413      	add	r3, r2
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	e00f      	b.n	8008e3a <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008e1a:	4b37      	ldr	r3, [pc, #220]	@ (8008ef8 <tud_task_ext+0x2f4>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e24:	429a      	cmp	r2, r3
 8008e26:	db08      	blt.n	8008e3a <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008e28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e2c:	4a32      	ldr	r2, [pc, #200]	@ (8008ef8 <tud_task_ext+0x2f4>)
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	1a9b      	subs	r3, r3, r2
 8008e32:	015b      	lsls	r3, r3, #5
 8008e34:	4a32      	ldr	r2, [pc, #200]	@ (8008f00 <tud_task_ext+0x2fc>)
 8008e36:	4413      	add	r3, r2
 8008e38:	623b      	str	r3, [r7, #32]
  return driver;
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008e3c:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8008e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <tud_task_ext+0x254>
 8008e44:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef4 <tud_task_ext+0x2f0>)
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d075      	beq.n	8008f40 <tud_task_ext+0x33c>
 8008e54:	be00      	bkpt	0x0000
 8008e56:	e073      	b.n	8008f40 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8008e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e5a:	699c      	ldr	r4, [r3, #24]
 8008e5c:	7b38      	ldrb	r0, [r7, #12]
 8008e5e:	7c7a      	ldrb	r2, [r7, #17]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008e66:	47a0      	blx	r4
        break;
 8008e68:	e063      	b.n	8008f32 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8008e6a:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <tud_task_ext+0x2e8>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d053      	beq.n	8008f20 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008e78:	4b1c      	ldr	r3, [pc, #112]	@ (8008eec <tud_task_ext+0x2e8>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf14      	ite	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	2300      	moveq	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fcf3 	bl	8008878 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008e92:	e045      	b.n	8008f20 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8008e94:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <tud_task_ext+0x2e8>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d040      	beq.n	8008f24 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8008ea2:	f7ff fcf4 	bl	800888e <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008ea6:	e03d      	b.n	8008f24 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d03c      	beq.n	8008f28 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	4798      	blx	r3
        }
        break;
 8008eb6:	e037      	b.n	8008f28 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008eec <tud_task_ext+0x2e8>)
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008ec4:	7efb      	ldrb	r3, [r7, #27]
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf14      	ite	ne
 8008ed4:	2301      	movne	r3, #1
 8008ed6:	2300      	moveq	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d026      	beq.n	8008f2c <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fc95 	bl	8008810 <tud_sof_cb>
        }
      break;
 8008ee6:	e021      	b.n	8008f2c <tud_task_ext+0x328>
 8008ee8:	2000140c 	.word	0x2000140c
 8008eec:	20001314 	.word	0x20001314
 8008ef0:	20001340 	.word	0x20001340
 8008ef4:	e000edf0 	.word	0xe000edf0
 8008ef8:	20001348 	.word	0x20001348
 8008efc:	20001344 	.word	0x20001344
 8008f00:	0800ef28 	.word	0x0800ef28

      default:
        TU_BREAKPOINT();
 8008f04:	4b10      	ldr	r3, [pc, #64]	@ (8008f48 <tud_task_ext+0x344>)
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00d      	beq.n	8008f30 <tud_task_ext+0x32c>
 8008f14:	be00      	bkpt	0x0000
        break;
 8008f16:	e00b      	b.n	8008f30 <tud_task_ext+0x32c>
          break;
 8008f18:	bf00      	nop
 8008f1a:	e682      	b.n	8008c22 <tud_task_ext+0x1e>
        break;
 8008f1c:	bf00      	nop
 8008f1e:	e680      	b.n	8008c22 <tud_task_ext+0x1e>
        break;
 8008f20:	bf00      	nop
 8008f22:	e67e      	b.n	8008c22 <tud_task_ext+0x1e>
        break;
 8008f24:	bf00      	nop
 8008f26:	e67c      	b.n	8008c22 <tud_task_ext+0x1e>
        break;
 8008f28:	bf00      	nop
 8008f2a:	e67a      	b.n	8008c22 <tud_task_ext+0x1e>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e678      	b.n	8008c22 <tud_task_ext+0x1e>
        break;
 8008f30:	bf00      	nop
  while (1) {
 8008f32:	e676      	b.n	8008c22 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008f34:	bf00      	nop
 8008f36:	e004      	b.n	8008f42 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008f38:	bf00      	nop
 8008f3a:	e002      	b.n	8008f42 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008f3c:	bf00      	nop
 8008f3e:	e000      	b.n	8008f42 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8008f40:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8008f42:	374c      	adds	r7, #76	@ 0x4c
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	e000edf0 	.word	0xe000edf0

08008f4c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fa8e 	bl	800a480 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	7bf8      	ldrb	r0, [r7, #15]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4798      	blx	r3
 8008f70:	4603      	mov	r3, r0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b09a      	sub	sp, #104	@ 0x68
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f001 fa79 	bl	800a480 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b60      	cmp	r3, #96	@ 0x60
 8008f9a:	d10a      	bne.n	8008fb2 <process_control_request+0x36>
 8008f9c:	4ba5      	ldr	r3, [pc, #660]	@ (8009234 <process_control_request+0x2b8>)
 8008f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d000      	beq.n	8008fae <process_control_request+0x32>
 8008fac:	be00      	bkpt	0x0000
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e2bb      	b.n	800952a <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d10a      	bne.n	8008fd6 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8008fc0:	489d      	ldr	r0, [pc, #628]	@ (8009238 <process_control_request+0x2bc>)
 8008fc2:	f001 fa5d 	bl	800a480 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	2101      	movs	r1, #1
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fc65 	bl	800889c <tud_vendor_control_xfer_cb>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	e2a9      	b.n	800952a <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	f000 81ca 	beq.w	800937a <process_control_request+0x3fe>
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	f300 8292 	bgt.w	8009510 <process_control_request+0x594>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <process_control_request+0x7c>
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	f000 8151 	beq.w	8009298 <process_control_request+0x31c>
 8008ff6:	e28b      	b.n	8009510 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b20      	cmp	r3, #32
 8009004:	d143      	bne.n	800908e <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	889b      	ldrh	r3, [r3, #4]
 800900a:	b29b      	uxth	r3, r3
 800900c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800900e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8009016:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d901      	bls.n	8009022 <process_control_request+0xa6>
 800901e:	2300      	movs	r3, #0
 8009020:	e283      	b.n	800952a <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009022:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009026:	4a85      	ldr	r2, [pc, #532]	@ (800923c <process_control_request+0x2c0>)
 8009028:	4413      	add	r3, r2
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8009034:	4b82      	ldr	r3, [pc, #520]	@ (8009240 <process_control_request+0x2c4>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800903c:	429a      	cmp	r2, r3
 800903e:	d207      	bcs.n	8009050 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8009040:	4b80      	ldr	r3, [pc, #512]	@ (8009244 <process_control_request+0x2c8>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009048:	015b      	lsls	r3, r3, #5
 800904a:	4413      	add	r3, r2
 800904c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800904e:	e00f      	b.n	8009070 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009050:	4b7b      	ldr	r3, [pc, #492]	@ (8009240 <process_control_request+0x2c4>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800905a:	429a      	cmp	r2, r3
 800905c:	db08      	blt.n	8009070 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800905e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009062:	4a77      	ldr	r2, [pc, #476]	@ (8009240 <process_control_request+0x2c4>)
 8009064:	7812      	ldrb	r2, [r2, #0]
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	015b      	lsls	r3, r3, #5
 800906a:	4a77      	ldr	r2, [pc, #476]	@ (8009248 <process_control_request+0x2cc>)
 800906c:	4413      	add	r3, r2
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009072:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <process_control_request+0x102>
 800907a:	2300      	movs	r3, #0
 800907c:	e255      	b.n	800952a <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff ff61 	bl	8008f4c <invoke_class_control>
 800908a:	4603      	mov	r3, r0
 800908c:	e24d      	b.n	800952a <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 800909c:	4b65      	ldr	r3, [pc, #404]	@ (8009234 <process_control_request+0x2b8>)
 800909e:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d000      	beq.n	80090ae <process_control_request+0x132>
 80090ac:	be00      	bkpt	0x0000
        return false;
 80090ae:	2300      	movs	r3, #0
 80090b0:	e23b      	b.n	800952a <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	f200 80e1 	bhi.w	800927e <process_control_request+0x302>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <process_control_request+0x148>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	0800924d 	.word	0x0800924d
 80090c8:	08009211 	.word	0x08009211
 80090cc:	0800927f 	.word	0x0800927f
 80090d0:	080091eb 	.word	0x080091eb
 80090d4:	0800927f 	.word	0x0800927f
 80090d8:	080090ed 	.word	0x080090ed
 80090dc:	080091d1 	.word	0x080091d1
 80090e0:	0800927f 	.word	0x0800927f
 80090e4:	08009111 	.word	0x08009111
 80090e8:	08009129 	.word	0x08009129
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80090ec:	6838      	ldr	r0, [r7, #0]
 80090ee:	f001 f9d7 	bl	800a4a0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f001 ff94 	bl	800b02c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8009104:	4a4d      	ldr	r2, [pc, #308]	@ (800923c <process_control_request+0x2c0>)
 8009106:	7813      	ldrb	r3, [r2, #0]
 8009108:	f043 0302 	orr.w	r3, r3, #2
 800910c:	7013      	strb	r3, [r2, #0]
        break;
 800910e:	e0c2      	b.n	8009296 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8009110:	4b4a      	ldr	r3, [pc, #296]	@ (800923c <process_control_request+0x2c0>)
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8009118:	f107 0213 	add.w	r2, r7, #19
 800911c:	79f8      	ldrb	r0, [r7, #7]
 800911e:	2301      	movs	r3, #1
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	f001 f931 	bl	800a388 <tud_control_xfer>
        }
        break;
 8009126:	e0b6      	b.n	8009296 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	885b      	ldrh	r3, [r3, #2]
 800912c:	b29b      	uxth	r3, r3
 800912e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8009132:	4b42      	ldr	r3, [pc, #264]	@ (800923c <process_control_request+0x2c0>)
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800913c:	429a      	cmp	r2, r3
 800913e:	d041      	beq.n	80091c4 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8009140:	4b3e      	ldr	r3, [pc, #248]	@ (800923c <process_control_request+0x2c0>)
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d014      	beq.n	8009174 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f002 f832 	bl	800b1b8 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	4618      	mov	r0, r3
 8009158:	f002 f896 	bl	800b288 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800915c:	4b37      	ldr	r3, [pc, #220]	@ (800923c <process_control_request+0x2c0>)
 800915e:	789b      	ldrb	r3, [r3, #2]
 8009160:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff fcd6 	bl	8008b18 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800916c:	4a33      	ldr	r2, [pc, #204]	@ (800923c <process_control_request+0x2c0>)
 800916e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009172:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8009174:	4a31      	ldr	r2, [pc, #196]	@ (800923c <process_control_request+0x2c0>)
 8009176:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800917a:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 800917c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01d      	beq.n	80091c0 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8009184:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f9d5 	bl	800953c <process_set_config>
 8009192:	4603      	mov	r3, r0
 8009194:	f083 0301 	eor.w	r3, r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800919e:	4b25      	ldr	r3, [pc, #148]	@ (8009234 <process_control_request+0x2b8>)
 80091a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d000      	beq.n	80091b0 <process_control_request+0x234>
 80091ae:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80091b0:	4b22      	ldr	r3, [pc, #136]	@ (800923c <process_control_request+0x2c0>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	705a      	strb	r2, [r3, #1]
                return false;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e1b7      	b.n	800952a <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80091ba:	f7ff fb4f 	bl	800885c <tud_mount_cb>
 80091be:	e001      	b.n	80091c4 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 80091c0:	f7ff fb53 	bl	800886a <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 f86b 	bl	800a2a4 <tud_control_status>
        }
        break;
 80091ce:	e062      	b.n	8009296 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fae5 	bl	80097a4 <process_get_descriptor>
 80091da:	4603      	mov	r3, r0
 80091dc:	f083 0301 	eor.w	r3, r3, #1
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d056      	beq.n	8009294 <process_control_request+0x318>
 80091e6:	2300      	movs	r3, #0
 80091e8:	e19f      	b.n	800952a <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d10b      	bne.n	800920c <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80091f4:	4a11      	ldr	r2, [pc, #68]	@ (800923c <process_control_request+0x2c0>)
 80091f6:	7813      	ldrb	r3, [r2, #0]
 80091f8:	f043 0308 	orr.w	r3, r3, #8
 80091fc:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f001 f84e 	bl	800a2a4 <tud_control_status>
            break;
 8009208:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800920a:	e044      	b.n	8009296 <process_control_request+0x31a>
            default: return false;
 800920c:	2300      	movs	r3, #0
 800920e:	e18c      	b.n	800952a <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	885b      	ldrh	r3, [r3, #2]
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b01      	cmp	r3, #1
 8009218:	d001      	beq.n	800921e <process_control_request+0x2a2>
 800921a:	2300      	movs	r3, #0
 800921c:	e185      	b.n	800952a <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800921e:	4a07      	ldr	r2, [pc, #28]	@ (800923c <process_control_request+0x2c0>)
 8009220:	7813      	ldrb	r3, [r2, #0]
 8009222:	f023 0308 	bic.w	r3, r3, #8
 8009226:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f839 	bl	800a2a4 <tud_control_status>
        break;
 8009232:	e030      	b.n	8009296 <process_control_request+0x31a>
 8009234:	e000edf0 	.word	0xe000edf0
 8009238:	0800889d 	.word	0x0800889d
 800923c:	20001314 	.word	0x20001314
 8009240:	20001348 	.word	0x20001348
 8009244:	20001344 	.word	0x20001344
 8009248:	0800ef28 	.word	0x0800ef28

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800924c:	4b94      	ldr	r3, [pc, #592]	@ (80094a0 <process_control_request+0x524>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	b29a      	uxth	r2, r3
 800925a:	4b91      	ldr	r3, [pc, #580]	@ (80094a0 <process_control_request+0x524>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	089b      	lsrs	r3, r3, #2
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	b29b      	uxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b29b      	uxth	r3, r3
 800926c:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800926e:	f107 0210 	add.w	r2, r7, #16
 8009272:	79f8      	ldrb	r0, [r7, #7]
 8009274:	2302      	movs	r3, #2
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	f001 f886 	bl	800a388 <tud_control_xfer>
          break;
 800927c:	e00b      	b.n	8009296 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800927e:	4b89      	ldr	r3, [pc, #548]	@ (80094a4 <process_control_request+0x528>)
 8009280:	647b      	str	r3, [r7, #68]	@ 0x44
 8009282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d000      	beq.n	8009290 <process_control_request+0x314>
 800928e:	be00      	bkpt	0x0000
 8009290:	2300      	movs	r3, #0
 8009292:	e14a      	b.n	800952a <process_control_request+0x5ae>
        break;
 8009294:	bf00      	nop
      }
    break;
 8009296:	e147      	b.n	8009528 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	889b      	ldrh	r3, [r3, #4]
 800929c:	b29b      	uxth	r3, r3
 800929e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80092a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80092a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092ac:	2b0f      	cmp	r3, #15
 80092ae:	d901      	bls.n	80092b4 <process_control_request+0x338>
 80092b0:	2300      	movs	r3, #0
 80092b2:	e13a      	b.n	800952a <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80092b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092b8:	4a79      	ldr	r2, [pc, #484]	@ (80094a0 <process_control_request+0x524>)
 80092ba:	4413      	add	r3, r2
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80092c6:	4b78      	ldr	r3, [pc, #480]	@ (80094a8 <process_control_request+0x52c>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d207      	bcs.n	80092e2 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80092d2:	4b76      	ldr	r3, [pc, #472]	@ (80094ac <process_control_request+0x530>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092da:	015b      	lsls	r3, r3, #5
 80092dc:	4413      	add	r3, r2
 80092de:	623b      	str	r3, [r7, #32]
 80092e0:	e00f      	b.n	8009302 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80092e2:	4b71      	ldr	r3, [pc, #452]	@ (80094a8 <process_control_request+0x52c>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092ec:	429a      	cmp	r2, r3
 80092ee:	db08      	blt.n	8009302 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80092f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092f4:	4a6c      	ldr	r2, [pc, #432]	@ (80094a8 <process_control_request+0x52c>)
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	015b      	lsls	r3, r3, #5
 80092fc:	4a6c      	ldr	r2, [pc, #432]	@ (80094b0 <process_control_request+0x534>)
 80092fe:	4413      	add	r3, r2
 8009300:	623b      	str	r3, [r7, #32]
  return driver;
 8009302:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009304:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8009306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <process_control_request+0x394>
 800930c:	2300      	movs	r3, #0
 800930e:	e10c      	b.n	800952a <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fe18 	bl	8008f4c <invoke_class_control>
 800931c:	4603      	mov	r3, r0
 800931e:	f083 0301 	eor.w	r3, r3, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 80fe 	beq.w	8009526 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <process_control_request+0x3c0>
 8009338:	2300      	movs	r3, #0
 800933a:	e0f6      	b.n	800952a <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	3b0a      	subs	r3, #10
 8009342:	2b01      	cmp	r3, #1
 8009344:	d816      	bhi.n	8009374 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8009346:	2000      	movs	r0, #0
 8009348:	f001 f89a 	bl	800a480 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b0a      	cmp	r3, #10
 8009352:	d109      	bne.n	8009368 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8009358:	f107 020f 	add.w	r2, r7, #15
 800935c:	79f8      	ldrb	r0, [r7, #7]
 800935e:	2301      	movs	r3, #1
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	f001 f811 	bl	800a388 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8009366:	e007      	b.n	8009378 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 ff99 	bl	800a2a4 <tud_control_status>
          break;
 8009372:	e001      	b.n	8009378 <process_control_request+0x3fc>

          default: return false;
 8009374:	2300      	movs	r3, #0
 8009376:	e0d8      	b.n	800952a <process_control_request+0x5ae>
        }
      }
      break;
 8009378:	e0d5      	b.n	8009526 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	889b      	ldrh	r3, [r3, #4]
 800937e:	b29b      	uxth	r3, r3
 8009380:	83bb      	strh	r3, [r7, #28]
 8009382:	8bbb      	ldrh	r3, [r7, #28]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800938a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800938e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009390:	7fbb      	ldrb	r3, [r7, #30]
 8009392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009396:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8009398:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800939c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093a0:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80093a2:	7ffb      	ldrb	r3, [r7, #31]
 80093a4:	09db      	lsrs	r3, r3, #7
 80093a6:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80093a8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80093ac:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	d90a      	bls.n	80093ca <process_control_request+0x44e>
 80093b4:	4b3b      	ldr	r3, [pc, #236]	@ (80094a4 <process_control_request+0x528>)
 80093b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d000      	beq.n	80093c6 <process_control_request+0x44a>
 80093c4:	be00      	bkpt	0x0000
 80093c6:	2300      	movs	r3, #0
 80093c8:	e0af      	b.n	800952a <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80093ca:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80093ce:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80093d2:	4933      	ldr	r1, [pc, #204]	@ (80094a0 <process_control_request+0x524>)
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	440a      	add	r2, r1
 80093d8:	4413      	add	r3, r2
 80093da:	3314      	adds	r3, #20
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80093e4:	4b30      	ldr	r3, [pc, #192]	@ (80094a8 <process_control_request+0x52c>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	7efa      	ldrb	r2, [r7, #27]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d206      	bcs.n	80093fc <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80093ee:	4b2f      	ldr	r3, [pc, #188]	@ (80094ac <process_control_request+0x530>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	7efb      	ldrb	r3, [r7, #27]
 80093f4:	015b      	lsls	r3, r3, #5
 80093f6:	4413      	add	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e00d      	b.n	8009418 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80093fc:	4b2a      	ldr	r3, [pc, #168]	@ (80094a8 <process_control_request+0x52c>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	7efb      	ldrb	r3, [r7, #27]
 8009404:	429a      	cmp	r2, r3
 8009406:	db07      	blt.n	8009418 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009408:	7efb      	ldrb	r3, [r7, #27]
 800940a:	4a27      	ldr	r2, [pc, #156]	@ (80094a8 <process_control_request+0x52c>)
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	015b      	lsls	r3, r3, #5
 8009412:	4a27      	ldr	r2, [pc, #156]	@ (80094b0 <process_control_request+0x534>)
 8009414:	4413      	add	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
  return driver;
 8009418:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800941a:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 800942a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <process_control_request+0x4b8>
 8009430:	2300      	movs	r3, #0
 8009432:	e07a      	b.n	800952a <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fd86 	bl	8008f4c <invoke_class_control>
 8009440:	4603      	mov	r3, r0
 8009442:	e072      	b.n	800952a <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b03      	cmp	r3, #3
 800944a:	d017      	beq.n	800947c <process_control_request+0x500>
 800944c:	2b03      	cmp	r3, #3
 800944e:	dc52      	bgt.n	80094f6 <process_control_request+0x57a>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <process_control_request+0x4de>
 8009454:	2b01      	cmp	r3, #1
 8009456:	d011      	beq.n	800947c <process_control_request+0x500>
 8009458:	e04d      	b.n	80094f6 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800945a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fec8 	bl	800a1f8 <usbd_edpt_stalled>
 8009468:	4603      	mov	r3, r0
 800946a:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 800946c:	f107 020c 	add.w	r2, r7, #12
 8009470:	79f8      	ldrb	r0, [r7, #7]
 8009472:	2302      	movs	r3, #2
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	f000 ff87 	bl	800a388 <tud_control_xfer>
          }
          break;
 800947a:	e048      	b.n	800950e <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11d      	bne.n	80094c2 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d112      	bne.n	80094b4 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800948e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fe70 	bl	800a17c <usbd_edpt_clear_stall>
 800949c:	e011      	b.n	80094c2 <process_control_request+0x546>
 800949e:	bf00      	nop
 80094a0:	20001314 	.word	0x20001314
 80094a4:	e000edf0 	.word	0xe000edf0
 80094a8:	20001348 	.word	0x20001348
 80094ac:	20001344 	.word	0x20001344
 80094b0:	0800ef28 	.word	0x0800ef28
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80094b4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fe1f 	bl	800a100 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80094c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d021      	beq.n	800950c <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fd3c 	bl	8008f4c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80094d4:	2000      	movs	r0, #0
 80094d6:	f000 ffd3 	bl	800a480 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80094da:	4b16      	ldr	r3, [pc, #88]	@ (8009534 <process_control_request+0x5b8>)
 80094dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80094e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d110      	bne.n	800950c <process_control_request+0x590>
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fed8 	bl	800a2a4 <tud_control_status>
            }
          }
          break;
 80094f4:	e00a      	b.n	800950c <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80094f6:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <process_control_request+0x5bc>)
 80094f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d000      	beq.n	8009508 <process_control_request+0x58c>
 8009506:	be00      	bkpt	0x0000
            return false;
 8009508:	2300      	movs	r3, #0
 800950a:	e00e      	b.n	800952a <process_control_request+0x5ae>
          break;
 800950c:	bf00      	nop
        }
      }
    }
    break;
 800950e:	e00b      	b.n	8009528 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009510:	4b09      	ldr	r3, [pc, #36]	@ (8009538 <process_control_request+0x5bc>)
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
 8009514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d000      	beq.n	8009522 <process_control_request+0x5a6>
 8009520:	be00      	bkpt	0x0000
      return false;
 8009522:	2300      	movs	r3, #0
 8009524:	e001      	b.n	800952a <process_control_request+0x5ae>
      break;
 8009526:	bf00      	nop
  }

  return true;
 8009528:	2301      	movs	r3, #1
}
 800952a:	4618      	mov	r0, r3
 800952c:	3768      	adds	r7, #104	@ 0x68
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20001314 	.word	0x20001314
 8009538:	e000edf0 	.word	0xe000edf0

0800953c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b096      	sub	sp, #88	@ 0x58
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	460a      	mov	r2, r1
 8009546:	71fb      	strb	r3, [r7, #7]
 8009548:	4613      	mov	r3, r2
 800954a:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 800954c:	79bb      	ldrb	r3, [r7, #6]
 800954e:	3b01      	subs	r3, #1
 8009550:	b2db      	uxtb	r3, r3
 8009552:	4618      	mov	r0, r3
 8009554:	f7fa fa88 	bl	8003a68 <tud_descriptor_configuration_cb>
 8009558:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 800955a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <process_set_config+0x2c>
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d00a      	beq.n	800957e <process_set_config+0x42>
 8009568:	4b87      	ldr	r3, [pc, #540]	@ (8009788 <process_set_config+0x24c>)
 800956a:	623b      	str	r3, [r7, #32]
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d000      	beq.n	800957a <process_set_config+0x3e>
 8009578:	be00      	bkpt	0x0000
 800957a:	2300      	movs	r3, #0
 800957c:	e100      	b.n	8009780 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800957e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009580:	79db      	ldrb	r3, [r3, #7]
 8009582:	115b      	asrs	r3, r3, #5
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	b2d9      	uxtb	r1, r3
 800958a:	4a80      	ldr	r2, [pc, #512]	@ (800978c <process_set_config+0x250>)
 800958c:	7813      	ldrb	r3, [r2, #0]
 800958e:	f361 1304 	bfi	r3, r1, #4, #1
 8009592:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8009594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009596:	79db      	ldrb	r3, [r3, #7]
 8009598:	119b      	asrs	r3, r3, #6
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	b2d9      	uxtb	r1, r3
 80095a0:	4a7a      	ldr	r2, [pc, #488]	@ (800978c <process_set_config+0x250>)
 80095a2:	7813      	ldrb	r3, [r2, #0]
 80095a4:	f361 1345 	bfi	r3, r1, #5, #1
 80095a8:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80095aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ac:	3309      	adds	r3, #9
 80095ae:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80095b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b2:	885b      	ldrh	r3, [r3, #2]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ba:	4413      	add	r3, r2
 80095bc:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80095be:	e0d9      	b.n	8009774 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80095c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c8:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	3301      	adds	r3, #1
 80095ce:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80095d0:	2b0b      	cmp	r3, #11
 80095d2:	d10f      	bne.n	80095f4 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80095d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d6:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80095d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095da:	78db      	ldrb	r3, [r3, #3]
 80095dc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80095e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 80095f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80095f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f6:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	3301      	adds	r3, #1
 80095fc:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d00a      	beq.n	8009618 <process_set_config+0xdc>
 8009602:	4b61      	ldr	r3, [pc, #388]	@ (8009788 <process_set_config+0x24c>)
 8009604:	627b      	str	r3, [r7, #36]	@ 0x24
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d000      	beq.n	8009614 <process_set_config+0xd8>
 8009612:	be00      	bkpt	0x0000
 8009614:	2300      	movs	r3, #0
 8009616:	e0b3      	b.n	8009780 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8009618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800961a:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 800961c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800961e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800962a:	e089      	b.n	8009740 <process_set_config+0x204>
 800962c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009630:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8009636:	4b56      	ldr	r3, [pc, #344]	@ (8009790 <process_set_config+0x254>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	429a      	cmp	r2, r3
 800963e:	d206      	bcs.n	800964e <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8009640:	4b54      	ldr	r3, [pc, #336]	@ (8009794 <process_set_config+0x258>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	015b      	lsls	r3, r3, #5
 8009648:	4413      	add	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]
 800964c:	e00d      	b.n	800966a <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800964e:	4b50      	ldr	r3, [pc, #320]	@ (8009790 <process_set_config+0x254>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	429a      	cmp	r2, r3
 8009658:	db07      	blt.n	800966a <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	4a4c      	ldr	r2, [pc, #304]	@ (8009790 <process_set_config+0x254>)
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	015b      	lsls	r3, r3, #5
 8009664:	4a4c      	ldr	r2, [pc, #304]	@ (8009798 <process_set_config+0x25c>)
 8009666:	4413      	add	r3, r2
 8009668:	60bb      	str	r3, [r7, #8]
  return driver;
 800966a:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <process_set_config+0x14e>
 8009674:	4b44      	ldr	r3, [pc, #272]	@ (8009788 <process_set_config+0x24c>)
 8009676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d000      	beq.n	8009686 <process_set_config+0x14a>
 8009684:	be00      	bkpt	0x0000
 8009686:	2300      	movs	r3, #0
 8009688:	e07a      	b.n	8009780 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009690:	79f8      	ldrb	r0, [r7, #7]
 8009692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009694:	4798      	blx	r3
 8009696:	4603      	mov	r3, r0
 8009698:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 800969a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800969c:	2b08      	cmp	r3, #8
 800969e:	d94a      	bls.n	8009736 <process_set_config+0x1fa>
 80096a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d846      	bhi.n	8009736 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80096a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d107      	bne.n	80096c0 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	4a39      	ldr	r2, [pc, #228]	@ (800979c <process_set_config+0x260>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d102      	bne.n	80096c0 <process_set_config+0x184>
 80096ba:	2302      	movs	r3, #2
 80096bc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80096c0:	2300      	movs	r3, #0
 80096c2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80096c6:	e024      	b.n	8009712 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80096c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ca:	789a      	ldrb	r2, [r3, #2]
 80096cc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80096d0:	4413      	add	r3, r2
 80096d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80096d6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80096da:	4a2c      	ldr	r2, [pc, #176]	@ (800978c <process_set_config+0x250>)
 80096dc:	4413      	add	r3, r2
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	2bff      	cmp	r3, #255	@ 0xff
 80096e2:	d00a      	beq.n	80096fa <process_set_config+0x1be>
 80096e4:	4b28      	ldr	r3, [pc, #160]	@ (8009788 <process_set_config+0x24c>)
 80096e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d000      	beq.n	80096f6 <process_set_config+0x1ba>
 80096f4:	be00      	bkpt	0x0000
 80096f6:	2300      	movs	r3, #0
 80096f8:	e042      	b.n	8009780 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80096fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80096fe:	4a23      	ldr	r2, [pc, #140]	@ (800978c <process_set_config+0x250>)
 8009700:	4413      	add	r3, r2
 8009702:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009706:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009708:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800970c:	3301      	adds	r3, #1
 800970e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009712:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009716:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800971a:	429a      	cmp	r2, r3
 800971c:	d3d4      	bcc.n	80096c8 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800971e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009722:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009726:	481e      	ldr	r0, [pc, #120]	@ (80097a0 <process_set_config+0x264>)
 8009728:	f003 f81c 	bl	800c764 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800972c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800972e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009730:	4413      	add	r3, r2
 8009732:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009734:	e00c      	b.n	8009750 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009736:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800973a:	3301      	adds	r3, #1
 800973c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009740:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <process_set_config+0x254>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800974a:	429a      	cmp	r2, r3
 800974c:	f6bf af6e 	bge.w	800962c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8009750:	4b0f      	ldr	r3, [pc, #60]	@ (8009790 <process_set_config+0x254>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800975a:	429a      	cmp	r2, r3
 800975c:	da0a      	bge.n	8009774 <process_set_config+0x238>
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <process_set_config+0x24c>)
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d000      	beq.n	8009770 <process_set_config+0x234>
 800976e:	be00      	bkpt	0x0000
 8009770:	2300      	movs	r3, #0
 8009772:	e005      	b.n	8009780 <process_set_config+0x244>
  while( p_desc < desc_end )
 8009774:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009778:	429a      	cmp	r2, r3
 800977a:	f4ff af21 	bcc.w	80095c0 <process_set_config+0x84>
  }

  return true;
 800977e:	2301      	movs	r3, #1
}
 8009780:	4618      	mov	r0, r3
 8009782:	3758      	adds	r7, #88	@ 0x58
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	e000edf0 	.word	0xe000edf0
 800978c:	20001314 	.word	0x20001314
 8009790:	20001348 	.word	0x20001348
 8009794:	20001344 	.word	0x20001344
 8009798:	0800ef28 	.word	0x0800ef28
 800979c:	08006cd1 	.word	0x08006cd1
 80097a0:	20001328 	.word	0x20001328

080097a4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b094      	sub	sp, #80	@ 0x50
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	885b      	ldrh	r3, [r3, #2]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80097b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	b29b      	uxth	r3, r3
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	885b      	ldrh	r3, [r3, #2]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80097cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 80097d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b0e      	cmp	r3, #14
 80097dc:	f200 80b4 	bhi.w	8009948 <process_get_descriptor+0x1a4>
 80097e0:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <process_get_descriptor+0x44>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	08009825 	.word	0x08009825
 80097ec:	08009889 	.word	0x08009889
 80097f0:	080098ef 	.word	0x080098ef
 80097f4:	08009949 	.word	0x08009949
 80097f8:	08009949 	.word	0x08009949
 80097fc:	08009923 	.word	0x08009923
 8009800:	08009889 	.word	0x08009889
 8009804:	08009949 	.word	0x08009949
 8009808:	08009949 	.word	0x08009949
 800980c:	08009949 	.word	0x08009949
 8009810:	08009949 	.word	0x08009949
 8009814:	08009949 	.word	0x08009949
 8009818:	08009949 	.word	0x08009949
 800981c:	08009949 	.word	0x08009949
 8009820:	08009857 	.word	0x08009857
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009824:	f7fa f908 	bl	8003a38 <tud_descriptor_device_cb>
 8009828:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 800982a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <process_get_descriptor+0xa2>
 8009830:	4b48      	ldr	r3, [pc, #288]	@ (8009954 <process_get_descriptor+0x1b0>)
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d000      	beq.n	8009842 <process_get_descriptor+0x9e>
 8009840:	be00      	bkpt	0x0000
 8009842:	2300      	movs	r3, #0
 8009844:	e081      	b.n	800994a <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8009846:	79f8      	ldrb	r0, [r7, #7]
 8009848:	2312      	movs	r3, #18
 800984a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	f000 fd9b 	bl	800a388 <tud_control_xfer>
 8009852:	4603      	mov	r3, r0
 8009854:	e079      	b.n	800994a <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8009856:	f7fe ffe5 	bl	8008824 <tud_descriptor_bos_cb>
 800985a:	4603      	mov	r3, r0
 800985c:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 800985e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <process_get_descriptor+0xc4>
 8009864:	2300      	movs	r3, #0
 8009866:	e070      	b.n	800994a <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8009868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800986a:	3302      	adds	r3, #2
 800986c:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8009876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009878:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800987c:	79f8      	ldrb	r0, [r7, #7]
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	f000 fd82 	bl	800a388 <tud_control_xfer>
 8009884:	4603      	mov	r3, r0
 8009886:	e060      	b.n	800994a <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8009888:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800988c:	2b02      	cmp	r3, #2
 800988e:	d114      	bne.n	80098ba <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8009890:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009894:	4618      	mov	r0, r3
 8009896:	f7fa f8e7 	bl	8003a68 <tud_descriptor_configuration_cb>
 800989a:	4603      	mov	r3, r0
 800989c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 800989e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d116      	bne.n	80098d2 <process_get_descriptor+0x12e>
 80098a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009954 <process_get_descriptor+0x1b0>)
 80098a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d000      	beq.n	80098b6 <process_get_descriptor+0x112>
 80098b4:	be00      	bkpt	0x0000
 80098b6:	2300      	movs	r3, #0
 80098b8:	e047      	b.n	800994a <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80098ba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe ffc0 	bl	8008844 <tud_descriptor_other_speed_configuration_cb>
 80098c4:	4603      	mov	r3, r0
 80098c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 80098c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <process_get_descriptor+0x12e>
 80098ce:	2300      	movs	r3, #0
 80098d0:	e03b      	b.n	800994a <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 80098d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d4:	3302      	adds	r3, #2
 80098d6:	61fb      	str	r3, [r7, #28]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80098de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80098e2:	79f8      	ldrb	r0, [r7, #7]
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	f000 fd4f 	bl	800a388 <tud_control_xfer>
 80098ea:	4603      	mov	r3, r0
 80098ec:	e02d      	b.n	800994a <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	889b      	ldrh	r3, [r3, #4]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fa f8c2 	bl	8003a84 <tud_descriptor_string_cb>
 8009900:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <process_get_descriptor+0x168>
 8009908:	2300      	movs	r3, #0
 800990a:	e01e      	b.n	800994a <process_get_descriptor+0x1a6>
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009914:	79f8      	ldrb	r0, [r7, #7]
 8009916:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	f000 fd35 	bl	800a388 <tud_control_xfer>
 800991e:	4603      	mov	r3, r0
 8009920:	e013      	b.n	800994a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8009922:	f7fe ff87 	bl	8008834 <tud_descriptor_device_qualifier_cb>
 8009926:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8009928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <process_get_descriptor+0x18e>
 800992e:	2300      	movs	r3, #0
 8009930:	e00b      	b.n	800994a <process_get_descriptor+0x1a6>
 8009932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800993a:	79f8      	ldrb	r0, [r7, #7]
 800993c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	f000 fd22 	bl	800a388 <tud_control_xfer>
 8009944:	4603      	mov	r3, r0
 8009946:	e000      	b.n	800994a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8009948:	2300      	movs	r3, #0
  }
}
 800994a:	4618      	mov	r0, r3
 800994c:	3750      	adds	r7, #80	@ 0x50
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	e000edf0 	.word	0xe000edf0

08009958 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b0a0      	sub	sp, #128	@ 0x80
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8009964:	2300      	movs	r3, #0
 8009966:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	785b      	ldrb	r3, [r3, #1]
 800996e:	3b02      	subs	r3, #2
 8009970:	2b04      	cmp	r3, #4
 8009972:	f200 8175 	bhi.w	8009c60 <dcd_event_handler+0x308>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <dcd_event_handler+0x24>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	08009991 	.word	0x08009991
 8009980:	08009a01 	.word	0x08009a01
 8009984:	080099bd 	.word	0x080099bd
 8009988:	080099df 	.word	0x080099df
 800998c:	08009c2d 	.word	0x08009c2d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8009990:	4aac      	ldr	r2, [pc, #688]	@ (8009c44 <dcd_event_handler+0x2ec>)
 8009992:	7813      	ldrb	r3, [r2, #0]
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 800999a:	4aaa      	ldr	r2, [pc, #680]	@ (8009c44 <dcd_event_handler+0x2ec>)
 800999c:	7813      	ldrb	r3, [r2, #0]
 800999e:	f023 0302 	bic.w	r3, r3, #2
 80099a2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80099a4:	4ba7      	ldr	r3, [pc, #668]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80099aa:	4aa6      	ldr	r2, [pc, #664]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099ac:	7813      	ldrb	r3, [r2, #0]
 80099ae:	f023 0304 	bic.w	r3, r3, #4
 80099b2:	7013      	strb	r3, [r2, #0]
      send = true;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80099ba:	e15a      	b.n	8009c72 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 80099bc:	4ba1      	ldr	r3, [pc, #644]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 814e 	beq.w	8009c68 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 80099cc:	4a9d      	ldr	r2, [pc, #628]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099ce:	7813      	ldrb	r3, [r2, #0]
 80099d0:	f043 0304 	orr.w	r3, r3, #4
 80099d4:	7013      	strb	r3, [r2, #0]
        send = true;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80099dc:	e144      	b.n	8009c68 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 80099de:	4b99      	ldr	r3, [pc, #612]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 813f 	beq.w	8009c6c <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 80099ee:	4a95      	ldr	r2, [pc, #596]	@ (8009c44 <dcd_event_handler+0x2ec>)
 80099f0:	7813      	ldrb	r3, [r2, #0]
 80099f2:	f023 0304 	bic.w	r3, r3, #4
 80099f6:	7013      	strb	r3, [r2, #0]
        send = true;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80099fe:	e135      	b.n	8009c6c <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009a06:	e039      	b.n	8009a7c <dcd_event_handler+0x124>
 8009a08:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009a0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009a14:	4b8c      	ldr	r3, [pc, #560]	@ (8009c48 <dcd_event_handler+0x2f0>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d207      	bcs.n	8009a30 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009a20:	4b8a      	ldr	r3, [pc, #552]	@ (8009c4c <dcd_event_handler+0x2f4>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a28:	015b      	lsls	r3, r3, #5
 8009a2a:	4413      	add	r3, r2
 8009a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a2e:	e00f      	b.n	8009a50 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009a30:	4b85      	ldr	r3, [pc, #532]	@ (8009c48 <dcd_event_handler+0x2f0>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	db08      	blt.n	8009a50 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009a3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a42:	4a81      	ldr	r2, [pc, #516]	@ (8009c48 <dcd_event_handler+0x2f0>)
 8009a44:	7812      	ldrb	r2, [r2, #0]
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	015b      	lsls	r3, r3, #5
 8009a4a:	4a81      	ldr	r2, [pc, #516]	@ (8009c50 <dcd_event_handler+0x2f8>)
 8009a4c:	4413      	add	r3, r2
 8009a4e:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8009a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8009a52:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8009a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <dcd_event_handler+0x11a>
 8009a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8009a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	7810      	ldrb	r0, [r2, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6852      	ldr	r2, [r2, #4]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009a72:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009a76:	3301      	adds	r3, #1
 8009a78:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009a7c:	4b72      	ldr	r3, [pc, #456]	@ (8009c48 <dcd_event_handler+0x2f0>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009a86:	429a      	cmp	r2, r3
 8009a88:	dabe      	bge.n	8009a08 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8009a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009c44 <dcd_event_handler+0x2ec>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d05a      	beq.n	8009b4e <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8009a98:	4a6a      	ldr	r2, [pc, #424]	@ (8009c44 <dcd_event_handler+0x2ec>)
 8009a9a:	7813      	ldrb	r3, [r2, #0]
 8009a9c:	f023 0304 	bic.w	r3, r3, #4
 8009aa0:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009aa2:	f107 0314 	add.w	r3, r7, #20
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	605a      	str	r2, [r3, #4]
 8009aac:	609a      	str	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	753b      	strb	r3, [r7, #20]
 8009ab4:	2305      	movs	r3, #5
 8009ab6:	757b      	strb	r3, [r7, #21]
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ac4:	4b63      	ldr	r3, [pc, #396]	@ (8009c54 <dcd_event_handler+0x2fc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ace:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009ad2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ada:	f083 0301 	eor.w	r3, r3, #1
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2000      	movs	r0, #0
 8009aea:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009aee:	3304      	adds	r3, #4
 8009af0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fde9 	bl	80086ca <tu_fifo_write>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009afe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b02:	f083 0301 	eor.w	r3, r3, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2001      	movs	r0, #1
 8009b12:	4798      	blx	r3
  }

  return success;
 8009b14:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b18:	f083 0301 	eor.w	r3, r3, #1
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d009      	beq.n	8009b36 <dcd_event_handler+0x1de>
 8009b22:	4b4d      	ldr	r3, [pc, #308]	@ (8009c58 <dcd_event_handler+0x300>)
 8009b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00c      	beq.n	8009b4c <dcd_event_handler+0x1f4>
 8009b32:	be00      	bkpt	0x0000
 8009b34:	e00a      	b.n	8009b4c <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b38:	7818      	ldrb	r0, [r3, #0]
 8009b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b44:	461a      	mov	r2, r3
 8009b46:	f7fe fe55 	bl	80087f4 <tud_event_hook_cb>
  return true;
 8009b4a:	e000      	b.n	8009b4e <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009b4c:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8009c44 <dcd_event_handler+0x2ec>)
 8009b50:	78db      	ldrb	r3, [r3, #3]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b56:	2300      	movs	r3, #0
 8009b58:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009b5c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009b60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b62:	fa22 f303 	lsr.w	r3, r2, r3
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bf14      	ite	ne
 8009b6e:	2301      	movne	r3, #1
 8009b70:	2300      	moveq	r3, #0
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d07b      	beq.n	8009c70 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	605a      	str	r2, [r3, #4]
 8009b82:	609a      	str	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	723b      	strb	r3, [r7, #8]
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	727b      	strb	r3, [r7, #9]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8009c54 <dcd_event_handler+0x2fc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009baa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009bae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009bb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009bb6:	f083 0301 	eor.w	r3, r3, #1
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bca:	3304      	adds	r3, #4
 8009bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe fd7b 	bl	80086ca <tu_fifo_write>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009bda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009bde:	f083 0301 	eor.w	r3, r3, #1
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2001      	movs	r0, #1
 8009bee:	4798      	blx	r3
  return success;
 8009bf0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009bf4:	f083 0301 	eor.w	r3, r3, #1
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <dcd_event_handler+0x2ba>
 8009bfe:	4b16      	ldr	r3, [pc, #88]	@ (8009c58 <dcd_event_handler+0x300>)
 8009c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <dcd_event_handler+0x2d0>
 8009c0e:	be00      	bkpt	0x0000
 8009c10:	e00a      	b.n	8009c28 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c14:	7818      	ldrb	r0, [r3, #0]
 8009c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c18:	785b      	ldrb	r3, [r3, #1]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009c20:	461a      	mov	r2, r3
 8009c22:	f7fe fde7 	bl	80087f4 <tud_event_hook_cb>
  return true;
 8009c26:	e000      	b.n	8009c2a <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009c28:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009c2a:	e021      	b.n	8009c70 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c5c <dcd_event_handler+0x304>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	3301      	adds	r3, #1
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <dcd_event_handler+0x304>)
 8009c38:	701a      	strb	r2, [r3, #0]
      send = true;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009c40:	e017      	b.n	8009c72 <dcd_event_handler+0x31a>
 8009c42:	bf00      	nop
 8009c44:	20001314 	.word	0x20001314
 8009c48:	20001348 	.word	0x20001348
 8009c4c:	20001344 	.word	0x20001344
 8009c50:	0800ef28 	.word	0x0800ef28
 8009c54:	2000140c 	.word	0x2000140c
 8009c58:	e000edf0 	.word	0xe000edf0
 8009c5c:	20001340 	.word	0x20001340

    default:
      send = true;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009c66:	e004      	b.n	8009c72 <dcd_event_handler+0x31a>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e002      	b.n	8009c72 <dcd_event_handler+0x31a>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <dcd_event_handler+0x31a>
      break;
 8009c70:	bf00      	nop
  }

  if (send) {
 8009c72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d049      	beq.n	8009d0e <dcd_event_handler+0x3b6>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009c84:	4b24      	ldr	r3, [pc, #144]	@ (8009d18 <dcd_event_handler+0x3c0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c9a:	f083 0301 	eor.w	r3, r3, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2000      	movs	r0, #0
 8009caa:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	3304      	adds	r3, #4
 8009cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fd09 	bl	80086ca <tu_fifo_write>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cc2:	f083 0301 	eor.w	r3, r3, #1
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	4798      	blx	r3
  return success;
 8009cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cd8:	f083 0301 	eor.w	r3, r3, #1
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <dcd_event_handler+0x39e>
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <dcd_event_handler+0x3c4>)
 8009ce4:	623b      	str	r3, [r7, #32]
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <dcd_event_handler+0x3b4>
 8009cf2:	be00      	bkpt	0x0000
 8009cf4:	e00a      	b.n	8009d0c <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf8:	7818      	ldrb	r0, [r3, #0]
 8009cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009d04:	461a      	mov	r2, r3
 8009d06:	f7fe fd75 	bl	80087f4 <tud_event_hook_cb>
  return true;
 8009d0a:	e000      	b.n	8009d0e <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009d0c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3780      	adds	r7, #128	@ 0x80
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	2000140c 	.word	0x2000140c
 8009d1c:	e000edf0 	.word	0xe000edf0

08009d20 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8009d30:	4b07      	ldr	r3, [pc, #28]	@ (8009d50 <usbd_int_set+0x30>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 f929 	bl	800af8c <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8009d3a:	e004      	b.n	8009d46 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009d3c:	4b04      	ldr	r3, [pc, #16]	@ (8009d50 <usbd_int_set+0x30>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 f94b 	bl	800afdc <dcd_int_disable>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000022d 	.word	0x2000022d

08009d54 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
 8009d5e:	4b09      	ldr	r3, [pc, #36]	@ (8009d84 <usbd_spin_lock+0x30>)
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009d66:	7afb      	ldrb	r3, [r7, #11]
 8009d68:	f083 0301 	eor.w	r3, r3, #1
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2000      	movs	r0, #0
 8009d78:	4798      	blx	r3
}
 8009d7a:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8009d7c:	bf00      	nop
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000230 	.word	0x20000230

08009d88 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
 8009d92:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <usbd_spin_unlock+0x30>)
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	f083 0301 	eor.w	r3, r3, #1
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2001      	movs	r0, #1
 8009dac:	4798      	blx	r3
}
 8009dae:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000230 	.word	0x20000230

08009dbc <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08a      	sub	sp, #40	@ 0x28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6039      	str	r1, [r7, #0]
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4603      	mov	r3, r0
 8009dca:	71fb      	strb	r3, [r7, #7]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	71bb      	strb	r3, [r7, #6]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd8:	e04d      	b.n	8009e76 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	d108      	bne.n	8009df8 <usbd_open_edpt_pair+0x3c>
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	78db      	ldrb	r3, [r3, #3]
 8009dea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	461a      	mov	r2, r3
 8009df2:	797b      	ldrb	r3, [r7, #5]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d00a      	beq.n	8009e0e <usbd_open_edpt_pair+0x52>
 8009df8:	4b23      	ldr	r3, [pc, #140]	@ (8009e88 <usbd_open_edpt_pair+0xcc>)
 8009dfa:	61bb      	str	r3, [r7, #24]
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d000      	beq.n	8009e0a <usbd_open_edpt_pair+0x4e>
 8009e08:	be00      	bkpt	0x0000
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e038      	b.n	8009e80 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	6a39      	ldr	r1, [r7, #32]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f83a 	bl	8009e8c <usbd_edpt_open>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f083 0301 	eor.w	r3, r3, #1
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <usbd_open_edpt_pair+0x7e>
 8009e24:	4b18      	ldr	r3, [pc, #96]	@ (8009e88 <usbd_open_edpt_pair+0xcc>)
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d000      	beq.n	8009e36 <usbd_open_edpt_pair+0x7a>
 8009e34:	be00      	bkpt	0x0000
 8009e36:	2300      	movs	r3, #0
 8009e38:	e022      	b.n	8009e80 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	789b      	ldrb	r3, [r3, #2]
 8009e3e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	09db      	lsrs	r3, r3, #7
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d104      	bne.n	8009e54 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	789a      	ldrb	r2, [r3, #2]
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e50:	701a      	strb	r2, [r3, #0]
 8009e52:	e003      	b.n	8009e5c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	789a      	ldrb	r2, [r3, #2]
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8009e6e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	3301      	adds	r3, #1
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e76:	79bb      	ldrb	r3, [r7, #6]
 8009e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	dbad      	blt.n	8009dda <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8009e7e:	2301      	movs	r3, #1
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3728      	adds	r7, #40	@ 0x28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000edf0 	.word	0xe000edf0

08009e8c <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8009e98:	4b1c      	ldr	r3, [pc, #112]	@ (8009f0c <usbd_edpt_open+0x80>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	789b      	ldrb	r3, [r3, #2]
 8009ea2:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	d90a      	bls.n	8009ec6 <usbd_edpt_open+0x3a>
 8009eb0:	4b17      	ldr	r3, [pc, #92]	@ (8009f10 <usbd_edpt_open+0x84>)
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d000      	beq.n	8009ec2 <usbd_edpt_open+0x36>
 8009ec0:	be00      	bkpt	0x0000
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e01d      	b.n	8009f02 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8009ec6:	4b13      	ldr	r3, [pc, #76]	@ (8009f14 <usbd_edpt_open+0x88>)
 8009ec8:	789b      	ldrb	r3, [r3, #2]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6838      	ldr	r0, [r7, #0]
 8009ed0:	f002 fbae 	bl	800c630 <tu_edpt_validate>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f083 0301 	eor.w	r3, r3, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <usbd_edpt_open+0x6a>
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f10 <usbd_edpt_open+0x84>)
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d000      	beq.n	8009ef2 <usbd_edpt_open+0x66>
 8009ef0:	be00      	bkpt	0x0000
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e005      	b.n	8009f02 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 f992 	bl	800b224 <dcd_edpt_open>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	2000022d 	.word	0x2000022d
 8009f10:	e000edf0 	.word	0xe000edf0
 8009f14:	20001314 	.word	0x20001314

08009f18 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	460a      	mov	r2, r1
 8009f22:	71fb      	strb	r3, [r7, #7]
 8009f24:	4613      	mov	r3, r2
 8009f26:	71bb      	strb	r3, [r7, #6]
 8009f28:	79bb      	ldrb	r3, [r7, #6]
 8009f2a:	73bb      	strb	r3, [r7, #14]
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f32:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f34:	75fb      	strb	r3, [r7, #23]
 8009f36:	79bb      	ldrb	r3, [r7, #6]
 8009f38:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	09db      	lsrs	r3, r3, #7
 8009f3e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009f40:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009f42:	7dfa      	ldrb	r2, [r7, #23]
 8009f44:	7dbb      	ldrb	r3, [r7, #22]
 8009f46:	0052      	lsls	r2, r2, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	3320      	adds	r3, #32
 8009f4c:	4a05      	ldr	r2, [pc, #20]	@ (8009f64 <usbd_edpt_claim+0x4c>)
 8009f4e:	4413      	add	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8009f52:	2100      	movs	r1, #0
 8009f54:	6938      	ldr	r0, [r7, #16]
 8009f56:	f002 fb07 	bl	800c568 <tu_edpt_claim>
 8009f5a:	4603      	mov	r3, r0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20001314 	.word	0x20001314

08009f68 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460a      	mov	r2, r1
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71bb      	strb	r3, [r7, #6]
 8009f78:	79bb      	ldrb	r3, [r7, #6]
 8009f7a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f82:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	79bb      	ldrb	r3, [r7, #6]
 8009f88:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	09db      	lsrs	r3, r3, #7
 8009f8e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009f90:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009f92:	7dfa      	ldrb	r2, [r7, #23]
 8009f94:	7dbb      	ldrb	r3, [r7, #22]
 8009f96:	0052      	lsls	r2, r2, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	3320      	adds	r3, #32
 8009f9c:	4a05      	ldr	r2, [pc, #20]	@ (8009fb4 <usbd_edpt_release+0x4c>)
 8009f9e:	4413      	add	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	6938      	ldr	r0, [r7, #16]
 8009fa6:	f002 fb19 	bl	800c5dc <tu_edpt_release>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20001314 	.word	0x20001314

08009fb8 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	603a      	str	r2, [r7, #0]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	71fb      	strb	r3, [r7, #7]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	71bb      	strb	r3, [r7, #6]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8009fce:	4b32      	ldr	r3, [pc, #200]	@ (800a098 <usbd_edpt_xfer+0xe0>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	71fb      	strb	r3, [r7, #7]
 8009fd4:	79bb      	ldrb	r3, [r7, #6]
 8009fd6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009fd8:	7abb      	ldrb	r3, [r7, #10]
 8009fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fde:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009fe0:	75fb      	strb	r3, [r7, #23]
 8009fe2:	79bb      	ldrb	r3, [r7, #6]
 8009fe4:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	09db      	lsrs	r3, r3, #7
 8009fea:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009fec:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8009fee:	7dfa      	ldrb	r2, [r7, #23]
 8009ff0:	7dbb      	ldrb	r3, [r7, #22]
 8009ff2:	492a      	ldr	r1, [pc, #168]	@ (800a09c <usbd_edpt_xfer+0xe4>)
 8009ff4:	0052      	lsls	r2, r2, #1
 8009ff6:	440a      	add	r2, r1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3320      	adds	r3, #32
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00a      	beq.n	800a01e <usbd_edpt_xfer+0x66>
 800a008:	4b25      	ldr	r3, [pc, #148]	@ (800a0a0 <usbd_edpt_xfer+0xe8>)
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d000      	beq.n	800a01a <usbd_edpt_xfer+0x62>
 800a018:	be00      	bkpt	0x0000
 800a01a:	2300      	movs	r3, #0
 800a01c:	e038      	b.n	800a090 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a01e:	7dfa      	ldrb	r2, [r7, #23]
 800a020:	7dbb      	ldrb	r3, [r7, #22]
 800a022:	491e      	ldr	r1, [pc, #120]	@ (800a09c <usbd_edpt_xfer+0xe4>)
 800a024:	0052      	lsls	r2, r2, #1
 800a026:	440a      	add	r2, r1
 800a028:	4413      	add	r3, r2
 800a02a:	f103 0220 	add.w	r2, r3, #32
 800a02e:	7813      	ldrb	r3, [r2, #0]
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a036:	88bb      	ldrh	r3, [r7, #4]
 800a038:	79b9      	ldrb	r1, [r7, #6]
 800a03a:	79f8      	ldrb	r0, [r7, #7]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	f001 f9b5 	bl	800b3ac <dcd_edpt_xfer>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <usbd_edpt_xfer+0x94>
    return true;
 800a048:	2301      	movs	r3, #1
 800a04a:	e021      	b.n	800a090 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a04c:	7dfa      	ldrb	r2, [r7, #23]
 800a04e:	7dbb      	ldrb	r3, [r7, #22]
 800a050:	4912      	ldr	r1, [pc, #72]	@ (800a09c <usbd_edpt_xfer+0xe4>)
 800a052:	0052      	lsls	r2, r2, #1
 800a054:	440a      	add	r2, r1
 800a056:	4413      	add	r3, r2
 800a058:	f103 0220 	add.w	r2, r3, #32
 800a05c:	7813      	ldrb	r3, [r2, #0]
 800a05e:	f023 0301 	bic.w	r3, r3, #1
 800a062:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a064:	7dfa      	ldrb	r2, [r7, #23]
 800a066:	7dbb      	ldrb	r3, [r7, #22]
 800a068:	490c      	ldr	r1, [pc, #48]	@ (800a09c <usbd_edpt_xfer+0xe4>)
 800a06a:	0052      	lsls	r2, r2, #1
 800a06c:	440a      	add	r2, r1
 800a06e:	4413      	add	r3, r2
 800a070:	f103 0220 	add.w	r2, r3, #32
 800a074:	7813      	ldrb	r3, [r2, #0]
 800a076:	f023 0304 	bic.w	r3, r3, #4
 800a07a:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a07c:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <usbd_edpt_xfer+0xe8>)
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d000      	beq.n	800a08e <usbd_edpt_xfer+0xd6>
 800a08c:	be00      	bkpt	0x0000
    return false;
 800a08e:	2300      	movs	r3, #0
  }
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	2000022d 	.word	0x2000022d
 800a09c:	20001314 	.word	0x20001314
 800a0a0:	e000edf0 	.word	0xe000edf0

0800a0a4 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	71fb      	strb	r3, [r7, #7]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	71bb      	strb	r3, [r7, #6]
 800a0b4:	79bb      	ldrb	r3, [r7, #6]
 800a0b6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a0b8:	7b3b      	ldrb	r3, [r7, #12]
 800a0ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0be:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a0c0:	73fb      	strb	r3, [r7, #15]
 800a0c2:	79bb      	ldrb	r3, [r7, #6]
 800a0c4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a0c6:	7b7b      	ldrb	r3, [r7, #13]
 800a0c8:	09db      	lsrs	r3, r3, #7
 800a0ca:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a0cc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a0ce:	7bfa      	ldrb	r2, [r7, #15]
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	490a      	ldr	r1, [pc, #40]	@ (800a0fc <usbd_edpt_busy+0x58>)
 800a0d4:	0052      	lsls	r2, r2, #1
 800a0d6:	440a      	add	r2, r1
 800a0d8:	4413      	add	r3, r2
 800a0da:	3320      	adds	r3, #32
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bf14      	ite	ne
 800a0e8:	2301      	movne	r3, #1
 800a0ea:	2300      	moveq	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20001314 	.word	0x20001314

0800a100 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	460a      	mov	r2, r1
 800a10a:	71fb      	strb	r3, [r7, #7]
 800a10c:	4613      	mov	r3, r2
 800a10e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a110:	4b18      	ldr	r3, [pc, #96]	@ (800a174 <usbd_edpt_stall+0x74>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	71fb      	strb	r3, [r7, #7]
 800a116:	79bb      	ldrb	r3, [r7, #6]
 800a118:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a11a:	7b3b      	ldrb	r3, [r7, #12]
 800a11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a120:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a122:	73fb      	strb	r3, [r7, #15]
 800a124:	79bb      	ldrb	r3, [r7, #6]
 800a126:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a128:	7b7b      	ldrb	r3, [r7, #13]
 800a12a:	09db      	lsrs	r3, r3, #7
 800a12c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a12e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a130:	79ba      	ldrb	r2, [r7, #6]
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f001 f988 	bl	800b44c <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a13c:	7bfa      	ldrb	r2, [r7, #15]
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	490d      	ldr	r1, [pc, #52]	@ (800a178 <usbd_edpt_stall+0x78>)
 800a142:	0052      	lsls	r2, r2, #1
 800a144:	440a      	add	r2, r1
 800a146:	4413      	add	r3, r2
 800a148:	f103 0220 	add.w	r2, r3, #32
 800a14c:	7813      	ldrb	r3, [r2, #0]
 800a14e:	f043 0302 	orr.w	r3, r3, #2
 800a152:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a154:	7bfa      	ldrb	r2, [r7, #15]
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	4907      	ldr	r1, [pc, #28]	@ (800a178 <usbd_edpt_stall+0x78>)
 800a15a:	0052      	lsls	r2, r2, #1
 800a15c:	440a      	add	r2, r1
 800a15e:	4413      	add	r3, r2
 800a160:	f103 0220 	add.w	r2, r3, #32
 800a164:	7813      	ldrb	r3, [r2, #0]
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	7013      	strb	r3, [r2, #0]
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	2000022d 	.word	0x2000022d
 800a178:	20001314 	.word	0x20001314

0800a17c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	460a      	mov	r2, r1
 800a186:	71fb      	strb	r3, [r7, #7]
 800a188:	4613      	mov	r3, r2
 800a18a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a18c:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <usbd_edpt_clear_stall+0x74>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	71fb      	strb	r3, [r7, #7]
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a196:	7b3b      	ldrb	r3, [r7, #12]
 800a198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a19c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	79bb      	ldrb	r3, [r7, #6]
 800a1a2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a1a4:	7b7b      	ldrb	r3, [r7, #13]
 800a1a6:	09db      	lsrs	r3, r3, #7
 800a1a8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a1aa:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a1ac:	79ba      	ldrb	r2, [r7, #6]
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 f980 	bl	800b4b8 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a1b8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	490d      	ldr	r1, [pc, #52]	@ (800a1f4 <usbd_edpt_clear_stall+0x78>)
 800a1be:	0052      	lsls	r2, r2, #1
 800a1c0:	440a      	add	r2, r1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f103 0220 	add.w	r2, r3, #32
 800a1c8:	7813      	ldrb	r3, [r2, #0]
 800a1ca:	f023 0302 	bic.w	r3, r3, #2
 800a1ce:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a1d0:	7bfa      	ldrb	r2, [r7, #15]
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	4907      	ldr	r1, [pc, #28]	@ (800a1f4 <usbd_edpt_clear_stall+0x78>)
 800a1d6:	0052      	lsls	r2, r2, #1
 800a1d8:	440a      	add	r2, r1
 800a1da:	4413      	add	r3, r2
 800a1dc:	f103 0220 	add.w	r2, r3, #32
 800a1e0:	7813      	ldrb	r3, [r2, #0]
 800a1e2:	f023 0301 	bic.w	r3, r3, #1
 800a1e6:	7013      	strb	r3, [r2, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	2000022d 	.word	0x2000022d
 800a1f4:	20001314 	.word	0x20001314

0800a1f8 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	460a      	mov	r2, r1
 800a202:	71fb      	strb	r3, [r7, #7]
 800a204:	4613      	mov	r3, r2
 800a206:	71bb      	strb	r3, [r7, #6]
 800a208:	79bb      	ldrb	r3, [r7, #6]
 800a20a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a20c:	7b3b      	ldrb	r3, [r7, #12]
 800a20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a212:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a214:	73fb      	strb	r3, [r7, #15]
 800a216:	79bb      	ldrb	r3, [r7, #6]
 800a218:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a21a:	7b7b      	ldrb	r3, [r7, #13]
 800a21c:	09db      	lsrs	r3, r3, #7
 800a21e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a220:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a222:	7bfa      	ldrb	r2, [r7, #15]
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	490a      	ldr	r1, [pc, #40]	@ (800a250 <usbd_edpt_stalled+0x58>)
 800a228:	0052      	lsls	r2, r2, #1
 800a22a:	440a      	add	r2, r1
 800a22c:	4413      	add	r3, r2
 800a22e:	3320      	adds	r3, #32
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bf14      	ite	ne
 800a23c:	2301      	movne	r3, #1
 800a23e:	2300      	moveq	r3, #0
 800a240:	b2db      	uxtb	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20001314 	.word	0x20001314

0800a254 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	6039      	str	r1, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	6039      	str	r1, [r7, #0]
 800a276:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <status_stage_xact+0x1e>
 800a286:	2300      	movs	r3, #0
 800a288:	e000      	b.n	800a28c <status_stage_xact+0x20>
 800a28a:	2380      	movs	r3, #128	@ 0x80
 800a28c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a28e:	7bf9      	ldrb	r1, [r7, #15]
 800a290:	79f8      	ldrb	r0, [r7, #7]
 800a292:	2300      	movs	r3, #0
 800a294:	2200      	movs	r2, #0
 800a296:	f7ff fe8f 	bl	8009fb8 <usbd_edpt_xfer>
 800a29a:	4603      	mov	r3, r0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e0 <tud_control_status+0x3c>)
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	6851      	ldr	r1, [r2, #4]
 800a2b8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a2ba:	4b09      	ldr	r3, [pc, #36]	@ (800a2e0 <tud_control_status+0x3c>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <tud_control_status+0x3c>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a2c6:	4b06      	ldr	r3, [pc, #24]	@ (800a2e0 <tud_control_status+0x3c>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff ffcb 	bl	800a26c <status_stage_xact>
 800a2d6:	4603      	mov	r3, r0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20001410 	.word	0x20001410

0800a2e4 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a2ee:	4b24      	ldr	r3, [pc, #144]	@ (800a380 <data_stage_xact+0x9c>)
 800a2f0:	899a      	ldrh	r2, [r3, #12]
 800a2f2:	4b23      	ldr	r3, [pc, #140]	@ (800a380 <data_stage_xact+0x9c>)
 800a2f4:	89db      	ldrh	r3, [r3, #14]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	837b      	strh	r3, [r7, #26]
 800a2fc:	2340      	movs	r3, #64	@ 0x40
 800a2fe:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a300:	8b7a      	ldrh	r2, [r7, #26]
 800a302:	8b3b      	ldrh	r3, [r7, #24]
 800a304:	4293      	cmp	r3, r2
 800a306:	bf28      	it	cs
 800a308:	4613      	movcs	r3, r2
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a30e:	2300      	movs	r3, #0
 800a310:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a312:	4b1b      	ldr	r3, [pc, #108]	@ (800a380 <data_stage_xact+0x9c>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01e      	beq.n	800a35e <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a320:	2380      	movs	r3, #128	@ 0x80
 800a322:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a324:	8bbb      	ldrh	r3, [r7, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d019      	beq.n	800a35e <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a32a:	4b15      	ldr	r3, [pc, #84]	@ (800a380 <data_stage_xact+0x9c>)
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	8bbb      	ldrh	r3, [r7, #28]
 800a330:	4914      	ldr	r1, [pc, #80]	@ (800a384 <data_stage_xact+0xa0>)
 800a332:	6179      	str	r1, [r7, #20]
 800a334:	2140      	movs	r1, #64	@ 0x40
 800a336:	6139      	str	r1, [r7, #16]
 800a338:	60fa      	str	r2, [r7, #12]
 800a33a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	429a      	cmp	r2, r3
 800a342:	d202      	bcs.n	800a34a <data_stage_xact+0x66>
    return -1;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295
 800a348:	e005      	b.n	800a356 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	68f9      	ldr	r1, [r7, #12]
 800a34e:	6978      	ldr	r0, [r7, #20]
 800a350:	f002 fd0b 	bl	800cd6a <memcpy>
  return 0;
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <data_stage_xact+0x7a>
 800a35a:	2300      	movs	r3, #0
 800a35c:	e00b      	b.n	800a376 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a35e:	8bbb      	ldrh	r3, [r7, #28]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <data_stage_xact+0x84>
 800a364:	4a07      	ldr	r2, [pc, #28]	@ (800a384 <data_stage_xact+0xa0>)
 800a366:	e000      	b.n	800a36a <data_stage_xact+0x86>
 800a368:	2200      	movs	r2, #0
 800a36a:	8bbb      	ldrh	r3, [r7, #28]
 800a36c:	7ff9      	ldrb	r1, [r7, #31]
 800a36e:	79f8      	ldrb	r0, [r7, #7]
 800a370:	f7ff fe22 	bl	8009fb8 <usbd_edpt_xfer>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3720      	adds	r7, #32
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001410 	.word	0x20001410
 800a384:	20001424 	.word	0x20001424

0800a388 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	461a      	mov	r2, r3
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	4613      	mov	r3, r2
 800a39a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a39c:	4b30      	ldr	r3, [pc, #192]	@ (800a460 <tud_control_xfer+0xd8>)
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	6810      	ldr	r0, [r2, #0]
 800a3a2:	6851      	ldr	r1, [r2, #4]
 800a3a4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a3a6:	4a2e      	ldr	r2, [pc, #184]	@ (800a460 <tud_control_xfer+0xd8>)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a3ac:	4b2c      	ldr	r3, [pc, #176]	@ (800a460 <tud_control_xfer+0xd8>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	88db      	ldrh	r3, [r3, #6]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	89bb      	ldrh	r3, [r7, #12]
 800a3ba:	827b      	strh	r3, [r7, #18]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a3c0:	8a7a      	ldrh	r2, [r7, #18]
 800a3c2:	8a3b      	ldrh	r3, [r7, #16]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bf28      	it	cs
 800a3c8:	4613      	movcs	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	4b24      	ldr	r3, [pc, #144]	@ (800a460 <tud_control_xfer+0xd8>)
 800a3ce:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	88db      	ldrh	r3, [r3, #6]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d026      	beq.n	800a428 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a3da:	4b21      	ldr	r3, [pc, #132]	@ (800a460 <tud_control_xfer+0xd8>)
 800a3dc:	899b      	ldrh	r3, [r3, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <tud_control_xfer+0x76>
 800a3e8:	4b1e      	ldr	r3, [pc, #120]	@ (800a464 <tud_control_xfer+0xdc>)
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d000      	beq.n	800a3fa <tud_control_xfer+0x72>
 800a3f8:	be00      	bkpt	0x0000
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e02b      	b.n	800a456 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff ff6f 	bl	800a2e4 <data_stage_xact>
 800a406:	4603      	mov	r3, r0
 800a408:	f083 0301 	eor.w	r3, r3, #1
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d020      	beq.n	800a454 <tud_control_xfer+0xcc>
 800a412:	4b14      	ldr	r3, [pc, #80]	@ (800a464 <tud_control_xfer+0xdc>)
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d000      	beq.n	800a424 <tud_control_xfer+0x9c>
 800a422:	be00      	bkpt	0x0000
 800a424:	2300      	movs	r3, #0
 800a426:	e016      	b.n	800a456 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff ff1d 	bl	800a26c <status_stage_xact>
 800a432:	4603      	mov	r3, r0
 800a434:	f083 0301 	eor.w	r3, r3, #1
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <tud_control_xfer+0xcc>
 800a43e:	4b09      	ldr	r3, [pc, #36]	@ (800a464 <tud_control_xfer+0xdc>)
 800a440:	61fb      	str	r3, [r7, #28]
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d000      	beq.n	800a450 <tud_control_xfer+0xc8>
 800a44e:	be00      	bkpt	0x0000
 800a450:	2300      	movs	r3, #0
 800a452:	e000      	b.n	800a456 <tud_control_xfer+0xce>
  }

  return true;
 800a454:	2301      	movs	r3, #1
}
 800a456:	4618      	mov	r0, r3
 800a458:	3720      	adds	r7, #32
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20001410 	.word	0x20001410
 800a464:	e000edf0 	.word	0xe000edf0

0800a468 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a46c:	2214      	movs	r2, #20
 800a46e:	2100      	movs	r1, #0
 800a470:	4802      	ldr	r0, [pc, #8]	@ (800a47c <usbd_control_reset+0x14>)
 800a472:	f002 fba2 	bl	800cbba <memset>
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20001410 	.word	0x20001410

0800a480 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a488:	4a04      	ldr	r2, [pc, #16]	@ (800a49c <usbd_control_set_complete_callback+0x1c>)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6113      	str	r3, [r2, #16]
}
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	20001410 	.word	0x20001410

0800a4a0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a4a8:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <usbd_control_set_request+0x30>)
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6810      	ldr	r0, [r2, #0]
 800a4ae:	6851      	ldr	r1, [r2, #4]
 800a4b0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a4b2:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <usbd_control_set_request+0x30>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a4b8:	4b05      	ldr	r3, [pc, #20]	@ (800a4d0 <usbd_control_set_request+0x30>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a4be:	4b04      	ldr	r3, [pc, #16]	@ (800a4d0 <usbd_control_set_request+0x30>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	819a      	strh	r2, [r3, #12]
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	20001410 	.word	0x20001410

0800a4d4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	4603      	mov	r3, r0
 800a4de:	71fb      	strb	r3, [r7, #7]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	71bb      	strb	r3, [r7, #6]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	717b      	strb	r3, [r7, #5]
 800a4e8:	79bb      	ldrb	r3, [r7, #6]
 800a4ea:	73fb      	strb	r3, [r7, #15]
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	09db      	lsrs	r3, r3, #7
 800a4f0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a4f2:	4a4f      	ldr	r2, [pc, #316]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a4f4:	7812      	ldrb	r2, [r2, #0]
 800a4f6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a4fa:	b2d2      	uxtb	r2, r2
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d01e      	beq.n	800a53e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <usbd_control_xfer_cb+0x48>
 800a506:	4b4b      	ldr	r3, [pc, #300]	@ (800a634 <usbd_control_xfer_cb+0x160>)
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d000      	beq.n	800a518 <usbd_control_xfer_cb+0x44>
 800a516:	be00      	bkpt	0x0000
 800a518:	2300      	movs	r3, #0
 800a51a:	e084      	b.n	800a626 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	4944      	ldr	r1, [pc, #272]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fe97 	bl	800a254 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a526:	4b42      	ldr	r3, [pc, #264]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d005      	beq.n	800a53a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a52e:	4b40      	ldr	r3, [pc, #256]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	79f8      	ldrb	r0, [r7, #7]
 800a534:	4a3e      	ldr	r2, [pc, #248]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a536:	2103      	movs	r1, #3
 800a538:	4798      	blx	r3
    }

    return true;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e073      	b.n	800a626 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a53e:	4b3c      	ldr	r3, [pc, #240]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10c      	bne.n	800a566 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a54c:	4b38      	ldr	r3, [pc, #224]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <usbd_control_xfer_cb+0x84>
 800a554:	2300      	movs	r3, #0
 800a556:	e066      	b.n	800a626 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a558:	4b35      	ldr	r3, [pc, #212]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	4936      	ldr	r1, [pc, #216]	@ (800a638 <usbd_control_xfer_cb+0x164>)
 800a560:	4618      	mov	r0, r3
 800a562:	f002 fc02 	bl	800cd6a <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a566:	4b32      	ldr	r3, [pc, #200]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a568:	89da      	ldrh	r2, [r3, #14]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	4413      	add	r3, r2
 800a570:	b29a      	uxth	r2, r3
 800a572:	4b2f      	ldr	r3, [pc, #188]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a574:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a576:	4b2e      	ldr	r3, [pc, #184]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a578:	689a      	ldr	r2, [r3, #8]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	4413      	add	r3, r2
 800a57e:	4a2c      	ldr	r2, [pc, #176]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a580:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a582:	4b2b      	ldr	r3, [pc, #172]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a584:	88da      	ldrh	r2, [r3, #6]
 800a586:	4b2a      	ldr	r3, [pc, #168]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a588:	89db      	ldrh	r3, [r3, #14]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d002      	beq.n	800a594 <usbd_control_xfer_cb+0xc0>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b3f      	cmp	r3, #63	@ 0x3f
 800a592:	d831      	bhi.n	800a5f8 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a594:	2301      	movs	r3, #1
 800a596:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a598:	4b25      	ldr	r3, [pc, #148]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d007      	beq.n	800a5b0 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a5a0:	4b23      	ldr	r3, [pc, #140]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	79f8      	ldrb	r0, [r7, #7]
 800a5a6:	4a22      	ldr	r2, [pc, #136]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	4798      	blx	r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a5b0:	7ffb      	ldrb	r3, [r7, #31]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d015      	beq.n	800a5e2 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	491d      	ldr	r1, [pc, #116]	@ (800a630 <usbd_control_xfer_cb+0x15c>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fe56 	bl	800a26c <status_stage_xact>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f083 0301 	eor.w	r3, r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d02a      	beq.n	800a622 <usbd_control_xfer_cb+0x14e>
 800a5cc:	4b19      	ldr	r3, [pc, #100]	@ (800a634 <usbd_control_xfer_cb+0x160>)
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d000      	beq.n	800a5de <usbd_control_xfer_cb+0x10a>
 800a5dc:	be00      	bkpt	0x0000
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e021      	b.n	800a626 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 ff30 	bl	800b44c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2180      	movs	r1, #128	@ 0x80
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 ff2b 	bl	800b44c <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a5f6:	e014      	b.n	800a622 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fe72 	bl	800a2e4 <data_stage_xact>
 800a600:	4603      	mov	r3, r0
 800a602:	f083 0301 	eor.w	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00b      	beq.n	800a624 <usbd_control_xfer_cb+0x150>
 800a60c:	4b09      	ldr	r3, [pc, #36]	@ (800a634 <usbd_control_xfer_cb+0x160>)
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d000      	beq.n	800a61e <usbd_control_xfer_cb+0x14a>
 800a61c:	be00      	bkpt	0x0000
 800a61e:	2300      	movs	r3, #0
 800a620:	e001      	b.n	800a626 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a622:	bf00      	nop
  }

  return true;
 800a624:	2301      	movs	r3, #1
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20001410 	.word	0x20001410
 800a634:	e000edf0 	.word	0xe000edf0
 800a638:	20001424 	.word	0x20001424

0800a63c <__NVIC_EnableIRQ>:
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	db0b      	blt.n	800a666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	f003 021f 	and.w	r2, r3, #31
 800a654:	4907      	ldr	r1, [pc, #28]	@ (800a674 <__NVIC_EnableIRQ+0x38>)
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	2001      	movs	r0, #1
 800a65e:	fa00 f202 	lsl.w	r2, r0, r2
 800a662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	e000e100 	.word	0xe000e100

0800a678 <__NVIC_DisableIRQ>:
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	db12      	blt.n	800a6b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	f003 021f 	and.w	r2, r3, #31
 800a690:	490a      	ldr	r1, [pc, #40]	@ (800a6bc <__NVIC_DisableIRQ+0x44>)
 800a692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a696:	095b      	lsrs	r3, r3, #5
 800a698:	2001      	movs	r0, #1
 800a69a:	fa00 f202 	lsl.w	r2, r0, r2
 800a69e:	3320      	adds	r3, #32
 800a6a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a6a4:	f3bf 8f4f 	dsb	sy
}
 800a6a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a6aa:	f3bf 8f6f 	isb	sy
}
 800a6ae:	bf00      	nop
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	e000e100 	.word	0xe000e100

0800a6c0 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a6ce:	7afb      	ldrb	r3, [r7, #11]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a6d8:	7afb      	ldrb	r3, [r7, #11]
 800a6da:	4a13      	ldr	r2, [pc, #76]	@ (800a728 <dma_setup_prepare+0x68>)
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	4413      	add	r3, r2
 800a6e0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a6e2:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e8:	4a10      	ldr	r2, [pc, #64]	@ (800a72c <dma_setup_prepare+0x6c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d904      	bls.n	800a6f8 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	db10      	blt.n	800a71a <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a0d      	ldr	r2, [pc, #52]	@ (800a730 <dma_setup_prepare+0x70>)
 800a6fc:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800a700:	4a0c      	ldr	r2, [pc, #48]	@ (800a734 <dma_setup_prepare+0x74>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a70e:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800a718:	e000      	b.n	800a71c <dma_setup_prepare+0x5c>
      return;
 800a71a:	bf00      	nop
}
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	0800ef68 	.word	0x0800ef68
 800a72c:	4f543009 	.word	0x4f543009
 800a730:	20080008 	.word	0x20080008
 800a734:	200014ec 	.word	0x200014ec

0800a738 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800a738:	b480      	push	{r7}
 800a73a:	b091      	sub	sp, #68	@ 0x44
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
 800a742:	460b      	mov	r3, r1
 800a744:	71bb      	strb	r3, [r7, #6]
 800a746:	4613      	mov	r3, r2
 800a748:	80bb      	strh	r3, [r7, #4]
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a74e:	7e7b      	ldrb	r3, [r7, #25]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <dfifo_alloc+0x20>
    rhport = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a758:	7e7b      	ldrb	r3, [r7, #25]
 800a75a:	4a65      	ldr	r2, [pc, #404]	@ (800a8f0 <dfifo_alloc+0x1b8>)
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	4413      	add	r3, r2
 800a760:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	4a61      	ldr	r2, [pc, #388]	@ (800a8f0 <dfifo_alloc+0x1b8>)
 800a76a:	4413      	add	r3, r2
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800a76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a770:	7a1b      	ldrb	r3, [r3, #8]
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a776:	79bb      	ldrb	r3, [r7, #6]
 800a778:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a77a:	7ebb      	ldrb	r3, [r7, #26]
 800a77c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a780:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a782:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800a786:	79bb      	ldrb	r3, [r7, #6]
 800a788:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a78a:	7efb      	ldrb	r3, [r7, #27]
 800a78c:	09db      	lsrs	r3, r3, #7
 800a78e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a790:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800a794:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800a798:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d30a      	bcc.n	800a7b6 <dfifo_alloc+0x7e>
 800a7a0:	4b54      	ldr	r3, [pc, #336]	@ (800a8f4 <dfifo_alloc+0x1bc>)
 800a7a2:	61fb      	str	r3, [r7, #28]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d000      	beq.n	800a7b2 <dfifo_alloc+0x7a>
 800a7b0:	be00      	bkpt	0x0000
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e095      	b.n	800a8e2 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800a7b6:	88bb      	ldrh	r3, [r7, #4]
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	1e5a      	subs	r2, r3, #1
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800a7ce:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d12a      	bne.n	800a82c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a7d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	81fb      	strh	r3, [r7, #14]
 800a7de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a7e2:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	089b      	lsrs	r3, r3, #2
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	f103 0208 	add.w	r2, r3, #8
 800a7ee:	7b7b      	ldrb	r3, [r7, #13]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a7f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a800:	429a      	cmp	r2, r3
 800a802:	d26d      	bcs.n	800a8e0 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800a804:	4b3c      	ldr	r3, [pc, #240]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a806:	889b      	ldrh	r3, [r3, #4]
 800a808:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d90a      	bls.n	800a824 <dfifo_alloc+0xec>
 800a80e:	4b39      	ldr	r3, [pc, #228]	@ (800a8f4 <dfifo_alloc+0x1bc>)
 800a810:	623b      	str	r3, [r7, #32]
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d000      	beq.n	800a820 <dfifo_alloc+0xe8>
 800a81e:	be00      	bkpt	0x0000
 800a820:	2300      	movs	r3, #0
 800a822:	e05e      	b.n	800a8e2 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800a824:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	625a      	str	r2, [r3, #36]	@ 0x24
 800a82a:	e059      	b.n	800a8e0 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800a82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82e:	7a5b      	ldrb	r3, [r3, #9]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d016      	beq.n	800a862 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800a834:	4b30      	ldr	r3, [pc, #192]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a836:	799a      	ldrb	r2, [r3, #6]
 800a838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83a:	7a5b      	ldrb	r3, [r3, #9]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d30a      	bcc.n	800a856 <dfifo_alloc+0x11e>
 800a840:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f4 <dfifo_alloc+0x1bc>)
 800a842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d000      	beq.n	800a852 <dfifo_alloc+0x11a>
 800a850:	be00      	bkpt	0x0000
 800a852:	2300      	movs	r3, #0
 800a854:	e045      	b.n	800a8e2 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800a856:	4b28      	ldr	r3, [pc, #160]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a858:	799b      	ldrb	r3, [r3, #6]
 800a85a:	3301      	adds	r3, #1
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	4b26      	ldr	r3, [pc, #152]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a860:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800a86e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800a874:	4b20      	ldr	r3, [pc, #128]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a876:	889b      	ldrh	r3, [r3, #4]
 800a878:	4619      	mov	r1, r3
 800a87a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a880:	4413      	add	r3, r2
 800a882:	4299      	cmp	r1, r3
 800a884:	d20a      	bcs.n	800a89c <dfifo_alloc+0x164>
 800a886:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f4 <dfifo_alloc+0x1bc>)
 800a888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d000      	beq.n	800a898 <dfifo_alloc+0x160>
 800a896:	be00      	bkpt	0x0000
 800a898:	2300      	movs	r3, #0
 800a89a:	e022      	b.n	800a8e2 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800a89c:	4b16      	ldr	r3, [pc, #88]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a89e:	889a      	ldrh	r2, [r3, #4]
 800a8a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	4b14      	ldr	r3, [pc, #80]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a8a8:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800a8aa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d108      	bne.n	800a8c4 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800a8b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8b4:	041b      	lsls	r3, r3, #16
 800a8b6:	4a10      	ldr	r2, [pc, #64]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a8b8:	8892      	ldrh	r2, [r2, #4]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8c2:	e00d      	b.n	800a8e0 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800a8c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8c6:	041b      	lsls	r3, r3, #16
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a8f8 <dfifo_alloc+0x1c0>)
 800a8ca:	8892      	ldrh	r2, [r2, #4]
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8d8:	3340      	adds	r3, #64	@ 0x40
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800a8e0:	2301      	movs	r3, #1
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3744      	adds	r7, #68	@ 0x44
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	0800ef68 	.word	0x0800ef68
 800a8f4:	e000edf0 	.word	0xe000edf0
 800a8f8:	200014e4 	.word	0x200014e4

0800a8fc <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af00      	add	r7, sp, #0
 800a902:	4603      	mov	r3, r0
 800a904:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	4a27      	ldr	r2, [pc, #156]	@ (800a9a8 <dfifo_device_init+0xac>)
 800a90c:	4413      	add	r3, r2
 800a90e:	61fb      	str	r3, [r7, #28]
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a914:	7b3b      	ldrb	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <dfifo_device_init+0x22>
    rhport = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a91e:	7b3b      	ldrb	r3, [r7, #12]
 800a920:	4a21      	ldr	r2, [pc, #132]	@ (800a9a8 <dfifo_device_init+0xac>)
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	4413      	add	r3, r2
 800a926:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a928:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	7a1b      	ldrb	r3, [r3, #8]
 800a92e:	2240      	movs	r2, #64	@ 0x40
 800a930:	81fa      	strh	r2, [r7, #14]
 800a932:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	089b      	lsrs	r3, r3, #2
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f103 0208 	add.w	r2, r3, #8
 800a93e:	7b7b      	ldrb	r3, [r7, #13]
 800a940:	4413      	add	r3, r2
 800a942:	b29b      	uxth	r3, r3
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a948:	461a      	mov	r2, r3
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a956:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a958:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800a95a:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	089b      	lsrs	r3, r3, #2
 800a962:	b29a      	uxth	r2, r3
 800a964:	4b11      	ldr	r3, [pc, #68]	@ (800a9ac <dfifo_device_init+0xb0>)
 800a966:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d009      	beq.n	800a982 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800a96e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9ac <dfifo_device_init+0xb0>)
 800a970:	889a      	ldrh	r2, [r3, #4]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	7a1b      	ldrb	r3, [r3, #8]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	b29b      	uxth	r3, r3
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9ac <dfifo_device_init+0xb0>)
 800a980:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800a982:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <dfifo_device_init+0xb0>)
 800a984:	889b      	ldrh	r3, [r3, #4]
 800a986:	461a      	mov	r2, r3
 800a988:	4613      	mov	r3, r2
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	441a      	add	r2, r3
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	2240      	movs	r2, #64	@ 0x40
 800a996:	2180      	movs	r1, #128	@ 0x80
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fecd 	bl	800a738 <dfifo_alloc>
}
 800a99e:	bf00      	nop
 800a9a0:	3720      	adds	r7, #32
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800ef68 	.word	0x0800ef68
 800a9ac:	200014e4 	.word	0x200014e4

0800a9b0 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800a9b0:	b480      	push	{r7}
 800a9b2:	b08b      	sub	sp, #44	@ 0x2c
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	6039      	str	r1, [r7, #0]
 800a9ba:	71fb      	strb	r3, [r7, #7]
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a9c0:	7c7b      	ldrb	r3, [r7, #17]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <edpt_activate+0x1a>
    rhport = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a9ca:	7c7b      	ldrb	r3, [r7, #17]
 800a9cc:	4a45      	ldr	r2, [pc, #276]	@ (800aae4 <edpt_activate+0x134>)
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	4413      	add	r3, r2
 800a9d2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	789b      	ldrb	r3, [r3, #2]
 800a9da:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a9dc:	7cbb      	ldrb	r3, [r7, #18]
 800a9de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	789b      	ldrb	r3, [r3, #2]
 800a9ec:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a9ee:	7cfb      	ldrb	r3, [r7, #19]
 800a9f0:	09db      	lsrs	r3, r3, #7
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800a9f8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a9fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa00:	0052      	lsls	r2, r2, #1
 800aa02:	4413      	add	r3, r2
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	4a38      	ldr	r2, [pc, #224]	@ (800aae8 <edpt_activate+0x138>)
 800aa08:	4413      	add	r3, r2
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	889b      	ldrh	r3, [r3, #4]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa1a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	799a      	ldrb	r2, [r3, #6]
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	895b      	ldrh	r3, [r3, #10]
 800aa30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	89bb      	ldrh	r3, [r7, #12]
 800aa38:	f362 030a 	bfi	r3, r2, #0, #11
 800aa3c:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800aa3e:	7b7b      	ldrb	r3, [r7, #13]
 800aa40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa44:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	78db      	ldrb	r3, [r3, #3]
 800aa4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f362 0383 	bfi	r3, r2, #2, #2
 800aa56:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	78db      	ldrb	r3, [r3, #3]
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d003      	beq.n	800aa6e <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	f043 0310 	orr.w	r3, r3, #16
 800aa6c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800aa6e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d108      	bne.n	800aa88 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800aa76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	89fb      	ldrh	r3, [r7, #14]
 800aa82:	f362 1389 	bfi	r3, r2, #6, #4
 800aa86:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800aa88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa9c:	0112      	lsls	r2, r2, #4
 800aa9e:	4413      	add	r3, r2
 800aaa0:	3348      	adds	r3, #72	@ 0x48
 800aaa2:	015b      	lsls	r3, r3, #5
 800aaa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa6:	4413      	add	r3, r2
 800aaa8:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800aab6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aaba:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800aabe:	2901      	cmp	r1, #1
 800aac0:	d101      	bne.n	800aac6 <edpt_activate+0x116>
 800aac2:	2100      	movs	r1, #0
 800aac4:	e000      	b.n	800aac8 <edpt_activate+0x118>
 800aac6:	2110      	movs	r1, #16
 800aac8:	440b      	add	r3, r1
 800aaca:	2101      	movs	r1, #1
 800aacc:	fa01 f303 	lsl.w	r3, r1, r3
 800aad0:	431a      	orrs	r2, r3
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800aad8:	bf00      	nop
 800aada:	372c      	adds	r7, #44	@ 0x2c
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	0800ef68 	.word	0x0800ef68
 800aae8:	20001464 	.word	0x20001464

0800aaec <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800aaec:	b480      	push	{r7}
 800aaee:	b089      	sub	sp, #36	@ 0x24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	71bb      	strb	r3, [r7, #6]
 800aafa:	4613      	mov	r3, r2
 800aafc:	717b      	strb	r3, [r7, #5]
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ab02:	7c7b      	ldrb	r3, [r7, #17]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <edpt_disable+0x20>
    rhport = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ab0c:	7c7b      	ldrb	r3, [r7, #17]
 800ab0e:	4a5b      	ldr	r2, [pc, #364]	@ (800ac7c <edpt_disable+0x190>)
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	4413      	add	r3, r2
 800ab14:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	79bb      	ldrb	r3, [r7, #6]
 800ab1a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ab1c:	7cbb      	ldrb	r3, [r7, #18]
 800ab1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab22:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800ab24:	76fb      	strb	r3, [r7, #27]
 800ab26:	79bb      	ldrb	r3, [r7, #6]
 800ab28:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ab2a:	7cfb      	ldrb	r3, [r7, #19]
 800ab2c:	09db      	lsrs	r3, r3, #7
 800ab2e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800ab30:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ab32:	7ebb      	ldrb	r3, [r7, #26]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	bf14      	ite	ne
 800ab38:	2301      	movne	r3, #1
 800ab3a:	2300      	moveq	r3, #0
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	461a      	mov	r2, r3
 800ab40:	7efb      	ldrb	r3, [r7, #27]
 800ab42:	0112      	lsls	r2, r2, #4
 800ab44:	4413      	add	r3, r2
 800ab46:	3348      	adds	r3, #72	@ 0x48
 800ab48:	015b      	lsls	r3, r3, #5
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800ab50:	7ebb      	ldrb	r3, [r7, #26]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d149      	bne.n	800abea <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800ab56:	7efb      	ldrb	r3, [r7, #27]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <edpt_disable+0x78>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	db0d      	blt.n	800ab80 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	797a      	ldrb	r2, [r7, #5]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d002      	beq.n	800ab74 <edpt_disable+0x88>
 800ab6e:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800ab72:	e001      	b.n	800ab78 <edpt_disable+0x8c>
 800ab74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e022      	b.n	800abc6 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800ab8c:	bf00      	nop
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0f9      	beq.n	800ab8e <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	797a      	ldrb	r2, [r7, #5]
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	d001      	beq.n	800aba8 <edpt_disable+0xbc>
 800aba4:	4a36      	ldr	r2, [pc, #216]	@ (800ac80 <edpt_disable+0x194>)
 800aba6:	e001      	b.n	800abac <edpt_disable+0xc0>
 800aba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800abac:	431a      	orrs	r2, r3
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800abb2:	bf00      	nop
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f003 0302 	and.w	r3, r3, #2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0f9      	beq.n	800abb4 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2202      	movs	r2, #2
 800abc4:	609a      	str	r2, [r3, #8]
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	7efb      	ldrb	r3, [r7, #27]
 800abcc:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800abce:	7afb      	ldrb	r3, [r7, #11]
 800abd0:	019b      	lsls	r3, r3, #6
 800abd2:	f043 0220 	orr.w	r2, r3, #32
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800abda:	bf00      	nop
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f9      	bne.n	800abdc <edpt_disable+0xf0>
}
 800abe8:	e041      	b.n	800ac6e <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800abea:	7efb      	ldrb	r3, [r7, #27]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <edpt_disable+0x10c>
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	db0c      	blt.n	800ac12 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	797a      	ldrb	r2, [r7, #5]
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	d002      	beq.n	800ac08 <edpt_disable+0x11c>
 800ac02:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ac06:	e000      	b.n	800ac0a <edpt_disable+0x11e>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	e02d      	b.n	800ac6e <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800ac18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800ac22:	bf00      	nop
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0f9      	beq.n	800ac24 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	797a      	ldrb	r2, [r7, #5]
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	d001      	beq.n	800ac3e <edpt_disable+0x152>
 800ac3a:	4a11      	ldr	r2, [pc, #68]	@ (800ac80 <edpt_disable+0x194>)
 800ac3c:	e001      	b.n	800ac42 <edpt_disable+0x156>
 800ac3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ac42:	431a      	orrs	r2, r3
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800ac48:	bf00      	nop
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0f9      	beq.n	800ac4a <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800ac62:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	bf00      	nop
 800ac70:	3724      	adds	r7, #36	@ 0x24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	0800ef68 	.word	0x0800ef68
 800ac80:	40200000 	.word	0x40200000

0800ac84 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b090      	sub	sp, #64	@ 0x40
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	71fb      	strb	r3, [r7, #7]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	71bb      	strb	r3, [r7, #6]
 800ac92:	4613      	mov	r3, r2
 800ac94:	717b      	strb	r3, [r7, #5]
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ac9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <edpt_schedule_packets+0x26>
    rhport = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800acaa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800acae:	4a65      	ldr	r2, [pc, #404]	@ (800ae44 <edpt_schedule_packets+0x1c0>)
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	4413      	add	r3, r2
 800acb4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800acb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800acb8:	79ba      	ldrb	r2, [r7, #6]
 800acba:	797b      	ldrb	r3, [r7, #5]
 800acbc:	0052      	lsls	r2, r2, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	011b      	lsls	r3, r3, #4
 800acc2:	4a61      	ldr	r2, [pc, #388]	@ (800ae48 <edpt_schedule_packets+0x1c4>)
 800acc4:	4413      	add	r3, r2
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800acc8:	797b      	ldrb	r3, [r7, #5]
 800acca:	2b01      	cmp	r3, #1
 800accc:	bf14      	ite	ne
 800acce:	2301      	movne	r3, #1
 800acd0:	2300      	moveq	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	79bb      	ldrb	r3, [r7, #6]
 800acd8:	0112      	lsls	r2, r2, #4
 800acda:	4413      	add	r3, r2
 800acdc:	3348      	adds	r3, #72	@ 0x48
 800acde:	015b      	lsls	r3, r3, #5
 800ace0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ace2:	4413      	add	r3, r2
 800ace4:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800ace6:	79bb      	ldrb	r3, [r7, #6]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d11c      	bne.n	800ad26 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800acec:	797b      	ldrb	r3, [r7, #5]
 800acee:	4a57      	ldr	r2, [pc, #348]	@ (800ae4c <edpt_schedule_packets+0x1c8>)
 800acf0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800acf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf6:	895b      	ldrh	r3, [r3, #10]
 800acf8:	853a      	strh	r2, [r7, #40]	@ 0x28
 800acfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800acfc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800acfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad00:	4293      	cmp	r3, r2
 800ad02:	bf28      	it	cs
 800ad04:	4613      	movcs	r3, r2
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800ad0a:	797b      	ldrb	r3, [r7, #5]
 800ad0c:	4a4f      	ldr	r2, [pc, #316]	@ (800ae4c <edpt_schedule_packets+0x1c8>)
 800ad0e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ad12:	797b      	ldrb	r3, [r7, #5]
 800ad14:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ad16:	1a8a      	subs	r2, r1, r2
 800ad18:	b291      	uxth	r1, r2
 800ad1a:	4a4c      	ldr	r2, [pc, #304]	@ (800ae4c <edpt_schedule_packets+0x1c8>)
 800ad1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ad24:	e014      	b.n	800ad50 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800ad26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad28:	891b      	ldrh	r3, [r3, #8]
 800ad2a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800ad2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad30:	8952      	ldrh	r2, [r2, #10]
 800ad32:	623b      	str	r3, [r7, #32]
 800ad34:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	1e5a      	subs	r2, r3, #1
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800ad46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800ad54:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ad56:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f362 0312 	bfi	r3, r2, #0, #19
 800ad60:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800ad62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ad64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	8afb      	ldrh	r3, [r7, #22]
 800ad6c:	f362 03cc 	bfi	r3, r2, #3, #10
 800ad70:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800ad78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800ad7e:	7cfb      	ldrb	r3, [r7, #19]
 800ad80:	f043 0304 	orr.w	r3, r3, #4
 800ad84:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800ad86:	7cfb      	ldrb	r3, [r7, #19]
 800ad88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad8c:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800ad8e:	7cbb      	ldrb	r3, [r7, #18]
 800ad90:	f003 030c 	and.w	r3, r3, #12
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d11a      	bne.n	800add0 <edpt_schedule_packets+0x14c>
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad9c:	7b1b      	ldrb	r3, [r3, #12]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d116      	bne.n	800add0 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ada8:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800adb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800adbe:	7cfb      	ldrb	r3, [r7, #19]
 800adc0:	f043 0310 	orr.w	r3, r3, #16
 800adc4:	74fb      	strb	r3, [r7, #19]
 800adc6:	e003      	b.n	800add0 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800adc8:	7cfb      	ldrb	r3, [r7, #19]
 800adca:	f043 0320 	orr.w	r3, r3, #32
 800adce:	74fb      	strb	r3, [r7, #19]
 800add0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add2:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800add8:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800adda:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800addc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800ade0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d015      	beq.n	800ae14 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ade8:	797b      	ldrb	r3, [r7, #5]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d109      	bne.n	800ae02 <edpt_schedule_packets+0x17e>
 800adee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800adf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fd fd5c 	bl	80088ba <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800ae02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800ae12:	e013      	b.n	800ae3c <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ae1a:	797b      	ldrb	r3, [r7, #5]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10d      	bne.n	800ae3c <edpt_schedule_packets+0x1b8>
 800ae20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800ae2c:	79ba      	ldrb	r2, [r7, #6]
 800ae2e:	2101      	movs	r1, #1
 800ae30:	fa01 f202 	lsl.w	r2, r1, r2
 800ae34:	431a      	orrs	r2, r3
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800ae3c:	bf00      	nop
 800ae3e:	3740      	adds	r7, #64	@ 0x40
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	0800ef68 	.word	0x0800ef68
 800ae48:	20001464 	.word	0x20001464
 800ae4c:	200014e4 	.word	0x200014e4

0800ae50 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08c      	sub	sp, #48	@ 0x30
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	6039      	str	r1, [r7, #0]
 800ae5a:	71fb      	strb	r3, [r7, #7]
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <dcd_init+0x1a>
    rhport = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	4a43      	ldr	r2, [pc, #268]	@ (800af7c <dcd_init+0x12c>)
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	4413      	add	r3, r2
 800ae72:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ae74:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800ae76:	2208      	movs	r2, #8
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4841      	ldr	r0, [pc, #260]	@ (800af80 <dcd_init+0x130>)
 800ae7c:	f001 fe9d 	bl	800cbba <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800ae80:	2101      	movs	r1, #1
 800ae82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae84:	f001 f9c6 	bl	800c214 <dwc2_core_is_highspeed>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae90:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae96:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ae98:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800ae9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800ae9e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aea2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f001 f9d1 	bl	800c250 <dwc2_core_init>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f083 0301 	eor.w	r3, r3, #1
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <dcd_init+0x80>
 800aeba:	4b32      	ldr	r3, [pc, #200]	@ (800af84 <dcd_init+0x134>)
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d000      	beq.n	800aecc <dcd_init+0x7c>
 800aeca:	be00      	bkpt	0x0000
 800aecc:	2300      	movs	r3, #0
 800aece:	e050      	b.n	800af72 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800aed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800aedc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00d      	beq.n	800af00 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aee8:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800aeea:	7b3b      	ldrb	r3, [r7, #12]
 800aeec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b80      	cmp	r3, #128	@ 0x80
 800aef4:	d108      	bne.n	800af08 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aefe:	e003      	b.n	800af08 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	f043 0303 	orr.w	r3, r3, #3
 800af06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0a:	f043 0304 	orr.w	r3, r3, #4
 800af0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800af10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af14:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 f92a 	bl	800b174 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800af20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800af28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800af30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800af38:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800af40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <dcd_init+0x138>)
 800af46:	4313      	orrs	r3, r2
 800af48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af4a:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af58:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	6a3a      	ldr	r2, [r7, #32]
 800af66:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f8e0 	bl	800b130 <dcd_connect>
  return true;
 800af70:	2301      	movs	r3, #1
}
 800af72:	4618      	mov	r0, r3
 800af74:	3730      	adds	r7, #48	@ 0x30
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	0800ef68 	.word	0x0800ef68
 800af80:	200014e4 	.word	0x200014e4
 800af84:	e000edf0 	.word	0xe000edf0
 800af88:	80003804 	.word	0x80003804

0800af8c <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	73fb      	strb	r3, [r7, #15]
 800af9a:	2301      	movs	r3, #1
 800af9c:	73bb      	strb	r3, [r7, #14]
 800af9e:	2301      	movs	r3, #1
 800afa0:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	4a0c      	ldr	r2, [pc, #48]	@ (800afd8 <dcd_int_enable+0x4c>)
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4413      	add	r3, r2
 800afaa:	3304      	adds	r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800afb0:	7b7b      	ldrb	r3, [r7, #13]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800afb6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fb3e 	bl	800a63c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800afc0:	e004      	b.n	800afcc <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800afc2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff fb56 	bl	800a678 <__NVIC_DisableIRQ>
}
 800afcc:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0800ef68 	.word	0x0800ef68

0800afdc <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	73fb      	strb	r3, [r7, #15]
 800afea:	2301      	movs	r3, #1
 800afec:	73bb      	strb	r3, [r7, #14]
 800afee:	2300      	movs	r3, #0
 800aff0:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	4a0c      	ldr	r2, [pc, #48]	@ (800b028 <dcd_int_disable+0x4c>)
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b000:	7b7b      	ldrb	r3, [r7, #13]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b006:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fb16 	bl	800a63c <__NVIC_EnableIRQ>
}
 800b010:	e004      	b.n	800b01c <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b012:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fb2e 	bl	800a678 <__NVIC_DisableIRQ>
}
 800b01c:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	0800ef68 	.word	0x0800ef68

0800b02c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	460a      	mov	r2, r1
 800b036:	71fb      	strb	r3, [r7, #7]
 800b038:	4613      	mov	r3, r2
 800b03a:	71bb      	strb	r3, [r7, #6]
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b040:	7a7b      	ldrb	r3, [r7, #9]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <dcd_set_address+0x1e>
    rhport = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b04a:	7a7b      	ldrb	r3, [r7, #9]
 800b04c:	4a14      	ldr	r2, [pc, #80]	@ (800b0a0 <dcd_set_address+0x74>)
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	4413      	add	r3, r2
 800b052:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b054:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b05c:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b060:	79bb      	ldrb	r3, [r7, #6]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	431a      	orrs	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b06c:	2300      	movs	r3, #0
 800b06e:	72fb      	strb	r3, [r7, #11]
 800b070:	2301      	movs	r3, #1
 800b072:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b074:	7abb      	ldrb	r3, [r7, #10]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <dcd_set_address+0x54>
 800b07a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b07e:	e000      	b.n	800b082 <dcd_set_address+0x56>
 800b080:	2300      	movs	r3, #0
 800b082:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b086:	4313      	orrs	r3, r2
 800b088:	b25b      	sxtb	r3, r3
 800b08a:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b08c:	79f8      	ldrb	r0, [r7, #7]
 800b08e:	2300      	movs	r3, #0
 800b090:	2200      	movs	r2, #0
 800b092:	f000 f98b 	bl	800b3ac <dcd_edpt_xfer>
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800ef68 	.word	0x0800ef68

0800b0a4 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	71fb      	strb	r3, [r7, #7]
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4a19      	ldr	r2, [pc, #100]	@ (800b124 <dcd_remote_wakeup+0x80>)
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	4413      	add	r3, r2
 800b0c4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b0c6:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b0ce:	f043 0201 	orr.w	r2, r3, #1
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2208      	movs	r2, #8
 800b0dc:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f043 0208 	orr.w	r2, r3, #8
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b0ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b128 <dcd_remote_wakeup+0x84>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a0f      	ldr	r2, [pc, #60]	@ (800b12c <dcd_remote_wakeup+0x88>)
 800b0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f4:	099b      	lsrs	r3, r3, #6
 800b0f6:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b0f8:	e000      	b.n	800b0fc <dcd_remote_wakeup+0x58>
 800b0fa:	bf00      	nop
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	1e5a      	subs	r2, r3, #1
 800b100:	613a      	str	r2, [r7, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1f9      	bne.n	800b0fa <dcd_remote_wakeup+0x56>
}
 800b106:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b10e:	f023 0201 	bic.w	r2, r3, #1
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b118:	bf00      	nop
 800b11a:	371c      	adds	r7, #28
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	0800ef68 	.word	0x0800ef68
 800b128:	20000208 	.word	0x20000208
 800b12c:	10624dd3 	.word	0x10624dd3

0800b130 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <dcd_connect+0x18>
    rhport = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	4a09      	ldr	r2, [pc, #36]	@ (800b170 <dcd_connect+0x40>)
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	4413      	add	r3, r2
 800b150:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b152:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b15a:	f023 0202 	bic.w	r2, r3, #2
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	0800ef68 	.word	0x0800ef68

0800b174 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	71fb      	strb	r3, [r7, #7]
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <dcd_disconnect+0x18>
    rhport = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	4a09      	ldr	r2, [pc, #36]	@ (800b1b4 <dcd_disconnect+0x40>)
 800b190:	011b      	lsls	r3, r3, #4
 800b192:	4413      	add	r3, r2
 800b194:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b196:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b19e:	f043 0202 	orr.w	r2, r3, #2
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	0800ef68 	.word	0x0800ef68

0800b1b8 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	460a      	mov	r2, r1
 800b1c2:	71fb      	strb	r3, [r7, #7]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71bb      	strb	r3, [r7, #6]
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <dcd_sof_enable+0x1e>
    rhport = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b1d6:	7afb      	ldrb	r3, [r7, #11]
 800b1d8:	4a10      	ldr	r2, [pc, #64]	@ (800b21c <dcd_sof_enable+0x64>)
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	4413      	add	r3, r2
 800b1de:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b1e0:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b1e2:	4a0f      	ldr	r2, [pc, #60]	@ (800b220 <dcd_sof_enable+0x68>)
 800b1e4:	79bb      	ldrb	r3, [r7, #6]
 800b1e6:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b1e8:	79bb      	ldrb	r3, [r7, #6]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	f043 0208 	orr.w	r2, r3, #8
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b200:	e005      	b.n	800b20e <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f023 0208 	bic.w	r2, r3, #8
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	619a      	str	r2, [r3, #24]
}
 800b20e:	bf00      	nop
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	0800ef68 	.word	0x0800ef68
 800b220:	200014e4 	.word	0x200014e4

0800b224 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	6039      	str	r1, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	7899      	ldrb	r1, [r3, #2]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	889b      	ldrh	r3, [r3, #4]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b242:	b29a      	uxth	r2, r3
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fa76 	bl	800a738 <dfifo_alloc>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f083 0301 	eor.w	r3, r3, #1
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <dcd_edpt_open+0x4a>
 800b258:	4b0a      	ldr	r3, [pc, #40]	@ (800b284 <dcd_edpt_open+0x60>)
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d000      	beq.n	800b26a <dcd_edpt_open+0x46>
 800b268:	be00      	bkpt	0x0000
 800b26a:	2300      	movs	r3, #0
 800b26c:	e005      	b.n	800b27a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fb9c 	bl	800a9b0 <edpt_activate>
  return true;
 800b278:	2301      	movs	r3, #1
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	e000edf0 	.word	0xe000edf0

0800b288 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	@ 0x28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	71fb      	strb	r3, [r7, #7]
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	4a3f      	ldr	r2, [pc, #252]	@ (800b3a0 <dcd_edpt_close_all+0x118>)
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	4413      	add	r3, r2
 800b2a8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b2aa:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b2ac:	79fb      	ldrb	r3, [r7, #7]
 800b2ae:	4a3c      	ldr	r2, [pc, #240]	@ (800b3a0 <dcd_edpt_close_all+0x118>)
 800b2b0:	011b      	lsls	r3, r3, #4
 800b2b2:	4413      	add	r3, r2
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	f7fe fd4a 	bl	8009d54 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b2c0:	4b38      	ldr	r3, [pc, #224]	@ (800b3a4 <dcd_edpt_close_all+0x11c>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b2cc:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b2d6:	e034      	b.n	800b342 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b2de:	e027      	b.n	800b330 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b2e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2e8:	0112      	lsls	r2, r2, #4
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3348      	adds	r3, #72	@ 0x48
 800b2ee:	015b      	lsls	r3, r3, #5
 800b2f0:	6a3a      	ldr	r2, [r7, #32]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da05      	bge.n	800b30a <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b30a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b30e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b312:	f1c3 0301 	rsb	r3, r3, #1
 800b316:	4924      	ldr	r1, [pc, #144]	@ (800b3a8 <dcd_edpt_close_all+0x120>)
 800b318:	0052      	lsls	r2, r2, #1
 800b31a:	4413      	add	r3, r2
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	440b      	add	r3, r1
 800b320:	330a      	adds	r3, #10
 800b322:	2200      	movs	r2, #0
 800b324:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b326:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b32a:	3301      	adds	r3, #1
 800b32c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b334:	2b01      	cmp	r3, #1
 800b336:	d9d3      	bls.n	800b2e0 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b33c:	3301      	adds	r3, #1
 800b33e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b342:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b346:	7ffb      	ldrb	r3, [r7, #31]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d3c5      	bcc.n	800b2d8 <dcd_edpt_close_all+0x50>
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	2310      	movs	r3, #16
 800b352:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	019b      	lsls	r3, r3, #6
 800b358:	f043 0220 	orr.w	r2, r3, #32
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b360:	bf00      	nop
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1f9      	bne.n	800b362 <dcd_edpt_close_all+0xda>
}
 800b36e:	bf00      	nop
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2210      	movs	r2, #16
 800b378:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b37a:	bf00      	nop
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1f9      	bne.n	800b37c <dcd_edpt_close_all+0xf4>
}
 800b388:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fab5 	bl	800a8fc <dfifo_device_init>

  usbd_spin_unlock(false);
 800b392:	2000      	movs	r0, #0
 800b394:	f7fe fcf8 	bl	8009d88 <usbd_spin_unlock>
}
 800b398:	bf00      	nop
 800b39a:	3728      	adds	r7, #40	@ 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	0800ef68 	.word	0x0800ef68
 800b3a4:	200014e4 	.word	0x200014e4
 800b3a8:	20001464 	.word	0x20001464

0800b3ac <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	603a      	str	r2, [r7, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	71fb      	strb	r3, [r7, #7]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	71bb      	strb	r3, [r7, #6]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80bb      	strh	r3, [r7, #4]
 800b3c2:	79bb      	ldrb	r3, [r7, #6]
 800b3c4:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3cc:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b3ce:	75bb      	strb	r3, [r7, #22]
 800b3d0:	79bb      	ldrb	r3, [r7, #6]
 800b3d2:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	09db      	lsrs	r3, r3, #7
 800b3d8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b3da:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b3dc:	7dba      	ldrb	r2, [r7, #22]
 800b3de:	7d7b      	ldrb	r3, [r7, #21]
 800b3e0:	0052      	lsls	r2, r2, #1
 800b3e2:	4413      	add	r3, r2
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	4a17      	ldr	r2, [pc, #92]	@ (800b444 <dcd_edpt_xfer+0x98>)
 800b3e8:	4413      	add	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	f7fe fcb1 	bl	8009d54 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	895b      	ldrh	r3, [r3, #10]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d102      	bne.n	800b400 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	75fb      	strb	r3, [r7, #23]
 800b3fe:	e018      	b.n	800b432 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2200      	movs	r2, #0
 800b40a:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	88ba      	ldrh	r2, [r7, #4]
 800b410:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b412:	7dbb      	ldrb	r3, [r7, #22]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d104      	bne.n	800b422 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b418:	7d7b      	ldrb	r3, [r7, #21]
 800b41a:	490b      	ldr	r1, [pc, #44]	@ (800b448 <dcd_edpt_xfer+0x9c>)
 800b41c:	88ba      	ldrh	r2, [r7, #4]
 800b41e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b422:	7d7a      	ldrb	r2, [r7, #21]
 800b424:	7db9      	ldrb	r1, [r7, #22]
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fc2b 	bl	800ac84 <edpt_schedule_packets>
    ret = true;
 800b42e:	2301      	movs	r3, #1
 800b430:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b432:	2000      	movs	r0, #0
 800b434:	f7fe fca8 	bl	8009d88 <usbd_spin_unlock>

  return ret;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20001464 	.word	0x20001464
 800b448:	200014e4 	.word	0x200014e4

0800b44c <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	460a      	mov	r2, r1
 800b456:	71fb      	strb	r3, [r7, #7]
 800b458:	4613      	mov	r3, r2
 800b45a:	71bb      	strb	r3, [r7, #6]
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b460:	7cbb      	ldrb	r3, [r7, #18]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b46a:	7cbb      	ldrb	r3, [r7, #18]
 800b46c:	4a11      	ldr	r2, [pc, #68]	@ (800b4b4 <dcd_edpt_stall+0x68>)
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	4413      	add	r3, r2
 800b472:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b474:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b476:	79b9      	ldrb	r1, [r7, #6]
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	2201      	movs	r2, #1
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fb35 	bl	800aaec <edpt_disable>
 800b482:	79bb      	ldrb	r3, [r7, #6]
 800b484:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b486:	7cfb      	ldrb	r3, [r7, #19]
 800b488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48c:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10b      	bne.n	800b4aa <dcd_edpt_stall+0x5e>
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b49a:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b49c:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff f90b 	bl	800a6c0 <dma_setup_prepare>
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0800ef68 	.word	0x0800ef68

0800b4b8 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	460a      	mov	r2, r1
 800b4c2:	71fb      	strb	r3, [r7, #7]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	71bb      	strb	r3, [r7, #6]
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4cc:	7a7b      	ldrb	r3, [r7, #9]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4d6:	7a7b      	ldrb	r3, [r7, #9]
 800b4d8:	4a19      	ldr	r2, [pc, #100]	@ (800b540 <dcd_edpt_clear_stall+0x88>)
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	4413      	add	r3, r2
 800b4de:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b4e0:	617b      	str	r3, [r7, #20]
 800b4e2:	79bb      	ldrb	r3, [r7, #6]
 800b4e4:	72bb      	strb	r3, [r7, #10]
 800b4e6:	7abb      	ldrb	r3, [r7, #10]
 800b4e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ec:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b4ee:	74fb      	strb	r3, [r7, #19]
 800b4f0:	79bb      	ldrb	r3, [r7, #6]
 800b4f2:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	09db      	lsrs	r3, r3, #7
 800b4f8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b4fa:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b4fc:	7cbb      	ldrb	r3, [r7, #18]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	bf14      	ite	ne
 800b502:	2301      	movne	r3, #1
 800b504:	2300      	moveq	r3, #0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	461a      	mov	r2, r3
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
 800b50c:	0112      	lsls	r2, r2, #4
 800b50e:	4413      	add	r3, r2
 800b510:	3348      	adds	r3, #72	@ 0x48
 800b512:	015b      	lsls	r3, r3, #5
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	601a      	str	r2, [r3, #0]
}
 800b532:	bf00      	nop
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	0800ef68 	.word	0x0800ef68

0800b544 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	@ 0x38
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <handle_bus_reset+0x1e>
    rhport = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b566:	4a6a      	ldr	r2, [pc, #424]	@ (800b710 <handle_bus_reset+0x1cc>)
 800b568:	011b      	lsls	r3, r3, #4
 800b56a:	4413      	add	r3, r2
 800b56c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b56e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b578:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b57a:	7a7b      	ldrb	r3, [r7, #9]
 800b57c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b580:	b2db      	uxtb	r3, r3
 800b582:	3301      	adds	r3, #1
 800b584:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b58a:	2280      	movs	r2, #128	@ 0x80
 800b58c:	2100      	movs	r1, #0
 800b58e:	4861      	ldr	r0, [pc, #388]	@ (800b714 <handle_bus_reset+0x1d0>)
 800b590:	f001 fb13 	bl	800cbba <memset>

  _dcd_data.sof_en = false;
 800b594:	4b60      	ldr	r3, [pc, #384]	@ (800b718 <handle_bus_reset+0x1d4>)
 800b596:	2200      	movs	r2, #0
 800b598:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b59a:	4b5f      	ldr	r3, [pc, #380]	@ (800b718 <handle_bus_reset+0x1d4>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b5a6:	e014      	b.n	800b5d2 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ae:	3358      	adds	r3, #88	@ 0x58
 800b5b0:	015b      	lsls	r3, r3, #5
 800b5b2:	4413      	add	r3, r2
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5ba:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b5be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5c0:	3358      	adds	r3, #88	@ 0x58
 800b5c2:	015b      	lsls	r3, r3, #5
 800b5c4:	440b      	add	r3, r1
 800b5c6:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b5c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b5d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b5d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3e4      	bcc.n	800b5a8 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b5e4:	e01d      	b.n	800b622 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b5e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b5ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ec:	3348      	adds	r3, #72	@ 0x48
 800b5ee:	015b      	lsls	r3, r3, #5
 800b5f0:	4413      	add	r3, r2
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da0f      	bge.n	800b618 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b5f8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b5fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5fe:	3348      	adds	r3, #72	@ 0x48
 800b600:	015b      	lsls	r3, r3, #5
 800b602:	4413      	add	r3, r2
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b60a:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b60e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b610:	3348      	adds	r3, #72	@ 0x48
 800b612:	015b      	lsls	r3, r3, #5
 800b614:	440b      	add	r3, r1
 800b616:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b618:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b61c:	3301      	adds	r3, #1
 800b61e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b622:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d3db      	bcc.n	800b5e6 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b634:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	2209      	movs	r2, #9
 800b63c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b642:	2209      	movs	r2, #9
 800b644:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	61bb      	str	r3, [r7, #24]
 800b64c:	2310      	movs	r3, #16
 800b64e:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	019b      	lsls	r3, r3, #6
 800b654:	f043 0220 	orr.w	r2, r3, #32
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b65c:	bf00      	nop
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	f003 0320 	and.w	r3, r3, #32
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f9      	bne.n	800b65e <handle_bus_reset+0x11a>
}
 800b66a:	bf00      	nop
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	2210      	movs	r2, #16
 800b674:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b676:	bf00      	nop
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f9      	bne.n	800b678 <handle_bus_reset+0x134>
}
 800b684:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f937 	bl	800a8fc <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b694:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b696:	8a3b      	ldrh	r3, [r7, #16]
 800b698:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b69c:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b6ac:	f023 0203 	bic.w	r2, r3, #3
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b6bc:	f023 0203 	bic.w	r2, r3, #3
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b6c6:	4b13      	ldr	r3, [pc, #76]	@ (800b714 <handle_bus_reset+0x1d0>)
 800b6c8:	2240      	movs	r2, #64	@ 0x40
 800b6ca:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b6cc:	4b11      	ldr	r3, [pc, #68]	@ (800b714 <handle_bus_reset+0x1d0>)
 800b6ce:	2240      	movs	r2, #64	@ 0x40
 800b6d0:	835a      	strh	r2, [r3, #26]
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6da:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b6dc:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d004      	beq.n	800b6ec <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe ffeb 	bl	800a6c0 <dma_setup_prepare>
 800b6ea:	e007      	b.n	800b6fc <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800b6f2:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800b704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b706:	619a      	str	r2, [r3, #24]
}
 800b708:	bf00      	nop
 800b70a:	3738      	adds	r7, #56	@ 0x38
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0800ef68 	.word	0x0800ef68
 800b714:	20001464 	.word	0x20001464
 800b718:	200014e4 	.word	0x200014e4

0800b71c <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	@ 0x28
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b72a:	7ffb      	ldrb	r3, [r7, #31]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <handle_enum_done+0x18>
    rhport = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b734:	7ffb      	ldrb	r3, [r7, #31]
 800b736:	4a1b      	ldr	r2, [pc, #108]	@ (800b7a4 <handle_enum_done+0x88>)
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	4413      	add	r3, r2
 800b73c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b73e:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b746:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800b748:	7e3b      	ldrb	r3, [r7, #24]
 800b74a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <handle_enum_done+0x3e>
 800b754:	2b02      	cmp	r3, #2
 800b756:	d004      	beq.n	800b762 <handle_enum_done+0x46>
 800b758:	e007      	b.n	800b76a <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800b75a:	2302      	movs	r3, #2
 800b75c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b760:	e007      	b.n	800b772 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b768:	e003      	b.n	800b772 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b770:	bf00      	nop
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	77bb      	strb	r3, [r7, #30]
 800b776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b77a:	777b      	strb	r3, [r7, #29]
 800b77c:	2301      	movs	r3, #1
 800b77e:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b780:	7fbb      	ldrb	r3, [r7, #30]
 800b782:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800b784:	2301      	movs	r3, #1
 800b786:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800b788:	7f7b      	ldrb	r3, [r7, #29]
 800b78a:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800b78c:	7f3a      	ldrb	r2, [r7, #28]
 800b78e:	f107 030c 	add.w	r3, r7, #12
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe f8df 	bl	8009958 <dcd_event_handler>
}
 800b79a:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800b79c:	bf00      	nop
 800b79e:	3728      	adds	r7, #40	@ 0x28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	0800ef68 	.word	0x0800ef68

0800b7a8 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	@ 0x30
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7b6:	7cfb      	ldrb	r3, [r7, #19]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b7c0:	7cfb      	ldrb	r3, [r7, #19]
 800b7c2:	4a49      	ldr	r2, [pc, #292]	@ (800b8e8 <handle_rxflvl_irq+0x140>)
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	4413      	add	r3, r2
 800b7c8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800b7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800b7da:	7b3b      	ldrb	r3, [r7, #12]
 800b7dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800b7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7ea:	3358      	adds	r3, #88	@ 0x58
 800b7ec:	015b      	lsls	r3, r3, #5
 800b7ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7f0:	4413      	add	r3, r2
 800b7f2:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	2b05      	cmp	r3, #5
 800b800:	d86a      	bhi.n	800b8d8 <handle_rxflvl_irq+0x130>
 800b802:	a201      	add	r2, pc, #4	@ (adr r2, 800b808 <handle_rxflvl_irq+0x60>)
 800b804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b808:	0800b8d9 	.word	0x0800b8d9
 800b80c:	0800b847 	.word	0x0800b847
 800b810:	0800b8d9 	.word	0x0800b8d9
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b8d9 	.word	0x0800b8d9
 800b81c:	0800b821 	.word	0x0800b821
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800b820:	4b32      	ldr	r3, [pc, #200]	@ (800b8ec <handle_rxflvl_irq+0x144>)
 800b822:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800b824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	3304      	adds	r3, #4
 800b830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b832:	6812      	ldr	r2, [r2, #0]
 800b834:	601a      	str	r2, [r3, #0]
      break;
 800b836:	e052      	b.n	800b8de <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	611a      	str	r2, [r3, #16]
      break;
 800b844:	e04b      	b.n	800b8de <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800b846:	89bb      	ldrh	r3, [r7, #12]
 800b848:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b854:	015b      	lsls	r3, r3, #5
 800b856:	4a26      	ldr	r2, [pc, #152]	@ (800b8f0 <handle_rxflvl_irq+0x148>)
 800b858:	4413      	add	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800b85c:	8b7b      	ldrh	r3, [r7, #26]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d03c      	beq.n	800b8dc <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	8b7a      	ldrh	r2, [r7, #26]
 800b870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b872:	4618      	mov	r0, r3
 800b874:	f7fc ff7e 	bl	8008774 <tu_fifo_write_n_const_addr_full_words>
 800b878:	e00c      	b.n	800b894 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	8b7a      	ldrh	r2, [r7, #26]
 800b880:	4619      	mov	r1, r3
 800b882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b884:	f000 fd70 	bl	800c368 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	8b7b      	ldrh	r3, [r7, #26]
 800b88e:	441a      	add	r2, r3
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	895b      	ldrh	r3, [r3, #10]
 800b898:	8b7a      	ldrh	r2, [r7, #26]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d21e      	bcs.n	800b8dc <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	891a      	ldrh	r2, [r3, #8]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800b8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10d      	bne.n	800b8dc <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	891a      	ldrh	r2, [r3, #8]
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <handle_rxflvl_irq+0x14c>)
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800b8d0:	4b08      	ldr	r3, [pc, #32]	@ (800b8f4 <handle_rxflvl_irq+0x14c>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800b8d6:	e001      	b.n	800b8dc <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <handle_rxflvl_irq+0x136>
      break;
 800b8dc:	bf00      	nop
  }
}
 800b8de:	bf00      	nop
 800b8e0:	3730      	adds	r7, #48	@ 0x30
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800ef68 	.word	0x0800ef68
 800b8ec:	200014ec 	.word	0x200014ec
 800b8f0:	20001464 	.word	0x20001464
 800b8f4:	200014e4 	.word	0x200014e4

0800b8f8 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08e      	sub	sp, #56	@ 0x38
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	603a      	str	r2, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
 800b904:	460b      	mov	r3, r1
 800b906:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800b908:	783b      	ldrb	r3, [r7, #0]
 800b90a:	f003 0308 	and.w	r3, r3, #8
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01c      	beq.n	800b94e <handle_epout_slave+0x56>
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b91a:	4b34      	ldr	r3, [pc, #208]	@ (800b9ec <handle_epout_slave+0xf4>)
 800b91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b91e:	2301      	movs	r3, #1
 800b920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b928:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800b92a:	2306      	movs	r3, #6
 800b92c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800b92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b930:	f107 0318 	add.w	r3, r7, #24
 800b934:	6810      	ldr	r0, [r2, #0]
 800b936:	6851      	ldr	r1, [r2, #4]
 800b938:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800b93a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b93e:	f107 0314 	add.w	r3, r7, #20
 800b942:	4611      	mov	r1, r2
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe f807 	bl	8009958 <dcd_event_handler>
}
 800b94a:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800b94c:	e04a      	b.n	800b9e4 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800b94e:	783b      	ldrb	r3, [r7, #0]
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d044      	beq.n	800b9e4 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800b95a:	783b      	ldrb	r3, [r7, #0]
 800b95c:	f003 0320 	and.w	r3, r3, #32
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d13e      	bne.n	800b9e4 <handle_epout_slave+0xec>
 800b966:	787b      	ldrb	r3, [r7, #1]
 800b968:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d138      	bne.n	800b9e4 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b972:	79bb      	ldrb	r3, [r7, #6]
 800b974:	015b      	lsls	r3, r3, #5
 800b976:	4a1e      	ldr	r2, [pc, #120]	@ (800b9f0 <handle_epout_slave+0xf8>)
 800b978:	4413      	add	r3, r2
 800b97a:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800b97c:	79bb      	ldrb	r3, [r7, #6]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <handle_epout_slave+0xa0>
 800b982:	4b1c      	ldr	r3, [pc, #112]	@ (800b9f4 <handle_epout_slave+0xfc>)
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d006      	beq.n	800b998 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800b98a:	79b9      	ldrb	r1, [r7, #6]
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	2200      	movs	r2, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff f977 	bl	800ac84 <edpt_schedule_packets>
 800b996:	e025      	b.n	800b9e4 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800b998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99a:	891b      	ldrh	r3, [r3, #8]
 800b99c:	461a      	mov	r2, r3
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9a4:	79bb      	ldrb	r3, [r7, #6]
 800b9a6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800b9aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b9b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b9bc:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800b9be:	2307      	movs	r3, #7
 800b9c0:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800b9c2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b9c6:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800b9cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b9d0:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800b9d2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b9d6:	f107 0308 	add.w	r3, r7, #8
 800b9da:	4611      	mov	r1, r2
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fd ffbb 	bl	8009958 <dcd_event_handler>
}
 800b9e2:	bf00      	nop
      }
    }
  }
}
 800b9e4:	3738      	adds	r7, #56	@ 0x38
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	200014ec 	.word	0x200014ec
 800b9f0:	20001464 	.word	0x20001464
 800b9f4:	200014e4 	.word	0x200014e4

0800b9f8 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b092      	sub	sp, #72	@ 0x48
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	603a      	str	r2, [r7, #0]
 800ba02:	71fb      	strb	r3, [r7, #7]
 800ba04:	460b      	mov	r3, r1
 800ba06:	71bb      	strb	r3, [r7, #6]
 800ba08:	79fb      	ldrb	r3, [r7, #7]
 800ba0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <handle_epin_slave+0x24>
    rhport = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba20:	4a64      	ldr	r2, [pc, #400]	@ (800bbb4 <handle_epin_slave+0x1bc>)
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	4413      	add	r3, r2
 800ba26:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ba28:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800ba2a:	79bb      	ldrb	r3, [r7, #6]
 800ba2c:	3348      	adds	r3, #72	@ 0x48
 800ba2e:	015b      	lsls	r3, r3, #5
 800ba30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba32:	4413      	add	r3, r2
 800ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800ba36:	79bb      	ldrb	r3, [r7, #6]
 800ba38:	015b      	lsls	r3, r3, #5
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	4a5e      	ldr	r2, [pc, #376]	@ (800bbb8 <handle_epin_slave+0x1c0>)
 800ba3e:	4413      	add	r3, r2
 800ba40:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800ba42:	783b      	ldrb	r3, [r7, #0]
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d037      	beq.n	800babe <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800ba4e:	79bb      	ldrb	r3, [r7, #6]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <handle_epin_slave+0x72>
 800ba54:	4b59      	ldr	r3, [pc, #356]	@ (800bbbc <handle_epin_slave+0x1c4>)
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d006      	beq.n	800ba6a <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800ba5c:	79b9      	ldrb	r1, [r7, #6]
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	2201      	movs	r2, #1
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff f90e 	bl	800ac84 <edpt_schedule_packets>
 800ba68:	e029      	b.n	800babe <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800ba6a:	79bb      	ldrb	r3, [r7, #6]
 800ba6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba70:	b2d9      	uxtb	r1, r3
 800ba72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba74:	891b      	ldrh	r3, [r3, #8]
 800ba76:	461a      	mov	r2, r3
 800ba78:	79fb      	ldrb	r3, [r7, #7]
 800ba7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba7e:	460b      	mov	r3, r1
 800ba80:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800ba84:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba86:	2300      	movs	r3, #0
 800ba88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800ba92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ba96:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800ba98:	2307      	movs	r3, #7
 800ba9a:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800ba9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800baa0:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800baa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800baaa:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800baac:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bab0:	f107 0310 	add.w	r3, r7, #16
 800bab4:	4611      	mov	r1, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fd ff4e 	bl	8009958 <dcd_event_handler>
}
 800babc:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800babe:	783b      	ldrb	r3, [r7, #0]
 800bac0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d070      	beq.n	800bbac <handle_epin_slave+0x1b4>
 800baca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bacc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bad0:	79ba      	ldrb	r2, [r7, #6]
 800bad2:	2101      	movs	r1, #1
 800bad4:	fa01 f202 	lsl.w	r2, r1, r2
 800bad8:	4013      	ands	r3, r2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d066      	beq.n	800bbac <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800bade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800bae4:	89fb      	ldrh	r3, [r7, #14]
 800bae6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800baea:	b29b      	uxth	r3, r3
 800baec:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800baee:	2300      	movs	r3, #0
 800baf0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800baf4:	e03f      	b.n	800bb76 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800baf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb02:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	895a      	ldrh	r2, [r3, #10]
 800bb08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bb0a:	843b      	strh	r3, [r7, #32]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800bb10:	8c3a      	ldrh	r2, [r7, #32]
 800bb12:	8bfb      	ldrh	r3, [r7, #30]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	bf28      	it	cs
 800bb18:	4613      	movcs	r3, r2
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800bb1e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bb20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	0099      	lsls	r1, r3, #2
 800bb26:	4b26      	ldr	r3, [pc, #152]	@ (800bbc0 <handle_epin_slave+0x1c8>)
 800bb28:	400b      	ands	r3, r1
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d829      	bhi.n	800bb82 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00d      	beq.n	800bb52 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800bb36:	79bb      	ldrb	r3, [r7, #6]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	031b      	lsls	r3, r3, #12
 800bb3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb3e:	4413      	add	r3, r2
 800bb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800bb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bb48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fc fdab 	bl	80086a6 <tu_fifo_read_n_const_addr_full_words>
 800bb50:	e00c      	b.n	800bb6c <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800bb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bb58:	79b9      	ldrb	r1, [r7, #6]
 800bb5a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bb5c:	f000 fc55 	bl	800c40a <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800bb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bb66:	441a      	add	r2, r3
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bb6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb70:	3301      	adds	r3, #1
 800bb72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bb7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d3ba      	bcc.n	800baf6 <handle_epin_slave+0xfe>
 800bb80:	e000      	b.n	800bb84 <handle_epin_slave+0x18c>
        break;
 800bb82:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800bb84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800bb94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb96:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bb9a:	79ba      	ldrb	r2, [r7, #6]
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	fa01 f202 	lsl.w	r2, r1, r2
 800bba2:	43d2      	mvns	r2, r2
 800bba4:	401a      	ands	r2, r3
 800bba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bba8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800bbac:	bf00      	nop
 800bbae:	3748      	adds	r7, #72	@ 0x48
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	0800ef68 	.word	0x0800ef68
 800bbb8:	20001464 	.word	0x20001464
 800bbbc:	200014e4 	.word	0x200014e4
 800bbc0:	0003fffc 	.word	0x0003fffc

0800bbc4 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08e      	sub	sp, #56	@ 0x38
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	460a      	mov	r2, r1
 800bbce:	71fb      	strb	r3, [r7, #7]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	71bb      	strb	r3, [r7, #6]
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bbd8:	7efb      	ldrb	r3, [r7, #27]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <handle_ep_irq+0x1e>
    rhport = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bbe2:	7efb      	ldrb	r3, [r7, #27]
 800bbe4:	4a38      	ldr	r2, [pc, #224]	@ (800bcc8 <handle_ep_irq+0x104>)
 800bbe6:	011b      	lsls	r3, r3, #4
 800bbe8:	4413      	add	r3, r2
 800bbea:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bbec:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf0:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbf6:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bbf8:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800bbfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc06:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800bc08:	7c7b      	ldrb	r3, [r7, #17]
 800bc0a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	3301      	adds	r3, #1
 800bc12:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800bc14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800bc18:	79bb      	ldrb	r3, [r7, #6]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d101      	bne.n	800bc22 <handle_ep_irq+0x5e>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e000      	b.n	800bc24 <handle_ep_irq+0x60>
 800bc22:	2310      	movs	r3, #16
 800bc24:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800bc28:	79bb      	ldrb	r3, [r7, #6]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	bf14      	ite	ne
 800bc2e:	2301      	movne	r3, #1
 800bc30:	2300      	moveq	r3, #0
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	025b      	lsls	r3, r3, #9
 800bc36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc3c:	4413      	add	r3, r2
 800bc3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bc40:	2300      	movs	r3, #0
 800bc42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc46:	e034      	b.n	800bcb2 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800bc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bc4e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bc52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc56:	440b      	add	r3, r1
 800bc58:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d021      	beq.n	800bca8 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bc64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc68:	015b      	lsls	r3, r3, #5
 800bc6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc6c:	4413      	add	r3, r2
 800bc6e:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7a:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800bc7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d111      	bne.n	800bca8 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bc84:	79bb      	ldrb	r3, [r7, #6]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d107      	bne.n	800bc9a <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800bc8a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff feb0 	bl	800b9f8 <handle_epin_slave>
 800bc98:	e006      	b.n	800bca8 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bc9a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fe28 	bl	800b8f8 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bca8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcac:	3301      	adds	r3, #1
 800bcae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bcb2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bcb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d3c4      	bcc.n	800bc48 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bcbe:	bf00      	nop
 800bcc0:	bf00      	nop
 800bcc2:	3738      	adds	r7, #56	@ 0x38
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	0800ef68 	.word	0x0800ef68

0800bccc <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b098      	sub	sp, #96	@ 0x60
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bcdc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <dcd_int_handler+0x1e>
    rhport = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bcea:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bcee:	4a80      	ldr	r2, [pc, #512]	@ (800bef0 <dcd_int_handler+0x224>)
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	4413      	add	r3, r2
 800bcf4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bcf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800bcf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800bcfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd04:	4013      	ands	r3, r2
 800bd06:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800bd08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00d      	beq.n	800bd2e <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800bd12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bd18:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	f7fe f81a 	bl	8009d54 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7ff fc0e 	bl	800b544 <handle_bus_reset>
    usbd_spin_unlock(true);
 800bd28:	2001      	movs	r0, #1
 800bd2a:	f7fe f82d 	bl	8009d88 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800bd2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d007      	beq.n	800bd48 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800bd38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bd3e:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff fcea 	bl	800b71c <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800bd48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d01d      	beq.n	800bd8e <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800bd52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd58:	615a      	str	r2, [r3, #20]
 800bd5a:	79fb      	ldrb	r3, [r7, #7]
 800bd5c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800bd60:	2304      	movs	r3, #4
 800bd62:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800bd66:	2301      	movs	r3, #1
 800bd68:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800bd6c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800bd70:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800bd74:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bd78:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800bd7c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800bd80:	f107 0320 	add.w	r3, r7, #32
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd fde6 	bl	8009958 <dcd_event_handler>
}
 800bd8c:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800bd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da1d      	bge.n	800bdd0 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800bd94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd9a:	615a      	str	r2, [r3, #20]
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bda2:	2305      	movs	r3, #5
 800bda4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800bdae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bdb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800bdb6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800bdba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800bdbe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bdc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fd fdc5 	bl	8009958 <dcd_event_handler>
}
 800bdce:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800bdd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdd2:	f003 0304 	and.w	r3, r3, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d022      	beq.n	800be20 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800bdda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800bde0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bde2:	f003 0304 	and.w	r3, r3, #4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d017      	beq.n	800be1a <dcd_int_handler+0x14e>
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800bdfc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800be00:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800be02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be06:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800be08:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800be0c:	f107 0314 	add.w	r3, r7, #20
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7fd fda0 	bl	8009958 <dcd_event_handler>
}
 800be18:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800be1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be1e:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800be20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be22:	f003 0308 	and.w	r3, r3, #8
 800be26:	2b00      	cmp	r3, #0
 800be28:	d02e      	beq.n	800be88 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800be2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be2c:	2208      	movs	r2, #8
 800be2e:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800be30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be32:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800be3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bef4 <dcd_int_handler+0x228>)
 800be40:	79db      	ldrb	r3, [r3, #7]
 800be42:	f083 0301 	eor.w	r3, r3, #1
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800be4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	f023 0208 	bic.w	r2, r3, #8
 800be54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be56:	619a      	str	r2, [r3, #24]
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800be5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be62:	2301      	movs	r3, #1
 800be64:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800be68:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800be6c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800be6e:	2303      	movs	r3, #3
 800be70:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800be72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be74:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800be76:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800be7a:	f107 0308 	add.w	r3, r7, #8
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7fd fd69 	bl	8009958 <dcd_event_handler>
}
 800be86:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800be88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8a:	f003 0310 	and.w	r3, r3, #16
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d015      	beq.n	800bebe <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800be92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	f023 0210 	bic.w	r2, r3, #16
 800be9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be9c:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fc81 	bl	800b7a8 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800bea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	f003 0310 	and.w	r3, r3, #16
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f5      	bne.n	800be9e <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800beb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	f043 0210 	orr.w	r2, r3, #16
 800beba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bebc:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800bebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	2100      	movs	r1, #0
 800becc:	4618      	mov	r0, r3
 800bece:	f7ff fe79 	bl	800bbc4 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800bed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2101      	movs	r1, #1
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fe6f 	bl	800bbc4 <handle_ep_irq>
  }
}
 800bee6:	bf00      	nop
 800bee8:	3760      	adds	r7, #96	@ 0x60
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	0800ef68 	.word	0x0800ef68
 800bef4:	200014e4 	.word	0x200014e4

0800bef8 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d106      	bne.n	800bf18 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800bf16:	e005      	b.n	800bf24 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d152      	bne.n	800bfe8 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800bf42:	4b2c      	ldr	r3, [pc, #176]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a2c      	ldr	r2, [pc, #176]	@ (800bff8 <dwc2_phy_update+0xc8>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d302      	bcc.n	800bf52 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800bf4c:	2306      	movs	r3, #6
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	e041      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800bf52:	4b28      	ldr	r3, [pc, #160]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a29      	ldr	r2, [pc, #164]	@ (800bffc <dwc2_phy_update+0xcc>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d902      	bls.n	800bf62 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800bf5c:	2307      	movs	r3, #7
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e039      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800bf62:	4b24      	ldr	r3, [pc, #144]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a26      	ldr	r2, [pc, #152]	@ (800c000 <dwc2_phy_update+0xd0>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d302      	bcc.n	800bf72 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800bf6c:	2308      	movs	r3, #8
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	e031      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800bf72:	4b20      	ldr	r3, [pc, #128]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a23      	ldr	r2, [pc, #140]	@ (800c004 <dwc2_phy_update+0xd4>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d902      	bls.n	800bf82 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800bf7c:	2309      	movs	r3, #9
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e029      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800bf82:	4b1c      	ldr	r3, [pc, #112]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a20      	ldr	r2, [pc, #128]	@ (800c008 <dwc2_phy_update+0xd8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d902      	bls.n	800bf92 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800bf8c:	230a      	movs	r3, #10
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	e021      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800bf92:	4b18      	ldr	r3, [pc, #96]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a1d      	ldr	r2, [pc, #116]	@ (800c00c <dwc2_phy_update+0xdc>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d902      	bls.n	800bfa2 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800bf9c:	230b      	movs	r3, #11
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e019      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800bfa2:	4b14      	ldr	r3, [pc, #80]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a1a      	ldr	r2, [pc, #104]	@ (800c010 <dwc2_phy_update+0xe0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d302      	bcc.n	800bfb2 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800bfac:	230c      	movs	r3, #12
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	e011      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800bfb2:	4b10      	ldr	r3, [pc, #64]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a17      	ldr	r2, [pc, #92]	@ (800c014 <dwc2_phy_update+0xe4>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d302      	bcc.n	800bfc2 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800bfbc:	230d      	movs	r3, #13
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e009      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800bfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bff4 <dwc2_phy_update+0xc4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a14      	ldr	r2, [pc, #80]	@ (800c018 <dwc2_phy_update+0xe8>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d302      	bcc.n	800bfd2 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800bfcc:	230e      	movs	r3, #14
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	e001      	b.n	800bfd6 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800bfd2:	230f      	movs	r3, #15
 800bfd4:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	029b      	lsls	r3, r3, #10
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	60da      	str	r2, [r3, #12]
  }
}
 800bfe8:	bf00      	nop
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	20000208 	.word	0x20000208
 800bff8:	01e84800 	.word	0x01e84800
 800bffc:	01a39ddf 	.word	0x01a39ddf
 800c000:	016e3600 	.word	0x016e3600
 800c004:	014ca43f 	.word	0x014ca43f
 800c008:	01312cff 	.word	0x01312cff
 800c00c:	011a499f 	.word	0x011a499f
 800c010:	01067380 	.word	0x01067380
 800c014:	00f42400 	.word	0x00f42400
 800c018:	00e4e1c0 	.word	0x00e4e1c0

0800c01c <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	f043 0201 	orr.w	r2, r3, #1
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c034:	b29b      	uxth	r3, r3
 800c036:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d807      	bhi.n	800c04e <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c03e:	bf00      	nop
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f9      	bne.n	800c040 <reset_core+0x24>
 800c04c:	e010      	b.n	800c070 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c04e:	bf00      	nop
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d0f9      	beq.n	800c050 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c070:	bf00      	nop
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dafb      	bge.n	800c072 <reset_core+0x56>
}
 800c07a:	bf00      	nop
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff26 	bl	800bef8 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff ffb5 	bl	800c01c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c0b8:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c0c0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff ff30 	bl	800bf30 <dwc2_phy_update>
}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0ea:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0f0:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0f8:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c0fa:	7c3b      	ldrb	r3, [r7, #16]
 800c0fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b80      	cmp	r3, #128	@ 0x80
 800c104:	d114      	bne.n	800c130 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f043 0310 	orr.w	r3, r3, #16
 800c10c:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f023 0308 	bic.w	r3, r3, #8
 800c114:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c11c:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c124:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	e012      	b.n	800c156 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f023 0310 	bic.w	r3, r3, #16
 800c136:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c138:	7b7b      	ldrb	r3, [r7, #13]
 800c13a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d004      	beq.n	800c14e <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f043 0308 	orr.w	r3, r3, #8
 800c14a:	617b      	str	r3, [r7, #20]
 800c14c:	e003      	b.n	800c156 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f023 0308 	bic.w	r3, r3, #8
 800c154:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c15c:	7c3b      	ldrb	r3, [r7, #16]
 800c15e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff fec6 	bl	800bef8 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff ff55 	bl	800c01c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c178:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c17a:	7b7b      	ldrb	r3, [r7, #13]
 800c17c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <phy_hs_init+0xb4>
 800c186:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c18a:	e001      	b.n	800c190 <phy_hs_init+0xb8>
 800c18c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c190:	697a      	ldr	r2, [r7, #20]
 800c192:	4313      	orrs	r3, r2
 800c194:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c19c:	7c3b      	ldrb	r3, [r7, #16]
 800c19e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fec2 	bl	800bf30 <dwc2_phy_update>
}
 800c1ac:	bf00      	nop
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c0:	0c1b      	lsrs	r3, r3, #16
 800c1c2:	041b      	lsls	r3, r3, #16
 800c1c4:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c204 <check_dwc2+0x50>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d012      	beq.n	800c1f4 <check_dwc2+0x40>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4a0d      	ldr	r2, [pc, #52]	@ (800c208 <check_dwc2+0x54>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00e      	beq.n	800c1f4 <check_dwc2+0x40>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	4a0c      	ldr	r2, [pc, #48]	@ (800c20c <check_dwc2+0x58>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00a      	beq.n	800c1f4 <check_dwc2+0x40>
 800c1de:	4b0c      	ldr	r3, [pc, #48]	@ (800c210 <check_dwc2+0x5c>)
 800c1e0:	60bb      	str	r3, [r7, #8]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d000      	beq.n	800c1f0 <check_dwc2+0x3c>
 800c1ee:	be00      	bkpt	0x0000
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e000      	b.n	800c1f6 <check_dwc2+0x42>
#endif

  return true;
 800c1f4:	2301      	movs	r3, #1
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	4f540000 	.word	0x4f540000
 800c208:	55310000 	.word	0x55310000
 800c20c:	55320000 	.word	0x55320000
 800c210:	e000edf0 	.word	0xe000edf0

0800c214 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <dwc2_core_is_highspeed+0x16>
    return false;
 800c226:	2300      	movs	r3, #0
 800c228:	e00b      	b.n	800c242 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c22e:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c230:	7b3b      	ldrb	r3, [r7, #12]
 800c232:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bf14      	ite	ne
 800c23c:	2301      	movne	r3, #1
 800c23e:	2300      	moveq	r3, #0
 800c240:	b2db      	uxtb	r3, r3
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
	...

0800c250 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
 800c25a:	460b      	mov	r3, r1
 800c25c:	71bb      	strb	r3, [r7, #6]
 800c25e:	4613      	mov	r3, r2
 800c260:	717b      	strb	r3, [r7, #5]
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <dwc2_core_init+0x20>
    rhport = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	4a3b      	ldr	r2, [pc, #236]	@ (800c360 <dwc2_core_init+0x110>)
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	4413      	add	r3, r2
 800c278:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c27a:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c27c:	69f8      	ldr	r0, [r7, #28]
 800c27e:	f7ff ff99 	bl	800c1b4 <check_dwc2>
 800c282:	4603      	mov	r3, r0
 800c284:	f083 0301 	eor.w	r3, r3, #1
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <dwc2_core_init+0x54>
 800c28e:	4b35      	ldr	r3, [pc, #212]	@ (800c364 <dwc2_core_init+0x114>)
 800c290:	61bb      	str	r3, [r7, #24]
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0301 	and.w	r3, r3, #1
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d000      	beq.n	800c2a0 <dwc2_core_init+0x50>
 800c29e:	be00      	bkpt	0x0000
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e058      	b.n	800c356 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	f023 0201 	bic.w	r2, r3, #1
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c2b0:	79bb      	ldrb	r3, [r7, #6]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c2b6:	69f8      	ldr	r0, [r7, #28]
 800c2b8:	f7ff ff0e 	bl	800c0d8 <phy_hs_init>
 800c2bc:	e002      	b.n	800c2c4 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c2be:	69f8      	ldr	r0, [r7, #28]
 800c2c0:	f7ff fee2 	bl	800c088 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f043 0207 	orr.w	r2, r3, #7
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c2d6:	f023 020f 	bic.w	r2, r3, #15
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c2e8:	7afb      	ldrb	r3, [r7, #11]
 800c2ea:	019b      	lsls	r3, r3, #6
 800c2ec:	f043 0220 	orr.w	r2, r3, #32
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c2f4:	bf00      	nop
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	f003 0320 	and.w	r3, r3, #32
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1f9      	bne.n	800c2f6 <dwc2_core_init+0xa6>
}
 800c302:	bf00      	nop
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	2210      	movs	r2, #16
 800c30c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c30e:	bf00      	nop
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1f9      	bne.n	800c310 <dwc2_core_init+0xc0>
}
 800c31c:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	f04f 32ff 	mov.w	r2, #4294967295
 800c324:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	f04f 32ff 	mov.w	r2, #4294967295
 800c32c:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	2200      	movs	r2, #0
 800c332:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c334:	797b      	ldrb	r3, [r7, #5]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d006      	beq.n	800c348 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	609a      	str	r2, [r3, #8]
 800c346:	e005      	b.n	800c354 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	f043 0210 	orr.w	r2, r3, #16
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c354:	2301      	movs	r3, #1
}
 800c356:	4618      	mov	r0, r3
 800c358:	3720      	adds	r7, #32
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	0800ef78 	.word	0x0800ef78
 800c364:	e000edf0 	.word	0xe000edf0

0800c368 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c368:	b480      	push	{r7}
 800c36a:	b08f      	sub	sp, #60	@ 0x3c
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4613      	mov	r3, r2
 800c374:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c37c:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	089b      	lsrs	r3, r3, #2
 800c382:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c384:	e00b      	b.n	800c39e <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c38e:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	6a3a      	ldr	r2, [r7, #32]
 800c394:	601a      	str	r2, [r3, #0]
}
 800c396:	bf00      	nop
    dst += 4;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	3304      	adds	r3, #4
 800c39c:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c39e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c3a0:	1e5a      	subs	r2, r3, #1
 800c3a2:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1ee      	bne.n	800c386 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c3a8:	88fb      	ldrh	r3, [r7, #6]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	f003 0303 	and.w	r3, r3, #3
 800c3b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d020      	beq.n	800c3fe <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c4:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d907      	bls.n	800c3e6 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3dc:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	0a12      	lsrs	r2, r2, #8
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d907      	bls.n	800c3fe <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	3302      	adds	r3, #2
 800c3f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3f4:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	0c12      	lsrs	r2, r2, #16
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c3fe:	bf00      	nop
 800c400:	373c      	adds	r7, #60	@ 0x3c
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c40a:	b480      	push	{r7}
 800c40c:	b08b      	sub	sp, #44	@ 0x2c
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	461a      	mov	r2, r3
 800c416:	460b      	mov	r3, r1
 800c418:	72fb      	strb	r3, [r7, #11]
 800c41a:	4613      	mov	r3, r2
 800c41c:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	3301      	adds	r3, #1
 800c422:	031b      	lsls	r3, r3, #12
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	4413      	add	r3, r2
 800c428:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c42a:	893b      	ldrh	r3, [r7, #8]
 800c42c:	089b      	lsrs	r3, r3, #2
 800c42e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c430:	e008      	b.n	800c444 <dfifo_write_packet+0x3a>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	601a      	str	r2, [r3, #0]
    src += 4;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3304      	adds	r3, #4
 800c442:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c444:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c446:	1e5a      	subs	r2, r3, #1
 800c448:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1f1      	bne.n	800c432 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c44e:	893b      	ldrh	r3, [r7, #8]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f003 0303 	and.w	r3, r3, #3
 800c456:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c458:	7efb      	ldrb	r3, [r7, #27]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d019      	beq.n	800c492 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c464:	7efb      	ldrb	r3, [r7, #27]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d906      	bls.n	800c478 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3301      	adds	r3, #1
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	6a3a      	ldr	r2, [r7, #32]
 800c474:	4313      	orrs	r3, r2
 800c476:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c478:	7efb      	ldrb	r3, [r7, #27]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d906      	bls.n	800c48c <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3302      	adds	r3, #2
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	041b      	lsls	r3, r3, #16
 800c486:	6a3a      	ldr	r2, [r7, #32]
 800c488:	4313      	orrs	r3, r2
 800c48a:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	6a3a      	ldr	r2, [r7, #32]
 800c490:	601a      	str	r2, [r3, #0]
  }
}
 800c492:	bf00      	nop
 800c494:	372c      	adds	r7, #44	@ 0x2c
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
	...

0800c4a0 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	6039      	str	r1, [r7, #0]
 800c4aa:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d11f      	bne.n	800c4f2 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	723b      	strb	r3, [r7, #8]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	4619      	mov	r1, r3
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f7fc fa63 	bl	800898c <tud_rhport_init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f083 0301 	eor.w	r3, r3, #1
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00a      	beq.n	800c4e8 <tusb_rhport_init+0x48>
 800c4d2:	4b23      	ldr	r3, [pc, #140]	@ (800c560 <tusb_rhport_init+0xc0>)
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d000      	beq.n	800c4e4 <tusb_rhport_init+0x44>
 800c4e2:	be00      	bkpt	0x0000
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	e036      	b.n	800c556 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c4e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c564 <tusb_rhport_init+0xc4>)
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e031      	b.n	800c556 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d803      	bhi.n	800c500 <tusb_rhport_init+0x60>
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <tusb_rhport_init+0x76>
 800c500:	4b17      	ldr	r3, [pc, #92]	@ (800c560 <tusb_rhport_init+0xc0>)
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d000      	beq.n	800c512 <tusb_rhport_init+0x72>
 800c510:	be00      	bkpt	0x0000
 800c512:	2300      	movs	r3, #0
 800c514:	e01f      	b.n	800c556 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c516:	79fb      	ldrb	r3, [r7, #7]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	7811      	ldrb	r1, [r2, #0]
 800c51c:	4a11      	ldr	r2, [pc, #68]	@ (800c564 <tusb_rhport_init+0xc4>)
 800c51e:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d115      	bne.n	800c554 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fc fa2d 	bl	800898c <tud_rhport_init>
 800c532:	4603      	mov	r3, r0
 800c534:	f083 0301 	eor.w	r3, r3, #1
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <tusb_rhport_init+0xb4>
 800c53e:	4b08      	ldr	r3, [pc, #32]	@ (800c560 <tusb_rhport_init+0xc0>)
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d000      	beq.n	800c550 <tusb_rhport_init+0xb0>
 800c54e:	be00      	bkpt	0x0000
 800c550:	2300      	movs	r3, #0
 800c552:	e000      	b.n	800c556 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c554:	2301      	movs	r3, #1
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	e000edf0 	.word	0xe000edf0
 800c564:	200014f4 	.word	0x200014f4

0800c568 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <tu_edpt_claim+0x26>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <tu_edpt_claim+0x2a>
 800c58e:	2300      	movs	r3, #0
 800c590:	e01e      	b.n	800c5d0 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d108      	bne.n	800c5b2 <tu_edpt_claim+0x4a>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <tu_edpt_claim+0x4a>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <tu_edpt_claim+0x4c>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	7813      	ldrb	r3, [r2, #0]
 800c5c8:	f043 0304 	orr.w	r3, r3, #4
 800c5cc:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3714      	adds	r7, #20
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d108      	bne.n	800c606 <tu_edpt_release+0x2a>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <tu_edpt_release+0x2a>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <tu_edpt_release+0x2c>
 800c606:	2300      	movs	r3, #0
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d004      	beq.n	800c622 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	7813      	ldrb	r3, [r2, #0]
 800c61c:	f023 0304 	bic.w	r3, r3, #4
 800c620:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c622:	7bfb      	ldrb	r3, [r7, #15]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c630:	b480      	push	{r7}
 800c632:	b08b      	sub	sp, #44	@ 0x2c
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	460b      	mov	r3, r1
 800c63a:	70fb      	strb	r3, [r7, #3]
 800c63c:	4613      	mov	r3, r2
 800c63e:	70bb      	strb	r3, [r7, #2]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	889b      	ldrh	r3, [r3, #4]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c64e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c650:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	78db      	ldrb	r3, [r3, #3]
 800c656:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b03      	cmp	r3, #3
 800c65e:	d059      	beq.n	800c714 <tu_edpt_validate+0xe4>
 800c660:	2b03      	cmp	r3, #3
 800c662:	dc6e      	bgt.n	800c742 <tu_edpt_validate+0x112>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d002      	beq.n	800c66e <tu_edpt_validate+0x3e>
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d018      	beq.n	800c69e <tu_edpt_validate+0x6e>
 800c66c:	e069      	b.n	800c742 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	2b02      	cmp	r3, #2
 800c672:	d102      	bne.n	800c67a <tu_edpt_validate+0x4a>
 800c674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c678:	e001      	b.n	800c67e <tu_edpt_validate+0x4e>
 800c67a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c67e:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c680:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c682:	8a7b      	ldrh	r3, [r7, #18]
 800c684:	429a      	cmp	r2, r3
 800c686:	d95e      	bls.n	800c746 <tu_edpt_validate+0x116>
 800c688:	4b35      	ldr	r3, [pc, #212]	@ (800c760 <tu_edpt_validate+0x130>)
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	2b00      	cmp	r3, #0
 800c696:	d000      	beq.n	800c69a <tu_edpt_validate+0x6a>
 800c698:	be00      	bkpt	0x0000
 800c69a:	2300      	movs	r3, #0
 800c69c:	e059      	b.n	800c752 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d10e      	bne.n	800c6c2 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c6a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6aa:	d04e      	beq.n	800c74a <tu_edpt_validate+0x11a>
 800c6ac:	4b2c      	ldr	r3, [pc, #176]	@ (800c760 <tu_edpt_validate+0x130>)
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d000      	beq.n	800c6be <tu_edpt_validate+0x8e>
 800c6bc:	be00      	bkpt	0x0000
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e047      	b.n	800c752 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c6c2:	78bb      	ldrb	r3, [r7, #2]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00e      	beq.n	800c6e6 <tu_edpt_validate+0xb6>
 800c6c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6ce:	d10a      	bne.n	800c6e6 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6dc:	711a      	strb	r2, [r3, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800c6e2:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800c6e4:	e031      	b.n	800c74a <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800c6e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6e8:	2b08      	cmp	r3, #8
 800c6ea:	d02e      	beq.n	800c74a <tu_edpt_validate+0x11a>
 800c6ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6ee:	2b10      	cmp	r3, #16
 800c6f0:	d02b      	beq.n	800c74a <tu_edpt_validate+0x11a>
 800c6f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6f4:	2b20      	cmp	r3, #32
 800c6f6:	d028      	beq.n	800c74a <tu_edpt_validate+0x11a>
 800c6f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6fa:	2b40      	cmp	r3, #64	@ 0x40
 800c6fc:	d025      	beq.n	800c74a <tu_edpt_validate+0x11a>
 800c6fe:	4b18      	ldr	r3, [pc, #96]	@ (800c760 <tu_edpt_validate+0x130>)
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d000      	beq.n	800c710 <tu_edpt_validate+0xe0>
 800c70e:	be00      	bkpt	0x0000
 800c710:	2300      	movs	r3, #0
 800c712:	e01e      	b.n	800c752 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800c714:	78fb      	ldrb	r3, [r7, #3]
 800c716:	2b02      	cmp	r3, #2
 800c718:	d102      	bne.n	800c720 <tu_edpt_validate+0xf0>
 800c71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c71e:	e000      	b.n	800c722 <tu_edpt_validate+0xf2>
 800c720:	2340      	movs	r3, #64	@ 0x40
 800c722:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800c724:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c728:	429a      	cmp	r2, r3
 800c72a:	d910      	bls.n	800c74e <tu_edpt_validate+0x11e>
 800c72c:	4b0c      	ldr	r3, [pc, #48]	@ (800c760 <tu_edpt_validate+0x130>)
 800c72e:	623b      	str	r3, [r7, #32]
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d000      	beq.n	800c73e <tu_edpt_validate+0x10e>
 800c73c:	be00      	bkpt	0x0000
 800c73e:	2300      	movs	r3, #0
 800c740:	e007      	b.n	800c752 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800c742:	2300      	movs	r3, #0
 800c744:	e005      	b.n	800c752 <tu_edpt_validate+0x122>
      break;
 800c746:	bf00      	nop
 800c748:	e002      	b.n	800c750 <tu_edpt_validate+0x120>
      break;
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <tu_edpt_validate+0x120>
      break;
 800c74e:	bf00      	nop
  }

  return true;
 800c750:	2301      	movs	r3, #1
}
 800c752:	4618      	mov	r0, r3
 800c754:	372c      	adds	r7, #44	@ 0x2c
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	e000edf0 	.word	0xe000edf0

0800c764 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800c764:	b480      	push	{r7}
 800c766:	b08d      	sub	sp, #52	@ 0x34
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	4611      	mov	r1, r2
 800c770:	461a      	mov	r2, r3
 800c772:	460b      	mov	r3, r1
 800c774:	80fb      	strh	r3, [r7, #6]
 800c776:	4613      	mov	r3, r2
 800c778:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c782:	4413      	add	r3, r2
 800c784:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800c786:	e027      	b.n	800c7d8 <tu_edpt_bind_driver+0x74>
 800c788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c78a:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	3301      	adds	r3, #1
 800c790:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800c792:	2b05      	cmp	r3, #5
 800c794:	d116      	bne.n	800c7c4 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800c796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c798:	789b      	ldrb	r3, [r3, #2]
 800c79a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c79e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7a2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800c7a4:	7fbb      	ldrb	r3, [r7, #30]
 800c7a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7aa:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c7b6:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800c7b8:	7ffa      	ldrb	r2, [r7, #31]
 800c7ba:	09d2      	lsrs	r2, r2, #7
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	4611      	mov	r1, r2
 800c7c0:	797a      	ldrb	r2, [r7, #5]
 800c7c2:	545a      	strb	r2, [r3, r1]
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800c7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800c7d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3d3      	bcc.n	800c788 <tu_edpt_bind_driver+0x24>
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
 800c7e4:	3734      	adds	r7, #52	@ 0x34
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <atoi>:
 800c7ee:	220a      	movs	r2, #10
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	f000 b87b 	b.w	800c8ec <strtol>
	...

0800c7f8 <_strtol_l.isra.0>:
 800c7f8:	2b24      	cmp	r3, #36	@ 0x24
 800c7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fe:	4686      	mov	lr, r0
 800c800:	4690      	mov	r8, r2
 800c802:	d801      	bhi.n	800c808 <_strtol_l.isra.0+0x10>
 800c804:	2b01      	cmp	r3, #1
 800c806:	d106      	bne.n	800c816 <_strtol_l.isra.0+0x1e>
 800c808:	f000 fa82 	bl	800cd10 <__errno>
 800c80c:	2316      	movs	r3, #22
 800c80e:	6003      	str	r3, [r0, #0]
 800c810:	2000      	movs	r0, #0
 800c812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c816:	4834      	ldr	r0, [pc, #208]	@ (800c8e8 <_strtol_l.isra.0+0xf0>)
 800c818:	460d      	mov	r5, r1
 800c81a:	462a      	mov	r2, r5
 800c81c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c820:	5d06      	ldrb	r6, [r0, r4]
 800c822:	f016 0608 	ands.w	r6, r6, #8
 800c826:	d1f8      	bne.n	800c81a <_strtol_l.isra.0+0x22>
 800c828:	2c2d      	cmp	r4, #45	@ 0x2d
 800c82a:	d110      	bne.n	800c84e <_strtol_l.isra.0+0x56>
 800c82c:	782c      	ldrb	r4, [r5, #0]
 800c82e:	2601      	movs	r6, #1
 800c830:	1c95      	adds	r5, r2, #2
 800c832:	f033 0210 	bics.w	r2, r3, #16
 800c836:	d115      	bne.n	800c864 <_strtol_l.isra.0+0x6c>
 800c838:	2c30      	cmp	r4, #48	@ 0x30
 800c83a:	d10d      	bne.n	800c858 <_strtol_l.isra.0+0x60>
 800c83c:	782a      	ldrb	r2, [r5, #0]
 800c83e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c842:	2a58      	cmp	r2, #88	@ 0x58
 800c844:	d108      	bne.n	800c858 <_strtol_l.isra.0+0x60>
 800c846:	786c      	ldrb	r4, [r5, #1]
 800c848:	3502      	adds	r5, #2
 800c84a:	2310      	movs	r3, #16
 800c84c:	e00a      	b.n	800c864 <_strtol_l.isra.0+0x6c>
 800c84e:	2c2b      	cmp	r4, #43	@ 0x2b
 800c850:	bf04      	itt	eq
 800c852:	782c      	ldrbeq	r4, [r5, #0]
 800c854:	1c95      	addeq	r5, r2, #2
 800c856:	e7ec      	b.n	800c832 <_strtol_l.isra.0+0x3a>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1f6      	bne.n	800c84a <_strtol_l.isra.0+0x52>
 800c85c:	2c30      	cmp	r4, #48	@ 0x30
 800c85e:	bf14      	ite	ne
 800c860:	230a      	movne	r3, #10
 800c862:	2308      	moveq	r3, #8
 800c864:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c868:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c86c:	2200      	movs	r2, #0
 800c86e:	fbbc f9f3 	udiv	r9, ip, r3
 800c872:	4610      	mov	r0, r2
 800c874:	fb03 ca19 	mls	sl, r3, r9, ip
 800c878:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c87c:	2f09      	cmp	r7, #9
 800c87e:	d80f      	bhi.n	800c8a0 <_strtol_l.isra.0+0xa8>
 800c880:	463c      	mov	r4, r7
 800c882:	42a3      	cmp	r3, r4
 800c884:	dd1b      	ble.n	800c8be <_strtol_l.isra.0+0xc6>
 800c886:	1c57      	adds	r7, r2, #1
 800c888:	d007      	beq.n	800c89a <_strtol_l.isra.0+0xa2>
 800c88a:	4581      	cmp	r9, r0
 800c88c:	d314      	bcc.n	800c8b8 <_strtol_l.isra.0+0xc0>
 800c88e:	d101      	bne.n	800c894 <_strtol_l.isra.0+0x9c>
 800c890:	45a2      	cmp	sl, r4
 800c892:	db11      	blt.n	800c8b8 <_strtol_l.isra.0+0xc0>
 800c894:	fb00 4003 	mla	r0, r0, r3, r4
 800c898:	2201      	movs	r2, #1
 800c89a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c89e:	e7eb      	b.n	800c878 <_strtol_l.isra.0+0x80>
 800c8a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c8a4:	2f19      	cmp	r7, #25
 800c8a6:	d801      	bhi.n	800c8ac <_strtol_l.isra.0+0xb4>
 800c8a8:	3c37      	subs	r4, #55	@ 0x37
 800c8aa:	e7ea      	b.n	800c882 <_strtol_l.isra.0+0x8a>
 800c8ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8b0:	2f19      	cmp	r7, #25
 800c8b2:	d804      	bhi.n	800c8be <_strtol_l.isra.0+0xc6>
 800c8b4:	3c57      	subs	r4, #87	@ 0x57
 800c8b6:	e7e4      	b.n	800c882 <_strtol_l.isra.0+0x8a>
 800c8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8bc:	e7ed      	b.n	800c89a <_strtol_l.isra.0+0xa2>
 800c8be:	1c53      	adds	r3, r2, #1
 800c8c0:	d108      	bne.n	800c8d4 <_strtol_l.isra.0+0xdc>
 800c8c2:	2322      	movs	r3, #34	@ 0x22
 800c8c4:	f8ce 3000 	str.w	r3, [lr]
 800c8c8:	4660      	mov	r0, ip
 800c8ca:	f1b8 0f00 	cmp.w	r8, #0
 800c8ce:	d0a0      	beq.n	800c812 <_strtol_l.isra.0+0x1a>
 800c8d0:	1e69      	subs	r1, r5, #1
 800c8d2:	e006      	b.n	800c8e2 <_strtol_l.isra.0+0xea>
 800c8d4:	b106      	cbz	r6, 800c8d8 <_strtol_l.isra.0+0xe0>
 800c8d6:	4240      	negs	r0, r0
 800c8d8:	f1b8 0f00 	cmp.w	r8, #0
 800c8dc:	d099      	beq.n	800c812 <_strtol_l.isra.0+0x1a>
 800c8de:	2a00      	cmp	r2, #0
 800c8e0:	d1f6      	bne.n	800c8d0 <_strtol_l.isra.0+0xd8>
 800c8e2:	f8c8 1000 	str.w	r1, [r8]
 800c8e6:	e794      	b.n	800c812 <_strtol_l.isra.0+0x1a>
 800c8e8:	0800ef89 	.word	0x0800ef89

0800c8ec <strtol>:
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	460a      	mov	r2, r1
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	4802      	ldr	r0, [pc, #8]	@ (800c8fc <strtol+0x10>)
 800c8f4:	6800      	ldr	r0, [r0, #0]
 800c8f6:	f7ff bf7f 	b.w	800c7f8 <_strtol_l.isra.0>
 800c8fa:	bf00      	nop
 800c8fc:	20000250 	.word	0x20000250

0800c900 <std>:
 800c900:	2300      	movs	r3, #0
 800c902:	b510      	push	{r4, lr}
 800c904:	4604      	mov	r4, r0
 800c906:	e9c0 3300 	strd	r3, r3, [r0]
 800c90a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c90e:	6083      	str	r3, [r0, #8]
 800c910:	8181      	strh	r1, [r0, #12]
 800c912:	6643      	str	r3, [r0, #100]	@ 0x64
 800c914:	81c2      	strh	r2, [r0, #14]
 800c916:	6183      	str	r3, [r0, #24]
 800c918:	4619      	mov	r1, r3
 800c91a:	2208      	movs	r2, #8
 800c91c:	305c      	adds	r0, #92	@ 0x5c
 800c91e:	f000 f94c 	bl	800cbba <memset>
 800c922:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <std+0x58>)
 800c924:	6263      	str	r3, [r4, #36]	@ 0x24
 800c926:	4b0d      	ldr	r3, [pc, #52]	@ (800c95c <std+0x5c>)
 800c928:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c92a:	4b0d      	ldr	r3, [pc, #52]	@ (800c960 <std+0x60>)
 800c92c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c92e:	4b0d      	ldr	r3, [pc, #52]	@ (800c964 <std+0x64>)
 800c930:	6323      	str	r3, [r4, #48]	@ 0x30
 800c932:	4b0d      	ldr	r3, [pc, #52]	@ (800c968 <std+0x68>)
 800c934:	6224      	str	r4, [r4, #32]
 800c936:	429c      	cmp	r4, r3
 800c938:	d006      	beq.n	800c948 <std+0x48>
 800c93a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c93e:	4294      	cmp	r4, r2
 800c940:	d002      	beq.n	800c948 <std+0x48>
 800c942:	33d0      	adds	r3, #208	@ 0xd0
 800c944:	429c      	cmp	r4, r3
 800c946:	d105      	bne.n	800c954 <std+0x54>
 800c948:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c950:	f000 ba08 	b.w	800cd64 <__retarget_lock_init_recursive>
 800c954:	bd10      	pop	{r4, pc}
 800c956:	bf00      	nop
 800c958:	0800cb35 	.word	0x0800cb35
 800c95c:	0800cb57 	.word	0x0800cb57
 800c960:	0800cb8f 	.word	0x0800cb8f
 800c964:	0800cbb3 	.word	0x0800cbb3
 800c968:	200014f8 	.word	0x200014f8

0800c96c <stdio_exit_handler>:
 800c96c:	4a02      	ldr	r2, [pc, #8]	@ (800c978 <stdio_exit_handler+0xc>)
 800c96e:	4903      	ldr	r1, [pc, #12]	@ (800c97c <stdio_exit_handler+0x10>)
 800c970:	4803      	ldr	r0, [pc, #12]	@ (800c980 <stdio_exit_handler+0x14>)
 800c972:	f000 b869 	b.w	800ca48 <_fwalk_sglue>
 800c976:	bf00      	nop
 800c978:	20000244 	.word	0x20000244
 800c97c:	0800d919 	.word	0x0800d919
 800c980:	20000254 	.word	0x20000254

0800c984 <cleanup_stdio>:
 800c984:	6841      	ldr	r1, [r0, #4]
 800c986:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b8 <cleanup_stdio+0x34>)
 800c988:	4299      	cmp	r1, r3
 800c98a:	b510      	push	{r4, lr}
 800c98c:	4604      	mov	r4, r0
 800c98e:	d001      	beq.n	800c994 <cleanup_stdio+0x10>
 800c990:	f000 ffc2 	bl	800d918 <_fflush_r>
 800c994:	68a1      	ldr	r1, [r4, #8]
 800c996:	4b09      	ldr	r3, [pc, #36]	@ (800c9bc <cleanup_stdio+0x38>)
 800c998:	4299      	cmp	r1, r3
 800c99a:	d002      	beq.n	800c9a2 <cleanup_stdio+0x1e>
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 ffbb 	bl	800d918 <_fflush_r>
 800c9a2:	68e1      	ldr	r1, [r4, #12]
 800c9a4:	4b06      	ldr	r3, [pc, #24]	@ (800c9c0 <cleanup_stdio+0x3c>)
 800c9a6:	4299      	cmp	r1, r3
 800c9a8:	d004      	beq.n	800c9b4 <cleanup_stdio+0x30>
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b0:	f000 bfb2 	b.w	800d918 <_fflush_r>
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200014f8 	.word	0x200014f8
 800c9bc:	20001560 	.word	0x20001560
 800c9c0:	200015c8 	.word	0x200015c8

0800c9c4 <global_stdio_init.part.0>:
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f4 <global_stdio_init.part.0+0x30>)
 800c9c8:	4c0b      	ldr	r4, [pc, #44]	@ (800c9f8 <global_stdio_init.part.0+0x34>)
 800c9ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c9fc <global_stdio_init.part.0+0x38>)
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2104      	movs	r1, #4
 800c9d4:	f7ff ff94 	bl	800c900 <std>
 800c9d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c9dc:	2201      	movs	r2, #1
 800c9de:	2109      	movs	r1, #9
 800c9e0:	f7ff ff8e 	bl	800c900 <std>
 800c9e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9ee:	2112      	movs	r1, #18
 800c9f0:	f7ff bf86 	b.w	800c900 <std>
 800c9f4:	20001630 	.word	0x20001630
 800c9f8:	200014f8 	.word	0x200014f8
 800c9fc:	0800c96d 	.word	0x0800c96d

0800ca00 <__sfp_lock_acquire>:
 800ca00:	4801      	ldr	r0, [pc, #4]	@ (800ca08 <__sfp_lock_acquire+0x8>)
 800ca02:	f000 b9b0 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800ca06:	bf00      	nop
 800ca08:	20001639 	.word	0x20001639

0800ca0c <__sfp_lock_release>:
 800ca0c:	4801      	ldr	r0, [pc, #4]	@ (800ca14 <__sfp_lock_release+0x8>)
 800ca0e:	f000 b9ab 	b.w	800cd68 <__retarget_lock_release_recursive>
 800ca12:	bf00      	nop
 800ca14:	20001639 	.word	0x20001639

0800ca18 <__sinit>:
 800ca18:	b510      	push	{r4, lr}
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	f7ff fff0 	bl	800ca00 <__sfp_lock_acquire>
 800ca20:	6a23      	ldr	r3, [r4, #32]
 800ca22:	b11b      	cbz	r3, 800ca2c <__sinit+0x14>
 800ca24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca28:	f7ff bff0 	b.w	800ca0c <__sfp_lock_release>
 800ca2c:	4b04      	ldr	r3, [pc, #16]	@ (800ca40 <__sinit+0x28>)
 800ca2e:	6223      	str	r3, [r4, #32]
 800ca30:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <__sinit+0x2c>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1f5      	bne.n	800ca24 <__sinit+0xc>
 800ca38:	f7ff ffc4 	bl	800c9c4 <global_stdio_init.part.0>
 800ca3c:	e7f2      	b.n	800ca24 <__sinit+0xc>
 800ca3e:	bf00      	nop
 800ca40:	0800c985 	.word	0x0800c985
 800ca44:	20001630 	.word	0x20001630

0800ca48 <_fwalk_sglue>:
 800ca48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca4c:	4607      	mov	r7, r0
 800ca4e:	4688      	mov	r8, r1
 800ca50:	4614      	mov	r4, r2
 800ca52:	2600      	movs	r6, #0
 800ca54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca58:	f1b9 0901 	subs.w	r9, r9, #1
 800ca5c:	d505      	bpl.n	800ca6a <_fwalk_sglue+0x22>
 800ca5e:	6824      	ldr	r4, [r4, #0]
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	d1f7      	bne.n	800ca54 <_fwalk_sglue+0xc>
 800ca64:	4630      	mov	r0, r6
 800ca66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d907      	bls.n	800ca80 <_fwalk_sglue+0x38>
 800ca70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca74:	3301      	adds	r3, #1
 800ca76:	d003      	beq.n	800ca80 <_fwalk_sglue+0x38>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	47c0      	blx	r8
 800ca7e:	4306      	orrs	r6, r0
 800ca80:	3568      	adds	r5, #104	@ 0x68
 800ca82:	e7e9      	b.n	800ca58 <_fwalk_sglue+0x10>

0800ca84 <sniprintf>:
 800ca84:	b40c      	push	{r2, r3}
 800ca86:	b530      	push	{r4, r5, lr}
 800ca88:	4b18      	ldr	r3, [pc, #96]	@ (800caec <sniprintf+0x68>)
 800ca8a:	1e0c      	subs	r4, r1, #0
 800ca8c:	681d      	ldr	r5, [r3, #0]
 800ca8e:	b09d      	sub	sp, #116	@ 0x74
 800ca90:	da08      	bge.n	800caa4 <sniprintf+0x20>
 800ca92:	238b      	movs	r3, #139	@ 0x8b
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9a:	b01d      	add	sp, #116	@ 0x74
 800ca9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caa0:	b002      	add	sp, #8
 800caa2:	4770      	bx	lr
 800caa4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800caa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800caac:	f04f 0300 	mov.w	r3, #0
 800cab0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cab2:	bf14      	ite	ne
 800cab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cab8:	4623      	moveq	r3, r4
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	9307      	str	r3, [sp, #28]
 800cabe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cac2:	9002      	str	r0, [sp, #8]
 800cac4:	9006      	str	r0, [sp, #24]
 800cac6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800caca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cacc:	ab21      	add	r3, sp, #132	@ 0x84
 800cace:	a902      	add	r1, sp, #8
 800cad0:	4628      	mov	r0, r5
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	f000 fad2 	bl	800d07c <_svfiprintf_r>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	bfbc      	itt	lt
 800cadc:	238b      	movlt	r3, #139	@ 0x8b
 800cade:	602b      	strlt	r3, [r5, #0]
 800cae0:	2c00      	cmp	r4, #0
 800cae2:	d0da      	beq.n	800ca9a <sniprintf+0x16>
 800cae4:	9b02      	ldr	r3, [sp, #8]
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	e7d6      	b.n	800ca9a <sniprintf+0x16>
 800caec:	20000250 	.word	0x20000250

0800caf0 <siprintf>:
 800caf0:	b40e      	push	{r1, r2, r3}
 800caf2:	b510      	push	{r4, lr}
 800caf4:	b09d      	sub	sp, #116	@ 0x74
 800caf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800caf8:	9002      	str	r0, [sp, #8]
 800cafa:	9006      	str	r0, [sp, #24]
 800cafc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb00:	480a      	ldr	r0, [pc, #40]	@ (800cb2c <siprintf+0x3c>)
 800cb02:	9107      	str	r1, [sp, #28]
 800cb04:	9104      	str	r1, [sp, #16]
 800cb06:	490a      	ldr	r1, [pc, #40]	@ (800cb30 <siprintf+0x40>)
 800cb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0c:	9105      	str	r1, [sp, #20]
 800cb0e:	2400      	movs	r4, #0
 800cb10:	a902      	add	r1, sp, #8
 800cb12:	6800      	ldr	r0, [r0, #0]
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb18:	f000 fab0 	bl	800d07c <_svfiprintf_r>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	701c      	strb	r4, [r3, #0]
 800cb20:	b01d      	add	sp, #116	@ 0x74
 800cb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb26:	b003      	add	sp, #12
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20000250 	.word	0x20000250
 800cb30:	ffff0208 	.word	0xffff0208

0800cb34 <__sread>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	460c      	mov	r4, r1
 800cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3c:	f000 f8c4 	bl	800ccc8 <_read_r>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	bfab      	itete	ge
 800cb44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb46:	89a3      	ldrhlt	r3, [r4, #12]
 800cb48:	181b      	addge	r3, r3, r0
 800cb4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cb4e:	bfac      	ite	ge
 800cb50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cb52:	81a3      	strhlt	r3, [r4, #12]
 800cb54:	bd10      	pop	{r4, pc}

0800cb56 <__swrite>:
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	461f      	mov	r7, r3
 800cb5c:	898b      	ldrh	r3, [r1, #12]
 800cb5e:	05db      	lsls	r3, r3, #23
 800cb60:	4605      	mov	r5, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	4616      	mov	r6, r2
 800cb66:	d505      	bpl.n	800cb74 <__swrite+0x1e>
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f000 f898 	bl	800cca4 <_lseek_r>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	4632      	mov	r2, r6
 800cb82:	463b      	mov	r3, r7
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8a:	f000 b8af 	b.w	800ccec <_write_r>

0800cb8e <__sseek>:
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	460c      	mov	r4, r1
 800cb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb96:	f000 f885 	bl	800cca4 <_lseek_r>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	bf15      	itete	ne
 800cba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cbaa:	81a3      	strheq	r3, [r4, #12]
 800cbac:	bf18      	it	ne
 800cbae:	81a3      	strhne	r3, [r4, #12]
 800cbb0:	bd10      	pop	{r4, pc}

0800cbb2 <__sclose>:
 800cbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb6:	f000 b865 	b.w	800cc84 <_close_r>

0800cbba <memset>:
 800cbba:	4402      	add	r2, r0
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d100      	bne.n	800cbc4 <memset+0xa>
 800cbc2:	4770      	bx	lr
 800cbc4:	f803 1b01 	strb.w	r1, [r3], #1
 800cbc8:	e7f9      	b.n	800cbbe <memset+0x4>
	...

0800cbcc <strtok>:
 800cbcc:	4b16      	ldr	r3, [pc, #88]	@ (800cc28 <strtok+0x5c>)
 800cbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd2:	681f      	ldr	r7, [r3, #0]
 800cbd4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	460e      	mov	r6, r1
 800cbda:	b9ec      	cbnz	r4, 800cc18 <strtok+0x4c>
 800cbdc:	2050      	movs	r0, #80	@ 0x50
 800cbde:	f000 f93b 	bl	800ce58 <malloc>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	6478      	str	r0, [r7, #68]	@ 0x44
 800cbe6:	b920      	cbnz	r0, 800cbf2 <strtok+0x26>
 800cbe8:	4b10      	ldr	r3, [pc, #64]	@ (800cc2c <strtok+0x60>)
 800cbea:	4811      	ldr	r0, [pc, #68]	@ (800cc30 <strtok+0x64>)
 800cbec:	215b      	movs	r1, #91	@ 0x5b
 800cbee:	f000 f8cb 	bl	800cd88 <__assert_func>
 800cbf2:	e9c0 4400 	strd	r4, r4, [r0]
 800cbf6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cbfa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cbfe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cc02:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cc06:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cc0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cc0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cc12:	6184      	str	r4, [r0, #24]
 800cc14:	7704      	strb	r4, [r0, #28]
 800cc16:	6244      	str	r4, [r0, #36]	@ 0x24
 800cc18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc24:	f000 b806 	b.w	800cc34 <__strtok_r>
 800cc28:	20000250 	.word	0x20000250
 800cc2c:	0800f089 	.word	0x0800f089
 800cc30:	0800f0a0 	.word	0x0800f0a0

0800cc34 <__strtok_r>:
 800cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc36:	4604      	mov	r4, r0
 800cc38:	b908      	cbnz	r0, 800cc3e <__strtok_r+0xa>
 800cc3a:	6814      	ldr	r4, [r2, #0]
 800cc3c:	b144      	cbz	r4, 800cc50 <__strtok_r+0x1c>
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cc44:	460f      	mov	r7, r1
 800cc46:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cc4a:	b91e      	cbnz	r6, 800cc54 <__strtok_r+0x20>
 800cc4c:	b965      	cbnz	r5, 800cc68 <__strtok_r+0x34>
 800cc4e:	6015      	str	r5, [r2, #0]
 800cc50:	2000      	movs	r0, #0
 800cc52:	e005      	b.n	800cc60 <__strtok_r+0x2c>
 800cc54:	42b5      	cmp	r5, r6
 800cc56:	d1f6      	bne.n	800cc46 <__strtok_r+0x12>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1f0      	bne.n	800cc3e <__strtok_r+0xa>
 800cc5c:	6014      	str	r4, [r2, #0]
 800cc5e:	7003      	strb	r3, [r0, #0]
 800cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc62:	461c      	mov	r4, r3
 800cc64:	e00c      	b.n	800cc80 <__strtok_r+0x4c>
 800cc66:	b91d      	cbnz	r5, 800cc70 <__strtok_r+0x3c>
 800cc68:	4627      	mov	r7, r4
 800cc6a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc6e:	460e      	mov	r6, r1
 800cc70:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cc74:	42ab      	cmp	r3, r5
 800cc76:	d1f6      	bne.n	800cc66 <__strtok_r+0x32>
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0f2      	beq.n	800cc62 <__strtok_r+0x2e>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	703b      	strb	r3, [r7, #0]
 800cc80:	6014      	str	r4, [r2, #0]
 800cc82:	e7ed      	b.n	800cc60 <__strtok_r+0x2c>

0800cc84 <_close_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	@ (800cca0 <_close_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f6 fe55 	bl	800393e <_close>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_close_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_close_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	20001634 	.word	0x20001634

0800cca4 <_lseek_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d07      	ldr	r5, [pc, #28]	@ (800ccc4 <_lseek_r+0x20>)
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f6 fe6a 	bl	800398c <_lseek>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_lseek_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_lseek_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	20001634 	.word	0x20001634

0800ccc8 <_read_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d07      	ldr	r5, [pc, #28]	@ (800cce8 <_read_r+0x20>)
 800cccc:	4604      	mov	r4, r0
 800ccce:	4608      	mov	r0, r1
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f7f6 fdf8 	bl	80038cc <_read>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_read_r+0x1e>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_read_r+0x1e>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	20001634 	.word	0x20001634

0800ccec <_write_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	@ (800cd0c <_write_r+0x20>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7f6 fe03 	bl	8003906 <_write>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_write_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_write_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	20001634 	.word	0x20001634

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	@ (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	20000250 	.word	0x20000250

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800cd54 <__libc_init_array+0x38>)
 800cd20:	4c0d      	ldr	r4, [pc, #52]	@ (800cd58 <__libc_init_array+0x3c>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	2600      	movs	r6, #0
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd5c <__libc_init_array+0x40>)
 800cd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800cd60 <__libc_init_array+0x44>)
 800cd30:	f000 fff0 	bl	800dd14 <_init>
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	10a4      	asrs	r4, r4, #2
 800cd38:	2600      	movs	r6, #0
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800f174 	.word	0x0800f174
 800cd58:	0800f174 	.word	0x0800f174
 800cd5c:	0800f174 	.word	0x0800f174
 800cd60:	0800f178 	.word	0x0800f178

0800cd64 <__retarget_lock_init_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <__retarget_lock_acquire_recursive>:
 800cd66:	4770      	bx	lr

0800cd68 <__retarget_lock_release_recursive>:
 800cd68:	4770      	bx	lr

0800cd6a <memcpy>:
 800cd6a:	440a      	add	r2, r1
 800cd6c:	4291      	cmp	r1, r2
 800cd6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd72:	d100      	bne.n	800cd76 <memcpy+0xc>
 800cd74:	4770      	bx	lr
 800cd76:	b510      	push	{r4, lr}
 800cd78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd80:	4291      	cmp	r1, r2
 800cd82:	d1f9      	bne.n	800cd78 <memcpy+0xe>
 800cd84:	bd10      	pop	{r4, pc}
	...

0800cd88 <__assert_func>:
 800cd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd8a:	4614      	mov	r4, r2
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	4b09      	ldr	r3, [pc, #36]	@ (800cdb4 <__assert_func+0x2c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4605      	mov	r5, r0
 800cd94:	68d8      	ldr	r0, [r3, #12]
 800cd96:	b14c      	cbz	r4, 800cdac <__assert_func+0x24>
 800cd98:	4b07      	ldr	r3, [pc, #28]	@ (800cdb8 <__assert_func+0x30>)
 800cd9a:	9100      	str	r1, [sp, #0]
 800cd9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cda0:	4906      	ldr	r1, [pc, #24]	@ (800cdbc <__assert_func+0x34>)
 800cda2:	462b      	mov	r3, r5
 800cda4:	f000 fde0 	bl	800d968 <fiprintf>
 800cda8:	f000 feae 	bl	800db08 <abort>
 800cdac:	4b04      	ldr	r3, [pc, #16]	@ (800cdc0 <__assert_func+0x38>)
 800cdae:	461c      	mov	r4, r3
 800cdb0:	e7f3      	b.n	800cd9a <__assert_func+0x12>
 800cdb2:	bf00      	nop
 800cdb4:	20000250 	.word	0x20000250
 800cdb8:	0800f0fa 	.word	0x0800f0fa
 800cdbc:	0800f107 	.word	0x0800f107
 800cdc0:	0800f135 	.word	0x0800f135

0800cdc4 <_free_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	d041      	beq.n	800ce50 <_free_r+0x8c>
 800cdcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd0:	1f0c      	subs	r4, r1, #4
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	bfb8      	it	lt
 800cdd6:	18e4      	addlt	r4, r4, r3
 800cdd8:	f000 f8e8 	bl	800cfac <__malloc_lock>
 800cddc:	4a1d      	ldr	r2, [pc, #116]	@ (800ce54 <_free_r+0x90>)
 800cdde:	6813      	ldr	r3, [r2, #0]
 800cde0:	b933      	cbnz	r3, 800cdf0 <_free_r+0x2c>
 800cde2:	6063      	str	r3, [r4, #4]
 800cde4:	6014      	str	r4, [r2, #0]
 800cde6:	4628      	mov	r0, r5
 800cde8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdec:	f000 b8e4 	b.w	800cfb8 <__malloc_unlock>
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d908      	bls.n	800ce06 <_free_r+0x42>
 800cdf4:	6820      	ldr	r0, [r4, #0]
 800cdf6:	1821      	adds	r1, r4, r0
 800cdf8:	428b      	cmp	r3, r1
 800cdfa:	bf01      	itttt	eq
 800cdfc:	6819      	ldreq	r1, [r3, #0]
 800cdfe:	685b      	ldreq	r3, [r3, #4]
 800ce00:	1809      	addeq	r1, r1, r0
 800ce02:	6021      	streq	r1, [r4, #0]
 800ce04:	e7ed      	b.n	800cde2 <_free_r+0x1e>
 800ce06:	461a      	mov	r2, r3
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	b10b      	cbz	r3, 800ce10 <_free_r+0x4c>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d9fa      	bls.n	800ce06 <_free_r+0x42>
 800ce10:	6811      	ldr	r1, [r2, #0]
 800ce12:	1850      	adds	r0, r2, r1
 800ce14:	42a0      	cmp	r0, r4
 800ce16:	d10b      	bne.n	800ce30 <_free_r+0x6c>
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	4401      	add	r1, r0
 800ce1c:	1850      	adds	r0, r2, r1
 800ce1e:	4283      	cmp	r3, r0
 800ce20:	6011      	str	r1, [r2, #0]
 800ce22:	d1e0      	bne.n	800cde6 <_free_r+0x22>
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	6053      	str	r3, [r2, #4]
 800ce2a:	4408      	add	r0, r1
 800ce2c:	6010      	str	r0, [r2, #0]
 800ce2e:	e7da      	b.n	800cde6 <_free_r+0x22>
 800ce30:	d902      	bls.n	800ce38 <_free_r+0x74>
 800ce32:	230c      	movs	r3, #12
 800ce34:	602b      	str	r3, [r5, #0]
 800ce36:	e7d6      	b.n	800cde6 <_free_r+0x22>
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	1821      	adds	r1, r4, r0
 800ce3c:	428b      	cmp	r3, r1
 800ce3e:	bf04      	itt	eq
 800ce40:	6819      	ldreq	r1, [r3, #0]
 800ce42:	685b      	ldreq	r3, [r3, #4]
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	bf04      	itt	eq
 800ce48:	1809      	addeq	r1, r1, r0
 800ce4a:	6021      	streq	r1, [r4, #0]
 800ce4c:	6054      	str	r4, [r2, #4]
 800ce4e:	e7ca      	b.n	800cde6 <_free_r+0x22>
 800ce50:	bd38      	pop	{r3, r4, r5, pc}
 800ce52:	bf00      	nop
 800ce54:	20001640 	.word	0x20001640

0800ce58 <malloc>:
 800ce58:	4b02      	ldr	r3, [pc, #8]	@ (800ce64 <malloc+0xc>)
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	f000 b825 	b.w	800ceac <_malloc_r>
 800ce62:	bf00      	nop
 800ce64:	20000250 	.word	0x20000250

0800ce68 <sbrk_aligned>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	4e0f      	ldr	r6, [pc, #60]	@ (800cea8 <sbrk_aligned+0x40>)
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	6831      	ldr	r1, [r6, #0]
 800ce70:	4605      	mov	r5, r0
 800ce72:	b911      	cbnz	r1, 800ce7a <sbrk_aligned+0x12>
 800ce74:	f000 fe38 	bl	800dae8 <_sbrk_r>
 800ce78:	6030      	str	r0, [r6, #0]
 800ce7a:	4621      	mov	r1, r4
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f000 fe33 	bl	800dae8 <_sbrk_r>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d103      	bne.n	800ce8e <sbrk_aligned+0x26>
 800ce86:	f04f 34ff 	mov.w	r4, #4294967295
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	bd70      	pop	{r4, r5, r6, pc}
 800ce8e:	1cc4      	adds	r4, r0, #3
 800ce90:	f024 0403 	bic.w	r4, r4, #3
 800ce94:	42a0      	cmp	r0, r4
 800ce96:	d0f8      	beq.n	800ce8a <sbrk_aligned+0x22>
 800ce98:	1a21      	subs	r1, r4, r0
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f000 fe24 	bl	800dae8 <_sbrk_r>
 800cea0:	3001      	adds	r0, #1
 800cea2:	d1f2      	bne.n	800ce8a <sbrk_aligned+0x22>
 800cea4:	e7ef      	b.n	800ce86 <sbrk_aligned+0x1e>
 800cea6:	bf00      	nop
 800cea8:	2000163c 	.word	0x2000163c

0800ceac <_malloc_r>:
 800ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb0:	1ccd      	adds	r5, r1, #3
 800ceb2:	f025 0503 	bic.w	r5, r5, #3
 800ceb6:	3508      	adds	r5, #8
 800ceb8:	2d0c      	cmp	r5, #12
 800ceba:	bf38      	it	cc
 800cebc:	250c      	movcc	r5, #12
 800cebe:	2d00      	cmp	r5, #0
 800cec0:	4606      	mov	r6, r0
 800cec2:	db01      	blt.n	800cec8 <_malloc_r+0x1c>
 800cec4:	42a9      	cmp	r1, r5
 800cec6:	d904      	bls.n	800ced2 <_malloc_r+0x26>
 800cec8:	230c      	movs	r3, #12
 800ceca:	6033      	str	r3, [r6, #0]
 800cecc:	2000      	movs	r0, #0
 800cece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfa8 <_malloc_r+0xfc>
 800ced6:	f000 f869 	bl	800cfac <__malloc_lock>
 800ceda:	f8d8 3000 	ldr.w	r3, [r8]
 800cede:	461c      	mov	r4, r3
 800cee0:	bb44      	cbnz	r4, 800cf34 <_malloc_r+0x88>
 800cee2:	4629      	mov	r1, r5
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7ff ffbf 	bl	800ce68 <sbrk_aligned>
 800ceea:	1c43      	adds	r3, r0, #1
 800ceec:	4604      	mov	r4, r0
 800ceee:	d158      	bne.n	800cfa2 <_malloc_r+0xf6>
 800cef0:	f8d8 4000 	ldr.w	r4, [r8]
 800cef4:	4627      	mov	r7, r4
 800cef6:	2f00      	cmp	r7, #0
 800cef8:	d143      	bne.n	800cf82 <_malloc_r+0xd6>
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	d04b      	beq.n	800cf96 <_malloc_r+0xea>
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	4639      	mov	r1, r7
 800cf02:	4630      	mov	r0, r6
 800cf04:	eb04 0903 	add.w	r9, r4, r3
 800cf08:	f000 fdee 	bl	800dae8 <_sbrk_r>
 800cf0c:	4581      	cmp	r9, r0
 800cf0e:	d142      	bne.n	800cf96 <_malloc_r+0xea>
 800cf10:	6821      	ldr	r1, [r4, #0]
 800cf12:	1a6d      	subs	r5, r5, r1
 800cf14:	4629      	mov	r1, r5
 800cf16:	4630      	mov	r0, r6
 800cf18:	f7ff ffa6 	bl	800ce68 <sbrk_aligned>
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d03a      	beq.n	800cf96 <_malloc_r+0xea>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	442b      	add	r3, r5
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	f8d8 3000 	ldr.w	r3, [r8]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	bb62      	cbnz	r2, 800cf88 <_malloc_r+0xdc>
 800cf2e:	f8c8 7000 	str.w	r7, [r8]
 800cf32:	e00f      	b.n	800cf54 <_malloc_r+0xa8>
 800cf34:	6822      	ldr	r2, [r4, #0]
 800cf36:	1b52      	subs	r2, r2, r5
 800cf38:	d420      	bmi.n	800cf7c <_malloc_r+0xd0>
 800cf3a:	2a0b      	cmp	r2, #11
 800cf3c:	d917      	bls.n	800cf6e <_malloc_r+0xc2>
 800cf3e:	1961      	adds	r1, r4, r5
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	6025      	str	r5, [r4, #0]
 800cf44:	bf18      	it	ne
 800cf46:	6059      	strne	r1, [r3, #4]
 800cf48:	6863      	ldr	r3, [r4, #4]
 800cf4a:	bf08      	it	eq
 800cf4c:	f8c8 1000 	streq.w	r1, [r8]
 800cf50:	5162      	str	r2, [r4, r5]
 800cf52:	604b      	str	r3, [r1, #4]
 800cf54:	4630      	mov	r0, r6
 800cf56:	f000 f82f 	bl	800cfb8 <__malloc_unlock>
 800cf5a:	f104 000b 	add.w	r0, r4, #11
 800cf5e:	1d23      	adds	r3, r4, #4
 800cf60:	f020 0007 	bic.w	r0, r0, #7
 800cf64:	1ac2      	subs	r2, r0, r3
 800cf66:	bf1c      	itt	ne
 800cf68:	1a1b      	subne	r3, r3, r0
 800cf6a:	50a3      	strne	r3, [r4, r2]
 800cf6c:	e7af      	b.n	800cece <_malloc_r+0x22>
 800cf6e:	6862      	ldr	r2, [r4, #4]
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	bf0c      	ite	eq
 800cf74:	f8c8 2000 	streq.w	r2, [r8]
 800cf78:	605a      	strne	r2, [r3, #4]
 800cf7a:	e7eb      	b.n	800cf54 <_malloc_r+0xa8>
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	6864      	ldr	r4, [r4, #4]
 800cf80:	e7ae      	b.n	800cee0 <_malloc_r+0x34>
 800cf82:	463c      	mov	r4, r7
 800cf84:	687f      	ldr	r7, [r7, #4]
 800cf86:	e7b6      	b.n	800cef6 <_malloc_r+0x4a>
 800cf88:	461a      	mov	r2, r3
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	d1fb      	bne.n	800cf88 <_malloc_r+0xdc>
 800cf90:	2300      	movs	r3, #0
 800cf92:	6053      	str	r3, [r2, #4]
 800cf94:	e7de      	b.n	800cf54 <_malloc_r+0xa8>
 800cf96:	230c      	movs	r3, #12
 800cf98:	6033      	str	r3, [r6, #0]
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f000 f80c 	bl	800cfb8 <__malloc_unlock>
 800cfa0:	e794      	b.n	800cecc <_malloc_r+0x20>
 800cfa2:	6005      	str	r5, [r0, #0]
 800cfa4:	e7d6      	b.n	800cf54 <_malloc_r+0xa8>
 800cfa6:	bf00      	nop
 800cfa8:	20001640 	.word	0x20001640

0800cfac <__malloc_lock>:
 800cfac:	4801      	ldr	r0, [pc, #4]	@ (800cfb4 <__malloc_lock+0x8>)
 800cfae:	f7ff beda 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800cfb2:	bf00      	nop
 800cfb4:	20001638 	.word	0x20001638

0800cfb8 <__malloc_unlock>:
 800cfb8:	4801      	ldr	r0, [pc, #4]	@ (800cfc0 <__malloc_unlock+0x8>)
 800cfba:	f7ff bed5 	b.w	800cd68 <__retarget_lock_release_recursive>
 800cfbe:	bf00      	nop
 800cfc0:	20001638 	.word	0x20001638

0800cfc4 <__ssputs_r>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	688e      	ldr	r6, [r1, #8]
 800cfca:	461f      	mov	r7, r3
 800cfcc:	42be      	cmp	r6, r7
 800cfce:	680b      	ldr	r3, [r1, #0]
 800cfd0:	4682      	mov	sl, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	4690      	mov	r8, r2
 800cfd6:	d82d      	bhi.n	800d034 <__ssputs_r+0x70>
 800cfd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cfe0:	d026      	beq.n	800d030 <__ssputs_r+0x6c>
 800cfe2:	6965      	ldr	r5, [r4, #20]
 800cfe4:	6909      	ldr	r1, [r1, #16]
 800cfe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfea:	eba3 0901 	sub.w	r9, r3, r1
 800cfee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cff2:	1c7b      	adds	r3, r7, #1
 800cff4:	444b      	add	r3, r9
 800cff6:	106d      	asrs	r5, r5, #1
 800cff8:	429d      	cmp	r5, r3
 800cffa:	bf38      	it	cc
 800cffc:	461d      	movcc	r5, r3
 800cffe:	0553      	lsls	r3, r2, #21
 800d000:	d527      	bpl.n	800d052 <__ssputs_r+0x8e>
 800d002:	4629      	mov	r1, r5
 800d004:	f7ff ff52 	bl	800ceac <_malloc_r>
 800d008:	4606      	mov	r6, r0
 800d00a:	b360      	cbz	r0, 800d066 <__ssputs_r+0xa2>
 800d00c:	6921      	ldr	r1, [r4, #16]
 800d00e:	464a      	mov	r2, r9
 800d010:	f7ff feab 	bl	800cd6a <memcpy>
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01e:	81a3      	strh	r3, [r4, #12]
 800d020:	6126      	str	r6, [r4, #16]
 800d022:	6165      	str	r5, [r4, #20]
 800d024:	444e      	add	r6, r9
 800d026:	eba5 0509 	sub.w	r5, r5, r9
 800d02a:	6026      	str	r6, [r4, #0]
 800d02c:	60a5      	str	r5, [r4, #8]
 800d02e:	463e      	mov	r6, r7
 800d030:	42be      	cmp	r6, r7
 800d032:	d900      	bls.n	800d036 <__ssputs_r+0x72>
 800d034:	463e      	mov	r6, r7
 800d036:	6820      	ldr	r0, [r4, #0]
 800d038:	4632      	mov	r2, r6
 800d03a:	4641      	mov	r1, r8
 800d03c:	f000 fd3a 	bl	800dab4 <memmove>
 800d040:	68a3      	ldr	r3, [r4, #8]
 800d042:	1b9b      	subs	r3, r3, r6
 800d044:	60a3      	str	r3, [r4, #8]
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	4433      	add	r3, r6
 800d04a:	6023      	str	r3, [r4, #0]
 800d04c:	2000      	movs	r0, #0
 800d04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d052:	462a      	mov	r2, r5
 800d054:	f000 fd5f 	bl	800db16 <_realloc_r>
 800d058:	4606      	mov	r6, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d1e0      	bne.n	800d020 <__ssputs_r+0x5c>
 800d05e:	6921      	ldr	r1, [r4, #16]
 800d060:	4650      	mov	r0, sl
 800d062:	f7ff feaf 	bl	800cdc4 <_free_r>
 800d066:	230c      	movs	r3, #12
 800d068:	f8ca 3000 	str.w	r3, [sl]
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	f04f 30ff 	mov.w	r0, #4294967295
 800d078:	e7e9      	b.n	800d04e <__ssputs_r+0x8a>
	...

0800d07c <_svfiprintf_r>:
 800d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	4698      	mov	r8, r3
 800d082:	898b      	ldrh	r3, [r1, #12]
 800d084:	061b      	lsls	r3, r3, #24
 800d086:	b09d      	sub	sp, #116	@ 0x74
 800d088:	4607      	mov	r7, r0
 800d08a:	460d      	mov	r5, r1
 800d08c:	4614      	mov	r4, r2
 800d08e:	d510      	bpl.n	800d0b2 <_svfiprintf_r+0x36>
 800d090:	690b      	ldr	r3, [r1, #16]
 800d092:	b973      	cbnz	r3, 800d0b2 <_svfiprintf_r+0x36>
 800d094:	2140      	movs	r1, #64	@ 0x40
 800d096:	f7ff ff09 	bl	800ceac <_malloc_r>
 800d09a:	6028      	str	r0, [r5, #0]
 800d09c:	6128      	str	r0, [r5, #16]
 800d09e:	b930      	cbnz	r0, 800d0ae <_svfiprintf_r+0x32>
 800d0a0:	230c      	movs	r3, #12
 800d0a2:	603b      	str	r3, [r7, #0]
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	b01d      	add	sp, #116	@ 0x74
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	2340      	movs	r3, #64	@ 0x40
 800d0b0:	616b      	str	r3, [r5, #20]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0b6:	2320      	movs	r3, #32
 800d0b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0c0:	2330      	movs	r3, #48	@ 0x30
 800d0c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d260 <_svfiprintf_r+0x1e4>
 800d0c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0ca:	f04f 0901 	mov.w	r9, #1
 800d0ce:	4623      	mov	r3, r4
 800d0d0:	469a      	mov	sl, r3
 800d0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0d6:	b10a      	cbz	r2, 800d0dc <_svfiprintf_r+0x60>
 800d0d8:	2a25      	cmp	r2, #37	@ 0x25
 800d0da:	d1f9      	bne.n	800d0d0 <_svfiprintf_r+0x54>
 800d0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d0e0:	d00b      	beq.n	800d0fa <_svfiprintf_r+0x7e>
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7ff ff6b 	bl	800cfc4 <__ssputs_r>
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	f000 80a7 	beq.w	800d242 <_svfiprintf_r+0x1c6>
 800d0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f6:	445a      	add	r2, fp
 800d0f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 809f 	beq.w	800d242 <_svfiprintf_r+0x1c6>
 800d104:	2300      	movs	r3, #0
 800d106:	f04f 32ff 	mov.w	r2, #4294967295
 800d10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d10e:	f10a 0a01 	add.w	sl, sl, #1
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	9307      	str	r3, [sp, #28]
 800d116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d11a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d11c:	4654      	mov	r4, sl
 800d11e:	2205      	movs	r2, #5
 800d120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d124:	484e      	ldr	r0, [pc, #312]	@ (800d260 <_svfiprintf_r+0x1e4>)
 800d126:	f7f3 f873 	bl	8000210 <memchr>
 800d12a:	9a04      	ldr	r2, [sp, #16]
 800d12c:	b9d8      	cbnz	r0, 800d166 <_svfiprintf_r+0xea>
 800d12e:	06d0      	lsls	r0, r2, #27
 800d130:	bf44      	itt	mi
 800d132:	2320      	movmi	r3, #32
 800d134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d138:	0711      	lsls	r1, r2, #28
 800d13a:	bf44      	itt	mi
 800d13c:	232b      	movmi	r3, #43	@ 0x2b
 800d13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d142:	f89a 3000 	ldrb.w	r3, [sl]
 800d146:	2b2a      	cmp	r3, #42	@ 0x2a
 800d148:	d015      	beq.n	800d176 <_svfiprintf_r+0xfa>
 800d14a:	9a07      	ldr	r2, [sp, #28]
 800d14c:	4654      	mov	r4, sl
 800d14e:	2000      	movs	r0, #0
 800d150:	f04f 0c0a 	mov.w	ip, #10
 800d154:	4621      	mov	r1, r4
 800d156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d15a:	3b30      	subs	r3, #48	@ 0x30
 800d15c:	2b09      	cmp	r3, #9
 800d15e:	d94b      	bls.n	800d1f8 <_svfiprintf_r+0x17c>
 800d160:	b1b0      	cbz	r0, 800d190 <_svfiprintf_r+0x114>
 800d162:	9207      	str	r2, [sp, #28]
 800d164:	e014      	b.n	800d190 <_svfiprintf_r+0x114>
 800d166:	eba0 0308 	sub.w	r3, r0, r8
 800d16a:	fa09 f303 	lsl.w	r3, r9, r3
 800d16e:	4313      	orrs	r3, r2
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	46a2      	mov	sl, r4
 800d174:	e7d2      	b.n	800d11c <_svfiprintf_r+0xa0>
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	1d19      	adds	r1, r3, #4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	9103      	str	r1, [sp, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfbb      	ittet	lt
 800d182:	425b      	neglt	r3, r3
 800d184:	f042 0202 	orrlt.w	r2, r2, #2
 800d188:	9307      	strge	r3, [sp, #28]
 800d18a:	9307      	strlt	r3, [sp, #28]
 800d18c:	bfb8      	it	lt
 800d18e:	9204      	strlt	r2, [sp, #16]
 800d190:	7823      	ldrb	r3, [r4, #0]
 800d192:	2b2e      	cmp	r3, #46	@ 0x2e
 800d194:	d10a      	bne.n	800d1ac <_svfiprintf_r+0x130>
 800d196:	7863      	ldrb	r3, [r4, #1]
 800d198:	2b2a      	cmp	r3, #42	@ 0x2a
 800d19a:	d132      	bne.n	800d202 <_svfiprintf_r+0x186>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	1d1a      	adds	r2, r3, #4
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	9203      	str	r2, [sp, #12]
 800d1a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1a8:	3402      	adds	r4, #2
 800d1aa:	9305      	str	r3, [sp, #20]
 800d1ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d270 <_svfiprintf_r+0x1f4>
 800d1b0:	7821      	ldrb	r1, [r4, #0]
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	4650      	mov	r0, sl
 800d1b6:	f7f3 f82b 	bl	8000210 <memchr>
 800d1ba:	b138      	cbz	r0, 800d1cc <_svfiprintf_r+0x150>
 800d1bc:	9b04      	ldr	r3, [sp, #16]
 800d1be:	eba0 000a 	sub.w	r0, r0, sl
 800d1c2:	2240      	movs	r2, #64	@ 0x40
 800d1c4:	4082      	lsls	r2, r0
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	3401      	adds	r4, #1
 800d1ca:	9304      	str	r3, [sp, #16]
 800d1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d0:	4824      	ldr	r0, [pc, #144]	@ (800d264 <_svfiprintf_r+0x1e8>)
 800d1d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1d6:	2206      	movs	r2, #6
 800d1d8:	f7f3 f81a 	bl	8000210 <memchr>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d036      	beq.n	800d24e <_svfiprintf_r+0x1d2>
 800d1e0:	4b21      	ldr	r3, [pc, #132]	@ (800d268 <_svfiprintf_r+0x1ec>)
 800d1e2:	bb1b      	cbnz	r3, 800d22c <_svfiprintf_r+0x1b0>
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	3307      	adds	r3, #7
 800d1e8:	f023 0307 	bic.w	r3, r3, #7
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	9303      	str	r3, [sp, #12]
 800d1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f2:	4433      	add	r3, r6
 800d1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f6:	e76a      	b.n	800d0ce <_svfiprintf_r+0x52>
 800d1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	2001      	movs	r0, #1
 800d200:	e7a8      	b.n	800d154 <_svfiprintf_r+0xd8>
 800d202:	2300      	movs	r3, #0
 800d204:	3401      	adds	r4, #1
 800d206:	9305      	str	r3, [sp, #20]
 800d208:	4619      	mov	r1, r3
 800d20a:	f04f 0c0a 	mov.w	ip, #10
 800d20e:	4620      	mov	r0, r4
 800d210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d214:	3a30      	subs	r2, #48	@ 0x30
 800d216:	2a09      	cmp	r2, #9
 800d218:	d903      	bls.n	800d222 <_svfiprintf_r+0x1a6>
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0c6      	beq.n	800d1ac <_svfiprintf_r+0x130>
 800d21e:	9105      	str	r1, [sp, #20]
 800d220:	e7c4      	b.n	800d1ac <_svfiprintf_r+0x130>
 800d222:	fb0c 2101 	mla	r1, ip, r1, r2
 800d226:	4604      	mov	r4, r0
 800d228:	2301      	movs	r3, #1
 800d22a:	e7f0      	b.n	800d20e <_svfiprintf_r+0x192>
 800d22c:	ab03      	add	r3, sp, #12
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	462a      	mov	r2, r5
 800d232:	4b0e      	ldr	r3, [pc, #56]	@ (800d26c <_svfiprintf_r+0x1f0>)
 800d234:	a904      	add	r1, sp, #16
 800d236:	4638      	mov	r0, r7
 800d238:	f3af 8000 	nop.w
 800d23c:	1c42      	adds	r2, r0, #1
 800d23e:	4606      	mov	r6, r0
 800d240:	d1d6      	bne.n	800d1f0 <_svfiprintf_r+0x174>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	065b      	lsls	r3, r3, #25
 800d246:	f53f af2d 	bmi.w	800d0a4 <_svfiprintf_r+0x28>
 800d24a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d24c:	e72c      	b.n	800d0a8 <_svfiprintf_r+0x2c>
 800d24e:	ab03      	add	r3, sp, #12
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	462a      	mov	r2, r5
 800d254:	4b05      	ldr	r3, [pc, #20]	@ (800d26c <_svfiprintf_r+0x1f0>)
 800d256:	a904      	add	r1, sp, #16
 800d258:	4638      	mov	r0, r7
 800d25a:	f000 f9bb 	bl	800d5d4 <_printf_i>
 800d25e:	e7ed      	b.n	800d23c <_svfiprintf_r+0x1c0>
 800d260:	0800f136 	.word	0x0800f136
 800d264:	0800f140 	.word	0x0800f140
 800d268:	00000000 	.word	0x00000000
 800d26c:	0800cfc5 	.word	0x0800cfc5
 800d270:	0800f13c 	.word	0x0800f13c

0800d274 <__sfputc_r>:
 800d274:	6893      	ldr	r3, [r2, #8]
 800d276:	3b01      	subs	r3, #1
 800d278:	2b00      	cmp	r3, #0
 800d27a:	b410      	push	{r4}
 800d27c:	6093      	str	r3, [r2, #8]
 800d27e:	da08      	bge.n	800d292 <__sfputc_r+0x1e>
 800d280:	6994      	ldr	r4, [r2, #24]
 800d282:	42a3      	cmp	r3, r4
 800d284:	db01      	blt.n	800d28a <__sfputc_r+0x16>
 800d286:	290a      	cmp	r1, #10
 800d288:	d103      	bne.n	800d292 <__sfputc_r+0x1e>
 800d28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d28e:	f000 bb7d 	b.w	800d98c <__swbuf_r>
 800d292:	6813      	ldr	r3, [r2, #0]
 800d294:	1c58      	adds	r0, r3, #1
 800d296:	6010      	str	r0, [r2, #0]
 800d298:	7019      	strb	r1, [r3, #0]
 800d29a:	4608      	mov	r0, r1
 800d29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <__sfputs_r>:
 800d2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	460f      	mov	r7, r1
 800d2a8:	4614      	mov	r4, r2
 800d2aa:	18d5      	adds	r5, r2, r3
 800d2ac:	42ac      	cmp	r4, r5
 800d2ae:	d101      	bne.n	800d2b4 <__sfputs_r+0x12>
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	e007      	b.n	800d2c4 <__sfputs_r+0x22>
 800d2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b8:	463a      	mov	r2, r7
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f7ff ffda 	bl	800d274 <__sfputc_r>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d1f3      	bne.n	800d2ac <__sfputs_r+0xa>
 800d2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2c8 <_vfiprintf_r>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	460d      	mov	r5, r1
 800d2ce:	b09d      	sub	sp, #116	@ 0x74
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	4698      	mov	r8, r3
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	b118      	cbz	r0, 800d2e0 <_vfiprintf_r+0x18>
 800d2d8:	6a03      	ldr	r3, [r0, #32]
 800d2da:	b90b      	cbnz	r3, 800d2e0 <_vfiprintf_r+0x18>
 800d2dc:	f7ff fb9c 	bl	800ca18 <__sinit>
 800d2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2e2:	07d9      	lsls	r1, r3, #31
 800d2e4:	d405      	bmi.n	800d2f2 <_vfiprintf_r+0x2a>
 800d2e6:	89ab      	ldrh	r3, [r5, #12]
 800d2e8:	059a      	lsls	r2, r3, #22
 800d2ea:	d402      	bmi.n	800d2f2 <_vfiprintf_r+0x2a>
 800d2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ee:	f7ff fd3a 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800d2f2:	89ab      	ldrh	r3, [r5, #12]
 800d2f4:	071b      	lsls	r3, r3, #28
 800d2f6:	d501      	bpl.n	800d2fc <_vfiprintf_r+0x34>
 800d2f8:	692b      	ldr	r3, [r5, #16]
 800d2fa:	b99b      	cbnz	r3, 800d324 <_vfiprintf_r+0x5c>
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	4630      	mov	r0, r6
 800d300:	f000 fb82 	bl	800da08 <__swsetup_r>
 800d304:	b170      	cbz	r0, 800d324 <_vfiprintf_r+0x5c>
 800d306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d308:	07dc      	lsls	r4, r3, #31
 800d30a:	d504      	bpl.n	800d316 <_vfiprintf_r+0x4e>
 800d30c:	f04f 30ff 	mov.w	r0, #4294967295
 800d310:	b01d      	add	sp, #116	@ 0x74
 800d312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d316:	89ab      	ldrh	r3, [r5, #12]
 800d318:	0598      	lsls	r0, r3, #22
 800d31a:	d4f7      	bmi.n	800d30c <_vfiprintf_r+0x44>
 800d31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d31e:	f7ff fd23 	bl	800cd68 <__retarget_lock_release_recursive>
 800d322:	e7f3      	b.n	800d30c <_vfiprintf_r+0x44>
 800d324:	2300      	movs	r3, #0
 800d326:	9309      	str	r3, [sp, #36]	@ 0x24
 800d328:	2320      	movs	r3, #32
 800d32a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d332:	2330      	movs	r3, #48	@ 0x30
 800d334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4e4 <_vfiprintf_r+0x21c>
 800d338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d33c:	f04f 0901 	mov.w	r9, #1
 800d340:	4623      	mov	r3, r4
 800d342:	469a      	mov	sl, r3
 800d344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d348:	b10a      	cbz	r2, 800d34e <_vfiprintf_r+0x86>
 800d34a:	2a25      	cmp	r2, #37	@ 0x25
 800d34c:	d1f9      	bne.n	800d342 <_vfiprintf_r+0x7a>
 800d34e:	ebba 0b04 	subs.w	fp, sl, r4
 800d352:	d00b      	beq.n	800d36c <_vfiprintf_r+0xa4>
 800d354:	465b      	mov	r3, fp
 800d356:	4622      	mov	r2, r4
 800d358:	4629      	mov	r1, r5
 800d35a:	4630      	mov	r0, r6
 800d35c:	f7ff ffa1 	bl	800d2a2 <__sfputs_r>
 800d360:	3001      	adds	r0, #1
 800d362:	f000 80a7 	beq.w	800d4b4 <_vfiprintf_r+0x1ec>
 800d366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d368:	445a      	add	r2, fp
 800d36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d36c:	f89a 3000 	ldrb.w	r3, [sl]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 809f 	beq.w	800d4b4 <_vfiprintf_r+0x1ec>
 800d376:	2300      	movs	r3, #0
 800d378:	f04f 32ff 	mov.w	r2, #4294967295
 800d37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d380:	f10a 0a01 	add.w	sl, sl, #1
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d38c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d38e:	4654      	mov	r4, sl
 800d390:	2205      	movs	r2, #5
 800d392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d396:	4853      	ldr	r0, [pc, #332]	@ (800d4e4 <_vfiprintf_r+0x21c>)
 800d398:	f7f2 ff3a 	bl	8000210 <memchr>
 800d39c:	9a04      	ldr	r2, [sp, #16]
 800d39e:	b9d8      	cbnz	r0, 800d3d8 <_vfiprintf_r+0x110>
 800d3a0:	06d1      	lsls	r1, r2, #27
 800d3a2:	bf44      	itt	mi
 800d3a4:	2320      	movmi	r3, #32
 800d3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3aa:	0713      	lsls	r3, r2, #28
 800d3ac:	bf44      	itt	mi
 800d3ae:	232b      	movmi	r3, #43	@ 0x2b
 800d3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3ba:	d015      	beq.n	800d3e8 <_vfiprintf_r+0x120>
 800d3bc:	9a07      	ldr	r2, [sp, #28]
 800d3be:	4654      	mov	r4, sl
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	f04f 0c0a 	mov.w	ip, #10
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3cc:	3b30      	subs	r3, #48	@ 0x30
 800d3ce:	2b09      	cmp	r3, #9
 800d3d0:	d94b      	bls.n	800d46a <_vfiprintf_r+0x1a2>
 800d3d2:	b1b0      	cbz	r0, 800d402 <_vfiprintf_r+0x13a>
 800d3d4:	9207      	str	r2, [sp, #28]
 800d3d6:	e014      	b.n	800d402 <_vfiprintf_r+0x13a>
 800d3d8:	eba0 0308 	sub.w	r3, r0, r8
 800d3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	9304      	str	r3, [sp, #16]
 800d3e4:	46a2      	mov	sl, r4
 800d3e6:	e7d2      	b.n	800d38e <_vfiprintf_r+0xc6>
 800d3e8:	9b03      	ldr	r3, [sp, #12]
 800d3ea:	1d19      	adds	r1, r3, #4
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	9103      	str	r1, [sp, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bfbb      	ittet	lt
 800d3f4:	425b      	neglt	r3, r3
 800d3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3fa:	9307      	strge	r3, [sp, #28]
 800d3fc:	9307      	strlt	r3, [sp, #28]
 800d3fe:	bfb8      	it	lt
 800d400:	9204      	strlt	r2, [sp, #16]
 800d402:	7823      	ldrb	r3, [r4, #0]
 800d404:	2b2e      	cmp	r3, #46	@ 0x2e
 800d406:	d10a      	bne.n	800d41e <_vfiprintf_r+0x156>
 800d408:	7863      	ldrb	r3, [r4, #1]
 800d40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d40c:	d132      	bne.n	800d474 <_vfiprintf_r+0x1ac>
 800d40e:	9b03      	ldr	r3, [sp, #12]
 800d410:	1d1a      	adds	r2, r3, #4
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	9203      	str	r2, [sp, #12]
 800d416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d41a:	3402      	adds	r4, #2
 800d41c:	9305      	str	r3, [sp, #20]
 800d41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4f4 <_vfiprintf_r+0x22c>
 800d422:	7821      	ldrb	r1, [r4, #0]
 800d424:	2203      	movs	r2, #3
 800d426:	4650      	mov	r0, sl
 800d428:	f7f2 fef2 	bl	8000210 <memchr>
 800d42c:	b138      	cbz	r0, 800d43e <_vfiprintf_r+0x176>
 800d42e:	9b04      	ldr	r3, [sp, #16]
 800d430:	eba0 000a 	sub.w	r0, r0, sl
 800d434:	2240      	movs	r2, #64	@ 0x40
 800d436:	4082      	lsls	r2, r0
 800d438:	4313      	orrs	r3, r2
 800d43a:	3401      	adds	r4, #1
 800d43c:	9304      	str	r3, [sp, #16]
 800d43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d442:	4829      	ldr	r0, [pc, #164]	@ (800d4e8 <_vfiprintf_r+0x220>)
 800d444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d448:	2206      	movs	r2, #6
 800d44a:	f7f2 fee1 	bl	8000210 <memchr>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d03f      	beq.n	800d4d2 <_vfiprintf_r+0x20a>
 800d452:	4b26      	ldr	r3, [pc, #152]	@ (800d4ec <_vfiprintf_r+0x224>)
 800d454:	bb1b      	cbnz	r3, 800d49e <_vfiprintf_r+0x1d6>
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	3307      	adds	r3, #7
 800d45a:	f023 0307 	bic.w	r3, r3, #7
 800d45e:	3308      	adds	r3, #8
 800d460:	9303      	str	r3, [sp, #12]
 800d462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d464:	443b      	add	r3, r7
 800d466:	9309      	str	r3, [sp, #36]	@ 0x24
 800d468:	e76a      	b.n	800d340 <_vfiprintf_r+0x78>
 800d46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d46e:	460c      	mov	r4, r1
 800d470:	2001      	movs	r0, #1
 800d472:	e7a8      	b.n	800d3c6 <_vfiprintf_r+0xfe>
 800d474:	2300      	movs	r3, #0
 800d476:	3401      	adds	r4, #1
 800d478:	9305      	str	r3, [sp, #20]
 800d47a:	4619      	mov	r1, r3
 800d47c:	f04f 0c0a 	mov.w	ip, #10
 800d480:	4620      	mov	r0, r4
 800d482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d486:	3a30      	subs	r2, #48	@ 0x30
 800d488:	2a09      	cmp	r2, #9
 800d48a:	d903      	bls.n	800d494 <_vfiprintf_r+0x1cc>
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d0c6      	beq.n	800d41e <_vfiprintf_r+0x156>
 800d490:	9105      	str	r1, [sp, #20]
 800d492:	e7c4      	b.n	800d41e <_vfiprintf_r+0x156>
 800d494:	fb0c 2101 	mla	r1, ip, r1, r2
 800d498:	4604      	mov	r4, r0
 800d49a:	2301      	movs	r3, #1
 800d49c:	e7f0      	b.n	800d480 <_vfiprintf_r+0x1b8>
 800d49e:	ab03      	add	r3, sp, #12
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	4b12      	ldr	r3, [pc, #72]	@ (800d4f0 <_vfiprintf_r+0x228>)
 800d4a6:	a904      	add	r1, sp, #16
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f3af 8000 	nop.w
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	1c78      	adds	r0, r7, #1
 800d4b2:	d1d6      	bne.n	800d462 <_vfiprintf_r+0x19a>
 800d4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4b6:	07d9      	lsls	r1, r3, #31
 800d4b8:	d405      	bmi.n	800d4c6 <_vfiprintf_r+0x1fe>
 800d4ba:	89ab      	ldrh	r3, [r5, #12]
 800d4bc:	059a      	lsls	r2, r3, #22
 800d4be:	d402      	bmi.n	800d4c6 <_vfiprintf_r+0x1fe>
 800d4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4c2:	f7ff fc51 	bl	800cd68 <__retarget_lock_release_recursive>
 800d4c6:	89ab      	ldrh	r3, [r5, #12]
 800d4c8:	065b      	lsls	r3, r3, #25
 800d4ca:	f53f af1f 	bmi.w	800d30c <_vfiprintf_r+0x44>
 800d4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d0:	e71e      	b.n	800d310 <_vfiprintf_r+0x48>
 800d4d2:	ab03      	add	r3, sp, #12
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	462a      	mov	r2, r5
 800d4d8:	4b05      	ldr	r3, [pc, #20]	@ (800d4f0 <_vfiprintf_r+0x228>)
 800d4da:	a904      	add	r1, sp, #16
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f000 f879 	bl	800d5d4 <_printf_i>
 800d4e2:	e7e4      	b.n	800d4ae <_vfiprintf_r+0x1e6>
 800d4e4:	0800f136 	.word	0x0800f136
 800d4e8:	0800f140 	.word	0x0800f140
 800d4ec:	00000000 	.word	0x00000000
 800d4f0:	0800d2a3 	.word	0x0800d2a3
 800d4f4:	0800f13c 	.word	0x0800f13c

0800d4f8 <_printf_common>:
 800d4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	4698      	mov	r8, r3
 800d500:	688a      	ldr	r2, [r1, #8]
 800d502:	690b      	ldr	r3, [r1, #16]
 800d504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d508:	4293      	cmp	r3, r2
 800d50a:	bfb8      	it	lt
 800d50c:	4613      	movlt	r3, r2
 800d50e:	6033      	str	r3, [r6, #0]
 800d510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d514:	4607      	mov	r7, r0
 800d516:	460c      	mov	r4, r1
 800d518:	b10a      	cbz	r2, 800d51e <_printf_common+0x26>
 800d51a:	3301      	adds	r3, #1
 800d51c:	6033      	str	r3, [r6, #0]
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	0699      	lsls	r1, r3, #26
 800d522:	bf42      	ittt	mi
 800d524:	6833      	ldrmi	r3, [r6, #0]
 800d526:	3302      	addmi	r3, #2
 800d528:	6033      	strmi	r3, [r6, #0]
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	f015 0506 	ands.w	r5, r5, #6
 800d530:	d106      	bne.n	800d540 <_printf_common+0x48>
 800d532:	f104 0a19 	add.w	sl, r4, #25
 800d536:	68e3      	ldr	r3, [r4, #12]
 800d538:	6832      	ldr	r2, [r6, #0]
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	42ab      	cmp	r3, r5
 800d53e:	dc26      	bgt.n	800d58e <_printf_common+0x96>
 800d540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d544:	6822      	ldr	r2, [r4, #0]
 800d546:	3b00      	subs	r3, #0
 800d548:	bf18      	it	ne
 800d54a:	2301      	movne	r3, #1
 800d54c:	0692      	lsls	r2, r2, #26
 800d54e:	d42b      	bmi.n	800d5a8 <_printf_common+0xb0>
 800d550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d554:	4641      	mov	r1, r8
 800d556:	4638      	mov	r0, r7
 800d558:	47c8      	blx	r9
 800d55a:	3001      	adds	r0, #1
 800d55c:	d01e      	beq.n	800d59c <_printf_common+0xa4>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	6922      	ldr	r2, [r4, #16]
 800d562:	f003 0306 	and.w	r3, r3, #6
 800d566:	2b04      	cmp	r3, #4
 800d568:	bf02      	ittt	eq
 800d56a:	68e5      	ldreq	r5, [r4, #12]
 800d56c:	6833      	ldreq	r3, [r6, #0]
 800d56e:	1aed      	subeq	r5, r5, r3
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	bf0c      	ite	eq
 800d574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d578:	2500      	movne	r5, #0
 800d57a:	4293      	cmp	r3, r2
 800d57c:	bfc4      	itt	gt
 800d57e:	1a9b      	subgt	r3, r3, r2
 800d580:	18ed      	addgt	r5, r5, r3
 800d582:	2600      	movs	r6, #0
 800d584:	341a      	adds	r4, #26
 800d586:	42b5      	cmp	r5, r6
 800d588:	d11a      	bne.n	800d5c0 <_printf_common+0xc8>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e008      	b.n	800d5a0 <_printf_common+0xa8>
 800d58e:	2301      	movs	r3, #1
 800d590:	4652      	mov	r2, sl
 800d592:	4641      	mov	r1, r8
 800d594:	4638      	mov	r0, r7
 800d596:	47c8      	blx	r9
 800d598:	3001      	adds	r0, #1
 800d59a:	d103      	bne.n	800d5a4 <_printf_common+0xac>
 800d59c:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	e7c6      	b.n	800d536 <_printf_common+0x3e>
 800d5a8:	18e1      	adds	r1, r4, r3
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	2030      	movs	r0, #48	@ 0x30
 800d5ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d5b2:	4422      	add	r2, r4
 800d5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d5bc:	3302      	adds	r3, #2
 800d5be:	e7c7      	b.n	800d550 <_printf_common+0x58>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	4641      	mov	r1, r8
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	47c8      	blx	r9
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	d0e6      	beq.n	800d59c <_printf_common+0xa4>
 800d5ce:	3601      	adds	r6, #1
 800d5d0:	e7d9      	b.n	800d586 <_printf_common+0x8e>
	...

0800d5d4 <_printf_i>:
 800d5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	7e0f      	ldrb	r7, [r1, #24]
 800d5da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5dc:	2f78      	cmp	r7, #120	@ 0x78
 800d5de:	4691      	mov	r9, r2
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5ea:	d807      	bhi.n	800d5fc <_printf_i+0x28>
 800d5ec:	2f62      	cmp	r7, #98	@ 0x62
 800d5ee:	d80a      	bhi.n	800d606 <_printf_i+0x32>
 800d5f0:	2f00      	cmp	r7, #0
 800d5f2:	f000 80d1 	beq.w	800d798 <_printf_i+0x1c4>
 800d5f6:	2f58      	cmp	r7, #88	@ 0x58
 800d5f8:	f000 80b8 	beq.w	800d76c <_printf_i+0x198>
 800d5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d604:	e03a      	b.n	800d67c <_printf_i+0xa8>
 800d606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d60a:	2b15      	cmp	r3, #21
 800d60c:	d8f6      	bhi.n	800d5fc <_printf_i+0x28>
 800d60e:	a101      	add	r1, pc, #4	@ (adr r1, 800d614 <_printf_i+0x40>)
 800d610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d614:	0800d66d 	.word	0x0800d66d
 800d618:	0800d681 	.word	0x0800d681
 800d61c:	0800d5fd 	.word	0x0800d5fd
 800d620:	0800d5fd 	.word	0x0800d5fd
 800d624:	0800d5fd 	.word	0x0800d5fd
 800d628:	0800d5fd 	.word	0x0800d5fd
 800d62c:	0800d681 	.word	0x0800d681
 800d630:	0800d5fd 	.word	0x0800d5fd
 800d634:	0800d5fd 	.word	0x0800d5fd
 800d638:	0800d5fd 	.word	0x0800d5fd
 800d63c:	0800d5fd 	.word	0x0800d5fd
 800d640:	0800d77f 	.word	0x0800d77f
 800d644:	0800d6ab 	.word	0x0800d6ab
 800d648:	0800d739 	.word	0x0800d739
 800d64c:	0800d5fd 	.word	0x0800d5fd
 800d650:	0800d5fd 	.word	0x0800d5fd
 800d654:	0800d7a1 	.word	0x0800d7a1
 800d658:	0800d5fd 	.word	0x0800d5fd
 800d65c:	0800d6ab 	.word	0x0800d6ab
 800d660:	0800d5fd 	.word	0x0800d5fd
 800d664:	0800d5fd 	.word	0x0800d5fd
 800d668:	0800d741 	.word	0x0800d741
 800d66c:	6833      	ldr	r3, [r6, #0]
 800d66e:	1d1a      	adds	r2, r3, #4
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6032      	str	r2, [r6, #0]
 800d674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d67c:	2301      	movs	r3, #1
 800d67e:	e09c      	b.n	800d7ba <_printf_i+0x1e6>
 800d680:	6833      	ldr	r3, [r6, #0]
 800d682:	6820      	ldr	r0, [r4, #0]
 800d684:	1d19      	adds	r1, r3, #4
 800d686:	6031      	str	r1, [r6, #0]
 800d688:	0606      	lsls	r6, r0, #24
 800d68a:	d501      	bpl.n	800d690 <_printf_i+0xbc>
 800d68c:	681d      	ldr	r5, [r3, #0]
 800d68e:	e003      	b.n	800d698 <_printf_i+0xc4>
 800d690:	0645      	lsls	r5, r0, #25
 800d692:	d5fb      	bpl.n	800d68c <_printf_i+0xb8>
 800d694:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d698:	2d00      	cmp	r5, #0
 800d69a:	da03      	bge.n	800d6a4 <_printf_i+0xd0>
 800d69c:	232d      	movs	r3, #45	@ 0x2d
 800d69e:	426d      	negs	r5, r5
 800d6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6a4:	4858      	ldr	r0, [pc, #352]	@ (800d808 <_printf_i+0x234>)
 800d6a6:	230a      	movs	r3, #10
 800d6a8:	e011      	b.n	800d6ce <_printf_i+0xfa>
 800d6aa:	6821      	ldr	r1, [r4, #0]
 800d6ac:	6833      	ldr	r3, [r6, #0]
 800d6ae:	0608      	lsls	r0, r1, #24
 800d6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d6b4:	d402      	bmi.n	800d6bc <_printf_i+0xe8>
 800d6b6:	0649      	lsls	r1, r1, #25
 800d6b8:	bf48      	it	mi
 800d6ba:	b2ad      	uxthmi	r5, r5
 800d6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d6be:	4852      	ldr	r0, [pc, #328]	@ (800d808 <_printf_i+0x234>)
 800d6c0:	6033      	str	r3, [r6, #0]
 800d6c2:	bf14      	ite	ne
 800d6c4:	230a      	movne	r3, #10
 800d6c6:	2308      	moveq	r3, #8
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6ce:	6866      	ldr	r6, [r4, #4]
 800d6d0:	60a6      	str	r6, [r4, #8]
 800d6d2:	2e00      	cmp	r6, #0
 800d6d4:	db05      	blt.n	800d6e2 <_printf_i+0x10e>
 800d6d6:	6821      	ldr	r1, [r4, #0]
 800d6d8:	432e      	orrs	r6, r5
 800d6da:	f021 0104 	bic.w	r1, r1, #4
 800d6de:	6021      	str	r1, [r4, #0]
 800d6e0:	d04b      	beq.n	800d77a <_printf_i+0x1a6>
 800d6e2:	4616      	mov	r6, r2
 800d6e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6e8:	fb03 5711 	mls	r7, r3, r1, r5
 800d6ec:	5dc7      	ldrb	r7, [r0, r7]
 800d6ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6f2:	462f      	mov	r7, r5
 800d6f4:	42bb      	cmp	r3, r7
 800d6f6:	460d      	mov	r5, r1
 800d6f8:	d9f4      	bls.n	800d6e4 <_printf_i+0x110>
 800d6fa:	2b08      	cmp	r3, #8
 800d6fc:	d10b      	bne.n	800d716 <_printf_i+0x142>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	07df      	lsls	r7, r3, #31
 800d702:	d508      	bpl.n	800d716 <_printf_i+0x142>
 800d704:	6923      	ldr	r3, [r4, #16]
 800d706:	6861      	ldr	r1, [r4, #4]
 800d708:	4299      	cmp	r1, r3
 800d70a:	bfde      	ittt	le
 800d70c:	2330      	movle	r3, #48	@ 0x30
 800d70e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d712:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d716:	1b92      	subs	r2, r2, r6
 800d718:	6122      	str	r2, [r4, #16]
 800d71a:	f8cd a000 	str.w	sl, [sp]
 800d71e:	464b      	mov	r3, r9
 800d720:	aa03      	add	r2, sp, #12
 800d722:	4621      	mov	r1, r4
 800d724:	4640      	mov	r0, r8
 800d726:	f7ff fee7 	bl	800d4f8 <_printf_common>
 800d72a:	3001      	adds	r0, #1
 800d72c:	d14a      	bne.n	800d7c4 <_printf_i+0x1f0>
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	b004      	add	sp, #16
 800d734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	f043 0320 	orr.w	r3, r3, #32
 800d73e:	6023      	str	r3, [r4, #0]
 800d740:	4832      	ldr	r0, [pc, #200]	@ (800d80c <_printf_i+0x238>)
 800d742:	2778      	movs	r7, #120	@ 0x78
 800d744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	6831      	ldr	r1, [r6, #0]
 800d74c:	061f      	lsls	r7, r3, #24
 800d74e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d752:	d402      	bmi.n	800d75a <_printf_i+0x186>
 800d754:	065f      	lsls	r7, r3, #25
 800d756:	bf48      	it	mi
 800d758:	b2ad      	uxthmi	r5, r5
 800d75a:	6031      	str	r1, [r6, #0]
 800d75c:	07d9      	lsls	r1, r3, #31
 800d75e:	bf44      	itt	mi
 800d760:	f043 0320 	orrmi.w	r3, r3, #32
 800d764:	6023      	strmi	r3, [r4, #0]
 800d766:	b11d      	cbz	r5, 800d770 <_printf_i+0x19c>
 800d768:	2310      	movs	r3, #16
 800d76a:	e7ad      	b.n	800d6c8 <_printf_i+0xf4>
 800d76c:	4826      	ldr	r0, [pc, #152]	@ (800d808 <_printf_i+0x234>)
 800d76e:	e7e9      	b.n	800d744 <_printf_i+0x170>
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	f023 0320 	bic.w	r3, r3, #32
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	e7f6      	b.n	800d768 <_printf_i+0x194>
 800d77a:	4616      	mov	r6, r2
 800d77c:	e7bd      	b.n	800d6fa <_printf_i+0x126>
 800d77e:	6833      	ldr	r3, [r6, #0]
 800d780:	6825      	ldr	r5, [r4, #0]
 800d782:	6961      	ldr	r1, [r4, #20]
 800d784:	1d18      	adds	r0, r3, #4
 800d786:	6030      	str	r0, [r6, #0]
 800d788:	062e      	lsls	r6, r5, #24
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	d501      	bpl.n	800d792 <_printf_i+0x1be>
 800d78e:	6019      	str	r1, [r3, #0]
 800d790:	e002      	b.n	800d798 <_printf_i+0x1c4>
 800d792:	0668      	lsls	r0, r5, #25
 800d794:	d5fb      	bpl.n	800d78e <_printf_i+0x1ba>
 800d796:	8019      	strh	r1, [r3, #0]
 800d798:	2300      	movs	r3, #0
 800d79a:	6123      	str	r3, [r4, #16]
 800d79c:	4616      	mov	r6, r2
 800d79e:	e7bc      	b.n	800d71a <_printf_i+0x146>
 800d7a0:	6833      	ldr	r3, [r6, #0]
 800d7a2:	1d1a      	adds	r2, r3, #4
 800d7a4:	6032      	str	r2, [r6, #0]
 800d7a6:	681e      	ldr	r6, [r3, #0]
 800d7a8:	6862      	ldr	r2, [r4, #4]
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f7f2 fd2f 	bl	8000210 <memchr>
 800d7b2:	b108      	cbz	r0, 800d7b8 <_printf_i+0x1e4>
 800d7b4:	1b80      	subs	r0, r0, r6
 800d7b6:	6060      	str	r0, [r4, #4]
 800d7b8:	6863      	ldr	r3, [r4, #4]
 800d7ba:	6123      	str	r3, [r4, #16]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7c2:	e7aa      	b.n	800d71a <_printf_i+0x146>
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	4632      	mov	r2, r6
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	47d0      	blx	sl
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d0ad      	beq.n	800d72e <_printf_i+0x15a>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	079b      	lsls	r3, r3, #30
 800d7d6:	d413      	bmi.n	800d800 <_printf_i+0x22c>
 800d7d8:	68e0      	ldr	r0, [r4, #12]
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	4298      	cmp	r0, r3
 800d7de:	bfb8      	it	lt
 800d7e0:	4618      	movlt	r0, r3
 800d7e2:	e7a6      	b.n	800d732 <_printf_i+0x15e>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4632      	mov	r2, r6
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	4640      	mov	r0, r8
 800d7ec:	47d0      	blx	sl
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d09d      	beq.n	800d72e <_printf_i+0x15a>
 800d7f2:	3501      	adds	r5, #1
 800d7f4:	68e3      	ldr	r3, [r4, #12]
 800d7f6:	9903      	ldr	r1, [sp, #12]
 800d7f8:	1a5b      	subs	r3, r3, r1
 800d7fa:	42ab      	cmp	r3, r5
 800d7fc:	dcf2      	bgt.n	800d7e4 <_printf_i+0x210>
 800d7fe:	e7eb      	b.n	800d7d8 <_printf_i+0x204>
 800d800:	2500      	movs	r5, #0
 800d802:	f104 0619 	add.w	r6, r4, #25
 800d806:	e7f5      	b.n	800d7f4 <_printf_i+0x220>
 800d808:	0800f147 	.word	0x0800f147
 800d80c:	0800f158 	.word	0x0800f158

0800d810 <__sflush_r>:
 800d810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	0716      	lsls	r6, r2, #28
 800d81a:	4605      	mov	r5, r0
 800d81c:	460c      	mov	r4, r1
 800d81e:	d454      	bmi.n	800d8ca <__sflush_r+0xba>
 800d820:	684b      	ldr	r3, [r1, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	dc02      	bgt.n	800d82c <__sflush_r+0x1c>
 800d826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dd48      	ble.n	800d8be <__sflush_r+0xae>
 800d82c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d82e:	2e00      	cmp	r6, #0
 800d830:	d045      	beq.n	800d8be <__sflush_r+0xae>
 800d832:	2300      	movs	r3, #0
 800d834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d838:	682f      	ldr	r7, [r5, #0]
 800d83a:	6a21      	ldr	r1, [r4, #32]
 800d83c:	602b      	str	r3, [r5, #0]
 800d83e:	d030      	beq.n	800d8a2 <__sflush_r+0x92>
 800d840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	0759      	lsls	r1, r3, #29
 800d846:	d505      	bpl.n	800d854 <__sflush_r+0x44>
 800d848:	6863      	ldr	r3, [r4, #4]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d84e:	b10b      	cbz	r3, 800d854 <__sflush_r+0x44>
 800d850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d852:	1ad2      	subs	r2, r2, r3
 800d854:	2300      	movs	r3, #0
 800d856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d858:	6a21      	ldr	r1, [r4, #32]
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b0      	blx	r6
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	d106      	bne.n	800d872 <__sflush_r+0x62>
 800d864:	6829      	ldr	r1, [r5, #0]
 800d866:	291d      	cmp	r1, #29
 800d868:	d82b      	bhi.n	800d8c2 <__sflush_r+0xb2>
 800d86a:	4a2a      	ldr	r2, [pc, #168]	@ (800d914 <__sflush_r+0x104>)
 800d86c:	40ca      	lsrs	r2, r1
 800d86e:	07d6      	lsls	r6, r2, #31
 800d870:	d527      	bpl.n	800d8c2 <__sflush_r+0xb2>
 800d872:	2200      	movs	r2, #0
 800d874:	6062      	str	r2, [r4, #4]
 800d876:	04d9      	lsls	r1, r3, #19
 800d878:	6922      	ldr	r2, [r4, #16]
 800d87a:	6022      	str	r2, [r4, #0]
 800d87c:	d504      	bpl.n	800d888 <__sflush_r+0x78>
 800d87e:	1c42      	adds	r2, r0, #1
 800d880:	d101      	bne.n	800d886 <__sflush_r+0x76>
 800d882:	682b      	ldr	r3, [r5, #0]
 800d884:	b903      	cbnz	r3, 800d888 <__sflush_r+0x78>
 800d886:	6560      	str	r0, [r4, #84]	@ 0x54
 800d888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d88a:	602f      	str	r7, [r5, #0]
 800d88c:	b1b9      	cbz	r1, 800d8be <__sflush_r+0xae>
 800d88e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d892:	4299      	cmp	r1, r3
 800d894:	d002      	beq.n	800d89c <__sflush_r+0x8c>
 800d896:	4628      	mov	r0, r5
 800d898:	f7ff fa94 	bl	800cdc4 <_free_r>
 800d89c:	2300      	movs	r3, #0
 800d89e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8a0:	e00d      	b.n	800d8be <__sflush_r+0xae>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b0      	blx	r6
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	1c50      	adds	r0, r2, #1
 800d8ac:	d1c9      	bne.n	800d842 <__sflush_r+0x32>
 800d8ae:	682b      	ldr	r3, [r5, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0c6      	beq.n	800d842 <__sflush_r+0x32>
 800d8b4:	2b1d      	cmp	r3, #29
 800d8b6:	d001      	beq.n	800d8bc <__sflush_r+0xac>
 800d8b8:	2b16      	cmp	r3, #22
 800d8ba:	d11e      	bne.n	800d8fa <__sflush_r+0xea>
 800d8bc:	602f      	str	r7, [r5, #0]
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e022      	b.n	800d908 <__sflush_r+0xf8>
 800d8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8c6:	b21b      	sxth	r3, r3
 800d8c8:	e01b      	b.n	800d902 <__sflush_r+0xf2>
 800d8ca:	690f      	ldr	r7, [r1, #16]
 800d8cc:	2f00      	cmp	r7, #0
 800d8ce:	d0f6      	beq.n	800d8be <__sflush_r+0xae>
 800d8d0:	0793      	lsls	r3, r2, #30
 800d8d2:	680e      	ldr	r6, [r1, #0]
 800d8d4:	bf08      	it	eq
 800d8d6:	694b      	ldreq	r3, [r1, #20]
 800d8d8:	600f      	str	r7, [r1, #0]
 800d8da:	bf18      	it	ne
 800d8dc:	2300      	movne	r3, #0
 800d8de:	eba6 0807 	sub.w	r8, r6, r7
 800d8e2:	608b      	str	r3, [r1, #8]
 800d8e4:	f1b8 0f00 	cmp.w	r8, #0
 800d8e8:	dde9      	ble.n	800d8be <__sflush_r+0xae>
 800d8ea:	6a21      	ldr	r1, [r4, #32]
 800d8ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8ee:	4643      	mov	r3, r8
 800d8f0:	463a      	mov	r2, r7
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	47b0      	blx	r6
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	dc08      	bgt.n	800d90c <__sflush_r+0xfc>
 800d8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	4407      	add	r7, r0
 800d90e:	eba8 0800 	sub.w	r8, r8, r0
 800d912:	e7e7      	b.n	800d8e4 <__sflush_r+0xd4>
 800d914:	20400001 	.word	0x20400001

0800d918 <_fflush_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	690b      	ldr	r3, [r1, #16]
 800d91c:	4605      	mov	r5, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	b913      	cbnz	r3, 800d928 <_fflush_r+0x10>
 800d922:	2500      	movs	r5, #0
 800d924:	4628      	mov	r0, r5
 800d926:	bd38      	pop	{r3, r4, r5, pc}
 800d928:	b118      	cbz	r0, 800d932 <_fflush_r+0x1a>
 800d92a:	6a03      	ldr	r3, [r0, #32]
 800d92c:	b90b      	cbnz	r3, 800d932 <_fflush_r+0x1a>
 800d92e:	f7ff f873 	bl	800ca18 <__sinit>
 800d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0f3      	beq.n	800d922 <_fflush_r+0xa>
 800d93a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d93c:	07d0      	lsls	r0, r2, #31
 800d93e:	d404      	bmi.n	800d94a <_fflush_r+0x32>
 800d940:	0599      	lsls	r1, r3, #22
 800d942:	d402      	bmi.n	800d94a <_fflush_r+0x32>
 800d944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d946:	f7ff fa0e 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800d94a:	4628      	mov	r0, r5
 800d94c:	4621      	mov	r1, r4
 800d94e:	f7ff ff5f 	bl	800d810 <__sflush_r>
 800d952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d954:	07da      	lsls	r2, r3, #31
 800d956:	4605      	mov	r5, r0
 800d958:	d4e4      	bmi.n	800d924 <_fflush_r+0xc>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	059b      	lsls	r3, r3, #22
 800d95e:	d4e1      	bmi.n	800d924 <_fflush_r+0xc>
 800d960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d962:	f7ff fa01 	bl	800cd68 <__retarget_lock_release_recursive>
 800d966:	e7dd      	b.n	800d924 <_fflush_r+0xc>

0800d968 <fiprintf>:
 800d968:	b40e      	push	{r1, r2, r3}
 800d96a:	b503      	push	{r0, r1, lr}
 800d96c:	4601      	mov	r1, r0
 800d96e:	ab03      	add	r3, sp, #12
 800d970:	4805      	ldr	r0, [pc, #20]	@ (800d988 <fiprintf+0x20>)
 800d972:	f853 2b04 	ldr.w	r2, [r3], #4
 800d976:	6800      	ldr	r0, [r0, #0]
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	f7ff fca5 	bl	800d2c8 <_vfiprintf_r>
 800d97e:	b002      	add	sp, #8
 800d980:	f85d eb04 	ldr.w	lr, [sp], #4
 800d984:	b003      	add	sp, #12
 800d986:	4770      	bx	lr
 800d988:	20000250 	.word	0x20000250

0800d98c <__swbuf_r>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	460e      	mov	r6, r1
 800d990:	4614      	mov	r4, r2
 800d992:	4605      	mov	r5, r0
 800d994:	b118      	cbz	r0, 800d99e <__swbuf_r+0x12>
 800d996:	6a03      	ldr	r3, [r0, #32]
 800d998:	b90b      	cbnz	r3, 800d99e <__swbuf_r+0x12>
 800d99a:	f7ff f83d 	bl	800ca18 <__sinit>
 800d99e:	69a3      	ldr	r3, [r4, #24]
 800d9a0:	60a3      	str	r3, [r4, #8]
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	071a      	lsls	r2, r3, #28
 800d9a6:	d501      	bpl.n	800d9ac <__swbuf_r+0x20>
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	b943      	cbnz	r3, 800d9be <__swbuf_r+0x32>
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 f82a 	bl	800da08 <__swsetup_r>
 800d9b4:	b118      	cbz	r0, 800d9be <__swbuf_r+0x32>
 800d9b6:	f04f 37ff 	mov.w	r7, #4294967295
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	6922      	ldr	r2, [r4, #16]
 800d9c2:	1a98      	subs	r0, r3, r2
 800d9c4:	6963      	ldr	r3, [r4, #20]
 800d9c6:	b2f6      	uxtb	r6, r6
 800d9c8:	4283      	cmp	r3, r0
 800d9ca:	4637      	mov	r7, r6
 800d9cc:	dc05      	bgt.n	800d9da <__swbuf_r+0x4e>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	f7ff ffa1 	bl	800d918 <_fflush_r>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d1ed      	bne.n	800d9b6 <__swbuf_r+0x2a>
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	60a3      	str	r3, [r4, #8]
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	6022      	str	r2, [r4, #0]
 800d9e6:	701e      	strb	r6, [r3, #0]
 800d9e8:	6962      	ldr	r2, [r4, #20]
 800d9ea:	1c43      	adds	r3, r0, #1
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d004      	beq.n	800d9fa <__swbuf_r+0x6e>
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	07db      	lsls	r3, r3, #31
 800d9f4:	d5e1      	bpl.n	800d9ba <__swbuf_r+0x2e>
 800d9f6:	2e0a      	cmp	r6, #10
 800d9f8:	d1df      	bne.n	800d9ba <__swbuf_r+0x2e>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f7ff ff8b 	bl	800d918 <_fflush_r>
 800da02:	2800      	cmp	r0, #0
 800da04:	d0d9      	beq.n	800d9ba <__swbuf_r+0x2e>
 800da06:	e7d6      	b.n	800d9b6 <__swbuf_r+0x2a>

0800da08 <__swsetup_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4b29      	ldr	r3, [pc, #164]	@ (800dab0 <__swsetup_r+0xa8>)
 800da0c:	4605      	mov	r5, r0
 800da0e:	6818      	ldr	r0, [r3, #0]
 800da10:	460c      	mov	r4, r1
 800da12:	b118      	cbz	r0, 800da1c <__swsetup_r+0x14>
 800da14:	6a03      	ldr	r3, [r0, #32]
 800da16:	b90b      	cbnz	r3, 800da1c <__swsetup_r+0x14>
 800da18:	f7fe fffe 	bl	800ca18 <__sinit>
 800da1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da20:	0719      	lsls	r1, r3, #28
 800da22:	d422      	bmi.n	800da6a <__swsetup_r+0x62>
 800da24:	06da      	lsls	r2, r3, #27
 800da26:	d407      	bmi.n	800da38 <__swsetup_r+0x30>
 800da28:	2209      	movs	r2, #9
 800da2a:	602a      	str	r2, [r5, #0]
 800da2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	f04f 30ff 	mov.w	r0, #4294967295
 800da36:	e033      	b.n	800daa0 <__swsetup_r+0x98>
 800da38:	0758      	lsls	r0, r3, #29
 800da3a:	d512      	bpl.n	800da62 <__swsetup_r+0x5a>
 800da3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da3e:	b141      	cbz	r1, 800da52 <__swsetup_r+0x4a>
 800da40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da44:	4299      	cmp	r1, r3
 800da46:	d002      	beq.n	800da4e <__swsetup_r+0x46>
 800da48:	4628      	mov	r0, r5
 800da4a:	f7ff f9bb 	bl	800cdc4 <_free_r>
 800da4e:	2300      	movs	r3, #0
 800da50:	6363      	str	r3, [r4, #52]	@ 0x34
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	2300      	movs	r3, #0
 800da5c:	6063      	str	r3, [r4, #4]
 800da5e:	6923      	ldr	r3, [r4, #16]
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f043 0308 	orr.w	r3, r3, #8
 800da68:	81a3      	strh	r3, [r4, #12]
 800da6a:	6923      	ldr	r3, [r4, #16]
 800da6c:	b94b      	cbnz	r3, 800da82 <__swsetup_r+0x7a>
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da78:	d003      	beq.n	800da82 <__swsetup_r+0x7a>
 800da7a:	4621      	mov	r1, r4
 800da7c:	4628      	mov	r0, r5
 800da7e:	f000 f89e 	bl	800dbbe <__smakebuf_r>
 800da82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da86:	f013 0201 	ands.w	r2, r3, #1
 800da8a:	d00a      	beq.n	800daa2 <__swsetup_r+0x9a>
 800da8c:	2200      	movs	r2, #0
 800da8e:	60a2      	str	r2, [r4, #8]
 800da90:	6962      	ldr	r2, [r4, #20]
 800da92:	4252      	negs	r2, r2
 800da94:	61a2      	str	r2, [r4, #24]
 800da96:	6922      	ldr	r2, [r4, #16]
 800da98:	b942      	cbnz	r2, 800daac <__swsetup_r+0xa4>
 800da9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da9e:	d1c5      	bne.n	800da2c <__swsetup_r+0x24>
 800daa0:	bd38      	pop	{r3, r4, r5, pc}
 800daa2:	0799      	lsls	r1, r3, #30
 800daa4:	bf58      	it	pl
 800daa6:	6962      	ldrpl	r2, [r4, #20]
 800daa8:	60a2      	str	r2, [r4, #8]
 800daaa:	e7f4      	b.n	800da96 <__swsetup_r+0x8e>
 800daac:	2000      	movs	r0, #0
 800daae:	e7f7      	b.n	800daa0 <__swsetup_r+0x98>
 800dab0:	20000250 	.word	0x20000250

0800dab4 <memmove>:
 800dab4:	4288      	cmp	r0, r1
 800dab6:	b510      	push	{r4, lr}
 800dab8:	eb01 0402 	add.w	r4, r1, r2
 800dabc:	d902      	bls.n	800dac4 <memmove+0x10>
 800dabe:	4284      	cmp	r4, r0
 800dac0:	4623      	mov	r3, r4
 800dac2:	d807      	bhi.n	800dad4 <memmove+0x20>
 800dac4:	1e43      	subs	r3, r0, #1
 800dac6:	42a1      	cmp	r1, r4
 800dac8:	d008      	beq.n	800dadc <memmove+0x28>
 800daca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dace:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dad2:	e7f8      	b.n	800dac6 <memmove+0x12>
 800dad4:	4402      	add	r2, r0
 800dad6:	4601      	mov	r1, r0
 800dad8:	428a      	cmp	r2, r1
 800dada:	d100      	bne.n	800dade <memmove+0x2a>
 800dadc:	bd10      	pop	{r4, pc}
 800dade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dae6:	e7f7      	b.n	800dad8 <memmove+0x24>

0800dae8 <_sbrk_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4d06      	ldr	r5, [pc, #24]	@ (800db04 <_sbrk_r+0x1c>)
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	f7f5 ff58 	bl	80039a8 <_sbrk>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_sbrk_r+0x1a>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_sbrk_r+0x1a>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	20001634 	.word	0x20001634

0800db08 <abort>:
 800db08:	b508      	push	{r3, lr}
 800db0a:	2006      	movs	r0, #6
 800db0c:	f000 f8bc 	bl	800dc88 <raise>
 800db10:	2001      	movs	r0, #1
 800db12:	f7f5 fed0 	bl	80038b6 <_exit>

0800db16 <_realloc_r>:
 800db16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db1a:	4607      	mov	r7, r0
 800db1c:	4614      	mov	r4, r2
 800db1e:	460d      	mov	r5, r1
 800db20:	b921      	cbnz	r1, 800db2c <_realloc_r+0x16>
 800db22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db26:	4611      	mov	r1, r2
 800db28:	f7ff b9c0 	b.w	800ceac <_malloc_r>
 800db2c:	b92a      	cbnz	r2, 800db3a <_realloc_r+0x24>
 800db2e:	f7ff f949 	bl	800cdc4 <_free_r>
 800db32:	4625      	mov	r5, r4
 800db34:	4628      	mov	r0, r5
 800db36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db3a:	f000 f8e3 	bl	800dd04 <_malloc_usable_size_r>
 800db3e:	4284      	cmp	r4, r0
 800db40:	4606      	mov	r6, r0
 800db42:	d802      	bhi.n	800db4a <_realloc_r+0x34>
 800db44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db48:	d8f4      	bhi.n	800db34 <_realloc_r+0x1e>
 800db4a:	4621      	mov	r1, r4
 800db4c:	4638      	mov	r0, r7
 800db4e:	f7ff f9ad 	bl	800ceac <_malloc_r>
 800db52:	4680      	mov	r8, r0
 800db54:	b908      	cbnz	r0, 800db5a <_realloc_r+0x44>
 800db56:	4645      	mov	r5, r8
 800db58:	e7ec      	b.n	800db34 <_realloc_r+0x1e>
 800db5a:	42b4      	cmp	r4, r6
 800db5c:	4622      	mov	r2, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	bf28      	it	cs
 800db62:	4632      	movcs	r2, r6
 800db64:	f7ff f901 	bl	800cd6a <memcpy>
 800db68:	4629      	mov	r1, r5
 800db6a:	4638      	mov	r0, r7
 800db6c:	f7ff f92a 	bl	800cdc4 <_free_r>
 800db70:	e7f1      	b.n	800db56 <_realloc_r+0x40>

0800db72 <__swhatbuf_r>:
 800db72:	b570      	push	{r4, r5, r6, lr}
 800db74:	460c      	mov	r4, r1
 800db76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7a:	2900      	cmp	r1, #0
 800db7c:	b096      	sub	sp, #88	@ 0x58
 800db7e:	4615      	mov	r5, r2
 800db80:	461e      	mov	r6, r3
 800db82:	da0d      	bge.n	800dba0 <__swhatbuf_r+0x2e>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db8a:	f04f 0100 	mov.w	r1, #0
 800db8e:	bf14      	ite	ne
 800db90:	2340      	movne	r3, #64	@ 0x40
 800db92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db96:	2000      	movs	r0, #0
 800db98:	6031      	str	r1, [r6, #0]
 800db9a:	602b      	str	r3, [r5, #0]
 800db9c:	b016      	add	sp, #88	@ 0x58
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	466a      	mov	r2, sp
 800dba2:	f000 f879 	bl	800dc98 <_fstat_r>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	dbec      	blt.n	800db84 <__swhatbuf_r+0x12>
 800dbaa:	9901      	ldr	r1, [sp, #4]
 800dbac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbb4:	4259      	negs	r1, r3
 800dbb6:	4159      	adcs	r1, r3
 800dbb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbbc:	e7eb      	b.n	800db96 <__swhatbuf_r+0x24>

0800dbbe <__smakebuf_r>:
 800dbbe:	898b      	ldrh	r3, [r1, #12]
 800dbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbc2:	079d      	lsls	r5, r3, #30
 800dbc4:	4606      	mov	r6, r0
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	d507      	bpl.n	800dbda <__smakebuf_r+0x1c>
 800dbca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	6123      	str	r3, [r4, #16]
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	6163      	str	r3, [r4, #20]
 800dbd6:	b003      	add	sp, #12
 800dbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbda:	ab01      	add	r3, sp, #4
 800dbdc:	466a      	mov	r2, sp
 800dbde:	f7ff ffc8 	bl	800db72 <__swhatbuf_r>
 800dbe2:	9f00      	ldr	r7, [sp, #0]
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff f95f 	bl	800ceac <_malloc_r>
 800dbee:	b948      	cbnz	r0, 800dc04 <__smakebuf_r+0x46>
 800dbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf4:	059a      	lsls	r2, r3, #22
 800dbf6:	d4ee      	bmi.n	800dbd6 <__smakebuf_r+0x18>
 800dbf8:	f023 0303 	bic.w	r3, r3, #3
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	81a3      	strh	r3, [r4, #12]
 800dc02:	e7e2      	b.n	800dbca <__smakebuf_r+0xc>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	6020      	str	r0, [r4, #0]
 800dc08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc14:	b15b      	cbz	r3, 800dc2e <__smakebuf_r+0x70>
 800dc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f000 f84e 	bl	800dcbc <_isatty_r>
 800dc20:	b128      	cbz	r0, 800dc2e <__smakebuf_r+0x70>
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	f023 0303 	bic.w	r3, r3, #3
 800dc28:	f043 0301 	orr.w	r3, r3, #1
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	431d      	orrs	r5, r3
 800dc32:	81a5      	strh	r5, [r4, #12]
 800dc34:	e7cf      	b.n	800dbd6 <__smakebuf_r+0x18>

0800dc36 <_raise_r>:
 800dc36:	291f      	cmp	r1, #31
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	d904      	bls.n	800dc4a <_raise_r+0x14>
 800dc40:	2316      	movs	r3, #22
 800dc42:	6003      	str	r3, [r0, #0]
 800dc44:	f04f 30ff 	mov.w	r0, #4294967295
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc4c:	b112      	cbz	r2, 800dc54 <_raise_r+0x1e>
 800dc4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc52:	b94b      	cbnz	r3, 800dc68 <_raise_r+0x32>
 800dc54:	4628      	mov	r0, r5
 800dc56:	f000 f853 	bl	800dd00 <_getpid_r>
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	4601      	mov	r1, r0
 800dc5e:	4628      	mov	r0, r5
 800dc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc64:	f000 b83a 	b.w	800dcdc <_kill_r>
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d00a      	beq.n	800dc82 <_raise_r+0x4c>
 800dc6c:	1c59      	adds	r1, r3, #1
 800dc6e:	d103      	bne.n	800dc78 <_raise_r+0x42>
 800dc70:	2316      	movs	r3, #22
 800dc72:	6003      	str	r3, [r0, #0]
 800dc74:	2001      	movs	r0, #1
 800dc76:	e7e7      	b.n	800dc48 <_raise_r+0x12>
 800dc78:	2100      	movs	r1, #0
 800dc7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4798      	blx	r3
 800dc82:	2000      	movs	r0, #0
 800dc84:	e7e0      	b.n	800dc48 <_raise_r+0x12>
	...

0800dc88 <raise>:
 800dc88:	4b02      	ldr	r3, [pc, #8]	@ (800dc94 <raise+0xc>)
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	6818      	ldr	r0, [r3, #0]
 800dc8e:	f7ff bfd2 	b.w	800dc36 <_raise_r>
 800dc92:	bf00      	nop
 800dc94:	20000250 	.word	0x20000250

0800dc98 <_fstat_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4d07      	ldr	r5, [pc, #28]	@ (800dcb8 <_fstat_r+0x20>)
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	4604      	mov	r4, r0
 800dca0:	4608      	mov	r0, r1
 800dca2:	4611      	mov	r1, r2
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	f7f5 fe56 	bl	8003956 <_fstat>
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	d102      	bne.n	800dcb4 <_fstat_r+0x1c>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	b103      	cbz	r3, 800dcb4 <_fstat_r+0x1c>
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	bd38      	pop	{r3, r4, r5, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20001634 	.word	0x20001634

0800dcbc <_isatty_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	@ (800dcd8 <_isatty_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f5 fe55 	bl	8003976 <_isatty>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_isatty_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_isatty_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	20001634 	.word	0x20001634

0800dcdc <_kill_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4d07      	ldr	r5, [pc, #28]	@ (800dcfc <_kill_r+0x20>)
 800dce0:	2300      	movs	r3, #0
 800dce2:	4604      	mov	r4, r0
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	f7f5 fdd4 	bl	8003896 <_kill>
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	d102      	bne.n	800dcf8 <_kill_r+0x1c>
 800dcf2:	682b      	ldr	r3, [r5, #0]
 800dcf4:	b103      	cbz	r3, 800dcf8 <_kill_r+0x1c>
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20001634 	.word	0x20001634

0800dd00 <_getpid_r>:
 800dd00:	f7f5 bdc1 	b.w	8003886 <_getpid>

0800dd04 <_malloc_usable_size_r>:
 800dd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd08:	1f18      	subs	r0, r3, #4
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfbc      	itt	lt
 800dd0e:	580b      	ldrlt	r3, [r1, r0]
 800dd10:	18c0      	addlt	r0, r0, r3
 800dd12:	4770      	bx	lr

0800dd14 <_init>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_fini>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr
