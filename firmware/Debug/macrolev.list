
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000101a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d9ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001310  0800db8c  0800db8c  0000eb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ee9c  0800ee9c  000101a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800ee9c  0800ee9c  0000fe9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800eea4  0800eea4  000101a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800eea4  0800eea4  0000fea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800eea8  0800eea8  0000fea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001a0  20000000  0800eeac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001280  200001a0  0800f04c  000101a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001420  0800f04c  00010420  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e884  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054f3  00000000  00000000  0002ea54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00033f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001202  00000000  00000000  00035608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020382  00000000  00000000  0003680a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee01  00000000  00000000  00056b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9bba  00000000  00000000  0007598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f547  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a58  00000000  00000000  0012f58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00135fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db74 	.word	0x0800db74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	0800db74 	.word	0x0800db74

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void cdc_write_string_chunked(const char *str);
static void cdc_write_flush_wait(void);

extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 f8af 	bl	8006748 <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <cdc_performance_measure+0x56>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fa57 	bl	8003aa8 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 8000606:	f107 000c 	add.w	r0, r7, #12
 800060a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <cdc_performance_measure+0x60>)
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f00c f968 	bl	800c8e4 <sniprintf>
 8000614:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 8000616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	653a      	str	r2, [r7, #80]	@ 0x50
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000624:	2000      	movs	r0, #0
 8000626:	f006 f90f 	bl	8006848 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f006 f940 	bl	80068b0 <tud_cdc_n_write_flush>
 8000630:	e000      	b.n	8000634 <cdc_performance_measure+0x58>
    return;
 8000632:	bf00      	nop
  tud_cdc_write_flush(); // Make sure data is sent
}
 8000634:	3760      	adds	r7, #96	@ 0x60
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	0800db8c 	.word	0x0800db8c

08000640 <cdc_task>:
void cdc_task(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f006 f87e 	bl	8006748 <tud_cdc_n_connected>
 800064c:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 800064e:	2b00      	cmp	r3, #0
 8000650:	d079      	beq.n	8000746 <cdc_task+0x106>
  return tud_cdc_n_available(0);
 8000652:	2000      	movs	r0, #0
 8000654:	f006 f8b6 	bl	80067c4 <tud_cdc_n_available>
 8000658:	4603      	mov	r3, r0
    if (tud_cdc_available()) {
 800065a:	2b00      	cmp	r3, #0
 800065c:	d076      	beq.n	800074c <cdc_task+0x10c>
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	657b      	str	r3, [r7, #84]	@ 0x54
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 8000666:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800066a:	2000      	movs	r0, #0
 800066c:	f006 f8c0 	bl	80067f0 <tud_cdc_n_read>
 8000670:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000678:	e05e      	b.n	8000738 <cdc_task+0xf8>
        char c = buf[i];
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle backspace
        if (c == '\b' || c == 127) {
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b08      	cmp	r3, #8
 800068c:	d003      	beq.n	8000696 <cdc_task+0x56>
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b7f      	cmp	r3, #127	@ 0x7f
 8000694:	d10d      	bne.n	80006b2 <cdc_task+0x72>
          if (cmd_index > 0) {
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <cdc_task+0x114>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d049      	beq.n	8000732 <cdc_task+0xf2>
            cmd_index--;
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <cdc_task+0x114>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <cdc_task+0x114>)
 80006a8:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006aa:	482b      	ldr	r0, [pc, #172]	@ (8000758 <cdc_task+0x118>)
 80006ac:	f000 f85c 	bl	8000768 <cdc_write_string_chunked>
          if (cmd_index > 0) {
 80006b0:	e03f      	b.n	8000732 <cdc_task+0xf2>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d003      	beq.n	80006c2 <cdc_task+0x82>
 80006ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d116      	bne.n	80006f0 <cdc_task+0xb0>
          cdc_write_string_chunked("\r\n");
 80006c2:	4826      	ldr	r0, [pc, #152]	@ (800075c <cdc_task+0x11c>)
 80006c4:	f000 f850 	bl	8000768 <cdc_write_string_chunked>
          cmd_buffer[cmd_index] = '\0';
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <cdc_task+0x114>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <cdc_task+0x120>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	5499      	strb	r1, [r3, r2]

          if (cmd_index > 0) {
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <cdc_task+0x114>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <cdc_task+0xa8>
            process_command(cmd_buffer);
 80006dc:	4820      	ldr	r0, [pc, #128]	@ (8000760 <cdc_task+0x120>)
 80006de:	f000 f8af 	bl	8000840 <process_command>
            cmd_index = 0;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <cdc_task+0x114>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
          }

          cdc_write_string_chunked("Ready> ");
 80006e8:	481e      	ldr	r0, [pc, #120]	@ (8000764 <cdc_task+0x124>)
 80006ea:	f000 f83d 	bl	8000768 <cdc_write_string_chunked>
 80006ee:	e020      	b.n	8000732 <cdc_task+0xf2>
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 80006f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	d91c      	bls.n	8000732 <cdc_task+0xf2>
 80006f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80006fe:	d818      	bhi.n	8000732 <cdc_task+0xf2>
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <cdc_task+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b3e      	cmp	r3, #62	@ 0x3e
 8000706:	d814      	bhi.n	8000732 <cdc_task+0xf2>
          cmd_buffer[cmd_index++] = c;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <cdc_task+0x114>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <cdc_task+0x114>)
 8000712:	7011      	strb	r1, [r2, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <cdc_task+0x120>)
 800071c:	5499      	strb	r1, [r3, r2]
 800071e:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000724:	2301      	movs	r3, #1
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 8000728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800072a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800072c:	2000      	movs	r0, #0
 800072e:	f006 f88b 	bl	8006848 <tud_cdc_n_write>
      for (uint32_t i = 0; i < count; i++) {
 8000732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000734:	3301      	adds	r3, #1
 8000736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800073a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800073c:	429a      	cmp	r2, r3
 800073e:	d39c      	bcc.n	800067a <cdc_task+0x3a>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      cdc_write_flush_wait();
 8000740:	f000 f85d 	bl	80007fe <cdc_write_flush_wait>
    }
  } else {
    // Reset flag when disconnected
    cmd_index = 0;
  }
}
 8000744:	e002      	b.n	800074c <cdc_task+0x10c>
    cmd_index = 0;
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <cdc_task+0x114>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3760      	adds	r7, #96	@ 0x60
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001fc 	.word	0x200001fc
 8000758:	0800dba8 	.word	0x0800dba8
 800075c:	0800dbac 	.word	0x0800dbac
 8000760:	200001bc 	.word	0x200001bc
 8000764:	0800dbb0 	.word	0x0800dbb0

08000768 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if (!str)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d03f      	beq.n	80007f6 <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fd3c 	bl	80001f4 <strlen>
 800077c:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 8000782:	2338      	movs	r3, #56	@ 0x38
 8000784:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 8000786:	e031      	b.n	80007ec <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	4293      	cmp	r3, r2
 8000792:	bf28      	it	cs
 8000794:	4613      	movcs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000798:	e005      	b.n	80007a6 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800079a:	2100      	movs	r1, #0
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f008 f960 	bl	8008a64 <tud_task_ext>
}
 80007a4:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f006 f904 	bl	80069b4 <tud_cdc_n_write_available>
 80007ac:	4602      	mov	r2, r0
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d8f2      	bhi.n	800079a <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	4413      	add	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f006 f83f 	bl	8006848 <tud_cdc_n_write>
    sent += to_send;
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4413      	add	r3, r2
 80007d0:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f006 f8ee 	bl	80069b4 <tud_cdc_n_write_available>
 80007d8:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d803      	bhi.n	80007e8 <cdc_write_string_chunked+0x80>
 80007e0:	69fa      	ldr	r2, [r7, #28]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d301      	bcc.n	80007ec <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 80007e8:	f000 f809 	bl	80007fe <cdc_write_flush_wait>
  while (sent < len) {
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c9      	bcc.n	8000788 <cdc_write_string_chunked+0x20>
 80007f4:	e000      	b.n	80007f8 <cdc_write_string_chunked+0x90>
    return;
 80007f6:	bf00      	nop
    }
  }
}
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f006 f853 	bl	80068b0 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800080e:	e008      	b.n	8000822 <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000810:	2100      	movs	r1, #0
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	f008 f925 	bl	8008a64 <tud_task_ext>
}
 800081a:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f006 f8c6 	bl	80069b4 <tud_cdc_n_write_available>
 8000828:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800082a:	2b7f      	cmp	r3, #127	@ 0x7f
 800082c:	d804      	bhi.n	8000838 <cdc_write_flush_wait+0x3a>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000834:	4293      	cmp	r3, r2
 8000836:	d9eb      	bls.n	8000810 <cdc_write_flush_wait+0x12>
  }
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <process_command>:

static void process_command(char *cmd) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	@ 0x58
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
 800084c:	e018      	b.n	8000880 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 800084e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b40      	cmp	r3, #64	@ 0x40
 8000858:	d90f      	bls.n	800087a <process_command+0x3a>
 800085a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b5a      	cmp	r3, #90	@ 0x5a
 8000864:	d809      	bhi.n	800087a <process_command+0x3a>
      cmd[i] += 32;
 8000866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	440b      	add	r3, r1
 8000874:	3220      	adds	r2, #32
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 800087a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800087c:	3301      	adds	r3, #1
 800087e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e0      	bne.n	800084e <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 800088c:	49ad      	ldr	r1, [pc, #692]	@ (8000b44 <process_command+0x304>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f00c f8cc 	bl	800ca2c <strtok>
 8000894:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 817f 	beq.w	8000b9c <process_command+0x35c>
    return;

  if (strcmp(token, "help") == 0) {
 800089e:	49aa      	ldr	r1, [pc, #680]	@ (8000b48 <process_command+0x308>)
 80008a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008a2:	f7ff fc9d 	bl	80001e0 <strcmp>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <process_command+0x72>
    print_help();
 80008ac:	f000 f97e 	bl	8000bac <print_help>
 80008b0:	e175      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "show") == 0) {
 80008b2:	49a6      	ldr	r1, [pc, #664]	@ (8000b4c <process_command+0x30c>)
 80008b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b6:	f7ff fc93 	bl	80001e0 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <process_command+0x86>
    print_config();
 80008c0:	f000 f9ba 	bl	8000c38 <print_config>
 80008c4:	e16b      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "set") == 0) {
 80008c6:	49a2      	ldr	r1, [pc, #648]	@ (8000b50 <process_command+0x310>)
 80008c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008ca:	f7ff fc89 	bl	80001e0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d118      	bne.n	8000906 <process_command+0xc6>
    char *param = strtok(NULL, " ");
 80008d4:	499b      	ldr	r1, [pc, #620]	@ (8000b44 <process_command+0x304>)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f00c f8a8 	bl	800ca2c <strtok>
 80008dc:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 80008de:	4999      	ldr	r1, [pc, #612]	@ (8000b44 <process_command+0x304>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f00c f8a3 	bl	800ca2c <strtok>
 80008e6:	6138      	str	r0, [r7, #16]
    if (param && value) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <process_command+0xbe>
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <process_command+0xbe>
      set_config_value(param, value);
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f000 fa00 	bl	8000cfc <set_config_value>
 80008fc:	e14f      	b.n	8000b9e <process_command+0x35e>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 80008fe:	4895      	ldr	r0, [pc, #596]	@ (8000b54 <process_command+0x314>)
 8000900:	f7ff ff32 	bl	8000768 <cdc_write_string_chunked>
 8000904:	e14b      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000906:	4994      	ldr	r1, [pc, #592]	@ (8000b58 <process_command+0x318>)
 8000908:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800090a:	f7ff fc69 	bl	80001e0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11c      	bne.n	800094e <process_command+0x10e>
    char *layer_str = strtok(NULL, " ");
 8000914:	498b      	ldr	r1, [pc, #556]	@ (8000b44 <process_command+0x304>)
 8000916:	2000      	movs	r0, #0
 8000918:	f00c f888 	bl	800ca2c <strtok>
 800091c:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <process_command+0x106>
      uint8_t layer = atoi(layer_str);
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f00b fe92 	bl	800c64e <atoi>
 800092a:	4603      	mov	r3, r0
 800092c:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d804      	bhi.n	800093e <process_command+0xfe>
        print_keymap(layer);
 8000934:	7efb      	ldrb	r3, [r7, #27]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa8e 	bl	8000e58 <print_keymap>
 800093c:	e12f      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 800093e:	4887      	ldr	r0, [pc, #540]	@ (8000b5c <process_command+0x31c>)
 8000940:	f7ff ff12 	bl	8000768 <cdc_write_string_chunked>
 8000944:	e12b      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000946:	4886      	ldr	r0, [pc, #536]	@ (8000b60 <process_command+0x320>)
 8000948:	f7ff ff0e 	bl	8000768 <cdc_write_string_chunked>
 800094c:	e127      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setkey") == 0) {
 800094e:	4985      	ldr	r1, [pc, #532]	@ (8000b64 <process_command+0x324>)
 8000950:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000952:	f7ff fc45 	bl	80001e0 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d154      	bne.n	8000a06 <process_command+0x1c6>
    char *layer_str = strtok(NULL, " ");
 800095c:	4979      	ldr	r1, [pc, #484]	@ (8000b44 <process_command+0x304>)
 800095e:	2000      	movs	r0, #0
 8000960:	f00c f864 	bl	800ca2c <strtok>
 8000964:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000966:	4977      	ldr	r1, [pc, #476]	@ (8000b44 <process_command+0x304>)
 8000968:	2000      	movs	r0, #0
 800096a:	f00c f85f 	bl	800ca2c <strtok>
 800096e:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000970:	4974      	ldr	r1, [pc, #464]	@ (8000b44 <process_command+0x304>)
 8000972:	2000      	movs	r0, #0
 8000974:	f00c f85a 	bl	800ca2c <strtok>
 8000978:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 800097a:	4972      	ldr	r1, [pc, #456]	@ (8000b44 <process_command+0x304>)
 800097c:	2000      	movs	r0, #0
 800097e:	f00c f855 	bl	800ca2c <strtok>
 8000982:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	2b00      	cmp	r3, #0
 8000988:	d039      	beq.n	80009fe <process_command+0x1be>
 800098a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098c:	2b00      	cmp	r3, #0
 800098e:	d036      	beq.n	80009fe <process_command+0x1be>
 8000990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d033      	beq.n	80009fe <process_command+0x1be>
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	2b00      	cmp	r3, #0
 800099a:	d030      	beq.n	80009fe <process_command+0x1be>
      uint8_t layer = atoi(layer_str);
 800099c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800099e:	f00b fe56 	bl	800c64e <atoi>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 80009a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009aa:	f00b fe50 	bl	800c64e <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 80009b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009b6:	f00b fe4a 	bl	800c64e <atoi>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 80009c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009c2:	f00b fe44 	bl	800c64e <atoi>
 80009c6:	4603      	mov	r3, r0
 80009c8:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d811      	bhi.n	80009f6 <process_command+0x1b6>
 80009d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80d      	bhi.n	80009f6 <process_command+0x1b6>
 80009da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d809      	bhi.n	80009f6 <process_command+0x1b6>
        set_keymap_value(layer, row, col, value);
 80009e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009e4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80009e8:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80009ec:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80009f0:	f000 fb78 	bl	80010e4 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 80009f4:	e0d3      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 80009f6:	485c      	ldr	r0, [pc, #368]	@ (8000b68 <process_command+0x328>)
 80009f8:	f7ff feb6 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 80009fc:	e0cf      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 80009fe:	485b      	ldr	r0, [pc, #364]	@ (8000b6c <process_command+0x32c>)
 8000a00:	f7ff feb2 	bl	8000768 <cdc_write_string_chunked>
 8000a04:	e0cb      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000a06:	495a      	ldr	r1, [pc, #360]	@ (8000b70 <process_command+0x330>)
 8000a08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a0a:	f7ff fbe9 	bl	80001e0 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 8082 	bne.w	8000b1a <process_command+0x2da>
    char *layer_str = strtok(NULL, " ");
 8000a16:	494b      	ldr	r1, [pc, #300]	@ (8000b44 <process_command+0x304>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f00c f807 	bl	800ca2c <strtok>
 8000a1e:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000a20:	4948      	ldr	r1, [pc, #288]	@ (8000b44 <process_command+0x304>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f00c f802 	bl	800ca2c <strtok>
 8000a28:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000a2a:	4946      	ldr	r1, [pc, #280]	@ (8000b44 <process_command+0x304>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f00b fffd 	bl	800ca2c <strtok>
 8000a32:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d06b      	beq.n	8000b12 <process_command+0x2d2>
 8000a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d068      	beq.n	8000b12 <process_command+0x2d2>
 8000a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d065      	beq.n	8000b12 <process_command+0x2d2>
      uint8_t layer = atoi(layer_str);
 8000a46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000a48:	f00b fe01 	bl	800c64e <atoi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000a52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000a54:	f00b fdfb 	bl	800c64e <atoi>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000a5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a60:	f00b fdf5 	bl	800c64e <atoi>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000a6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d84b      	bhi.n	8000b0a <process_command+0x2ca>
 8000a72:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d847      	bhi.n	8000b0a <process_command+0x2ca>
 8000a7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d843      	bhi.n	8000b0a <process_command+0x2ca>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000a88:	492e      	ldr	r1, [pc, #184]	@ (8000b44 <process_command+0x304>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00b ffce 	bl	800ca2c <strtok>
 8000a90:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000a92:	e015      	b.n	8000ac0 <process_command+0x280>
          values[value_count] = atoi(value_str);
 8000a94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a96:	f00b fdda 	bl	800c64e <atoi>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	3358      	adds	r3, #88	@ 0x58
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000aac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <process_command+0x304>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f00b ffb7 	bl	800ca2c <strtok>
 8000abe:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <process_command+0x2aa>
 8000ac6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d9e2      	bls.n	8000a94 <process_command+0x254>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000ace:	e00c      	b.n	8000aea <process_command+0x2aa>
          values[value_count] = ____;
 8000ad0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3358      	adds	r3, #88	@ 0x58
 8000ad8:	443b      	add	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ae0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000aea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9ee      	bls.n	8000ad0 <process_command+0x290>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000afa:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000afe:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000b02:	f000 fb4b 	bl	800119c <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000b06:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000b08:	e049      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <process_command+0x328>)
 8000b0c:	f7ff fe2c 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000b10:	e045      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000b12:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <process_command+0x334>)
 8000b14:	f7ff fe28 	bl	8000768 <cdc_write_string_chunked>
 8000b18:	e041      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "save") == 0) {
 8000b1a:	4917      	ldr	r1, [pc, #92]	@ (8000b78 <process_command+0x338>)
 8000b1c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b1e:	f7ff fb5f 	bl	80001e0 <strcmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <process_command+0x2ee>
    save_config();
 8000b28:	f000 fbde 	bl	80012e8 <save_config>
 8000b2c:	e037      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "load") == 0) {
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <process_command+0x33c>)
 8000b30:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b32:	f7ff fb55 	bl	80001e0 <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d121      	bne.n	8000b80 <process_command+0x340>
    load_config();
 8000b3c:	f000 fbe8 	bl	8001310 <load_config>
 8000b40:	e02d      	b.n	8000b9e <process_command+0x35e>
 8000b42:	bf00      	nop
 8000b44:	0800dbb8 	.word	0x0800dbb8
 8000b48:	0800dbbc 	.word	0x0800dbbc
 8000b4c:	0800dbc4 	.word	0x0800dbc4
 8000b50:	0800dbcc 	.word	0x0800dbcc
 8000b54:	0800dbd0 	.word	0x0800dbd0
 8000b58:	0800dbf4 	.word	0x0800dbf4
 8000b5c:	0800dbfc 	.word	0x0800dbfc
 8000b60:	0800dc14 	.word	0x0800dc14
 8000b64:	0800dc2c 	.word	0x0800dc2c
 8000b68:	0800dc34 	.word	0x0800dc34
 8000b6c:	0800dc54 	.word	0x0800dc54
 8000b70:	0800dc80 	.word	0x0800dc80
 8000b74:	0800dc8c 	.word	0x0800dc8c
 8000b78:	0800dcd8 	.word	0x0800dcd8
 8000b7c:	0800dce0 	.word	0x0800dce0
  } else if (strcmp(token, "reset") == 0) {
 8000b80:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <process_command+0x364>)
 8000b82:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b84:	f7ff fb2c 	bl	80001e0 <strcmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <process_command+0x354>
    reset_config();
 8000b8e:	f000 fbcb 	bl	8001328 <reset_config>
 8000b92:	e004      	b.n	8000b9e <process_command+0x35e>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <process_command+0x368>)
 8000b96:	f7ff fde7 	bl	8000768 <cdc_write_string_chunked>
 8000b9a:	e000      	b.n	8000b9e <process_command+0x35e>
    return;
 8000b9c:	bf00      	nop
  }
}
 8000b9e:	3758      	adds	r7, #88	@ 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800dce8 	.word	0x0800dce8
 8000ba8:	0800dcf0 	.word	0x0800dcf0

08000bac <print_help>:

static void print_help(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <print_help+0x58>)
 8000bb2:	f7ff fdd9 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <print_help+0x5c>)
 8000bb8:	f7ff fdd6 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <print_help+0x60>)
 8000bbe:	f7ff fdd3 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <print_help+0x64>)
 8000bc4:	f7ff fdd0 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <print_help+0x68>)
 8000bca:	f7ff fdcd 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <print_help+0x6c>)
 8000bd0:	f7ff fdca 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <print_help+0x70>)
 8000bd6:	f7ff fdc7 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <print_help+0x74>)
 8000bdc:	f7ff fdc4 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <print_help+0x78>)
 8000be2:	f7ff fdc1 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <print_help+0x7c>)
 8000be8:	f7ff fdbe 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <print_help+0x80>)
 8000bee:	f7ff fdbb 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_help+0x84>)
 8000bf4:	f7ff fdb8 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000bf8:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <print_help+0x88>)
 8000bfa:	f7ff fdb5 	bl	8000768 <cdc_write_string_chunked>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800dd28 	.word	0x0800dd28
 8000c08:	0800dd40 	.word	0x0800dd40
 8000c0c:	0800dd70 	.word	0x0800dd70
 8000c10:	0800ddac 	.word	0x0800ddac
 8000c14:	0800dde8 	.word	0x0800dde8
 8000c18:	0800de1c 	.word	0x0800de1c
 8000c1c:	0800de60 	.word	0x0800de60
 8000c20:	0800ded8 	.word	0x0800ded8
 8000c24:	0800df14 	.word	0x0800df14
 8000c28:	0800df50 	.word	0x0800df50
 8000c2c:	0800df88 	.word	0x0800df88
 8000c30:	0800df98 	.word	0x0800df98
 8000c34:	0800dfd4 	.word	0x0800dfd4

08000c38 <print_config>:

static void print_config(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0a0      	sub	sp, #128	@ 0x80
 8000c3c:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <print_config+0xa0>)
 8000c40:	f7ff fd92 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <print_config+0xa4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4638      	mov	r0, r7
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <print_config+0xa8>)
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	f00b fe49 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd87 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <print_config+0xa4>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <print_config+0xac>)
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	f00b fe3e 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd7c 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <print_config+0xa4>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	4638      	mov	r0, r7
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <print_config+0xb0>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	f00b fe33 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd71 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <print_config+0xa4>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <print_config+0xb4>)
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	f00b fe28 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd66 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <print_config+0xa4>)
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <print_config+0xb8>)
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	f00b fe1d 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd5b 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <print_config+0xa4>)
 8000cb4:	88db      	ldrh	r3, [r3, #6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <print_config+0xbc>)
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	f00b fe12 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd50 	bl	8000768 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <print_config+0xc0>)
 8000cca:	f7ff fd4d 	bl	8000768 <cdc_write_string_chunked>
}
 8000cce:	bf00      	nop
 8000cd0:	3780      	adds	r7, #128	@ 0x80
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800e018 	.word	0x0800e018
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	0800e034 	.word	0x0800e034
 8000ce4:	0800e050 	.word	0x0800e050
 8000ce8:	0800e068 	.word	0x0800e068
 8000cec:	0800e080 	.word	0x0800e080
 8000cf0:	0800e0a0 	.word	0x0800e0a0
 8000cf4:	0800e0c4 	.word	0x0800e0c4
 8000cf8:	0800e0d8 	.word	0x0800e0d8

08000cfc <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	@ 0x50
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f00b fca1 	bl	800c64e <atoi>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000d10:	4943      	ldr	r1, [pc, #268]	@ (8000e20 <set_config_value+0x124>)
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fa64 	bl	80001e0 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <set_config_value+0x128>)
 8000d24:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000d26:	4b3f      	ldr	r3, [pc, #252]	@ (8000e24 <set_config_value+0x128>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f107 000c 	add.w	r0, r7, #12
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <set_config_value+0x12c>)
 8000d30:	2140      	movs	r1, #64	@ 0x40
 8000d32:	f00b fdd7 	bl	800c8e4 <sniprintf>
 8000d36:	e06a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000d38:	493c      	ldr	r1, [pc, #240]	@ (8000e2c <set_config_value+0x130>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fa50 	bl	80001e0 <strcmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <set_config_value+0x64>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <set_config_value+0x128>)
 8000d4c:	705a      	strb	r2, [r3, #1]
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <set_config_value+0x128>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	4a36      	ldr	r2, [pc, #216]	@ (8000e30 <set_config_value+0x134>)
 8000d58:	2140      	movs	r1, #64	@ 0x40
 8000d5a:	f00b fdc3 	bl	800c8e4 <sniprintf>
 8000d5e:	e056      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <set_config_value+0x138>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fa3c 	bl	80001e0 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <set_config_value+0x8c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <set_config_value+0x128>)
 8000d74:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <set_config_value+0x128>)
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	f107 000c 	add.w	r0, r7, #12
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <set_config_value+0x13c>)
 8000d80:	2140      	movs	r1, #64	@ 0x40
 8000d82:	f00b fdaf 	bl	800c8e4 <sniprintf>
 8000d86:	e042      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000d88:	492c      	ldr	r1, [pc, #176]	@ (8000e3c <set_config_value+0x140>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fa28 	bl	80001e0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <set_config_value+0xb4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <set_config_value+0x128>)
 8000d9c:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <set_config_value+0x128>)
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	f107 000c 	add.w	r0, r7, #12
 8000da6:	4a26      	ldr	r2, [pc, #152]	@ (8000e40 <set_config_value+0x144>)
 8000da8:	2140      	movs	r1, #64	@ 0x40
 8000daa:	f00b fd9b 	bl	800c8e4 <sniprintf>
 8000dae:	e02e      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000db0:	4924      	ldr	r1, [pc, #144]	@ (8000e44 <set_config_value+0x148>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa14 	bl	80001e0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <set_config_value+0xdc>
    keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <set_config_value+0x128>)
 8000dc4:	711a      	strb	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <set_config_value+0x128>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	f107 000c 	add.w	r0, r7, #12
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <set_config_value+0x14c>)
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	f00b fd87 	bl	800c8e4 <sniprintf>
 8000dd6:	e01a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000dd8:	491c      	ldr	r1, [pc, #112]	@ (8000e4c <set_config_value+0x150>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fa00 	bl	80001e0 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <set_config_value+0x104>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <set_config_value+0x128>)
 8000dec:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <set_config_value+0x128>)
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	f107 000c 	add.w	r0, r7, #12
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <set_config_value+0x154>)
 8000df8:	2140      	movs	r1, #64	@ 0x40
 8000dfa:	f00b fd73 	bl	800c8e4 <sniprintf>
 8000dfe:	e006      	b.n	8000e0e <set_config_value+0x112>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000e00:	f107 000c 	add.w	r0, r7, #12
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <set_config_value+0x158>)
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	f00b fd6b 	bl	800c8e4 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fca8 	bl	8000768 <cdc_write_string_chunked>
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	@ 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800e100 	.word	0x0800e100
 8000e24:	20000000 	.word	0x20000000
 8000e28:	0800e114 	.word	0x0800e114
 8000e2c:	0800e134 	.word	0x0800e134
 8000e30:	0800e144 	.word	0x0800e144
 8000e34:	0800e160 	.word	0x0800e160
 8000e38:	0800e170 	.word	0x0800e170
 8000e3c:	0800e18c 	.word	0x0800e18c
 8000e40:	0800e1a4 	.word	0x0800e1a4
 8000e44:	0800e1c8 	.word	0x0800e1c8
 8000e48:	0800e1e4 	.word	0x0800e1e4
 8000e4c:	0800e20c 	.word	0x0800e20c
 8000e50:	0800e218 	.word	0x0800e218
 8000e54:	0800e230 	.word	0x0800e230

08000e58 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4602      	mov	r2, r0
 8000e62:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e66:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e6a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000e6c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e70:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 8000e7a:	4a91      	ldr	r2, [pc, #580]	@ (80010c0 <print_keymap+0x268>)
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	f00b fd31 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e82:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc6e 	bl	8000768 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8000e92:	e109      	b.n	80010a8 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000e9a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	18d0      	adds	r0, r2, r3
 8000ea4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ea8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8000eac:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000eb0:	4a84      	ldr	r2, [pc, #528]	@ (80010c4 <print_keymap+0x26c>)
 8000eb2:	f00b fd17 	bl	800c8e4 <sniprintf>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8000ec8:	e0cc      	b.n	8001064 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000ed6:	e020      	b.n	8000f1a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8000ed8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000edc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000ee6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000eea:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000eee:	4c76      	ldr	r4, [pc, #472]	@ (80010c8 <print_keymap+0x270>)
 8000ef0:	0080      	lsls	r0, r0, #2
 8000ef2:	4401      	add	r1, r0
 8000ef4:	0089      	lsls	r1, r1, #2
 8000ef6:	440a      	add	r2, r1
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3304      	adds	r3, #4
 8000efe:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <print_keymap+0xb8>
          macro_count++;
 8000f06:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f10:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000f1a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9da      	bls.n	8000ed8 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8000f22:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d973      	bls.n	8001012 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 8000f2a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	18d0      	adds	r0, r2, r3
 8000f34:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f3c:	4a63      	ldr	r2, [pc, #396]	@ (80010cc <print_keymap+0x274>)
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f00b fcd0 	bl	800c8e4 <sniprintf>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000f56:	e044      	b.n	8000fe2 <print_keymap+0x18a>
          if (i > 0)
 8000f58:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d012      	beq.n	8000f86 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8000f60:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f72:	4a57      	ldr	r2, [pc, #348]	@ (80010d0 <print_keymap+0x278>)
 8000f74:	4619      	mov	r1, r3
 8000f76:	f00b fcb5 	bl	800c8e4 <sniprintf>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f80:	4413      	add	r3, r2
 8000f82:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000f86:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	18d4      	adds	r4, r2, r3
 8000f90:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f94:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8000f98:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f9c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000fa0:	7818      	ldrb	r0, [r3, #0]
 8000fa2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000fa6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000faa:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fae:	4e46      	ldr	r6, [pc, #280]	@ (80010c8 <print_keymap+0x270>)
 8000fb0:	0080      	lsls	r0, r0, #2
 8000fb2:	4401      	add	r1, r0
 8000fb4:	0089      	lsls	r1, r1, #2
 8000fb6:	440a      	add	r2, r1
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000fc2:	4a44      	ldr	r2, [pc, #272]	@ (80010d4 <print_keymap+0x27c>)
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f00b fc8c 	bl	800c8e4 <sniprintf>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000fd8:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000fe2:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9b6      	bls.n	8000f58 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 8000fea:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fee:	f107 020c 	add.w	r2, r7, #12
 8000ff2:	18d0      	adds	r0, r2, r3
 8000ff4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ff8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000ffc:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <print_keymap+0x280>)
 8000ffe:	4619      	mov	r1, r3
 8001000:	f00b fc70 	bl	800c8e4 <sniprintf>
 8001004:	4602      	mov	r2, r0
 8001006:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800100a:	4413      	add	r3, r2
 800100c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001010:	e023      	b.n	800105a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001012:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	18d0      	adds	r0, r2, r3
 800101c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001020:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001024:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001028:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800102c:	7819      	ldrb	r1, [r3, #0]
 800102e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001032:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001036:	4d24      	ldr	r5, [pc, #144]	@ (80010c8 <print_keymap+0x270>)
 8001038:	0089      	lsls	r1, r1, #2
 800103a:	440a      	add	r2, r1
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4413      	add	r3, r2
 8001040:	3301      	adds	r3, #1
 8001042:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <print_keymap+0x284>)
 8001048:	4621      	mov	r1, r4
 800104a:	f00b fc4b 	bl	800c8e4 <sniprintf>
 800104e:	4602      	mov	r2, r0
 8001050:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001054:	4413      	add	r3, r2
 8001056:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800105a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800105e:	3301      	adds	r3, #1
 8001060:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001064:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001068:	2b03      	cmp	r3, #3
 800106a:	f67f af2e 	bls.w	8000eca <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800106e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	18d0      	adds	r0, r2, r3
 8001078:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800107c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <print_keymap+0x288>)
 8001082:	4619      	mov	r1, r3
 8001084:	f00b fc2e 	bl	800c8e4 <sniprintf>
 8001088:	4602      	mov	r2, r0
 800108a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800108e:	4413      	add	r3, r2
 8001090:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb65 	bl	8000768 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800109e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80010a8:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f67f aef1 	bls.w	8000e94 <print_keymap+0x3c>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800e248 	.word	0x0800e248
 80010c4:	0800e260 	.word	0x0800e260
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800e26c 	.word	0x0800e26c
 80010d0:	0800e270 	.word	0x0800e270
 80010d4:	0800e274 	.word	0x0800e274
 80010d8:	0800e278 	.word	0x0800e278
 80010dc:	0800e27c 	.word	0x0800e27c
 80010e0:	0800dbac 	.word	0x0800dbac

080010e4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b099      	sub	sp, #100	@ 0x64
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4603      	mov	r3, r0
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	460b      	mov	r3, r1
 80010fc:	717b      	strb	r3, [r7, #5]
 80010fe:	4613      	mov	r3, r2
 8001100:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 8001102:	79f9      	ldrb	r1, [r7, #7]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	4822      	ldr	r0, [pc, #136]	@ (8001194 <set_keymap_value+0xb0>)
 800110a:	0089      	lsls	r1, r1, #2
 800110c:	440a      	add	r2, r1
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4413      	add	r3, r2
 8001112:	3301      	adds	r3, #1
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800111a:	2301      	movs	r3, #1
 800111c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001120:	e014      	b.n	800114c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001122:	79f8      	ldrb	r0, [r7, #7]
 8001124:	79b9      	ldrb	r1, [r7, #6]
 8001126:	797a      	ldrb	r2, [r7, #5]
 8001128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800112c:	4c19      	ldr	r4, [pc, #100]	@ (8001194 <set_keymap_value+0xb0>)
 800112e:	0080      	lsls	r0, r0, #2
 8001130:	4401      	add	r1, r0
 8001132:	0089      	lsls	r1, r1, #2
 8001134:	440a      	add	r2, r1
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	2200      	movs	r2, #0
 800113e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001142:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001146:	3301      	adds	r3, #1
 8001148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800114c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001150:	2b03      	cmp	r3, #3
 8001152:	d9e6      	bls.n	8001122 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001154:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001158:	2100      	movs	r1, #0
 800115a:	480e      	ldr	r0, [pc, #56]	@ (8001194 <set_keymap_value+0xb0>)
 800115c:	f001 fdd8 	bl	8002d10 <keyboard_write_config>
  keyboard_init_keys();
 8001160:	f000 ff82 	bl	8002068 <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001164:	79fc      	ldrb	r4, [r7, #7]
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	797a      	ldrb	r2, [r7, #5]
 800116a:	8879      	ldrh	r1, [r7, #2]
 800116c:	f107 000c 	add.w	r0, r7, #12
 8001170:	9102      	str	r1, [sp, #8]
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4623      	mov	r3, r4
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <set_keymap_value+0xb4>)
 800117a:	2140      	movs	r1, #64	@ 0x40
 800117c:	f00b fbb2 	bl	800c8e4 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff faef 	bl	8000768 <cdc_write_string_chunked>
}
 800118a:	bf00      	nop
 800118c:	3754      	adds	r7, #84	@ 0x54
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	0800e284 	.word	0x0800e284

0800119c <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0a8      	sub	sp, #160	@ 0xa0
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011b6:	e01a      	b.n	80011ee <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80011b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	18d4      	adds	r4, r2, r3
 80011c2:	79f8      	ldrb	r0, [r7, #7]
 80011c4:	79b9      	ldrb	r1, [r7, #6]
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011cc:	8825      	ldrh	r5, [r4, #0]
 80011ce:	4c41      	ldr	r4, [pc, #260]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011d0:	0080      	lsls	r0, r0, #2
 80011d2:	4401      	add	r1, r0
 80011d4:	0089      	lsls	r1, r1, #2
 80011d6:	440a      	add	r2, r1
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	462a      	mov	r2, r5
 80011e0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9e0      	bls.n	80011b8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80011f6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80011fa:	2100      	movs	r1, #0
 80011fc:	4835      	ldr	r0, [pc, #212]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011fe:	f001 fd87 	bl	8002d10 <keyboard_write_config>
  keyboard_init_keys();
 8001202:	f000 ff31 	bl	8002068 <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 8001206:	79f9      	ldrb	r1, [r7, #7]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	797a      	ldrb	r2, [r7, #5]
 800120c:	f107 000c 	add.w	r0, r7, #12
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <set_macro_keymap_value+0x13c>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	f00b fb63 	bl	800c8e4 <sniprintf>
 800121e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001228:	e033      	b.n	8001292 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800122a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001232:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001240:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <set_macro_keymap_value+0x140>)
 8001246:	4619      	mov	r1, r3
 8001248:	f00b fb4c 	bl	800c8e4 <sniprintf>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001252:	4413      	add	r3, r2
 8001254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	18d0      	adds	r0, r2, r3
 8001262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001266:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800126a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4a1a      	ldr	r2, [pc, #104]	@ (80012e0 <set_macro_keymap_value+0x144>)
 8001278:	f00b fb34 	bl	800c8e4 <sniprintf>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001282:	4413      	add	r3, r2
 8001284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001288:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800128c:	3301      	adds	r3, #1
 800128e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001292:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001296:	2b03      	cmp	r3, #3
 8001298:	d9c7      	bls.n	800122a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800129a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	18d0      	adds	r0, r2, r3
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012a8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <set_macro_keymap_value+0x148>)
 80012ae:	4619      	mov	r1, r3
 80012b0:	f00b fb18 	bl	800c8e4 <sniprintf>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa4f 	bl	8000768 <cdc_write_string_chunked>
}
 80012ca:	bf00      	nop
 80012cc:	3798      	adds	r7, #152	@ 0x98
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000
 80012d8:	0800e2a4 	.word	0x0800e2a4
 80012dc:	0800e2c8 	.word	0x0800e2c8
 80012e0:	0800e274 	.word	0x0800e274
 80012e4:	0800e2cc 	.word	0x0800e2cc

080012e8 <save_config>:

static void save_config(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80012ec:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80012f0:	2100      	movs	r1, #0
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <save_config+0x20>)
 80012f4:	f001 fd0c 	bl	8002d10 <keyboard_write_config>
  keyboard_init_keys();
 80012f8:	f000 feb6 	bl	8002068 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <save_config+0x24>)
 80012fe:	f7ff fa33 	bl	8000768 <cdc_write_string_chunked>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	0800e2d0 	.word	0x0800e2d0

08001310 <load_config>:

static void load_config(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001314:	f001 fcea 	bl	8002cec <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <load_config+0x14>)
 800131a:	f7ff fa25 	bl	8000768 <cdc_write_string_chunked>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800e2f0 	.word	0x0800e2f0

08001328 <reset_config>:

static void reset_config(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800132c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001330:	2100      	movs	r1, #0
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <reset_config+0x24>)
 8001334:	f001 fcec 	bl	8002d10 <keyboard_write_config>
  keyboard_read_config();
 8001338:	f001 fcd8 	bl	8002cec <keyboard_read_config>
  keyboard_init_keys();
 800133c:	f000 fe94 	bl	8002068 <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <reset_config+0x28>)
 8001342:	f7ff fa11 	bl	8000768 <cdc_write_string_chunked>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800e434 	.word	0x0800e434
 8001350:	0800e314 	.word	0x0800e314

08001354 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	460b      	mov	r3, r1
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	4613      	mov	r3, r2
 8001364:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d015      	beq.n	8001398 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e002      	b.n	8001378 <tud_cdc_line_state_cb+0x24>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800137e:	4293      	cmp	r3, r2
 8001380:	ddf7      	ble.n	8001372 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <tud_cdc_line_state_cb+0x4c>)
 8001384:	f7ff f9f0 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001388:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <tud_cdc_line_state_cb+0x50>)
 800138a:	f7ff f9ed 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <tud_cdc_line_state_cb+0x54>)
 8001390:	f7ff f9ea 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001394:	f7ff fa33 	bl	80007fe <cdc_write_flush_wait>
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800e338 	.word	0x0800e338
 80013a4:	0800e364 	.word	0x0800e364
 80013a8:	0800dbb0 	.word	0x0800dbb0

080013ac <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <hid_task+0x8c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <hid_task+0x16>
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <hid_task+0x90>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d035      	beq.n	8001446 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f005 fea0 	bl	8007120 <tud_hid_n_ready>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d02f      	beq.n	8001446 <hid_task+0x82>
    if (tud_suspended()) {
 80013e6:	f007 f9b7 	bl	8008758 <tud_suspended>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <hid_task+0x32>
      tud_remote_wakeup();
 80013f0:	f007 f9c6 	bl	8008780 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80013f4:	e027      	b.n	8001446 <hid_task+0x82>
      if (should_send_consumer_report) {
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <hid_task+0x8c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00f      	beq.n	800141e <hid_task+0x5a>
        should_send_consumer_report = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <hid_task+0x8c>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <hid_task+0x94>)
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	2302      	movs	r3, #2
 800140e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	7bf9      	ldrb	r1, [r7, #15]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	2000      	movs	r0, #0
 8001418:	f005 fec4 	bl	80071a4 <tud_hid_n_report>
 800141c:	e013      	b.n	8001446 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <hid_task+0x90>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00f      	beq.n	8001446 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <hid_task+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <hid_task+0x98>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	717a      	strb	r2, [r7, #5]
 8001434:	713b      	strb	r3, [r7, #4]
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <hid_task+0x9c>)
 8001438:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800143a:	793a      	ldrb	r2, [r7, #4]
 800143c:	7979      	ldrb	r1, [r7, #5]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2000      	movs	r0, #0
 8001442:	f005 ff35 	bl	80072b0 <tud_hid_n_keyboard_report>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001fd 	.word	0x200001fd
 8001454:	200001fe 	.word	0x200001fe
 8001458:	20000206 	.word	0x20000206
 800145c:	200001ff 	.word	0x200001ff
 8001460:	20000200 	.word	0x20000200

08001464 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	3305      	adds	r3, #5
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	2b03      	cmp	r3, #3
 8001484:	f200 80f7 	bhi.w	8001676 <hid_press_key+0x212>
 8001488:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <hid_press_key+0x2c>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c7 	.word	0x080014c7
 8001494:	080014a1 	.word	0x080014a1
 8001498:	08001507 	.word	0x08001507
 800149c:	08001525 	.word	0x08001525
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b74      	ldr	r3, [pc, #464]	@ (8001684 <hid_press_key+0x220>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b72      	ldr	r3, [pc, #456]	@ (8001684 <hid_press_key+0x220>)
 80014bc:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80014be:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <hid_press_key+0x224>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    break;
 80014c4:	e0da      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e018      	b.n	80014fe <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	4a6f      	ldr	r2, [pc, #444]	@ (800168c <hid_press_key+0x228>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d110      	bne.n	80014f8 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	88db      	ldrh	r3, [r3, #6]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	b2d1      	uxtb	r1, r2
 80014ea:	4a68      	ldr	r2, [pc, #416]	@ (800168c <hid_press_key+0x228>)
 80014ec:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <hid_press_key+0x224>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
        break;
 80014f4:	bf00      	nop
      }
    }
    break;
 80014f6:	e0c1      	b.n	800167c <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d9e3      	bls.n	80014cc <hid_press_key+0x68>
    break;
 8001504:	e0ba      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	440b      	add	r3, r1
 8001512:	88db      	ldrh	r3, [r3, #6]
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <hid_press_key+0x22c>)
 800151a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800151c:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <hid_press_key+0x230>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
    break;
 8001522:	e0ab      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	757b      	strb	r3, [r7, #21]
 800152c:	e025      	b.n	800157a <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	7d7b      	ldrb	r3, [r7, #21]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	0058      	lsls	r0, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	4403      	add	r3, r0
 800153e:	440b      	add	r3, r1
 8001540:	88db      	ldrh	r3, [r3, #6]
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	0058      	lsls	r0, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	4403      	add	r3, r0
 8001558:	440b      	add	r3, r1
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f9a0 	bl	80018a4 <get_bitmask_for_modifier>
 8001564:	4603      	mov	r3, r0
 8001566:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 800156e:	7dbb      	ldrb	r3, [r7, #22]
 8001570:	3301      	adds	r3, #1
 8001572:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001574:	7d7b      	ldrb	r3, [r7, #21]
 8001576:	3301      	adds	r3, #1
 8001578:	757b      	strb	r3, [r7, #21]
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d9d6      	bls.n	800152e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	74fb      	strb	r3, [r7, #19]
 8001588:	e00a      	b.n	80015a0 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800158a:	7cfb      	ldrb	r3, [r7, #19]
 800158c:	4a3f      	ldr	r2, [pc, #252]	@ (800168c <hid_press_key+0x228>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <hid_press_key+0x136>
        start_slot = i;
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	753b      	strb	r3, [r7, #20]
        break;
 8001598:	e005      	b.n	80015a6 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d9f1      	bls.n	800158a <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015aa:	7d3b      	ldrb	r3, [r7, #20]
 80015ac:	747b      	strb	r3, [r7, #17]
 80015ae:	e00a      	b.n	80015c6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	4a36      	ldr	r2, [pc, #216]	@ (800168c <hid_press_key+0x228>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <hid_press_key+0x16a>
        available_slots++;
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	3301      	adds	r3, #1
 80015be:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	3301      	adds	r3, #1
 80015c4:	747b      	strb	r3, [r7, #17]
 80015c6:	7c7b      	ldrb	r3, [r7, #17]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d9f1      	bls.n	80015b0 <hid_press_key+0x14c>
 80015cc:	e000      	b.n	80015d0 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80015ce:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80015d0:	7cba      	ldrb	r2, [r7, #18]
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d350      	bcc.n	800167a <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e042      	b.n	8001668 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	7c3b      	ldrb	r3, [r7, #16]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	0058      	lsls	r0, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	4403      	add	r3, r0
 80015f2:	440b      	add	r3, r1
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d032      	beq.n	8001662 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	7c3b      	ldrb	r3, [r7, #16]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	0058      	lsls	r0, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	4403      	add	r3, r0
 800160c:	440b      	add	r3, r1
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f946 	bl	80018a4 <get_bitmask_for_modifier>
 8001618:	4603      	mov	r3, r0
 800161a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <hid_press_key+0x220>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	4313      	orrs	r3, r2
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <hid_press_key+0x220>)
 800162e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <hid_press_key+0x224>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e014      	b.n	8001662 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	7c3b      	ldrb	r3, [r7, #16]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	0058      	lsls	r0, r3, #1
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	4403      	add	r3, r0
 8001648:	440b      	add	r3, r1
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	b29a      	uxth	r2, r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	b2d1      	uxtb	r1, r2
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <hid_press_key+0x228>)
 8001654:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <hid_press_key+0x224>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001662:	7c3b      	ldrb	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	743b      	strb	r3, [r7, #16]
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d805      	bhi.n	800167a <hid_press_key+0x216>
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9b6      	bls.n	80015e2 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001674:	e001      	b.n	800167a <hid_press_key+0x216>

  default:
    break;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <hid_press_key+0x218>
    break;
 800167a:	bf00      	nop
  }
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200001ff 	.word	0x200001ff
 8001688:	200001fe 	.word	0x200001fe
 800168c:	20000200 	.word	0x20000200
 8001690:	20000206 	.word	0x20000206
 8001694:	200001fd 	.word	0x200001fd

08001698 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3305      	adds	r3, #5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	f200 80a7 	bhi.w	800180a <hid_release_key+0x172>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <hid_release_key+0x2c>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	08001703 	.word	0x08001703
 80016c8:	080016d5 	.word	0x080016d5
 80016cc:	08001745 	.word	0x08001745
 80016d0:	08001753 	.word	0x08001753
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	440b      	add	r3, r1
 80016e0:	88db      	ldrh	r3, [r3, #6]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <hid_release_key+0x17c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <hid_release_key+0x17c>)
 80016f8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <hid_release_key+0x180>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
    break;
 8001700:	e084      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e019      	b.n	800173c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a44      	ldr	r2, [pc, #272]	@ (800181c <hid_release_key+0x184>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	4618      	mov	r0, r3
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4298      	cmp	r0, r3
 8001722:	d108      	bne.n	8001736 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4a3d      	ldr	r2, [pc, #244]	@ (800181c <hid_release_key+0x184>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <hid_release_key+0x180>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
        break;
 8001732:	bf00      	nop
      }
    }
    break;
 8001734:	e06a      	b.n	800180c <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9e2      	bls.n	8001708 <hid_release_key+0x70>
    break;
 8001742:	e063      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <hid_release_key+0x188>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <hid_release_key+0x18c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
    break;
 8001750:	e05c      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
 8001756:	e054      	b.n	8001802 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	0058      	lsls	r0, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	4403      	add	r3, r0
 8001768:	440b      	add	r3, r1
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	0058      	lsls	r0, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	4403      	add	r3, r0
 8001782:	440b      	add	r3, r1
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f88b 	bl	80018a4 <get_bitmask_for_modifier>
 800178e:	4603      	mov	r3, r0
 8001790:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00f      	beq.n	80017b8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001798:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <hid_release_key+0x17c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <hid_release_key+0x17c>)
 80017ae:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <hid_release_key+0x180>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e021      	b.n	80017fc <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e01b      	b.n	80017f6 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <hid_release_key+0x184>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	461c      	mov	r4, r3
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	0058      	lsls	r0, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	4403      	add	r3, r0
 80017d6:	440b      	add	r3, r1
 80017d8:	88db      	ldrh	r3, [r3, #6]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	429c      	cmp	r4, r3
 80017de:	d107      	bne.n	80017f0 <hid_release_key+0x158>
              keycodes[i] = 0;
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <hid_release_key+0x184>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <hid_release_key+0x180>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
              break;
 80017ee:	e005      	b.n	80017fc <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	3301      	adds	r3, #1
 80017f4:	737b      	strb	r3, [r7, #13]
 80017f6:	7b7b      	ldrb	r3, [r7, #13]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d9e0      	bls.n	80017be <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	3301      	adds	r3, #1
 8001800:	73bb      	strb	r3, [r7, #14]
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d9a7      	bls.n	8001758 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 8001808:	e000      	b.n	800180c <hid_release_key+0x174>

  default:
    break;
 800180a:	bf00      	nop
  }
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	200001ff 	.word	0x200001ff
 8001818:	200001fe 	.word	0x200001fe
 800181c:	20000200 	.word	0x20000200
 8001820:	20000206 	.word	0x20000206
 8001824:	200001fd 	.word	0x200001fd

08001828 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3be0      	subs	r3, #224	@ 0xe0
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	d822      	bhi.n	80018fc <get_bitmask_for_modifier+0x58>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <get_bitmask_for_modifier+0x18>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018e9 	.word	0x080018e9
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	080018f9 	.word	0x080018f9
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00e      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00c      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 80018e4:	2304      	movs	r3, #4
 80018e6:	e00a      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 80018e8:	2308      	movs	r3, #8
 80018ea:	e008      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 80018ec:	2310      	movs	r3, #16
 80018ee:	e006      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e004      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 80018f4:	2340      	movs	r3, #64	@ 0x40
 80018f6:	e002      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	e000      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 80018fc:	2300      	movs	r3, #0
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d904      	bls.n	8001926 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001922:	b29b      	uxth	r3, r3
 8001924:	e000      	b.n	8001928 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001926:	2300      	movs	r3, #0
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001952:	79f9      	ldrb	r1, [r7, #7]
 8001954:	79ba      	ldrb	r2, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	011a      	lsls	r2, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001964:	fb01 f202 	mul.w	r2, r1, r2
 8001968:	4413      	add	r3, r2
 800196a:	4a8a      	ldr	r2, [pc, #552]	@ (8001b94 <init_key+0x260>)
 800196c:	4413      	add	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2200      	movs	r2, #0
 800197a:	711a      	strb	r2, [r3, #4]
  key->row = row;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	793a      	ldrb	r2, [r7, #4]
 8001986:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2200      	movs	r2, #0
 800198c:	75da      	strb	r2, [r3, #23]
 800198e:	2200      	movs	r2, #0
 8001990:	761a      	strb	r2, [r3, #24]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2200      	movs	r2, #0
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	765a      	strb	r2, [r3, #25]
 800199c:	2200      	movs	r2, #0
 800199e:	f042 0207 	orr.w	r2, r2, #7
 80019a2:	769a      	strb	r2, [r3, #26]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f062 020b 	orn	r2, r2, #11
 80019ac:	76da      	strb	r2, [r3, #27]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	771a      	strb	r2, [r3, #28]

  key->actuation.status = STATUS_RESET;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 80019be:	4b76      	ldr	r3, [pc, #472]	@ (8001b98 <init_key+0x264>)
 80019c0:	785a      	ldrb	r2, [r3, #1]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 80019c8:	4b73      	ldr	r3, [pc, #460]	@ (8001b98 <init_key+0x264>)
 80019ca:	785a      	ldrb	r2, [r3, #1]
 80019cc:	4b72      	ldr	r3, [pc, #456]	@ (8001b98 <init_key+0x264>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 80019da:	4b6f      	ldr	r3, [pc, #444]	@ (8001b98 <init_key+0x264>)
 80019dc:	78da      	ldrb	r2, [r3, #3]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	75fb      	strb	r3, [r7, #23]
 80019f0:	e0c6      	b.n	8001b80 <init_key+0x24c>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 80019f2:	7df9      	ldrb	r1, [r7, #23]
 80019f4:	797a      	ldrb	r2, [r7, #5]
 80019f6:	793b      	ldrb	r3, [r7, #4]
 80019f8:	4867      	ldr	r0, [pc, #412]	@ (8001b98 <init_key+0x264>)
 80019fa:	0089      	lsls	r1, r1, #2
 80019fc:	440a      	add	r2, r1
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3301      	adds	r3, #1
 8001a04:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80b6 	beq.w	8001b7a <init_key+0x246>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	757b      	strb	r3, [r7, #21]
 8001a16:	e015      	b.n	8001a44 <init_key+0x110>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001a18:	7df8      	ldrb	r0, [r7, #23]
 8001a1a:	7979      	ldrb	r1, [r7, #5]
 8001a1c:	793a      	ldrb	r2, [r7, #4]
 8001a1e:	7d7b      	ldrb	r3, [r7, #21]
 8001a20:	4c5d      	ldr	r4, [pc, #372]	@ (8001b98 <init_key+0x264>)
 8001a22:	0080      	lsls	r0, r0, #2
 8001a24:	4401      	add	r1, r0
 8001a26:	0089      	lsls	r1, r1, #2
 8001a28:	440a      	add	r2, r1
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3304      	adds	r3, #4
 8001a30:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <init_key+0x10a>
          macro_count++;
 8001a38:	7dbb      	ldrb	r3, [r7, #22]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a3e:	7d7b      	ldrb	r3, [r7, #21]
 8001a40:	3301      	adds	r3, #1
 8001a42:	757b      	strb	r3, [r7, #21]
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d9e6      	bls.n	8001a18 <init_key+0xe4>
        }
      }

      if (macro_count > 1) {
 8001a4a:	7dbb      	ldrb	r3, [r7, #22]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d92b      	bls.n	8001aa8 <init_key+0x174>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001a50:	7dfa      	ldrb	r2, [r7, #23]
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3305      	adds	r3, #5
 8001a5e:	2204      	movs	r2, #4
 8001a60:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	753b      	strb	r3, [r7, #20]
 8001a66:	e01b      	b.n	8001aa0 <init_key+0x16c>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001a68:	7dfd      	ldrb	r5, [r7, #23]
 8001a6a:	797c      	ldrb	r4, [r7, #5]
 8001a6c:	7938      	ldrb	r0, [r7, #4]
 8001a6e:	7d39      	ldrb	r1, [r7, #20]
 8001a70:	7dfa      	ldrb	r2, [r7, #23]
 8001a72:	7d3b      	ldrb	r3, [r7, #20]
 8001a74:	4e48      	ldr	r6, [pc, #288]	@ (8001b98 <init_key+0x264>)
 8001a76:	00ad      	lsls	r5, r5, #2
 8001a78:	442c      	add	r4, r5
 8001a7a:	00a4      	lsls	r4, r4, #2
 8001a7c:	4420      	add	r0, r4
 8001a7e:	0080      	lsls	r0, r0, #2
 8001a80:	4401      	add	r1, r0
 8001a82:	3104      	adds	r1, #4
 8001a84:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	0058      	lsls	r0, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	4403      	add	r3, r0
 8001a94:	440b      	add	r3, r1
 8001a96:	4622      	mov	r2, r4
 8001a98:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a9a:	7d3b      	ldrb	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	753b      	strb	r3, [r7, #20]
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d9e0      	bls.n	8001a68 <init_key+0x134>
 8001aa6:	e068      	b.n	8001b7a <init_key+0x246>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001aa8:	7df9      	ldrb	r1, [r7, #23]
 8001aaa:	797a      	ldrb	r2, [r7, #5]
 8001aac:	793b      	ldrb	r3, [r7, #4]
 8001aae:	483a      	ldr	r0, [pc, #232]	@ (8001b98 <init_key+0x264>)
 8001ab0:	0089      	lsls	r1, r1, #2
 8001ab2:	440a      	add	r2, r1
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff24 	bl	800190c <get_usage_consumer_control>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d011      	beq.n	8001af2 <init_key+0x1be>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	3305      	adds	r3, #5
 8001adc:	2203      	movs	r2, #3
 8001ade:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001ae0:	7dfa      	ldrb	r2, [r7, #23]
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	89fa      	ldrh	r2, [r7, #14]
 8001aee:	80da      	strh	r2, [r3, #6]
 8001af0:	e043      	b.n	8001b7a <init_key+0x246>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001af2:	7df9      	ldrb	r1, [r7, #23]
 8001af4:	797a      	ldrb	r2, [r7, #5]
 8001af6:	793b      	ldrb	r3, [r7, #4]
 8001af8:	4827      	ldr	r0, [pc, #156]	@ (8001b98 <init_key+0x264>)
 8001afa:	0089      	lsls	r1, r1, #2
 8001afc:	440a      	add	r2, r1
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3301      	adds	r3, #1
 8001b04:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff feca 	bl	80018a4 <get_bitmask_for_modifier>
 8001b10:	4603      	mov	r3, r0
 8001b12:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <init_key+0x20e>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001b1a:	7dfa      	ldrb	r2, [r7, #23]
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	3305      	adds	r3, #5
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001b2c:	7dfa      	ldrb	r2, [r7, #23]
 8001b2e:	7b7b      	ldrb	r3, [r7, #13]
 8001b30:	b298      	uxth	r0, r3
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	80da      	strh	r2, [r3, #6]
 8001b40:	e01b      	b.n	8001b7a <init_key+0x246>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001b42:	7dfa      	ldrb	r2, [r7, #23]
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3305      	adds	r3, #5
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001b54:	7df8      	ldrb	r0, [r7, #23]
 8001b56:	7979      	ldrb	r1, [r7, #5]
 8001b58:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001b5a:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001b5c:	4c0e      	ldr	r4, [pc, #56]	@ (8001b98 <init_key+0x264>)
 8001b5e:	0080      	lsls	r0, r0, #2
 8001b60:	4401      	add	r1, r0
 8001b62:	0089      	lsls	r1, r1, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3301      	adds	r3, #1
 8001b68:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	4602      	mov	r2, r0
 8001b78:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f67f af35 	bls.w	80019f2 <init_key+0xbe>
          }
        }
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000208 	.word	0x20000208
 8001b98:	20000000 	.word	0x20000000

08001b9c <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001ba4:	4bab      	ldr	r3, [pc, #684]	@ (8001e54 <update_key_state+0x2b8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <update_key_state+0x20>
 8001bac:	f001 f936 	bl	8002e1c <keyboard_read_adc>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001bb6:	330f      	adds	r3, #15
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	e002      	b.n	8001bc2 <update_key_state+0x26>
 8001bbc:	f001 f92e 	bl	8002e1c <keyboard_read_adc>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b13      	cmp	r3, #19
 8001bce:	d82f      	bhi.n	8001c30 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8001e58 <update_key_state+0x2bc>)
 8001bd2:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001bd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0e:	ee17 3a90 	vmov	r3, s15
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8a3 2019 	strh.w	r2, [r3, #25]
    key->calibration.cycles_count++;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8a3 2017 	strh.w	r2, [r3, #23]

    return 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e10d      	b.n	8001e4c <update_key_state+0x2b0>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d929      	bls.n	8001c92 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001c3e:	4b87      	ldr	r3, [pc, #540]	@ (8001e5c <update_key_state+0x2c0>)
 8001c40:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8a3 2019 	strh.w	r2, [r3, #25]
    state.value = key->calibration.idle_value;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8b3 301f 	ldrh.w	r3, [r3, #31]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d117      	bne.n	8001cce <update_key_state+0x132>
 8001c9e:	893b      	ldrh	r3, [r7, #8]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b0a      	subs	r3, #10
 8001cac:	429a      	cmp	r2, r3
 8001cae:	db0e      	blt.n	8001cce <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	78db      	ldrb	r3, [r3, #3]
 8001cb4:	2b0e      	cmp	r3, #14
 8001cb6:	d904      	bls.n	8001cc2 <update_key_state+0x126>
      key->is_idle = 1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	711a      	strb	r2, [r3, #4]
      return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e0c4      	b.n	8001e4c <update_key_state+0x2b0>
    }
    key->idle_counter++;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b0a      	subs	r3, #10
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	db06      	blt.n	8001cee <update_key_state+0x152>
    state.distance = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001cec:	e00f      	b.n	8001d0e <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b0a      	subs	r3, #10
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001d0e:	897a      	ldrh	r2, [r7, #10]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d903      	bls.n	8001d24 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001d1c:	897a      	ldrh	r2, [r7, #10]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8a3 201b 	strh.w	r2, [r3, #27]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001d24:	897b      	ldrh	r3, [r7, #10]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b3c      	subs	r3, #60	@ 0x3c
 8001d32:	429a      	cmp	r2, r3
 8001d34:	db04      	blt.n	8001d40 <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4613      	mov	r3, r2
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	f8b2 201b 	ldrh.w	r2, [r2, #27]
 8001d50:	b292      	uxth	r2, r2
 8001d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001d5a:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <update_key_state+0x2c0>)
 8001d5c:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d6a:	7b3b      	ldrb	r3, [r7, #12]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 3022 	ldr.w	r3, [r3, #34]	@ 0x22
 8001d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d82:	ee06 3a90 	vmov	s13, r3
 8001d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8e:	ee17 3a90 	vmov	r3, s15
 8001d92:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001d96:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da2:	edc7 7a00 	vstr	s15, [r7]
 8001da6:	783b      	ldrb	r3, [r7, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001dac:	7cba      	ldrb	r2, [r7, #18]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dd18      	ble.n	8001df8 <update_key_state+0x25c>
 8001dc6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dd14      	ble.n	8001df8 <update_key_state+0x25c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d00f      	beq.n	8001df8 <update_key_state+0x25c>
    key->actuation.direction = GOING_DOWN;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 0) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d023      	beq.n	8001e32 <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    if (key->actuation.direction_changed_point != 0) {
 8001df6:	e01c      	b.n	8001e32 <update_key_state+0x296>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da17      	bge.n	8001e32 <update_key_state+0x296>
 8001e02:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da13      	bge.n	8001e32 <update_key_state+0x296>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <update_key_state+0x296>
    key->actuation.direction = GOING_UP;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 255) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001e22:	2bff      	cmp	r3, #255	@ 0xff
 8001e24:	d005      	beq.n	8001e32 <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  key->state = state;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f103 021d 	add.w	r2, r3, #29
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	cb03      	ldmia	r3!, {r0, r1}
 8001e3e:	6010      	str	r0, [r2, #0]
 8001e40:	6051      	str	r1, [r2, #4]
 8001e42:	8819      	ldrh	r1, [r3, #0]
 8001e44:	789b      	ldrb	r3, [r3, #2]
 8001e46:	8111      	strh	r1, [r2, #8]
 8001e48:	7293      	strb	r3, [r2, #10]
  return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	3f19999a 	.word	0x3f19999a
 8001e5c:	3f4ccccd 	.word	0x3f4ccccd

08001e60 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001e68:	f000 ffee 	bl	8002e48 <keyboard_get_time>
 8001e6c:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	bf8c      	ite	hi
 8001e7e:	2301      	movhi	r3, #1
 8001e80:	2300      	movls	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001e92:	429a      	cmp	r2, r3
 8001e94:	bf34      	ite	cc
 8001e96:	2301      	movcc	r3, #1
 8001e98:	2300      	movcs	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	4a5c      	ldr	r2, [pc, #368]	@ (800203c <update_key_actuation+0x1dc>)
 8001eca:	7892      	ldrb	r2, [r2, #2]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4299      	cmp	r1, r3
 8001ed0:	bfcc      	ite	gt
 8001ed2:	2301      	movgt	r3, #1
 8001ed4:	2300      	movle	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ee8:	4619      	mov	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ef0:	1acb      	subs	r3, r1, r3
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	bfb4      	ite	lt
 8001ef6:	2301      	movlt	r3, #1
 8001ef8:	2300      	movge	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001f04:	3b01      	subs	r3, #1
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	f200 808c 	bhi.w	8002024 <update_key_actuation+0x1c4>
 8001f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <update_key_actuation+0xb4>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001fd3 	.word	0x08001fd3
 8001f18:	08001fe5 	.word	0x08001fe5
 8001f1c:	08001f25 	.word	0x08001f25
 8001f20:	08001f61 	.word	0x08001f61

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d07e      	beq.n	8002028 <update_key_actuation+0x1c8>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <update_key_actuation+0xe0>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8001f3e:	e00a      	b.n	8001f56 <update_key_actuation+0xf6>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 8001f48:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <update_key_actuation+0x1e0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fa87 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	f8c3 202f 	str.w	r2, [r3, #47]	@ 0x2f
    }
    break;
 8001f5e:	e063      	b.n	8002028 <update_key_actuation+0x1c8>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001f60:	7c7b      	ldrb	r3, [r7, #17]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <update_key_actuation+0x110>
      key->actuation.status = STATUS_RESET;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      break;
 8001f6e:	e060      	b.n	8002032 <update_key_actuation+0x1d2>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d025      	beq.n	8001fc2 <update_key_actuation+0x162>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d120      	bne.n	8001fc2 <update_key_actuation+0x162>
 8001f80:	7c3b      	ldrb	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01d      	beq.n	8001fc2 <update_key_actuation+0x162>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <update_key_actuation+0x142>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 8001f9a:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <update_key_actuation+0x1e0>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e00a      	b.n	8001fb8 <update_key_actuation+0x158>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 8001faa:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <update_key_actuation+0x1e0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fa56 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	f8c3 202f 	str.w	r2, [r3, #47]	@ 0x2f
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001fc0:	e034      	b.n	800202c <update_key_actuation+0x1cc>
    } else if (is_before_reset_offset) {
 8001fc2:	7cbb      	ldrb	r3, [r7, #18]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <update_key_actuation+0x1cc>
      key->actuation.status = STATUS_RESET;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    break;
 8001fd0:	e02c      	b.n	800202c <update_key_actuation+0x1cc>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    hid_release_key(key, _TAP_LAYER);
 8001fda:	2101      	movs	r1, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fb5b 	bl	8001698 <hid_release_key>
    break;
 8001fe2:	e026      	b.n	8002032 <update_key_actuation+0x1d2>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001fe4:	7cbb      	ldrb	r3, [r7, #18]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <update_key_actuation+0x19c>
      key->actuation.status = STATUS_RESET;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, _BASE_LAYER);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fb4f 	bl	8001698 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8001ffa:	e019      	b.n	8002030 <update_key_actuation+0x1d0>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <update_key_actuation+0x1d0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d111      	bne.n	8002030 <update_key_actuation+0x1d0>
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <update_key_actuation+0x1d0>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, _BASE_LAYER);
 800201a:	2100      	movs	r1, #0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fb3b 	bl	8001698 <hid_release_key>
    break;
 8002022:	e005      	b.n	8002030 <update_key_actuation+0x1d0>

  default:
    break;
 8002024:	bf00      	nop
 8002026:	e004      	b.n	8002032 <update_key_actuation+0x1d2>
    break;
 8002028:	bf00      	nop
 800202a:	e002      	b.n	8002032 <update_key_actuation+0x1d2>
    break;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <update_key_actuation+0x1d2>
    break;
 8002030:	bf00      	nop
  }
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	2000053c 	.word	0x2000053c

08002044 <update_key>:

void update_key(struct key *key) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fda5 	bl	8001b9c <update_key_state>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff01 	bl	8001e60 <update_key_actuation>
 800205e:	e000      	b.n	8002062 <update_key+0x1e>
    return;
 8002060:	bf00      	nop
}
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <keyboard_init_keys>:

void keyboard_init_keys() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e027      	b.n	80020c4 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002074:	2300      	movs	r3, #0
 8002076:	71bb      	strb	r3, [r7, #6]
 8002078:	e01e      	b.n	80020b8 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	4915      	ldr	r1, [pc, #84]	@ (80020d4 <keyboard_init_keys+0x6c>)
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4413      	add	r3, r2
 8002084:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002088:	2bff      	cmp	r3, #255	@ 0xff
 800208a:	d012      	beq.n	80020b2 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	4910      	ldr	r1, [pc, #64]	@ (80020d4 <keyboard_init_keys+0x6c>)
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4413      	add	r3, r2
 8002096:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <keyboard_init_keys+0x6c>)
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	7859      	ldrb	r1, [r3, #1]
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	f7ff fc41 	bl	8001934 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	3301      	adds	r3, #1
 80020b6:	71bb      	strb	r3, [r7, #6]
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d9dd      	bls.n	800207a <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	3301      	adds	r3, #1
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d9d4      	bls.n	8002074 <keyboard_init_keys+0xc>
      }
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	0800e53c 	.word	0x0800e53c

080020d8 <keyboard_task>:

void keyboard_task() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80020de:	f000 feb3 	bl	8002e48 <keyboard_get_time>
 80020e2:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80020e4:	4b66      	ldr	r3, [pc, #408]	@ (8002280 <keyboard_task+0x1a8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e039      	b.n	8002164 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fe4e 	bl	8002d94 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	73bb      	strb	r3, [r7, #14]
 80020fc:	e02c      	b.n	8002158 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80020fe:	7bb9      	ldrb	r1, [r7, #14]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	4860      	ldr	r0, [pc, #384]	@ (8002284 <keyboard_task+0x1ac>)
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002112:	fb01 f202 	mul.w	r2, r1, r2
 8002116:	4413      	add	r3, r2
 8002118:	4403      	add	r3, r0
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d017      	beq.n	8002150 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fe5e 	bl	8002de4 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002128:	7bb9      	ldrb	r1, [r7, #14]
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	011a      	lsls	r2, r3, #4
 8002134:	4413      	add	r3, r2
 8002136:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800213a:	fb01 f202 	mul.w	r2, r1, r2
 800213e:	4413      	add	r3, r2
 8002140:	4a50      	ldr	r2, [pc, #320]	@ (8002284 <keyboard_task+0x1ac>)
 8002142:	4413      	add	r3, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff7d 	bl	8002044 <update_key>

      keyboard_close_adc();
 800214a:	f000 fe73 	bl	8002e34 <keyboard_close_adc>
 800214e:	e000      	b.n	8002152 <keyboard_task+0x7a>
        continue;
 8002150:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	3301      	adds	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0cf      	beq.n	80020fe <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3301      	adds	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d9c2      	bls.n	80020f0 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800216a:	2300      	movs	r3, #0
 800216c:	737b      	strb	r3, [r7, #13]
 800216e:	e078      	b.n	8002262 <keyboard_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002170:	2300      	movs	r3, #0
 8002172:	733b      	strb	r3, [r7, #12]
 8002174:	e06f      	b.n	8002256 <keyboard_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002176:	7b39      	ldrb	r1, [r7, #12]
 8002178:	7b7a      	ldrb	r2, [r7, #13]
 800217a:	4842      	ldr	r0, [pc, #264]	@ (8002284 <keyboard_task+0x1ac>)
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	011a      	lsls	r2, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800218a:	fb01 f202 	mul.w	r2, r1, r2
 800218e:	4413      	add	r3, r2
 8002190:	4403      	add	r3, r0
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d05a      	beq.n	800224e <keyboard_task+0x176>
 8002198:	7b39      	ldrb	r1, [r7, #12]
 800219a:	7b7a      	ldrb	r2, [r7, #13]
 800219c:	4839      	ldr	r0, [pc, #228]	@ (8002284 <keyboard_task+0x1ac>)
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	011a      	lsls	r2, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80021ac:	fb01 f202 	mul.w	r2, r1, r2
 80021b0:	4413      	add	r3, r2
 80021b2:	4403      	add	r3, r0
 80021b4:	332a      	adds	r3, #42	@ 0x2a
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d148      	bne.n	800224e <keyboard_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80021bc:	7b39      	ldrb	r1, [r7, #12]
 80021be:	7b7a      	ldrb	r2, [r7, #13]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	011a      	lsls	r2, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80021ce:	fb01 f202 	mul.w	r2, r1, r2
 80021d2:	4413      	add	r3, r2
 80021d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <keyboard_task+0x1ac>)
 80021d6:	4413      	add	r3, r2
 80021d8:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80021e6:	429a      	cmp	r2, r3
 80021e8:	bf34      	ite	cc
 80021ea:	2301      	movcc	r3, #1
 80021ec:	2300      	movcs	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80021f2:	f000 fe29 	bl	8002e48 <keyboard_get_time>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <keyboard_task+0x1b0>)
 8002202:	88d2      	ldrh	r2, [r2, #6]
 8002204:	4293      	cmp	r3, r2
 8002206:	bf94      	ite	ls
 8002208:	2301      	movls	r3, #1
 800220a:	2300      	movhi	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <keyboard_task+0x156>
 8002216:	78bb      	ldrb	r3, [r7, #2]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <keyboard_task+0x156>
        key->actuation.status = STATUS_TAP;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _TAP_LAYER);
 8002224:	2101      	movs	r1, #1
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff f91c 	bl	8001464 <hid_press_key>
 800222c:	e010      	b.n	8002250 <keyboard_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 800222e:	78bb      	ldrb	r3, [r7, #2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <keyboard_task+0x164>
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <keyboard_task+0x1a8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <keyboard_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _BASE_LAYER);
 8002244:	2100      	movs	r1, #0
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff f90c 	bl	8001464 <hid_press_key>
 800224c:	e000      	b.n	8002250 <keyboard_task+0x178>
        continue;
 800224e:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002250:	7b3b      	ldrb	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	733b      	strb	r3, [r7, #12]
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d08c      	beq.n	8002176 <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	3301      	adds	r3, #1
 8002260:	737b      	strb	r3, [r7, #13]
 8002262:	7b7b      	ldrb	r3, [r7, #13]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d983      	bls.n	8002170 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002268:	f000 fdee 	bl	8002e48 <keyboard_get_time>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4a06      	ldr	r2, [pc, #24]	@ (800228c <keyboard_task+0x1b4>)
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000053c 	.word	0x2000053c
 8002284:	20000208 	.word	0x20000208
 8002288:	20000000 	.word	0x20000000
 800228c:	20000538 	.word	0x20000538

08002290 <snaptap_task>:

void snaptap_task() {
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002296:	f000 fdd7 	bl	8002e48 <keyboard_get_time>
 800229a:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 800229c:	4b89      	ldr	r3, [pc, #548]	@ (80024c4 <snaptap_task+0x234>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	77fb      	strb	r3, [r7, #31]
 80022a6:	e039      	b.n	800231c <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80022a8:	7ffb      	ldrb	r3, [r7, #31]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd72 	bl	8002d94 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	77bb      	strb	r3, [r7, #30]
 80022b4:	e02c      	b.n	8002310 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80022b6:	7fb9      	ldrb	r1, [r7, #30]
 80022b8:	7ffa      	ldrb	r2, [r7, #31]
 80022ba:	4883      	ldr	r0, [pc, #524]	@ (80024c8 <snaptap_task+0x238>)
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	011a      	lsls	r2, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80022ca:	fb01 f202 	mul.w	r2, r1, r2
 80022ce:	4413      	add	r3, r2
 80022d0:	4403      	add	r3, r0
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80022d8:	7fbb      	ldrb	r3, [r7, #30]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fd82 	bl	8002de4 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80022e0:	7fb9      	ldrb	r1, [r7, #30]
 80022e2:	7ffa      	ldrb	r2, [r7, #31]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	011a      	lsls	r2, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80022f2:	fb01 f202 	mul.w	r2, r1, r2
 80022f6:	4413      	add	r3, r2
 80022f8:	4a73      	ldr	r2, [pc, #460]	@ (80024c8 <snaptap_task+0x238>)
 80022fa:	4413      	add	r3, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fea1 	bl	8002044 <update_key>

      keyboard_close_adc();
 8002302:	f000 fd97 	bl	8002e34 <keyboard_close_adc>
 8002306:	e000      	b.n	800230a <snaptap_task+0x7a>
        continue;
 8002308:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800230a:	7fbb      	ldrb	r3, [r7, #30]
 800230c:	3301      	adds	r3, #1
 800230e:	77bb      	strb	r3, [r7, #30]
 8002310:	7fbb      	ldrb	r3, [r7, #30]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0cf      	beq.n	80022b6 <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	3301      	adds	r3, #1
 800231a:	77fb      	strb	r3, [r7, #31]
 800231c:	7ffb      	ldrb	r3, [r7, #31]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d9c2      	bls.n	80022a8 <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002322:	2300      	movs	r3, #0
 8002324:	777b      	strb	r3, [r7, #29]
 8002326:	e078      	b.n	800241a <snaptap_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002328:	2300      	movs	r3, #0
 800232a:	773b      	strb	r3, [r7, #28]
 800232c:	e06f      	b.n	800240e <snaptap_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800232e:	7f39      	ldrb	r1, [r7, #28]
 8002330:	7f7a      	ldrb	r2, [r7, #29]
 8002332:	4865      	ldr	r0, [pc, #404]	@ (80024c8 <snaptap_task+0x238>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	011a      	lsls	r2, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002342:	fb01 f202 	mul.w	r2, r1, r2
 8002346:	4413      	add	r3, r2
 8002348:	4403      	add	r3, r0
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05a      	beq.n	8002406 <snaptap_task+0x176>
 8002350:	7f39      	ldrb	r1, [r7, #28]
 8002352:	7f7a      	ldrb	r2, [r7, #29]
 8002354:	485c      	ldr	r0, [pc, #368]	@ (80024c8 <snaptap_task+0x238>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	011a      	lsls	r2, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002364:	fb01 f202 	mul.w	r2, r1, r2
 8002368:	4413      	add	r3, r2
 800236a:	4403      	add	r3, r0
 800236c:	332a      	adds	r3, #42	@ 0x2a
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d148      	bne.n	8002406 <snaptap_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002374:	7f39      	ldrb	r1, [r7, #28]
 8002376:	7f7a      	ldrb	r2, [r7, #29]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	011a      	lsls	r2, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002386:	fb01 f202 	mul.w	r2, r1, r2
 800238a:	4413      	add	r3, r2
 800238c:	4a4e      	ldr	r2, [pc, #312]	@ (80024c8 <snaptap_task+0x238>)
 800238e:	4413      	add	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800239e:	429a      	cmp	r2, r3
 80023a0:	bf34      	ite	cc
 80023a2:	2301      	movcc	r3, #1
 80023a4:	2300      	movcs	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023aa:	f000 fd4d 	bl	8002e48 <keyboard_get_time>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a44      	ldr	r2, [pc, #272]	@ (80024cc <snaptap_task+0x23c>)
 80023ba:	88d2      	ldrh	r2, [r2, #6]
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <snaptap_task+0x156>
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <snaptap_task+0x156>
        key->actuation.status = STATUS_TAP;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _TAP_LAYER);
 80023dc:	2101      	movs	r1, #1
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f7ff f840 	bl	8001464 <hid_press_key>
 80023e4:	e010      	b.n	8002408 <snaptap_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <snaptap_task+0x164>
 80023ec:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <snaptap_task+0x234>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <snaptap_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _BASE_LAYER);
 80023fc:	2100      	movs	r1, #0
 80023fe:	68b8      	ldr	r0, [r7, #8]
 8002400:	f7ff f830 	bl	8001464 <hid_press_key>
 8002404:	e000      	b.n	8002408 <snaptap_task+0x178>
        continue;
 8002406:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002408:	7f3b      	ldrb	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	773b      	strb	r3, [r7, #28]
 800240e:	7f3b      	ldrb	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d08c      	beq.n	800232e <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002414:	7f7b      	ldrb	r3, [r7, #29]
 8002416:	3301      	adds	r3, #1
 8002418:	777b      	strb	r3, [r7, #29]
 800241a:	7f7b      	ldrb	r3, [r7, #29]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d983      	bls.n	8002328 <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002420:	f000 fd12 	bl	8002e48 <keyboard_get_time>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	4a29      	ldr	r2, [pc, #164]	@ (80024d0 <snaptap_task+0x240>)
 800242c:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
 8002436:	e029      	b.n	800248c <snaptap_task+0x1fc>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002438:	2300      	movs	r3, #0
 800243a:	75bb      	strb	r3, [r7, #22]
 800243c:	e01d      	b.n	800247a <snaptap_task+0x1ea>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 800243e:	7db9      	ldrb	r1, [r7, #22]
 8002440:	7dfa      	ldrb	r2, [r7, #23]
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	011a      	lsls	r2, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002450:	fb01 f202 	mul.w	r2, r1, r2
 8002454:	4413      	add	r3, r2
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <snaptap_task+0x238>)
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <snaptap_task+0x1e4>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800246a:	2b02      	cmp	r3, #2
 800246c:	d102      	bne.n	8002474 <snaptap_task+0x1e4>
              new_pressed_key = key;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	61bb      	str	r3, [r7, #24]
              break;
 8002472:	e005      	b.n	8002480 <snaptap_task+0x1f0>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	3301      	adds	r3, #1
 8002478:	75bb      	strb	r3, [r7, #22]
 800247a:	7dbb      	ldrb	r3, [r7, #22]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0de      	beq.n	800243e <snaptap_task+0x1ae>
          }
      }
      if (new_pressed_key) break;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <snaptap_task+0x204>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	3301      	adds	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d9d2      	bls.n	8002438 <snaptap_task+0x1a8>
 8002492:	e000      	b.n	8002496 <snaptap_task+0x206>
      if (new_pressed_key) break;
 8002494:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 8002496:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <snaptap_task+0x244>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d00c      	beq.n	80024ba <snaptap_task+0x22a>
      if (current_pressed_key) {
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <snaptap_task+0x244>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <snaptap_task+0x224>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <snaptap_task+0x244>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f8f2 	bl	8001698 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <snaptap_task+0x244>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  }
}
 80024ba:	bf00      	nop
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000053c 	.word	0x2000053c
 80024c8:	20000208 	.word	0x20000208
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000538 	.word	0x20000538
 80024d4:	20000540 	.word	0x20000540

080024d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0ac      	sub	sp, #176	@ 0xb0
 80024dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024de:	f001 fa7d 	bl	80039dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e2:	f000 fa9b 	bl	8002a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e6:	f000 fbaf 	bl	8002c48 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024ea:	f000 faff 	bl	8002aec <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80024ee:	f000 fb7d 	bl	8002bec <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80024f2:	f000 fb4d 	bl	8002b90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 80024f6:	4baa      	ldr	r3, [pc, #680]	@ (80027a0 <main+0x2c8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024fc:	4ba8      	ldr	r3, [pc, #672]	@ (80027a0 <main+0x2c8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8002502:	f7ff fdb1 	bl	8002068 <keyboard_init_keys>
  ssd1306_Init();
 8002506:	f000 fce5 	bl	8002ed4 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 800250a:	4ba6      	ldr	r3, [pc, #664]	@ (80027a4 <main+0x2cc>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002514:	4619      	mov	r1, r3
 8002516:	2000      	movs	r0, #0
 8002518:	f009 fef2 	bl	800c300 <tusb_rhport_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;
  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 800251c:	f001 fac4 	bl	8003aa8 <HAL_GetTick>
 8002520:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  tud_task_ext(UINT32_MAX, false);
 8002524:	2100      	movs	r1, #0
 8002526:	f04f 30ff 	mov.w	r0, #4294967295
 800252a:	f006 fa9b 	bl	8008a64 <tud_task_ext>
}
 800252e:	bf00      	nop
    tud_task();
    
    // Detect 16th key (row 3, col 3, i.e., keyboard_keys[0][15])
    struct key *mode_key = &keyboard_keys[0][12];
 8002530:	4b9d      	ldr	r3, [pc, #628]	@ (80027a8 <main+0x2d0>)
 8002532:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint8_t mode_key_pressed = (mode_key->actuation.status == STATUS_TRIGGERED);
 8002536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800253e:	2b02      	cmp	r3, #2
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (mode_key_pressed && !last_mode_key_pressed) {
 800254c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002550:	2b00      	cmp	r3, #0
 8002552:	d033      	beq.n	80025bc <main+0xe4>
 8002554:	4b95      	ldr	r3, [pc, #596]	@ (80027ac <main+0x2d4>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d12f      	bne.n	80025bc <main+0xe4>
        // Toggle mode
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 800255c:	4b94      	ldr	r3, [pc, #592]	@ (80027b0 <main+0x2d8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	4b90      	ldr	r3, [pc, #576]	@ (80027b0 <main+0x2d8>)
 800256e:	701a      	strb	r2, [r3, #0]
        // Print mode name to CDC (Hercules)
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002570:	4b8f      	ldr	r3, [pc, #572]	@ (80027b0 <main+0x2d8>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10f      	bne.n	8002598 <main+0xc0>
 8002578:	4b8e      	ldr	r3, [pc, #568]	@ (80027b4 <main+0x2dc>)
 800257a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800257c:	2300      	movs	r3, #0
 800257e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8002582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002584:	647b      	str	r3, [r7, #68]	@ 0x44
  return tud_cdc_n_write(itf, str, strlen(str));
 8002586:	2211      	movs	r2, #17
 8002588:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800258c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800258e:	4618      	mov	r0, r3
 8002590:	f004 f95a 	bl	8006848 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002594:	bf00      	nop
 8002596:	e00e      	b.n	80025b6 <main+0xde>
 8002598:	4b87      	ldr	r3, [pc, #540]	@ (80027b8 <main+0x2e0>)
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40
 800259c:	2300      	movs	r3, #0
 800259e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80025a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return tud_cdc_n_write(itf, str, strlen(str));
 80025a6:	2210      	movs	r2, #16
 80025a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 f94a 	bl	8006848 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80025b4:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f004 f97a 	bl	80068b0 <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 80025bc:	4a7b      	ldr	r2, [pc, #492]	@ (80027ac <main+0x2d4>)
 80025be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025c2:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 80025c4:	4b7a      	ldr	r3, [pc, #488]	@ (80027b0 <main+0x2d8>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <main+0xfa>
        keyboard_task();
 80025cc:	f7ff fd84 	bl	80020d8 <keyboard_task>
 80025d0:	e001      	b.n	80025d6 <main+0xfe>
    } else {
        snaptap_task();
 80025d2:	f7ff fe5d 	bl	8002290 <snaptap_task>
    }
    //snaptap_task();
    //keyboard_task();
    hid_task();
 80025d6:	f7fe fef5 	bl	80013c4 <hid_task>
    cdc_task();
 80025da:	f7fe f831 	bl	8000640 <cdc_task>

    ssd1306_Fill(White);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fce2 	bl	8002fa8 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 80025e4:	2101      	movs	r1, #1
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 ff16 	bl	8003418 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	233f      	movs	r3, #63	@ 0x3f
 80025f2:	227f      	movs	r2, #127	@ 0x7f
 80025f4:	2100      	movs	r1, #0
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 fea6 	bl	8003348 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2320      	movs	r3, #32
 8002602:	227f      	movs	r2, #127	@ 0x7f
 8002604:	2120      	movs	r1, #32
 8002606:	2026      	movs	r0, #38	@ 0x26
 8002608:	f000 fe32 	bl	8003270 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 800260c:	2300      	movs	r3, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	233f      	movs	r3, #63	@ 0x3f
 8002612:	2226      	movs	r2, #38	@ 0x26
 8002614:	2100      	movs	r1, #0
 8002616:	2026      	movs	r0, #38	@ 0x26
 8002618:	f000 fe2a 	bl	8003270 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 800261c:	2301      	movs	r3, #1
 800261e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002622:	e016      	b.n	8002652 <main+0x17a>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002624:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3326      	adds	r3, #38	@ 0x26
 8002632:	653b      	str	r3, [r7, #80]	@ 0x50
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8002634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002636:	b2d8      	uxtb	r0, r3
 8002638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800263a:	b2da      	uxtb	r2, r3
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	233f      	movs	r3, #63	@ 0x3f
 8002642:	2100      	movs	r1, #0
 8002644:	f000 fe14 	bl	8003270 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002648:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800264c:	3301      	adds	r3, #1
 800264e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002656:	2b02      	cmp	r3, #2
 8002658:	dde4      	ble.n	8002624 <main+0x14c>
    }

    int mod_y = 2;
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    const int mod_line_height = 10;
 8002660:	230a      	movs	r3, #10
 8002662:	67bb      	str	r3, [r7, #120]	@ 0x78

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800266a:	e076      	b.n	800275a <main+0x282>
      struct key *k = &keyboard_keys[0][amux];
 800266c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	011a      	lsls	r2, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	4a50      	ldr	r2, [pc, #320]	@ (80027bc <main+0x2e4>)
 800267c:	4413      	add	r3, r2
 800267e:	65bb      	str	r3, [r7, #88]	@ 0x58

      if (k->state.distance_8bits > 20 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002682:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002686:	2b14      	cmp	r3, #20
 8002688:	d962      	bls.n	8002750 <main+0x278>
 800268a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800268c:	795b      	ldrb	r3, [r3, #5]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d15e      	bne.n	8002750 <main+0x278>
        uint8_t bitmask = k->layers[_BASE_LAYER].value;
 8002692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002694:	3306      	adds	r3, #6
 8002696:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        const char *label = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        if (bitmask == 0b00000001)
 80026a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d103      	bne.n	80026b0 <main+0x1d8>
          label = "LCtrl";
 80026a8:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <main+0x2e8>)
 80026aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026ae:	e036      	b.n	800271e <main+0x246>
        else if (bitmask == 0b00000010)
 80026b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d103      	bne.n	80026c0 <main+0x1e8>
          label = "LShift";
 80026b8:	4b42      	ldr	r3, [pc, #264]	@ (80027c4 <main+0x2ec>)
 80026ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026be:	e02e      	b.n	800271e <main+0x246>
        else if (bitmask == 0b00000100)
 80026c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d103      	bne.n	80026d0 <main+0x1f8>
          label = "LAlt";
 80026c8:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <main+0x2f0>)
 80026ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026ce:	e026      	b.n	800271e <main+0x246>
        else if (bitmask == 0b00001000)
 80026d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d103      	bne.n	80026e0 <main+0x208>
          label = "LGUI";
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <main+0x2f4>)
 80026da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026de:	e01e      	b.n	800271e <main+0x246>
        else if (bitmask == 0b00010000)
 80026e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d103      	bne.n	80026f0 <main+0x218>
          label = "RCtrl";
 80026e8:	4b39      	ldr	r3, [pc, #228]	@ (80027d0 <main+0x2f8>)
 80026ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026ee:	e016      	b.n	800271e <main+0x246>
        else if (bitmask == 0b00100000)
 80026f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d103      	bne.n	8002700 <main+0x228>
          label = "RShift";
 80026f8:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <main+0x2fc>)
 80026fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026fe:	e00e      	b.n	800271e <main+0x246>
        else if (bitmask == 0b01000000)
 8002700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002704:	2b40      	cmp	r3, #64	@ 0x40
 8002706:	d103      	bne.n	8002710 <main+0x238>
          label = "RAlt";
 8002708:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <main+0x300>)
 800270a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800270e:	e006      	b.n	800271e <main+0x246>
        else if (bitmask == 0b10000000)
 8002710:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002714:	2b80      	cmp	r3, #128	@ 0x80
 8002716:	d102      	bne.n	800271e <main+0x246>
          label = "RGUI";
 8002718:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <main+0x304>)
 800271a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        if (label) {
 800271e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002722:	2b00      	cmp	r3, #0
 8002724:	d014      	beq.n	8002750 <main+0x278>
          ssd1306_SetCursor(2, mod_y);
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	2002      	movs	r0, #2
 8002730:	f000 fd86 	bl	8003240 <ssd1306_SetCursor>
          ssd1306_WriteString(label, Font_6x8, Black);
 8002734:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <main+0x308>)
 8002736:	2200      	movs	r2, #0
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800273c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002740:	f000 fd58 	bl	80031f4 <ssd1306_WriteString>
          mod_y += mod_line_height;
 8002744:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274a:	4413      	add	r3, r2
 800274c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002754:	3301      	adds	r3, #1
 8002756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800275a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800275e:	2b0f      	cmp	r3, #15
 8002760:	dd84      	ble.n	800266c <main+0x194>
        }
      }
    }

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8002762:	2322      	movs	r3, #34	@ 0x22
 8002764:	677b      	str	r3, [r7, #116]	@ 0x74
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8002766:	2336      	movs	r3, #54	@ 0x36
 8002768:	673b      	str	r3, [r7, #112]	@ 0x70

    int label_row_top = 2;
 800276a:	2302      	movs	r3, #2
 800276c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int percent_row_top = label_row_bot - 11;
 800276e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002770:	3b0b      	subs	r3, #11
 8002772:	66bb      	str	r3, [r7, #104]	@ 0x68

    char keycodes[6][4] = {0};
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
 8002784:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800279c:	e087      	b.n	80028ae <main+0x3d6>
 800279e:	bf00      	nop
 80027a0:	20000ac4 	.word	0x20000ac4
 80027a4:	0800e3fc 	.word	0x0800e3fc
 80027a8:	2000046c 	.word	0x2000046c
 80027ac:	20000ad5 	.word	0x20000ad5
 80027b0:	20000ad4 	.word	0x20000ad4
 80027b4:	0800e38c 	.word	0x0800e38c
 80027b8:	0800e3a0 	.word	0x0800e3a0
 80027bc:	20000208 	.word	0x20000208
 80027c0:	0800e3b4 	.word	0x0800e3b4
 80027c4:	0800e3bc 	.word	0x0800e3bc
 80027c8:	0800e3c4 	.word	0x0800e3c4
 80027cc:	0800e3cc 	.word	0x0800e3cc
 80027d0:	0800e3d4 	.word	0x0800e3d4
 80027d4:	0800e3dc 	.word	0x0800e3dc
 80027d8:	0800e3e4 	.word	0x0800e3e4
 80027dc:	0800e3ec 	.word	0x0800e3ec
 80027e0:	0800eb5c 	.word	0x0800eb5c
      struct key *k = &keyboard_keys[0][amux];
 80027e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	011a      	lsls	r2, r3, #4
 80027f0:	4413      	add	r3, r2
 80027f2:	4a86      	ldr	r2, [pc, #536]	@ (8002a0c <main+0x534>)
 80027f4:	4413      	add	r3, r2
 80027f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

      if (k->state.distance_8bits > 20 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 80027f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027fe:	2b14      	cmp	r3, #20
 8002800:	d950      	bls.n	80028a4 <main+0x3cc>
 8002802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002806:	2b05      	cmp	r3, #5
 8002808:	dc4c      	bgt.n	80028a4 <main+0x3cc>
 800280a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800280c:	795b      	ldrb	r3, [r3, #5]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d148      	bne.n	80028a4 <main+0x3cc>
        keycodes[tracker][0] = '0';
 8002812:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	33a8      	adds	r3, #168	@ 0xa8
 800281a:	443b      	add	r3, r7
 800281c:	2230      	movs	r2, #48	@ 0x30
 800281e:	f803 2c8c 	strb.w	r2, [r3, #-140]
        keycodes[tracker][1] = 'x';
 8002822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	33a8      	adds	r3, #168	@ 0xa8
 800282a:	443b      	add	r3, r7
 800282c:	2278      	movs	r2, #120	@ 0x78
 800282e:	f803 2c8b 	strb.w	r2, [r3, #-139]
        keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 8002832:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002836:	2b09      	cmp	r3, #9
 8002838:	dc05      	bgt.n	8002846 <main+0x36e>
 800283a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3330      	adds	r3, #48	@ 0x30
 8002842:	b2da      	uxtb	r2, r3
 8002844:	e004      	b.n	8002850 <main+0x378>
 8002846:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3337      	adds	r3, #55	@ 0x37
 800284e:	b2da      	uxtb	r2, r3
 8002850:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	33a8      	adds	r3, #168	@ 0xa8
 8002858:	443b      	add	r3, r7
 800285a:	f803 2c8a 	strb.w	r2, [r3, #-138]
        keycodes[tracker][3] = '\0';
 800285e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	33a8      	adds	r3, #168	@ 0xa8
 8002866:	443b      	add	r3, r7
 8002868:	2200      	movs	r2, #0
 800286a:	f803 2c89 	strb.w	r2, [r3, #-137]

        key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 800286e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002870:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002874:	461a      	mov	r2, r3
 8002876:	2364      	movs	r3, #100	@ 0x64
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	4a64      	ldr	r2, [pc, #400]	@ (8002a10 <main+0x538>)
 800287e:	fb82 1203 	smull	r1, r2, r2, r3
 8002882:	441a      	add	r2, r3
 8002884:	11d2      	asrs	r2, r2, #7
 8002886:	17db      	asrs	r3, r3, #31
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b2d9      	uxtb	r1, r3
 800288c:	f107 0214 	add.w	r2, r7, #20
 8002890:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002894:	4413      	add	r3, r2
 8002896:	460a      	mov	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
        tracker++;
 800289a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800289e:	3301      	adds	r3, #1
 80028a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80028a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a8:	3301      	adds	r3, #1
 80028aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	dd96      	ble.n	80027e4 <main+0x30c>
      }
    }

    for (int i = 1; i <= 3; i++) {
 80028b6:	2301      	movs	r3, #1
 80028b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028bc:	e04a      	b.n	8002954 <main+0x47c>
      if (keycodes[i - 1][0] != '\0') {
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c2:	3b01      	subs	r3, #1
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	33a8      	adds	r3, #168	@ 0xa8
 80028c8:	443b      	add	r3, r7
 80028ca:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d03b      	beq.n	800294a <main+0x472>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 80028d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	332a      	adds	r3, #42	@ 0x2a
 80028e2:	663b      	str	r3, [r7, #96]	@ 0x60
        ssd1306_SetCursor(x, label_row_top);
 80028e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fca6 	bl	8003240 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 80028f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f8:	3b01      	subs	r3, #1
 80028fa:	f107 021c 	add.w	r2, r7, #28
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	18d0      	adds	r0, r2, r3
 8002902:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <main+0x53c>)
 8002904:	2200      	movs	r2, #0
 8002906:	9200      	str	r2, [sp, #0]
 8002908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290a:	f000 fc73 	bl	80031f4 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002912:	3b01      	subs	r3, #1
 8002914:	33a8      	adds	r3, #168	@ 0xa8
 8002916:	443b      	add	r3, r7
 8002918:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800291c:	461a      	mov	r2, r3
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	493d      	ldr	r1, [pc, #244]	@ (8002a18 <main+0x540>)
 8002924:	4618      	mov	r0, r3
 8002926:	f00a f813 	bl	800c950 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 800292a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800292c:	b2db      	uxtb	r3, r3
 800292e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fc83 	bl	8003240 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 800293a:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <main+0x53c>)
 800293c:	f107 000c 	add.w	r0, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	9200      	str	r2, [sp, #0]
 8002944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002946:	f000 fc55 	bl	80031f4 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 800294a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800294e:	3301      	adds	r3, #1
 8002950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002958:	2b03      	cmp	r3, #3
 800295a:	ddb0      	ble.n	80028be <main+0x3e6>
      }
    }

    for (int i = 4; i <= 6; i++) {
 800295c:	2304      	movs	r3, #4
 800295e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002962:	e048      	b.n	80029f6 <main+0x51e>
      if (keycodes[i - 1][0] != '\0') {
 8002964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002968:	3b01      	subs	r3, #1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	33a8      	adds	r3, #168	@ 0xa8
 800296e:	443b      	add	r3, r7
 8002970:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d039      	beq.n	80029ec <main+0x514>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800297c:	1f1a      	subs	r2, r3, #4
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	332a      	adds	r3, #42	@ 0x2a
 8002988:	667b      	str	r3, [r7, #100]	@ 0x64
        ssd1306_SetCursor(x, label_row_bot);
 800298a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298c:	b2db      	uxtb	r3, r3
 800298e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fc53 	bl	8003240 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 800299a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800299e:	3b01      	subs	r3, #1
 80029a0:	f107 021c 	add.w	r2, r7, #28
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	18d0      	adds	r0, r2, r3
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <main+0x53c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	f000 fc20 	bl	80031f4 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 80029b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029b8:	3b01      	subs	r3, #1
 80029ba:	33a8      	adds	r3, #168	@ 0xa8
 80029bc:	443b      	add	r3, r7
 80029be:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80029c2:	461a      	mov	r2, r3
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4914      	ldr	r1, [pc, #80]	@ (8002a18 <main+0x540>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f009 ffc1 	bl	800c950 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 80029ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fc31 	bl	8003240 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <main+0x53c>)
 80029e0:	1d38      	adds	r0, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	9200      	str	r2, [sp, #0]
 80029e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e8:	f000 fc04 	bl	80031f4 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 80029ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029f0:	3301      	adds	r3, #1
 80029f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	ddb2      	ble.n	8002964 <main+0x48c>
      }
    }

    ssd1306_UpdateScreen();
 80029fe:	f000 faeb 	bl	8002fd8 <ssd1306_UpdateScreen>
    cdc_performance_measure(start_at);
 8002a02:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002a06:	f7fd fde9 	bl	80005dc <cdc_performance_measure>
  while (1) {
 8002a0a:	e587      	b.n	800251c <main+0x44>
 8002a0c:	20000208 	.word	0x20000208
 8002a10:	80808081 	.word	0x80808081
 8002a14:	0800eb5c 	.word	0x0800eb5c
 8002a18:	0800e3f4 	.word	0x0800e3f4

08002a1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b094      	sub	sp, #80	@ 0x50
 8002a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a22:	f107 0320 	add.w	r3, r7, #32
 8002a26:	2230      	movs	r2, #48	@ 0x30
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f009 fff5 	bl	800ca1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <SystemClock_Config+0xc8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	4a26      	ldr	r2, [pc, #152]	@ (8002ae4 <SystemClock_Config+0xc8>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a50:	4b24      	ldr	r3, [pc, #144]	@ (8002ae4 <SystemClock_Config+0xc8>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <SystemClock_Config+0xcc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a20      	ldr	r2, [pc, #128]	@ (8002ae8 <SystemClock_Config+0xcc>)
 8002a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <SystemClock_Config+0xcc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a82:	2302      	movs	r3, #2
 8002a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002a8c:	230d      	movs	r3, #13
 8002a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a90:	23a8      	movs	r3, #168	@ 0xa8
 8002a92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a94:	2304      	movs	r3, #4
 8002a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fe9d 	bl	80057e0 <HAL_RCC_OscConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <SystemClock_Config+0x94>
    Error_Handler();
 8002aac:	f000 f9d3 	bl	8002e56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 f8ff 	bl	8005cd0 <HAL_RCC_ClockConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <SystemClock_Config+0xc0>
    Error_Handler();
 8002ad8:	f000 f9bd 	bl	8002e56 <Error_Handler>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3750      	adds	r7, #80	@ 0x50
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000

08002aec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002af2:	463b      	mov	r3, r7
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002afe:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b00:	4a21      	ldr	r2, [pc, #132]	@ (8002b88 <MX_ADC1_Init+0x9c>)
 8002b02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b18:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b2e:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <MX_ADC1_Init+0xa0>)
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b46:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002b4c:	480d      	ldr	r0, [pc, #52]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b4e:	f000 ffdb 	bl	8003b08 <HAL_ADC_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_ADC1_Init+0x70>
    Error_Handler();
 8002b58:	f000 f97d 	bl	8002e56 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002b5c:	2309      	movs	r3, #9
 8002b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <MX_ADC1_Init+0x98>)
 8002b6e:	f001 f98f 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_ADC1_Init+0x90>
    Error_Handler();
 8002b78:	f000 f96d 	bl	8002e56 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000544 	.word	0x20000544
 8002b88:	40012000 	.word	0x40012000
 8002b8c:	0f000001 	.word	0x0f000001

08002b90 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b94:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002b96:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <MX_I2C1_Init+0x54>)
 8002b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <MX_I2C1_Init+0x58>)
 8002b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bcc:	4804      	ldr	r0, [pc, #16]	@ (8002be0 <MX_I2C1_Init+0x50>)
 8002bce:	f002 f84b 	bl	8004c68 <HAL_I2C_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002bd8:	f000 f93d 	bl	8002e56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000058c 	.word	0x2000058c
 8002be4:	40005400 	.word	0x40005400
 8002be8:	000186a0 	.word	0x000186a0

08002bec <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002bf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c00:	2202      	movs	r2, #2
 8002c02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8002c2e:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c30:	f002 fcc7 	bl	80055c2 <HAL_PCD_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8002c3a:	f000 f90c 	bl	8002e56 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200005e0 	.word	0x200005e0

08002c48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a18      	ldr	r2, [pc, #96]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <MX_GPIO_Init+0x9c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002cb8:	480b      	ldr	r0, [pc, #44]	@ (8002ce8 <MX_GPIO_Init+0xa0>)
 8002cba:	f001 ffbb 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002cbe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4804      	ldr	r0, [pc, #16]	@ (8002ce8 <MX_GPIO_Init+0xa0>)
 8002cd8:	f001 fe28 	bl	800492c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002cdc:	bf00      	nop
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40020400 	.word	0x40020400

08002cec <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8002cf0:	4a05      	ldr	r2, [pc, #20]	@ (8002d08 <keyboard_read_config+0x1c>)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <keyboard_read_config+0x20>)
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f009 ff64 	bl	800cbca <memcpy>
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	08040000 	.word	0x08040000

08002d10 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8002d10:	b5b0      	push	{r4, r5, r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002d26:	d301      	bcc.n	8002d2c <keyboard_write_config+0x1c>
    return 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e02d      	b.n	8002d88 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 8002d2c:	f001 fc44 	bl	80045b8 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <keyboard_write_config+0x80>)
 8002d32:	22b3      	movs	r2, #179	@ 0xb3
 8002d34:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8002d36:	2102      	movs	r1, #2
 8002d38:	2006      	movs	r0, #6
 8002d3a:	f001 fdaf 	bl	800489c <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	81fb      	strh	r3, [r7, #14]
 8002d42:	e01a      	b.n	8002d7a <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8002d44:	89fb      	ldrh	r3, [r7, #14]
 8002d46:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002d4a:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8002d4e:	4619      	mov	r1, r3
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	4615      	mov	r5, r2
 8002d60:	4622      	mov	r2, r4
 8002d62:	462b      	mov	r3, r5
 8002d64:	2000      	movs	r0, #0
 8002d66:	f001 fbd3 	bl	8004510 <HAL_FLASH_Program>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002d70:	f001 fc44 	bl	80045fc <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	3301      	adds	r3, #1
 8002d78:	81fb      	strh	r3, [r7, #14]
 8002d7a:	89fa      	ldrh	r2, [r7, #14]
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d3e0      	bcc.n	8002d44 <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 8002d82:	f001 fc3b 	bl	80045fc <HAL_FLASH_Lock>
  return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e013      	b.n	8002dcc <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <keyboard_select_amux+0x48>)
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	b299      	uxth	r1, r3
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	fa42 f303 	asr.w	r3, r2, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4807      	ldr	r0, [pc, #28]	@ (8002de0 <keyboard_select_amux+0x4c>)
 8002dc2:	f001 ff37 	bl	8004c34 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d9e8      	bls.n	8002da4 <keyboard_select_amux+0x10>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	0800e55c 	.word	0x0800e55c
 8002de0:	40020400 	.word	0x40020400

08002de4 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8002dee:	2209      	movs	r2, #9
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <keyboard_select_adc+0x30>)
 8002df2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <keyboard_select_adc+0x30>)
 8002df6:	4808      	ldr	r0, [pc, #32]	@ (8002e18 <keyboard_select_adc+0x34>)
 8002df8:	f001 f84a 	bl	8003e90 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8002dfc:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <keyboard_select_adc+0x34>)
 8002dfe:	f000 fec7 	bl	8003b90 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8002e02:	2101      	movs	r1, #1
 8002e04:	4804      	ldr	r0, [pc, #16]	@ (8002e18 <keyboard_select_adc+0x34>)
 8002e06:	f000 ffaa 	bl	8003d5e <HAL_ADC_PollForConversion>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000ac4 	.word	0x20000ac4
 8002e18:	20000544 	.word	0x20000544

08002e1c <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8002e20:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <keyboard_read_adc+0x14>)
 8002e22:	f001 f827 	bl	8003e74 <HAL_ADC_GetValue>
 8002e26:	4603      	mov	r3, r0
 8002e28:	b29b      	uxth	r3, r3
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000544 	.word	0x20000544

08002e34 <keyboard_close_adc>:

void keyboard_close_adc() {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <keyboard_close_adc+0x10>)
 8002e3a:	f000 ff5d 	bl	8003cf8 <HAL_ADC_Stop>
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000544 	.word	0x20000544

08002e48 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002e4c:	f000 fe2c 	bl	8003aa8 <HAL_GetTick>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e5a:	b672      	cpsid	i
}
 8002e5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <Error_Handler+0x8>

08002e62 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	2301      	movs	r3, #1
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	1dfb      	adds	r3, r7, #7
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2178      	movs	r1, #120	@ 0x78
 8002e8e:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <ssd1306_WriteCommand+0x2c>)
 8002e90:	f002 f82e 	bl	8004ef0 <HAL_I2C_Mem_Write>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2000058c 	.word	0x2000058c

08002ea0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af04      	add	r7, sp, #16
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	9202      	str	r2, [sp, #8]
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	2240      	movs	r2, #64	@ 0x40
 8002ebe:	2178      	movs	r1, #120	@ 0x78
 8002ec0:	4803      	ldr	r0, [pc, #12]	@ (8002ed0 <ssd1306_WriteData+0x30>)
 8002ec2:	f002 f815 	bl	8004ef0 <HAL_I2C_Mem_Write>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000058c 	.word	0x2000058c

08002ed4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ed8:	f7ff ffc3 	bl	8002e62 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002edc:	2064      	movs	r0, #100	@ 0x64
 8002ede:	f000 fdef 	bl	8003ac0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 fa7a 	bl	80033dc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002ee8:	2020      	movs	r0, #32
 8002eea:	f7ff ffc1 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7ff ffbe 	bl	8002e70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ef4:	20b0      	movs	r0, #176	@ 0xb0
 8002ef6:	f7ff ffbb 	bl	8002e70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8002efa:	20c0      	movs	r0, #192	@ 0xc0
 8002efc:	f7ff ffb8 	bl	8002e70 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7ff ffb5 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002f06:	2010      	movs	r0, #16
 8002f08:	f7ff ffb2 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002f0c:	2040      	movs	r0, #64	@ 0x40
 8002f0e:	f7ff ffaf 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002f12:	20ff      	movs	r0, #255	@ 0xff
 8002f14:	f000 fa4f 	bl	80033b6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8002f18:	20a0      	movs	r0, #160	@ 0xa0
 8002f1a:	f7ff ffa9 	bl	8002e70 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 8002f1e:	20a7      	movs	r0, #167	@ 0xa7
 8002f20:	f7ff ffa6 	bl	8002e70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002f24:	20a8      	movs	r0, #168	@ 0xa8
 8002f26:	f7ff ffa3 	bl	8002e70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002f2a:	203f      	movs	r0, #63	@ 0x3f
 8002f2c:	f7ff ffa0 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f30:	20a4      	movs	r0, #164	@ 0xa4
 8002f32:	f7ff ff9d 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002f36:	20d3      	movs	r0, #211	@ 0xd3
 8002f38:	f7ff ff9a 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff97 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f42:	20d5      	movs	r0, #213	@ 0xd5
 8002f44:	f7ff ff94 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f48:	20f0      	movs	r0, #240	@ 0xf0
 8002f4a:	f7ff ff91 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f4e:	20d9      	movs	r0, #217	@ 0xd9
 8002f50:	f7ff ff8e 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f54:	2022      	movs	r0, #34	@ 0x22
 8002f56:	f7ff ff8b 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f5a:	20da      	movs	r0, #218	@ 0xda
 8002f5c:	f7ff ff88 	bl	8002e70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002f60:	2012      	movs	r0, #18
 8002f62:	f7ff ff85 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f66:	20db      	movs	r0, #219	@ 0xdb
 8002f68:	f7ff ff82 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f6c:	2020      	movs	r0, #32
 8002f6e:	f7ff ff7f 	bl	8002e70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f72:	208d      	movs	r0, #141	@ 0x8d
 8002f74:	f7ff ff7c 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f78:	2014      	movs	r0, #20
 8002f7a:	f7ff ff79 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 fa2c 	bl	80033dc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f80f 	bl	8002fa8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f8a:	f000 f825 	bl	8002fd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <ssd1306_Init+0xd0>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <ssd1306_Init+0xd0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002f9a:	4b02      	ldr	r3, [pc, #8]	@ (8002fa4 <ssd1306_Init+0xd0>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	711a      	strb	r2, [r3, #4]
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000ed8 	.word	0x20000ed8

08002fa8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <ssd1306_Fill+0x14>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <ssd1306_Fill+0x16>
 8002fbc:	23ff      	movs	r3, #255	@ 0xff
 8002fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4803      	ldr	r0, [pc, #12]	@ (8002fd4 <ssd1306_Fill+0x2c>)
 8002fc6:	f009 fd28 	bl	800ca1a <memset>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000ad8 	.word	0x20000ad8

08002fd8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
 8002fe2:	e016      	b.n	8003012 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	3b50      	subs	r3, #80	@ 0x50
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff40 	bl	8002e70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff ff3d 	bl	8002e70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002ff6:	2010      	movs	r0, #16
 8002ff8:	f7ff ff3a 	bl	8002e70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	01db      	lsls	r3, r3, #7
 8003000:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <ssd1306_UpdateScreen+0x4c>)
 8003002:	4413      	add	r3, r2
 8003004:	2180      	movs	r1, #128	@ 0x80
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff4a 	bl	8002ea0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	3301      	adds	r3, #1
 8003010:	71fb      	strb	r3, [r7, #7]
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b07      	cmp	r3, #7
 8003016:	d9e5      	bls.n	8002fe4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000ad8 	.word	0x20000ad8

08003028 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
 8003032:	460b      	mov	r3, r1
 8003034:	71bb      	strb	r3, [r7, #6]
 8003036:	4613      	mov	r3, r2
 8003038:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db3d      	blt.n	80030be <ssd1306_DrawPixel+0x96>
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	2b3f      	cmp	r3, #63	@ 0x3f
 8003046:	d83a      	bhi.n	80030be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003048:	797b      	ldrb	r3, [r7, #5]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11a      	bne.n	8003084 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	08db      	lsrs	r3, r3, #3
 8003054:	b2d8      	uxtb	r0, r3
 8003056:	4603      	mov	r3, r0
 8003058:	01db      	lsls	r3, r3, #7
 800305a:	4413      	add	r3, r2
 800305c:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <ssd1306_DrawPixel+0xa4>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	b25a      	sxtb	r2, r3
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	b25b      	sxtb	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b259      	sxtb	r1, r3
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	4603      	mov	r3, r0
 8003078:	01db      	lsls	r3, r3, #7
 800307a:	4413      	add	r3, r2
 800307c:	b2c9      	uxtb	r1, r1
 800307e:	4a13      	ldr	r2, [pc, #76]	@ (80030cc <ssd1306_DrawPixel+0xa4>)
 8003080:	54d1      	strb	r1, [r2, r3]
 8003082:	e01d      	b.n	80030c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003084:	79fa      	ldrb	r2, [r7, #7]
 8003086:	79bb      	ldrb	r3, [r7, #6]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	b2d8      	uxtb	r0, r3
 800308c:	4603      	mov	r3, r0
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	4413      	add	r3, r2
 8003092:	4a0e      	ldr	r2, [pc, #56]	@ (80030cc <ssd1306_DrawPixel+0xa4>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	b25a      	sxtb	r2, r3
 8003098:	79bb      	ldrb	r3, [r7, #6]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	4013      	ands	r3, r2
 80030ac:	b259      	sxtb	r1, r3
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	4603      	mov	r3, r0
 80030b2:	01db      	lsls	r3, r3, #7
 80030b4:	4413      	add	r3, r2
 80030b6:	b2c9      	uxtb	r1, r1
 80030b8:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <ssd1306_DrawPixel+0xa4>)
 80030ba:	54d1      	strb	r1, [r2, r3]
 80030bc:	e000      	b.n	80030c0 <ssd1306_DrawPixel+0x98>
        return;
 80030be:	bf00      	nop
    }
}
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000ad8 	.word	0x20000ad8

080030d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4638      	mov	r0, r7
 80030da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80030de:	4623      	mov	r3, r4
 80030e0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b1f      	cmp	r3, #31
 80030e6:	d902      	bls.n	80030ee <ssd1306_WriteChar+0x1e>
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80030ec:	d901      	bls.n	80030f2 <ssd1306_WriteChar+0x22>
        return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e079      	b.n	80031e6 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <ssd1306_WriteChar+0x34>
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	3b20      	subs	r3, #32
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	e000      	b.n	8003106 <ssd1306_WriteChar+0x36>
 8003104:	783b      	ldrb	r3, [r7, #0]
 8003106:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003108:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	4413      	add	r3, r2
 8003112:	2b80      	cmp	r3, #128	@ 0x80
 8003114:	dc06      	bgt.n	8003124 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003116:	4b36      	ldr	r3, [pc, #216]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 8003118:	885b      	ldrh	r3, [r3, #2]
 800311a:	461a      	mov	r2, r3
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	dd01      	ble.n	8003128 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003124:	2300      	movs	r3, #0
 8003126:	e05e      	b.n	80031e6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e04d      	b.n	80031ca <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	3b20      	subs	r3, #32
 8003134:	7879      	ldrb	r1, [r7, #1]
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4619      	mov	r1, r3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	440b      	add	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e036      	b.n	80031bc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800315e:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4413      	add	r3, r2
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 800316e:	885b      	ldrh	r3, [r3, #2]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4413      	add	r3, r2
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800317e:	4619      	mov	r1, r3
 8003180:	f7ff ff52 	bl	8003028 <ssd1306_DrawPixel>
 8003184:	e017      	b.n	80031b6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003186:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4413      	add	r3, r2
 8003192:	b2d8      	uxtb	r0, r3
 8003194:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 8003196:	885b      	ldrh	r3, [r3, #2]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	4413      	add	r3, r2
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	f7ff ff39 	bl	8003028 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3c4      	bcc.n	800314e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	787b      	ldrb	r3, [r7, #1]
 80031cc:	461a      	mov	r2, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d3ac      	bcc.n	800312e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 80031d6:	881a      	ldrh	r2, [r3, #0]
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4413      	add	r3, r2
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <ssd1306_WriteChar+0x120>)
 80031e2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000ed8 	.word	0x20000ed8

080031f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4638      	mov	r0, r7
 80031fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003202:	e013      	b.n	800322c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	7818      	ldrb	r0, [r3, #0]
 8003208:	7e3b      	ldrb	r3, [r7, #24]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	463b      	mov	r3, r7
 800320e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003210:	f7ff ff5e 	bl	80030d0 <ssd1306_WriteChar>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d002      	beq.n	8003226 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	e008      	b.n	8003238 <ssd1306_WriteString+0x44>
        }
        str++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e7      	bne.n	8003204 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	781b      	ldrb	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	4613      	mov	r3, r2
 800324e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	b29a      	uxth	r2, r3
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <ssd1306_SetCursor+0x2c>)
 8003256:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003258:	79bb      	ldrb	r3, [r7, #6]
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <ssd1306_SetCursor+0x2c>)
 800325e:	805a      	strh	r2, [r3, #2]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000ed8 	.word	0x20000ed8

08003270 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4623      	mov	r3, r4
 8003280:	71fb      	strb	r3, [r7, #7]
 8003282:	4603      	mov	r3, r0
 8003284:	71bb      	strb	r3, [r7, #6]
 8003286:	460b      	mov	r3, r1
 8003288:	717b      	strb	r3, [r7, #5]
 800328a:	4613      	mov	r3, r2
 800328c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800328e:	797a      	ldrb	r2, [r7, #5]
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bfb8      	it	lt
 8003298:	425b      	neglt	r3, r3
 800329a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800329c:	793a      	ldrb	r2, [r7, #4]
 800329e:	79bb      	ldrb	r3, [r7, #6]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bfb8      	it	lt
 80032a6:	425b      	neglt	r3, r3
 80032a8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80032aa:	79fa      	ldrb	r2, [r7, #7]
 80032ac:	797b      	ldrb	r3, [r7, #5]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d201      	bcs.n	80032b6 <ssd1306_Line+0x46>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e001      	b.n	80032ba <ssd1306_Line+0x4a>
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80032bc:	79ba      	ldrb	r2, [r7, #6]
 80032be:	793b      	ldrb	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d201      	bcs.n	80032c8 <ssd1306_Line+0x58>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e001      	b.n	80032cc <ssd1306_Line+0x5c>
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80032d6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80032da:	7939      	ldrb	r1, [r7, #4]
 80032dc:	797b      	ldrb	r3, [r7, #5]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fea2 	bl	8003028 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80032e4:	e024      	b.n	8003330 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80032e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80032ea:	79b9      	ldrb	r1, [r7, #6]
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fe9a 	bl	8003028 <ssd1306_DrawPixel>
        error2 = error * 2;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	425b      	negs	r3, r3
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	dd08      	ble.n	8003316 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4413      	add	r3, r2
 8003314:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	429a      	cmp	r2, r3
 800331c:	da08      	bge.n	8003330 <ssd1306_Line+0xc0>
            error += deltaX;
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	79bb      	ldrb	r3, [r7, #6]
 800332c:	4413      	add	r3, r2
 800332e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003330:	79fa      	ldrb	r2, [r7, #7]
 8003332:	797b      	ldrb	r3, [r7, #5]
 8003334:	429a      	cmp	r2, r3
 8003336:	d1d6      	bne.n	80032e6 <ssd1306_Line+0x76>
 8003338:	79ba      	ldrb	r2, [r7, #6]
 800333a:	793b      	ldrb	r3, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d1d2      	bne.n	80032e6 <ssd1306_Line+0x76>
        }
    }
    return;
 8003340:	bf00      	nop
}
 8003342:	3724      	adds	r7, #36	@ 0x24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b085      	sub	sp, #20
 800334c:	af02      	add	r7, sp, #8
 800334e:	4604      	mov	r4, r0
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	4603      	mov	r3, r0
 800335c:	71bb      	strb	r3, [r7, #6]
 800335e:	460b      	mov	r3, r1
 8003360:	717b      	strb	r3, [r7, #5]
 8003362:	4613      	mov	r3, r2
 8003364:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003366:	79bc      	ldrb	r4, [r7, #6]
 8003368:	797a      	ldrb	r2, [r7, #5]
 800336a:	79b9      	ldrb	r1, [r7, #6]
 800336c:	79f8      	ldrb	r0, [r7, #7]
 800336e:	7e3b      	ldrb	r3, [r7, #24]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4623      	mov	r3, r4
 8003374:	f7ff ff7c 	bl	8003270 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003378:	793c      	ldrb	r4, [r7, #4]
 800337a:	797a      	ldrb	r2, [r7, #5]
 800337c:	79b9      	ldrb	r1, [r7, #6]
 800337e:	7978      	ldrb	r0, [r7, #5]
 8003380:	7e3b      	ldrb	r3, [r7, #24]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4623      	mov	r3, r4
 8003386:	f7ff ff73 	bl	8003270 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800338a:	793c      	ldrb	r4, [r7, #4]
 800338c:	79fa      	ldrb	r2, [r7, #7]
 800338e:	7939      	ldrb	r1, [r7, #4]
 8003390:	7978      	ldrb	r0, [r7, #5]
 8003392:	7e3b      	ldrb	r3, [r7, #24]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	4623      	mov	r3, r4
 8003398:	f7ff ff6a 	bl	8003270 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800339c:	79bc      	ldrb	r4, [r7, #6]
 800339e:	79fa      	ldrb	r2, [r7, #7]
 80033a0:	7939      	ldrb	r1, [r7, #4]
 80033a2:	79f8      	ldrb	r0, [r7, #7]
 80033a4:	7e3b      	ldrb	r3, [r7, #24]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4623      	mov	r3, r4
 80033aa:	f7ff ff61 	bl	8003270 <ssd1306_Line>

    return;
 80033ae:	bf00      	nop
}
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}

080033b6 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80033c0:	2381      	movs	r3, #129	@ 0x81
 80033c2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fd52 	bl	8002e70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fd4e 	bl	8002e70 <ssd1306_WriteCommand>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80033ec:	23af      	movs	r3, #175	@ 0xaf
 80033ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80033f0:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <ssd1306_SetDisplayOn+0x38>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	715a      	strb	r2, [r3, #5]
 80033f6:	e004      	b.n	8003402 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80033f8:	23ae      	movs	r3, #174	@ 0xae
 80033fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <ssd1306_SetDisplayOn+0x38>)
 80033fe:	2200      	movs	r2, #0
 8003400:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fd33 	bl	8002e70 <ssd1306_WriteCommand>
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000ed8 	.word	0x20000ed8

08003418 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	460a      	mov	r2, r1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	4613      	mov	r3, r2
 8003426:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 800342e:	20a1      	movs	r0, #161	@ 0xa1
 8003430:	f7ff fd1e 	bl	8002e70 <ssd1306_WriteCommand>
 8003434:	e002      	b.n	800343c <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 8003436:	20a0      	movs	r0, #160	@ 0xa0
 8003438:	f7ff fd1a 	bl	8002e70 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 8003442:	20c8      	movs	r0, #200	@ 0xc8
 8003444:	f7ff fd14 	bl	8002e70 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 8003448:	e002      	b.n	8003450 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 800344a:	20c0      	movs	r0, #192	@ 0xc0
 800344c:	f7ff fd10 	bl	8002e70 <ssd1306_WriteCommand>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_MspInit+0x4c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	4a0f      	ldr	r2, [pc, #60]	@ (80034a4 <HAL_MspInit+0x4c>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346c:	6453      	str	r3, [r2, #68]	@ 0x44
 800346e:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <HAL_MspInit+0x4c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_MspInit+0x4c>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <HAL_MspInit+0x4c>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_MspInit+0x4c>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_ADC_MspInit+0x7c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d127      	bne.n	800351a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <HAL_ADC_MspInit+0x80>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003502:	2302      	movs	r3, #2
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	4805      	ldr	r0, [pc, #20]	@ (800352c <HAL_ADC_MspInit+0x84>)
 8003516:	f001 fa09 	bl	800492c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800351a:	bf00      	nop
 800351c:	3728      	adds	r7, #40	@ 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40012000 	.word	0x40012000
 8003528:	40023800 	.word	0x40023800
 800352c:	40020400 	.word	0x40020400

08003530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <HAL_I2C_MspInit+0x84>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d12b      	bne.n	80035aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6313      	str	r3, [r2, #48]	@ 0x30
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800356e:	23c0      	movs	r3, #192	@ 0xc0
 8003570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003572:	2312      	movs	r3, #18
 8003574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800357e:	2304      	movs	r3, #4
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	480c      	ldr	r0, [pc, #48]	@ (80035bc <HAL_I2C_MspInit+0x8c>)
 800358a:	f001 f9cf 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 8003598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_I2C_MspInit+0x88>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	@ 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40005400 	.word	0x40005400
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020400 	.word	0x40020400

080035c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e0:	d13a      	bne.n	8003658 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003610:	230a      	movs	r3, #10
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4619      	mov	r1, r3
 800361a:	4812      	ldr	r0, [pc, #72]	@ (8003664 <HAL_PCD_MspInit+0xa4>)
 800361c:	f001 f986 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 8003622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003624:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 8003626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362a:	6353      	str	r3, [r2, #52]	@ 0x34
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 8003636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800363a:	6453      	str	r3, [r2, #68]	@ 0x44
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_PCD_MspInit+0xa0>)
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	2043      	movs	r0, #67	@ 0x43
 800364e:	f000 ff28 	bl	80044a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003652:	2043      	movs	r0, #67	@ 0x43
 8003654:	f000 ff41 	bl	80044da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003658:	bf00      	nop
 800365a:	3728      	adds	r7, #40	@ 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	40020000 	.word	0x40020000

08003668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <NMI_Handler+0x4>

08003670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003674:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <HardFault_Handler+0x6>

0800367a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <MemManage_Handler+0x4>

08003682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <BusFault_Handler+0x4>

0800368a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <UsageFault_Handler+0x4>

08003692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c0:	f000 f9de 	bl	8003a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <SysTick_Handler+0x18>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a02      	ldr	r2, [pc, #8]	@ (80036d4 <SysTick_Handler+0x18>)
 80036cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000ee0 	.word	0x20000ee0

080036d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80036dc:	2000      	movs	r0, #0
 80036de:	f008 fa25 	bl	800bb2c <dcd_int_handler>
	return;
 80036e2:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0
  return 1;
 80036ea:	2301      	movs	r3, #1
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_kill>:

int _kill(int pid, int sig)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003700:	f009 fa36 	bl	800cb70 <__errno>
 8003704:	4603      	mov	r3, r0
 8003706:	2216      	movs	r2, #22
 8003708:	601a      	str	r2, [r3, #0]
  return -1;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_exit>:

void _exit (int status)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800371e:	f04f 31ff 	mov.w	r1, #4294967295
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffe7 	bl	80036f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <_exit+0x12>

0800372c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e00a      	b.n	8003754 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800373e:	f3af 8000 	nop.w
 8003742:	4601      	mov	r1, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	60ba      	str	r2, [r7, #8]
 800374a:	b2ca      	uxtb	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3301      	adds	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	dbf0      	blt.n	800373e <_read+0x12>
  }

  return len;
 800375c:	687b      	ldr	r3, [r7, #4]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e009      	b.n	800378c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	60ba      	str	r2, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	dbf1      	blt.n	8003778 <_write+0x12>
  }
  return len;
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_close>:

int _close(int file)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037c6:	605a      	str	r2, [r3, #4]
  return 0;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_isatty>:

int _isatty(int file)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003810:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <_sbrk+0x5c>)
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <_sbrk+0x60>)
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <_sbrk+0x64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <_sbrk+0x64>)
 8003826:	4a12      	ldr	r2, [pc, #72]	@ (8003870 <_sbrk+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d207      	bcs.n	8003848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003838:	f009 f99a 	bl	800cb70 <__errno>
 800383c:	4603      	mov	r3, r0
 800383e:	220c      	movs	r2, #12
 8003840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e009      	b.n	800385c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <_sbrk+0x64>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <_sbrk+0x64>)
 8003858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20020000 	.word	0x20020000
 8003868:	00000400 	.word	0x00000400
 800386c:	20000ee4 	.word	0x20000ee4
 8003870:	20001420 	.word	0x20001420

08003874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <SystemInit+0x20>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	4a05      	ldr	r2, [pc, #20]	@ (8003894 <SystemInit+0x20>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 800389c:	4b02      	ldr	r3, [pc, #8]	@ (80038a8 <tud_descriptor_device_cb+0x10>)
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	0800eb80 	.word	0x0800eb80

080038ac <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80038b6:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <tud_hid_descriptor_report_cb+0x18>)
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	0800eb94 	.word	0x0800eb94

080038c8 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 80038d2:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <tud_descriptor_configuration_cb+0x18>)
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	0800ebf0 	.word	0x0800ebf0

080038e4 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	460a      	mov	r2, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80038fa:	4b21      	ldr	r3, [pc, #132]	@ (8003980 <tud_descriptor_string_cb+0x9c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <tud_descriptor_string_cb+0xa0>)
 8003904:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e027      	b.n	800395c <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d901      	bls.n	8003916 <tud_descriptor_string_cb+0x32>
 8003912:	2300      	movs	r3, #0
 8003914:	e02f      	b.n	8003976 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <tud_descriptor_string_cb+0x9c>)
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003920:	68b8      	ldr	r0, [r7, #8]
 8003922:	f7fc fc67 	bl	80001f4 <strlen>
 8003926:	4603      	mov	r3, r0
 8003928:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b1f      	cmp	r3, #31
 800392e:	d901      	bls.n	8003934 <tud_descriptor_string_cb+0x50>
 8003930:	231f      	movs	r3, #31
 8003932:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	73bb      	strb	r3, [r7, #14]
 8003938:	e00c      	b.n	8003954 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 800393a:	7bbb      	ldrb	r3, [r7, #14]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	4413      	add	r3, r2
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	3301      	adds	r3, #1
 8003946:	4611      	mov	r1, r2
 8003948:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <tud_descriptor_string_cb+0xa0>)
 800394a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	3301      	adds	r3, #1
 8003952:	73bb      	strb	r3, [r7, #14]
 8003954:	7bba      	ldrb	r2, [r7, #14]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3ee      	bcc.n	800393a <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	3301      	adds	r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	b21b      	sxth	r3, r3
 8003968:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800396c:	b21b      	sxth	r3, r3
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <tud_descriptor_string_cb+0xa0>)
 8003972:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <tud_descriptor_string_cb+0xa0>)
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000010c 	.word	0x2000010c
 8003984:	20000ee8 	.word	0x20000ee8

08003988 <Reset_Handler>:
 8003988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039c0 <LoopFillZerobss+0xe>
 800398c:	f7ff ff72 	bl	8003874 <SystemInit>
 8003990:	480c      	ldr	r0, [pc, #48]	@ (80039c4 <LoopFillZerobss+0x12>)
 8003992:	490d      	ldr	r1, [pc, #52]	@ (80039c8 <LoopFillZerobss+0x16>)
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <LoopFillZerobss+0x1a>)
 8003996:	2300      	movs	r3, #0
 8003998:	e002      	b.n	80039a0 <LoopCopyDataInit>

0800399a <CopyDataInit>:
 800399a:	58d4      	ldr	r4, [r2, r3]
 800399c:	50c4      	str	r4, [r0, r3]
 800399e:	3304      	adds	r3, #4

080039a0 <LoopCopyDataInit>:
 80039a0:	18c4      	adds	r4, r0, r3
 80039a2:	428c      	cmp	r4, r1
 80039a4:	d3f9      	bcc.n	800399a <CopyDataInit>
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <LoopFillZerobss+0x1e>)
 80039a8:	4c0a      	ldr	r4, [pc, #40]	@ (80039d4 <LoopFillZerobss+0x22>)
 80039aa:	2300      	movs	r3, #0
 80039ac:	e001      	b.n	80039b2 <LoopFillZerobss>

080039ae <FillZerobss>:
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	3204      	adds	r2, #4

080039b2 <LoopFillZerobss>:
 80039b2:	42a2      	cmp	r2, r4
 80039b4:	d3fb      	bcc.n	80039ae <FillZerobss>
 80039b6:	f009 f8e1 	bl	800cb7c <__libc_init_array>
 80039ba:	f7fe fd8d 	bl	80024d8 <main>
 80039be:	4770      	bx	lr
 80039c0:	20020000 	.word	0x20020000
 80039c4:	20000000 	.word	0x20000000
 80039c8:	200001a0 	.word	0x200001a0
 80039cc:	0800eeac 	.word	0x0800eeac
 80039d0:	200001a0 	.word	0x200001a0
 80039d4:	20001420 	.word	0x20001420

080039d8 <ADC_IRQHandler>:
 80039d8:	e7fe      	b.n	80039d8 <ADC_IRQHandler>
	...

080039dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039e0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <HAL_Init+0x40>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a1c <HAL_Init+0x40>)
 80039e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_Init+0x40>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <HAL_Init+0x40>)
 80039f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <HAL_Init+0x40>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <HAL_Init+0x40>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f000 fd41 	bl	800448c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f000 f808 	bl	8003a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a10:	f7ff fd22 	bl	8003458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00

08003a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a28:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <HAL_InitTick+0x54>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_InitTick+0x58>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd59 	bl	80044f6 <HAL_SYSTICK_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00e      	b.n	8003a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	d80a      	bhi.n	8003a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a54:	2200      	movs	r2, #0
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f000 fd21 	bl	80044a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a60:	4a06      	ldr	r2, [pc, #24]	@ (8003a7c <HAL_InitTick+0x5c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000108 	.word	0x20000108
 8003a78:	20000128 	.word	0x20000128
 8003a7c:	20000124 	.word	0x20000124

08003a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_IncTick+0x20>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a04      	ldr	r2, [pc, #16]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000128 	.word	0x20000128
 8003aa4:	20000f28 	.word	0x20000f28

08003aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_GetTick+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000f28 	.word	0x20000f28

08003ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff ffee 	bl	8003aa8 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d005      	beq.n	8003ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_Delay+0x44>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ae6:	bf00      	nop
 8003ae8:	f7ff ffde 	bl	8003aa8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d8f7      	bhi.n	8003ae8 <HAL_Delay+0x28>
  {
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000128 	.word	0x20000128

08003b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e033      	b.n	8003b86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fcbe 	bl	80034a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b4e:	f023 0302 	bic.w	r3, r3, #2
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 faca 	bl	80040f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b76:	e001      	b.n	8003b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_Start+0x1a>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e097      	b.n	8003cda <HAL_ADC_Start+0x14a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d018      	beq.n	8003bf2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bd0:	4b45      	ldr	r3, [pc, #276]	@ (8003ce8 <HAL_ADC_Start+0x158>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a45      	ldr	r2, [pc, #276]	@ (8003cec <HAL_ADC_Start+0x15c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9a      	lsrs	r2, r3, #18
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003be4:	e002      	b.n	8003bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f9      	bne.n	8003be6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d15f      	bne.n	8003cc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d106      	bne.n	8003c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f023 0206 	bic.w	r2, r3, #6
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_ADC_Start+0x160>)
 8003c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c68:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d129      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e020      	b.n	8003cd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <HAL_ADC_Start+0x164>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000108 	.word	0x20000108
 8003cec:	431bde83 	.word	0x431bde83
 8003cf0:	40012300 	.word	0x40012300
 8003cf4:	40012000 	.word	0x40012000

08003cf8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_Stop+0x16>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e021      	b.n	8003d52 <HAL_ADC_Stop+0x5a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d113      	bne.n	8003da4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e063      	b.n	8003e6c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da4:	f7ff fe80 	bl	8003aa8 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003daa:	e021      	b.n	8003df0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d01d      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_ADC_PollForConversion+0x6c>
 8003dba:	f7ff fe75 	bl	8003aa8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d212      	bcs.n	8003df0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d00b      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03d      	b.n	8003e6c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d1d6      	bne.n	8003dac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0212 	mvn.w	r2, #18
 8003e06:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d123      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11f      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e113      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x244>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d925      	bls.n	8003f08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	3b1e      	subs	r3, #30
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	400a      	ands	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4403      	add	r3, r0
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	409a      	lsls	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	e022      	b.n	8003f4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43da      	mvns	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	400a      	ands	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4403      	add	r3, r0
 8003f44:	409a      	lsls	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d824      	bhi.n	8003fa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	3b05      	subs	r3, #5
 8003f68:	221f      	movs	r2, #31
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	400a      	ands	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	3b05      	subs	r3, #5
 8003f92:	fa00 f203 	lsl.w	r2, r0, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f9e:	e04c      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d824      	bhi.n	8003ff2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b23      	subs	r3, #35	@ 0x23
 8003fba:	221f      	movs	r2, #31
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b23      	subs	r3, #35	@ 0x23
 8003fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ff0:	e023      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b41      	subs	r3, #65	@ 0x41
 8004004:	221f      	movs	r2, #31
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	400a      	ands	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b41      	subs	r3, #65	@ 0x41
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <HAL_ADC_ConfigChannel+0x250>)
 800403c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a28      	ldr	r2, [pc, #160]	@ (80040e4 <HAL_ADC_ConfigChannel+0x254>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10f      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1d8>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d10b      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <HAL_ADC_ConfigChannel+0x254>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d12b      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <HAL_ADC_ConfigChannel+0x258>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x1f4>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b11      	cmp	r3, #17
 8004082:	d122      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <HAL_ADC_ConfigChannel+0x258>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a6:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_ADC_ConfigChannel+0x25c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <HAL_ADC_ConfigChannel+0x260>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0c9a      	lsrs	r2, r3, #18
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40012300 	.word	0x40012300
 80040e4:	40012000 	.word	0x40012000
 80040e8:	10000012 	.word	0x10000012
 80040ec:	20000108 	.word	0x20000108
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040fc:	4b79      	ldr	r3, [pc, #484]	@ (80042e4 <ADC_Init+0x1f0>)
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800414c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	4a58      	ldr	r2, [pc, #352]	@ (80042e8 <ADC_Init+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800419a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e00f      	b.n	80041f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0202 	bic.w	r2, r2, #2
 8004200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800423e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	3b01      	subs	r3, #1
 800424c:	035a      	lsls	r2, r3, #13
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	e007      	b.n	8004268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004276:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	3b01      	subs	r3, #1
 8004284:	051a      	lsls	r2, r3, #20
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800429c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042aa:	025a      	lsls	r2, r3, #9
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	029a      	lsls	r2, r3, #10
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	0f000001 	.word	0x0f000001

080042ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004308:	4013      	ands	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431e:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	60d3      	str	r3, [r2, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	@ (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 0307 	and.w	r3, r3, #7
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	@ (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	@ (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	@ (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f1c3 0307 	rsb	r3, r3, #7
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	bf28      	it	cs
 80043fe:	2304      	movcs	r3, #4
 8004400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3304      	adds	r3, #4
 8004406:	2b06      	cmp	r3, #6
 8004408:	d902      	bls.n	8004410 <NVIC_EncodePriority+0x30>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3b03      	subs	r3, #3
 800440e:	e000      	b.n	8004412 <NVIC_EncodePriority+0x32>
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004428:	f04f 31ff 	mov.w	r1, #4294967295
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	43d9      	mvns	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	4313      	orrs	r3, r2
         );
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	@ 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004458:	d301      	bcc.n	800445e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445a:	2301      	movs	r3, #1
 800445c:	e00f      	b.n	800447e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445e:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <SysTick_Config+0x40>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004466:	210f      	movs	r1, #15
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	f7ff ff8e 	bl	800438c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <SysTick_Config+0x40>)
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004476:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <SysTick_Config+0x40>)
 8004478:	2207      	movs	r2, #7
 800447a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	e000e010 	.word	0xe000e010

0800448c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff29 	bl	80042ec <__NVIC_SetPriorityGrouping>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b4:	f7ff ff3e 	bl	8004334 <__NVIC_GetPriorityGrouping>
 80044b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7ff ff8e 	bl	80043e0 <NVIC_EncodePriority>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff5d 	bl	800438c <__NVIC_SetPriority>
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff31 	bl	8004350 <__NVIC_EnableIRQ>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ffa2 	bl	8004448 <SysTick_Config>
 8004504:	4603      	mov	r3, r0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004522:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <HAL_FLASH_Program+0xa0>)
 8004524:	7e1b      	ldrb	r3, [r3, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_FLASH_Program+0x1e>
 800452a:	2302      	movs	r3, #2
 800452c:	e03b      	b.n	80045a6 <HAL_FLASH_Program+0x96>
 800452e:	4b20      	ldr	r3, [pc, #128]	@ (80045b0 <HAL_FLASH_Program+0xa0>)
 8004530:	2201      	movs	r2, #1
 8004532:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004534:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004538:	f000 f870 	bl	800461c <FLASH_WaitForLastOperation>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12b      	bne.n	800459e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800454c:	783b      	ldrb	r3, [r7, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	f000 f91b 	bl	800478c <FLASH_Program_Byte>
 8004556:	e016      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800455e:	883b      	ldrh	r3, [r7, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f000 f8ee 	bl	8004744 <FLASH_Program_HalfWord>
 8004568:	e00d      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d105      	bne.n	800457c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	68b8      	ldr	r0, [r7, #8]
 8004576:	f000 f8c3 	bl	8004700 <FLASH_Program_Word>
 800457a:	e004      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800457c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f000 f88b 	bl	800469c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004586:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800458a:	f000 f847 	bl	800461c <FLASH_WaitForLastOperation>
 800458e:	4603      	mov	r3, r0
 8004590:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_FLASH_Program+0xa4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4a07      	ldr	r2, [pc, #28]	@ (80045b4 <HAL_FLASH_Program+0xa4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800459e:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <HAL_FLASH_Program+0xa0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000f2c 	.word	0x20000f2c
 80045b4:	40023c00 	.word	0x40023c00

080045b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da0b      	bge.n	80045e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045ca:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045cc:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <HAL_FLASH_Unlock+0x3c>)
 80045ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045d0:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045d2:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <HAL_FLASH_Unlock+0x40>)
 80045d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da01      	bge.n	80045e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80045e2:	79fb      	ldrb	r3, [r7, #7]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40023c00 	.word	0x40023c00
 80045f4:	45670123 	.word	0x45670123
 80045f8:	cdef89ab 	.word	0xcdef89ab

080045fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <HAL_FLASH_Lock+0x1c>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <HAL_FLASH_Lock+0x1c>)
 8004606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800460a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023c00 	.word	0x40023c00

0800461c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004628:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <FLASH_WaitForLastOperation+0x78>)
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800462e:	f7ff fa3b 	bl	8003aa8 <HAL_GetTick>
 8004632:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004634:	e010      	b.n	8004658 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d00c      	beq.n	8004658 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <FLASH_WaitForLastOperation+0x38>
 8004644:	f7ff fa30 	bl	8003aa8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d201      	bcs.n	8004658 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e019      	b.n	800468c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <FLASH_WaitForLastOperation+0x7c>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e8      	bne.n	8004636 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <FLASH_WaitForLastOperation+0x7c>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004670:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <FLASH_WaitForLastOperation+0x7c>)
 8004672:	2201      	movs	r2, #1
 8004674:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <FLASH_WaitForLastOperation+0x7c>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004682:	f000 f8a5 	bl	80047d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
  
}  
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000f2c 	.word	0x20000f2c
 8004698:	40023c00 	.word	0x40023c00

0800469c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046a8:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	4a13      	ldr	r2, [pc, #76]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80046b4:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	4a10      	ldr	r2, [pc, #64]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80046be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <FLASH_Program_DoubleWord+0x60>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80046d2:	f3bf 8f6f 	isb	sy
}
 80046d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80046d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	000a      	movs	r2, r1
 80046e6:	2300      	movs	r3, #0
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	3104      	adds	r1, #4
 80046ec:	4613      	mov	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40023c00 	.word	0x40023c00

08004700 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <FLASH_Program_Word+0x40>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4a0c      	ldr	r2, [pc, #48]	@ (8004740 <FLASH_Program_Word+0x40>)
 8004710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <FLASH_Program_Word+0x40>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <FLASH_Program_Word+0x40>)
 800471c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004720:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004722:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <FLASH_Program_Word+0x40>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4a06      	ldr	r2, [pc, #24]	@ (8004740 <FLASH_Program_Word+0x40>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40023c00 	.word	0x40023c00

08004744 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004750:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 8004756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4a06      	ldr	r2, [pc, #24]	@ (8004788 <FLASH_Program_HalfWord+0x44>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	801a      	strh	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40023c00 	.word	0x40023c00

0800478c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <FLASH_Program_Byte+0x40>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4a0b      	ldr	r2, [pc, #44]	@ (80047cc <FLASH_Program_Byte+0x40>)
 800479e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <FLASH_Program_Byte+0x40>)
 80047a6:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <FLASH_Program_Byte+0x40>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047ac:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <FLASH_Program_Byte+0x40>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <FLASH_Program_Byte+0x40>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	701a      	strb	r2, [r3, #0]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023c00 	.word	0x40023c00

080047d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80047d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f043 0310 	orr.w	r3, r3, #16
 80047e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 80047ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80047ec:	4b29      	ldr	r3, [pc, #164]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 80047ee:	2210      	movs	r2, #16
 80047f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80047f2:	4b28      	ldr	r3, [pc, #160]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f043 0308 	orr.w	r3, r3, #8
 8004806:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004808:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800480a:	4b22      	ldr	r3, [pc, #136]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 800480c:	2220      	movs	r2, #32
 800480e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800481c:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004826:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 800482a:	2240      	movs	r2, #64	@ 0x40
 800482c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800482e:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800483a:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f043 0302 	orr.w	r3, r3, #2
 8004842:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004844:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 8004848:	2280      	movs	r2, #128	@ 0x80
 800484a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800484c:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004862:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 8004866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800486a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004878:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	4a05      	ldr	r2, [pc, #20]	@ (8004898 <FLASH_SetErrorCode+0xc8>)
 8004882:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <FLASH_SetErrorCode+0xc4>)
 8004886:	2202      	movs	r2, #2
 8004888:	60da      	str	r2, [r3, #12]
  }
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40023c00 	.word	0x40023c00
 8004898:	20000f2c 	.word	0x20000f2c

0800489c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e010      	b.n	80048da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d103      	bne.n	80048c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80048be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e009      	b.n	80048da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d103      	bne.n	80048d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80048cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e002      	b.n	80048da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80048d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048da:	4b13      	ldr	r3, [pc, #76]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	490f      	ldr	r1, [pc, #60]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 80048f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80048fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4313      	orrs	r3, r2
 8004908:	4a07      	ldr	r2, [pc, #28]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <FLASH_Erase_Sector+0x8c>)
 8004916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491a:	6113      	str	r3, [r2, #16]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40023c00 	.word	0x40023c00

0800492c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e159      	b.n	8004bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004948:	2201      	movs	r2, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	f040 8148 	bne.w	8004bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d005      	beq.n	800497e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497a:	2b02      	cmp	r3, #2
 800497c:	d130      	bne.n	80049e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 0201 	and.w	r2, r3, #1
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d017      	beq.n	8004a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d123      	bne.n	8004a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	08da      	lsrs	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3208      	adds	r2, #8
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0203 	and.w	r2, r3, #3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80a2 	beq.w	8004bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4b57      	ldr	r3, [pc, #348]	@ (8004c14 <HAL_GPIO_Init+0x2e8>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	4a56      	ldr	r2, [pc, #344]	@ (8004c14 <HAL_GPIO_Init+0x2e8>)
 8004abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ac2:	4b54      	ldr	r3, [pc, #336]	@ (8004c14 <HAL_GPIO_Init+0x2e8>)
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ace:	4a52      	ldr	r2, [pc, #328]	@ (8004c18 <HAL_GPIO_Init+0x2ec>)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a49      	ldr	r2, [pc, #292]	@ (8004c1c <HAL_GPIO_Init+0x2f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d019      	beq.n	8004b2e <HAL_GPIO_Init+0x202>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a48      	ldr	r2, [pc, #288]	@ (8004c20 <HAL_GPIO_Init+0x2f4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_GPIO_Init+0x1fe>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a47      	ldr	r2, [pc, #284]	@ (8004c24 <HAL_GPIO_Init+0x2f8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00d      	beq.n	8004b26 <HAL_GPIO_Init+0x1fa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a46      	ldr	r2, [pc, #280]	@ (8004c28 <HAL_GPIO_Init+0x2fc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d007      	beq.n	8004b22 <HAL_GPIO_Init+0x1f6>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a45      	ldr	r2, [pc, #276]	@ (8004c2c <HAL_GPIO_Init+0x300>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d101      	bne.n	8004b1e <HAL_GPIO_Init+0x1f2>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	e008      	b.n	8004b30 <HAL_GPIO_Init+0x204>
 8004b1e:	2307      	movs	r3, #7
 8004b20:	e006      	b.n	8004b30 <HAL_GPIO_Init+0x204>
 8004b22:	2303      	movs	r3, #3
 8004b24:	e004      	b.n	8004b30 <HAL_GPIO_Init+0x204>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e002      	b.n	8004b30 <HAL_GPIO_Init+0x204>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <HAL_GPIO_Init+0x204>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	f002 0203 	and.w	r2, r2, #3
 8004b36:	0092      	lsls	r2, r2, #2
 8004b38:	4093      	lsls	r3, r2
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b40:	4935      	ldr	r1, [pc, #212]	@ (8004c18 <HAL_GPIO_Init+0x2ec>)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	3302      	adds	r3, #2
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b4e:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b72:	4a2f      	ldr	r2, [pc, #188]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b9c:	4a24      	ldr	r2, [pc, #144]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ba2:	4b23      	ldr	r3, [pc, #140]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bcc:	4b18      	ldr	r3, [pc, #96]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8004c30 <HAL_GPIO_Init+0x304>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	f67f aea2 	bls.w	8004948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3724      	adds	r7, #36	@ 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40013800 	.word	0x40013800
 8004c1c:	40020000 	.word	0x40020000
 8004c20:	40020400 	.word	0x40020400
 8004c24:	40020800 	.word	0x40020800
 8004c28:	40020c00 	.word	0x40020c00
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40013c00 	.word	0x40013c00

08004c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
 8004c40:	4613      	mov	r3, r2
 8004c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c44:	787b      	ldrb	r3, [r7, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c50:	e003      	b.n	8004c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	041a      	lsls	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	619a      	str	r2, [r3, #24]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e12b      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fe fc4e 	bl	8003530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f001 f9b8 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a81      	ldr	r2, [pc, #516]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d807      	bhi.n	8004cec <HAL_I2C_Init+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a80      	ldr	r2, [pc, #512]	@ (8004ee0 <HAL_I2C_Init+0x278>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e006      	b.n	8004cfa <HAL_I2C_Init+0x92>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee4 <HAL_I2C_Init+0x27c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bf94      	ite	ls
 8004cf4:	2301      	movls	r3, #1
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a78      	ldr	r2, [pc, #480]	@ (8004ee8 <HAL_I2C_Init+0x280>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9b      	lsrs	r3, r3, #18
 8004d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a6a      	ldr	r2, [pc, #424]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d802      	bhi.n	8004d3c <HAL_I2C_Init+0xd4>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	e009      	b.n	8004d50 <HAL_I2C_Init+0xe8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	4a69      	ldr	r2, [pc, #420]	@ (8004eec <HAL_I2C_Init+0x284>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	3301      	adds	r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	495c      	ldr	r1, [pc, #368]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d819      	bhi.n	8004da4 <HAL_I2C_Init+0x13c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e59      	subs	r1, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d84:	400b      	ands	r3, r1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_I2C_Init+0x138>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e59      	subs	r1, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	e051      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da0:	2304      	movs	r3, #4
 8004da2:	e04f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d111      	bne.n	8004dd0 <HAL_I2C_Init+0x168>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e012      	b.n	8004df6 <HAL_I2C_Init+0x18e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x196>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <HAL_I2C_Init+0x1bc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e58      	subs	r0, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	440b      	add	r3, r1
 8004e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	e00f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6809      	ldr	r1, [r1, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6911      	ldr	r1, [r2, #16]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	000186a0 	.word	0x000186a0
 8004ee0:	001e847f 	.word	0x001e847f
 8004ee4:	003d08ff 	.word	0x003d08ff
 8004ee8:	431bde83 	.word	0x431bde83
 8004eec:	10624dd3 	.word	0x10624dd3

08004ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	460b      	mov	r3, r1
 8004f04:	813b      	strh	r3, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f0a:	f7fe fdcd 	bl	8003aa8 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	f040 80d9 	bne.w	80050d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2319      	movs	r3, #25
 8004f24:	2201      	movs	r2, #1
 8004f26:	496d      	ldr	r1, [pc, #436]	@ (80050dc <HAL_I2C_Mem_Write+0x1ec>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f971 	bl	8005210 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0cc      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x56>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0c5      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d007      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	@ 0x21
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2240      	movs	r2, #64	@ 0x40
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a4d      	ldr	r2, [pc, #308]	@ (80050e0 <HAL_I2C_Mem_Write+0x1f0>)
 8004fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fae:	88f8      	ldrh	r0, [r7, #6]
 8004fb0:	893a      	ldrh	r2, [r7, #8]
 8004fb2:	8979      	ldrh	r1, [r7, #10]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f890 	bl	80050e4 <I2C_RequestMemoryWrite>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d052      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e081      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa36 	bl	8005444 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d107      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e06b      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d11b      	bne.n	8005070 <HAL_I2C_Mem_Write+0x180>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1aa      	bne.n	8004fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fa29 	bl	80054d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e016      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	00100002 	.word	0x00100002
 80050e0:	ffff0000 	.word	0xffff0000

080050e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800510c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	2200      	movs	r2, #0
 8005116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f878 	bl	8005210 <I2C_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005134:	d103      	bne.n	800513e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800513c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e05f      	b.n	8005202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	492d      	ldr	r1, [pc, #180]	@ (800520c <I2C_RequestMemoryWrite+0x128>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f8d3 	bl	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e04c      	b.n	8005202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005180:	6a39      	ldr	r1, [r7, #32]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f95e 	bl	8005444 <I2C_WaitOnTXEFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	2b04      	cmp	r3, #4
 8005194:	d107      	bne.n	80051a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e02b      	b.n	8005202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b0:	893b      	ldrh	r3, [r7, #8]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e021      	b.n	8005200 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051cc:	6a39      	ldr	r1, [r7, #32]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f938 	bl	8005444 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d107      	bne.n	80051f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e005      	b.n	8005202 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f6:	893b      	ldrh	r3, [r7, #8]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	00010002 	.word	0x00010002

08005210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005220:	e048      	b.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d044      	beq.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fe fc3d 	bl	8003aa8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d139      	bne.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d10d      	bne.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x56>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	43da      	mvns	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4013      	ands	r3, r2
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	e00c      	b.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	43da      	mvns	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	429a      	cmp	r2, r3
 8005284:	d116      	bne.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e023      	b.n	80052fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10d      	bne.n	80052da <I2C_WaitOnFlagUntilTimeout+0xca>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	43da      	mvns	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	e00c      	b.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	43da      	mvns	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d093      	beq.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005312:	e071      	b.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005322:	d123      	bne.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005332:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800533c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	f043 0204 	orr.w	r2, r3, #4
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e067      	b.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d041      	beq.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005374:	f7fe fb98 	bl	8003aa8 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d136      	bne.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10c      	bne.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	43da      	mvns	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e00b      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e021      	b.n	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10c      	bne.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	43da      	mvns	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e00b      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	43da      	mvns	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf14      	ite	ne
 800542e:	2301      	movne	r3, #1
 8005430:	2300      	moveq	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f af6d 	bne.w	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005450:	e034      	b.n	80054bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f886 	bl	8005564 <I2C_IsAcknowledgeFailed>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e034      	b.n	80054cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d028      	beq.n	80054bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fe fb1d 	bl	8003aa8 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d11d      	bne.n	80054bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d016      	beq.n	80054bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e007      	b.n	80054cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c6:	2b80      	cmp	r3, #128	@ 0x80
 80054c8:	d1c3      	bne.n	8005452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054e0:	e034      	b.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f83e 	bl	8005564 <I2C_IsAcknowledgeFailed>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e034      	b.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d028      	beq.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fe fad5 	bl	8003aa8 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11d      	bne.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b04      	cmp	r3, #4
 800551c:	d016      	beq.n	800554c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b04      	cmp	r3, #4
 8005558:	d1c3      	bne.n	80054e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557a:	d11b      	bne.n	80055b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af02      	add	r7, sp, #8
 80055c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e101      	b.n	80057d8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fd ffe6 	bl	80035c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005602:	d102      	bne.n	800560a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fd8e 	bl	8006130 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	7c1a      	ldrb	r2, [r3, #16]
 800561c:	f88d 2000 	strb.w	r2, [sp]
 8005620:	3304      	adds	r3, #4
 8005622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005624:	f000 fd20 	bl	8006068 <USB_CoreInit>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0ce      	b.n	80057d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fd86 	bl	8006152 <USB_SetCurrentMode>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0bf      	b.n	80057d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]
 800565c:	e04a      	b.n	80056f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3315      	adds	r3, #21
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3314      	adds	r3, #20
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005686:	7bfa      	ldrb	r2, [r7, #15]
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	b298      	uxth	r0, r3
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	332e      	adds	r3, #46	@ 0x2e
 800569a:	4602      	mov	r2, r0
 800569c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800569e:	7bfa      	ldrb	r2, [r7, #15]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3318      	adds	r3, #24
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056b2:	7bfa      	ldrb	r2, [r7, #15]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	331c      	adds	r3, #28
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056c6:	7bfa      	ldrb	r2, [r7, #15]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3320      	adds	r3, #32
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	3324      	adds	r3, #36	@ 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	3301      	adds	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3af      	bcc.n	800565e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	e044      	b.n	800578e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800572c:	7bfa      	ldrb	r2, [r7, #15]
 800572e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	3301      	adds	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	791b      	ldrb	r3, [r3, #4]
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	429a      	cmp	r2, r3
 8005796:	d3b5      	bcc.n	8005704 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7c1a      	ldrb	r2, [r3, #16]
 80057a0:	f88d 2000 	strb.w	r2, [sp]
 80057a4:	3304      	adds	r3, #4
 80057a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057a8:	f000 fd20 	bl	80061ec <USB_DevInit>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00c      	b.n	80057d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fee8 	bl	80065a6 <USB_DevDisconnect>

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e267      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d075      	beq.n	80058ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057fe:	4b88      	ldr	r3, [pc, #544]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b04      	cmp	r3, #4
 8005808:	d00c      	beq.n	8005824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580a:	4b85      	ldr	r3, [pc, #532]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005812:	2b08      	cmp	r3, #8
 8005814:	d112      	bne.n	800583c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4b82      	ldr	r3, [pc, #520]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005822:	d10b      	bne.n	800583c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	4b7e      	ldr	r3, [pc, #504]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05b      	beq.n	80058e8 <HAL_RCC_OscConfig+0x108>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d157      	bne.n	80058e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e242      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005844:	d106      	bne.n	8005854 <HAL_RCC_OscConfig+0x74>
 8005846:	4b76      	ldr	r3, [pc, #472]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a75      	ldr	r2, [pc, #468]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e01d      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x98>
 800585e:	4b70      	ldr	r3, [pc, #448]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6f      	ldr	r2, [pc, #444]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6c      	ldr	r2, [pc, #432]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e00b      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005878:	4b69      	ldr	r3, [pc, #420]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a68      	ldr	r2, [pc, #416]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b66      	ldr	r3, [pc, #408]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a65      	ldr	r2, [pc, #404]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800588e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d013      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005898:	f7fe f906 	bl	8003aa8 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fe f902 	bl	8003aa8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	@ 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e207      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0xc0>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fe f8f2 	bl	8003aa8 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fe f8ee 	bl	8003aa8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	@ 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e1f3      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058da:	4b51      	ldr	r3, [pc, #324]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0xe8>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d063      	beq.n	80059be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005902:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800590a:	2b08      	cmp	r3, #8
 800590c:	d11c      	bne.n	8005948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b44      	ldr	r3, [pc, #272]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591a:	4b41      	ldr	r3, [pc, #260]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_RCC_OscConfig+0x152>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d001      	beq.n	8005932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e1c7      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	4b3b      	ldr	r3, [pc, #236]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4937      	ldr	r1, [pc, #220]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	e03a      	b.n	80059be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d020      	beq.n	8005992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005950:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <HAL_RCC_OscConfig+0x244>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fe f8a7 	bl	8003aa8 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800595e:	f7fe f8a3 	bl	8003aa8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1a8      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005970:	4b2b      	ldr	r3, [pc, #172]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4925      	ldr	r1, [pc, #148]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]
 8005990:	e015      	b.n	80059be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005992:	4b24      	ldr	r3, [pc, #144]	@ (8005a24 <HAL_RCC_OscConfig+0x244>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fe f886 	bl	8003aa8 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a0:	f7fe f882 	bl	8003aa8 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e187      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d036      	beq.n	8005a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d2:	4b15      	ldr	r3, [pc, #84]	@ (8005a28 <HAL_RCC_OscConfig+0x248>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fe f866 	bl	8003aa8 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e0:	f7fe f862 	bl	8003aa8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e167      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <HAL_RCC_OscConfig+0x240>)
 80059f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x200>
 80059fe:	e01b      	b.n	8005a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a00:	4b09      	ldr	r3, [pc, #36]	@ (8005a28 <HAL_RCC_OscConfig+0x248>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a06:	f7fe f84f 	bl	8003aa8 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a0c:	e00e      	b.n	8005a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a0e:	f7fe f84b 	bl	8003aa8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d907      	bls.n	8005a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e150      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
 8005a20:	40023800 	.word	0x40023800
 8005a24:	42470000 	.word	0x42470000
 8005a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	4b88      	ldr	r3, [pc, #544]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1ea      	bne.n	8005a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8097 	beq.w	8005b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4a:	4b81      	ldr	r3, [pc, #516]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10f      	bne.n	8005a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a66:	4b7a      	ldr	r3, [pc, #488]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a76:	4b77      	ldr	r3, [pc, #476]	@ (8005c54 <HAL_RCC_OscConfig+0x474>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d118      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a82:	4b74      	ldr	r3, [pc, #464]	@ (8005c54 <HAL_RCC_OscConfig+0x474>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a73      	ldr	r2, [pc, #460]	@ (8005c54 <HAL_RCC_OscConfig+0x474>)
 8005a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a8e:	f7fe f80b 	bl	8003aa8 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a96:	f7fe f807 	bl	8003aa8 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e10c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c54 <HAL_RCC_OscConfig+0x474>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d106      	bne.n	8005aca <HAL_RCC_OscConfig+0x2ea>
 8005abc:	4b64      	ldr	r3, [pc, #400]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac0:	4a63      	ldr	r2, [pc, #396]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCC_OscConfig+0x324>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x30c>
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ade:	4b5c      	ldr	r3, [pc, #368]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0x324>
 8005aec:	4b58      	ldr	r3, [pc, #352]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af0:	4a57      	ldr	r2, [pc, #348]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af8:	4b55      	ldr	r3, [pc, #340]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afc:	4a54      	ldr	r2, [pc, #336]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005afe:	f023 0304 	bic.w	r3, r3, #4
 8005b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fd ffcc 	bl	8003aa8 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fd ffc8 	bl	8003aa8 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0cb      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2a:	4b49      	ldr	r3, [pc, #292]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ee      	beq.n	8005b14 <HAL_RCC_OscConfig+0x334>
 8005b36:	e014      	b.n	8005b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b38:	f7fd ffb6 	bl	8003aa8 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fd ffb2 	bl	8003aa8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e0b5      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b56:	4b3e      	ldr	r3, [pc, #248]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1ee      	bne.n	8005b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d105      	bne.n	8005b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b68:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	4a38      	ldr	r2, [pc, #224]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80a1 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d05c      	beq.n	8005c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d141      	bne.n	8005c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b31      	ldr	r3, [pc, #196]	@ (8005c58 <HAL_RCC_OscConfig+0x478>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fd ff86 	bl	8003aa8 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fd ff82 	bl	8003aa8 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e087      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb2:	4b27      	ldr	r3, [pc, #156]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	019b      	lsls	r3, r3, #6
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	491b      	ldr	r1, [pc, #108]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <HAL_RCC_OscConfig+0x478>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bee:	f7fd ff5b 	bl	8003aa8 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fd ff57 	bl	8003aa8 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e05c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c08:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x416>
 8005c14:	e054      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <HAL_RCC_OscConfig+0x478>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7fd ff44 	bl	8003aa8 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fd ff40 	bl	8003aa8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e045      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_RCC_OscConfig+0x470>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x444>
 8005c42:	e03d      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e038      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <HAL_RCC_OscConfig+0x4ec>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d028      	beq.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d121      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d11a      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d111      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800

08005cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0cc      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b68      	ldr	r3, [pc, #416]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d90c      	bls.n	8005d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b65      	ldr	r3, [pc, #404]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b63      	ldr	r3, [pc, #396]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0b8      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d24:	4b59      	ldr	r3, [pc, #356]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a58      	ldr	r2, [pc, #352]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d3c:	4b53      	ldr	r3, [pc, #332]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4a52      	ldr	r2, [pc, #328]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b50      	ldr	r3, [pc, #320]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	494d      	ldr	r1, [pc, #308]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d044      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	4b47      	ldr	r3, [pc, #284]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d119      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e06f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e067      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dae:	4b37      	ldr	r3, [pc, #220]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4934      	ldr	r1, [pc, #208]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dc0:	f7fd fe72 	bl	8003aa8 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc8:	f7fd fe6e 	bl	8003aa8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e04f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	4b2b      	ldr	r3, [pc, #172]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 020c 	and.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1eb      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df0:	4b25      	ldr	r3, [pc, #148]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d20c      	bcs.n	8005e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b22      	ldr	r3, [pc, #136]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b20      	ldr	r3, [pc, #128]	@ (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e032      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e24:	4b19      	ldr	r3, [pc, #100]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4916      	ldr	r1, [pc, #88]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e42:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	490e      	ldr	r1, [pc, #56]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e56:	f000 f821 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	490a      	ldr	r1, [pc, #40]	@ (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005e68:	5ccb      	ldrb	r3, [r1, r3]
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	4a09      	ldr	r2, [pc, #36]	@ (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e72:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fd fdd2 	bl	8003a20 <HAL_InitTick>

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023c00 	.word	0x40023c00
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	0800eb68 	.word	0x0800eb68
 8005e94:	20000108 	.word	0x20000108
 8005e98:	20000124 	.word	0x20000124

08005e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea0:	b090      	sub	sp, #64	@ 0x40
 8005ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eac:	2300      	movs	r3, #0
 8005eae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb4:	4b59      	ldr	r3, [pc, #356]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 030c 	and.w	r3, r3, #12
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d00d      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x40>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	f200 80a1 	bhi.w	8006008 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ece:	e09b      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed0:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005ed4:	e09b      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed6:	4b53      	ldr	r3, [pc, #332]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005eda:	e098      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005edc:	4b4f      	ldr	r3, [pc, #316]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d028      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	2200      	movs	r2, #0
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f04:	2100      	movs	r1, #0
 8005f06:	4b47      	ldr	r3, [pc, #284]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f08:	fb03 f201 	mul.w	r2, r3, r1
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	fb00 f303 	mul.w	r3, r0, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	4a43      	ldr	r2, [pc, #268]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f16:	fba0 1202 	umull	r1, r2, r0, r2
 8005f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1c:	460a      	mov	r2, r1
 8005f1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f22:	4413      	add	r3, r2
 8005f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f28:	2200      	movs	r2, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	61fa      	str	r2, [r7, #28]
 8005f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f36:	f7fa f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4613      	mov	r3, r2
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f42:	e053      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f44:	4b35      	ldr	r3, [pc, #212]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	099b      	lsrs	r3, r3, #6
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	617a      	str	r2, [r7, #20]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f56:	f04f 0b00 	mov.w	fp, #0
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	f04f 0000 	mov.w	r0, #0
 8005f62:	f04f 0100 	mov.w	r1, #0
 8005f66:	0159      	lsls	r1, r3, #5
 8005f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f6c:	0150      	lsls	r0, r2, #5
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	ebb2 080a 	subs.w	r8, r2, sl
 8005f76:	eb63 090b 	sbc.w	r9, r3, fp
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f8e:	ebb2 0408 	subs.w	r4, r2, r8
 8005f92:	eb63 0509 	sbc.w	r5, r3, r9
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	00eb      	lsls	r3, r5, #3
 8005fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fa4:	00e2      	lsls	r2, r4, #3
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	461d      	mov	r5, r3
 8005faa:	eb14 030a 	adds.w	r3, r4, sl
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	eb45 030b 	adc.w	r3, r5, fp
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	028b      	lsls	r3, r1, #10
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fcc:	4621      	mov	r1, r4
 8005fce:	028a      	lsls	r2, r1, #10
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	60fa      	str	r2, [r7, #12]
 8005fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fe0:	f7fa f966 	bl	80002b0 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4613      	mov	r3, r2
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <HAL_RCC_GetSysClockFreq+0x180>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005ffc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006006:	e002      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x184>)
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800600c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006010:	4618      	mov	r0, r3
 8006012:	3740      	adds	r7, #64	@ 0x40
 8006014:	46bd      	mov	sp, r7
 8006016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800
 8006020:	00f42400 	.word	0x00f42400
 8006024:	018cba80 	.word	0x018cba80

08006028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800602c:	4b03      	ldr	r3, [pc, #12]	@ (800603c <HAL_RCC_GetHCLKFreq+0x14>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000108 	.word	0x20000108

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006044:	f7ff fff0 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0a9b      	lsrs	r3, r3, #10
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40023800 	.word	0x40023800
 8006064:	0800eb78 	.word	0x0800eb78

08006068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 001c 	add.w	r0, r7, #28
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800607a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800607e:	2b01      	cmp	r3, #1
 8006080:	d123      	bne.n	80060ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 faa0 	bl	8006604 <USB_CoreReset>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e01b      	b.n	8006102 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa94 	bl	8006604 <USB_CoreReset>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80060f4:	e005      	b.n	8006102 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006102:	7fbb      	ldrb	r3, [r7, #30]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d10b      	bne.n	8006120 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f043 0206 	orr.w	r2, r3, #6
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800612c:	b004      	add	sp, #16
 800612e:	4770      	bx	lr

08006130 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 0201 	bic.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d115      	bne.n	80061a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006180:	200a      	movs	r0, #10
 8006182:	f7fd fc9d 	bl	8003ac0 <HAL_Delay>
      ms += 10U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	330a      	adds	r3, #10
 800618a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa2b 	bl	80065e8 <USB_GetMode>
 8006192:	4603      	mov	r3, r0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d01e      	beq.n	80061d6 <USB_SetCurrentMode+0x84>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2bc7      	cmp	r3, #199	@ 0xc7
 800619c:	d9f0      	bls.n	8006180 <USB_SetCurrentMode+0x2e>
 800619e:	e01a      	b.n	80061d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d115      	bne.n	80061d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061b2:	200a      	movs	r0, #10
 80061b4:	f7fd fc84 	bl	8003ac0 <HAL_Delay>
      ms += 10U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	330a      	adds	r3, #10
 80061bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa12 	bl	80065e8 <USB_GetMode>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <USB_SetCurrentMode+0x84>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80061ce:	d9f0      	bls.n	80061b2 <USB_SetCurrentMode+0x60>
 80061d0:	e001      	b.n	80061d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e005      	b.n	80061e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80061da:	d101      	bne.n	80061e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ec:	b084      	sub	sp, #16
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	e009      	b.n	8006220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3340      	adds	r3, #64	@ 0x40
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	2200      	movs	r2, #0
 8006218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	3301      	adds	r3, #1
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b0e      	cmp	r3, #14
 8006224:	d9f2      	bls.n	800620c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800622a:	2b00      	cmp	r3, #0
 800622c:	d11c      	bne.n	8006268 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	639a      	str	r2, [r3, #56]	@ 0x38
 8006266:	e00b      	b.n	8006280 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800628c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006290:	2b01      	cmp	r3, #1
 8006292:	d10d      	bne.n	80062b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800629c:	2100      	movs	r1, #0
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f968 	bl	8006574 <USB_SetDevSpeed>
 80062a4:	e008      	b.n	80062b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062a6:	2101      	movs	r1, #1
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f963 	bl	8006574 <USB_SetDevSpeed>
 80062ae:	e003      	b.n	80062b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062b0:	2103      	movs	r1, #3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f95e 	bl	8006574 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062b8:	2110      	movs	r1, #16
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f8fa 	bl	80064b4 <USB_FlushTxFifo>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f924 	bl	8006518 <USB_FlushRxFifo>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e0:	461a      	mov	r2, r3
 80062e2:	2300      	movs	r3, #0
 80062e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ec:	461a      	mov	r2, r3
 80062ee:	2300      	movs	r3, #0
 80062f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f8:	461a      	mov	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	e043      	b.n	800638c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800631a:	d118      	bne.n	800634e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632e:	461a      	mov	r2, r3
 8006330:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e013      	b.n	8006360 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e008      	b.n	8006360 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635a:	461a      	mov	r2, r3
 800635c:	2300      	movs	r3, #0
 800635e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636c:	461a      	mov	r2, r3
 800636e:	2300      	movs	r3, #0
 8006370:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637e:	461a      	mov	r2, r3
 8006380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006390:	461a      	mov	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4293      	cmp	r3, r2
 8006396:	d3b5      	bcc.n	8006304 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	e043      	b.n	8006426 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b4:	d118      	bne.n	80063e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e013      	b.n	80063fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e008      	b.n	80063fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006406:	461a      	mov	r2, r3
 8006408:	2300      	movs	r3, #0
 800640a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006418:	461a      	mov	r2, r3
 800641a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800641e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3301      	adds	r3, #1
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800642a:	461a      	mov	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4293      	cmp	r3, r2
 8006430:	d3b5      	bcc.n	800639e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006444:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006452:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006458:	2b00      	cmp	r3, #0
 800645a:	d105      	bne.n	8006468 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f043 0210 	orr.w	r2, r3, #16
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <USB_DevInit+0x2c4>)
 800646e:	4313      	orrs	r3, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006474:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f043 0208 	orr.w	r2, r3, #8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006488:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800648c:	2b01      	cmp	r3, #1
 800648e:	d107      	bne.n	80064a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ac:	b004      	add	sp, #16
 80064ae:	4770      	bx	lr
 80064b0:	803c3800 	.word	0x803c3800

080064b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ce:	d901      	bls.n	80064d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e01b      	b.n	800650c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	daf2      	bge.n	80064c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	019b      	lsls	r3, r3, #6
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f8:	d901      	bls.n	80064fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e006      	b.n	800650c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b20      	cmp	r3, #32
 8006508:	d0f0      	beq.n	80064ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006530:	d901      	bls.n	8006536 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e018      	b.n	8006568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	daf2      	bge.n	8006524 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2210      	movs	r2, #16
 8006546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006554:	d901      	bls.n	800655a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e006      	b.n	8006568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b10      	cmp	r3, #16
 8006564:	d0f0      	beq.n	8006548 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006594:	4313      	orrs	r3, r2
 8006596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065c0:	f023 0303 	bic.w	r3, r3, #3
 80065c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0301 	and.w	r3, r3, #1
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800661c:	d901      	bls.n	8006622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e01b      	b.n	800665a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	daf2      	bge.n	8006610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006646:	d901      	bls.n	800664c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e006      	b.n	800665a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d0f0      	beq.n	800663a <USB_CoreReset+0x36>

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	22e8      	movs	r2, #232	@ 0xe8
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	4a30      	ldr	r2, [pc, #192]	@ (8006740 <_prep_out_transaction+0xd8>)
 8006680:	4413      	add	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	01db      	lsls	r3, r3, #7
 8006688:	4a2e      	ldr	r2, [pc, #184]	@ (8006744 <_prep_out_transaction+0xdc>)
 800668a:	4413      	add	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 800668e:	f002 f851 	bl	8008734 <tud_mounted>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <_prep_out_transaction+0x44>
 8006698:	f002 f85e 	bl	8008758 <tud_suspended>
 800669c:	4603      	mov	r3, r0
 800669e:	f083 0301 	eor.w	r3, r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <_prep_out_transaction+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <_prep_out_transaction+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80066b4:	f083 0301 	eor.w	r3, r3, #1
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <_prep_out_transaction+0x5e>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	78db      	ldrb	r3, [r3, #3]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <_prep_out_transaction+0x62>
 80066c6:	2300      	movs	r3, #0
 80066c8:	e035      	b.n	8006736 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3310      	adds	r3, #16
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 feab 	bl	800842a <tu_fifo_remaining>
 80066d4:	4603      	mov	r3, r0
 80066d6:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80066d8:	897b      	ldrh	r3, [r7, #10]
 80066da:	2b3f      	cmp	r3, #63	@ 0x3f
 80066dc:	d801      	bhi.n	80066e2 <_prep_out_transaction+0x7a>
 80066de:	2300      	movs	r3, #0
 80066e0:	e029      	b.n	8006736 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	78da      	ldrb	r2, [r3, #3]
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f003 fb44 	bl	8009d78 <usbd_edpt_claim>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f083 0301 	eor.w	r3, r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <_prep_out_transaction+0x98>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e01a      	b.n	8006736 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3310      	adds	r3, #16
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fe90 	bl	800842a <tu_fifo_remaining>
 800670a:	4603      	mov	r3, r0
 800670c:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 800670e:	897b      	ldrh	r3, [r7, #10]
 8006710:	2b3f      	cmp	r3, #63	@ 0x3f
 8006712:	d908      	bls.n	8006726 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	78d9      	ldrb	r1, [r3, #3]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	7df8      	ldrb	r0, [r7, #23]
 800671c:	2340      	movs	r3, #64	@ 0x40
 800671e:	f003 fb7b 	bl	8009e18 <usbd_edpt_xfer>
 8006722:	4603      	mov	r3, r0
 8006724:	e007      	b.n	8006736 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	78da      	ldrb	r2, [r3, #3]
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f003 fb4a 	bl	8009dc8 <usbd_edpt_release>
    return false;
 8006734:	2300      	movs	r3, #0
  }
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000f4c 	.word	0x20000f4c
 8006744:	20001034 	.word	0x20001034

08006748 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
 8006752:	f001 ffef 	bl	8008734 <tud_mounted>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <tud_cdc_n_connected+0x28>
 800675c:	f001 fffc 	bl	8008758 <tud_suspended>
 8006760:	4603      	mov	r3, r0
 8006762:	f083 0301 	eor.w	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <tud_cdc_n_connected+0x28>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <tud_cdc_n_connected+0x2a>
 8006770:	2300      	movs	r3, #0
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006778:	2b00      	cmp	r3, #0
 800677a:	d019      	beq.n	80067b0 <tud_cdc_n_connected+0x68>
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	4a10      	ldr	r2, [pc, #64]	@ (80067c0 <tud_cdc_n_connected+0x78>)
 8006780:	21e8      	movs	r1, #232	@ 0xe8
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	3304      	adds	r3, #4
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	2300      	movs	r3, #0
 8006790:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	fa22 f303 	lsr.w	r3, r2, r3
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bf14      	ite	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	2300      	moveq	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <tud_cdc_n_connected+0x68>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <tud_cdc_n_connected+0x6a>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20000f4c 	.word	0x20000f4c

080067c4 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	22e8      	movs	r2, #232	@ 0xe8
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	3310      	adds	r3, #16
 80067d8:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <tud_cdc_n_available+0x28>)
 80067da:	4413      	add	r3, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fdaf 	bl	8008340 <tu_fifo_count>
 80067e2:	4603      	mov	r3, r0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000f4c 	.word	0x20000f4c

080067f0 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	22e8      	movs	r2, #232	@ 0xe8
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	4a0f      	ldr	r2, [pc, #60]	@ (8006844 <tud_cdc_n_read+0x54>)
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f103 0010 	add.w	r0, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006818:	4293      	cmp	r3, r2
 800681a:	d802      	bhi.n	8006822 <tud_cdc_n_read+0x32>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	b29b      	uxth	r3, r3
 8006820:	e001      	b.n	8006826 <tud_cdc_n_read+0x36>
 8006822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006826:	461a      	mov	r2, r3
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	f001 fe5a 	bl	80084e2 <tu_fifo_read_n>
 800682e:	4603      	mov	r3, r0
 8006830:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff17 	bl	8006668 <_prep_out_transaction>
  return num_read;
 800683a:	693b      	ldr	r3, [r7, #16]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000f4c 	.word	0x20000f4c

08006848 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	22e8      	movs	r2, #232	@ 0xe8
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	4a13      	ldr	r2, [pc, #76]	@ (80068ac <tud_cdc_n_write+0x64>)
 8006860:	4413      	add	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f103 001c 	add.w	r0, r3, #28
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006870:	4293      	cmp	r3, r2
 8006872:	d802      	bhi.n	800687a <tud_cdc_n_write+0x32>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	b29b      	uxth	r3, r3
 8006878:	e001      	b.n	800687e <tud_cdc_n_write+0x36>
 800687a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800687e:	461a      	mov	r2, r3
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	f001 fe95 	bl	80085b0 <tu_fifo_write_n>
 8006886:	4603      	mov	r3, r0
 8006888:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	331c      	adds	r3, #28
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fd56 	bl	8008340 <tu_fifo_count>
 8006894:	4603      	mov	r3, r0
 8006896:	2b3f      	cmp	r3, #63	@ 0x3f
 8006898:	d903      	bls.n	80068a2 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f807 	bl	80068b0 <tud_cdc_n_write_flush>
  }

  return wr_count;
 80068a2:	8a7b      	ldrh	r3, [r7, #18]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000f4c 	.word	0x20000f4c

080068b0 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	22e8      	movs	r2, #232	@ 0xe8
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	4a39      	ldr	r2, [pc, #228]	@ (80069a8 <tud_cdc_n_write_flush+0xf8>)
 80068c4:	4413      	add	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	01db      	lsls	r3, r3, #7
 80068cc:	4a37      	ldr	r2, [pc, #220]	@ (80069ac <tud_cdc_n_write_flush+0xfc>)
 80068ce:	4413      	add	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	f001 ff2f 	bl	8008734 <tud_mounted>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <tud_cdc_n_write_flush+0x40>
 80068dc:	f001 ff3c 	bl	8008758 <tud_suspended>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <tud_cdc_n_write_flush+0x40>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <tud_cdc_n_write_flush+0x42>
 80068f0:	2300      	movs	r3, #0
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 80068f8:	f083 0301 	eor.w	r3, r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <tud_cdc_n_write_flush+0x56>
 8006902:	2300      	movs	r3, #0
 8006904:	e04c      	b.n	80069a0 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	331c      	adds	r3, #28
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fd18 	bl	8008340 <tu_fifo_count>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006916:	2300      	movs	r3, #0
 8006918:	e042      	b.n	80069a0 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	789a      	ldrb	r2, [r3, #2]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f003 fa26 	bl	8009d78 <usbd_edpt_claim>
 800692c:	4603      	mov	r3, r0
 800692e:	f083 0301 	eor.w	r3, r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <tud_cdc_n_write_flush+0x8c>
 8006938:	2300      	movs	r3, #0
 800693a:	e031      	b.n	80069a0 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f103 001c 	add.w	r0, r3, #28
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3340      	adds	r3, #64	@ 0x40
 8006946:	2240      	movs	r2, #64	@ 0x40
 8006948:	4619      	mov	r1, r3
 800694a:	f001 fdca 	bl	80084e2 <tu_fifo_read_n>
 800694e:	4603      	mov	r3, r0
 8006950:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006952:	89bb      	ldrh	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01b      	beq.n	8006990 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	7899      	ldrb	r1, [r3, #2]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	7bf8      	ldrb	r0, [r7, #15]
 8006966:	f003 fa57 	bl	8009e18 <usbd_edpt_xfer>
 800696a:	4603      	mov	r3, r0
 800696c:	f083 0301 	eor.w	r3, r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <tud_cdc_n_write_flush+0xdc>
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <tud_cdc_n_write_flush+0x100>)
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d000      	beq.n	8006988 <tud_cdc_n_write_flush+0xd8>
 8006986:	be00      	bkpt	0x0000
 8006988:	2300      	movs	r3, #0
 800698a:	e009      	b.n	80069a0 <tud_cdc_n_write_flush+0xf0>
    return count;
 800698c:	89bb      	ldrh	r3, [r7, #12]
 800698e:	e007      	b.n	80069a0 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	789a      	ldrb	r2, [r3, #2]
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f003 fa15 	bl	8009dc8 <usbd_edpt_release>
    return 0;
 800699e:	2300      	movs	r3, #0
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000f4c 	.word	0x20000f4c
 80069ac:	20001034 	.word	0x20001034
 80069b0:	e000edf0 	.word	0xe000edf0

080069b4 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	22e8      	movs	r2, #232	@ 0xe8
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	3318      	adds	r3, #24
 80069c8:	4a05      	ldr	r2, [pc, #20]	@ (80069e0 <tud_cdc_n_write_available+0x2c>)
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fd2b 	bl	800842a <tu_fifo_remaining>
 80069d4:	4603      	mov	r3, r0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000f4c 	.word	0x20000f4c

080069e4 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80069ea:	22e8      	movs	r2, #232	@ 0xe8
 80069ec:	2100      	movs	r1, #0
 80069ee:	4824      	ldr	r0, [pc, #144]	@ (8006a80 <cdcd_init+0x9c>)
 80069f0:	f006 f813 	bl	800ca1a <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80069f4:	2300      	movs	r3, #0
 80069f6:	71fb      	strb	r3, [r7, #7]
 80069f8:	e03a      	b.n	8006a70 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	22e8      	movs	r2, #232	@ 0xe8
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	4a1f      	ldr	r2, [pc, #124]	@ (8006a80 <cdcd_init+0x9c>)
 8006a04:	4413      	add	r3, r2
 8006a06:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	22ff      	movs	r2, #255	@ 0xff
 8006a0c:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006a14:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f103 0010 	add.w	r0, r3, #16
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006a34:	2300      	movs	r3, #0
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2301      	movs	r3, #1
 8006a3a:	2240      	movs	r2, #64	@ 0x40
 8006a3c:	f000 ffee 	bl	8007a1c <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f103 001c 	add.w	r0, r3, #28
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <cdcd_init+0xa0>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bf14      	ite	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	2300      	moveq	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	2301      	movs	r3, #1
 8006a64:	2280      	movs	r2, #128	@ 0x80
 8006a66:	f000 ffd9 	bl	8007a1c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	71fb      	strb	r3, [r7, #7]
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0c1      	beq.n	80069fa <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000f4c 	.word	0x20000f4c
 8006a84:	2000012c 	.word	0x2000012c

08006a88 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006a8c:	2301      	movs	r3, #1
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	e037      	b.n	8006b18 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	22e8      	movs	r2, #232	@ 0xe8
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b28 <cdcd_reset+0x90>)
 8006ab2:	4413      	add	r3, r2
 8006ab4:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006ab6:	2205      	movs	r2, #5
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f005 ffad 	bl	800ca1a <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <cdcd_reset+0x94>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3310      	adds	r3, #16
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 fd90 	bl	80085f8 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006ad8:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <cdcd_reset+0x94>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	331c      	adds	r3, #28
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fd84 	bl	80085f8 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f103 021c 	add.w	r2, r3, #28
 8006af6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <cdcd_reset+0x94>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bf14      	ite	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	2300      	moveq	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f001 fd84 	bl	800861a <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	3301      	adds	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c4      	beq.n	8006aa8 <cdcd_reset+0x10>
  }
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000f4c 	.word	0x20000f4c
 8006b2c:	2000012c 	.word	0x2000012c

08006b30 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b09a      	sub	sp, #104	@ 0x68
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	795b      	ldrb	r3, [r3, #5]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d103      	bne.n	8006b50 <cdcd_open+0x20>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	799b      	ldrb	r3, [r3, #6]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d001      	beq.n	8006b54 <cdcd_open+0x24>
 8006b50:	2300      	movs	r3, #0
 8006b52:	e0da      	b.n	8006d0a <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006b5a:	e010      	b.n	8006b7e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006b5c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b60:	22e8      	movs	r2, #232	@ 0xe8
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	4a6b      	ldr	r2, [pc, #428]	@ (8006d14 <cdcd_open+0x1e4>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b6e:	789b      	ldrb	r3, [r3, #2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006b74:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006b7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0ea      	beq.n	8006b5c <cdcd_open+0x2c>
 8006b86:	e000      	b.n	8006b8a <cdcd_open+0x5a>
      break;
 8006b88:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8006b8a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <cdcd_open+0x78>
 8006b92:	4b61      	ldr	r3, [pc, #388]	@ (8006d18 <cdcd_open+0x1e8>)
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d000      	beq.n	8006ba4 <cdcd_open+0x74>
 8006ba2:	be00      	bkpt	0x0000
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e0b0      	b.n	8006d0a <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	789a      	ldrb	r2, [r3, #2]
 8006bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bae:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006bb0:	2309      	movs	r3, #9
 8006bb2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8006bc8:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006bca:	e013      	b.n	8006bf4 <cdcd_open+0xc4>
 8006bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bce:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006bfe:	2b24      	cmp	r3, #36	@ 0x24
 8006c00:	d104      	bne.n	8006c0c <cdcd_open+0xdc>
 8006c02:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d9df      	bls.n	8006bcc <cdcd_open+0x9c>
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	3301      	adds	r3, #1
 8006c14:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d12f      	bne.n	8006c7a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c1c:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c22:	4618      	mov	r0, r3
 8006c24:	f003 f862 	bl	8009cec <usbd_edpt_open>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f083 0301 	eor.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <cdcd_open+0x11a>
 8006c34:	4b38      	ldr	r3, [pc, #224]	@ (8006d18 <cdcd_open+0x1e8>)
 8006c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d000      	beq.n	8006c46 <cdcd_open+0x116>
 8006c44:	be00      	bkpt	0x0000
 8006c46:	2300      	movs	r3, #0
 8006c48:	e05f      	b.n	8006d0a <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c4c:	789a      	ldrb	r2, [r3, #2]
 8006c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c50:	705a      	strb	r2, [r3, #1]
 8006c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c54:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006c60:	4413      	add	r3, r2
 8006c62:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c7c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3301      	adds	r3, #1
 8006c82:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d139      	bne.n	8006cfc <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8006c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8a:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006c8c:	2b0a      	cmp	r3, #10
 8006c8e:	d135      	bne.n	8006cfc <cdcd_open+0x1cc>
 8006c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c92:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca6:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006cb6:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8006cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cba:	3303      	adds	r3, #3
 8006cbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006cbe:	3202      	adds	r2, #2
 8006cc0:	79f8      	ldrb	r0, [r7, #7]
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	2202      	movs	r2, #2
 8006cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ccc:	f002 ffa6 	bl	8009c1c <usbd_open_edpt_pair>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f083 0301 	eor.w	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <cdcd_open+0x1c2>
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d18 <cdcd_open+0x1e8>)
 8006cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d000      	beq.n	8006cee <cdcd_open+0x1be>
 8006cec:	be00      	bkpt	0x0000
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e00b      	b.n	8006d0a <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8006cf2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006cf6:	330e      	adds	r3, #14
 8006cf8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8006cfc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fcb1 	bl	8006668 <_prep_out_transaction>

  return drv_len;
 8006d06:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3760      	adds	r7, #96	@ 0x60
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000f4c 	.word	0x20000f4c
 8006d18:	e000edf0 	.word	0xe000edf0

08006d1c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	@ 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	603a      	str	r2, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d001      	beq.n	8006d3e <cdcd_control_xfer_cb+0x22>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e0e6      	b.n	8006f0c <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d44:	e014      	b.n	8006d70 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8006d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d4a:	22e8      	movs	r2, #232	@ 0xe8
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	4a70      	ldr	r2, [pc, #448]	@ (8006f14 <cdcd_control_xfer_cb+0x1f8>)
 8006d52:	4413      	add	r3, r2
 8006d54:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	889b      	ldrh	r3, [r3, #4]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d009      	beq.n	8006d7a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0e6      	beq.n	8006d46 <cdcd_control_xfer_cb+0x2a>
 8006d78:	e000      	b.n	8006d7c <cdcd_control_xfer_cb+0x60>
      break;
 8006d7a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <cdcd_control_xfer_cb+0x6c>
 8006d84:	2300      	movs	r3, #0
 8006d86:	e0c1      	b.n	8006f0c <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	3b20      	subs	r3, #32
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	f200 80b2 	bhi.w	8006ef8 <cdcd_control_xfer_cb+0x1dc>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <cdcd_control_xfer_cb+0x80>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006de9 	.word	0x08006de9
 8006da4:	08006e03 	.word	0x08006e03
 8006da8:	08006ec7 	.word	0x08006ec7
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006dac:	79bb      	ldrb	r3, [r7, #6]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d108      	bne.n	8006dc4 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	f103 0208 	add.w	r2, r3, #8
 8006db8:	79f8      	ldrb	r0, [r7, #7]
 8006dba:	2307      	movs	r3, #7
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	f003 fa13 	bl	800a1e8 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8006dc2:	e09b      	b.n	8006efc <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006dc4:	79bb      	ldrb	r3, [r7, #6]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	f040 8098 	bne.w	8006efc <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8006dcc:	4b52      	ldr	r3, [pc, #328]	@ (8006f18 <cdcd_control_xfer_cb+0x1fc>)
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8094 	beq.w	8006efc <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f3af 8000 	nop.w
      break;
 8006de6:	e089      	b.n	8006efc <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006de8:	79bb      	ldrb	r3, [r7, #6]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	f040 8088 	bne.w	8006f00 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f103 0208 	add.w	r2, r3, #8
 8006df6:	79f8      	ldrb	r0, [r7, #7]
 8006df8:	2307      	movs	r3, #7
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	f003 f9f4 	bl	800a1e8 <tud_control_xfer>
      }
      break;
 8006e00:	e07e      	b.n	8006f00 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8006e02:	79bb      	ldrb	r3, [r7, #6]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f003 f979 	bl	800a104 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8006e12:	e077      	b.n	8006f04 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006e14:	79bb      	ldrb	r3, [r7, #6]
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d174      	bne.n	8006f04 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	885b      	ldrh	r3, [r3, #2]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2301      	movne	r3, #1
 8006e38:	2300      	moveq	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	885b      	ldrh	r3, [r3, #2]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f1c <cdcd_control_xfer_cb+0x200>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d013      	beq.n	8006ea4 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	f103 021c 	add.w	r2, r3, #28
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f083 0301 	eor.w	r3, r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f001 fbbc 	bl	800861a <tu_fifo_set_overwritable>
 8006ea2:	e005      	b.n	8006eb0 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	331c      	adds	r3, #28
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fbb5 	bl	800861a <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <cdcd_control_xfer_cb+0x204>)
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d026      	beq.n	8006f04 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8006eb6:	7fba      	ldrb	r2, [r7, #30]
 8006eb8:	7ff9      	ldrb	r1, [r7, #31]
 8006eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fa fa48 	bl	8001354 <tud_cdc_line_state_cb>
      break;
 8006ec4:	e01e      	b.n	8006f04 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8006ec6:	79bb      	ldrb	r3, [r7, #6]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d105      	bne.n	8006ed8 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f003 f917 	bl	800a104 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8006ed6:	e017      	b.n	8006f08 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006ed8:	79bb      	ldrb	r3, [r7, #6]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d114      	bne.n	8006f08 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 8006ede:	4b11      	ldr	r3, [pc, #68]	@ (8006f24 <cdcd_control_xfer_cb+0x208>)
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d011      	beq.n	8006f08 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f3af 8000 	nop.w
      break;
 8006ef6:	e007      	b.n	8006f08 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e007      	b.n	8006f0c <cdcd_control_xfer_cb+0x1f0>
      break;
 8006efc:	bf00      	nop
 8006efe:	e004      	b.n	8006f0a <cdcd_control_xfer_cb+0x1ee>
      break;
 8006f00:	bf00      	nop
 8006f02:	e002      	b.n	8006f0a <cdcd_control_xfer_cb+0x1ee>
      break;
 8006f04:	bf00      	nop
 8006f06:	e000      	b.n	8006f0a <cdcd_control_xfer_cb+0x1ee>
      break;
 8006f08:	bf00      	nop
  }

  return true;
 8006f0a:	2301      	movs	r3, #1
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3728      	adds	r7, #40	@ 0x28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000f4c 	.word	0x20000f4c
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	2000012c 	.word	0x2000012c
 8006f20:	08001355 	.word	0x08001355
 8006f24:	00000000 	.word	0x00000000

08006f28 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4603      	mov	r3, r0
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	460b      	mov	r3, r1
 8006f36:	71bb      	strb	r3, [r7, #6]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e013      	b.n	8006f6a <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8006f42:	7ffb      	ldrb	r3, [r7, #31]
 8006f44:	22e8      	movs	r2, #232	@ 0xe8
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80070c8 <cdcd_xfer_cb+0x1a0>)
 8006f4c:	4413      	add	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	78db      	ldrb	r3, [r3, #3]
 8006f54:	79ba      	ldrb	r2, [r7, #6]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00a      	beq.n	8006f70 <cdcd_xfer_cb+0x48>
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	789b      	ldrb	r3, [r3, #2]
 8006f5e:	79ba      	ldrb	r2, [r7, #6]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d005      	beq.n	8006f70 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	3301      	adds	r3, #1
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	7ffb      	ldrb	r3, [r7, #31]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0e8      	beq.n	8006f42 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8006f70:	7ffb      	ldrb	r3, [r7, #31]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <cdcd_xfer_cb+0x64>
 8006f76:	4b55      	ldr	r3, [pc, #340]	@ (80070cc <cdcd_xfer_cb+0x1a4>)
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d000      	beq.n	8006f88 <cdcd_xfer_cb+0x60>
 8006f86:	be00      	bkpt	0x0000
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e098      	b.n	80070be <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006f8c:	7ffb      	ldrb	r3, [r7, #31]
 8006f8e:	01db      	lsls	r3, r3, #7
 8006f90:	4a4f      	ldr	r2, [pc, #316]	@ (80070d0 <cdcd_xfer_cb+0x1a8>)
 8006f92:	4413      	add	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	79ba      	ldrb	r2, [r7, #6]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d148      	bne.n	8007032 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	6939      	ldr	r1, [r7, #16]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 fb00 	bl	80085b0 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8006fb0:	4b48      	ldr	r3, [pc, #288]	@ (80070d4 <cdcd_xfer_cb+0x1ac>)
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d027      	beq.n	8007006 <cdcd_xfer_cb+0xde>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	2bff      	cmp	r3, #255	@ 0xff
 8006fbc:	d023      	beq.n	8007006 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e01c      	b.n	8006ffe <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	795a      	ldrb	r2, [r3, #5]
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	440b      	add	r3, r1
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d111      	bne.n	8006ff8 <cdcd_xfer_cb+0xd0>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	3310      	adds	r3, #16
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 f9e3 	bl	80083a4 <tu_fifo_empty>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f083 0301 	eor.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	795a      	ldrb	r2, [r3, #5]
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d3de      	bcc.n	8006fc4 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8007006:	4b34      	ldr	r3, [pc, #208]	@ (80070d8 <cdcd_xfer_cb+0x1b0>)
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <cdcd_xfer_cb+0x102>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	3310      	adds	r3, #16
 8007010:	4618      	mov	r0, r3
 8007012:	f001 f9c7 	bl	80083a4 <tu_fifo_empty>
 8007016:	4603      	mov	r3, r0
 8007018:	f083 0301 	eor.w	r3, r3, #1
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	4618      	mov	r0, r3
 8007026:	f7fa f9c1 	bl	80013ac <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800702a:	7ffb      	ldrb	r3, [r7, #31]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fb1b 	bl	8006668 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	789b      	ldrb	r3, [r3, #2]
 8007036:	79ba      	ldrb	r2, [r7, #6]
 8007038:	429a      	cmp	r2, r3
 800703a:	d13f      	bne.n	80070bc <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 800703c:	4b27      	ldr	r3, [pc, #156]	@ (80070dc <cdcd_xfer_cb+0x1b4>)
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8007042:	7ffb      	ldrb	r3, [r7, #31]
 8007044:	4618      	mov	r0, r3
 8007046:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800704a:	7ffb      	ldrb	r3, [r7, #31]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fc2f 	bl	80068b0 <tud_cdc_n_write_flush>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d131      	bne.n	80070bc <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	331c      	adds	r3, #28
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f96f 	bl	8008340 <tu_fifo_count>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d129      	bne.n	80070bc <cdcd_xfer_cb+0x194>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d026      	beq.n	80070bc <cdcd_xfer_cb+0x194>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d121      	bne.n	80070bc <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	789a      	ldrb	r2, [r3, #2]
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	4611      	mov	r1, r2
 8007080:	4618      	mov	r0, r3
 8007082:	f002 fe79 	bl	8009d78 <usbd_edpt_claim>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d017      	beq.n	80070bc <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	7899      	ldrb	r1, [r3, #2]
 8007090:	79f8      	ldrb	r0, [r7, #7]
 8007092:	2300      	movs	r3, #0
 8007094:	2200      	movs	r2, #0
 8007096:	f002 febf 	bl	8009e18 <usbd_edpt_xfer>
 800709a:	4603      	mov	r3, r0
 800709c:	f083 0301 	eor.w	r3, r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <cdcd_xfer_cb+0x194>
 80070a6:	4b09      	ldr	r3, [pc, #36]	@ (80070cc <cdcd_xfer_cb+0x1a4>)
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d000      	beq.n	80070b8 <cdcd_xfer_cb+0x190>
 80070b6:	be00      	bkpt	0x0000
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80070bc:	2301      	movs	r3, #1
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000f4c 	.word	0x20000f4c
 80070cc:	e000edf0 	.word	0xe000edf0
 80070d0:	20001034 	.word	0x20001034
 80070d4:	00000000 	.word	0x00000000
 80070d8:	080013ad 	.word	0x080013ad
 80070dc:	00000000 	.word	0x00000000

080070e0 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	460a      	mov	r2, r1
 80070ea:	71fb      	strb	r3, [r7, #7]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80070f0:	2301      	movs	r3, #1
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	603a      	str	r2, [r7, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	4603      	mov	r3, r0
 800710a:	71fb      	strb	r3, [r7, #7]
 800710c:	460b      	mov	r3, r1
 800710e:	71bb      	strb	r3, [r7, #6]
 8007110:	4613      	mov	r3, r2
 8007112:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800712e:	79fa      	ldrb	r2, [r7, #7]
 8007130:	491b      	ldr	r1, [pc, #108]	@ (80071a0 <tud_hid_n_ready+0x80>)
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	3301      	adds	r3, #1
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	73bb      	strb	r3, [r7, #14]
 8007142:	f001 faf7 	bl	8008734 <tud_mounted>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <tud_hid_n_ready+0x40>
 800714c:	f001 fb04 	bl	8008758 <tud_suspended>
 8007150:	4603      	mov	r3, r0
 8007152:	f083 0301 	eor.w	r3, r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <tud_hid_n_ready+0x40>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <tud_hid_n_ready+0x42>
 8007160:	2300      	movs	r3, #0
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <tud_hid_n_ready+0x6e>
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <tud_hid_n_ready+0x6e>
 8007172:	7bba      	ldrb	r2, [r7, #14]
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	4611      	mov	r1, r2
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fec3 	bl	8009f04 <usbd_edpt_busy>
 800717e:	4603      	mov	r3, r0
 8007180:	f083 0301 	eor.w	r3, r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <tud_hid_n_ready+0x6e>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <tud_hid_n_ready+0x70>
 800718e:	2300      	movs	r3, #0
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	b2db      	uxtb	r3, r3
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200010b4 	.word	0x200010b4

080071a4 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08e      	sub	sp, #56	@ 0x38
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	603a      	str	r2, [r7, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
 80071b2:	460b      	mov	r3, r1
 80071b4:	71bb      	strb	r3, [r7, #6]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <tud_hid_n_report+0x20>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e06d      	b.n	80072a0 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80071ca:	79fa      	ldrb	r2, [r7, #7]
 80071cc:	4613      	mov	r3, r2
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4a34      	ldr	r2, [pc, #208]	@ (80072a8 <tud_hid_n_report+0x104>)
 80071d6:	4413      	add	r3, r2
 80071d8:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80071da:	79fa      	ldrb	r2, [r7, #7]
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	4a31      	ldr	r2, [pc, #196]	@ (80072ac <tud_hid_n_report+0x108>)
 80071e6:	4413      	add	r3, r2
 80071e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	785a      	ldrb	r2, [r3, #1]
 80071ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f002 fdbf 	bl	8009d78 <usbd_edpt_claim>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f083 0301 	eor.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <tud_hid_n_report+0x66>
 8007206:	2300      	movs	r3, #0
 8007208:	e04a      	b.n	80072a0 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 800720a:	79bb      	ldrb	r3, [r7, #6]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d021      	beq.n	8007254 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	79ba      	ldrb	r2, [r7, #6]
 8007214:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	3310      	adds	r3, #16
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	88bb      	ldrh	r3, [r7, #4]
 800721e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007220:	220f      	movs	r2, #15
 8007222:	627a      	str	r2, [r7, #36]	@ 0x24
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	623a      	str	r2, [r7, #32]
 8007228:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 800722a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d202      	bcs.n	8007238 <tud_hid_n_report+0x94>
    return -1;
 8007232:	f04f 33ff 	mov.w	r3, #4294967295
 8007236:	e005      	b.n	8007244 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	6a39      	ldr	r1, [r7, #32]
 800723c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800723e:	f005 fcc4 	bl	800cbca <memcpy>
  return 0;
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <tud_hid_n_report+0xa8>
 8007248:	2300      	movs	r3, #0
 800724a:	e029      	b.n	80072a0 <tud_hid_n_report+0xfc>
    len++;
 800724c:	88bb      	ldrh	r3, [r7, #4]
 800724e:	3301      	adds	r3, #1
 8007250:	80bb      	strh	r3, [r7, #4]
 8007252:	e01a      	b.n	800728a <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8007254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007256:	f103 0210 	add.w	r2, r3, #16
 800725a:	88bb      	ldrh	r3, [r7, #4]
 800725c:	61ba      	str	r2, [r7, #24]
 800725e:	2210      	movs	r2, #16
 8007260:	617a      	str	r2, [r7, #20]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	613a      	str	r2, [r7, #16]
 8007266:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d202      	bcs.n	8007276 <tud_hid_n_report+0xd2>
    return -1;
 8007270:	f04f 33ff 	mov.w	r3, #4294967295
 8007274:	e005      	b.n	8007282 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	6939      	ldr	r1, [r7, #16]
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f005 fca5 	bl	800cbca <memcpy>
  return 0;
 8007280:	2300      	movs	r3, #0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <tud_hid_n_report+0xe6>
 8007286:	2300      	movs	r3, #0
 8007288:	e00a      	b.n	80072a0 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	7859      	ldrb	r1, [r3, #1]
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	f103 0210 	add.w	r2, r3, #16
 8007294:	88bb      	ldrh	r3, [r7, #4]
 8007296:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800729a:	f002 fdbd 	bl	8009e18 <usbd_edpt_xfer>
 800729e:	4603      	mov	r3, r0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3738      	adds	r7, #56	@ 0x38
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	200010b4 	.word	0x200010b4
 80072ac:	200010c0 	.word	0x200010c0

080072b0 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	71fb      	strb	r3, [r7, #7]
 80072bc:	460b      	mov	r3, r1
 80072be:	71bb      	strb	r3, [r7, #6]
 80072c0:	4613      	mov	r3, r2
 80072c2:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80072c4:	797b      	ldrb	r3, [r7, #5]
 80072c6:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f107 030a 	add.w	r3, r7, #10
 80072d8:	6811      	ldr	r1, [r2, #0]
 80072da:	6019      	str	r1, [r3, #0]
 80072dc:	8892      	ldrh	r2, [r2, #4]
 80072de:	809a      	strh	r2, [r3, #4]
 80072e0:	e007      	b.n	80072f2 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80072e2:	f107 0308 	add.w	r3, r7, #8
 80072e6:	3302      	adds	r3, #2
 80072e8:	2206      	movs	r2, #6
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f005 fb94 	bl	800ca1a <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80072f2:	f107 0208 	add.w	r2, r7, #8
 80072f6:	79b9      	ldrb	r1, [r7, #6]
 80072f8:	79f8      	ldrb	r0, [r7, #7]
 80072fa:	2308      	movs	r3, #8
 80072fc:	f7ff ff52 	bl	80071a4 <tud_hid_n_report>
 8007300:	4603      	mov	r3, r0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 800730a:	b580      	push	{r7, lr}
 800730c:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800730e:	2000      	movs	r0, #0
 8007310:	f000 f80a 	bl	8007328 <hidd_reset>
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}

08007318 <hidd_deinit>:

bool hidd_deinit(void) {
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return true;
 800731c:	2301      	movs	r3, #1
}
 800731e:	4618      	mov	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8007332:	220c      	movs	r2, #12
 8007334:	2100      	movs	r1, #0
 8007336:	4803      	ldr	r0, [pc, #12]	@ (8007344 <hidd_reset+0x1c>)
 8007338:	f005 fb6f 	bl	800ca1a <memset>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	200010b4 	.word	0x200010b4

08007348 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b094      	sub	sp, #80	@ 0x50
 800734c:	af02      	add	r7, sp, #8
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
 8007354:	4613      	mov	r3, r2
 8007356:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	795b      	ldrb	r3, [r3, #5]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d001      	beq.n	8007364 <hidd_open+0x1c>
 8007360:	2300      	movs	r3, #0
 8007362:	e0ce      	b.n	8007502 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	461a      	mov	r2, r3
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007370:	3312      	adds	r3, #18
 8007372:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8007376:	88ba      	ldrh	r2, [r7, #4]
 8007378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800737c:	429a      	cmp	r2, r3
 800737e:	d20a      	bcs.n	8007396 <hidd_open+0x4e>
 8007380:	4b62      	ldr	r3, [pc, #392]	@ (800750c <hidd_open+0x1c4>)
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d000      	beq.n	8007392 <hidd_open+0x4a>
 8007390:	be00      	bkpt	0x0000
 8007392:	2300      	movs	r3, #0
 8007394:	e0b5      	b.n	8007502 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007396:	2300      	movs	r3, #0
 8007398:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739c:	e011      	b.n	80073c2 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800739e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80073a2:	4613      	mov	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4a59      	ldr	r2, [pc, #356]	@ (8007510 <hidd_open+0x1c8>)
 80073ac:	4413      	add	r3, r2
 80073ae:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 80073b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80073b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073bc:	3301      	adds	r3, #1
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0e9      	beq.n	800739e <hidd_open+0x56>
 80073ca:	e000      	b.n	80073ce <hidd_open+0x86>
      break;
 80073cc:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80073ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <hidd_open+0xa4>
 80073d6:	4b4d      	ldr	r3, [pc, #308]	@ (800750c <hidd_open+0x1c4>)
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d000      	beq.n	80073e8 <hidd_open+0xa0>
 80073e6:	be00      	bkpt	0x0000
 80073e8:	2300      	movs	r3, #0
 80073ea:	e08a      	b.n	8007502 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80073ec:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80073f0:	4613      	mov	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	4a46      	ldr	r2, [pc, #280]	@ (8007514 <hidd_open+0x1cc>)
 80073fa:	4413      	add	r3, r2
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	3301      	adds	r3, #1
 800741e:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8007420:	2b21      	cmp	r3, #33	@ 0x21
 8007422:	d00a      	beq.n	800743a <hidd_open+0xf2>
 8007424:	4b39      	ldr	r3, [pc, #228]	@ (800750c <hidd_open+0x1c4>)
 8007426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d000      	beq.n	8007436 <hidd_open+0xee>
 8007434:	be00      	bkpt	0x0000
 8007436:	2300      	movs	r3, #0
 8007438:	e063      	b.n	8007502 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 800743a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	7919      	ldrb	r1, [r3, #4]
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	3302      	adds	r3, #2
 800745c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745e:	3201      	adds	r2, #1
 8007460:	79f8      	ldrb	r0, [r7, #7]
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2303      	movs	r3, #3
 8007468:	460a      	mov	r2, r1
 800746a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800746c:	f002 fbd6 	bl	8009c1c <usbd_open_edpt_pair>
 8007470:	4603      	mov	r3, r0
 8007472:	f083 0301 	eor.w	r3, r3, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <hidd_open+0x14a>
 800747c:	4b23      	ldr	r3, [pc, #140]	@ (800750c <hidd_open+0x1c4>)
 800747e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d000      	beq.n	800748e <hidd_open+0x146>
 800748c:	be00      	bkpt	0x0000
 800748e:	2300      	movs	r3, #0
 8007490:	e037      	b.n	8007502 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	799b      	ldrb	r3, [r3, #6]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d103      	bne.n	80074a2 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	79da      	ldrb	r2, [r3, #7]
 800749e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a0:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80074a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a4:	2201      	movs	r2, #1
 80074a6:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	789a      	ldrb	r2, [r3, #2]
 80074ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ae:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80074b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	3307      	adds	r3, #7
 80074b6:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	881a      	ldrh	r2, [r3, #0]
 80074bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074be:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 80074c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c2:	789b      	ldrb	r3, [r3, #2]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01a      	beq.n	80074fe <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 80074c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ca:	7899      	ldrb	r1, [r3, #2]
 80074cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ce:	f103 0220 	add.w	r2, r3, #32
 80074d2:	79f8      	ldrb	r0, [r7, #7]
 80074d4:	2310      	movs	r3, #16
 80074d6:	f002 fc9f 	bl	8009e18 <usbd_edpt_xfer>
 80074da:	4603      	mov	r3, r0
 80074dc:	f083 0301 	eor.w	r3, r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <hidd_open+0x1b6>
 80074e6:	4b09      	ldr	r3, [pc, #36]	@ (800750c <hidd_open+0x1c4>)
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d000      	beq.n	80074f8 <hidd_open+0x1b0>
 80074f6:	be00      	bkpt	0x0000
 80074f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80074fc:	e001      	b.n	8007502 <hidd_open+0x1ba>
  }

  return drv_len;
 80074fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8007502:	4618      	mov	r0, r3
 8007504:	3748      	adds	r7, #72	@ 0x48
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	e000edf0 	.word	0xe000edf0
 8007510:	200010b4 	.word	0x200010b4
 8007514:	200010c0 	.word	0x200010c0

08007518 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b094      	sub	sp, #80	@ 0x50
 800751c:	af02      	add	r7, sp, #8
 800751e:	4603      	mov	r3, r0
 8007520:	603a      	str	r2, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
 8007524:	460b      	mov	r3, r1
 8007526:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d001      	beq.n	800753a <hidd_control_xfer_cb+0x22>
 8007536:	2300      	movs	r3, #0
 8007538:	e1d6      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	889b      	ldrh	r3, [r3, #4]
 800753e:	b29b      	uxth	r3, r3
 8007540:	b2db      	uxtb	r3, r3
 8007542:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007544:	2300      	movs	r3, #0
 8007546:	77bb      	strb	r3, [r7, #30]
 8007548:	e00f      	b.n	800756a <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 800754a:	7fba      	ldrb	r2, [r7, #30]
 800754c:	498f      	ldr	r1, [pc, #572]	@ (800778c <hidd_control_xfer_cb+0x274>)
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	7ffa      	ldrb	r2, [r7, #31]
 800755c:	429a      	cmp	r2, r3
 800755e:	d101      	bne.n	8007564 <hidd_control_xfer_cb+0x4c>
      return i;
 8007560:	7fbb      	ldrb	r3, [r7, #30]
 8007562:	e006      	b.n	8007572 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007564:	7fbb      	ldrb	r3, [r7, #30]
 8007566:	3301      	adds	r3, #1
 8007568:	77bb      	strb	r3, [r7, #30]
 800756a:	7fbb      	ldrb	r3, [r7, #30]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ec      	beq.n	800754a <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007570:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007572:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007576:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <hidd_control_xfer_cb+0x6a>
 800757e:	2300      	movs	r3, #0
 8007580:	e1b2      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007582:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007586:	4613      	mov	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4a7f      	ldr	r2, [pc, #508]	@ (800778c <hidd_control_xfer_cb+0x274>)
 8007590:	4413      	add	r3, r2
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007594:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4a7b      	ldr	r2, [pc, #492]	@ (8007790 <hidd_control_xfer_cb+0x278>)
 80075a2:	4413      	add	r3, r2
 80075a4:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d145      	bne.n	8007640 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 80075b4:	79bb      	ldrb	r3, [r7, #6]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	f040 8195 	bne.w	80078e6 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80075c4:	8bbb      	ldrh	r3, [r7, #28]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d11b      	bne.n	8007610 <hidd_control_xfer_cb+0xf8>
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075dc:	2b21      	cmp	r3, #33	@ 0x21
 80075de:	d117      	bne.n	8007610 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <hidd_control_xfer_cb+0xd4>
 80075e8:	2300      	movs	r3, #0
 80075ea:	e17d      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80075ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	79f8      	ldrb	r0, [r7, #7]
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	f002 fdf5 	bl	800a1e8 <tud_control_xfer>
 80075fe:	4603      	mov	r3, r0
 8007600:	f083 0301 	eor.w	r3, r3, #1
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 816d 	beq.w	80078e6 <hidd_control_xfer_cb+0x3ce>
 800760c:	2300      	movs	r3, #0
 800760e:	e16b      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b06      	cmp	r3, #6
 8007616:	d111      	bne.n	800763c <hidd_control_xfer_cb+0x124>
 8007618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800761c:	2b22      	cmp	r3, #34	@ 0x22
 800761e:	d10d      	bne.n	800763c <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8007620:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007624:	4618      	mov	r0, r3
 8007626:	f7fc f941 	bl	80038ac <tud_hid_descriptor_report_cb>
 800762a:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	889b      	ldrh	r3, [r3, #4]
 8007630:	79f8      	ldrb	r0, [r7, #7]
 8007632:	6a3a      	ldr	r2, [r7, #32]
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	f002 fdd7 	bl	800a1e8 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800763a:	e154      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 800763c:	2300      	movs	r3, #0
 800763e:	e153      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b20      	cmp	r3, #32
 800764c:	f040 813e 	bne.w	80078cc <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	3b01      	subs	r3, #1
 8007656:	2b0a      	cmp	r3, #10
 8007658:	f200 8136 	bhi.w	80078c8 <hidd_control_xfer_cb+0x3b0>
 800765c:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <hidd_control_xfer_cb+0x14c>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	08007691 	.word	0x08007691
 8007668:	08007867 	.word	0x08007867
 800766c:	0800787d 	.word	0x0800787d
 8007670:	080078c9 	.word	0x080078c9
 8007674:	080078c9 	.word	0x080078c9
 8007678:	080078c9 	.word	0x080078c9
 800767c:	080078c9 	.word	0x080078c9
 8007680:	080078c9 	.word	0x080078c9
 8007684:	08007767 	.word	0x08007767
 8007688:	08007821 	.word	0x08007821
 800768c:	08007893 	.word	0x08007893
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007690:	79bb      	ldrb	r3, [r7, #6]
 8007692:	2b01      	cmp	r3, #1
 8007694:	f040 811c 	bne.w	80078d0 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	b29b      	uxth	r3, r3
 800769e:	82bb      	strh	r3, [r7, #20]
 80076a0:	8abb      	ldrh	r3, [r7, #20]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	837b      	strh	r3, [r7, #26]
 80076c8:	2310      	movs	r3, #16
 80076ca:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80076cc:	8b7a      	ldrh	r2, [r7, #26]
 80076ce:	8b3b      	ldrh	r3, [r7, #24]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	bf28      	it	cs
 80076d4:	4613      	movcs	r3, r2
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80076e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d013      	beq.n	8007712 <hidd_control_xfer_cb+0x1fa>
 80076ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d90f      	bls.n	8007712 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 80076f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80076f8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80076fc:	701a      	strb	r2, [r3, #0]
            req_len--;
 80076fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007702:	3b01      	subs	r3, #1
 8007704:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8007708:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800770c:	3301      	adds	r3, #1
 800770e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8007712:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007716:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800771a:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800771e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007726:	f7fa f89b 	bl	8001860 <tud_hid_get_report_cb>
 800772a:	4603      	mov	r3, r0
 800772c:	461a      	mov	r2, r3
 800772e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007732:	4413      	add	r3, r2
 8007734:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8007738:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <hidd_control_xfer_cb+0x23e>
 8007740:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <hidd_control_xfer_cb+0x27c>)
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d000      	beq.n	8007752 <hidd_control_xfer_cb+0x23a>
 8007750:	be00      	bkpt	0x0000
 8007752:	2300      	movs	r3, #0
 8007754:	e0c8      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8007756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800775c:	79f8      	ldrb	r0, [r7, #7]
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	f002 fd42 	bl	800a1e8 <tud_control_xfer>
        }
        break;
 8007764:	e0b4      	b.n	80078d0 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007766:	79bb      	ldrb	r3, [r7, #6]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d115      	bne.n	8007798 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b10      	cmp	r3, #16
 8007774:	d901      	bls.n	800777a <hidd_control_xfer_cb+0x262>
 8007776:	2300      	movs	r3, #0
 8007778:	e0b6      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 800777a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	b29b      	uxth	r3, r3
 8007782:	79f8      	ldrb	r0, [r7, #7]
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	f002 fd2f 	bl	800a1e8 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 800778a:	e0a3      	b.n	80078d4 <hidd_control_xfer_cb+0x3bc>
 800778c:	200010b4 	.word	0x200010b4
 8007790:	200010c0 	.word	0x200010c0
 8007794:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8007798:	79bb      	ldrb	r3, [r7, #6]
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 809a 	bne.w	80078d4 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80077a8:	89bb      	ldrh	r3, [r7, #12]
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	885b      	ldrh	r3, [r3, #2]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80077bc:	89fb      	ldrh	r3, [r7, #14]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	88db      	ldrh	r3, [r3, #6]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	827b      	strh	r3, [r7, #18]
 80077d0:	2310      	movs	r3, #16
 80077d2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80077d4:	8a7a      	ldrh	r2, [r7, #18]
 80077d6:	8a3b      	ldrh	r3, [r7, #16]
 80077d8:	4293      	cmp	r3, r2
 80077da:	bf28      	it	cs
 80077dc:	4613      	movcs	r3, r2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80077e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <hidd_control_xfer_cb+0x2f0>
 80077ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d90b      	bls.n	8007808 <hidd_control_xfer_cb+0x2f0>
 80077f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d105      	bne.n	8007808 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 80077fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fe:	3301      	adds	r3, #1
 8007800:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8007802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007804:	3b01      	subs	r3, #1
 8007806:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8007808:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800780c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007810:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007814:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781a:	f7fa f832 	bl	8001882 <tud_hid_set_report_cb>
        break;
 800781e:	e059      	b.n	80078d4 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007820:	79bb      	ldrb	r3, [r7, #6]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d158      	bne.n	80078d8 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	885b      	ldrh	r3, [r3, #2]
 800782a:	b29b      	uxth	r3, r3
 800782c:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	b2da      	uxtb	r2, r3
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 800783a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783c:	79da      	ldrb	r2, [r3, #7]
 800783e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fc4b 	bl	80070e0 <tud_hid_set_idle_cb>
 800784a:	4603      	mov	r3, r0
 800784c:	f083 0301 	eor.w	r3, r3, #1
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <hidd_control_xfer_cb+0x342>
 8007856:	2300      	movs	r3, #0
 8007858:	e046      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f002 fc50 	bl	800a104 <tud_control_status>
        }
        break;
 8007864:	e038      	b.n	80078d8 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007866:	79bb      	ldrb	r3, [r7, #6]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d137      	bne.n	80078dc <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 800786c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786e:	1dda      	adds	r2, r3, #7
 8007870:	79f8      	ldrb	r0, [r7, #7]
 8007872:	2301      	movs	r3, #1
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	f002 fcb7 	bl	800a1e8 <tud_control_xfer>
        }
        break;
 800787a:	e02f      	b.n	80078dc <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 800787c:	79bb      	ldrb	r3, [r7, #6]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d12e      	bne.n	80078e0 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007884:	1d9a      	adds	r2, r3, #6
 8007886:	79f8      	ldrb	r0, [r7, #7]
 8007888:	2301      	movs	r3, #1
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	f002 fcac 	bl	800a1e8 <tud_control_xfer>
        }
        break;
 8007890:	e026      	b.n	80078e0 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007892:	79bb      	ldrb	r3, [r7, #6]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d105      	bne.n	80078a4 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fc31 	bl	800a104 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 80078a2:	e01f      	b.n	80078e4 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 80078a4:	79bb      	ldrb	r3, [r7, #6]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d11c      	bne.n	80078e4 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b4:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	799a      	ldrb	r2, [r3, #6]
 80078ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7f9 ffb1 	bl	8001828 <tud_hid_set_protocol_cb>
        break;
 80078c6:	e00d      	b.n	80078e4 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 80078c8:	2300      	movs	r3, #0
 80078ca:	e00d      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 80078cc:	2300      	movs	r3, #0
 80078ce:	e00b      	b.n	80078e8 <hidd_control_xfer_cb+0x3d0>
        break;
 80078d0:	bf00      	nop
 80078d2:	e008      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
        break;
 80078d4:	bf00      	nop
 80078d6:	e006      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
        break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
        break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
        break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <hidd_control_xfer_cb+0x3ce>
        break;
 80078e4:	bf00      	nop
  }

  return true;
 80078e6:	2301      	movs	r3, #1
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3748      	adds	r7, #72	@ 0x48
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4603      	mov	r3, r0
 80078fa:	71fb      	strb	r3, [r7, #7]
 80078fc:	460b      	mov	r3, r1
 80078fe:	71bb      	strb	r3, [r7, #6]
 8007900:	4613      	mov	r3, r2
 8007902:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007904:	2300      	movs	r3, #0
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e014      	b.n	8007934 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 800790a:	7ffa      	ldrb	r2, [r7, #31]
 800790c:	4613      	mov	r3, r2
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4a3e      	ldr	r2, [pc, #248]	@ (8007a10 <hidd_xfer_cb+0x120>)
 8007916:	4413      	add	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	789b      	ldrb	r3, [r3, #2]
 800791e:	79ba      	ldrb	r2, [r7, #6]
 8007920:	429a      	cmp	r2, r3
 8007922:	d00a      	beq.n	800793a <hidd_xfer_cb+0x4a>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	79ba      	ldrb	r2, [r7, #6]
 800792a:	429a      	cmp	r2, r3
 800792c:	d005      	beq.n	800793a <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 800792e:	7ffb      	ldrb	r3, [r7, #31]
 8007930:	3301      	adds	r3, #1
 8007932:	77fb      	strb	r3, [r7, #31]
 8007934:	7ffb      	ldrb	r3, [r7, #31]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0e7      	beq.n	800790a <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 800793a:	7ffb      	ldrb	r3, [r7, #31]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <hidd_xfer_cb+0x66>
 8007940:	4b34      	ldr	r3, [pc, #208]	@ (8007a14 <hidd_xfer_cb+0x124>)
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d000      	beq.n	8007952 <hidd_xfer_cb+0x62>
 8007950:	be00      	bkpt	0x0000
 8007952:	2300      	movs	r3, #0
 8007954:	e057      	b.n	8007a06 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007956:	7ffa      	ldrb	r2, [r7, #31]
 8007958:	4613      	mov	r3, r2
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4413      	add	r3, r2
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	4a2d      	ldr	r2, [pc, #180]	@ (8007a18 <hidd_xfer_cb+0x128>)
 8007962:	4413      	add	r3, r2
 8007964:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	79ba      	ldrb	r2, [r7, #6]
 800796c:	429a      	cmp	r2, r3
 800796e:	d116      	bne.n	800799e <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007970:	797b      	ldrb	r3, [r7, #5]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f103 0110 	add.w	r1, r3, #16
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	b29a      	uxth	r2, r3
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	4618      	mov	r0, r3
 8007984:	f7f9 ff5e 	bl	8001844 <tud_hid_report_complete_cb>
 8007988:	e03c      	b.n	8007a04 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f103 0210 	add.w	r2, r3, #16
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	7ff8      	ldrb	r0, [r7, #31]
 8007996:	2101      	movs	r1, #1
 8007998:	f7ff fbb1 	bl	80070fe <tud_hid_report_failed_cb>
 800799c:	e032      	b.n	8007a04 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 800799e:	797b      	ldrb	r3, [r7, #5]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f103 0220 	add.w	r2, r3, #32
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	7ff8      	ldrb	r0, [r7, #31]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	4613      	mov	r3, r2
 80079b4:	2202      	movs	r2, #2
 80079b6:	2100      	movs	r1, #0
 80079b8:	f7f9 ff63 	bl	8001882 <tud_hid_set_report_cb>
 80079bc:	e008      	b.n	80079d0 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f103 0220 	add.w	r2, r3, #32
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	7ff8      	ldrb	r0, [r7, #31]
 80079ca:	2102      	movs	r1, #2
 80079cc:	f7ff fb97 	bl	80070fe <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	7899      	ldrb	r1, [r3, #2]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f103 0220 	add.w	r2, r3, #32
 80079da:	79f8      	ldrb	r0, [r7, #7]
 80079dc:	2310      	movs	r3, #16
 80079de:	f002 fa1b 	bl	8009e18 <usbd_edpt_xfer>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f083 0301 	eor.w	r3, r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <hidd_xfer_cb+0x114>
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <hidd_xfer_cb+0x124>)
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d000      	beq.n	8007a00 <hidd_xfer_cb+0x110>
 80079fe:	be00      	bkpt	0x0000
 8007a00:	2300      	movs	r3, #0
 8007a02:	e000      	b.n	8007a06 <hidd_xfer_cb+0x116>
  }

  return true;
 8007a04:	2301      	movs	r3, #1
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	200010b4 	.word	0x200010b4
 8007a14:	e000edf0 	.word	0xe000edf0
 8007a18:	200010c0 	.word	0x200010c0

08007a1c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	80fb      	strh	r3, [r7, #6]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a38:	d901      	bls.n	8007a3e <tu_fifo_config+0x22>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e01b      	b.n	8007a76 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	88fa      	ldrh	r2, [r7, #6]
 8007a48:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007a4a:	88bb      	ldrh	r3, [r7, #4]
 8007a4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007a50:	b299      	uxth	r1, r3
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	88d3      	ldrh	r3, [r2, #6]
 8007a56:	f361 030e 	bfi	r3, r1, #0, #15
 8007a5a:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	79d3      	ldrb	r3, [r2, #7]
 8007a60:	7e39      	ldrb	r1, [r7, #24]
 8007a62:	f361 13c7 	bfi	r3, r1, #7, #1
 8007a66:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007a74:	2301      	movs	r3, #1
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b08a      	sub	sp, #40	@ 0x28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	089b      	lsrs	r3, r3, #2
 8007a98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007a9a:	e00b      	b.n	8007ab4 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	61ba      	str	r2, [r7, #24]
 8007aa4:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	601a      	str	r2, [r3, #0]
}
 8007aac:	bf00      	nop
    ff_buf += 4;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007ab4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ab6:	1e5a      	subs	r2, r3, #1
 8007ab8:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1ee      	bne.n	8007a9c <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007ac8:	7ffb      	ldrb	r3, [r7, #31]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007ad4:	7ffa      	ldrb	r2, [r7, #31]
 8007ad6:	f107 0310 	add.w	r3, r7, #16
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f005 f874 	bl	800cbca <memcpy>
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3728      	adds	r7, #40	@ 0x28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b08a      	sub	sp, #40	@ 0x28
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	4613      	mov	r3, r2
 8007af6:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007b02:	e008      	b.n	8007b16 <_ff_pull_const_addr+0x2c>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3304      	adds	r3, #4
 8007b14:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007b16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b18:	1e5a      	subs	r2, r3, #1
 8007b1a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f1      	bne.n	8007b04 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007b2a:	7ffb      	ldrb	r3, [r7, #31]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007b34:	7ffa      	ldrb	r2, [r7, #31]
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f005 f844 	bl	800cbca <memcpy>

    *reg_tx = tmp32;
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	601a      	str	r2, [r3, #0]
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3728      	adds	r7, #40	@ 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	68f9      	ldr	r1, [r7, #12]
 8007b66:	88c9      	ldrh	r1, [r1, #6]
 8007b68:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007b6c:	b289      	uxth	r1, r1
 8007b6e:	fb01 f202 	mul.w	r2, r1, r2
 8007b72:	1898      	adds	r0, r3, r2
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	88db      	ldrh	r3, [r3, #6]
 8007b78:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	f005 f822 	bl	800cbca <memcpy>
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b08e      	sub	sp, #56	@ 0x38
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	80fb      	strh	r3, [r7, #6]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	889a      	ldrh	r2, [r3, #4]
 8007ba8:	88bb      	ldrh	r3, [r7, #4]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bc4:	fb13 f302 	smulbb	r3, r3, r2
 8007bc8:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	88db      	ldrh	r3, [r3, #6]
 8007bce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bd8:	fb13 f302 	smulbb	r3, r3, r2
 8007bdc:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	88ba      	ldrh	r2, [r7, #4]
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	88c9      	ldrh	r1, [r1, #6]
 8007be8:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007bec:	b289      	uxth	r1, r1
 8007bee:	fb01 f202 	mul.w	r2, r1, r2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007bf6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <_ff_push_n+0x76>
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d022      	beq.n	8007c48 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8007c02:	e09e      	b.n	8007d42 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d80d      	bhi.n	8007c28 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	88d2      	ldrh	r2, [r2, #6]
 8007c12:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c16:	b292      	uxth	r2, r2
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c22:	f004 ffd2 	bl	800cbca <memcpy>
      break;
 8007c26:	e08c      	b.n	8007d42 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8007c28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c30:	f004 ffcb 	bl	800cbca <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c40:	4619      	mov	r1, r3
 8007c42:	f004 ffc2 	bl	800cbca <memcpy>
      break;
 8007c46:	e07c      	b.n	8007d42 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d80f      	bhi.n	8007c70 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88db      	ldrh	r3, [r3, #6]
 8007c54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	fb13 f302 	smulbb	r3, r3, r2
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	461a      	mov	r2, r3
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c6a:	f7ff ff0a 	bl	8007a82 <_ff_push_const_addr>
      break;
 8007c6e:	e067      	b.n	8007d40 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8007c70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8007c78:	8c3b      	ldrh	r3, [r7, #32]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c80:	f7ff feff 	bl	8007a82 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007c84:	8c3b      	ldrh	r3, [r7, #32]
 8007c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c88:	4413      	add	r3, r2
 8007c8a:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007c8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d043      	beq.n	8007d28 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f1c3 0304 	rsb	r3, r3, #4
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cb2:	837b      	strh	r3, [r7, #26]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007cb8:	8b7a      	ldrh	r2, [r7, #26]
 8007cba:	8b3b      	ldrh	r3, [r7, #24]
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bf28      	it	cs
 8007cc0:	4613      	movcs	r3, r2
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8007cda:	f107 0314 	add.w	r3, r7, #20
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8007ce0:	e007      	b.n	8007cf2 <_ff_push_n+0x164>
 8007ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce4:	1c53      	adds	r3, r2, #1
 8007ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	1c59      	adds	r1, r3, #1
 8007cec:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cf6:	1e5a      	subs	r2, r3, #1
 8007cf8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f0      	bne.n	8007ce2 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8007d06:	e007      	b.n	8007d18 <_ff_push_n+0x18a>
 8007d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d0a:	1c53      	adds	r3, r2, #1
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	1c59      	adds	r1, r3, #1
 8007d12:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	701a      	strb	r2, [r3, #0]
 8007d18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f0      	bne.n	8007d08 <_ff_push_n+0x17a>
 8007d26:	e002      	b.n	8007d2e <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8007d2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <_ff_push_n+0x1b2>
 8007d34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d36:	461a      	mov	r2, r3
 8007d38:	68b9      	ldr	r1, [r7, #8]
 8007d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d3c:	f7ff fea1 	bl	8007a82 <_ff_push_const_addr>
      break;
 8007d40:	bf00      	nop
  }
}
 8007d42:	bf00      	nop
 8007d44:	3738      	adds	r7, #56	@ 0x38
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	88c9      	ldrh	r1, [r1, #6]
 8007d62:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007d66:	b289      	uxth	r1, r1
 8007d68:	fb01 f202 	mul.w	r2, r1, r2
 8007d6c:	1899      	adds	r1, r3, r2
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68b8      	ldr	r0, [r7, #8]
 8007d7c:	f004 ff25 	bl	800cbca <memcpy>
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	@ 0x38
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4611      	mov	r1, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	460b      	mov	r3, r1
 8007d98:	80fb      	strh	r3, [r7, #6]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	889a      	ldrh	r2, [r3, #4]
 8007da2:	88bb      	ldrh	r3, [r7, #4]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dbe:	fb13 f302 	smulbb	r3, r3, r2
 8007dc2:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88db      	ldrh	r3, [r3, #6]
 8007dc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dd2:	fb13 f302 	smulbb	r3, r3, r2
 8007dd6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	88ba      	ldrh	r2, [r7, #4]
 8007dde:	68f9      	ldr	r1, [r7, #12]
 8007de0:	88c9      	ldrh	r1, [r1, #6]
 8007de2:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007de6:	b289      	uxth	r1, r1
 8007de8:	fb01 f202 	mul.w	r2, r1, r2
 8007dec:	4413      	add	r3, r2
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007df0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <_ff_pull_n+0x76>
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d022      	beq.n	8007e42 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8007dfc:	e0a0      	b.n	8007f40 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8007dfe:	88fa      	ldrh	r2, [r7, #6]
 8007e00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d80d      	bhi.n	8007e22 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	88d2      	ldrh	r2, [r2, #6]
 8007e0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e10:	b292      	uxth	r2, r2
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e1a:	68b8      	ldr	r0, [r7, #8]
 8007e1c:	f004 fed5 	bl	800cbca <memcpy>
    break;
 8007e20:	e08e      	b.n	8007f40 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8007e22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e24:	461a      	mov	r2, r3
 8007e26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e28:	68b8      	ldr	r0, [r7, #8]
 8007e2a:	f004 fece 	bl	800cbca <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8007e2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	18d0      	adds	r0, r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f004 fec5 	bl	800cbca <memcpy>
    break;
 8007e40:	e07e      	b.n	8007f40 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d80f      	bhi.n	8007e6a <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	88db      	ldrh	r3, [r3, #6]
 8007e4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	fb13 f302 	smulbb	r3, r3, r2
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e62:	68b8      	ldr	r0, [r7, #8]
 8007e64:	f7ff fe41 	bl	8007aea <_ff_pull_const_addr>
    break;
 8007e68:	e069      	b.n	8007f3e <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8007e6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e6c:	f023 0303 	bic.w	r3, r3, #3
 8007e70:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8007e72:	8c3b      	ldrh	r3, [r7, #32]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e78:	68b8      	ldr	r0, [r7, #8]
 8007e7a:	f7ff fe36 	bl	8007aea <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8007e7e:	8c3b      	ldrh	r3, [r7, #32]
 8007e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e82:	4413      	add	r3, r2
 8007e84:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007e86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d045      	beq.n	8007f26 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f1c3 0304 	rsb	r3, r3, #4
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007eac:	837b      	strh	r3, [r7, #26]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	833b      	strh	r3, [r7, #24]
 8007eb2:	8b7a      	ldrh	r2, [r7, #26]
 8007eb4:	8b3b      	ldrh	r3, [r7, #24]
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	bf28      	it	cs
 8007eba:	4613      	movcs	r3, r2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007ec2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8007ed2:	f107 0314 	add.w	r3, r7, #20
 8007ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8007ed8:	e007      	b.n	8007eea <_ff_pull_n+0x162>
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	1c53      	adds	r3, r2, #1
 8007ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	1c59      	adds	r1, r3, #1
 8007ee4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f0      	bne.n	8007eda <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8007efe:	e007      	b.n	8007f10 <_ff_pull_n+0x188>
 8007f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f02:	1c53      	adds	r3, r2, #1
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	1c59      	adds	r1, r3, #1
 8007f0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f0c:	7812      	ldrb	r2, [r2, #0]
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f0      	bne.n	8007f00 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e002      	b.n	8007f2c <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8007f2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <_ff_pull_n+0x1b6>
 8007f32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f34:	461a      	mov	r2, r3
 8007f36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f38:	68b8      	ldr	r0, [r7, #8]
 8007f3a:	f7ff fdd6 	bl	8007aea <_ff_pull_const_addr>
    break;
 8007f3e:	bf00      	nop
  }
}
 8007f40:	bf00      	nop
 8007f42:	3738      	adds	r7, #56	@ 0x38
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	80fb      	strh	r3, [r7, #6]
 8007f52:	460b      	mov	r3, r1
 8007f54:	80bb      	strh	r3, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8007f5a:	88ba      	ldrh	r2, [r7, #4]
 8007f5c:	887b      	ldrh	r3, [r7, #2]
 8007f5e:	4413      	add	r3, r2
 8007f60:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8007f62:	88ba      	ldrh	r2, [r7, #4]
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d804      	bhi.n	8007f74 <advance_index+0x2c>
 8007f6a:	89fa      	ldrh	r2, [r7, #14]
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	429a      	cmp	r2, r3
 8007f72:	db08      	blt.n	8007f86 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	425b      	negs	r3, r3
 8007f7c:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8007f7e:	89fa      	ldrh	r2, [r7, #14]
 8007f80:	89bb      	ldrh	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8007f86:	89fb      	ldrh	r3, [r7, #14]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	@ 0x28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	80fb      	strh	r3, [r7, #6]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	889b      	ldrh	r3, [r3, #4]
 8007fae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	843b      	strh	r3, [r7, #32]
 8007fb4:	88bb      	ldrh	r3, [r7, #4]
 8007fb6:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8007fb8:	8c3a      	ldrh	r2, [r7, #32]
 8007fba:	8bfb      	ldrh	r3, [r7, #30]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d304      	bcc.n	8007fca <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8007fc0:	8c3a      	ldrh	r2, [r7, #32]
 8007fc2:	8bfb      	ldrh	r3, [r7, #30]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	e008      	b.n	8007fdc <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007fca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	8c39      	ldrh	r1, [r7, #32]
 8007fd2:	8bfb      	ldrh	r3, [r7, #30]
 8007fd4:	1acb      	subs	r3, r1, r3
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8007fdc:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8007fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <_tu_fifo_peek+0x54>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e037      	b.n	8008058 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	889b      	ldrh	r3, [r3, #4]
 8007fec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d91b      	bls.n	800802a <_tu_fifo_peek+0x96>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	8afa      	ldrh	r2, [r7, #22]
 8008000:	429a      	cmp	r2, r3
 8008002:	d305      	bcc.n	8008010 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	889b      	ldrh	r3, [r3, #4]
 8008008:	8afa      	ldrh	r2, [r7, #22]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	82bb      	strh	r3, [r7, #20]
 800800e:	e004      	b.n	800801a <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	889a      	ldrh	r2, [r3, #4]
 8008014:	8afb      	ldrh	r3, [r7, #22]
 8008016:	4413      	add	r3, r2
 8008018:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	8aba      	ldrh	r2, [r7, #20]
 800801e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8008020:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8008022:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	889b      	ldrh	r3, [r3, #4]
 8008028:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	889b      	ldrh	r3, [r3, #4]
 800802e:	827b      	strh	r3, [r7, #18]
 8008030:	88bb      	ldrh	r3, [r7, #4]
 8008032:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008034:	e003      	b.n	800803e <_tu_fifo_peek+0xaa>
 8008036:	8a3a      	ldrh	r2, [r7, #16]
 8008038:	8a7b      	ldrh	r3, [r7, #18]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	823b      	strh	r3, [r7, #16]
 800803e:	8a7a      	ldrh	r2, [r7, #18]
 8008040:	8a3b      	ldrh	r3, [r7, #16]
 8008042:	429a      	cmp	r2, r3
 8008044:	d9f7      	bls.n	8008036 <_tu_fifo_peek+0xa2>
  return idx;
 8008046:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008048:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800804a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800804c:	461a      	mov	r2, r3
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fe7a 	bl	8007d4a <_ff_pull>

  return true;
 8008056:	2301      	movs	r3, #1
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	@ 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	@ 0x30
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	460b      	mov	r3, r1
 8008070:	80fb      	strh	r3, [r7, #6]
 8008072:	4613      	mov	r3, r2
 8008074:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800807c:	88bb      	ldrh	r3, [r7, #4]
 800807e:	843b      	strh	r3, [r7, #32]
 8008080:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008082:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008084:	8c3a      	ldrh	r2, [r7, #32]
 8008086:	8bfb      	ldrh	r3, [r7, #30]
 8008088:	429a      	cmp	r2, r3
 800808a:	d304      	bcc.n	8008096 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800808c:	8c3a      	ldrh	r2, [r7, #32]
 800808e:	8bfb      	ldrh	r3, [r7, #30]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	e008      	b.n	80080a8 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008096:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	8c39      	ldrh	r1, [r7, #32]
 800809e:	8bfb      	ldrh	r3, [r7, #30]
 80080a0:	1acb      	subs	r3, r1, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4413      	add	r3, r2
 80080a6:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80080a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80080aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <_tu_fifo_peek_n+0x54>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e041      	b.n	8008138 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	889b      	ldrh	r3, [r3, #4]
 80080b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d91b      	bls.n	80080f6 <_tu_fifo_peek_n+0x96>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	88bb      	ldrh	r3, [r7, #4]
 80080c4:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	8afa      	ldrh	r2, [r7, #22]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d305      	bcc.n	80080dc <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	889b      	ldrh	r3, [r3, #4]
 80080d4:	8afa      	ldrh	r2, [r7, #22]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	82bb      	strh	r3, [r7, #20]
 80080da:	e004      	b.n	80080e6 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	889a      	ldrh	r2, [r3, #4]
 80080e0:	8afb      	ldrh	r3, [r7, #22]
 80080e2:	4413      	add	r3, r2
 80080e4:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	8aba      	ldrh	r2, [r7, #20]
 80080ea:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80080ec:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80080ee:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	889b      	ldrh	r3, [r3, #4]
 80080f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80080f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d201      	bcs.n	8008102 <_tu_fifo_peek_n+0xa2>
 80080fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008100:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	889b      	ldrh	r3, [r3, #4]
 8008106:	827b      	strh	r3, [r7, #18]
 8008108:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800810a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800810c:	e003      	b.n	8008116 <_tu_fifo_peek_n+0xb6>
 800810e:	8a3a      	ldrh	r2, [r7, #16]
 8008110:	8a7b      	ldrh	r3, [r7, #18]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	823b      	strh	r3, [r7, #16]
 8008116:	8a7a      	ldrh	r2, [r7, #18]
 8008118:	8a3b      	ldrh	r3, [r7, #16]
 800811a:	429a      	cmp	r2, r3
 800811c:	d9f7      	bls.n	800810e <_tu_fifo_peek_n+0xae>
  return idx;
 800811e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008120:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8008122:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff fe29 	bl	8007d88 <_ff_pull_n>

  return n;
 8008136:	88fb      	ldrh	r3, [r7, #6]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3728      	adds	r7, #40	@ 0x28
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b092      	sub	sp, #72	@ 0x48
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4611      	mov	r1, r2
 800814c:	461a      	mov	r2, r3
 800814e:	460b      	mov	r3, r1
 8008150:	80fb      	strh	r3, [r7, #6]
 8008152:	4613      	mov	r3, r2
 8008154:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <_tu_fifo_write_n+0x20>
 800815c:	2300      	movs	r3, #0
 800815e:	e0bc      	b.n	80082da <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	891b      	ldrh	r3, [r3, #8]
 8008164:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	79db      	ldrb	r3, [r3, #7]
 8008174:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f083 0301 	eor.w	r3, r3, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d036      	beq.n	80081f2 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	889b      	ldrh	r3, [r3, #4]
 8008188:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800818a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800818c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800818e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008190:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008192:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008194:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008198:	847b      	strh	r3, [r7, #34]	@ 0x22
 800819a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800819c:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800819e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80081a0:	8c3b      	ldrh	r3, [r7, #32]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d304      	bcc.n	80081b0 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80081a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80081a8:	8c3b      	ldrh	r3, [r7, #32]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	e008      	b.n	80081c2 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80081b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80081b8:	8c3b      	ldrh	r3, [r7, #32]
 80081ba:	1acb      	subs	r3, r1, r3
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4413      	add	r3, r2
 80081c0:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80081c2:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80081c4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d904      	bls.n	80081d6 <_tu_fifo_write_n+0x96>
 80081cc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80081ce:	8bfb      	ldrh	r3, [r7, #30]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	e000      	b.n	80081d8 <_tu_fifo_write_n+0x98>
 80081d6:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80081d8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80081de:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80081e0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80081e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80081e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80081e6:	4293      	cmp	r3, r2
 80081e8:	bf28      	it	cs
 80081ea:	4613      	movcs	r3, r2
 80081ec:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80081ee:	80fb      	strh	r3, [r7, #6]
 80081f0:	e04b      	b.n	800828a <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	889b      	ldrh	r3, [r3, #4]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d317      	bcc.n	800822c <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80081fc:	797b      	ldrb	r3, [r7, #5]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10e      	bne.n	8008220 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	8892      	ldrh	r2, [r2, #4]
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	88d2      	ldrh	r2, [r2, #6]
 800820e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008212:	b292      	uxth	r2, r2
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	461a      	mov	r2, r3
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	4413      	add	r3, r2
 800821e:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	889b      	ldrh	r3, [r3, #4]
 8008224:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8008226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008228:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800822a:	e02e      	b.n	800828a <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	889b      	ldrh	r3, [r3, #4]
 8008230:	83bb      	strh	r3, [r7, #28]
 8008232:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008234:	837b      	strh	r3, [r7, #26]
 8008236:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008238:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800823a:	8b7a      	ldrh	r2, [r7, #26]
 800823c:	8b3b      	ldrh	r3, [r7, #24]
 800823e:	429a      	cmp	r2, r3
 8008240:	d304      	bcc.n	800824c <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8008242:	8b7a      	ldrh	r2, [r7, #26]
 8008244:	8b3b      	ldrh	r3, [r7, #24]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	b29b      	uxth	r3, r3
 800824a:	e008      	b.n	800825e <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800824c:	8bbb      	ldrh	r3, [r7, #28]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	8b79      	ldrh	r1, [r7, #26]
 8008254:	8b3b      	ldrh	r3, [r7, #24]
 8008256:	1acb      	subs	r3, r1, r3
 8008258:	b29b      	uxth	r3, r3
 800825a:	4413      	add	r3, r2
 800825c:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800825e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008260:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	889b      	ldrh	r3, [r3, #4]
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	429a      	cmp	r2, r3
 800826e:	db0c      	blt.n	800828a <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8898      	ldrh	r0, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	889a      	ldrh	r2, [r3, #4]
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	b29a      	uxth	r2, r3
 800827e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008280:	4619      	mov	r1, r3
 8008282:	f7ff fe61 	bl	8007f48 <advance_index>
 8008286:	4603      	mov	r3, r0
 8008288:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d023      	beq.n	80082d8 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	889b      	ldrh	r3, [r3, #4]
 8008294:	82fb      	strh	r3, [r7, #22]
 8008296:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008298:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800829a:	e003      	b.n	80082a4 <_tu_fifo_write_n+0x164>
 800829c:	8aba      	ldrh	r2, [r7, #20]
 800829e:	8afb      	ldrh	r3, [r7, #22]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	82bb      	strh	r3, [r7, #20]
 80082a4:	8afa      	ldrh	r2, [r7, #22]
 80082a6:	8abb      	ldrh	r3, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d9f7      	bls.n	800829c <_tu_fifo_write_n+0x15c>
  return idx;
 80082ac:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80082ae:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80082b0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	797b      	ldrb	r3, [r7, #5]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	460b      	mov	r3, r1
 80082ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff fc66 	bl	8007b8e <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	88fa      	ldrh	r2, [r7, #6]
 80082c8:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fe3c 	bl	8007f48 <advance_index>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80082d8:	88fb      	ldrh	r3, [r7, #6]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3740      	adds	r7, #64	@ 0x40
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af02      	add	r7, sp, #8
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4611      	mov	r1, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	80fb      	strh	r3, [r7, #6]
 80082f4:	4613      	mov	r3, r2
 80082f6:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	891b      	ldrh	r3, [r3, #8]
 80082fc:	b298      	uxth	r0, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	895b      	ldrh	r3, [r3, #10]
 8008302:	b29b      	uxth	r3, r3
 8008304:	88f9      	ldrh	r1, [r7, #6]
 8008306:	797a      	ldrb	r2, [r7, #5]
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4603      	mov	r3, r0
 800830e:	460a      	mov	r2, r1
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fea4 	bl	8008060 <_tu_fifo_peek_n>
 8008318:	4603      	mov	r3, r0
 800831a:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8898      	ldrh	r0, [r3, #4]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	b29b      	uxth	r3, r3
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	4619      	mov	r1, r3
 800832a:	f7ff fe0d 	bl	8007f48 <advance_index>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8008336:	88fb      	ldrh	r3, [r7, #6]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8899      	ldrh	r1, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	891b      	ldrh	r3, [r3, #8]
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	895b      	ldrh	r3, [r3, #10]
 8008356:	b29b      	uxth	r3, r3
 8008358:	8279      	strh	r1, [r7, #18]
 800835a:	823a      	strh	r2, [r7, #16]
 800835c:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800835e:	8a3a      	ldrh	r2, [r7, #16]
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	429a      	cmp	r2, r3
 8008364:	d304      	bcc.n	8008370 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008366:	8a3a      	ldrh	r2, [r7, #16]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	b29b      	uxth	r3, r3
 800836e:	e008      	b.n	8008382 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008370:	8a7b      	ldrh	r3, [r7, #18]
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	8a39      	ldrh	r1, [r7, #16]
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	1acb      	subs	r3, r1, r3
 800837c:	b29b      	uxth	r3, r3
 800837e:	4413      	add	r3, r2
 8008380:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	8892      	ldrh	r2, [r2, #4]
 8008386:	82fb      	strh	r3, [r7, #22]
 8008388:	4613      	mov	r3, r2
 800838a:	82bb      	strh	r3, [r7, #20]
 800838c:	8afa      	ldrh	r2, [r7, #22]
 800838e:	8abb      	ldrh	r3, [r7, #20]
 8008390:	4293      	cmp	r3, r2
 8008392:	bf28      	it	cs
 8008394:	4613      	movcs	r3, r2
 8008396:	b29b      	uxth	r3, r3
}
 8008398:	4618      	mov	r0, r3
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	891b      	ldrh	r3, [r3, #8]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	895b      	ldrh	r3, [r3, #10]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	429a      	cmp	r2, r3
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	8899      	ldrh	r1, [r3, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	891b      	ldrh	r3, [r3, #8]
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	895b      	ldrh	r3, [r3, #10]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	81f9      	strh	r1, [r7, #14]
 80083e8:	81ba      	strh	r2, [r7, #12]
 80083ea:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 80083ec:	89ba      	ldrh	r2, [r7, #12]
 80083ee:	897b      	ldrh	r3, [r7, #10]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d304      	bcc.n	80083fe <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80083f4:	89ba      	ldrh	r2, [r7, #12]
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	e008      	b.n	8008410 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	89b9      	ldrh	r1, [r7, #12]
 8008406:	897b      	ldrh	r3, [r7, #10]
 8008408:	1acb      	subs	r3, r1, r3
 800840a:	b29b      	uxth	r3, r3
 800840c:	4413      	add	r3, r2
 800840e:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	8892      	ldrh	r2, [r2, #4]
 8008414:	4293      	cmp	r3, r2
 8008416:	bf2c      	ite	cs
 8008418:	2301      	movcs	r3, #1
 800841a:	2300      	movcc	r3, #0
 800841c:	b2db      	uxtb	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 800842a:	b480      	push	{r7}
 800842c:	b087      	sub	sp, #28
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8899      	ldrh	r1, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	891b      	ldrh	r3, [r3, #8]
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	895b      	ldrh	r3, [r3, #10]
 8008440:	b29b      	uxth	r3, r3
 8008442:	82f9      	strh	r1, [r7, #22]
 8008444:	82ba      	strh	r2, [r7, #20]
 8008446:	827b      	strh	r3, [r7, #18]
 8008448:	8afb      	ldrh	r3, [r7, #22]
 800844a:	823b      	strh	r3, [r7, #16]
 800844c:	8abb      	ldrh	r3, [r7, #20]
 800844e:	81fb      	strh	r3, [r7, #14]
 8008450:	8a7b      	ldrh	r3, [r7, #18]
 8008452:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8008454:	89fa      	ldrh	r2, [r7, #14]
 8008456:	89bb      	ldrh	r3, [r7, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d304      	bcc.n	8008466 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 800845c:	89fa      	ldrh	r2, [r7, #14]
 800845e:	89bb      	ldrh	r3, [r7, #12]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	b29b      	uxth	r3, r3
 8008464:	e008      	b.n	8008478 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008466:	8a3b      	ldrh	r3, [r7, #16]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	89f9      	ldrh	r1, [r7, #14]
 800846e:	89bb      	ldrh	r3, [r7, #12]
 8008470:	1acb      	subs	r3, r1, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	4413      	add	r3, r2
 8008476:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008478:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800847a:	8afa      	ldrh	r2, [r7, #22]
 800847c:	897b      	ldrh	r3, [r7, #10]
 800847e:	429a      	cmp	r2, r3
 8008480:	d904      	bls.n	800848c <tu_fifo_remaining+0x62>
 8008482:	8afa      	ldrh	r2, [r7, #22]
 8008484:	897b      	ldrh	r3, [r7, #10]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	e000      	b.n	800848e <tu_fifo_remaining+0x64>
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	891b      	ldrh	r3, [r3, #8]
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	895b      	ldrh	r3, [r3, #10]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fd6e 	bl	8007f94 <_tu_fifo_peek>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8898      	ldrh	r0, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	895b      	ldrh	r3, [r3, #10]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	7bfa      	ldrb	r2, [r7, #15]
 80084c8:	b292      	uxth	r2, r2
 80084ca:	4619      	mov	r1, r3
 80084cc:	f7ff fd3c 	bl	8007f48 <advance_index>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	4613      	mov	r3, r2
 80084ee:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80084f0:	88fa      	ldrh	r2, [r7, #6]
 80084f2:	2300      	movs	r3, #0
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fef3 	bl	80082e2 <_tu_fifo_read_n>
 80084fc:	4603      	mov	r3, r0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	4613      	mov	r3, r2
 8008512:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	2301      	movs	r3, #1
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fee1 	bl	80082e2 <_tu_fifo_read_n>
 8008520:	4603      	mov	r3, r0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b086      	sub	sp, #24
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	891b      	ldrh	r3, [r3, #8]
 8008538:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ff47 	bl	80083ce <tu_fifo_full>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <tu_fifo_write+0x36>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	79db      	ldrb	r3, [r3, #7]
 800854a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f083 0301 	eor.w	r3, r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <tu_fifo_write+0x36>
  {
    ret = false;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
 800855e:	e022      	b.n	80085a6 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	889b      	ldrh	r3, [r3, #4]
 8008564:	823b      	strh	r3, [r7, #16]
 8008566:	8abb      	ldrh	r3, [r7, #20]
 8008568:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800856a:	e003      	b.n	8008574 <tu_fifo_write+0x4a>
 800856c:	89fa      	ldrh	r2, [r7, #14]
 800856e:	8a3b      	ldrh	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	8a3a      	ldrh	r2, [r7, #16]
 8008576:	89fb      	ldrh	r3, [r7, #14]
 8008578:	429a      	cmp	r2, r3
 800857a:	d9f7      	bls.n	800856c <tu_fifo_write+0x42>
  return idx;
 800857c:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800857e:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008580:	8a7b      	ldrh	r3, [r7, #18]
 8008582:	461a      	mov	r2, r3
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fae2 	bl	8007b50 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	889b      	ldrh	r3, [r3, #4]
 8008590:	8ab9      	ldrh	r1, [r7, #20]
 8008592:	2201      	movs	r2, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fcd7 	bl	8007f48 <advance_index>
 800859a:	4603      	mov	r3, r0
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	811a      	strh	r2, [r3, #8]

    ret = true;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80085be:	88fa      	ldrh	r2, [r7, #6]
 80085c0:	2300      	movs	r3, #0
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff fdbb 	bl	8008140 <_tu_fifo_write_n>
 80085ca:	4603      	mov	r3, r0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	2301      	movs	r3, #1
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff fda9 	bl	8008140 <_tu_fifo_write_n>
 80085ee:	4603      	mov	r3, r0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800860c:	2301      	movs	r3, #1
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	79db      	ldrb	r3, [r3, #7]
 800862a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	429a      	cmp	r2, r3
 8008634:	d101      	bne.n	800863a <tu_fifo_set_overwritable+0x20>
    return true;
 8008636:	2301      	movs	r3, #1
 8008638:	e006      	b.n	8008648 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	79d3      	ldrb	r3, [r2, #7]
 800863e:	78f9      	ldrb	r1, [r7, #3]
 8008640:	f361 13c7 	bfi	r3, r1, #7, #1
 8008644:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008646:	2301      	movs	r3, #1
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
 8008660:	4613      	mov	r3, r2
 8008662:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  return NULL;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  return NULL;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 80086ca:	b480      	push	{r7}
 80086cc:	af00      	add	r7, sp, #0
}
 80086ce:	bf00      	nop
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0
}
 80086f2:	bf00      	nop
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	603a      	str	r2, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
 8008708:	460b      	mov	r3, r1
 800870a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8008724:	2301      	movs	r3, #1
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8008738:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <tud_mounted+0x20>)
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2301      	movne	r3, #1
 8008744:	2300      	moveq	r3, #0
 8008746:	b2db      	uxtb	r3, r3
}
 8008748:	4618      	mov	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	200010f0 	.word	0x200010f0

08008758 <tud_suspended>:

bool tud_suspended(void) {
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800875c:	4b07      	ldr	r3, [pc, #28]	@ (800877c <tud_suspended+0x24>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	b2db      	uxtb	r3, r3
}
 8008770:	4618      	mov	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	200010f0 	.word	0x200010f0

08008780 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8008784:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <tud_remote_wakeup+0x44>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <tud_remote_wakeup+0x2e>
 8008792:	4b0c      	ldr	r3, [pc, #48]	@ (80087c4 <tud_remote_wakeup+0x44>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <tud_remote_wakeup+0x2e>
 80087a0:	4b08      	ldr	r3, [pc, #32]	@ (80087c4 <tud_remote_wakeup+0x44>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 0308 	and.w	r3, r3, #8
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <tud_remote_wakeup+0x32>
 80087ae:	2300      	movs	r3, #0
 80087b0:	e005      	b.n	80087be <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 80087b2:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <tud_remote_wakeup+0x48>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f002 fba4 	bl	800af04 <dcd_remote_wakeup>
  return true;
 80087bc:	2301      	movs	r3, #1
}
 80087be:	4618      	mov	r0, r3
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200010f0 	.word	0x200010f0
 80087c8:	2000012d 	.word	0x2000012d

080087cc <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <tud_inited+0x1c>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2bff      	cmp	r3, #255	@ 0xff
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
}
 80087de:	4618      	mov	r0, r3
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	2000012d 	.word	0x2000012d

080087ec <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08c      	sub	sp, #48	@ 0x30
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80087f8:	f7ff ffe8 	bl	80087cc <tud_inited>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8008802:	2301      	movs	r3, #1
 8008804:	e09e      	b.n	8008944 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <tud_rhport_init+0x36>
 800880c:	4b4f      	ldr	r3, [pc, #316]	@ (800894c <tud_rhport_init+0x160>)
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d000      	beq.n	800881e <tud_rhport_init+0x32>
 800881c:	be00      	bkpt	0x0000
 800881e:	2300      	movs	r3, #0
 8008820:	e090      	b.n	8008944 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8008822:	222c      	movs	r2, #44	@ 0x2c
 8008824:	2100      	movs	r1, #0
 8008826:	484a      	ldr	r0, [pc, #296]	@ (8008950 <tud_rhport_init+0x164>)
 8008828:	f004 f8f7 	bl	800ca1a <memset>
  _usbd_queued_setup = 0;
 800882c:	4b49      	ldr	r3, [pc, #292]	@ (8008954 <tud_rhport_init+0x168>)
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	4b49      	ldr	r3, [pc, #292]	@ (8008958 <tud_rhport_init+0x16c>)
 8008834:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8008836:	bf00      	nop
 8008838:	4b48      	ldr	r3, [pc, #288]	@ (800895c <tud_rhport_init+0x170>)
 800883a:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fed9 	bl	80085f8 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8008846:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8008848:	4a45      	ldr	r2, [pc, #276]	@ (8008960 <tud_rhport_init+0x174>)
 800884a:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 800884c:	4b44      	ldr	r3, [pc, #272]	@ (8008960 <tud_rhport_init+0x174>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <tud_rhport_init+0x7e>
 8008854:	4b3d      	ldr	r3, [pc, #244]	@ (800894c <tud_rhport_init+0x160>)
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d000      	beq.n	8008866 <tud_rhport_init+0x7a>
 8008864:	be00      	bkpt	0x0000
 8008866:	2300      	movs	r3, #0
 8008868:	e06c      	b.n	8008944 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 800886a:	4b3e      	ldr	r3, [pc, #248]	@ (8008964 <tud_rhport_init+0x178>)
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008870:	483d      	ldr	r0, [pc, #244]	@ (8008968 <tud_rhport_init+0x17c>)
 8008872:	f3af 8000 	nop.w
 8008876:	4603      	mov	r3, r0
 8008878:	4a3c      	ldr	r2, [pc, #240]	@ (800896c <tud_rhport_init+0x180>)
 800887a:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800887c:	2300      	movs	r3, #0
 800887e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008882:	e03a      	b.n	80088fa <tud_rhport_init+0x10e>
 8008884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008888:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800888e:	4b36      	ldr	r3, [pc, #216]	@ (8008968 <tud_rhport_init+0x17c>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	7bfa      	ldrb	r2, [r7, #15]
 8008894:	429a      	cmp	r2, r3
 8008896:	d206      	bcs.n	80088a6 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008898:	4b34      	ldr	r3, [pc, #208]	@ (800896c <tud_rhport_init+0x180>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	015b      	lsls	r3, r3, #5
 80088a0:	4413      	add	r3, r2
 80088a2:	60bb      	str	r3, [r7, #8]
 80088a4:	e00d      	b.n	80088c2 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80088a6:	4b30      	ldr	r3, [pc, #192]	@ (8008968 <tud_rhport_init+0x17c>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	db07      	blt.n	80088c2 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008968 <tud_rhport_init+0x17c>)
 80088b6:	7812      	ldrb	r2, [r2, #0]
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	015b      	lsls	r3, r3, #5
 80088bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008970 <tud_rhport_init+0x184>)
 80088be:	4413      	add	r3, r2
 80088c0:	60bb      	str	r3, [r7, #8]
  return driver;
 80088c2:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 80088c4:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <tud_rhport_init+0xe8>
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <tud_rhport_init+0xfe>
 80088d4:	4b1d      	ldr	r3, [pc, #116]	@ (800894c <tud_rhport_init+0x160>)
 80088d6:	623b      	str	r3, [r7, #32]
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d000      	beq.n	80088e6 <tud_rhport_init+0xfa>
 80088e4:	be00      	bkpt	0x0000
 80088e6:	2300      	movs	r3, #0
 80088e8:	e02c      	b.n	8008944 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80088f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088f4:	3301      	adds	r3, #1
 80088f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80088fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008968 <tud_rhport_init+0x17c>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008904:	429a      	cmp	r2, r3
 8008906:	dabd      	bge.n	8008884 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008908:	4a1a      	ldr	r2, [pc, #104]	@ (8008974 <tud_rhport_init+0x188>)
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f002 f9cc 	bl	800acb0 <dcd_init>
 8008918:	4603      	mov	r3, r0
 800891a:	f083 0301 	eor.w	r3, r3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <tud_rhport_init+0x14e>
 8008924:	4b09      	ldr	r3, [pc, #36]	@ (800894c <tud_rhport_init+0x160>)
 8008926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d000      	beq.n	8008936 <tud_rhport_init+0x14a>
 8008934:	be00      	bkpt	0x0000
 8008936:	2300      	movs	r3, #0
 8008938:	e004      	b.n	8008944 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	4618      	mov	r0, r3
 800893e:	f002 fa55 	bl	800adec <dcd_int_enable>

  return true;
 8008942:	2301      	movs	r3, #1
}
 8008944:	4618      	mov	r0, r3
 8008946:	3730      	adds	r7, #48	@ 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	e000edf0 	.word	0xe000edf0
 8008950:	200010f0 	.word	0x200010f0
 8008954:	2000111c 	.word	0x2000111c
 8008958:	20000130 	.word	0x20000130
 800895c:	20000134 	.word	0x20000134
 8008960:	200011e8 	.word	0x200011e8
 8008964:	00000000 	.word	0x00000000
 8008968:	20001124 	.word	0x20001124
 800896c:	20001120 	.word	0x20001120
 8008970:	0800ec58 	.word	0x0800ec58
 8008974:	2000012d 	.word	0x2000012d

08008978 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008982:	2300      	movs	r3, #0
 8008984:	77fb      	strb	r3, [r7, #31]
 8008986:	e034      	b.n	80089f2 <configuration_reset+0x7a>
 8008988:	7ffb      	ldrb	r3, [r7, #31]
 800898a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008990:	4b25      	ldr	r3, [pc, #148]	@ (8008a28 <configuration_reset+0xb0>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	7cfa      	ldrb	r2, [r7, #19]
 8008996:	429a      	cmp	r2, r3
 8008998:	d206      	bcs.n	80089a8 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 800899a:	4b24      	ldr	r3, [pc, #144]	@ (8008a2c <configuration_reset+0xb4>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	7cfb      	ldrb	r3, [r7, #19]
 80089a0:	015b      	lsls	r3, r3, #5
 80089a2:	4413      	add	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e00d      	b.n	80089c4 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80089a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a28 <configuration_reset+0xb0>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	7cfb      	ldrb	r3, [r7, #19]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	db07      	blt.n	80089c4 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80089b4:	7cfb      	ldrb	r3, [r7, #19]
 80089b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a28 <configuration_reset+0xb0>)
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	015b      	lsls	r3, r3, #5
 80089be:	4a1c      	ldr	r2, [pc, #112]	@ (8008a30 <configuration_reset+0xb8>)
 80089c0:	4413      	add	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  return driver;
 80089c4:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80089c6:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d109      	bne.n	80089e2 <configuration_reset+0x6a>
 80089ce:	4b19      	ldr	r3, [pc, #100]	@ (8008a34 <configuration_reset+0xbc>)
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01f      	beq.n	8008a1e <configuration_reset+0xa6>
 80089de:	be00      	bkpt	0x0000
 80089e0:	e01d      	b.n	8008a1e <configuration_reset+0xa6>
    driver->reset(rhport);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	79fa      	ldrb	r2, [r7, #7]
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80089ec:	7ffb      	ldrb	r3, [r7, #31]
 80089ee:	3301      	adds	r3, #1
 80089f0:	77fb      	strb	r3, [r7, #31]
 80089f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a28 <configuration_reset+0xb0>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	7ffb      	ldrb	r3, [r7, #31]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	dac4      	bge.n	8008988 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80089fe:	222c      	movs	r2, #44	@ 0x2c
 8008a00:	2100      	movs	r1, #0
 8008a02:	480d      	ldr	r0, [pc, #52]	@ (8008a38 <configuration_reset+0xc0>)
 8008a04:	f004 f809 	bl	800ca1a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008a08:	2210      	movs	r2, #16
 8008a0a:	21ff      	movs	r1, #255	@ 0xff
 8008a0c:	480b      	ldr	r0, [pc, #44]	@ (8008a3c <configuration_reset+0xc4>)
 8008a0e:	f004 f804 	bl	800ca1a <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008a12:	220c      	movs	r2, #12
 8008a14:	21ff      	movs	r1, #255	@ 0xff
 8008a16:	480a      	ldr	r0, [pc, #40]	@ (8008a40 <configuration_reset+0xc8>)
 8008a18:	f003 ffff 	bl	800ca1a <memset>
 8008a1c:	e000      	b.n	8008a20 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008a1e:	bf00      	nop
}
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20001124 	.word	0x20001124
 8008a2c:	20001120 	.word	0x20001120
 8008a30:	0800ec58 	.word	0x0800ec58
 8008a34:	e000edf0 	.word	0xe000edf0
 8008a38:	200010f0 	.word	0x200010f0
 8008a3c:	200010f4 	.word	0x200010f4
 8008a40:	20001104 	.word	0x20001104

08008a44 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff ff91 	bl	8008978 <configuration_reset>
  usbd_control_reset();
 8008a56:	f001 fc37 	bl	800a2c8 <usbd_control_reset>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008a64:	b590      	push	{r4, r7, lr}
 8008a66:	b093      	sub	sp, #76	@ 0x4c
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008a70:	f7ff feac 	bl	80087cc <tud_inited>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f083 0301 	eor.w	r3, r3, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 8189 	bne.w	8008d94 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008a82:	4bb1      	ldr	r3, [pc, #708]	@ (8008d48 <tud_task_ext+0x2e4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a88:	f107 030c 	add.w	r3, r7, #12
 8008a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2000      	movs	r0, #0
 8008a98:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fcfa 	bl	800849a <tu_fifo_read>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	4798      	blx	r3

  return success;
 8008ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ab8:	f083 0301 	eor.w	r3, r3, #1
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f040 816a 	bne.w	8008d98 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008ac4:	7b7b      	ldrb	r3, [r7, #13]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2b07      	cmp	r3, #7
 8008aca:	f200 814b 	bhi.w	8008d64 <tud_task_ext+0x300>
 8008ace:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad4 <tud_task_ext+0x70>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	08008d19 	.word	0x08008d19
 8008ae0:	08008ccb 	.word	0x08008ccb
 8008ae4:	08008cf5 	.word	0x08008cf5
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008bc3 	.word	0x08008bc3
 8008af0:	08008d09 	.word	0x08008d09
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008af4:	7b3b      	ldrb	r3, [r7, #12]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff ffa4 	bl	8008a44 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008afc:	7c3a      	ldrb	r2, [r7, #16]
 8008afe:	4b93      	ldr	r3, [pc, #588]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b00:	709a      	strb	r2, [r3, #2]
        break;
 8008b02:	e146      	b.n	8008d92 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008b04:	7b3b      	ldrb	r3, [r7, #12]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff ff9c 	bl	8008a44 <usbd_reset>
        tud_umount_cb();
 8008b0c:	f7ff fddd 	bl	80086ca <tud_umount_cb>
        break;
 8008b10:	e13f      	b.n	8008d92 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008b12:	4b8f      	ldr	r3, [pc, #572]	@ (8008d50 <tud_task_ext+0x2ec>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <tud_task_ext+0xce>
 8008b1c:	4b8d      	ldr	r3, [pc, #564]	@ (8008d54 <tud_task_ext+0x2f0>)
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8137 	beq.w	8008d9c <tud_task_ext+0x338>
 8008b2e:	be00      	bkpt	0x0000
 8008b30:	e134      	b.n	8008d9c <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008b32:	4b87      	ldr	r3, [pc, #540]	@ (8008d50 <tud_task_ext+0x2ec>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	4b84      	ldr	r3, [pc, #528]	@ (8008d50 <tud_task_ext+0x2ec>)
 8008b3e:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008b40:	4b83      	ldr	r3, [pc, #524]	@ (8008d50 <tud_task_ext+0x2ec>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f040 8116 	bne.w	8008d78 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008b4c:	4a7f      	ldr	r2, [pc, #508]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b4e:	7813      	ldrb	r3, [r2, #0]
 8008b50:	f043 0301 	orr.w	r3, r3, #1
 8008b54:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008b56:	4a7d      	ldr	r2, [pc, #500]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b58:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008b64:	4a79      	ldr	r2, [pc, #484]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b66:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008b6a:	f023 0304 	bic.w	r3, r3, #4
 8008b6e:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8008b72:	4a76      	ldr	r2, [pc, #472]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b74:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8008b80:	4a72      	ldr	r2, [pc, #456]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008b82:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008b86:	f023 0304 	bic.w	r3, r3, #4
 8008b8a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8008b8e:	7b3a      	ldrb	r2, [r7, #12]
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	3304      	adds	r3, #4
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f000 f91f 	bl	8008ddc <process_control_request>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f083 0301 	eor.w	r3, r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80e8 	beq.w	8008d7c <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008bac:	7b3b      	ldrb	r3, [r7, #12]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 fb7b 	bl	800b2ac <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8008bb6:	7b3b      	ldrb	r3, [r7, #12]
 8008bb8:	2180      	movs	r1, #128	@ 0x80
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f002 fb76 	bl	800b2ac <dcd_edpt_stall>
        }
        break;
 8008bc0:	e0dc      	b.n	8008d7c <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8008bc2:	7c3b      	ldrb	r3, [r7, #16]
 8008bc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008bcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd8:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8008bda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008bde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008be2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008be6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bea:	09db      	lsrs	r3, r3, #7
 8008bec:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8008bee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8008bf2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008bf6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008bfa:	4954      	ldr	r1, [pc, #336]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008bfc:	0052      	lsls	r2, r2, #1
 8008bfe:	440a      	add	r2, r1
 8008c00:	4413      	add	r3, r2
 8008c02:	f103 0220 	add.w	r2, r3, #32
 8008c06:	7813      	ldrb	r3, [r2, #0]
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8008c0e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008c12:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008c16:	494d      	ldr	r1, [pc, #308]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	440a      	add	r2, r1
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f103 0220 	add.w	r2, r3, #32
 8008c22:	7813      	ldrb	r3, [r2, #0]
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8008c2a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8008c32:	7b38      	ldrb	r0, [r7, #12]
 8008c34:	7c7a      	ldrb	r2, [r7, #17]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008c3c:	f001 fb7a 	bl	800a334 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8008c40:	e0a7      	b.n	8008d92 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008c42:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008c46:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008c4a:	4940      	ldr	r1, [pc, #256]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008c4c:	0052      	lsls	r2, r2, #1
 8008c4e:	440a      	add	r2, r1
 8008c50:	4413      	add	r3, r2
 8008c52:	3314      	adds	r3, #20
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8008c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d58 <tud_task_ext+0x2f4>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d207      	bcs.n	8008c7a <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8008c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8008d5c <tud_task_ext+0x2f8>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c72:	015b      	lsls	r3, r3, #5
 8008c74:	4413      	add	r3, r2
 8008c76:	623b      	str	r3, [r7, #32]
 8008c78:	e00f      	b.n	8008c9a <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008c7a:	4b37      	ldr	r3, [pc, #220]	@ (8008d58 <tud_task_ext+0x2f4>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c84:	429a      	cmp	r2, r3
 8008c86:	db08      	blt.n	8008c9a <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c8c:	4a32      	ldr	r2, [pc, #200]	@ (8008d58 <tud_task_ext+0x2f4>)
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	015b      	lsls	r3, r3, #5
 8008c94:	4a32      	ldr	r2, [pc, #200]	@ (8008d60 <tud_task_ext+0x2fc>)
 8008c96:	4413      	add	r3, r2
 8008c98:	623b      	str	r3, [r7, #32]
  return driver;
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008c9c:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8008c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <tud_task_ext+0x254>
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d54 <tud_task_ext+0x2f0>)
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d075      	beq.n	8008da0 <tud_task_ext+0x33c>
 8008cb4:	be00      	bkpt	0x0000
 8008cb6:	e073      	b.n	8008da0 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8008cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cba:	699c      	ldr	r4, [r3, #24]
 8008cbc:	7b38      	ldrb	r0, [r7, #12]
 8008cbe:	7c7a      	ldrb	r2, [r7, #17]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008cc6:	47a0      	blx	r4
        break;
 8008cc8:	e063      	b.n	8008d92 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8008cca:	4b20      	ldr	r3, [pc, #128]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d053      	beq.n	8008d80 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bf14      	ite	ne
 8008ce6:	2301      	movne	r3, #1
 8008ce8:	2300      	moveq	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fcf3 	bl	80086d8 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008cf2:	e045      	b.n	8008d80 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8008cf4:	4b15      	ldr	r3, [pc, #84]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d040      	beq.n	8008d84 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8008d02:	f7ff fcf4 	bl	80086ee <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008d06:	e03d      	b.n	8008d84 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d03c      	beq.n	8008d88 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4610      	mov	r0, r2
 8008d14:	4798      	blx	r3
        }
        break;
 8008d16:	e037      	b.n	8008d88 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008d18:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <tud_task_ext+0x2e8>)
 8008d1a:	78db      	ldrb	r3, [r3, #3]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	2300      	movs	r3, #0
 8008d22:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008d24:	7efb      	ldrb	r3, [r7, #27]
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d026      	beq.n	8008d8c <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fc95 	bl	8008670 <tud_sof_cb>
        }
      break;
 8008d46:	e021      	b.n	8008d8c <tud_task_ext+0x328>
 8008d48:	200011e8 	.word	0x200011e8
 8008d4c:	200010f0 	.word	0x200010f0
 8008d50:	2000111c 	.word	0x2000111c
 8008d54:	e000edf0 	.word	0xe000edf0
 8008d58:	20001124 	.word	0x20001124
 8008d5c:	20001120 	.word	0x20001120
 8008d60:	0800ec58 	.word	0x0800ec58

      default:
        TU_BREAKPOINT();
 8008d64:	4b10      	ldr	r3, [pc, #64]	@ (8008da8 <tud_task_ext+0x344>)
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00d      	beq.n	8008d90 <tud_task_ext+0x32c>
 8008d74:	be00      	bkpt	0x0000
        break;
 8008d76:	e00b      	b.n	8008d90 <tud_task_ext+0x32c>
          break;
 8008d78:	bf00      	nop
 8008d7a:	e682      	b.n	8008a82 <tud_task_ext+0x1e>
        break;
 8008d7c:	bf00      	nop
 8008d7e:	e680      	b.n	8008a82 <tud_task_ext+0x1e>
        break;
 8008d80:	bf00      	nop
 8008d82:	e67e      	b.n	8008a82 <tud_task_ext+0x1e>
        break;
 8008d84:	bf00      	nop
 8008d86:	e67c      	b.n	8008a82 <tud_task_ext+0x1e>
        break;
 8008d88:	bf00      	nop
 8008d8a:	e67a      	b.n	8008a82 <tud_task_ext+0x1e>
      break;
 8008d8c:	bf00      	nop
 8008d8e:	e678      	b.n	8008a82 <tud_task_ext+0x1e>
        break;
 8008d90:	bf00      	nop
  while (1) {
 8008d92:	e676      	b.n	8008a82 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008d94:	bf00      	nop
 8008d96:	e004      	b.n	8008da2 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008d98:	bf00      	nop
 8008d9a:	e002      	b.n	8008da2 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8008da0:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8008da2:	374c      	adds	r7, #76	@ 0x4c
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd90      	pop	{r4, r7, pc}
 8008da8:	e000edf0 	.word	0xe000edf0

08008dac <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fa8e 	bl	800a2e0 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	7bf8      	ldrb	r0, [r7, #15]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b09a      	sub	sp, #104	@ 0x68
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8008de8:	2000      	movs	r0, #0
 8008dea:	f001 fa79 	bl	800a2e0 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b60      	cmp	r3, #96	@ 0x60
 8008dfa:	d10a      	bne.n	8008e12 <process_control_request+0x36>
 8008dfc:	4ba5      	ldr	r3, [pc, #660]	@ (8009094 <process_control_request+0x2b8>)
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d000      	beq.n	8008e0e <process_control_request+0x32>
 8008e0c:	be00      	bkpt	0x0000
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e2bb      	b.n	800938a <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b40      	cmp	r3, #64	@ 0x40
 8008e1e:	d10a      	bne.n	8008e36 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8008e20:	489d      	ldr	r0, [pc, #628]	@ (8009098 <process_control_request+0x2bc>)
 8008e22:	f001 fa5d 	bl	800a2e0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fc65 	bl	80086fc <tud_vendor_control_xfer_cb>
 8008e32:	4603      	mov	r3, r0
 8008e34:	e2a9      	b.n	800938a <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	f000 81ca 	beq.w	80091da <process_control_request+0x3fe>
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	f300 8292 	bgt.w	8009370 <process_control_request+0x594>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <process_control_request+0x7c>
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	f000 8151 	beq.w	80090f8 <process_control_request+0x31c>
 8008e56:	e28b      	b.n	8009370 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	d143      	bne.n	8008eee <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	889b      	ldrh	r3, [r3, #4]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008e6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8008e76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e7a:	2b0f      	cmp	r3, #15
 8008e7c:	d901      	bls.n	8008e82 <process_control_request+0xa6>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e283      	b.n	800938a <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8008e82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e86:	4a85      	ldr	r2, [pc, #532]	@ (800909c <process_control_request+0x2c0>)
 8008e88:	4413      	add	r3, r2
 8008e8a:	791b      	ldrb	r3, [r3, #4]
 8008e8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8008e94:	4b82      	ldr	r3, [pc, #520]	@ (80090a0 <process_control_request+0x2c4>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d207      	bcs.n	8008eb0 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8008ea0:	4b80      	ldr	r3, [pc, #512]	@ (80090a4 <process_control_request+0x2c8>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008ea8:	015b      	lsls	r3, r3, #5
 8008eaa:	4413      	add	r3, r2
 8008eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eae:	e00f      	b.n	8008ed0 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80090a0 <process_control_request+0x2c4>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	db08      	blt.n	8008ed0 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008ec2:	4a77      	ldr	r2, [pc, #476]	@ (80090a0 <process_control_request+0x2c4>)
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	1a9b      	subs	r3, r3, r2
 8008ec8:	015b      	lsls	r3, r3, #5
 8008eca:	4a77      	ldr	r2, [pc, #476]	@ (80090a8 <process_control_request+0x2cc>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8008ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8008ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <process_control_request+0x102>
 8008eda:	2300      	movs	r3, #0
 8008edc:	e255      	b.n	800938a <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff61 	bl	8008dac <invoke_class_control>
 8008eea:	4603      	mov	r3, r0
 8008eec:	e24d      	b.n	800938a <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8008efc:	4b65      	ldr	r3, [pc, #404]	@ (8009094 <process_control_request+0x2b8>)
 8008efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d000      	beq.n	8008f0e <process_control_request+0x132>
 8008f0c:	be00      	bkpt	0x0000
        return false;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e23b      	b.n	800938a <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	f200 80e1 	bhi.w	80090de <process_control_request+0x302>
 8008f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <process_control_request+0x148>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	080090ad 	.word	0x080090ad
 8008f28:	08009071 	.word	0x08009071
 8008f2c:	080090df 	.word	0x080090df
 8008f30:	0800904b 	.word	0x0800904b
 8008f34:	080090df 	.word	0x080090df
 8008f38:	08008f4d 	.word	0x08008f4d
 8008f3c:	08009031 	.word	0x08009031
 8008f40:	080090df 	.word	0x080090df
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	08008f89 	.word	0x08008f89
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8008f4c:	6838      	ldr	r0, [r7, #0]
 8008f4e:	f001 f9d7 	bl	800a300 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 ff94 	bl	800ae8c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8008f64:	4a4d      	ldr	r2, [pc, #308]	@ (800909c <process_control_request+0x2c0>)
 8008f66:	7813      	ldrb	r3, [r2, #0]
 8008f68:	f043 0302 	orr.w	r3, r3, #2
 8008f6c:	7013      	strb	r3, [r2, #0]
        break;
 8008f6e:	e0c2      	b.n	80090f6 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8008f70:	4b4a      	ldr	r3, [pc, #296]	@ (800909c <process_control_request+0x2c0>)
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8008f78:	f107 0213 	add.w	r2, r7, #19
 8008f7c:	79f8      	ldrb	r0, [r7, #7]
 8008f7e:	2301      	movs	r3, #1
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	f001 f931 	bl	800a1e8 <tud_control_xfer>
        }
        break;
 8008f86:	e0b6      	b.n	80090f6 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	885b      	ldrh	r3, [r3, #2]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8008f92:	4b42      	ldr	r3, [pc, #264]	@ (800909c <process_control_request+0x2c0>)
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d041      	beq.n	8009024 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8008fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800909c <process_control_request+0x2c0>)
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d014      	beq.n	8008fd4 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2100      	movs	r1, #0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 f832 	bl	800b018 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 f896 	bl	800b0e8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8008fbc:	4b37      	ldr	r3, [pc, #220]	@ (800909c <process_control_request+0x2c0>)
 8008fbe:	789b      	ldrb	r3, [r3, #2]
 8008fc0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fcd6 	bl	8008978 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8008fcc:	4a33      	ldr	r2, [pc, #204]	@ (800909c <process_control_request+0x2c0>)
 8008fce:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008fd2:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8008fd4:	4a31      	ldr	r2, [pc, #196]	@ (800909c <process_control_request+0x2c0>)
 8008fd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008fda:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8008fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01d      	beq.n	8009020 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8008fe4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f9d5 	bl	800939c <process_set_config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f083 0301 	eor.w	r3, r3, #1
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00d      	beq.n	800901a <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 8008ffe:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <process_control_request+0x2b8>)
 8009000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d000      	beq.n	8009010 <process_control_request+0x234>
 800900e:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8009010:	4b22      	ldr	r3, [pc, #136]	@ (800909c <process_control_request+0x2c0>)
 8009012:	2200      	movs	r2, #0
 8009014:	705a      	strb	r2, [r3, #1]
                return false;
 8009016:	2300      	movs	r3, #0
 8009018:	e1b7      	b.n	800938a <process_control_request+0x5ae>
              }
              tud_mount_cb();
 800901a:	f7ff fb4f 	bl	80086bc <tud_mount_cb>
 800901e:	e001      	b.n	8009024 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8009020:	f7ff fb53 	bl	80086ca <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f86b 	bl	800a104 <tud_control_status>
        }
        break;
 800902e:	e062      	b.n	80090f6 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fae5 	bl	8009604 <process_get_descriptor>
 800903a:	4603      	mov	r3, r0
 800903c:	f083 0301 	eor.w	r3, r3, #1
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d056      	beq.n	80090f4 <process_control_request+0x318>
 8009046:	2300      	movs	r3, #0
 8009048:	e19f      	b.n	800938a <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10b      	bne.n	800906c <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8009054:	4a11      	ldr	r2, [pc, #68]	@ (800909c <process_control_request+0x2c0>)
 8009056:	7813      	ldrb	r3, [r2, #0]
 8009058:	f043 0308 	orr.w	r3, r3, #8
 800905c:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f001 f84e 	bl	800a104 <tud_control_status>
            break;
 8009068:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800906a:	e044      	b.n	80090f6 <process_control_request+0x31a>
            default: return false;
 800906c:	2300      	movs	r3, #0
 800906e:	e18c      	b.n	800938a <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	d001      	beq.n	800907e <process_control_request+0x2a2>
 800907a:	2300      	movs	r3, #0
 800907c:	e185      	b.n	800938a <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800907e:	4a07      	ldr	r2, [pc, #28]	@ (800909c <process_control_request+0x2c0>)
 8009080:	7813      	ldrb	r3, [r2, #0]
 8009082:	f023 0308 	bic.w	r3, r3, #8
 8009086:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f839 	bl	800a104 <tud_control_status>
        break;
 8009092:	e030      	b.n	80090f6 <process_control_request+0x31a>
 8009094:	e000edf0 	.word	0xe000edf0
 8009098:	080086fd 	.word	0x080086fd
 800909c:	200010f0 	.word	0x200010f0
 80090a0:	20001124 	.word	0x20001124
 80090a4:	20001120 	.word	0x20001120
 80090a8:	0800ec58 	.word	0x0800ec58

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80090ac:	4b94      	ldr	r3, [pc, #592]	@ (8009300 <process_control_request+0x524>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <process_control_request+0x524>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	089b      	lsrs	r3, r3, #2
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80090ce:	f107 0210 	add.w	r2, r7, #16
 80090d2:	79f8      	ldrb	r0, [r7, #7]
 80090d4:	2302      	movs	r3, #2
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	f001 f886 	bl	800a1e8 <tud_control_xfer>
          break;
 80090dc:	e00b      	b.n	80090f6 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80090de:	4b89      	ldr	r3, [pc, #548]	@ (8009304 <process_control_request+0x528>)
 80090e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d000      	beq.n	80090f0 <process_control_request+0x314>
 80090ee:	be00      	bkpt	0x0000
 80090f0:	2300      	movs	r3, #0
 80090f2:	e14a      	b.n	800938a <process_control_request+0x5ae>
        break;
 80090f4:	bf00      	nop
      }
    break;
 80090f6:	e147      	b.n	8009388 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	889b      	ldrh	r3, [r3, #4]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8009108:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800910c:	2b0f      	cmp	r3, #15
 800910e:	d901      	bls.n	8009114 <process_control_request+0x338>
 8009110:	2300      	movs	r3, #0
 8009112:	e13a      	b.n	800938a <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009114:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009118:	4a79      	ldr	r2, [pc, #484]	@ (8009300 <process_control_request+0x524>)
 800911a:	4413      	add	r3, r2
 800911c:	791b      	ldrb	r3, [r3, #4]
 800911e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8009126:	4b78      	ldr	r3, [pc, #480]	@ (8009308 <process_control_request+0x52c>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800912e:	429a      	cmp	r2, r3
 8009130:	d207      	bcs.n	8009142 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8009132:	4b76      	ldr	r3, [pc, #472]	@ (800930c <process_control_request+0x530>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800913a:	015b      	lsls	r3, r3, #5
 800913c:	4413      	add	r3, r2
 800913e:	623b      	str	r3, [r7, #32]
 8009140:	e00f      	b.n	8009162 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009142:	4b71      	ldr	r3, [pc, #452]	@ (8009308 <process_control_request+0x52c>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800914c:	429a      	cmp	r2, r3
 800914e:	db08      	blt.n	8009162 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009150:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009154:	4a6c      	ldr	r2, [pc, #432]	@ (8009308 <process_control_request+0x52c>)
 8009156:	7812      	ldrb	r2, [r2, #0]
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	015b      	lsls	r3, r3, #5
 800915c:	4a6c      	ldr	r2, [pc, #432]	@ (8009310 <process_control_request+0x534>)
 800915e:	4413      	add	r3, r2
 8009160:	623b      	str	r3, [r7, #32]
  return driver;
 8009162:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009164:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8009166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <process_control_request+0x394>
 800916c:	2300      	movs	r3, #0
 800916e:	e10c      	b.n	800938a <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fe18 	bl	8008dac <invoke_class_control>
 800917c:	4603      	mov	r3, r0
 800917e:	f083 0301 	eor.w	r3, r3, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80fe 	beq.w	8009386 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <process_control_request+0x3c0>
 8009198:	2300      	movs	r3, #0
 800919a:	e0f6      	b.n	800938a <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	3b0a      	subs	r3, #10
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d816      	bhi.n	80091d4 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80091a6:	2000      	movs	r0, #0
 80091a8:	f001 f89a 	bl	800a2e0 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b0a      	cmp	r3, #10
 80091b2:	d109      	bne.n	80091c8 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80091b8:	f107 020f 	add.w	r2, r7, #15
 80091bc:	79f8      	ldrb	r0, [r7, #7]
 80091be:	2301      	movs	r3, #1
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	f001 f811 	bl	800a1e8 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80091c6:	e007      	b.n	80091d8 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 ff99 	bl	800a104 <tud_control_status>
          break;
 80091d2:	e001      	b.n	80091d8 <process_control_request+0x3fc>

          default: return false;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e0d8      	b.n	800938a <process_control_request+0x5ae>
        }
      }
      break;
 80091d8:	e0d5      	b.n	8009386 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	889b      	ldrh	r3, [r3, #4]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	83bb      	strh	r3, [r7, #28]
 80091e2:	8bbb      	ldrh	r3, [r7, #28]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80091ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80091ee:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80091f0:	7fbb      	ldrb	r3, [r7, #30]
 80091f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f6:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80091f8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80091fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009200:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	09db      	lsrs	r3, r3, #7
 8009206:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8009208:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800920c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009210:	2b05      	cmp	r3, #5
 8009212:	d90a      	bls.n	800922a <process_control_request+0x44e>
 8009214:	4b3b      	ldr	r3, [pc, #236]	@ (8009304 <process_control_request+0x528>)
 8009216:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d000      	beq.n	8009226 <process_control_request+0x44a>
 8009224:	be00      	bkpt	0x0000
 8009226:	2300      	movs	r3, #0
 8009228:	e0af      	b.n	800938a <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800922a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800922e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8009232:	4933      	ldr	r1, [pc, #204]	@ (8009300 <process_control_request+0x524>)
 8009234:	0052      	lsls	r2, r2, #1
 8009236:	440a      	add	r2, r1
 8009238:	4413      	add	r3, r2
 800923a:	3314      	adds	r3, #20
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8009244:	4b30      	ldr	r3, [pc, #192]	@ (8009308 <process_control_request+0x52c>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	7efa      	ldrb	r2, [r7, #27]
 800924a:	429a      	cmp	r2, r3
 800924c:	d206      	bcs.n	800925c <process_control_request+0x480>
    driver = &_app_driver[drvid];
 800924e:	4b2f      	ldr	r3, [pc, #188]	@ (800930c <process_control_request+0x530>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	7efb      	ldrb	r3, [r7, #27]
 8009254:	015b      	lsls	r3, r3, #5
 8009256:	4413      	add	r3, r2
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e00d      	b.n	8009278 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800925c:	4b2a      	ldr	r3, [pc, #168]	@ (8009308 <process_control_request+0x52c>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	7efb      	ldrb	r3, [r7, #27]
 8009264:	429a      	cmp	r2, r3
 8009266:	db07      	blt.n	8009278 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009268:	7efb      	ldrb	r3, [r7, #27]
 800926a:	4a27      	ldr	r2, [pc, #156]	@ (8009308 <process_control_request+0x52c>)
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	015b      	lsls	r3, r3, #5
 8009272:	4a27      	ldr	r2, [pc, #156]	@ (8009310 <process_control_request+0x534>)
 8009274:	4413      	add	r3, r2
 8009276:	617b      	str	r3, [r7, #20]
  return driver;
 8009278:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800927a:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00c      	beq.n	80092a4 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 800928a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <process_control_request+0x4b8>
 8009290:	2300      	movs	r3, #0
 8009292:	e07a      	b.n	800938a <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fd86 	bl	8008dac <invoke_class_control>
 80092a0:	4603      	mov	r3, r0
 80092a2:	e072      	b.n	800938a <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d017      	beq.n	80092dc <process_control_request+0x500>
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	dc52      	bgt.n	8009356 <process_control_request+0x57a>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <process_control_request+0x4de>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d011      	beq.n	80092dc <process_control_request+0x500>
 80092b8:	e04d      	b.n	8009356 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80092ba:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fec8 	bl	800a058 <usbd_edpt_stalled>
 80092c8:	4603      	mov	r3, r0
 80092ca:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80092cc:	f107 020c 	add.w	r2, r7, #12
 80092d0:	79f8      	ldrb	r0, [r7, #7]
 80092d2:	2302      	movs	r3, #2
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	f000 ff87 	bl	800a1e8 <tud_control_xfer>
          }
          break;
 80092da:	e048      	b.n	800936e <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	885b      	ldrh	r3, [r3, #2]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d11d      	bne.n	8009322 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	785b      	ldrb	r3, [r3, #1]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d112      	bne.n	8009314 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80092ee:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fe70 	bl	8009fdc <usbd_edpt_clear_stall>
 80092fc:	e011      	b.n	8009322 <process_control_request+0x546>
 80092fe:	bf00      	nop
 8009300:	200010f0 	.word	0x200010f0
 8009304:	e000edf0 	.word	0xe000edf0
 8009308:	20001124 	.word	0x20001124
 800930c:	20001120 	.word	0x20001120
 8009310:	0800ec58 	.word	0x0800ec58
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8009314:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fe1f 	bl	8009f60 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8009322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009324:	2b00      	cmp	r3, #0
 8009326:	d021      	beq.n	800936c <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fd3c 	bl	8008dac <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8009334:	2000      	movs	r0, #0
 8009336:	f000 ffd3 	bl	800a2e0 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 800933a:	4b16      	ldr	r3, [pc, #88]	@ (8009394 <process_control_request+0x5b8>)
 800933c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009340:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d110      	bne.n	800936c <process_control_request+0x590>
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fed8 	bl	800a104 <tud_control_status>
            }
          }
          break;
 8009354:	e00a      	b.n	800936c <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8009356:	4b10      	ldr	r3, [pc, #64]	@ (8009398 <process_control_request+0x5bc>)
 8009358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800935a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d000      	beq.n	8009368 <process_control_request+0x58c>
 8009366:	be00      	bkpt	0x0000
            return false;
 8009368:	2300      	movs	r3, #0
 800936a:	e00e      	b.n	800938a <process_control_request+0x5ae>
          break;
 800936c:	bf00      	nop
        }
      }
    }
    break;
 800936e:	e00b      	b.n	8009388 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009370:	4b09      	ldr	r3, [pc, #36]	@ (8009398 <process_control_request+0x5bc>)
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
 8009374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d000      	beq.n	8009382 <process_control_request+0x5a6>
 8009380:	be00      	bkpt	0x0000
      return false;
 8009382:	2300      	movs	r3, #0
 8009384:	e001      	b.n	800938a <process_control_request+0x5ae>
      break;
 8009386:	bf00      	nop
  }

  return true;
 8009388:	2301      	movs	r3, #1
}
 800938a:	4618      	mov	r0, r3
 800938c:	3768      	adds	r7, #104	@ 0x68
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	200010f0 	.word	0x200010f0
 8009398:	e000edf0 	.word	0xe000edf0

0800939c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b096      	sub	sp, #88	@ 0x58
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	460a      	mov	r2, r1
 80093a6:	71fb      	strb	r3, [r7, #7]
 80093a8:	4613      	mov	r3, r2
 80093aa:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80093ac:	79bb      	ldrb	r3, [r7, #6]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fa fa88 	bl	80038c8 <tud_descriptor_configuration_cb>
 80093b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80093ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <process_set_config+0x2c>
 80093c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d00a      	beq.n	80093de <process_set_config+0x42>
 80093c8:	4b87      	ldr	r3, [pc, #540]	@ (80095e8 <process_set_config+0x24c>)
 80093ca:	623b      	str	r3, [r7, #32]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d000      	beq.n	80093da <process_set_config+0x3e>
 80093d8:	be00      	bkpt	0x0000
 80093da:	2300      	movs	r3, #0
 80093dc:	e100      	b.n	80095e0 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80093de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e0:	79db      	ldrb	r3, [r3, #7]
 80093e2:	115b      	asrs	r3, r3, #5
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	b2d9      	uxtb	r1, r3
 80093ea:	4a80      	ldr	r2, [pc, #512]	@ (80095ec <process_set_config+0x250>)
 80093ec:	7813      	ldrb	r3, [r2, #0]
 80093ee:	f361 1304 	bfi	r3, r1, #4, #1
 80093f2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80093f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093f6:	79db      	ldrb	r3, [r3, #7]
 80093f8:	119b      	asrs	r3, r3, #6
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	b2d9      	uxtb	r1, r3
 8009400:	4a7a      	ldr	r2, [pc, #488]	@ (80095ec <process_set_config+0x250>)
 8009402:	7813      	ldrb	r3, [r2, #0]
 8009404:	f361 1345 	bfi	r3, r1, #5, #1
 8009408:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 800940a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800940c:	3309      	adds	r3, #9
 800940e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8009410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009412:	885b      	ldrh	r3, [r3, #2]
 8009414:	b29b      	uxth	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800941a:	4413      	add	r3, r2
 800941c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800941e:	e0d9      	b.n	80095d4 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8009420:	2301      	movs	r3, #1
 8009422:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009428:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	3301      	adds	r3, #1
 800942e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8009430:	2b0b      	cmp	r3, #11
 8009432:	d10f      	bne.n	8009454 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8009434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009436:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8009438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800943a:	78db      	ldrb	r3, [r3, #3]
 800943c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009442:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8009452:	657b      	str	r3, [r7, #84]	@ 0x54
 8009454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009456:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	3301      	adds	r3, #1
 800945c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800945e:	2b04      	cmp	r3, #4
 8009460:	d00a      	beq.n	8009478 <process_set_config+0xdc>
 8009462:	4b61      	ldr	r3, [pc, #388]	@ (80095e8 <process_set_config+0x24c>)
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d000      	beq.n	8009474 <process_set_config+0xd8>
 8009472:	be00      	bkpt	0x0000
 8009474:	2300      	movs	r3, #0
 8009476:	e0b3      	b.n	80095e0 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8009478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800947a:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 800947c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800947e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009484:	2300      	movs	r3, #0
 8009486:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800948a:	e089      	b.n	80095a0 <process_set_config+0x204>
 800948c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009490:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8009496:	4b56      	ldr	r3, [pc, #344]	@ (80095f0 <process_set_config+0x254>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	7bfa      	ldrb	r2, [r7, #15]
 800949c:	429a      	cmp	r2, r3
 800949e:	d206      	bcs.n	80094ae <process_set_config+0x112>
    driver = &_app_driver[drvid];
 80094a0:	4b54      	ldr	r3, [pc, #336]	@ (80095f4 <process_set_config+0x258>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	015b      	lsls	r3, r3, #5
 80094a8:	4413      	add	r3, r2
 80094aa:	60bb      	str	r3, [r7, #8]
 80094ac:	e00d      	b.n	80094ca <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80094ae:	4b50      	ldr	r3, [pc, #320]	@ (80095f0 <process_set_config+0x254>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	db07      	blt.n	80094ca <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	4a4c      	ldr	r2, [pc, #304]	@ (80095f0 <process_set_config+0x254>)
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	015b      	lsls	r3, r3, #5
 80094c4:	4a4c      	ldr	r2, [pc, #304]	@ (80095f8 <process_set_config+0x25c>)
 80094c6:	4413      	add	r3, r2
 80094c8:	60bb      	str	r3, [r7, #8]
  return driver;
 80094ca:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <process_set_config+0x14e>
 80094d4:	4b44      	ldr	r3, [pc, #272]	@ (80095e8 <process_set_config+0x24c>)
 80094d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d000      	beq.n	80094e6 <process_set_config+0x14a>
 80094e4:	be00      	bkpt	0x0000
 80094e6:	2300      	movs	r3, #0
 80094e8:	e07a      	b.n	80095e0 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80094f0:	79f8      	ldrb	r0, [r7, #7]
 80094f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094f4:	4798      	blx	r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80094fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d94a      	bls.n	8009596 <process_set_config+0x1fa>
 8009500:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009502:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009504:	429a      	cmp	r2, r3
 8009506:	d846      	bhi.n	8009596 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8009508:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800950c:	2b01      	cmp	r3, #1
 800950e:	d107      	bne.n	8009520 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8009510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	4a39      	ldr	r2, [pc, #228]	@ (80095fc <process_set_config+0x260>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d102      	bne.n	8009520 <process_set_config+0x184>
 800951a:	2302      	movs	r3, #2
 800951c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009526:	e024      	b.n	8009572 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8009528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800952a:	789a      	ldrb	r2, [r3, #2]
 800952c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009530:	4413      	add	r3, r2
 8009532:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8009536:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800953a:	4a2c      	ldr	r2, [pc, #176]	@ (80095ec <process_set_config+0x250>)
 800953c:	4413      	add	r3, r2
 800953e:	791b      	ldrb	r3, [r3, #4]
 8009540:	2bff      	cmp	r3, #255	@ 0xff
 8009542:	d00a      	beq.n	800955a <process_set_config+0x1be>
 8009544:	4b28      	ldr	r3, [pc, #160]	@ (80095e8 <process_set_config+0x24c>)
 8009546:	633b      	str	r3, [r7, #48]	@ 0x30
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d000      	beq.n	8009556 <process_set_config+0x1ba>
 8009554:	be00      	bkpt	0x0000
 8009556:	2300      	movs	r3, #0
 8009558:	e042      	b.n	80095e0 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 800955a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800955e:	4a23      	ldr	r2, [pc, #140]	@ (80095ec <process_set_config+0x250>)
 8009560:	4413      	add	r3, r2
 8009562:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009566:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009568:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800956c:	3301      	adds	r3, #1
 800956e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009572:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009576:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800957a:	429a      	cmp	r2, r3
 800957c:	d3d4      	bcc.n	8009528 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800957e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009582:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009586:	481e      	ldr	r0, [pc, #120]	@ (8009600 <process_set_config+0x264>)
 8009588:	f003 f81c 	bl	800c5c4 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800958c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800958e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009590:	4413      	add	r3, r2
 8009592:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009594:	e00c      	b.n	80095b0 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009596:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800959a:	3301      	adds	r3, #1
 800959c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80095a0:	4b13      	ldr	r3, [pc, #76]	@ (80095f0 <process_set_config+0x254>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80095aa:	429a      	cmp	r2, r3
 80095ac:	f6bf af6e 	bge.w	800948c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80095b0:	4b0f      	ldr	r3, [pc, #60]	@ (80095f0 <process_set_config+0x254>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80095ba:	429a      	cmp	r2, r3
 80095bc:	da0a      	bge.n	80095d4 <process_set_config+0x238>
 80095be:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <process_set_config+0x24c>)
 80095c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d000      	beq.n	80095d0 <process_set_config+0x234>
 80095ce:	be00      	bkpt	0x0000
 80095d0:	2300      	movs	r3, #0
 80095d2:	e005      	b.n	80095e0 <process_set_config+0x244>
  while( p_desc < desc_end )
 80095d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d8:	429a      	cmp	r2, r3
 80095da:	f4ff af21 	bcc.w	8009420 <process_set_config+0x84>
  }

  return true;
 80095de:	2301      	movs	r3, #1
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3758      	adds	r7, #88	@ 0x58
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	e000edf0 	.word	0xe000edf0
 80095ec:	200010f0 	.word	0x200010f0
 80095f0:	20001124 	.word	0x20001124
 80095f4:	20001120 	.word	0x20001120
 80095f8:	0800ec58 	.word	0x0800ec58
 80095fc:	08006b31 	.word	0x08006b31
 8009600:	20001104 	.word	0x20001104

08009604 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b094      	sub	sp, #80	@ 0x50
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	6039      	str	r1, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	885b      	ldrh	r3, [r3, #2]
 8009614:	b29b      	uxth	r3, r3
 8009616:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8009618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b29b      	uxth	r3, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	b29b      	uxth	r3, r3
 800962a:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800962c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009634:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009638:	3b01      	subs	r3, #1
 800963a:	2b0e      	cmp	r3, #14
 800963c:	f200 80b4 	bhi.w	80097a8 <process_get_descriptor+0x1a4>
 8009640:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <process_get_descriptor+0x44>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009685 	.word	0x08009685
 800964c:	080096e9 	.word	0x080096e9
 8009650:	0800974f 	.word	0x0800974f
 8009654:	080097a9 	.word	0x080097a9
 8009658:	080097a9 	.word	0x080097a9
 800965c:	08009783 	.word	0x08009783
 8009660:	080096e9 	.word	0x080096e9
 8009664:	080097a9 	.word	0x080097a9
 8009668:	080097a9 	.word	0x080097a9
 800966c:	080097a9 	.word	0x080097a9
 8009670:	080097a9 	.word	0x080097a9
 8009674:	080097a9 	.word	0x080097a9
 8009678:	080097a9 	.word	0x080097a9
 800967c:	080097a9 	.word	0x080097a9
 8009680:	080096b7 	.word	0x080096b7
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009684:	f7fa f908 	bl	8003898 <tud_descriptor_device_cb>
 8009688:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 800968a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <process_get_descriptor+0xa2>
 8009690:	4b48      	ldr	r3, [pc, #288]	@ (80097b4 <process_get_descriptor+0x1b0>)
 8009692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d000      	beq.n	80096a2 <process_get_descriptor+0x9e>
 80096a0:	be00      	bkpt	0x0000
 80096a2:	2300      	movs	r3, #0
 80096a4:	e081      	b.n	80097aa <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80096a6:	79f8      	ldrb	r0, [r7, #7]
 80096a8:	2312      	movs	r3, #18
 80096aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	f000 fd9b 	bl	800a1e8 <tud_control_xfer>
 80096b2:	4603      	mov	r3, r0
 80096b4:	e079      	b.n	80097aa <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80096b6:	f7fe ffe5 	bl	8008684 <tud_descriptor_bos_cb>
 80096ba:	4603      	mov	r3, r0
 80096bc:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 80096be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <process_get_descriptor+0xc4>
 80096c4:	2300      	movs	r3, #0
 80096c6:	e070      	b.n	80097aa <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80096c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ca:	3302      	adds	r3, #2
 80096cc:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80096d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80096dc:	79f8      	ldrb	r0, [r7, #7]
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	f000 fd82 	bl	800a1e8 <tud_control_xfer>
 80096e4:	4603      	mov	r3, r0
 80096e6:	e060      	b.n	80097aa <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 80096e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d114      	bne.n	800971a <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80096f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fa f8e7 	bl	80038c8 <tud_descriptor_configuration_cb>
 80096fa:	4603      	mov	r3, r0
 80096fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 80096fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d116      	bne.n	8009732 <process_get_descriptor+0x12e>
 8009704:	4b2b      	ldr	r3, [pc, #172]	@ (80097b4 <process_get_descriptor+0x1b0>)
 8009706:	637b      	str	r3, [r7, #52]	@ 0x34
 8009708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d000      	beq.n	8009716 <process_get_descriptor+0x112>
 8009714:	be00      	bkpt	0x0000
 8009716:	2300      	movs	r3, #0
 8009718:	e047      	b.n	80097aa <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800971a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe ffc0 	bl	80086a4 <tud_descriptor_other_speed_configuration_cb>
 8009724:	4603      	mov	r3, r0
 8009726:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8009728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <process_get_descriptor+0x12e>
 800972e:	2300      	movs	r3, #0
 8009730:	e03b      	b.n	80097aa <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8009732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009734:	3302      	adds	r3, #2
 8009736:	61fb      	str	r3, [r7, #28]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800973e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009740:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009742:	79f8      	ldrb	r0, [r7, #7]
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	f000 fd4f 	bl	800a1e8 <tud_control_xfer>
 800974a:	4603      	mov	r3, r0
 800974c:	e02d      	b.n	80097aa <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	889b      	ldrh	r3, [r3, #4]
 8009752:	b29a      	uxth	r2, r3
 8009754:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7fa f8c2 	bl	80038e4 <tud_descriptor_string_cb>
 8009760:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8009762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <process_get_descriptor+0x168>
 8009768:	2300      	movs	r3, #0
 800976a:	e01e      	b.n	80097aa <process_get_descriptor+0x1a6>
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009774:	79f8      	ldrb	r0, [r7, #7]
 8009776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	f000 fd35 	bl	800a1e8 <tud_control_xfer>
 800977e:	4603      	mov	r3, r0
 8009780:	e013      	b.n	80097aa <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8009782:	f7fe ff87 	bl	8008694 <tud_descriptor_device_qualifier_cb>
 8009786:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8009788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <process_get_descriptor+0x18e>
 800978e:	2300      	movs	r3, #0
 8009790:	e00b      	b.n	80097aa <process_get_descriptor+0x1a6>
 8009792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800979a:	79f8      	ldrb	r0, [r7, #7]
 800979c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	f000 fd22 	bl	800a1e8 <tud_control_xfer>
 80097a4:	4603      	mov	r3, r0
 80097a6:	e000      	b.n	80097aa <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 80097a8:	2300      	movs	r3, #0
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3750      	adds	r7, #80	@ 0x50
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	e000edf0 	.word	0xe000edf0

080097b8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b0a0      	sub	sp, #128	@ 0x80
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	3b02      	subs	r3, #2
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	f200 8175 	bhi.w	8009ac0 <dcd_event_handler+0x308>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <dcd_event_handler+0x24>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097f1 	.word	0x080097f1
 80097e0:	08009861 	.word	0x08009861
 80097e4:	0800981d 	.word	0x0800981d
 80097e8:	0800983f 	.word	0x0800983f
 80097ec:	08009a8d 	.word	0x08009a8d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80097f0:	4aac      	ldr	r2, [pc, #688]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 80097f2:	7813      	ldrb	r3, [r2, #0]
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80097fa:	4aaa      	ldr	r2, [pc, #680]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 80097fc:	7813      	ldrb	r3, [r2, #0]
 80097fe:	f023 0302 	bic.w	r3, r3, #2
 8009802:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8009804:	4ba7      	ldr	r3, [pc, #668]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 8009806:	2200      	movs	r2, #0
 8009808:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 800980a:	4aa6      	ldr	r2, [pc, #664]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 800980c:	7813      	ldrb	r3, [r2, #0]
 800980e:	f023 0304 	bic.w	r3, r3, #4
 8009812:	7013      	strb	r3, [r2, #0]
      send = true;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800981a:	e15a      	b.n	8009ad2 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 800981c:	4ba1      	ldr	r3, [pc, #644]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 814e 	beq.w	8009ac8 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 800982c:	4a9d      	ldr	r2, [pc, #628]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 800982e:	7813      	ldrb	r3, [r2, #0]
 8009830:	f043 0304 	orr.w	r3, r3, #4
 8009834:	7013      	strb	r3, [r2, #0]
        send = true;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800983c:	e144      	b.n	8009ac8 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 800983e:	4b99      	ldr	r3, [pc, #612]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 813f 	beq.w	8009acc <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 800984e:	4a95      	ldr	r2, [pc, #596]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 8009850:	7813      	ldrb	r3, [r2, #0]
 8009852:	f023 0304 	bic.w	r3, r3, #4
 8009856:	7013      	strb	r3, [r2, #0]
        send = true;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800985e:	e135      	b.n	8009acc <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009860:	2300      	movs	r3, #0
 8009862:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009866:	e039      	b.n	80098dc <dcd_event_handler+0x124>
 8009868:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800986c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009874:	4b8c      	ldr	r3, [pc, #560]	@ (8009aa8 <dcd_event_handler+0x2f0>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800987c:	429a      	cmp	r2, r3
 800987e:	d207      	bcs.n	8009890 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009880:	4b8a      	ldr	r3, [pc, #552]	@ (8009aac <dcd_event_handler+0x2f4>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009888:	015b      	lsls	r3, r3, #5
 800988a:	4413      	add	r3, r2
 800988c:	673b      	str	r3, [r7, #112]	@ 0x70
 800988e:	e00f      	b.n	80098b0 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009890:	4b85      	ldr	r3, [pc, #532]	@ (8009aa8 <dcd_event_handler+0x2f0>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800989a:	429a      	cmp	r2, r3
 800989c:	db08      	blt.n	80098b0 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800989e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80098a2:	4a81      	ldr	r2, [pc, #516]	@ (8009aa8 <dcd_event_handler+0x2f0>)
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	1a9b      	subs	r3, r3, r2
 80098a8:	015b      	lsls	r3, r3, #5
 80098aa:	4a81      	ldr	r2, [pc, #516]	@ (8009ab0 <dcd_event_handler+0x2f8>)
 80098ac:	4413      	add	r3, r2
 80098ae:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 80098b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 80098b2:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 80098b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <dcd_event_handler+0x11a>
 80098ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 80098c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	7810      	ldrb	r0, [r2, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6852      	ldr	r2, [r2, #4]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80098d2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80098d6:	3301      	adds	r3, #1
 80098d8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80098dc:	4b72      	ldr	r3, [pc, #456]	@ (8009aa8 <dcd_event_handler+0x2f0>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80098e6:	429a      	cmp	r2, r3
 80098e8:	dabe      	bge.n	8009868 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 80098ea:	4b6e      	ldr	r3, [pc, #440]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d05a      	beq.n	80099ae <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 80098f8:	4a6a      	ldr	r2, [pc, #424]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 80098fa:	7813      	ldrb	r3, [r2, #0]
 80098fc:	f023 0304 	bic.w	r3, r3, #4
 8009900:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009902:	f107 0314 	add.w	r3, r7, #20
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	609a      	str	r2, [r3, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	753b      	strb	r3, [r7, #20]
 8009914:	2305      	movs	r3, #5
 8009916:	757b      	strb	r3, [r7, #21]
 8009918:	f107 0314 	add.w	r3, r7, #20
 800991c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009924:	4b63      	ldr	r3, [pc, #396]	@ (8009ab4 <dcd_event_handler+0x2fc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	667b      	str	r3, [r7, #100]	@ 0x64
 800992a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800992c:	663b      	str	r3, [r7, #96]	@ 0x60
 800992e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009932:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009936:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800993a:	f083 0301 	eor.w	r3, r3, #1
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2000      	movs	r0, #0
 800994a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800994c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800994e:	3304      	adds	r3, #4
 8009950:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fde9 	bl	800852a <tu_fifo_write>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800995e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009962:	f083 0301 	eor.w	r3, r3, #1
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800996c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2001      	movs	r0, #1
 8009972:	4798      	blx	r3
  }

  return success;
 8009974:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009978:	f083 0301 	eor.w	r3, r3, #1
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <dcd_event_handler+0x1de>
 8009982:	4b4d      	ldr	r3, [pc, #308]	@ (8009ab8 <dcd_event_handler+0x300>)
 8009984:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00c      	beq.n	80099ac <dcd_event_handler+0x1f4>
 8009992:	be00      	bkpt	0x0000
 8009994:	e00a      	b.n	80099ac <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009998:	7818      	ldrb	r0, [r3, #0]
 800999a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	4619      	mov	r1, r3
 80099a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80099a4:	461a      	mov	r2, r3
 80099a6:	f7fe fe55 	bl	8008654 <tud_event_hook_cb>
  return true;
 80099aa:	e000      	b.n	80099ae <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80099ac:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80099ae:	4b3d      	ldr	r3, [pc, #244]	@ (8009aa4 <dcd_event_handler+0x2ec>)
 80099b0:	78db      	ldrb	r3, [r3, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80099b6:	2300      	movs	r3, #0
 80099b8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80099bc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80099c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099c2:	fa22 f303 	lsr.w	r3, r2, r3
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf14      	ite	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	2300      	moveq	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d07b      	beq.n	8009ad0 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80099d8:	f107 0308 	add.w	r3, r7, #8
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	609a      	str	r2, [r3, #8]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	723b      	strb	r3, [r7, #8]
 80099ea:	2303      	movs	r3, #3
 80099ec:	727b      	strb	r3, [r7, #9]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009a00:	4b2c      	ldr	r3, [pc, #176]	@ (8009ab4 <dcd_event_handler+0x2fc>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a0a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009a0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009a12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a16:	f083 0301 	eor.w	r3, r3, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fd7b 	bl	800852a <tu_fifo_write>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009a3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a3e:	f083 0301 	eor.w	r3, r3, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2001      	movs	r0, #1
 8009a4e:	4798      	blx	r3
  return success;
 8009a50:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009a54:	f083 0301 	eor.w	r3, r3, #1
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d009      	beq.n	8009a72 <dcd_event_handler+0x2ba>
 8009a5e:	4b16      	ldr	r3, [pc, #88]	@ (8009ab8 <dcd_event_handler+0x300>)
 8009a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00c      	beq.n	8009a88 <dcd_event_handler+0x2d0>
 8009a6e:	be00      	bkpt	0x0000
 8009a70:	e00a      	b.n	8009a88 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a74:	7818      	ldrb	r0, [r3, #0]
 8009a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009a80:	461a      	mov	r2, r3
 8009a82:	f7fe fde7 	bl	8008654 <tud_event_hook_cb>
  return true;
 8009a86:	e000      	b.n	8009a8a <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009a88:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009a8a:	e021      	b.n	8009ad0 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <dcd_event_handler+0x304>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	3301      	adds	r3, #1
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b09      	ldr	r3, [pc, #36]	@ (8009abc <dcd_event_handler+0x304>)
 8009a98:	701a      	strb	r2, [r3, #0]
      send = true;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009aa0:	e017      	b.n	8009ad2 <dcd_event_handler+0x31a>
 8009aa2:	bf00      	nop
 8009aa4:	200010f0 	.word	0x200010f0
 8009aa8:	20001124 	.word	0x20001124
 8009aac:	20001120 	.word	0x20001120
 8009ab0:	0800ec58 	.word	0x0800ec58
 8009ab4:	200011e8 	.word	0x200011e8
 8009ab8:	e000edf0 	.word	0xe000edf0
 8009abc:	2000111c 	.word	0x2000111c

    default:
      send = true;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009ac6:	e004      	b.n	8009ad2 <dcd_event_handler+0x31a>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <dcd_event_handler+0x31a>
      break;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <dcd_event_handler+0x31a>
      break;
 8009ad0:	bf00      	nop
  }

  if (send) {
 8009ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d049      	beq.n	8009b6e <dcd_event_handler+0x3b6>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ae4:	4b24      	ldr	r3, [pc, #144]	@ (8009b78 <dcd_event_handler+0x3c0>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009af6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009afa:	f083 0301 	eor.w	r3, r3, #1
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2000      	movs	r0, #0
 8009b0a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	3304      	adds	r3, #4
 8009b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fd09 	bl	800852a <tu_fifo_write>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b22:	f083 0301 	eor.w	r3, r3, #1
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2001      	movs	r0, #1
 8009b32:	4798      	blx	r3
  return success;
 8009b34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b38:	f083 0301 	eor.w	r3, r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <dcd_event_handler+0x39e>
 8009b42:	4b0e      	ldr	r3, [pc, #56]	@ (8009b7c <dcd_event_handler+0x3c4>)
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00c      	beq.n	8009b6c <dcd_event_handler+0x3b4>
 8009b52:	be00      	bkpt	0x0000
 8009b54:	e00a      	b.n	8009b6c <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b58:	7818      	ldrb	r0, [r3, #0]
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5c:	785b      	ldrb	r3, [r3, #1]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b64:	461a      	mov	r2, r3
 8009b66:	f7fe fd75 	bl	8008654 <tud_event_hook_cb>
  return true;
 8009b6a:	e000      	b.n	8009b6e <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009b6c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3780      	adds	r7, #128	@ 0x80
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200011e8 	.word	0x200011e8
 8009b7c:	e000edf0 	.word	0xe000edf0

08009b80 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8009b90:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <usbd_int_set+0x30>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 f929 	bl	800adec <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8009b9a:	e004      	b.n	8009ba6 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009b9c:	4b04      	ldr	r3, [pc, #16]	@ (8009bb0 <usbd_int_set+0x30>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 f94b 	bl	800ae3c <dcd_int_disable>
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000012d 	.word	0x2000012d

08009bb4 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	71fb      	strb	r3, [r7, #7]
 8009bbe:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <usbd_spin_lock+0x30>)
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	f083 0301 	eor.w	r3, r3, #1
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	4798      	blx	r3
}
 8009bda:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000130 	.word	0x20000130

08009be8 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	71fb      	strb	r3, [r7, #7]
 8009bf2:	4b09      	ldr	r3, [pc, #36]	@ (8009c18 <usbd_spin_unlock+0x30>)
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	f083 0301 	eor.w	r3, r3, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	4798      	blx	r3
}
 8009c0e:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000130 	.word	0x20000130

08009c1c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	@ 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6039      	str	r1, [r7, #0]
 8009c24:	4611      	mov	r1, r2
 8009c26:	461a      	mov	r2, r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	71fb      	strb	r3, [r7, #7]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	71bb      	strb	r3, [r7, #6]
 8009c30:	4613      	mov	r3, r2
 8009c32:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8009c34:	2300      	movs	r3, #0
 8009c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c38:	e04d      	b.n	8009cd6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d108      	bne.n	8009c58 <usbd_open_edpt_pair+0x3c>
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	78db      	ldrb	r3, [r3, #3]
 8009c4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	797b      	ldrb	r3, [r7, #5]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00a      	beq.n	8009c6e <usbd_open_edpt_pair+0x52>
 8009c58:	4b23      	ldr	r3, [pc, #140]	@ (8009ce8 <usbd_open_edpt_pair+0xcc>)
 8009c5a:	61bb      	str	r3, [r7, #24]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d000      	beq.n	8009c6a <usbd_open_edpt_pair+0x4e>
 8009c68:	be00      	bkpt	0x0000
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e038      	b.n	8009ce0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	6a39      	ldr	r1, [r7, #32]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f83a 	bl	8009cec <usbd_edpt_open>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f083 0301 	eor.w	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00a      	beq.n	8009c9a <usbd_open_edpt_pair+0x7e>
 8009c84:	4b18      	ldr	r3, [pc, #96]	@ (8009ce8 <usbd_open_edpt_pair+0xcc>)
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d000      	beq.n	8009c96 <usbd_open_edpt_pair+0x7a>
 8009c94:	be00      	bkpt	0x0000
 8009c96:	2300      	movs	r3, #0
 8009c98:	e022      	b.n	8009ce0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	789b      	ldrb	r3, [r3, #2]
 8009c9e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	09db      	lsrs	r3, r3, #7
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d104      	bne.n	8009cb4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	789a      	ldrb	r2, [r3, #2]
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	e003      	b.n	8009cbc <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	789a      	ldrb	r2, [r3, #2]
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8009cce:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cd6:	79bb      	ldrb	r3, [r7, #6]
 8009cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	dbad      	blt.n	8009c3a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8009cde:	2301      	movs	r3, #1
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3728      	adds	r7, #40	@ 0x28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	e000edf0 	.word	0xe000edf0

08009cec <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8009cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d6c <usbd_edpt_open+0x80>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	789b      	ldrb	r3, [r3, #2]
 8009d02:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b05      	cmp	r3, #5
 8009d0e:	d90a      	bls.n	8009d26 <usbd_edpt_open+0x3a>
 8009d10:	4b17      	ldr	r3, [pc, #92]	@ (8009d70 <usbd_edpt_open+0x84>)
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d000      	beq.n	8009d22 <usbd_edpt_open+0x36>
 8009d20:	be00      	bkpt	0x0000
 8009d22:	2300      	movs	r3, #0
 8009d24:	e01d      	b.n	8009d62 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8009d26:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <usbd_edpt_open+0x88>)
 8009d28:	789b      	ldrb	r3, [r3, #2]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6838      	ldr	r0, [r7, #0]
 8009d30:	f002 fbae 	bl	800c490 <tu_edpt_validate>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f083 0301 	eor.w	r3, r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <usbd_edpt_open+0x6a>
 8009d40:	4b0b      	ldr	r3, [pc, #44]	@ (8009d70 <usbd_edpt_open+0x84>)
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d000      	beq.n	8009d52 <usbd_edpt_open+0x66>
 8009d50:	be00      	bkpt	0x0000
 8009d52:	2300      	movs	r3, #0
 8009d54:	e005      	b.n	8009d62 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f992 	bl	800b084 <dcd_edpt_open>
 8009d60:	4603      	mov	r3, r0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	2000012d 	.word	0x2000012d
 8009d70:	e000edf0 	.word	0xe000edf0
 8009d74:	200010f0 	.word	0x200010f0

08009d78 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	460a      	mov	r2, r1
 8009d82:	71fb      	strb	r3, [r7, #7]
 8009d84:	4613      	mov	r3, r2
 8009d86:	71bb      	strb	r3, [r7, #6]
 8009d88:	79bb      	ldrb	r3, [r7, #6]
 8009d8a:	73bb      	strb	r3, [r7, #14]
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d92:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009d94:	75fb      	strb	r3, [r7, #23]
 8009d96:	79bb      	ldrb	r3, [r7, #6]
 8009d98:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	09db      	lsrs	r3, r3, #7
 8009d9e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009da0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009da2:	7dfa      	ldrb	r2, [r7, #23]
 8009da4:	7dbb      	ldrb	r3, [r7, #22]
 8009da6:	0052      	lsls	r2, r2, #1
 8009da8:	4413      	add	r3, r2
 8009daa:	3320      	adds	r3, #32
 8009dac:	4a05      	ldr	r2, [pc, #20]	@ (8009dc4 <usbd_edpt_claim+0x4c>)
 8009dae:	4413      	add	r3, r2
 8009db0:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8009db2:	2100      	movs	r1, #0
 8009db4:	6938      	ldr	r0, [r7, #16]
 8009db6:	f002 fb07 	bl	800c3c8 <tu_edpt_claim>
 8009dba:	4603      	mov	r3, r0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	200010f0 	.word	0x200010f0

08009dc8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	460a      	mov	r2, r1
 8009dd2:	71fb      	strb	r3, [r7, #7]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	71bb      	strb	r3, [r7, #6]
 8009dd8:	79bb      	ldrb	r3, [r7, #6]
 8009dda:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009de2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009de4:	75fb      	strb	r3, [r7, #23]
 8009de6:	79bb      	ldrb	r3, [r7, #6]
 8009de8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	09db      	lsrs	r3, r3, #7
 8009dee:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009df0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009df2:	7dfa      	ldrb	r2, [r7, #23]
 8009df4:	7dbb      	ldrb	r3, [r7, #22]
 8009df6:	0052      	lsls	r2, r2, #1
 8009df8:	4413      	add	r3, r2
 8009dfa:	3320      	adds	r3, #32
 8009dfc:	4a05      	ldr	r2, [pc, #20]	@ (8009e14 <usbd_edpt_release+0x4c>)
 8009dfe:	4413      	add	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8009e02:	2100      	movs	r1, #0
 8009e04:	6938      	ldr	r0, [r7, #16]
 8009e06:	f002 fb19 	bl	800c43c <tu_edpt_release>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	200010f0 	.word	0x200010f0

08009e18 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	603a      	str	r2, [r7, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	4603      	mov	r3, r0
 8009e24:	71fb      	strb	r3, [r7, #7]
 8009e26:	460b      	mov	r3, r1
 8009e28:	71bb      	strb	r3, [r7, #6]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8009e2e:	4b32      	ldr	r3, [pc, #200]	@ (8009ef8 <usbd_edpt_xfer+0xe0>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	71fb      	strb	r3, [r7, #7]
 8009e34:	79bb      	ldrb	r3, [r7, #6]
 8009e36:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009e38:	7abb      	ldrb	r3, [r7, #10]
 8009e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e3e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009e40:	75fb      	strb	r3, [r7, #23]
 8009e42:	79bb      	ldrb	r3, [r7, #6]
 8009e44:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	09db      	lsrs	r3, r3, #7
 8009e4a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009e4c:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8009e4e:	7dfa      	ldrb	r2, [r7, #23]
 8009e50:	7dbb      	ldrb	r3, [r7, #22]
 8009e52:	492a      	ldr	r1, [pc, #168]	@ (8009efc <usbd_edpt_xfer+0xe4>)
 8009e54:	0052      	lsls	r2, r2, #1
 8009e56:	440a      	add	r2, r1
 8009e58:	4413      	add	r3, r2
 8009e5a:	3320      	adds	r3, #32
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00a      	beq.n	8009e7e <usbd_edpt_xfer+0x66>
 8009e68:	4b25      	ldr	r3, [pc, #148]	@ (8009f00 <usbd_edpt_xfer+0xe8>)
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d000      	beq.n	8009e7a <usbd_edpt_xfer+0x62>
 8009e78:	be00      	bkpt	0x0000
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e038      	b.n	8009ef0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8009e7e:	7dfa      	ldrb	r2, [r7, #23]
 8009e80:	7dbb      	ldrb	r3, [r7, #22]
 8009e82:	491e      	ldr	r1, [pc, #120]	@ (8009efc <usbd_edpt_xfer+0xe4>)
 8009e84:	0052      	lsls	r2, r2, #1
 8009e86:	440a      	add	r2, r1
 8009e88:	4413      	add	r3, r2
 8009e8a:	f103 0220 	add.w	r2, r3, #32
 8009e8e:	7813      	ldrb	r3, [r2, #0]
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8009e96:	88bb      	ldrh	r3, [r7, #4]
 8009e98:	79b9      	ldrb	r1, [r7, #6]
 8009e9a:	79f8      	ldrb	r0, [r7, #7]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	f001 f9b5 	bl	800b20c <dcd_edpt_xfer>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <usbd_edpt_xfer+0x94>
    return true;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e021      	b.n	8009ef0 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8009eac:	7dfa      	ldrb	r2, [r7, #23]
 8009eae:	7dbb      	ldrb	r3, [r7, #22]
 8009eb0:	4912      	ldr	r1, [pc, #72]	@ (8009efc <usbd_edpt_xfer+0xe4>)
 8009eb2:	0052      	lsls	r2, r2, #1
 8009eb4:	440a      	add	r2, r1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f103 0220 	add.w	r2, r3, #32
 8009ebc:	7813      	ldrb	r3, [r2, #0]
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8009ec4:	7dfa      	ldrb	r2, [r7, #23]
 8009ec6:	7dbb      	ldrb	r3, [r7, #22]
 8009ec8:	490c      	ldr	r1, [pc, #48]	@ (8009efc <usbd_edpt_xfer+0xe4>)
 8009eca:	0052      	lsls	r2, r2, #1
 8009ecc:	440a      	add	r2, r1
 8009ece:	4413      	add	r3, r2
 8009ed0:	f103 0220 	add.w	r2, r3, #32
 8009ed4:	7813      	ldrb	r3, [r2, #0]
 8009ed6:	f023 0304 	bic.w	r3, r3, #4
 8009eda:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8009edc:	4b08      	ldr	r3, [pc, #32]	@ (8009f00 <usbd_edpt_xfer+0xe8>)
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d000      	beq.n	8009eee <usbd_edpt_xfer+0xd6>
 8009eec:	be00      	bkpt	0x0000
    return false;
 8009eee:	2300      	movs	r3, #0
  }
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	2000012d 	.word	0x2000012d
 8009efc:	200010f0 	.word	0x200010f0
 8009f00:	e000edf0 	.word	0xe000edf0

08009f04 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	460a      	mov	r2, r1
 8009f0e:	71fb      	strb	r3, [r7, #7]
 8009f10:	4613      	mov	r3, r2
 8009f12:	71bb      	strb	r3, [r7, #6]
 8009f14:	79bb      	ldrb	r3, [r7, #6]
 8009f16:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f18:	7b3b      	ldrb	r3, [r7, #12]
 8009f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f1e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f20:	73fb      	strb	r3, [r7, #15]
 8009f22:	79bb      	ldrb	r3, [r7, #6]
 8009f24:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f26:	7b7b      	ldrb	r3, [r7, #13]
 8009f28:	09db      	lsrs	r3, r3, #7
 8009f2a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009f2c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8009f2e:	7bfa      	ldrb	r2, [r7, #15]
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	490a      	ldr	r1, [pc, #40]	@ (8009f5c <usbd_edpt_busy+0x58>)
 8009f34:	0052      	lsls	r2, r2, #1
 8009f36:	440a      	add	r2, r1
 8009f38:	4413      	add	r3, r2
 8009f3a:	3320      	adds	r3, #32
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	200010f0 	.word	0x200010f0

08009f60 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	460a      	mov	r2, r1
 8009f6a:	71fb      	strb	r3, [r7, #7]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8009f70:	4b18      	ldr	r3, [pc, #96]	@ (8009fd4 <usbd_edpt_stall+0x74>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	71fb      	strb	r3, [r7, #7]
 8009f76:	79bb      	ldrb	r3, [r7, #6]
 8009f78:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f7a:	7b3b      	ldrb	r3, [r7, #12]
 8009f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f80:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f82:	73fb      	strb	r3, [r7, #15]
 8009f84:	79bb      	ldrb	r3, [r7, #6]
 8009f86:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f88:	7b7b      	ldrb	r3, [r7, #13]
 8009f8a:	09db      	lsrs	r3, r3, #7
 8009f8c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009f8e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8009f90:	79ba      	ldrb	r2, [r7, #6]
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 f988 	bl	800b2ac <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8009f9c:	7bfa      	ldrb	r2, [r7, #15]
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	490d      	ldr	r1, [pc, #52]	@ (8009fd8 <usbd_edpt_stall+0x78>)
 8009fa2:	0052      	lsls	r2, r2, #1
 8009fa4:	440a      	add	r2, r1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f103 0220 	add.w	r2, r3, #32
 8009fac:	7813      	ldrb	r3, [r2, #0]
 8009fae:	f043 0302 	orr.w	r3, r3, #2
 8009fb2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8009fb4:	7bfa      	ldrb	r2, [r7, #15]
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	4907      	ldr	r1, [pc, #28]	@ (8009fd8 <usbd_edpt_stall+0x78>)
 8009fba:	0052      	lsls	r2, r2, #1
 8009fbc:	440a      	add	r2, r1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f103 0220 	add.w	r2, r3, #32
 8009fc4:	7813      	ldrb	r3, [r2, #0]
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	7013      	strb	r3, [r2, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	2000012d 	.word	0x2000012d
 8009fd8:	200010f0 	.word	0x200010f0

08009fdc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	460a      	mov	r2, r1
 8009fe6:	71fb      	strb	r3, [r7, #7]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8009fec:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <usbd_edpt_clear_stall+0x74>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	71fb      	strb	r3, [r7, #7]
 8009ff2:	79bb      	ldrb	r3, [r7, #6]
 8009ff4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ff6:	7b3b      	ldrb	r3, [r7, #12]
 8009ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	79bb      	ldrb	r3, [r7, #6]
 800a002:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a004:	7b7b      	ldrb	r3, [r7, #13]
 800a006:	09db      	lsrs	r3, r3, #7
 800a008:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a00a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a00c:	79ba      	ldrb	r2, [r7, #6]
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	4611      	mov	r1, r2
 800a012:	4618      	mov	r0, r3
 800a014:	f001 f980 	bl	800b318 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a018:	7bfa      	ldrb	r2, [r7, #15]
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	490d      	ldr	r1, [pc, #52]	@ (800a054 <usbd_edpt_clear_stall+0x78>)
 800a01e:	0052      	lsls	r2, r2, #1
 800a020:	440a      	add	r2, r1
 800a022:	4413      	add	r3, r2
 800a024:	f103 0220 	add.w	r2, r3, #32
 800a028:	7813      	ldrb	r3, [r2, #0]
 800a02a:	f023 0302 	bic.w	r3, r3, #2
 800a02e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a030:	7bfa      	ldrb	r2, [r7, #15]
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	4907      	ldr	r1, [pc, #28]	@ (800a054 <usbd_edpt_clear_stall+0x78>)
 800a036:	0052      	lsls	r2, r2, #1
 800a038:	440a      	add	r2, r1
 800a03a:	4413      	add	r3, r2
 800a03c:	f103 0220 	add.w	r2, r3, #32
 800a040:	7813      	ldrb	r3, [r2, #0]
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	7013      	strb	r3, [r2, #0]
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2000012d 	.word	0x2000012d
 800a054:	200010f0 	.word	0x200010f0

0800a058 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	460a      	mov	r2, r1
 800a062:	71fb      	strb	r3, [r7, #7]
 800a064:	4613      	mov	r3, r2
 800a066:	71bb      	strb	r3, [r7, #6]
 800a068:	79bb      	ldrb	r3, [r7, #6]
 800a06a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a06c:	7b3b      	ldrb	r3, [r7, #12]
 800a06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a072:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	79bb      	ldrb	r3, [r7, #6]
 800a078:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a07a:	7b7b      	ldrb	r3, [r7, #13]
 800a07c:	09db      	lsrs	r3, r3, #7
 800a07e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a080:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a082:	7bfa      	ldrb	r2, [r7, #15]
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	490a      	ldr	r1, [pc, #40]	@ (800a0b0 <usbd_edpt_stalled+0x58>)
 800a088:	0052      	lsls	r2, r2, #1
 800a08a:	440a      	add	r2, r1
 800a08c:	4413      	add	r3, r2
 800a08e:	3320      	adds	r3, #32
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bf14      	ite	ne
 800a09c:	2301      	movne	r3, #1
 800a09e:	2300      	moveq	r3, #0
 800a0a0:	b2db      	uxtb	r3, r3
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	200010f0 	.word	0x200010f0

0800a0b4 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <status_stage_xact+0x1e>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e000      	b.n	800a0ec <status_stage_xact+0x20>
 800a0ea:	2380      	movs	r3, #128	@ 0x80
 800a0ec:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a0ee:	7bf9      	ldrb	r1, [r7, #15]
 800a0f0:	79f8      	ldrb	r0, [r7, #7]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f7ff fe8f 	bl	8009e18 <usbd_edpt_xfer>
 800a0fa:	4603      	mov	r3, r0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a110:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <tud_control_status+0x3c>)
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	6810      	ldr	r0, [r2, #0]
 800a116:	6851      	ldr	r1, [r2, #4]
 800a118:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <tud_control_status+0x3c>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a120:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <tud_control_status+0x3c>)
 800a122:	2200      	movs	r2, #0
 800a124:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a126:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <tud_control_status+0x3c>)
 800a128:	2200      	movs	r2, #0
 800a12a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff ffcb 	bl	800a0cc <status_stage_xact>
 800a136:	4603      	mov	r3, r0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	200011ec 	.word	0x200011ec

0800a144 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a14e:	4b24      	ldr	r3, [pc, #144]	@ (800a1e0 <data_stage_xact+0x9c>)
 800a150:	899a      	ldrh	r2, [r3, #12]
 800a152:	4b23      	ldr	r3, [pc, #140]	@ (800a1e0 <data_stage_xact+0x9c>)
 800a154:	89db      	ldrh	r3, [r3, #14]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	b29b      	uxth	r3, r3
 800a15a:	837b      	strh	r3, [r7, #26]
 800a15c:	2340      	movs	r3, #64	@ 0x40
 800a15e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a160:	8b7a      	ldrh	r2, [r7, #26]
 800a162:	8b3b      	ldrh	r3, [r7, #24]
 800a164:	4293      	cmp	r3, r2
 800a166:	bf28      	it	cs
 800a168:	4613      	movcs	r3, r2
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a16e:	2300      	movs	r3, #0
 800a170:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a172:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e0 <data_stage_xact+0x9c>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01e      	beq.n	800a1be <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a180:	2380      	movs	r3, #128	@ 0x80
 800a182:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a184:	8bbb      	ldrh	r3, [r7, #28]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d019      	beq.n	800a1be <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a18a:	4b15      	ldr	r3, [pc, #84]	@ (800a1e0 <data_stage_xact+0x9c>)
 800a18c:	689a      	ldr	r2, [r3, #8]
 800a18e:	8bbb      	ldrh	r3, [r7, #28]
 800a190:	4914      	ldr	r1, [pc, #80]	@ (800a1e4 <data_stage_xact+0xa0>)
 800a192:	6179      	str	r1, [r7, #20]
 800a194:	2140      	movs	r1, #64	@ 0x40
 800a196:	6139      	str	r1, [r7, #16]
 800a198:	60fa      	str	r2, [r7, #12]
 800a19a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d202      	bcs.n	800a1aa <data_stage_xact+0x66>
    return -1;
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	e005      	b.n	800a1b6 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	68f9      	ldr	r1, [r7, #12]
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	f002 fd0b 	bl	800cbca <memcpy>
  return 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <data_stage_xact+0x7a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e00b      	b.n	800a1d6 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a1be:	8bbb      	ldrh	r3, [r7, #28]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <data_stage_xact+0x84>
 800a1c4:	4a07      	ldr	r2, [pc, #28]	@ (800a1e4 <data_stage_xact+0xa0>)
 800a1c6:	e000      	b.n	800a1ca <data_stage_xact+0x86>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	8bbb      	ldrh	r3, [r7, #28]
 800a1cc:	7ff9      	ldrb	r1, [r7, #31]
 800a1ce:	79f8      	ldrb	r0, [r7, #7]
 800a1d0:	f7ff fe22 	bl	8009e18 <usbd_edpt_xfer>
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200011ec 	.word	0x200011ec
 800a1e4:	20001200 	.word	0x20001200

0800a1e8 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a1fc:	4b30      	ldr	r3, [pc, #192]	@ (800a2c0 <tud_control_xfer+0xd8>)
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	6810      	ldr	r0, [r2, #0]
 800a202:	6851      	ldr	r1, [r2, #4]
 800a204:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a206:	4a2e      	ldr	r2, [pc, #184]	@ (800a2c0 <tud_control_xfer+0xd8>)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a20c:	4b2c      	ldr	r3, [pc, #176]	@ (800a2c0 <tud_control_xfer+0xd8>)
 800a20e:	2200      	movs	r2, #0
 800a210:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	88db      	ldrh	r3, [r3, #6]
 800a216:	b29a      	uxth	r2, r3
 800a218:	89bb      	ldrh	r3, [r7, #12]
 800a21a:	827b      	strh	r3, [r7, #18]
 800a21c:	4613      	mov	r3, r2
 800a21e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a220:	8a7a      	ldrh	r2, [r7, #18]
 800a222:	8a3b      	ldrh	r3, [r7, #16]
 800a224:	4293      	cmp	r3, r2
 800a226:	bf28      	it	cs
 800a228:	4613      	movcs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	4b24      	ldr	r3, [pc, #144]	@ (800a2c0 <tud_control_xfer+0xd8>)
 800a22e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	88db      	ldrh	r3, [r3, #6]
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d026      	beq.n	800a288 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a23a:	4b21      	ldr	r3, [pc, #132]	@ (800a2c0 <tud_control_xfer+0xd8>)
 800a23c:	899b      	ldrh	r3, [r3, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00d      	beq.n	800a25e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <tud_control_xfer+0x76>
 800a248:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c4 <tud_control_xfer+0xdc>)
 800a24a:	61bb      	str	r3, [r7, #24]
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	d000      	beq.n	800a25a <tud_control_xfer+0x72>
 800a258:	be00      	bkpt	0x0000
 800a25a:	2300      	movs	r3, #0
 800a25c:	e02b      	b.n	800a2b6 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff ff6f 	bl	800a144 <data_stage_xact>
 800a266:	4603      	mov	r3, r0
 800a268:	f083 0301 	eor.w	r3, r3, #1
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d020      	beq.n	800a2b4 <tud_control_xfer+0xcc>
 800a272:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <tud_control_xfer+0xdc>)
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d000      	beq.n	800a284 <tud_control_xfer+0x9c>
 800a282:	be00      	bkpt	0x0000
 800a284:	2300      	movs	r3, #0
 800a286:	e016      	b.n	800a2b6 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff ff1d 	bl	800a0cc <status_stage_xact>
 800a292:	4603      	mov	r3, r0
 800a294:	f083 0301 	eor.w	r3, r3, #1
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <tud_control_xfer+0xcc>
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <tud_control_xfer+0xdc>)
 800a2a0:	61fb      	str	r3, [r7, #28]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d000      	beq.n	800a2b0 <tud_control_xfer+0xc8>
 800a2ae:	be00      	bkpt	0x0000
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e000      	b.n	800a2b6 <tud_control_xfer+0xce>
  }

  return true;
 800a2b4:	2301      	movs	r3, #1
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	200011ec 	.word	0x200011ec
 800a2c4:	e000edf0 	.word	0xe000edf0

0800a2c8 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a2cc:	2214      	movs	r2, #20
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	4802      	ldr	r0, [pc, #8]	@ (800a2dc <usbd_control_reset+0x14>)
 800a2d2:	f002 fba2 	bl	800ca1a <memset>
}
 800a2d6:	bf00      	nop
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200011ec 	.word	0x200011ec

0800a2e0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a2e8:	4a04      	ldr	r2, [pc, #16]	@ (800a2fc <usbd_control_set_complete_callback+0x1c>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6113      	str	r3, [r2, #16]
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	200011ec 	.word	0x200011ec

0800a300 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a308:	4b09      	ldr	r3, [pc, #36]	@ (800a330 <usbd_control_set_request+0x30>)
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	6810      	ldr	r0, [r2, #0]
 800a30e:	6851      	ldr	r1, [r2, #4]
 800a310:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a312:	4b07      	ldr	r3, [pc, #28]	@ (800a330 <usbd_control_set_request+0x30>)
 800a314:	2200      	movs	r2, #0
 800a316:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a318:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <usbd_control_set_request+0x30>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a31e:	4b04      	ldr	r3, [pc, #16]	@ (800a330 <usbd_control_set_request+0x30>)
 800a320:	2200      	movs	r2, #0
 800a322:	819a      	strh	r2, [r3, #12]
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	200011ec 	.word	0x200011ec

0800a334 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	4603      	mov	r3, r0
 800a33e:	71fb      	strb	r3, [r7, #7]
 800a340:	460b      	mov	r3, r1
 800a342:	71bb      	strb	r3, [r7, #6]
 800a344:	4613      	mov	r3, r2
 800a346:	717b      	strb	r3, [r7, #5]
 800a348:	79bb      	ldrb	r3, [r7, #6]
 800a34a:	73fb      	strb	r3, [r7, #15]
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	09db      	lsrs	r3, r3, #7
 800a350:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a352:	4a4f      	ldr	r2, [pc, #316]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a354:	7812      	ldrb	r2, [r2, #0]
 800a356:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d01e      	beq.n	800a39e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <usbd_control_xfer_cb+0x48>
 800a366:	4b4b      	ldr	r3, [pc, #300]	@ (800a494 <usbd_control_xfer_cb+0x160>)
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d000      	beq.n	800a378 <usbd_control_xfer_cb+0x44>
 800a376:	be00      	bkpt	0x0000
 800a378:	2300      	movs	r3, #0
 800a37a:	e084      	b.n	800a486 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	4944      	ldr	r1, [pc, #272]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fe97 	bl	800a0b4 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a386:	4b42      	ldr	r3, [pc, #264]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d005      	beq.n	800a39a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a38e:	4b40      	ldr	r3, [pc, #256]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	79f8      	ldrb	r0, [r7, #7]
 800a394:	4a3e      	ldr	r2, [pc, #248]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a396:	2103      	movs	r1, #3
 800a398:	4798      	blx	r3
    }

    return true;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e073      	b.n	800a486 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a39e:	4b3c      	ldr	r3, [pc, #240]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10c      	bne.n	800a3c6 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a3ac:	4b38      	ldr	r3, [pc, #224]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <usbd_control_xfer_cb+0x84>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e066      	b.n	800a486 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a3b8:	4b35      	ldr	r3, [pc, #212]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	4936      	ldr	r1, [pc, #216]	@ (800a498 <usbd_control_xfer_cb+0x164>)
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 fc02 	bl	800cbca <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a3c6:	4b32      	ldr	r3, [pc, #200]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3c8:	89da      	ldrh	r2, [r3, #14]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	4b2f      	ldr	r3, [pc, #188]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3d4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a3d6:	4b2e      	ldr	r3, [pc, #184]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	4413      	add	r3, r2
 800a3de:	4a2c      	ldr	r2, [pc, #176]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3e0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a3e2:	4b2b      	ldr	r3, [pc, #172]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3e4:	88da      	ldrh	r2, [r3, #6]
 800a3e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3e8:	89db      	ldrh	r3, [r3, #14]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d002      	beq.n	800a3f4 <usbd_control_xfer_cb+0xc0>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b3f      	cmp	r3, #63	@ 0x3f
 800a3f2:	d831      	bhi.n	800a458 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a3f8:	4b25      	ldr	r3, [pc, #148]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d007      	beq.n	800a410 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a400:	4b23      	ldr	r3, [pc, #140]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	79f8      	ldrb	r0, [r7, #7]
 800a406:	4a22      	ldr	r2, [pc, #136]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a408:	2102      	movs	r1, #2
 800a40a:	4798      	blx	r3
 800a40c:	4603      	mov	r3, r0
 800a40e:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a410:	7ffb      	ldrb	r3, [r7, #31]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d015      	beq.n	800a442 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	491d      	ldr	r1, [pc, #116]	@ (800a490 <usbd_control_xfer_cb+0x15c>)
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fe56 	bl	800a0cc <status_stage_xact>
 800a420:	4603      	mov	r3, r0
 800a422:	f083 0301 	eor.w	r3, r3, #1
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d02a      	beq.n	800a482 <usbd_control_xfer_cb+0x14e>
 800a42c:	4b19      	ldr	r3, [pc, #100]	@ (800a494 <usbd_control_xfer_cb+0x160>)
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d000      	beq.n	800a43e <usbd_control_xfer_cb+0x10a>
 800a43c:	be00      	bkpt	0x0000
 800a43e:	2300      	movs	r3, #0
 800a440:	e021      	b.n	800a486 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f000 ff30 	bl	800b2ac <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2180      	movs	r1, #128	@ 0x80
 800a450:	4618      	mov	r0, r3
 800a452:	f000 ff2b 	bl	800b2ac <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a456:	e014      	b.n	800a482 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fe72 	bl	800a144 <data_stage_xact>
 800a460:	4603      	mov	r3, r0
 800a462:	f083 0301 	eor.w	r3, r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <usbd_control_xfer_cb+0x150>
 800a46c:	4b09      	ldr	r3, [pc, #36]	@ (800a494 <usbd_control_xfer_cb+0x160>)
 800a46e:	61bb      	str	r3, [r7, #24]
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d000      	beq.n	800a47e <usbd_control_xfer_cb+0x14a>
 800a47c:	be00      	bkpt	0x0000
 800a47e:	2300      	movs	r3, #0
 800a480:	e001      	b.n	800a486 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a482:	bf00      	nop
  }

  return true;
 800a484:	2301      	movs	r3, #1
}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	200011ec 	.word	0x200011ec
 800a494:	e000edf0 	.word	0xe000edf0
 800a498:	20001200 	.word	0x20001200

0800a49c <__NVIC_EnableIRQ>:
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db0b      	blt.n	800a4c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	f003 021f 	and.w	r2, r3, #31
 800a4b4:	4907      	ldr	r1, [pc, #28]	@ (800a4d4 <__NVIC_EnableIRQ+0x38>)
 800a4b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ba:	095b      	lsrs	r3, r3, #5
 800a4bc:	2001      	movs	r0, #1
 800a4be:	fa00 f202 	lsl.w	r2, r0, r2
 800a4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	e000e100 	.word	0xe000e100

0800a4d8 <__NVIC_DisableIRQ>:
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	db12      	blt.n	800a510 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	f003 021f 	and.w	r2, r3, #31
 800a4f0:	490a      	ldr	r1, [pc, #40]	@ (800a51c <__NVIC_DisableIRQ+0x44>)
 800a4f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a4fe:	3320      	adds	r3, #32
 800a500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a504:	f3bf 8f4f 	dsb	sy
}
 800a508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a50a:	f3bf 8f6f 	isb	sy
}
 800a50e:	bf00      	nop
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	e000e100 	.word	0xe000e100

0800a520 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	71fb      	strb	r3, [r7, #7]
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	4a13      	ldr	r2, [pc, #76]	@ (800a588 <dma_setup_prepare+0x68>)
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	4413      	add	r3, r2
 800a540:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a542:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	4a10      	ldr	r2, [pc, #64]	@ (800a58c <dma_setup_prepare+0x6c>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d904      	bls.n	800a558 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a554:	2b00      	cmp	r3, #0
 800a556:	db10      	blt.n	800a57a <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4a0d      	ldr	r2, [pc, #52]	@ (800a590 <dma_setup_prepare+0x70>)
 800a55c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800a560:	4a0c      	ldr	r2, [pc, #48]	@ (800a594 <dma_setup_prepare+0x74>)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a56e:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800a578:	e000      	b.n	800a57c <dma_setup_prepare+0x5c>
      return;
 800a57a:	bf00      	nop
}
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	0800ec98 	.word	0x0800ec98
 800a58c:	4f543009 	.word	0x4f543009
 800a590:	20080008 	.word	0x20080008
 800a594:	200012c8 	.word	0x200012c8

0800a598 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800a598:	b480      	push	{r7}
 800a59a:	b091      	sub	sp, #68	@ 0x44
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	71fb      	strb	r3, [r7, #7]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	71bb      	strb	r3, [r7, #6]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80bb      	strh	r3, [r7, #4]
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a5ae:	7e7b      	ldrb	r3, [r7, #25]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <dfifo_alloc+0x20>
    rhport = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a5b8:	7e7b      	ldrb	r3, [r7, #25]
 800a5ba:	4a65      	ldr	r2, [pc, #404]	@ (800a750 <dfifo_alloc+0x1b8>)
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	4413      	add	r3, r2
 800a5c0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	4a61      	ldr	r2, [pc, #388]	@ (800a750 <dfifo_alloc+0x1b8>)
 800a5ca:	4413      	add	r3, r2
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	7a1b      	ldrb	r3, [r3, #8]
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a5d6:	79bb      	ldrb	r3, [r7, #6]
 800a5d8:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a5da:	7ebb      	ldrb	r3, [r7, #26]
 800a5dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5e0:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a5e2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800a5e6:	79bb      	ldrb	r3, [r7, #6]
 800a5e8:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a5ea:	7efb      	ldrb	r3, [r7, #27]
 800a5ec:	09db      	lsrs	r3, r3, #7
 800a5ee:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a5f0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800a5f4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800a5f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d30a      	bcc.n	800a616 <dfifo_alloc+0x7e>
 800a600:	4b54      	ldr	r3, [pc, #336]	@ (800a754 <dfifo_alloc+0x1bc>)
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d000      	beq.n	800a612 <dfifo_alloc+0x7a>
 800a610:	be00      	bkpt	0x0000
 800a612:	2300      	movs	r3, #0
 800a614:	e095      	b.n	800a742 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800a616:	88bb      	ldrh	r3, [r7, #4]
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	2304      	movs	r3, #4
 800a61c:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	4413      	add	r3, r2
 800a624:	1e5a      	subs	r2, r3, #1
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800a62e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800a632:	2b00      	cmp	r3, #0
 800a634:	d12a      	bne.n	800a68c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a636:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	81fb      	strh	r3, [r7, #14]
 800a63e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a642:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a644:	89fb      	ldrh	r3, [r7, #14]
 800a646:	089b      	lsrs	r3, r3, #2
 800a648:	b29b      	uxth	r3, r3
 800a64a:	f103 0208 	add.w	r2, r3, #8
 800a64e:	7b7b      	ldrb	r3, [r7, #13]
 800a650:	4413      	add	r3, r2
 800a652:	b29b      	uxth	r3, r3
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a658:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a65e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a660:	429a      	cmp	r2, r3
 800a662:	d26d      	bcs.n	800a740 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800a664:	4b3c      	ldr	r3, [pc, #240]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a666:	889b      	ldrh	r3, [r3, #4]
 800a668:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d90a      	bls.n	800a684 <dfifo_alloc+0xec>
 800a66e:	4b39      	ldr	r3, [pc, #228]	@ (800a754 <dfifo_alloc+0x1bc>)
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d000      	beq.n	800a680 <dfifo_alloc+0xe8>
 800a67e:	be00      	bkpt	0x0000
 800a680:	2300      	movs	r3, #0
 800a682:	e05e      	b.n	800a742 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800a684:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	625a      	str	r2, [r3, #36]	@ 0x24
 800a68a:	e059      	b.n	800a740 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800a68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68e:	7a5b      	ldrb	r3, [r3, #9]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d016      	beq.n	800a6c2 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800a694:	4b30      	ldr	r3, [pc, #192]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a696:	799a      	ldrb	r2, [r3, #6]
 800a698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69a:	7a5b      	ldrb	r3, [r3, #9]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d30a      	bcc.n	800a6b6 <dfifo_alloc+0x11e>
 800a6a0:	4b2c      	ldr	r3, [pc, #176]	@ (800a754 <dfifo_alloc+0x1bc>)
 800a6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d000      	beq.n	800a6b2 <dfifo_alloc+0x11a>
 800a6b0:	be00      	bkpt	0x0000
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e045      	b.n	800a742 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800a6b6:	4b28      	ldr	r3, [pc, #160]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a6b8:	799b      	ldrb	r3, [r3, #6]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b26      	ldr	r3, [pc, #152]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a6c0:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800a6ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800a6d4:	4b20      	ldr	r3, [pc, #128]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a6d6:	889b      	ldrh	r3, [r3, #4]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4299      	cmp	r1, r3
 800a6e4:	d20a      	bcs.n	800a6fc <dfifo_alloc+0x164>
 800a6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a754 <dfifo_alloc+0x1bc>)
 800a6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d000      	beq.n	800a6f8 <dfifo_alloc+0x160>
 800a6f6:	be00      	bkpt	0x0000
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e022      	b.n	800a742 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800a6fc:	4b16      	ldr	r3, [pc, #88]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a6fe:	889a      	ldrh	r2, [r3, #4]
 800a700:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	b29a      	uxth	r2, r3
 800a706:	4b14      	ldr	r3, [pc, #80]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a708:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800a70a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d108      	bne.n	800a724 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800a712:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a714:	041b      	lsls	r3, r3, #16
 800a716:	4a10      	ldr	r2, [pc, #64]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a718:	8892      	ldrh	r2, [r2, #4]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a720:	629a      	str	r2, [r3, #40]	@ 0x28
 800a722:	e00d      	b.n	800a740 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800a724:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a726:	041b      	lsls	r3, r3, #16
 800a728:	4a0b      	ldr	r2, [pc, #44]	@ (800a758 <dfifo_alloc+0x1c0>)
 800a72a:	8892      	ldrh	r2, [r2, #4]
 800a72c:	431a      	orrs	r2, r3
 800a72e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a732:	3b01      	subs	r3, #1
 800a734:	4611      	mov	r1, r2
 800a736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a738:	3340      	adds	r3, #64	@ 0x40
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800a740:	2301      	movs	r3, #1
}
 800a742:	4618      	mov	r0, r3
 800a744:	3744      	adds	r7, #68	@ 0x44
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	0800ec98 	.word	0x0800ec98
 800a754:	e000edf0 	.word	0xe000edf0
 800a758:	200012c0 	.word	0x200012c0

0800a75c <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	4a27      	ldr	r2, [pc, #156]	@ (800a808 <dfifo_device_init+0xac>)
 800a76c:	4413      	add	r3, r2
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a774:	7b3b      	ldrb	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <dfifo_device_init+0x22>
    rhport = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a77e:	7b3b      	ldrb	r3, [r7, #12]
 800a780:	4a21      	ldr	r2, [pc, #132]	@ (800a808 <dfifo_device_init+0xac>)
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	4413      	add	r3, r2
 800a786:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a788:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	7a1b      	ldrb	r3, [r3, #8]
 800a78e:	2240      	movs	r2, #64	@ 0x40
 800a790:	81fa      	strh	r2, [r7, #14]
 800a792:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a794:	89fb      	ldrh	r3, [r7, #14]
 800a796:	089b      	lsrs	r3, r3, #2
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f103 0208 	add.w	r2, r3, #8
 800a79e:	7b7b      	ldrb	r3, [r7, #13]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7b6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a7b8:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800a7ba:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	089b      	lsrs	r3, r3, #2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	4b11      	ldr	r3, [pc, #68]	@ (800a80c <dfifo_device_init+0xb0>)
 800a7c6:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a80c <dfifo_device_init+0xb0>)
 800a7d0:	889a      	ldrh	r2, [r3, #4]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	7a1b      	ldrb	r3, [r3, #8]
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	4b0b      	ldr	r3, [pc, #44]	@ (800a80c <dfifo_device_init+0xb0>)
 800a7e0:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a80c <dfifo_device_init+0xb0>)
 800a7e4:	889b      	ldrh	r3, [r3, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	041b      	lsls	r3, r3, #16
 800a7ec:	441a      	add	r2, r3
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
 800a7f4:	2240      	movs	r2, #64	@ 0x40
 800a7f6:	2180      	movs	r1, #128	@ 0x80
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fecd 	bl	800a598 <dfifo_alloc>
}
 800a7fe:	bf00      	nop
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	0800ec98 	.word	0x0800ec98
 800a80c:	200012c0 	.word	0x200012c0

0800a810 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800a810:	b480      	push	{r7}
 800a812:	b08b      	sub	sp, #44	@ 0x2c
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a820:	7c7b      	ldrb	r3, [r7, #17]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <edpt_activate+0x1a>
    rhport = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a82a:	7c7b      	ldrb	r3, [r7, #17]
 800a82c:	4a45      	ldr	r2, [pc, #276]	@ (800a944 <edpt_activate+0x134>)
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	4413      	add	r3, r2
 800a832:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a83c:	7cbb      	ldrb	r3, [r7, #18]
 800a83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	789b      	ldrb	r3, [r3, #2]
 800a84c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a84e:	7cfb      	ldrb	r3, [r7, #19]
 800a850:	09db      	lsrs	r3, r3, #7
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800a858:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a85c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a860:	0052      	lsls	r2, r2, #1
 800a862:	4413      	add	r3, r2
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	4a38      	ldr	r2, [pc, #224]	@ (800a948 <edpt_activate+0x138>)
 800a868:	4413      	add	r3, r2
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	889b      	ldrh	r3, [r3, #4]
 800a874:	b29b      	uxth	r3, r3
 800a876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a87a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	799a      	ldrb	r2, [r3, #6]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	895b      	ldrh	r3, [r3, #10]
 800a890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a894:	b29a      	uxth	r2, r3
 800a896:	89bb      	ldrh	r3, [r7, #12]
 800a898:	f362 030a 	bfi	r3, r2, #0, #11
 800a89c:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800a89e:	7b7b      	ldrb	r3, [r7, #13]
 800a8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a4:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	78db      	ldrb	r3, [r3, #3]
 800a8aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	f362 0383 	bfi	r3, r2, #2, #2
 800a8b6:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	78db      	ldrb	r3, [r3, #3]
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d003      	beq.n	800a8ce <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	f043 0310 	orr.w	r3, r3, #16
 800a8cc:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800a8ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d108      	bne.n	800a8e8 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800a8d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8da:	f003 030f 	and.w	r3, r3, #15
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	89fb      	ldrh	r3, [r7, #14]
 800a8e2:	f362 1389 	bfi	r3, r2, #6, #4
 800a8e6:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a8e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	bf14      	ite	ne
 800a8f0:	2301      	movne	r3, #1
 800a8f2:	2300      	moveq	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8fc:	0112      	lsls	r2, r2, #4
 800a8fe:	4413      	add	r3, r2
 800a900:	3348      	adds	r3, #72	@ 0x48
 800a902:	015b      	lsls	r3, r3, #5
 800a904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a906:	4413      	add	r3, r2
 800a908:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800a910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a912:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800a916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a91a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800a91e:	2901      	cmp	r1, #1
 800a920:	d101      	bne.n	800a926 <edpt_activate+0x116>
 800a922:	2100      	movs	r1, #0
 800a924:	e000      	b.n	800a928 <edpt_activate+0x118>
 800a926:	2110      	movs	r1, #16
 800a928:	440b      	add	r3, r1
 800a92a:	2101      	movs	r1, #1
 800a92c:	fa01 f303 	lsl.w	r3, r1, r3
 800a930:	431a      	orrs	r2, r3
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800a938:	bf00      	nop
 800a93a:	372c      	adds	r7, #44	@ 0x2c
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	0800ec98 	.word	0x0800ec98
 800a948:	20001240 	.word	0x20001240

0800a94c <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800a94c:	b480      	push	{r7}
 800a94e:	b089      	sub	sp, #36	@ 0x24
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
 800a956:	460b      	mov	r3, r1
 800a958:	71bb      	strb	r3, [r7, #6]
 800a95a:	4613      	mov	r3, r2
 800a95c:	717b      	strb	r3, [r7, #5]
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a962:	7c7b      	ldrb	r3, [r7, #17]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <edpt_disable+0x20>
    rhport = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a96c:	7c7b      	ldrb	r3, [r7, #17]
 800a96e:	4a5b      	ldr	r2, [pc, #364]	@ (800aadc <edpt_disable+0x190>)
 800a970:	011b      	lsls	r3, r3, #4
 800a972:	4413      	add	r3, r2
 800a974:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a976:	61fb      	str	r3, [r7, #28]
 800a978:	79bb      	ldrb	r3, [r7, #6]
 800a97a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a97c:	7cbb      	ldrb	r3, [r7, #18]
 800a97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a982:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a984:	76fb      	strb	r3, [r7, #27]
 800a986:	79bb      	ldrb	r3, [r7, #6]
 800a988:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a98a:	7cfb      	ldrb	r3, [r7, #19]
 800a98c:	09db      	lsrs	r3, r3, #7
 800a98e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a990:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a992:	7ebb      	ldrb	r3, [r7, #26]
 800a994:	2b01      	cmp	r3, #1
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	7efb      	ldrb	r3, [r7, #27]
 800a9a2:	0112      	lsls	r2, r2, #4
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3348      	adds	r3, #72	@ 0x48
 800a9a8:	015b      	lsls	r3, r3, #5
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800a9b0:	7ebb      	ldrb	r3, [r7, #26]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d149      	bne.n	800aa4a <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800a9b6:	7efb      	ldrb	r3, [r7, #27]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <edpt_disable+0x78>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	db0d      	blt.n	800a9e0 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	797a      	ldrb	r2, [r7, #5]
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	d002      	beq.n	800a9d4 <edpt_disable+0x88>
 800a9ce:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800a9d2:	e001      	b.n	800a9d8 <edpt_disable+0x8c>
 800a9d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e022      	b.n	800aa26 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800a9ec:	bf00      	nop
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0f9      	beq.n	800a9ee <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	797a      	ldrb	r2, [r7, #5]
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	d001      	beq.n	800aa08 <edpt_disable+0xbc>
 800aa04:	4a36      	ldr	r2, [pc, #216]	@ (800aae0 <edpt_disable+0x194>)
 800aa06:	e001      	b.n	800aa0c <edpt_disable+0xc0>
 800aa08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800aa12:	bf00      	nop
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0f9      	beq.n	800aa14 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2202      	movs	r2, #2
 800aa24:	609a      	str	r2, [r3, #8]
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	7efb      	ldrb	r3, [r7, #27]
 800aa2c:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800aa2e:	7afb      	ldrb	r3, [r7, #11]
 800aa30:	019b      	lsls	r3, r3, #6
 800aa32:	f043 0220 	orr.w	r2, r3, #32
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800aa3a:	bf00      	nop
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f9      	bne.n	800aa3c <edpt_disable+0xf0>
}
 800aa48:	e041      	b.n	800aace <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800aa4a:	7efb      	ldrb	r3, [r7, #27]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <edpt_disable+0x10c>
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	db0c      	blt.n	800aa72 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	797a      	ldrb	r2, [r7, #5]
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	d002      	beq.n	800aa68 <edpt_disable+0x11c>
 800aa62:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800aa66:	e000      	b.n	800aa6a <edpt_disable+0x11e>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e02d      	b.n	800aace <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800aa78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800aa82:	bf00      	nop
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f9      	beq.n	800aa84 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	797a      	ldrb	r2, [r7, #5]
 800aa96:	2a00      	cmp	r2, #0
 800aa98:	d001      	beq.n	800aa9e <edpt_disable+0x152>
 800aa9a:	4a11      	ldr	r2, [pc, #68]	@ (800aae0 <edpt_disable+0x194>)
 800aa9c:	e001      	b.n	800aaa2 <edpt_disable+0x156>
 800aa9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800aaa8:	bf00      	nop
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f9      	beq.n	800aaaa <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2202      	movs	r2, #2
 800aaba:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800aac2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	3724      	adds	r7, #36	@ 0x24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	0800ec98 	.word	0x0800ec98
 800aae0:	40200000 	.word	0x40200000

0800aae4 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b090      	sub	sp, #64	@ 0x40
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	71bb      	strb	r3, [r7, #6]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	717b      	strb	r3, [r7, #5]
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aafc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <edpt_schedule_packets+0x26>
    rhport = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ab0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab0e:	4a65      	ldr	r2, [pc, #404]	@ (800aca4 <edpt_schedule_packets+0x1c0>)
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	4413      	add	r3, r2
 800ab14:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ab16:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800ab18:	79ba      	ldrb	r2, [r7, #6]
 800ab1a:	797b      	ldrb	r3, [r7, #5]
 800ab1c:	0052      	lsls	r2, r2, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	4a61      	ldr	r2, [pc, #388]	@ (800aca8 <edpt_schedule_packets+0x1c4>)
 800ab24:	4413      	add	r3, r2
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ab28:	797b      	ldrb	r3, [r7, #5]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	bf14      	ite	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	2300      	moveq	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	79bb      	ldrb	r3, [r7, #6]
 800ab38:	0112      	lsls	r2, r2, #4
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3348      	adds	r3, #72	@ 0x48
 800ab3e:	015b      	lsls	r3, r3, #5
 800ab40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab42:	4413      	add	r3, r2
 800ab44:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800ab46:	79bb      	ldrb	r3, [r7, #6]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d11c      	bne.n	800ab86 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800ab4c:	797b      	ldrb	r3, [r7, #5]
 800ab4e:	4a57      	ldr	r2, [pc, #348]	@ (800acac <edpt_schedule_packets+0x1c8>)
 800ab50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ab54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab56:	895b      	ldrh	r3, [r3, #10]
 800ab58:	853a      	strh	r2, [r7, #40]	@ 0x28
 800ab5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ab5c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ab5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab60:	4293      	cmp	r3, r2
 800ab62:	bf28      	it	cs
 800ab64:	4613      	movcs	r3, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800ab6a:	797b      	ldrb	r3, [r7, #5]
 800ab6c:	4a4f      	ldr	r2, [pc, #316]	@ (800acac <edpt_schedule_packets+0x1c8>)
 800ab6e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ab72:	797b      	ldrb	r3, [r7, #5]
 800ab74:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ab76:	1a8a      	subs	r2, r1, r2
 800ab78:	b291      	uxth	r1, r2
 800ab7a:	4a4c      	ldr	r2, [pc, #304]	@ (800acac <edpt_schedule_packets+0x1c8>)
 800ab7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ab84:	e014      	b.n	800abb0 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800ab86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800ab8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ab8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab90:	8952      	ldrh	r2, [r2, #10]
 800ab92:	623b      	str	r3, [r7, #32]
 800ab94:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800ab96:	6a3a      	ldr	r2, [r7, #32]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800aba6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800abac:	2301      	movs	r3, #1
 800abae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800abb0:	2300      	movs	r3, #0
 800abb2:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800abb4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800abb6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f362 0312 	bfi	r3, r2, #0, #19
 800abc0:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800abc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc8:	b29a      	uxth	r2, r3
 800abca:	8afb      	ldrh	r3, [r7, #22]
 800abcc:	f362 03cc 	bfi	r3, r2, #3, #10
 800abd0:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800abde:	7cfb      	ldrb	r3, [r7, #19]
 800abe0:	f043 0304 	orr.w	r3, r3, #4
 800abe4:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800abe6:	7cfb      	ldrb	r3, [r7, #19]
 800abe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abec:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800abee:	7cbb      	ldrb	r3, [r7, #18]
 800abf0:	f003 030c 	and.w	r3, r3, #12
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d11a      	bne.n	800ac30 <edpt_schedule_packets+0x14c>
 800abfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfc:	7b1b      	ldrb	r3, [r3, #12]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d116      	bne.n	800ac30 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ac02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ac08:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800ac18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800ac1e:	7cfb      	ldrb	r3, [r7, #19]
 800ac20:	f043 0310 	orr.w	r3, r3, #16
 800ac24:	74fb      	strb	r3, [r7, #19]
 800ac26:	e003      	b.n	800ac30 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800ac28:	7cfb      	ldrb	r3, [r7, #19]
 800ac2a:	f043 0320 	orr.w	r3, r3, #32
 800ac2e:	74fb      	strb	r3, [r7, #19]
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac38:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ac3a:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800ac3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800ac40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d015      	beq.n	800ac74 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ac48:	797b      	ldrb	r3, [r7, #5]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d109      	bne.n	800ac62 <edpt_schedule_packets+0x17e>
 800ac4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d006      	beq.n	800ac62 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fd fd5c 	bl	800871a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800ac62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800ac72:	e013      	b.n	800ac9c <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ac7a:	797b      	ldrb	r3, [r7, #5]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d10d      	bne.n	800ac9c <edpt_schedule_packets+0x1b8>
 800ac80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00a      	beq.n	800ac9c <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800ac8c:	79ba      	ldrb	r2, [r7, #6]
 800ac8e:	2101      	movs	r1, #1
 800ac90:	fa01 f202 	lsl.w	r2, r1, r2
 800ac94:	431a      	orrs	r2, r3
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800ac9c:	bf00      	nop
 800ac9e:	3740      	adds	r7, #64	@ 0x40
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	0800ec98 	.word	0x0800ec98
 800aca8:	20001240 	.word	0x20001240
 800acac:	200012c0 	.word	0x200012c0

0800acb0 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08c      	sub	sp, #48	@ 0x30
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <dcd_init+0x1a>
    rhport = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	4a43      	ldr	r2, [pc, #268]	@ (800addc <dcd_init+0x12c>)
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	4413      	add	r3, r2
 800acd2:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800acd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800acd6:	2208      	movs	r2, #8
 800acd8:	2100      	movs	r1, #0
 800acda:	4841      	ldr	r0, [pc, #260]	@ (800ade0 <dcd_init+0x130>)
 800acdc:	f001 fe9d 	bl	800ca1a <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800ace0:	2101      	movs	r1, #1
 800ace2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace4:	f001 f9c6 	bl	800c074 <dwc2_core_is_highspeed>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800acee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf0:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acf6:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800acf8:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800acfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800acfe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ad02:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 f9d1 	bl	800c0b0 <dwc2_core_init>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f083 0301 	eor.w	r3, r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00a      	beq.n	800ad30 <dcd_init+0x80>
 800ad1a:	4b32      	ldr	r3, [pc, #200]	@ (800ade4 <dcd_init+0x134>)
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d000      	beq.n	800ad2c <dcd_init+0x7c>
 800ad2a:	be00      	bkpt	0x0000
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e050      	b.n	800add2 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800ad30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad32:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ad36:	f023 0303 	bic.w	r3, r3, #3
 800ad3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800ad3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad48:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800ad4a:	7b3b      	ldrb	r3, [r7, #12]
 800ad4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b80      	cmp	r3, #128	@ 0x80
 800ad54:	d108      	bne.n	800ad68 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800ad56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad5e:	e003      	b.n	800ad68 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad62:	f043 0303 	orr.w	r3, r3, #3
 800ad66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	f043 0304 	orr.w	r3, r3, #4
 800ad6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad74:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f92a 	bl	800afd4 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ad88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800ad98:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9e:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	699a      	ldr	r2, [r3, #24]
 800ada4:	4b10      	ldr	r3, [pc, #64]	@ (800ade8 <dcd_init+0x138>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adaa:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb8:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	f043 0301 	orr.w	r3, r3, #1
 800adc0:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	6a3a      	ldr	r2, [r7, #32]
 800adc6:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f8e0 	bl	800af90 <dcd_connect>
  return true;
 800add0:	2301      	movs	r3, #1
}
 800add2:	4618      	mov	r0, r3
 800add4:	3730      	adds	r7, #48	@ 0x30
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	0800ec98 	.word	0x0800ec98
 800ade0:	200012c0 	.word	0x200012c0
 800ade4:	e000edf0 	.word	0xe000edf0
 800ade8:	80003804 	.word	0x80003804

0800adec <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	71fb      	strb	r3, [r7, #7]
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	2301      	movs	r3, #1
 800adfc:	73bb      	strb	r3, [r7, #14]
 800adfe:	2301      	movs	r3, #1
 800ae00:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	4a0c      	ldr	r2, [pc, #48]	@ (800ae38 <dcd_int_enable+0x4c>)
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	4413      	add	r3, r2
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800ae10:	7b7b      	ldrb	r3, [r7, #13]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800ae16:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fb3e 	bl	800a49c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800ae20:	e004      	b.n	800ae2c <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800ae22:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff fb56 	bl	800a4d8 <__NVIC_DisableIRQ>
}
 800ae2c:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	0800ec98 	.word	0x0800ec98

0800ae3c <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	73fb      	strb	r3, [r7, #15]
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	73bb      	strb	r3, [r7, #14]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	4a0c      	ldr	r2, [pc, #48]	@ (800ae88 <dcd_int_disable+0x4c>)
 800ae56:	011b      	lsls	r3, r3, #4
 800ae58:	4413      	add	r3, r2
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800ae60:	7b7b      	ldrb	r3, [r7, #13]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800ae66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fb16 	bl	800a49c <__NVIC_EnableIRQ>
}
 800ae70:	e004      	b.n	800ae7c <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800ae72:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff fb2e 	bl	800a4d8 <__NVIC_DisableIRQ>
}
 800ae7c:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	0800ec98 	.word	0x0800ec98

0800ae8c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	460a      	mov	r2, r1
 800ae96:	71fb      	strb	r3, [r7, #7]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	71bb      	strb	r3, [r7, #6]
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aea0:	7a7b      	ldrb	r3, [r7, #9]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <dcd_set_address+0x1e>
    rhport = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aeaa:	7a7b      	ldrb	r3, [r7, #9]
 800aeac:	4a14      	ldr	r2, [pc, #80]	@ (800af00 <dcd_set_address+0x74>)
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	4413      	add	r3, r2
 800aeb2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aeb4:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800aebc:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800aec0:	79bb      	ldrb	r3, [r7, #6]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	431a      	orrs	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800aecc:	2300      	movs	r3, #0
 800aece:	72fb      	strb	r3, [r7, #11]
 800aed0:	2301      	movs	r3, #1
 800aed2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800aed4:	7abb      	ldrb	r3, [r7, #10]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <dcd_set_address+0x54>
 800aeda:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800aede:	e000      	b.n	800aee2 <dcd_set_address+0x56>
 800aee0:	2300      	movs	r3, #0
 800aee2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	b25b      	sxtb	r3, r3
 800aeea:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800aeec:	79f8      	ldrb	r0, [r7, #7]
 800aeee:	2300      	movs	r3, #0
 800aef0:	2200      	movs	r2, #0
 800aef2:	f000 f98b 	bl	800b20c <dcd_edpt_xfer>
}
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	0800ec98 	.word	0x0800ec98

0800af04 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <dcd_remote_wakeup+0x18>
    rhport = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	4a19      	ldr	r2, [pc, #100]	@ (800af84 <dcd_remote_wakeup+0x80>)
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	4413      	add	r3, r2
 800af24:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800af26:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af2e:	f043 0201 	orr.w	r2, r3, #1
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2208      	movs	r2, #8
 800af3c:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	f043 0208 	orr.w	r2, r3, #8
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800af4a:	4b0f      	ldr	r3, [pc, #60]	@ (800af88 <dcd_remote_wakeup+0x84>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a0f      	ldr	r2, [pc, #60]	@ (800af8c <dcd_remote_wakeup+0x88>)
 800af50:	fba2 2303 	umull	r2, r3, r2, r3
 800af54:	099b      	lsrs	r3, r3, #6
 800af56:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800af58:	e000      	b.n	800af5c <dcd_remote_wakeup+0x58>
 800af5a:	bf00      	nop
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1e5a      	subs	r2, r3, #1
 800af60:	613a      	str	r2, [r7, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1f9      	bne.n	800af5a <dcd_remote_wakeup+0x56>
}
 800af66:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af6e:	f023 0201 	bic.w	r2, r3, #1
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800af78:	bf00      	nop
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	0800ec98 	.word	0x0800ec98
 800af88:	20000108 	.word	0x20000108
 800af8c:	10624dd3 	.word	0x10624dd3

0800af90 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	71fb      	strb	r3, [r7, #7]
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800af9e:	7afb      	ldrb	r3, [r7, #11]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <dcd_connect+0x18>
    rhport = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	4a09      	ldr	r2, [pc, #36]	@ (800afd0 <dcd_connect+0x40>)
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	4413      	add	r3, r2
 800afb0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800afb2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800afba:	f023 0202 	bic.w	r2, r3, #2
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	0800ec98 	.word	0x0800ec98

0800afd4 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	71fb      	strb	r3, [r7, #7]
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800afe2:	7afb      	ldrb	r3, [r7, #11]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <dcd_disconnect+0x18>
    rhport = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	4a09      	ldr	r2, [pc, #36]	@ (800b014 <dcd_disconnect+0x40>)
 800aff0:	011b      	lsls	r3, r3, #4
 800aff2:	4413      	add	r3, r2
 800aff4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aff6:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800affe:	f043 0202 	orr.w	r2, r3, #2
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b008:	bf00      	nop
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	0800ec98 	.word	0x0800ec98

0800b018 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	460a      	mov	r2, r1
 800b022:	71fb      	strb	r3, [r7, #7]
 800b024:	4613      	mov	r3, r2
 800b026:	71bb      	strb	r3, [r7, #6]
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <dcd_sof_enable+0x1e>
    rhport = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b036:	7afb      	ldrb	r3, [r7, #11]
 800b038:	4a10      	ldr	r2, [pc, #64]	@ (800b07c <dcd_sof_enable+0x64>)
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	4413      	add	r3, r2
 800b03e:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b040:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b042:	4a0f      	ldr	r2, [pc, #60]	@ (800b080 <dcd_sof_enable+0x68>)
 800b044:	79bb      	ldrb	r3, [r7, #6]
 800b046:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b048:	79bb      	ldrb	r3, [r7, #6]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2208      	movs	r2, #8
 800b052:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	f043 0208 	orr.w	r2, r3, #8
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b060:	e005      	b.n	800b06e <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	f023 0208 	bic.w	r2, r3, #8
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	619a      	str	r2, [r3, #24]
}
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	0800ec98 	.word	0x0800ec98
 800b080:	200012c0 	.word	0x200012c0

0800b084 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	6039      	str	r1, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	7899      	ldrb	r1, [r3, #2]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	889b      	ldrh	r3, [r3, #4]
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff fa76 	bl	800a598 <dfifo_alloc>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f083 0301 	eor.w	r3, r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <dcd_edpt_open+0x4a>
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <dcd_edpt_open+0x60>)
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d000      	beq.n	800b0ca <dcd_edpt_open+0x46>
 800b0c8:	be00      	bkpt	0x0000
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e005      	b.n	800b0da <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff fb9c 	bl	800a810 <edpt_activate>
  return true;
 800b0d8:	2301      	movs	r3, #1
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	e000edf0 	.word	0xe000edf0

0800b0e8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	@ 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	4a3f      	ldr	r2, [pc, #252]	@ (800b200 <dcd_edpt_close_all+0x118>)
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	4413      	add	r3, r2
 800b108:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b10a:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	4a3c      	ldr	r2, [pc, #240]	@ (800b200 <dcd_edpt_close_all+0x118>)
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	4413      	add	r3, r2
 800b114:	3308      	adds	r3, #8
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b11a:	2000      	movs	r0, #0
 800b11c:	f7fe fd4a 	bl	8009bb4 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b120:	4b38      	ldr	r3, [pc, #224]	@ (800b204 <dcd_edpt_close_all+0x11c>)
 800b122:	2200      	movs	r2, #0
 800b124:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b12c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b130:	2301      	movs	r3, #1
 800b132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b136:	e034      	b.n	800b1a2 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b13e:	e027      	b.n	800b190 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b140:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b148:	0112      	lsls	r2, r2, #4
 800b14a:	4413      	add	r3, r2
 800b14c:	3348      	adds	r3, #72	@ 0x48
 800b14e:	015b      	lsls	r3, r3, #5
 800b150:	6a3a      	ldr	r2, [r7, #32]
 800b152:	4413      	add	r3, r2
 800b154:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da05      	bge.n	800b16a <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b16a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b16e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b172:	f1c3 0301 	rsb	r3, r3, #1
 800b176:	4924      	ldr	r1, [pc, #144]	@ (800b208 <dcd_edpt_close_all+0x120>)
 800b178:	0052      	lsls	r2, r2, #1
 800b17a:	4413      	add	r3, r2
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	440b      	add	r3, r1
 800b180:	330a      	adds	r3, #10
 800b182:	2200      	movs	r2, #0
 800b184:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b186:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b18a:	3301      	adds	r3, #1
 800b18c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b194:	2b01      	cmp	r3, #1
 800b196:	d9d3      	bls.n	800b140 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b19c:	3301      	adds	r3, #1
 800b19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b1a6:	7ffb      	ldrb	r3, [r7, #31]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3c5      	bcc.n	800b138 <dcd_edpt_close_all+0x50>
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	019b      	lsls	r3, r3, #6
 800b1b8:	f043 0220 	orr.w	r2, r3, #32
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b1c0:	bf00      	nop
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f9      	bne.n	800b1c2 <dcd_edpt_close_all+0xda>
}
 800b1ce:	bf00      	nop
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2210      	movs	r2, #16
 800b1d8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b1da:	bf00      	nop
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1f9      	bne.n	800b1dc <dcd_edpt_close_all+0xf4>
}
 800b1e8:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fab5 	bl	800a75c <dfifo_device_init>

  usbd_spin_unlock(false);
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f7fe fcf8 	bl	8009be8 <usbd_spin_unlock>
}
 800b1f8:	bf00      	nop
 800b1fa:	3728      	adds	r7, #40	@ 0x28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	0800ec98 	.word	0x0800ec98
 800b204:	200012c0 	.word	0x200012c0
 800b208:	20001240 	.word	0x20001240

0800b20c <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	603a      	str	r2, [r7, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
 800b21a:	460b      	mov	r3, r1
 800b21c:	71bb      	strb	r3, [r7, #6]
 800b21e:	4613      	mov	r3, r2
 800b220:	80bb      	strh	r3, [r7, #4]
 800b222:	79bb      	ldrb	r3, [r7, #6]
 800b224:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b22c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b22e:	75bb      	strb	r3, [r7, #22]
 800b230:	79bb      	ldrb	r3, [r7, #6]
 800b232:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	09db      	lsrs	r3, r3, #7
 800b238:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b23a:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b23c:	7dba      	ldrb	r2, [r7, #22]
 800b23e:	7d7b      	ldrb	r3, [r7, #21]
 800b240:	0052      	lsls	r2, r2, #1
 800b242:	4413      	add	r3, r2
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	4a17      	ldr	r2, [pc, #92]	@ (800b2a4 <dcd_edpt_xfer+0x98>)
 800b248:	4413      	add	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b24c:	2000      	movs	r0, #0
 800b24e:	f7fe fcb1 	bl	8009bb4 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	895b      	ldrh	r3, [r3, #10]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d102      	bne.n	800b260 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b25a:	2300      	movs	r3, #0
 800b25c:	75fb      	strb	r3, [r7, #23]
 800b25e:	e018      	b.n	800b292 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2200      	movs	r2, #0
 800b26a:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	88ba      	ldrh	r2, [r7, #4]
 800b270:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b272:	7dbb      	ldrb	r3, [r7, #22]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b278:	7d7b      	ldrb	r3, [r7, #21]
 800b27a:	490b      	ldr	r1, [pc, #44]	@ (800b2a8 <dcd_edpt_xfer+0x9c>)
 800b27c:	88ba      	ldrh	r2, [r7, #4]
 800b27e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b282:	7d7a      	ldrb	r2, [r7, #21]
 800b284:	7db9      	ldrb	r1, [r7, #22]
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fc2b 	bl	800aae4 <edpt_schedule_packets>
    ret = true;
 800b28e:	2301      	movs	r3, #1
 800b290:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b292:	2000      	movs	r0, #0
 800b294:	f7fe fca8 	bl	8009be8 <usbd_spin_unlock>

  return ret;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20001240 	.word	0x20001240
 800b2a8:	200012c0 	.word	0x200012c0

0800b2ac <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	460a      	mov	r2, r1
 800b2b6:	71fb      	strb	r3, [r7, #7]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	71bb      	strb	r3, [r7, #6]
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b2c0:	7cbb      	ldrb	r3, [r7, #18]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b2ca:	7cbb      	ldrb	r3, [r7, #18]
 800b2cc:	4a11      	ldr	r2, [pc, #68]	@ (800b314 <dcd_edpt_stall+0x68>)
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	4413      	add	r3, r2
 800b2d2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b2d4:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b2d6:	79b9      	ldrb	r1, [r7, #6]
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff fb35 	bl	800a94c <edpt_disable>
 800b2e2:	79bb      	ldrb	r3, [r7, #6]
 800b2e4:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b2e6:	7cfb      	ldrb	r3, [r7, #19]
 800b2e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ec:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10b      	bne.n	800b30a <dcd_edpt_stall+0x5e>
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2fa:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b2fc:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff f90b 	bl	800a520 <dma_setup_prepare>
  }
}
 800b30a:	bf00      	nop
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	0800ec98 	.word	0x0800ec98

0800b318 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	460a      	mov	r2, r1
 800b322:	71fb      	strb	r3, [r7, #7]
 800b324:	4613      	mov	r3, r2
 800b326:	71bb      	strb	r3, [r7, #6]
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b32c:	7a7b      	ldrb	r3, [r7, #9]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b336:	7a7b      	ldrb	r3, [r7, #9]
 800b338:	4a19      	ldr	r2, [pc, #100]	@ (800b3a0 <dcd_edpt_clear_stall+0x88>)
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	4413      	add	r3, r2
 800b33e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b340:	617b      	str	r3, [r7, #20]
 800b342:	79bb      	ldrb	r3, [r7, #6]
 800b344:	72bb      	strb	r3, [r7, #10]
 800b346:	7abb      	ldrb	r3, [r7, #10]
 800b348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b34e:	74fb      	strb	r3, [r7, #19]
 800b350:	79bb      	ldrb	r3, [r7, #6]
 800b352:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	09db      	lsrs	r3, r3, #7
 800b358:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b35a:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b35c:	7cbb      	ldrb	r3, [r7, #18]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	b2db      	uxtb	r3, r3
 800b368:	461a      	mov	r2, r3
 800b36a:	7cfb      	ldrb	r3, [r7, #19]
 800b36c:	0112      	lsls	r2, r2, #4
 800b36e:	4413      	add	r3, r2
 800b370:	3348      	adds	r3, #72	@ 0x48
 800b372:	015b      	lsls	r3, r3, #5
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	4413      	add	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]
}
 800b392:	bf00      	nop
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	0800ec98 	.word	0x0800ec98

0800b3a4 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08e      	sub	sp, #56	@ 0x38
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	71fb      	strb	r3, [r7, #7]
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <handle_bus_reset+0x1e>
    rhport = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3c6:	4a6a      	ldr	r2, [pc, #424]	@ (800b570 <handle_bus_reset+0x1cc>)
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3d8:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b3da:	7a7b      	ldrb	r3, [r7, #9]
 800b3dc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b3e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b3ea:	2280      	movs	r2, #128	@ 0x80
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4861      	ldr	r0, [pc, #388]	@ (800b574 <handle_bus_reset+0x1d0>)
 800b3f0:	f001 fb13 	bl	800ca1a <memset>

  _dcd_data.sof_en = false;
 800b3f4:	4b60      	ldr	r3, [pc, #384]	@ (800b578 <handle_bus_reset+0x1d4>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b3fa:	4b5f      	ldr	r3, [pc, #380]	@ (800b578 <handle_bus_reset+0x1d4>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b400:	2300      	movs	r3, #0
 800b402:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b406:	e014      	b.n	800b432 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b40c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b40e:	3358      	adds	r3, #88	@ 0x58
 800b410:	015b      	lsls	r3, r3, #5
 800b412:	4413      	add	r3, r2
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b41a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b41e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b420:	3358      	adds	r3, #88	@ 0x58
 800b422:	015b      	lsls	r3, r3, #5
 800b424:	440b      	add	r3, r1
 800b426:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b428:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b42c:	3301      	adds	r3, #1
 800b42e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b432:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b436:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d3e4      	bcc.n	800b408 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b43e:	2300      	movs	r3, #0
 800b440:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b444:	e01d      	b.n	800b482 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b446:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b44c:	3348      	adds	r3, #72	@ 0x48
 800b44e:	015b      	lsls	r3, r3, #5
 800b450:	4413      	add	r3, r2
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	da0f      	bge.n	800b478 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b458:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b45c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b45e:	3348      	adds	r3, #72	@ 0x48
 800b460:	015b      	lsls	r3, r3, #5
 800b462:	4413      	add	r3, r2
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b46a:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b46e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b470:	3348      	adds	r3, #72	@ 0x48
 800b472:	015b      	lsls	r3, r3, #5
 800b474:	440b      	add	r3, r1
 800b476:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b478:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b47c:	3301      	adds	r3, #1
 800b47e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b482:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d3db      	bcc.n	800b446 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b490:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b494:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49a:	2209      	movs	r2, #9
 800b49c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	2209      	movs	r2, #9
 800b4a4:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	61bb      	str	r3, [r7, #24]
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	019b      	lsls	r3, r3, #6
 800b4b4:	f043 0220 	orr.w	r2, r3, #32
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b4bc:	bf00      	nop
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f9      	bne.n	800b4be <handle_bus_reset+0x11a>
}
 800b4ca:	bf00      	nop
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	2210      	movs	r2, #16
 800b4d4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b4d6:	bf00      	nop
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	f003 0310 	and.w	r3, r3, #16
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f9      	bne.n	800b4d8 <handle_bus_reset+0x134>
}
 800b4e4:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b4e6:	79fb      	ldrb	r3, [r7, #7]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff f937 	bl	800a75c <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b4f4:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b4f6:	8a3b      	ldrh	r3, [r7, #16]
 800b4f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b4fc:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b502:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b50c:	f023 0203 	bic.w	r2, r3, #3
 800b510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b512:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b51c:	f023 0203 	bic.w	r2, r3, #3
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b526:	4b13      	ldr	r3, [pc, #76]	@ (800b574 <handle_bus_reset+0x1d0>)
 800b528:	2240      	movs	r2, #64	@ 0x40
 800b52a:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b52c:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <handle_bus_reset+0x1d0>)
 800b52e:	2240      	movs	r2, #64	@ 0x40
 800b530:	835a      	strh	r2, [r3, #26]
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b53a:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b53c:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800b542:	79fb      	ldrb	r3, [r7, #7]
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe ffeb 	bl	800a520 <dma_setup_prepare>
 800b54a:	e007      	b.n	800b55c <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54e:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800b552:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	619a      	str	r2, [r3, #24]
}
 800b568:	bf00      	nop
 800b56a:	3738      	adds	r7, #56	@ 0x38
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	0800ec98 	.word	0x0800ec98
 800b574:	20001240 	.word	0x20001240
 800b578:	200012c0 	.word	0x200012c0

0800b57c <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	@ 0x28
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	71fb      	strb	r3, [r7, #7]
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b58a:	7ffb      	ldrb	r3, [r7, #31]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <handle_enum_done+0x18>
    rhport = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b594:	7ffb      	ldrb	r3, [r7, #31]
 800b596:	4a1b      	ldr	r2, [pc, #108]	@ (800b604 <handle_enum_done+0x88>)
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	4413      	add	r3, r2
 800b59c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b59e:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b5a6:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800b5a8:	7e3b      	ldrb	r3, [r7, #24]
 800b5aa:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <handle_enum_done+0x3e>
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d004      	beq.n	800b5c2 <handle_enum_done+0x46>
 800b5b8:	e007      	b.n	800b5ca <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b5c0:	e007      	b.n	800b5d2 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b5c8:	e003      	b.n	800b5d2 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b5d0:	bf00      	nop
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	77bb      	strb	r3, [r7, #30]
 800b5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5da:	777b      	strb	r3, [r7, #29]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b5e0:	7fbb      	ldrb	r3, [r7, #30]
 800b5e2:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800b5e8:	7f7b      	ldrb	r3, [r7, #29]
 800b5ea:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800b5ec:	7f3a      	ldrb	r2, [r7, #28]
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fe f8df 	bl	80097b8 <dcd_event_handler>
}
 800b5fa:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800b5fc:	bf00      	nop
 800b5fe:	3728      	adds	r7, #40	@ 0x28
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	0800ec98 	.word	0x0800ec98

0800b608 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08c      	sub	sp, #48	@ 0x30
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	71fb      	strb	r3, [r7, #7]
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b616:	7cfb      	ldrb	r3, [r7, #19]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b620:	7cfb      	ldrb	r3, [r7, #19]
 800b622:	4a49      	ldr	r2, [pc, #292]	@ (800b748 <handle_rxflvl_irq+0x140>)
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	4413      	add	r3, r2
 800b628:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b632:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800b63a:	7b3b      	ldrb	r3, [r7, #12]
 800b63c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b640:	b2db      	uxtb	r3, r3
 800b642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800b646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b64a:	3358      	adds	r3, #88	@ 0x58
 800b64c:	015b      	lsls	r3, r3, #5
 800b64e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b650:	4413      	add	r3, r2
 800b652:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	3b01      	subs	r3, #1
 800b65e:	2b05      	cmp	r3, #5
 800b660:	d86a      	bhi.n	800b738 <handle_rxflvl_irq+0x130>
 800b662:	a201      	add	r2, pc, #4	@ (adr r2, 800b668 <handle_rxflvl_irq+0x60>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b739 	.word	0x0800b739
 800b66c:	0800b6a7 	.word	0x0800b6a7
 800b670:	0800b739 	.word	0x0800b739
 800b674:	0800b699 	.word	0x0800b699
 800b678:	0800b739 	.word	0x0800b739
 800b67c:	0800b681 	.word	0x0800b681
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800b680:	4b32      	ldr	r3, [pc, #200]	@ (800b74c <handle_rxflvl_irq+0x144>)
 800b682:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	3304      	adds	r3, #4
 800b690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	601a      	str	r2, [r3, #0]
      break;
 800b696:	e052      	b.n	800b73e <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	611a      	str	r2, [r3, #16]
      break;
 800b6a4:	e04b      	b.n	800b73e <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800b6a6:	89bb      	ldrh	r3, [r7, #12]
 800b6a8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6b4:	015b      	lsls	r3, r3, #5
 800b6b6:	4a26      	ldr	r2, [pc, #152]	@ (800b750 <handle_rxflvl_irq+0x148>)
 800b6b8:	4413      	add	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800b6bc:	8b7b      	ldrh	r3, [r7, #26]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d03c      	beq.n	800b73c <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	8b7a      	ldrh	r2, [r7, #26]
 800b6d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fc ff7e 	bl	80085d4 <tu_fifo_write_n_const_addr_full_words>
 800b6d8:	e00c      	b.n	800b6f4 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	8b7a      	ldrh	r2, [r7, #26]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b6e4:	f000 fd70 	bl	800c1c8 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	8b7b      	ldrh	r3, [r7, #26]
 800b6ee:	441a      	add	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	895b      	ldrh	r3, [r3, #10]
 800b6f8:	8b7a      	ldrh	r2, [r7, #26]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d21e      	bcs.n	800b73c <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	891a      	ldrh	r2, [r3, #8]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b70e:	b29b      	uxth	r3, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	b29a      	uxth	r2, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800b718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10d      	bne.n	800b73c <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	891a      	ldrh	r2, [r3, #8]
 800b724:	4b0b      	ldr	r3, [pc, #44]	@ (800b754 <handle_rxflvl_irq+0x14c>)
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800b730:	4b08      	ldr	r3, [pc, #32]	@ (800b754 <handle_rxflvl_irq+0x14c>)
 800b732:	2200      	movs	r2, #0
 800b734:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800b736:	e001      	b.n	800b73c <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800b738:	bf00      	nop
 800b73a:	e000      	b.n	800b73e <handle_rxflvl_irq+0x136>
      break;
 800b73c:	bf00      	nop
  }
}
 800b73e:	bf00      	nop
 800b740:	3730      	adds	r7, #48	@ 0x30
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	0800ec98 	.word	0x0800ec98
 800b74c:	200012c8 	.word	0x200012c8
 800b750:	20001240 	.word	0x20001240
 800b754:	200012c0 	.word	0x200012c0

0800b758 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08e      	sub	sp, #56	@ 0x38
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	603a      	str	r2, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
 800b764:	460b      	mov	r3, r1
 800b766:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800b768:	783b      	ldrb	r3, [r7, #0]
 800b76a:	f003 0308 	and.w	r3, r3, #8
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01c      	beq.n	800b7ae <handle_epout_slave+0x56>
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b77a:	4b34      	ldr	r3, [pc, #208]	@ (800b84c <handle_epout_slave+0xf4>)
 800b77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b77e:	2301      	movs	r3, #1
 800b780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b784:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b788:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800b78a:	2306      	movs	r3, #6
 800b78c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800b78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b790:	f107 0318 	add.w	r3, r7, #24
 800b794:	6810      	ldr	r0, [r2, #0]
 800b796:	6851      	ldr	r1, [r2, #4]
 800b798:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800b79a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe f807 	bl	80097b8 <dcd_event_handler>
}
 800b7aa:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800b7ac:	e04a      	b.n	800b844 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800b7ae:	783b      	ldrb	r3, [r7, #0]
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d044      	beq.n	800b844 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800b7ba:	783b      	ldrb	r3, [r7, #0]
 800b7bc:	f003 0320 	and.w	r3, r3, #32
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d13e      	bne.n	800b844 <handle_epout_slave+0xec>
 800b7c6:	787b      	ldrb	r3, [r7, #1]
 800b7c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d138      	bne.n	800b844 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b7d2:	79bb      	ldrb	r3, [r7, #6]
 800b7d4:	015b      	lsls	r3, r3, #5
 800b7d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b850 <handle_epout_slave+0xf8>)
 800b7d8:	4413      	add	r3, r2
 800b7da:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800b7dc:	79bb      	ldrb	r3, [r7, #6]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10a      	bne.n	800b7f8 <handle_epout_slave+0xa0>
 800b7e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b854 <handle_epout_slave+0xfc>)
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d006      	beq.n	800b7f8 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800b7ea:	79b9      	ldrb	r1, [r7, #6]
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff f977 	bl	800aae4 <edpt_schedule_packets>
 800b7f6:	e025      	b.n	800b844 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800b7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7fa:	891b      	ldrh	r3, [r3, #8]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b804:	79bb      	ldrb	r3, [r7, #6]
 800b806:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800b80a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b80c:	2300      	movs	r3, #0
 800b80e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b812:	2301      	movs	r3, #1
 800b814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b818:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b81c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800b81e:	2307      	movs	r3, #7
 800b820:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800b822:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b826:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82a:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800b82c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b830:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800b832:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b836:	f107 0308 	add.w	r3, r7, #8
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fd ffbb 	bl	80097b8 <dcd_event_handler>
}
 800b842:	bf00      	nop
      }
    }
  }
}
 800b844:	3738      	adds	r7, #56	@ 0x38
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200012c8 	.word	0x200012c8
 800b850:	20001240 	.word	0x20001240
 800b854:	200012c0 	.word	0x200012c0

0800b858 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b092      	sub	sp, #72	@ 0x48
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	603a      	str	r2, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
 800b864:	460b      	mov	r3, r1
 800b866:	71bb      	strb	r3, [r7, #6]
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b86e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <handle_epin_slave+0x24>
    rhport = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b87c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b880:	4a64      	ldr	r2, [pc, #400]	@ (800ba14 <handle_epin_slave+0x1bc>)
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	4413      	add	r3, r2
 800b886:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b888:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800b88a:	79bb      	ldrb	r3, [r7, #6]
 800b88c:	3348      	adds	r3, #72	@ 0x48
 800b88e:	015b      	lsls	r3, r3, #5
 800b890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b892:	4413      	add	r3, r2
 800b894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800b896:	79bb      	ldrb	r3, [r7, #6]
 800b898:	015b      	lsls	r3, r3, #5
 800b89a:	3310      	adds	r3, #16
 800b89c:	4a5e      	ldr	r2, [pc, #376]	@ (800ba18 <handle_epin_slave+0x1c0>)
 800b89e:	4413      	add	r3, r2
 800b8a0:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800b8a2:	783b      	ldrb	r3, [r7, #0]
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d037      	beq.n	800b91e <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800b8ae:	79bb      	ldrb	r3, [r7, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <handle_epin_slave+0x72>
 800b8b4:	4b59      	ldr	r3, [pc, #356]	@ (800ba1c <handle_epin_slave+0x1c4>)
 800b8b6:	885b      	ldrh	r3, [r3, #2]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d006      	beq.n	800b8ca <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800b8bc:	79b9      	ldrb	r1, [r7, #6]
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff f90e 	bl	800aae4 <edpt_schedule_packets>
 800b8c8:	e029      	b.n	800b91e <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800b8ca:	79bb      	ldrb	r3, [r7, #6]
 800b8cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8d0:	b2d9      	uxtb	r1, r3
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d4:	891b      	ldrh	r3, [r3, #8]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8de:	460b      	mov	r3, r1
 800b8e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800b8e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800b8f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b8f6:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800b8f8:	2307      	movs	r3, #7
 800b8fa:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800b8fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b900:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800b906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b90a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800b90c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b910:	f107 0310 	add.w	r3, r7, #16
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd ff4e 	bl	80097b8 <dcd_event_handler>
}
 800b91c:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800b91e:	783b      	ldrb	r3, [r7, #0]
 800b920:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d070      	beq.n	800ba0c <handle_epin_slave+0x1b4>
 800b92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b92c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b930:	79ba      	ldrb	r2, [r7, #6]
 800b932:	2101      	movs	r1, #1
 800b934:	fa01 f202 	lsl.w	r2, r1, r2
 800b938:	4013      	ands	r3, r2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d066      	beq.n	800ba0c <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800b93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800b944:	89fb      	ldrh	r3, [r7, #14]
 800b946:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800b94e:	2300      	movs	r3, #0
 800b950:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b954:	e03f      	b.n	800b9d6 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800b956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b962:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	895a      	ldrh	r2, [r3, #10]
 800b968:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b96a:	843b      	strh	r3, [r7, #32]
 800b96c:	4613      	mov	r3, r2
 800b96e:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b970:	8c3a      	ldrh	r2, [r7, #32]
 800b972:	8bfb      	ldrh	r3, [r7, #30]
 800b974:	4293      	cmp	r3, r2
 800b976:	bf28      	it	cs
 800b978:	4613      	movcs	r3, r2
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800b97e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	0099      	lsls	r1, r3, #2
 800b986:	4b26      	ldr	r3, [pc, #152]	@ (800ba20 <handle_epin_slave+0x1c8>)
 800b988:	400b      	ands	r3, r1
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d829      	bhi.n	800b9e2 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00d      	beq.n	800b9b2 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800b996:	79bb      	ldrb	r3, [r7, #6]
 800b998:	3301      	adds	r3, #1
 800b99a:	031b      	lsls	r3, r3, #12
 800b99c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b99e:	4413      	add	r3, r2
 800b9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800b9a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fc fdab 	bl	8008506 <tu_fifo_read_n_const_addr_full_words>
 800b9b0:	e00c      	b.n	800b9cc <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b9b8:	79b9      	ldrb	r1, [r7, #6]
 800b9ba:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b9bc:	f000 fc55 	bl	800c26a <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b9c6:	441a      	add	r2, r3
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ca:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800b9cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b9d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800b9da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d3ba      	bcc.n	800b956 <handle_epin_slave+0xfe>
 800b9e0:	e000      	b.n	800b9e4 <handle_epin_slave+0x18c>
        break;
 800b9e2:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800b9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10b      	bne.n	800ba0c <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800b9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9f6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b9fa:	79ba      	ldrb	r2, [r7, #6]
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	fa01 f202 	lsl.w	r2, r1, r2
 800ba02:	43d2      	mvns	r2, r2
 800ba04:	401a      	ands	r2, r3
 800ba06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba08:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800ba0c:	bf00      	nop
 800ba0e:	3748      	adds	r7, #72	@ 0x48
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	0800ec98 	.word	0x0800ec98
 800ba18:	20001240 	.word	0x20001240
 800ba1c:	200012c0 	.word	0x200012c0
 800ba20:	0003fffc 	.word	0x0003fffc

0800ba24 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08e      	sub	sp, #56	@ 0x38
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	460a      	mov	r2, r1
 800ba2e:	71fb      	strb	r3, [r7, #7]
 800ba30:	4613      	mov	r3, r2
 800ba32:	71bb      	strb	r3, [r7, #6]
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba38:	7efb      	ldrb	r3, [r7, #27]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <handle_ep_irq+0x1e>
    rhport = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba42:	7efb      	ldrb	r3, [r7, #27]
 800ba44:	4a38      	ldr	r2, [pc, #224]	@ (800bb28 <handle_ep_irq+0x104>)
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	4413      	add	r3, r2
 800ba4a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ba4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba56:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ba58:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800ba5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba60:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba66:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800ba68:	7c7b      	ldrb	r3, [r7, #17]
 800ba6a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	3301      	adds	r3, #1
 800ba72:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800ba74:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800ba78:	79bb      	ldrb	r3, [r7, #6]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <handle_ep_irq+0x5e>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e000      	b.n	800ba84 <handle_ep_irq+0x60>
 800ba82:	2310      	movs	r3, #16
 800ba84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800ba88:	79bb      	ldrb	r3, [r7, #6]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	bf14      	ite	ne
 800ba8e:	2301      	movne	r3, #1
 800ba90:	2300      	moveq	r3, #0
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	025b      	lsls	r3, r3, #9
 800ba96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba9c:	4413      	add	r3, r2
 800ba9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800baa6:	e034      	b.n	800bb12 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800baa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baaa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800baae:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bab2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bab6:	440b      	add	r3, r1
 800bab8:	fa22 f303 	lsr.w	r3, r2, r3
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d021      	beq.n	800bb08 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bac4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bac8:	015b      	lsls	r3, r3, #5
 800baca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bacc:	4413      	add	r3, r2
 800bace:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bada:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800badc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d111      	bne.n	800bb08 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bae4:	79bb      	ldrb	r3, [r7, #6]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d107      	bne.n	800bafa <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800baea:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff feb0 	bl	800b858 <handle_epin_slave>
 800baf8:	e006      	b.n	800bb08 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bafa:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff fe28 	bl	800b758 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bb08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb12:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bb16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d3c4      	bcc.n	800baa8 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bb1e:	bf00      	nop
 800bb20:	bf00      	nop
 800bb22:	3738      	adds	r7, #56	@ 0x38
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	0800ec98 	.word	0x0800ec98

0800bb2c <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b098      	sub	sp, #96	@ 0x60
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	71fb      	strb	r3, [r7, #7]
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bb3c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <dcd_int_handler+0x1e>
    rhport = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bb4a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bb4e:	4a80      	ldr	r2, [pc, #512]	@ (800bd50 <dcd_int_handler+0x224>)
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	4413      	add	r3, r2
 800bb54:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bb56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800bb58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb64:	4013      	ands	r3, r2
 800bb66:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800bb68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00d      	beq.n	800bb8e <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800bb72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bb78:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	f7fe f81a 	bl	8009bb4 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fc0e 	bl	800b3a4 <handle_bus_reset>
    usbd_spin_unlock(true);
 800bb88:	2001      	movs	r0, #1
 800bb8a:	f7fe f82d 	bl	8009be8 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800bb98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bb9e:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fcea 	bl	800b57c <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800bba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01d      	beq.n	800bbee <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800bbb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbb8:	615a      	str	r2, [r3, #20]
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800bbcc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800bbd0:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800bbd4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bbd8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800bbdc:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800bbe0:	f107 0320 	add.w	r3, r7, #32
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fd fde6 	bl	80097b8 <dcd_event_handler>
}
 800bbec:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800bbee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da1d      	bge.n	800bc30 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800bbf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbf6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bbfa:	615a      	str	r2, [r3, #20]
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc02:	2305      	movs	r3, #5
 800bc04:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800bc0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bc12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800bc16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800bc1a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800bc1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800bc22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fd fdc5 	bl	80097b8 <dcd_event_handler>
}
 800bc2e:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800bc30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d022      	beq.n	800bc80 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800bc3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800bc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d017      	beq.n	800bc7a <dcd_int_handler+0x14e>
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800bc50:	2302      	movs	r3, #2
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	2301      	movs	r3, #1
 800bc58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800bc5c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800bc60:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800bc62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc66:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800bc68:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800bc6c:	f107 0314 	add.w	r3, r7, #20
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd fda0 	bl	80097b8 <dcd_event_handler>
}
 800bc78:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc7e:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800bc80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc82:	f003 0308 	and.w	r3, r3, #8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d02e      	beq.n	800bce8 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800bc8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800bc90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc92:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800bc9e:	4b2d      	ldr	r3, [pc, #180]	@ (800bd54 <dcd_int_handler+0x228>)
 800bca0:	79db      	ldrb	r3, [r3, #7]
 800bca2:	f083 0301 	eor.w	r3, r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d005      	beq.n	800bcb8 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800bcac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	f023 0208 	bic.w	r2, r3, #8
 800bcb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcb6:	619a      	str	r2, [r3, #24]
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800bcbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bcc8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bccc:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800bcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd4:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800bcd6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fd fd69 	bl	80097b8 <dcd_event_handler>
}
 800bce6:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800bce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcea:	f003 0310 	and.w	r3, r3, #16
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d015      	beq.n	800bd1e <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800bcf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	f023 0210 	bic.w	r2, r3, #16
 800bcfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcfc:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fc81 	bl	800b608 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800bd06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	f003 0310 	and.w	r3, r3, #16
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f5      	bne.n	800bcfe <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800bd12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	f043 0210 	orr.w	r2, r3, #16
 800bd1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd1c:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800bd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d004      	beq.n	800bd32 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fe79 	bl	800ba24 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800bd32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d004      	beq.n	800bd46 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2101      	movs	r1, #1
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fe6f 	bl	800ba24 <handle_ep_irq>
  }
}
 800bd46:	bf00      	nop
 800bd48:	3760      	adds	r7, #96	@ 0x60
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800ec98 	.word	0x0800ec98
 800bd54:	200012c0 	.word	0x200012c0

0800bd58 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800bd76:	e005      	b.n	800bd84 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d152      	bne.n	800be48 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800bda2:	4b2c      	ldr	r3, [pc, #176]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a2c      	ldr	r2, [pc, #176]	@ (800be58 <dwc2_phy_update+0xc8>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d302      	bcc.n	800bdb2 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800bdac:	2306      	movs	r3, #6
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e041      	b.n	800be36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800bdb2:	4b28      	ldr	r3, [pc, #160]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a29      	ldr	r2, [pc, #164]	@ (800be5c <dwc2_phy_update+0xcc>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d902      	bls.n	800bdc2 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800bdbc:	2307      	movs	r3, #7
 800bdbe:	60fb      	str	r3, [r7, #12]
 800bdc0:	e039      	b.n	800be36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800bdc2:	4b24      	ldr	r3, [pc, #144]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a26      	ldr	r2, [pc, #152]	@ (800be60 <dwc2_phy_update+0xd0>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d302      	bcc.n	800bdd2 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800bdcc:	2308      	movs	r3, #8
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	e031      	b.n	800be36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800bdd2:	4b20      	ldr	r3, [pc, #128]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a23      	ldr	r2, [pc, #140]	@ (800be64 <dwc2_phy_update+0xd4>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d902      	bls.n	800bde2 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800bddc:	2309      	movs	r3, #9
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e029      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800bde2:	4b1c      	ldr	r3, [pc, #112]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a20      	ldr	r2, [pc, #128]	@ (800be68 <dwc2_phy_update+0xd8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d902      	bls.n	800bdf2 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800bdec:	230a      	movs	r3, #10
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	e021      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800bdf2:	4b18      	ldr	r3, [pc, #96]	@ (800be54 <dwc2_phy_update+0xc4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a1d      	ldr	r2, [pc, #116]	@ (800be6c <dwc2_phy_update+0xdc>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d902      	bls.n	800be02 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800bdfc:	230b      	movs	r3, #11
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e019      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800be02:	4b14      	ldr	r3, [pc, #80]	@ (800be54 <dwc2_phy_update+0xc4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a1a      	ldr	r2, [pc, #104]	@ (800be70 <dwc2_phy_update+0xe0>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d302      	bcc.n	800be12 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800be0c:	230c      	movs	r3, #12
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	e011      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800be12:	4b10      	ldr	r3, [pc, #64]	@ (800be54 <dwc2_phy_update+0xc4>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a17      	ldr	r2, [pc, #92]	@ (800be74 <dwc2_phy_update+0xe4>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d302      	bcc.n	800be22 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800be1c:	230d      	movs	r3, #13
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	e009      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800be22:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <dwc2_phy_update+0xc4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a14      	ldr	r2, [pc, #80]	@ (800be78 <dwc2_phy_update+0xe8>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d302      	bcc.n	800be32 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800be2c:	230e      	movs	r3, #14
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	e001      	b.n	800be36 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800be32:	230f      	movs	r3, #15
 800be34:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	029b      	lsls	r3, r3, #10
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60da      	str	r2, [r3, #12]
  }
}
 800be48:	bf00      	nop
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	20000108 	.word	0x20000108
 800be58:	01e84800 	.word	0x01e84800
 800be5c:	01a39ddf 	.word	0x01a39ddf
 800be60:	016e3600 	.word	0x016e3600
 800be64:	014ca43f 	.word	0x014ca43f
 800be68:	01312cff 	.word	0x01312cff
 800be6c:	011a499f 	.word	0x011a499f
 800be70:	01067380 	.word	0x01067380
 800be74:	00f42400 	.word	0x00f42400
 800be78:	00e4e1c0 	.word	0x00e4e1c0

0800be7c <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f043 0201 	orr.w	r2, r3, #1
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be94:	b29b      	uxth	r3, r3
 800be96:	f244 2209 	movw	r2, #16905	@ 0x4209
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d807      	bhi.n	800beae <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800be9e:	bf00      	nop
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1f9      	bne.n	800bea0 <reset_core+0x24>
 800beac:	e010      	b.n	800bed0 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800beae:	bf00      	nop
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d0f9      	beq.n	800beb0 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bec4:	f023 0301 	bic.w	r3, r3, #1
 800bec8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800bed0:	bf00      	nop
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dafb      	bge.n	800bed2 <reset_core+0x56>
}
 800beda:	bf00      	nop
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800befc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff ff26 	bl	800bd58 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ffb5 	bl	800be7c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800bf18:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800bf20:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800bf28:	2100      	movs	r1, #0
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff ff30 	bl	800bd90 <dwc2_phy_update>
}
 800bf30:	bf00      	nop
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf4a:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf50:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf58:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800bf5a:	7c3b      	ldrb	r3, [r7, #16]
 800bf5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b80      	cmp	r3, #128	@ 0x80
 800bf64:	d114      	bne.n	800bf90 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f043 0310 	orr.w	r3, r3, #16
 800bf6c:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f023 0308 	bic.w	r3, r3, #8
 800bf74:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf7c:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bf84:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e012      	b.n	800bfb6 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	f023 0310 	bic.w	r3, r3, #16
 800bf96:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800bf98:	7b7b      	ldrb	r3, [r7, #13]
 800bf9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d004      	beq.n	800bfae <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	f043 0308 	orr.w	r3, r3, #8
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e003      	b.n	800bfb6 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f023 0308 	bic.w	r3, r3, #8
 800bfb4:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800bfbc:	7c3b      	ldrb	r3, [r7, #16]
 800bfbe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff fec6 	bl	800bd58 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff ff55 	bl	800be7c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800bfd8:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800bfda:	7b7b      	ldrb	r3, [r7, #13]
 800bfdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d002      	beq.n	800bfec <phy_hs_init+0xb4>
 800bfe6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800bfea:	e001      	b.n	800bff0 <phy_hs_init+0xb8>
 800bfec:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800bffc:	7c3b      	ldrb	r3, [r7, #16]
 800bffe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c002:	b2db      	uxtb	r3, r3
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff fec2 	bl	800bd90 <dwc2_phy_update>
}
 800c00c:	bf00      	nop
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c020:	0c1b      	lsrs	r3, r3, #16
 800c022:	041b      	lsls	r3, r3, #16
 800c024:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	4a0e      	ldr	r2, [pc, #56]	@ (800c064 <check_dwc2+0x50>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d012      	beq.n	800c054 <check_dwc2+0x40>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4a0d      	ldr	r2, [pc, #52]	@ (800c068 <check_dwc2+0x54>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d00e      	beq.n	800c054 <check_dwc2+0x40>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4a0c      	ldr	r2, [pc, #48]	@ (800c06c <check_dwc2+0x58>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d00a      	beq.n	800c054 <check_dwc2+0x40>
 800c03e:	4b0c      	ldr	r3, [pc, #48]	@ (800c070 <check_dwc2+0x5c>)
 800c040:	60bb      	str	r3, [r7, #8]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d000      	beq.n	800c050 <check_dwc2+0x3c>
 800c04e:	be00      	bkpt	0x0000
 800c050:	2300      	movs	r3, #0
 800c052:	e000      	b.n	800c056 <check_dwc2+0x42>
#endif

  return true;
 800c054:	2301      	movs	r3, #1
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	4f540000 	.word	0x4f540000
 800c068:	55310000 	.word	0x55310000
 800c06c:	55320000 	.word	0x55320000
 800c070:	e000edf0 	.word	0xe000edf0

0800c074 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d101      	bne.n	800c08a <dwc2_core_is_highspeed+0x16>
    return false;
 800c086:	2300      	movs	r3, #0
 800c088:	e00b      	b.n	800c0a2 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c08e:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c090:	7b3b      	ldrb	r3, [r7, #12]
 800c092:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b00      	cmp	r3, #0
 800c09a:	bf14      	ite	ne
 800c09c:	2301      	movne	r3, #1
 800c09e:	2300      	moveq	r3, #0
 800c0a0:	b2db      	uxtb	r3, r3
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
	...

0800c0b0 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b088      	sub	sp, #32
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	71fb      	strb	r3, [r7, #7]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	71bb      	strb	r3, [r7, #6]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	717b      	strb	r3, [r7, #5]
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <dwc2_core_init+0x20>
    rhport = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	4a3b      	ldr	r2, [pc, #236]	@ (800c1c0 <dwc2_core_init+0x110>)
 800c0d4:	011b      	lsls	r3, r3, #4
 800c0d6:	4413      	add	r3, r2
 800c0d8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c0da:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c0dc:	69f8      	ldr	r0, [r7, #28]
 800c0de:	f7ff ff99 	bl	800c014 <check_dwc2>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f083 0301 	eor.w	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00a      	beq.n	800c104 <dwc2_core_init+0x54>
 800c0ee:	4b35      	ldr	r3, [pc, #212]	@ (800c1c4 <dwc2_core_init+0x114>)
 800c0f0:	61bb      	str	r3, [r7, #24]
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d000      	beq.n	800c100 <dwc2_core_init+0x50>
 800c0fe:	be00      	bkpt	0x0000
 800c100:	2300      	movs	r3, #0
 800c102:	e058      	b.n	800c1b6 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f023 0201 	bic.w	r2, r3, #1
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c110:	79bb      	ldrb	r3, [r7, #6]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c116:	69f8      	ldr	r0, [r7, #28]
 800c118:	f7ff ff0e 	bl	800bf38 <phy_hs_init>
 800c11c:	e002      	b.n	800c124 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c11e:	69f8      	ldr	r0, [r7, #28]
 800c120:	f7ff fee2 	bl	800bee8 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f043 0207 	orr.w	r2, r3, #7
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c136:	f023 020f 	bic.w	r2, r3, #15
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	2310      	movs	r3, #16
 800c146:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c148:	7afb      	ldrb	r3, [r7, #11]
 800c14a:	019b      	lsls	r3, r3, #6
 800c14c:	f043 0220 	orr.w	r2, r3, #32
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c154:	bf00      	nop
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f003 0320 	and.w	r3, r3, #32
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f9      	bne.n	800c156 <dwc2_core_init+0xa6>
}
 800c162:	bf00      	nop
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2210      	movs	r2, #16
 800c16c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c16e:	bf00      	nop
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	f003 0310 	and.w	r3, r3, #16
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1f9      	bne.n	800c170 <dwc2_core_init+0xc0>
}
 800c17c:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	f04f 32ff 	mov.w	r2, #4294967295
 800c184:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	2200      	movs	r2, #0
 800c192:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c194:	797b      	ldrb	r3, [r7, #5]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d006      	beq.n	800c1a8 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	609a      	str	r2, [r3, #8]
 800c1a6:	e005      	b.n	800c1b4 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	f043 0210 	orr.w	r2, r3, #16
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c1b4:	2301      	movs	r3, #1
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3720      	adds	r7, #32
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800eca8 	.word	0x0800eca8
 800c1c4:	e000edf0 	.word	0xe000edf0

0800c1c8 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c1c8:	b480      	push	{r7}
 800c1ca:	b08f      	sub	sp, #60	@ 0x3c
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1dc:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	089b      	lsrs	r3, r3, #2
 800c1e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c1e4:	e00b      	b.n	800c1fe <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1ee:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	6a3a      	ldr	r2, [r7, #32]
 800c1f4:	601a      	str	r2, [r3, #0]
}
 800c1f6:	bf00      	nop
    dst += 4;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c1fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c200:	1e5a      	subs	r2, r3, #1
 800c202:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1ee      	bne.n	800c1e6 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c214:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d020      	beq.n	800c25e <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c22e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c232:	2b01      	cmp	r3, #1
 800c234:	d907      	bls.n	800c246 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	3301      	adds	r3, #1
 800c23a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c23c:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	0a12      	lsrs	r2, r2, #8
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d907      	bls.n	800c25e <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	3302      	adds	r3, #2
 800c252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c254:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	0c12      	lsrs	r2, r2, #16
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c25e:	bf00      	nop
 800c260:	373c      	adds	r7, #60	@ 0x3c
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c26a:	b480      	push	{r7}
 800c26c:	b08b      	sub	sp, #44	@ 0x2c
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	461a      	mov	r2, r3
 800c276:	460b      	mov	r3, r1
 800c278:	72fb      	strb	r3, [r7, #11]
 800c27a:	4613      	mov	r3, r2
 800c27c:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	3301      	adds	r3, #1
 800c282:	031b      	lsls	r3, r3, #12
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4413      	add	r3, r2
 800c288:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c28a:	893b      	ldrh	r3, [r7, #8]
 800c28c:	089b      	lsrs	r3, r3, #2
 800c28e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c290:	e008      	b.n	800c2a4 <dfifo_write_packet+0x3a>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	601a      	str	r2, [r3, #0]
    src += 4;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c2a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c2a6:	1e5a      	subs	r2, r3, #1
 800c2a8:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1f1      	bne.n	800c292 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c2ae:	893b      	ldrh	r3, [r7, #8]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c2b8:	7efb      	ldrb	r3, [r7, #27]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d019      	beq.n	800c2f2 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c2c4:	7efb      	ldrb	r3, [r7, #27]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d906      	bls.n	800c2d8 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	021b      	lsls	r3, r3, #8
 800c2d2:	6a3a      	ldr	r2, [r7, #32]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c2d8:	7efb      	ldrb	r3, [r7, #27]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d906      	bls.n	800c2ec <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	041b      	lsls	r3, r3, #16
 800c2e6:	6a3a      	ldr	r2, [r7, #32]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	6a3a      	ldr	r2, [r7, #32]
 800c2f0:	601a      	str	r2, [r3, #0]
  }
}
 800c2f2:	bf00      	nop
 800c2f4:	372c      	adds	r7, #44	@ 0x2c
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
	...

0800c300 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	6039      	str	r1, [r7, #0]
 800c30a:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d11f      	bne.n	800c352 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c312:	2301      	movs	r3, #1
 800c314:	723b      	strb	r3, [r7, #8]
 800c316:	2300      	movs	r3, #0
 800c318:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4619      	mov	r1, r3
 800c320:	2000      	movs	r0, #0
 800c322:	f7fc fa63 	bl	80087ec <tud_rhport_init>
 800c326:	4603      	mov	r3, r0
 800c328:	f083 0301 	eor.w	r3, r3, #1
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00a      	beq.n	800c348 <tusb_rhport_init+0x48>
 800c332:	4b23      	ldr	r3, [pc, #140]	@ (800c3c0 <tusb_rhport_init+0xc0>)
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d000      	beq.n	800c344 <tusb_rhport_init+0x44>
 800c342:	be00      	bkpt	0x0000
 800c344:	2300      	movs	r3, #0
 800c346:	e036      	b.n	800c3b6 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c348:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c4 <tusb_rhport_init+0xc4>)
 800c34a:	2201      	movs	r2, #1
 800c34c:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c34e:	2301      	movs	r3, #1
 800c350:	e031      	b.n	800c3b6 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d803      	bhi.n	800c360 <tusb_rhport_init+0x60>
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10a      	bne.n	800c376 <tusb_rhport_init+0x76>
 800c360:	4b17      	ldr	r3, [pc, #92]	@ (800c3c0 <tusb_rhport_init+0xc0>)
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d000      	beq.n	800c372 <tusb_rhport_init+0x72>
 800c370:	be00      	bkpt	0x0000
 800c372:	2300      	movs	r3, #0
 800c374:	e01f      	b.n	800c3b6 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	7811      	ldrb	r1, [r2, #0]
 800c37c:	4a11      	ldr	r2, [pc, #68]	@ (800c3c4 <tusb_rhport_init+0xc4>)
 800c37e:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d115      	bne.n	800c3b4 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fc fa2d 	bl	80087ec <tud_rhport_init>
 800c392:	4603      	mov	r3, r0
 800c394:	f083 0301 	eor.w	r3, r3, #1
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <tusb_rhport_init+0xb4>
 800c39e:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <tusb_rhport_init+0xc0>)
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d000      	beq.n	800c3b0 <tusb_rhport_init+0xb0>
 800c3ae:	be00      	bkpt	0x0000
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e000      	b.n	800c3b6 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c3b4:	2301      	movs	r3, #1
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	e000edf0 	.word	0xe000edf0
 800c3c4:	200012d0 	.word	0x200012d0

0800c3c8 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <tu_edpt_claim+0x26>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <tu_edpt_claim+0x2a>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	e01e      	b.n	800c430 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d108      	bne.n	800c412 <tu_edpt_claim+0x4a>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d101      	bne.n	800c412 <tu_edpt_claim+0x4a>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <tu_edpt_claim+0x4c>
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d004      	beq.n	800c42e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7813      	ldrb	r3, [r2, #0]
 800c428:	f043 0304 	orr.w	r3, r3, #4
 800c42c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b01      	cmp	r3, #1
 800c452:	d108      	bne.n	800c466 <tu_edpt_release+0x2a>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <tu_edpt_release+0x2a>
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <tu_edpt_release+0x2c>
 800c466:	2300      	movs	r3, #0
 800c468:	73fb      	strb	r3, [r7, #15]
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c472:	7bfb      	ldrb	r3, [r7, #15]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	7813      	ldrb	r3, [r2, #0]
 800c47c:	f023 0304 	bic.w	r3, r3, #4
 800c480:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c482:	7bfb      	ldrb	r3, [r7, #15]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c490:	b480      	push	{r7}
 800c492:	b08b      	sub	sp, #44	@ 0x2c
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	70fb      	strb	r3, [r7, #3]
 800c49c:	4613      	mov	r3, r2
 800c49e:	70bb      	strb	r3, [r7, #2]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	889b      	ldrh	r3, [r3, #4]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4ae:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c4b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	78db      	ldrb	r3, [r3, #3]
 800c4b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d059      	beq.n	800c574 <tu_edpt_validate+0xe4>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	dc6e      	bgt.n	800c5a2 <tu_edpt_validate+0x112>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d002      	beq.n	800c4ce <tu_edpt_validate+0x3e>
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d018      	beq.n	800c4fe <tu_edpt_validate+0x6e>
 800c4cc:	e069      	b.n	800c5a2 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c4ce:	78fb      	ldrb	r3, [r7, #3]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d102      	bne.n	800c4da <tu_edpt_validate+0x4a>
 800c4d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4d8:	e001      	b.n	800c4de <tu_edpt_validate+0x4e>
 800c4da:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c4de:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c4e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c4e2:	8a7b      	ldrh	r3, [r7, #18]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d95e      	bls.n	800c5a6 <tu_edpt_validate+0x116>
 800c4e8:	4b35      	ldr	r3, [pc, #212]	@ (800c5c0 <tu_edpt_validate+0x130>)
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d000      	beq.n	800c4fa <tu_edpt_validate+0x6a>
 800c4f8:	be00      	bkpt	0x0000
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e059      	b.n	800c5b2 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	2b02      	cmp	r3, #2
 800c502:	d10e      	bne.n	800c522 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c504:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c50a:	d04e      	beq.n	800c5aa <tu_edpt_validate+0x11a>
 800c50c:	4b2c      	ldr	r3, [pc, #176]	@ (800c5c0 <tu_edpt_validate+0x130>)
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0301 	and.w	r3, r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d000      	beq.n	800c51e <tu_edpt_validate+0x8e>
 800c51c:	be00      	bkpt	0x0000
 800c51e:	2300      	movs	r3, #0
 800c520:	e047      	b.n	800c5b2 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c522:	78bb      	ldrb	r3, [r7, #2]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00e      	beq.n	800c546 <tu_edpt_validate+0xb6>
 800c528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c52a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c52e:	d10a      	bne.n	800c546 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	2200      	movs	r2, #0
 800c538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c53c:	711a      	strb	r2, [r3, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800c542:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800c544:	e031      	b.n	800c5aa <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800c546:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d02e      	beq.n	800c5aa <tu_edpt_validate+0x11a>
 800c54c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c54e:	2b10      	cmp	r3, #16
 800c550:	d02b      	beq.n	800c5aa <tu_edpt_validate+0x11a>
 800c552:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c554:	2b20      	cmp	r3, #32
 800c556:	d028      	beq.n	800c5aa <tu_edpt_validate+0x11a>
 800c558:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c55a:	2b40      	cmp	r3, #64	@ 0x40
 800c55c:	d025      	beq.n	800c5aa <tu_edpt_validate+0x11a>
 800c55e:	4b18      	ldr	r3, [pc, #96]	@ (800c5c0 <tu_edpt_validate+0x130>)
 800c560:	61bb      	str	r3, [r7, #24]
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d000      	beq.n	800c570 <tu_edpt_validate+0xe0>
 800c56e:	be00      	bkpt	0x0000
 800c570:	2300      	movs	r3, #0
 800c572:	e01e      	b.n	800c5b2 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	2b02      	cmp	r3, #2
 800c578:	d102      	bne.n	800c580 <tu_edpt_validate+0xf0>
 800c57a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c57e:	e000      	b.n	800c582 <tu_edpt_validate+0xf2>
 800c580:	2340      	movs	r3, #64	@ 0x40
 800c582:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800c584:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c588:	429a      	cmp	r2, r3
 800c58a:	d910      	bls.n	800c5ae <tu_edpt_validate+0x11e>
 800c58c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c0 <tu_edpt_validate+0x130>)
 800c58e:	623b      	str	r3, [r7, #32]
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d000      	beq.n	800c59e <tu_edpt_validate+0x10e>
 800c59c:	be00      	bkpt	0x0000
 800c59e:	2300      	movs	r3, #0
 800c5a0:	e007      	b.n	800c5b2 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e005      	b.n	800c5b2 <tu_edpt_validate+0x122>
      break;
 800c5a6:	bf00      	nop
 800c5a8:	e002      	b.n	800c5b0 <tu_edpt_validate+0x120>
      break;
 800c5aa:	bf00      	nop
 800c5ac:	e000      	b.n	800c5b0 <tu_edpt_validate+0x120>
      break;
 800c5ae:	bf00      	nop
  }

  return true;
 800c5b0:	2301      	movs	r3, #1
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	372c      	adds	r7, #44	@ 0x2c
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	e000edf0 	.word	0xe000edf0

0800c5c4 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800c5c4:	b480      	push	{r7}
 800c5c6:	b08d      	sub	sp, #52	@ 0x34
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	80fb      	strh	r3, [r7, #6]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800c5de:	88fb      	ldrh	r3, [r7, #6]
 800c5e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5e2:	4413      	add	r3, r2
 800c5e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800c5e6:	e027      	b.n	800c638 <tu_edpt_bind_driver+0x74>
 800c5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ea:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800c5f2:	2b05      	cmp	r3, #5
 800c5f4:	d116      	bne.n	800c624 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f8:	789b      	ldrb	r3, [r3, #2]
 800c5fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c602:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800c604:	7fbb      	ldrb	r3, [r7, #30]
 800c606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c60a:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	4413      	add	r3, r2
 800c612:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c616:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800c618:	7ffa      	ldrb	r2, [r7, #31]
 800c61a:	09d2      	lsrs	r2, r2, #7
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	4611      	mov	r1, r2
 800c620:	797a      	ldrb	r2, [r7, #5]
 800c622:	545a      	strb	r2, [r3, r1]
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800c636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800c638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d3d3      	bcc.n	800c5e8 <tu_edpt_bind_driver+0x24>
  }
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	3734      	adds	r7, #52	@ 0x34
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <atoi>:
 800c64e:	220a      	movs	r2, #10
 800c650:	2100      	movs	r1, #0
 800c652:	f000 b87b 	b.w	800c74c <strtol>
	...

0800c658 <_strtol_l.isra.0>:
 800c658:	2b24      	cmp	r3, #36	@ 0x24
 800c65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c65e:	4686      	mov	lr, r0
 800c660:	4690      	mov	r8, r2
 800c662:	d801      	bhi.n	800c668 <_strtol_l.isra.0+0x10>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d106      	bne.n	800c676 <_strtol_l.isra.0+0x1e>
 800c668:	f000 fa82 	bl	800cb70 <__errno>
 800c66c:	2316      	movs	r3, #22
 800c66e:	6003      	str	r3, [r0, #0]
 800c670:	2000      	movs	r0, #0
 800c672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c676:	4834      	ldr	r0, [pc, #208]	@ (800c748 <_strtol_l.isra.0+0xf0>)
 800c678:	460d      	mov	r5, r1
 800c67a:	462a      	mov	r2, r5
 800c67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c680:	5d06      	ldrb	r6, [r0, r4]
 800c682:	f016 0608 	ands.w	r6, r6, #8
 800c686:	d1f8      	bne.n	800c67a <_strtol_l.isra.0+0x22>
 800c688:	2c2d      	cmp	r4, #45	@ 0x2d
 800c68a:	d110      	bne.n	800c6ae <_strtol_l.isra.0+0x56>
 800c68c:	782c      	ldrb	r4, [r5, #0]
 800c68e:	2601      	movs	r6, #1
 800c690:	1c95      	adds	r5, r2, #2
 800c692:	f033 0210 	bics.w	r2, r3, #16
 800c696:	d115      	bne.n	800c6c4 <_strtol_l.isra.0+0x6c>
 800c698:	2c30      	cmp	r4, #48	@ 0x30
 800c69a:	d10d      	bne.n	800c6b8 <_strtol_l.isra.0+0x60>
 800c69c:	782a      	ldrb	r2, [r5, #0]
 800c69e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6a2:	2a58      	cmp	r2, #88	@ 0x58
 800c6a4:	d108      	bne.n	800c6b8 <_strtol_l.isra.0+0x60>
 800c6a6:	786c      	ldrb	r4, [r5, #1]
 800c6a8:	3502      	adds	r5, #2
 800c6aa:	2310      	movs	r3, #16
 800c6ac:	e00a      	b.n	800c6c4 <_strtol_l.isra.0+0x6c>
 800c6ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800c6b0:	bf04      	itt	eq
 800c6b2:	782c      	ldrbeq	r4, [r5, #0]
 800c6b4:	1c95      	addeq	r5, r2, #2
 800c6b6:	e7ec      	b.n	800c692 <_strtol_l.isra.0+0x3a>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f6      	bne.n	800c6aa <_strtol_l.isra.0+0x52>
 800c6bc:	2c30      	cmp	r4, #48	@ 0x30
 800c6be:	bf14      	ite	ne
 800c6c0:	230a      	movne	r3, #10
 800c6c2:	2308      	moveq	r3, #8
 800c6c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c6c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	fbbc f9f3 	udiv	r9, ip, r3
 800c6d2:	4610      	mov	r0, r2
 800c6d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c6d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c6dc:	2f09      	cmp	r7, #9
 800c6de:	d80f      	bhi.n	800c700 <_strtol_l.isra.0+0xa8>
 800c6e0:	463c      	mov	r4, r7
 800c6e2:	42a3      	cmp	r3, r4
 800c6e4:	dd1b      	ble.n	800c71e <_strtol_l.isra.0+0xc6>
 800c6e6:	1c57      	adds	r7, r2, #1
 800c6e8:	d007      	beq.n	800c6fa <_strtol_l.isra.0+0xa2>
 800c6ea:	4581      	cmp	r9, r0
 800c6ec:	d314      	bcc.n	800c718 <_strtol_l.isra.0+0xc0>
 800c6ee:	d101      	bne.n	800c6f4 <_strtol_l.isra.0+0x9c>
 800c6f0:	45a2      	cmp	sl, r4
 800c6f2:	db11      	blt.n	800c718 <_strtol_l.isra.0+0xc0>
 800c6f4:	fb00 4003 	mla	r0, r0, r3, r4
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6fe:	e7eb      	b.n	800c6d8 <_strtol_l.isra.0+0x80>
 800c700:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c704:	2f19      	cmp	r7, #25
 800c706:	d801      	bhi.n	800c70c <_strtol_l.isra.0+0xb4>
 800c708:	3c37      	subs	r4, #55	@ 0x37
 800c70a:	e7ea      	b.n	800c6e2 <_strtol_l.isra.0+0x8a>
 800c70c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c710:	2f19      	cmp	r7, #25
 800c712:	d804      	bhi.n	800c71e <_strtol_l.isra.0+0xc6>
 800c714:	3c57      	subs	r4, #87	@ 0x57
 800c716:	e7e4      	b.n	800c6e2 <_strtol_l.isra.0+0x8a>
 800c718:	f04f 32ff 	mov.w	r2, #4294967295
 800c71c:	e7ed      	b.n	800c6fa <_strtol_l.isra.0+0xa2>
 800c71e:	1c53      	adds	r3, r2, #1
 800c720:	d108      	bne.n	800c734 <_strtol_l.isra.0+0xdc>
 800c722:	2322      	movs	r3, #34	@ 0x22
 800c724:	f8ce 3000 	str.w	r3, [lr]
 800c728:	4660      	mov	r0, ip
 800c72a:	f1b8 0f00 	cmp.w	r8, #0
 800c72e:	d0a0      	beq.n	800c672 <_strtol_l.isra.0+0x1a>
 800c730:	1e69      	subs	r1, r5, #1
 800c732:	e006      	b.n	800c742 <_strtol_l.isra.0+0xea>
 800c734:	b106      	cbz	r6, 800c738 <_strtol_l.isra.0+0xe0>
 800c736:	4240      	negs	r0, r0
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	d099      	beq.n	800c672 <_strtol_l.isra.0+0x1a>
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d1f6      	bne.n	800c730 <_strtol_l.isra.0+0xd8>
 800c742:	f8c8 1000 	str.w	r1, [r8]
 800c746:	e794      	b.n	800c672 <_strtol_l.isra.0+0x1a>
 800c748:	0800ecb9 	.word	0x0800ecb9

0800c74c <strtol>:
 800c74c:	4613      	mov	r3, r2
 800c74e:	460a      	mov	r2, r1
 800c750:	4601      	mov	r1, r0
 800c752:	4802      	ldr	r0, [pc, #8]	@ (800c75c <strtol+0x10>)
 800c754:	6800      	ldr	r0, [r0, #0]
 800c756:	f7ff bf7f 	b.w	800c658 <_strtol_l.isra.0>
 800c75a:	bf00      	nop
 800c75c:	20000150 	.word	0x20000150

0800c760 <std>:
 800c760:	2300      	movs	r3, #0
 800c762:	b510      	push	{r4, lr}
 800c764:	4604      	mov	r4, r0
 800c766:	e9c0 3300 	strd	r3, r3, [r0]
 800c76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c76e:	6083      	str	r3, [r0, #8]
 800c770:	8181      	strh	r1, [r0, #12]
 800c772:	6643      	str	r3, [r0, #100]	@ 0x64
 800c774:	81c2      	strh	r2, [r0, #14]
 800c776:	6183      	str	r3, [r0, #24]
 800c778:	4619      	mov	r1, r3
 800c77a:	2208      	movs	r2, #8
 800c77c:	305c      	adds	r0, #92	@ 0x5c
 800c77e:	f000 f94c 	bl	800ca1a <memset>
 800c782:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <std+0x58>)
 800c784:	6263      	str	r3, [r4, #36]	@ 0x24
 800c786:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <std+0x5c>)
 800c788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c78a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c0 <std+0x60>)
 800c78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c78e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c4 <std+0x64>)
 800c790:	6323      	str	r3, [r4, #48]	@ 0x30
 800c792:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c8 <std+0x68>)
 800c794:	6224      	str	r4, [r4, #32]
 800c796:	429c      	cmp	r4, r3
 800c798:	d006      	beq.n	800c7a8 <std+0x48>
 800c79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c79e:	4294      	cmp	r4, r2
 800c7a0:	d002      	beq.n	800c7a8 <std+0x48>
 800c7a2:	33d0      	adds	r3, #208	@ 0xd0
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	d105      	bne.n	800c7b4 <std+0x54>
 800c7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b0:	f000 ba08 	b.w	800cbc4 <__retarget_lock_init_recursive>
 800c7b4:	bd10      	pop	{r4, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0800c995 	.word	0x0800c995
 800c7bc:	0800c9b7 	.word	0x0800c9b7
 800c7c0:	0800c9ef 	.word	0x0800c9ef
 800c7c4:	0800ca13 	.word	0x0800ca13
 800c7c8:	200012d4 	.word	0x200012d4

0800c7cc <stdio_exit_handler>:
 800c7cc:	4a02      	ldr	r2, [pc, #8]	@ (800c7d8 <stdio_exit_handler+0xc>)
 800c7ce:	4903      	ldr	r1, [pc, #12]	@ (800c7dc <stdio_exit_handler+0x10>)
 800c7d0:	4803      	ldr	r0, [pc, #12]	@ (800c7e0 <stdio_exit_handler+0x14>)
 800c7d2:	f000 b869 	b.w	800c8a8 <_fwalk_sglue>
 800c7d6:	bf00      	nop
 800c7d8:	20000144 	.word	0x20000144
 800c7dc:	0800d779 	.word	0x0800d779
 800c7e0:	20000154 	.word	0x20000154

0800c7e4 <cleanup_stdio>:
 800c7e4:	6841      	ldr	r1, [r0, #4]
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c818 <cleanup_stdio+0x34>)
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	d001      	beq.n	800c7f4 <cleanup_stdio+0x10>
 800c7f0:	f000 ffc2 	bl	800d778 <_fflush_r>
 800c7f4:	68a1      	ldr	r1, [r4, #8]
 800c7f6:	4b09      	ldr	r3, [pc, #36]	@ (800c81c <cleanup_stdio+0x38>)
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	d002      	beq.n	800c802 <cleanup_stdio+0x1e>
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 ffbb 	bl	800d778 <_fflush_r>
 800c802:	68e1      	ldr	r1, [r4, #12]
 800c804:	4b06      	ldr	r3, [pc, #24]	@ (800c820 <cleanup_stdio+0x3c>)
 800c806:	4299      	cmp	r1, r3
 800c808:	d004      	beq.n	800c814 <cleanup_stdio+0x30>
 800c80a:	4620      	mov	r0, r4
 800c80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c810:	f000 bfb2 	b.w	800d778 <_fflush_r>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	bf00      	nop
 800c818:	200012d4 	.word	0x200012d4
 800c81c:	2000133c 	.word	0x2000133c
 800c820:	200013a4 	.word	0x200013a4

0800c824 <global_stdio_init.part.0>:
 800c824:	b510      	push	{r4, lr}
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <global_stdio_init.part.0+0x30>)
 800c828:	4c0b      	ldr	r4, [pc, #44]	@ (800c858 <global_stdio_init.part.0+0x34>)
 800c82a:	4a0c      	ldr	r2, [pc, #48]	@ (800c85c <global_stdio_init.part.0+0x38>)
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	4620      	mov	r0, r4
 800c830:	2200      	movs	r2, #0
 800c832:	2104      	movs	r1, #4
 800c834:	f7ff ff94 	bl	800c760 <std>
 800c838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c83c:	2201      	movs	r2, #1
 800c83e:	2109      	movs	r1, #9
 800c840:	f7ff ff8e 	bl	800c760 <std>
 800c844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c848:	2202      	movs	r2, #2
 800c84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c84e:	2112      	movs	r1, #18
 800c850:	f7ff bf86 	b.w	800c760 <std>
 800c854:	2000140c 	.word	0x2000140c
 800c858:	200012d4 	.word	0x200012d4
 800c85c:	0800c7cd 	.word	0x0800c7cd

0800c860 <__sfp_lock_acquire>:
 800c860:	4801      	ldr	r0, [pc, #4]	@ (800c868 <__sfp_lock_acquire+0x8>)
 800c862:	f000 b9b0 	b.w	800cbc6 <__retarget_lock_acquire_recursive>
 800c866:	bf00      	nop
 800c868:	20001415 	.word	0x20001415

0800c86c <__sfp_lock_release>:
 800c86c:	4801      	ldr	r0, [pc, #4]	@ (800c874 <__sfp_lock_release+0x8>)
 800c86e:	f000 b9ab 	b.w	800cbc8 <__retarget_lock_release_recursive>
 800c872:	bf00      	nop
 800c874:	20001415 	.word	0x20001415

0800c878 <__sinit>:
 800c878:	b510      	push	{r4, lr}
 800c87a:	4604      	mov	r4, r0
 800c87c:	f7ff fff0 	bl	800c860 <__sfp_lock_acquire>
 800c880:	6a23      	ldr	r3, [r4, #32]
 800c882:	b11b      	cbz	r3, 800c88c <__sinit+0x14>
 800c884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c888:	f7ff bff0 	b.w	800c86c <__sfp_lock_release>
 800c88c:	4b04      	ldr	r3, [pc, #16]	@ (800c8a0 <__sinit+0x28>)
 800c88e:	6223      	str	r3, [r4, #32]
 800c890:	4b04      	ldr	r3, [pc, #16]	@ (800c8a4 <__sinit+0x2c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1f5      	bne.n	800c884 <__sinit+0xc>
 800c898:	f7ff ffc4 	bl	800c824 <global_stdio_init.part.0>
 800c89c:	e7f2      	b.n	800c884 <__sinit+0xc>
 800c89e:	bf00      	nop
 800c8a0:	0800c7e5 	.word	0x0800c7e5
 800c8a4:	2000140c 	.word	0x2000140c

0800c8a8 <_fwalk_sglue>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4688      	mov	r8, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c8bc:	d505      	bpl.n	800c8ca <_fwalk_sglue+0x22>
 800c8be:	6824      	ldr	r4, [r4, #0]
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	d1f7      	bne.n	800c8b4 <_fwalk_sglue+0xc>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d907      	bls.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	d003      	beq.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	4306      	orrs	r6, r0
 800c8e0:	3568      	adds	r5, #104	@ 0x68
 800c8e2:	e7e9      	b.n	800c8b8 <_fwalk_sglue+0x10>

0800c8e4 <sniprintf>:
 800c8e4:	b40c      	push	{r2, r3}
 800c8e6:	b530      	push	{r4, r5, lr}
 800c8e8:	4b18      	ldr	r3, [pc, #96]	@ (800c94c <sniprintf+0x68>)
 800c8ea:	1e0c      	subs	r4, r1, #0
 800c8ec:	681d      	ldr	r5, [r3, #0]
 800c8ee:	b09d      	sub	sp, #116	@ 0x74
 800c8f0:	da08      	bge.n	800c904 <sniprintf+0x20>
 800c8f2:	238b      	movs	r3, #139	@ 0x8b
 800c8f4:	602b      	str	r3, [r5, #0]
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fa:	b01d      	add	sp, #116	@ 0x74
 800c8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c900:	b002      	add	sp, #8
 800c902:	4770      	bx	lr
 800c904:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c90c:	f04f 0300 	mov.w	r3, #0
 800c910:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c912:	bf14      	ite	ne
 800c914:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c918:	4623      	moveq	r3, r4
 800c91a:	9304      	str	r3, [sp, #16]
 800c91c:	9307      	str	r3, [sp, #28]
 800c91e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c922:	9002      	str	r0, [sp, #8]
 800c924:	9006      	str	r0, [sp, #24]
 800c926:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c92a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c92c:	ab21      	add	r3, sp, #132	@ 0x84
 800c92e:	a902      	add	r1, sp, #8
 800c930:	4628      	mov	r0, r5
 800c932:	9301      	str	r3, [sp, #4]
 800c934:	f000 fad2 	bl	800cedc <_svfiprintf_r>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	bfbc      	itt	lt
 800c93c:	238b      	movlt	r3, #139	@ 0x8b
 800c93e:	602b      	strlt	r3, [r5, #0]
 800c940:	2c00      	cmp	r4, #0
 800c942:	d0da      	beq.n	800c8fa <sniprintf+0x16>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	e7d6      	b.n	800c8fa <sniprintf+0x16>
 800c94c:	20000150 	.word	0x20000150

0800c950 <siprintf>:
 800c950:	b40e      	push	{r1, r2, r3}
 800c952:	b510      	push	{r4, lr}
 800c954:	b09d      	sub	sp, #116	@ 0x74
 800c956:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c958:	9002      	str	r0, [sp, #8]
 800c95a:	9006      	str	r0, [sp, #24]
 800c95c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c960:	480a      	ldr	r0, [pc, #40]	@ (800c98c <siprintf+0x3c>)
 800c962:	9107      	str	r1, [sp, #28]
 800c964:	9104      	str	r1, [sp, #16]
 800c966:	490a      	ldr	r1, [pc, #40]	@ (800c990 <siprintf+0x40>)
 800c968:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96c:	9105      	str	r1, [sp, #20]
 800c96e:	2400      	movs	r4, #0
 800c970:	a902      	add	r1, sp, #8
 800c972:	6800      	ldr	r0, [r0, #0]
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c978:	f000 fab0 	bl	800cedc <_svfiprintf_r>
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	701c      	strb	r4, [r3, #0]
 800c980:	b01d      	add	sp, #116	@ 0x74
 800c982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c986:	b003      	add	sp, #12
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	20000150 	.word	0x20000150
 800c990:	ffff0208 	.word	0xffff0208

0800c994 <__sread>:
 800c994:	b510      	push	{r4, lr}
 800c996:	460c      	mov	r4, r1
 800c998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99c:	f000 f8c4 	bl	800cb28 <_read_r>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	bfab      	itete	ge
 800c9a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c9a8:	181b      	addge	r3, r3, r0
 800c9aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9ae:	bfac      	ite	ge
 800c9b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9b2:	81a3      	strhlt	r3, [r4, #12]
 800c9b4:	bd10      	pop	{r4, pc}

0800c9b6 <__swrite>:
 800c9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ba:	461f      	mov	r7, r3
 800c9bc:	898b      	ldrh	r3, [r1, #12]
 800c9be:	05db      	lsls	r3, r3, #23
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	d505      	bpl.n	800c9d4 <__swrite+0x1e>
 800c9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f000 f898 	bl	800cb04 <_lseek_r>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	463b      	mov	r3, r7
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ea:	f000 b8af 	b.w	800cb4c <_write_r>

0800c9ee <__sseek>:
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f6:	f000 f885 	bl	800cb04 <_lseek_r>
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	bf15      	itete	ne
 800ca00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca0a:	81a3      	strheq	r3, [r4, #12]
 800ca0c:	bf18      	it	ne
 800ca0e:	81a3      	strhne	r3, [r4, #12]
 800ca10:	bd10      	pop	{r4, pc}

0800ca12 <__sclose>:
 800ca12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca16:	f000 b865 	b.w	800cae4 <_close_r>

0800ca1a <memset>:
 800ca1a:	4402      	add	r2, r0
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d100      	bne.n	800ca24 <memset+0xa>
 800ca22:	4770      	bx	lr
 800ca24:	f803 1b01 	strb.w	r1, [r3], #1
 800ca28:	e7f9      	b.n	800ca1e <memset+0x4>
	...

0800ca2c <strtok>:
 800ca2c:	4b16      	ldr	r3, [pc, #88]	@ (800ca88 <strtok+0x5c>)
 800ca2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca32:	681f      	ldr	r7, [r3, #0]
 800ca34:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ca36:	4605      	mov	r5, r0
 800ca38:	460e      	mov	r6, r1
 800ca3a:	b9ec      	cbnz	r4, 800ca78 <strtok+0x4c>
 800ca3c:	2050      	movs	r0, #80	@ 0x50
 800ca3e:	f000 f93b 	bl	800ccb8 <malloc>
 800ca42:	4602      	mov	r2, r0
 800ca44:	6478      	str	r0, [r7, #68]	@ 0x44
 800ca46:	b920      	cbnz	r0, 800ca52 <strtok+0x26>
 800ca48:	4b10      	ldr	r3, [pc, #64]	@ (800ca8c <strtok+0x60>)
 800ca4a:	4811      	ldr	r0, [pc, #68]	@ (800ca90 <strtok+0x64>)
 800ca4c:	215b      	movs	r1, #91	@ 0x5b
 800ca4e:	f000 f8cb 	bl	800cbe8 <__assert_func>
 800ca52:	e9c0 4400 	strd	r4, r4, [r0]
 800ca56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ca62:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ca66:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ca6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ca6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ca72:	6184      	str	r4, [r0, #24]
 800ca74:	7704      	strb	r4, [r0, #28]
 800ca76:	6244      	str	r4, [r0, #36]	@ 0x24
 800ca78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca84:	f000 b806 	b.w	800ca94 <__strtok_r>
 800ca88:	20000150 	.word	0x20000150
 800ca8c:	0800edb9 	.word	0x0800edb9
 800ca90:	0800edd0 	.word	0x0800edd0

0800ca94 <__strtok_r>:
 800ca94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	b908      	cbnz	r0, 800ca9e <__strtok_r+0xa>
 800ca9a:	6814      	ldr	r4, [r2, #0]
 800ca9c:	b144      	cbz	r4, 800cab0 <__strtok_r+0x1c>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800caa4:	460f      	mov	r7, r1
 800caa6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800caaa:	b91e      	cbnz	r6, 800cab4 <__strtok_r+0x20>
 800caac:	b965      	cbnz	r5, 800cac8 <__strtok_r+0x34>
 800caae:	6015      	str	r5, [r2, #0]
 800cab0:	2000      	movs	r0, #0
 800cab2:	e005      	b.n	800cac0 <__strtok_r+0x2c>
 800cab4:	42b5      	cmp	r5, r6
 800cab6:	d1f6      	bne.n	800caa6 <__strtok_r+0x12>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1f0      	bne.n	800ca9e <__strtok_r+0xa>
 800cabc:	6014      	str	r4, [r2, #0]
 800cabe:	7003      	strb	r3, [r0, #0]
 800cac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac2:	461c      	mov	r4, r3
 800cac4:	e00c      	b.n	800cae0 <__strtok_r+0x4c>
 800cac6:	b91d      	cbnz	r5, 800cad0 <__strtok_r+0x3c>
 800cac8:	4627      	mov	r7, r4
 800caca:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cace:	460e      	mov	r6, r1
 800cad0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cad4:	42ab      	cmp	r3, r5
 800cad6:	d1f6      	bne.n	800cac6 <__strtok_r+0x32>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0f2      	beq.n	800cac2 <__strtok_r+0x2e>
 800cadc:	2300      	movs	r3, #0
 800cade:	703b      	strb	r3, [r7, #0]
 800cae0:	6014      	str	r4, [r2, #0]
 800cae2:	e7ed      	b.n	800cac0 <__strtok_r+0x2c>

0800cae4 <_close_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d06      	ldr	r5, [pc, #24]	@ (800cb00 <_close_r+0x1c>)
 800cae8:	2300      	movs	r3, #0
 800caea:	4604      	mov	r4, r0
 800caec:	4608      	mov	r0, r1
 800caee:	602b      	str	r3, [r5, #0]
 800caf0:	f7f6 fe55 	bl	800379e <_close>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_close_r+0x1a>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_close_r+0x1a>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	20001410 	.word	0x20001410

0800cb04 <_lseek_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	@ (800cb24 <_lseek_r+0x20>)
 800cb08:	4604      	mov	r4, r0
 800cb0a:	4608      	mov	r0, r1
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	602a      	str	r2, [r5, #0]
 800cb12:	461a      	mov	r2, r3
 800cb14:	f7f6 fe6a 	bl	80037ec <_lseek>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	d102      	bne.n	800cb22 <_lseek_r+0x1e>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	b103      	cbz	r3, 800cb22 <_lseek_r+0x1e>
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	20001410 	.word	0x20001410

0800cb28 <_read_r>:
 800cb28:	b538      	push	{r3, r4, r5, lr}
 800cb2a:	4d07      	ldr	r5, [pc, #28]	@ (800cb48 <_read_r+0x20>)
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	4608      	mov	r0, r1
 800cb30:	4611      	mov	r1, r2
 800cb32:	2200      	movs	r2, #0
 800cb34:	602a      	str	r2, [r5, #0]
 800cb36:	461a      	mov	r2, r3
 800cb38:	f7f6 fdf8 	bl	800372c <_read>
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	d102      	bne.n	800cb46 <_read_r+0x1e>
 800cb40:	682b      	ldr	r3, [r5, #0]
 800cb42:	b103      	cbz	r3, 800cb46 <_read_r+0x1e>
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	20001410 	.word	0x20001410

0800cb4c <_write_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4d07      	ldr	r5, [pc, #28]	@ (800cb6c <_write_r+0x20>)
 800cb50:	4604      	mov	r4, r0
 800cb52:	4608      	mov	r0, r1
 800cb54:	4611      	mov	r1, r2
 800cb56:	2200      	movs	r2, #0
 800cb58:	602a      	str	r2, [r5, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f7f6 fe03 	bl	8003766 <_write>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_write_r+0x1e>
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_write_r+0x1e>
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	20001410 	.word	0x20001410

0800cb70 <__errno>:
 800cb70:	4b01      	ldr	r3, [pc, #4]	@ (800cb78 <__errno+0x8>)
 800cb72:	6818      	ldr	r0, [r3, #0]
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	20000150 	.word	0x20000150

0800cb7c <__libc_init_array>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4d0d      	ldr	r5, [pc, #52]	@ (800cbb4 <__libc_init_array+0x38>)
 800cb80:	4c0d      	ldr	r4, [pc, #52]	@ (800cbb8 <__libc_init_array+0x3c>)
 800cb82:	1b64      	subs	r4, r4, r5
 800cb84:	10a4      	asrs	r4, r4, #2
 800cb86:	2600      	movs	r6, #0
 800cb88:	42a6      	cmp	r6, r4
 800cb8a:	d109      	bne.n	800cba0 <__libc_init_array+0x24>
 800cb8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cbbc <__libc_init_array+0x40>)
 800cb8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cbc0 <__libc_init_array+0x44>)
 800cb90:	f000 fff0 	bl	800db74 <_init>
 800cb94:	1b64      	subs	r4, r4, r5
 800cb96:	10a4      	asrs	r4, r4, #2
 800cb98:	2600      	movs	r6, #0
 800cb9a:	42a6      	cmp	r6, r4
 800cb9c:	d105      	bne.n	800cbaa <__libc_init_array+0x2e>
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba4:	4798      	blx	r3
 800cba6:	3601      	adds	r6, #1
 800cba8:	e7ee      	b.n	800cb88 <__libc_init_array+0xc>
 800cbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbae:	4798      	blx	r3
 800cbb0:	3601      	adds	r6, #1
 800cbb2:	e7f2      	b.n	800cb9a <__libc_init_array+0x1e>
 800cbb4:	0800eea4 	.word	0x0800eea4
 800cbb8:	0800eea4 	.word	0x0800eea4
 800cbbc:	0800eea4 	.word	0x0800eea4
 800cbc0:	0800eea8 	.word	0x0800eea8

0800cbc4 <__retarget_lock_init_recursive>:
 800cbc4:	4770      	bx	lr

0800cbc6 <__retarget_lock_acquire_recursive>:
 800cbc6:	4770      	bx	lr

0800cbc8 <__retarget_lock_release_recursive>:
 800cbc8:	4770      	bx	lr

0800cbca <memcpy>:
 800cbca:	440a      	add	r2, r1
 800cbcc:	4291      	cmp	r1, r2
 800cbce:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd2:	d100      	bne.n	800cbd6 <memcpy+0xc>
 800cbd4:	4770      	bx	lr
 800cbd6:	b510      	push	{r4, lr}
 800cbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbe0:	4291      	cmp	r1, r2
 800cbe2:	d1f9      	bne.n	800cbd8 <memcpy+0xe>
 800cbe4:	bd10      	pop	{r4, pc}
	...

0800cbe8 <__assert_func>:
 800cbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbea:	4614      	mov	r4, r2
 800cbec:	461a      	mov	r2, r3
 800cbee:	4b09      	ldr	r3, [pc, #36]	@ (800cc14 <__assert_func+0x2c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	68d8      	ldr	r0, [r3, #12]
 800cbf6:	b14c      	cbz	r4, 800cc0c <__assert_func+0x24>
 800cbf8:	4b07      	ldr	r3, [pc, #28]	@ (800cc18 <__assert_func+0x30>)
 800cbfa:	9100      	str	r1, [sp, #0]
 800cbfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc00:	4906      	ldr	r1, [pc, #24]	@ (800cc1c <__assert_func+0x34>)
 800cc02:	462b      	mov	r3, r5
 800cc04:	f000 fde0 	bl	800d7c8 <fiprintf>
 800cc08:	f000 feae 	bl	800d968 <abort>
 800cc0c:	4b04      	ldr	r3, [pc, #16]	@ (800cc20 <__assert_func+0x38>)
 800cc0e:	461c      	mov	r4, r3
 800cc10:	e7f3      	b.n	800cbfa <__assert_func+0x12>
 800cc12:	bf00      	nop
 800cc14:	20000150 	.word	0x20000150
 800cc18:	0800ee2a 	.word	0x0800ee2a
 800cc1c:	0800ee37 	.word	0x0800ee37
 800cc20:	0800ee65 	.word	0x0800ee65

0800cc24 <_free_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4605      	mov	r5, r0
 800cc28:	2900      	cmp	r1, #0
 800cc2a:	d041      	beq.n	800ccb0 <_free_r+0x8c>
 800cc2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc30:	1f0c      	subs	r4, r1, #4
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	bfb8      	it	lt
 800cc36:	18e4      	addlt	r4, r4, r3
 800cc38:	f000 f8e8 	bl	800ce0c <__malloc_lock>
 800cc3c:	4a1d      	ldr	r2, [pc, #116]	@ (800ccb4 <_free_r+0x90>)
 800cc3e:	6813      	ldr	r3, [r2, #0]
 800cc40:	b933      	cbnz	r3, 800cc50 <_free_r+0x2c>
 800cc42:	6063      	str	r3, [r4, #4]
 800cc44:	6014      	str	r4, [r2, #0]
 800cc46:	4628      	mov	r0, r5
 800cc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc4c:	f000 b8e4 	b.w	800ce18 <__malloc_unlock>
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	d908      	bls.n	800cc66 <_free_r+0x42>
 800cc54:	6820      	ldr	r0, [r4, #0]
 800cc56:	1821      	adds	r1, r4, r0
 800cc58:	428b      	cmp	r3, r1
 800cc5a:	bf01      	itttt	eq
 800cc5c:	6819      	ldreq	r1, [r3, #0]
 800cc5e:	685b      	ldreq	r3, [r3, #4]
 800cc60:	1809      	addeq	r1, r1, r0
 800cc62:	6021      	streq	r1, [r4, #0]
 800cc64:	e7ed      	b.n	800cc42 <_free_r+0x1e>
 800cc66:	461a      	mov	r2, r3
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b10b      	cbz	r3, 800cc70 <_free_r+0x4c>
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	d9fa      	bls.n	800cc66 <_free_r+0x42>
 800cc70:	6811      	ldr	r1, [r2, #0]
 800cc72:	1850      	adds	r0, r2, r1
 800cc74:	42a0      	cmp	r0, r4
 800cc76:	d10b      	bne.n	800cc90 <_free_r+0x6c>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	4401      	add	r1, r0
 800cc7c:	1850      	adds	r0, r2, r1
 800cc7e:	4283      	cmp	r3, r0
 800cc80:	6011      	str	r1, [r2, #0]
 800cc82:	d1e0      	bne.n	800cc46 <_free_r+0x22>
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	6053      	str	r3, [r2, #4]
 800cc8a:	4408      	add	r0, r1
 800cc8c:	6010      	str	r0, [r2, #0]
 800cc8e:	e7da      	b.n	800cc46 <_free_r+0x22>
 800cc90:	d902      	bls.n	800cc98 <_free_r+0x74>
 800cc92:	230c      	movs	r3, #12
 800cc94:	602b      	str	r3, [r5, #0]
 800cc96:	e7d6      	b.n	800cc46 <_free_r+0x22>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	1821      	adds	r1, r4, r0
 800cc9c:	428b      	cmp	r3, r1
 800cc9e:	bf04      	itt	eq
 800cca0:	6819      	ldreq	r1, [r3, #0]
 800cca2:	685b      	ldreq	r3, [r3, #4]
 800cca4:	6063      	str	r3, [r4, #4]
 800cca6:	bf04      	itt	eq
 800cca8:	1809      	addeq	r1, r1, r0
 800ccaa:	6021      	streq	r1, [r4, #0]
 800ccac:	6054      	str	r4, [r2, #4]
 800ccae:	e7ca      	b.n	800cc46 <_free_r+0x22>
 800ccb0:	bd38      	pop	{r3, r4, r5, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000141c 	.word	0x2000141c

0800ccb8 <malloc>:
 800ccb8:	4b02      	ldr	r3, [pc, #8]	@ (800ccc4 <malloc+0xc>)
 800ccba:	4601      	mov	r1, r0
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	f000 b825 	b.w	800cd0c <_malloc_r>
 800ccc2:	bf00      	nop
 800ccc4:	20000150 	.word	0x20000150

0800ccc8 <sbrk_aligned>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	4e0f      	ldr	r6, [pc, #60]	@ (800cd08 <sbrk_aligned+0x40>)
 800cccc:	460c      	mov	r4, r1
 800ccce:	6831      	ldr	r1, [r6, #0]
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	b911      	cbnz	r1, 800ccda <sbrk_aligned+0x12>
 800ccd4:	f000 fe38 	bl	800d948 <_sbrk_r>
 800ccd8:	6030      	str	r0, [r6, #0]
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f000 fe33 	bl	800d948 <_sbrk_r>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	d103      	bne.n	800ccee <sbrk_aligned+0x26>
 800cce6:	f04f 34ff 	mov.w	r4, #4294967295
 800ccea:	4620      	mov	r0, r4
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
 800ccee:	1cc4      	adds	r4, r0, #3
 800ccf0:	f024 0403 	bic.w	r4, r4, #3
 800ccf4:	42a0      	cmp	r0, r4
 800ccf6:	d0f8      	beq.n	800ccea <sbrk_aligned+0x22>
 800ccf8:	1a21      	subs	r1, r4, r0
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f000 fe24 	bl	800d948 <_sbrk_r>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d1f2      	bne.n	800ccea <sbrk_aligned+0x22>
 800cd04:	e7ef      	b.n	800cce6 <sbrk_aligned+0x1e>
 800cd06:	bf00      	nop
 800cd08:	20001418 	.word	0x20001418

0800cd0c <_malloc_r>:
 800cd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd10:	1ccd      	adds	r5, r1, #3
 800cd12:	f025 0503 	bic.w	r5, r5, #3
 800cd16:	3508      	adds	r5, #8
 800cd18:	2d0c      	cmp	r5, #12
 800cd1a:	bf38      	it	cc
 800cd1c:	250c      	movcc	r5, #12
 800cd1e:	2d00      	cmp	r5, #0
 800cd20:	4606      	mov	r6, r0
 800cd22:	db01      	blt.n	800cd28 <_malloc_r+0x1c>
 800cd24:	42a9      	cmp	r1, r5
 800cd26:	d904      	bls.n	800cd32 <_malloc_r+0x26>
 800cd28:	230c      	movs	r3, #12
 800cd2a:	6033      	str	r3, [r6, #0]
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce08 <_malloc_r+0xfc>
 800cd36:	f000 f869 	bl	800ce0c <__malloc_lock>
 800cd3a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd3e:	461c      	mov	r4, r3
 800cd40:	bb44      	cbnz	r4, 800cd94 <_malloc_r+0x88>
 800cd42:	4629      	mov	r1, r5
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff ffbf 	bl	800ccc8 <sbrk_aligned>
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	d158      	bne.n	800ce02 <_malloc_r+0xf6>
 800cd50:	f8d8 4000 	ldr.w	r4, [r8]
 800cd54:	4627      	mov	r7, r4
 800cd56:	2f00      	cmp	r7, #0
 800cd58:	d143      	bne.n	800cde2 <_malloc_r+0xd6>
 800cd5a:	2c00      	cmp	r4, #0
 800cd5c:	d04b      	beq.n	800cdf6 <_malloc_r+0xea>
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	4639      	mov	r1, r7
 800cd62:	4630      	mov	r0, r6
 800cd64:	eb04 0903 	add.w	r9, r4, r3
 800cd68:	f000 fdee 	bl	800d948 <_sbrk_r>
 800cd6c:	4581      	cmp	r9, r0
 800cd6e:	d142      	bne.n	800cdf6 <_malloc_r+0xea>
 800cd70:	6821      	ldr	r1, [r4, #0]
 800cd72:	1a6d      	subs	r5, r5, r1
 800cd74:	4629      	mov	r1, r5
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7ff ffa6 	bl	800ccc8 <sbrk_aligned>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d03a      	beq.n	800cdf6 <_malloc_r+0xea>
 800cd80:	6823      	ldr	r3, [r4, #0]
 800cd82:	442b      	add	r3, r5
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	f8d8 3000 	ldr.w	r3, [r8]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	bb62      	cbnz	r2, 800cde8 <_malloc_r+0xdc>
 800cd8e:	f8c8 7000 	str.w	r7, [r8]
 800cd92:	e00f      	b.n	800cdb4 <_malloc_r+0xa8>
 800cd94:	6822      	ldr	r2, [r4, #0]
 800cd96:	1b52      	subs	r2, r2, r5
 800cd98:	d420      	bmi.n	800cddc <_malloc_r+0xd0>
 800cd9a:	2a0b      	cmp	r2, #11
 800cd9c:	d917      	bls.n	800cdce <_malloc_r+0xc2>
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	6025      	str	r5, [r4, #0]
 800cda4:	bf18      	it	ne
 800cda6:	6059      	strne	r1, [r3, #4]
 800cda8:	6863      	ldr	r3, [r4, #4]
 800cdaa:	bf08      	it	eq
 800cdac:	f8c8 1000 	streq.w	r1, [r8]
 800cdb0:	5162      	str	r2, [r4, r5]
 800cdb2:	604b      	str	r3, [r1, #4]
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 f82f 	bl	800ce18 <__malloc_unlock>
 800cdba:	f104 000b 	add.w	r0, r4, #11
 800cdbe:	1d23      	adds	r3, r4, #4
 800cdc0:	f020 0007 	bic.w	r0, r0, #7
 800cdc4:	1ac2      	subs	r2, r0, r3
 800cdc6:	bf1c      	itt	ne
 800cdc8:	1a1b      	subne	r3, r3, r0
 800cdca:	50a3      	strne	r3, [r4, r2]
 800cdcc:	e7af      	b.n	800cd2e <_malloc_r+0x22>
 800cdce:	6862      	ldr	r2, [r4, #4]
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	bf0c      	ite	eq
 800cdd4:	f8c8 2000 	streq.w	r2, [r8]
 800cdd8:	605a      	strne	r2, [r3, #4]
 800cdda:	e7eb      	b.n	800cdb4 <_malloc_r+0xa8>
 800cddc:	4623      	mov	r3, r4
 800cdde:	6864      	ldr	r4, [r4, #4]
 800cde0:	e7ae      	b.n	800cd40 <_malloc_r+0x34>
 800cde2:	463c      	mov	r4, r7
 800cde4:	687f      	ldr	r7, [r7, #4]
 800cde6:	e7b6      	b.n	800cd56 <_malloc_r+0x4a>
 800cde8:	461a      	mov	r2, r3
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	42a3      	cmp	r3, r4
 800cdee:	d1fb      	bne.n	800cde8 <_malloc_r+0xdc>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	6053      	str	r3, [r2, #4]
 800cdf4:	e7de      	b.n	800cdb4 <_malloc_r+0xa8>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	6033      	str	r3, [r6, #0]
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f000 f80c 	bl	800ce18 <__malloc_unlock>
 800ce00:	e794      	b.n	800cd2c <_malloc_r+0x20>
 800ce02:	6005      	str	r5, [r0, #0]
 800ce04:	e7d6      	b.n	800cdb4 <_malloc_r+0xa8>
 800ce06:	bf00      	nop
 800ce08:	2000141c 	.word	0x2000141c

0800ce0c <__malloc_lock>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	@ (800ce14 <__malloc_lock+0x8>)
 800ce0e:	f7ff beda 	b.w	800cbc6 <__retarget_lock_acquire_recursive>
 800ce12:	bf00      	nop
 800ce14:	20001414 	.word	0x20001414

0800ce18 <__malloc_unlock>:
 800ce18:	4801      	ldr	r0, [pc, #4]	@ (800ce20 <__malloc_unlock+0x8>)
 800ce1a:	f7ff bed5 	b.w	800cbc8 <__retarget_lock_release_recursive>
 800ce1e:	bf00      	nop
 800ce20:	20001414 	.word	0x20001414

0800ce24 <__ssputs_r>:
 800ce24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce28:	688e      	ldr	r6, [r1, #8]
 800ce2a:	461f      	mov	r7, r3
 800ce2c:	42be      	cmp	r6, r7
 800ce2e:	680b      	ldr	r3, [r1, #0]
 800ce30:	4682      	mov	sl, r0
 800ce32:	460c      	mov	r4, r1
 800ce34:	4690      	mov	r8, r2
 800ce36:	d82d      	bhi.n	800ce94 <__ssputs_r+0x70>
 800ce38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce40:	d026      	beq.n	800ce90 <__ssputs_r+0x6c>
 800ce42:	6965      	ldr	r5, [r4, #20]
 800ce44:	6909      	ldr	r1, [r1, #16]
 800ce46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce4a:	eba3 0901 	sub.w	r9, r3, r1
 800ce4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce52:	1c7b      	adds	r3, r7, #1
 800ce54:	444b      	add	r3, r9
 800ce56:	106d      	asrs	r5, r5, #1
 800ce58:	429d      	cmp	r5, r3
 800ce5a:	bf38      	it	cc
 800ce5c:	461d      	movcc	r5, r3
 800ce5e:	0553      	lsls	r3, r2, #21
 800ce60:	d527      	bpl.n	800ceb2 <__ssputs_r+0x8e>
 800ce62:	4629      	mov	r1, r5
 800ce64:	f7ff ff52 	bl	800cd0c <_malloc_r>
 800ce68:	4606      	mov	r6, r0
 800ce6a:	b360      	cbz	r0, 800cec6 <__ssputs_r+0xa2>
 800ce6c:	6921      	ldr	r1, [r4, #16]
 800ce6e:	464a      	mov	r2, r9
 800ce70:	f7ff feab 	bl	800cbca <memcpy>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	6126      	str	r6, [r4, #16]
 800ce82:	6165      	str	r5, [r4, #20]
 800ce84:	444e      	add	r6, r9
 800ce86:	eba5 0509 	sub.w	r5, r5, r9
 800ce8a:	6026      	str	r6, [r4, #0]
 800ce8c:	60a5      	str	r5, [r4, #8]
 800ce8e:	463e      	mov	r6, r7
 800ce90:	42be      	cmp	r6, r7
 800ce92:	d900      	bls.n	800ce96 <__ssputs_r+0x72>
 800ce94:	463e      	mov	r6, r7
 800ce96:	6820      	ldr	r0, [r4, #0]
 800ce98:	4632      	mov	r2, r6
 800ce9a:	4641      	mov	r1, r8
 800ce9c:	f000 fd3a 	bl	800d914 <memmove>
 800cea0:	68a3      	ldr	r3, [r4, #8]
 800cea2:	1b9b      	subs	r3, r3, r6
 800cea4:	60a3      	str	r3, [r4, #8]
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	4433      	add	r3, r6
 800ceaa:	6023      	str	r3, [r4, #0]
 800ceac:	2000      	movs	r0, #0
 800ceae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	f000 fd5f 	bl	800d976 <_realloc_r>
 800ceb8:	4606      	mov	r6, r0
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d1e0      	bne.n	800ce80 <__ssputs_r+0x5c>
 800cebe:	6921      	ldr	r1, [r4, #16]
 800cec0:	4650      	mov	r0, sl
 800cec2:	f7ff feaf 	bl	800cc24 <_free_r>
 800cec6:	230c      	movs	r3, #12
 800cec8:	f8ca 3000 	str.w	r3, [sl]
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	f04f 30ff 	mov.w	r0, #4294967295
 800ced8:	e7e9      	b.n	800ceae <__ssputs_r+0x8a>
	...

0800cedc <_svfiprintf_r>:
 800cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee0:	4698      	mov	r8, r3
 800cee2:	898b      	ldrh	r3, [r1, #12]
 800cee4:	061b      	lsls	r3, r3, #24
 800cee6:	b09d      	sub	sp, #116	@ 0x74
 800cee8:	4607      	mov	r7, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	4614      	mov	r4, r2
 800ceee:	d510      	bpl.n	800cf12 <_svfiprintf_r+0x36>
 800cef0:	690b      	ldr	r3, [r1, #16]
 800cef2:	b973      	cbnz	r3, 800cf12 <_svfiprintf_r+0x36>
 800cef4:	2140      	movs	r1, #64	@ 0x40
 800cef6:	f7ff ff09 	bl	800cd0c <_malloc_r>
 800cefa:	6028      	str	r0, [r5, #0]
 800cefc:	6128      	str	r0, [r5, #16]
 800cefe:	b930      	cbnz	r0, 800cf0e <_svfiprintf_r+0x32>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	b01d      	add	sp, #116	@ 0x74
 800cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0e:	2340      	movs	r3, #64	@ 0x40
 800cf10:	616b      	str	r3, [r5, #20]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf16:	2320      	movs	r3, #32
 800cf18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf20:	2330      	movs	r3, #48	@ 0x30
 800cf22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0c0 <_svfiprintf_r+0x1e4>
 800cf26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	4623      	mov	r3, r4
 800cf30:	469a      	mov	sl, r3
 800cf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf36:	b10a      	cbz	r2, 800cf3c <_svfiprintf_r+0x60>
 800cf38:	2a25      	cmp	r2, #37	@ 0x25
 800cf3a:	d1f9      	bne.n	800cf30 <_svfiprintf_r+0x54>
 800cf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf40:	d00b      	beq.n	800cf5a <_svfiprintf_r+0x7e>
 800cf42:	465b      	mov	r3, fp
 800cf44:	4622      	mov	r2, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff6b 	bl	800ce24 <__ssputs_r>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f000 80a7 	beq.w	800d0a2 <_svfiprintf_r+0x1c6>
 800cf54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf56:	445a      	add	r2, fp
 800cf58:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 809f 	beq.w	800d0a2 <_svfiprintf_r+0x1c6>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf6e:	f10a 0a01 	add.w	sl, sl, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2205      	movs	r2, #5
 800cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf84:	484e      	ldr	r0, [pc, #312]	@ (800d0c0 <_svfiprintf_r+0x1e4>)
 800cf86:	f7f3 f943 	bl	8000210 <memchr>
 800cf8a:	9a04      	ldr	r2, [sp, #16]
 800cf8c:	b9d8      	cbnz	r0, 800cfc6 <_svfiprintf_r+0xea>
 800cf8e:	06d0      	lsls	r0, r2, #27
 800cf90:	bf44      	itt	mi
 800cf92:	2320      	movmi	r3, #32
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf98:	0711      	lsls	r1, r2, #28
 800cf9a:	bf44      	itt	mi
 800cf9c:	232b      	movmi	r3, #43	@ 0x2b
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfa8:	d015      	beq.n	800cfd6 <_svfiprintf_r+0xfa>
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	4654      	mov	r4, sl
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfba:	3b30      	subs	r3, #48	@ 0x30
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d94b      	bls.n	800d058 <_svfiprintf_r+0x17c>
 800cfc0:	b1b0      	cbz	r0, 800cff0 <_svfiprintf_r+0x114>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e014      	b.n	800cff0 <_svfiprintf_r+0x114>
 800cfc6:	eba0 0308 	sub.w	r3, r0, r8
 800cfca:	fa09 f303 	lsl.w	r3, r9, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	46a2      	mov	sl, r4
 800cfd4:	e7d2      	b.n	800cf7c <_svfiprintf_r+0xa0>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfbb      	ittet	lt
 800cfe2:	425b      	neglt	r3, r3
 800cfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe8:	9307      	strge	r3, [sp, #28]
 800cfea:	9307      	strlt	r3, [sp, #28]
 800cfec:	bfb8      	it	lt
 800cfee:	9204      	strlt	r2, [sp, #16]
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cff4:	d10a      	bne.n	800d00c <_svfiprintf_r+0x130>
 800cff6:	7863      	ldrb	r3, [r4, #1]
 800cff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cffa:	d132      	bne.n	800d062 <_svfiprintf_r+0x186>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d008:	3402      	adds	r4, #2
 800d00a:	9305      	str	r3, [sp, #20]
 800d00c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0d0 <_svfiprintf_r+0x1f4>
 800d010:	7821      	ldrb	r1, [r4, #0]
 800d012:	2203      	movs	r2, #3
 800d014:	4650      	mov	r0, sl
 800d016:	f7f3 f8fb 	bl	8000210 <memchr>
 800d01a:	b138      	cbz	r0, 800d02c <_svfiprintf_r+0x150>
 800d01c:	9b04      	ldr	r3, [sp, #16]
 800d01e:	eba0 000a 	sub.w	r0, r0, sl
 800d022:	2240      	movs	r2, #64	@ 0x40
 800d024:	4082      	lsls	r2, r0
 800d026:	4313      	orrs	r3, r2
 800d028:	3401      	adds	r4, #1
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d030:	4824      	ldr	r0, [pc, #144]	@ (800d0c4 <_svfiprintf_r+0x1e8>)
 800d032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d036:	2206      	movs	r2, #6
 800d038:	f7f3 f8ea 	bl	8000210 <memchr>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d036      	beq.n	800d0ae <_svfiprintf_r+0x1d2>
 800d040:	4b21      	ldr	r3, [pc, #132]	@ (800d0c8 <_svfiprintf_r+0x1ec>)
 800d042:	bb1b      	cbnz	r3, 800d08c <_svfiprintf_r+0x1b0>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	3307      	adds	r3, #7
 800d048:	f023 0307 	bic.w	r3, r3, #7
 800d04c:	3308      	adds	r3, #8
 800d04e:	9303      	str	r3, [sp, #12]
 800d050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d052:	4433      	add	r3, r6
 800d054:	9309      	str	r3, [sp, #36]	@ 0x24
 800d056:	e76a      	b.n	800cf2e <_svfiprintf_r+0x52>
 800d058:	fb0c 3202 	mla	r2, ip, r2, r3
 800d05c:	460c      	mov	r4, r1
 800d05e:	2001      	movs	r0, #1
 800d060:	e7a8      	b.n	800cfb4 <_svfiprintf_r+0xd8>
 800d062:	2300      	movs	r3, #0
 800d064:	3401      	adds	r4, #1
 800d066:	9305      	str	r3, [sp, #20]
 800d068:	4619      	mov	r1, r3
 800d06a:	f04f 0c0a 	mov.w	ip, #10
 800d06e:	4620      	mov	r0, r4
 800d070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d074:	3a30      	subs	r2, #48	@ 0x30
 800d076:	2a09      	cmp	r2, #9
 800d078:	d903      	bls.n	800d082 <_svfiprintf_r+0x1a6>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0c6      	beq.n	800d00c <_svfiprintf_r+0x130>
 800d07e:	9105      	str	r1, [sp, #20]
 800d080:	e7c4      	b.n	800d00c <_svfiprintf_r+0x130>
 800d082:	fb0c 2101 	mla	r1, ip, r1, r2
 800d086:	4604      	mov	r4, r0
 800d088:	2301      	movs	r3, #1
 800d08a:	e7f0      	b.n	800d06e <_svfiprintf_r+0x192>
 800d08c:	ab03      	add	r3, sp, #12
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	462a      	mov	r2, r5
 800d092:	4b0e      	ldr	r3, [pc, #56]	@ (800d0cc <_svfiprintf_r+0x1f0>)
 800d094:	a904      	add	r1, sp, #16
 800d096:	4638      	mov	r0, r7
 800d098:	f3af 8000 	nop.w
 800d09c:	1c42      	adds	r2, r0, #1
 800d09e:	4606      	mov	r6, r0
 800d0a0:	d1d6      	bne.n	800d050 <_svfiprintf_r+0x174>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	065b      	lsls	r3, r3, #25
 800d0a6:	f53f af2d 	bmi.w	800cf04 <_svfiprintf_r+0x28>
 800d0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0ac:	e72c      	b.n	800cf08 <_svfiprintf_r+0x2c>
 800d0ae:	ab03      	add	r3, sp, #12
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	462a      	mov	r2, r5
 800d0b4:	4b05      	ldr	r3, [pc, #20]	@ (800d0cc <_svfiprintf_r+0x1f0>)
 800d0b6:	a904      	add	r1, sp, #16
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f000 f9bb 	bl	800d434 <_printf_i>
 800d0be:	e7ed      	b.n	800d09c <_svfiprintf_r+0x1c0>
 800d0c0:	0800ee66 	.word	0x0800ee66
 800d0c4:	0800ee70 	.word	0x0800ee70
 800d0c8:	00000000 	.word	0x00000000
 800d0cc:	0800ce25 	.word	0x0800ce25
 800d0d0:	0800ee6c 	.word	0x0800ee6c

0800d0d4 <__sfputc_r>:
 800d0d4:	6893      	ldr	r3, [r2, #8]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	b410      	push	{r4}
 800d0dc:	6093      	str	r3, [r2, #8]
 800d0de:	da08      	bge.n	800d0f2 <__sfputc_r+0x1e>
 800d0e0:	6994      	ldr	r4, [r2, #24]
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	db01      	blt.n	800d0ea <__sfputc_r+0x16>
 800d0e6:	290a      	cmp	r1, #10
 800d0e8:	d103      	bne.n	800d0f2 <__sfputc_r+0x1e>
 800d0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ee:	f000 bb7d 	b.w	800d7ec <__swbuf_r>
 800d0f2:	6813      	ldr	r3, [r2, #0]
 800d0f4:	1c58      	adds	r0, r3, #1
 800d0f6:	6010      	str	r0, [r2, #0]
 800d0f8:	7019      	strb	r1, [r3, #0]
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <__sfputs_r>:
 800d102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d104:	4606      	mov	r6, r0
 800d106:	460f      	mov	r7, r1
 800d108:	4614      	mov	r4, r2
 800d10a:	18d5      	adds	r5, r2, r3
 800d10c:	42ac      	cmp	r4, r5
 800d10e:	d101      	bne.n	800d114 <__sfputs_r+0x12>
 800d110:	2000      	movs	r0, #0
 800d112:	e007      	b.n	800d124 <__sfputs_r+0x22>
 800d114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d118:	463a      	mov	r2, r7
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ffda 	bl	800d0d4 <__sfputc_r>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d1f3      	bne.n	800d10c <__sfputs_r+0xa>
 800d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d128 <_vfiprintf_r>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	460d      	mov	r5, r1
 800d12e:	b09d      	sub	sp, #116	@ 0x74
 800d130:	4614      	mov	r4, r2
 800d132:	4698      	mov	r8, r3
 800d134:	4606      	mov	r6, r0
 800d136:	b118      	cbz	r0, 800d140 <_vfiprintf_r+0x18>
 800d138:	6a03      	ldr	r3, [r0, #32]
 800d13a:	b90b      	cbnz	r3, 800d140 <_vfiprintf_r+0x18>
 800d13c:	f7ff fb9c 	bl	800c878 <__sinit>
 800d140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d142:	07d9      	lsls	r1, r3, #31
 800d144:	d405      	bmi.n	800d152 <_vfiprintf_r+0x2a>
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	059a      	lsls	r2, r3, #22
 800d14a:	d402      	bmi.n	800d152 <_vfiprintf_r+0x2a>
 800d14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d14e:	f7ff fd3a 	bl	800cbc6 <__retarget_lock_acquire_recursive>
 800d152:	89ab      	ldrh	r3, [r5, #12]
 800d154:	071b      	lsls	r3, r3, #28
 800d156:	d501      	bpl.n	800d15c <_vfiprintf_r+0x34>
 800d158:	692b      	ldr	r3, [r5, #16]
 800d15a:	b99b      	cbnz	r3, 800d184 <_vfiprintf_r+0x5c>
 800d15c:	4629      	mov	r1, r5
 800d15e:	4630      	mov	r0, r6
 800d160:	f000 fb82 	bl	800d868 <__swsetup_r>
 800d164:	b170      	cbz	r0, 800d184 <_vfiprintf_r+0x5c>
 800d166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d168:	07dc      	lsls	r4, r3, #31
 800d16a:	d504      	bpl.n	800d176 <_vfiprintf_r+0x4e>
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	b01d      	add	sp, #116	@ 0x74
 800d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d176:	89ab      	ldrh	r3, [r5, #12]
 800d178:	0598      	lsls	r0, r3, #22
 800d17a:	d4f7      	bmi.n	800d16c <_vfiprintf_r+0x44>
 800d17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d17e:	f7ff fd23 	bl	800cbc8 <__retarget_lock_release_recursive>
 800d182:	e7f3      	b.n	800d16c <_vfiprintf_r+0x44>
 800d184:	2300      	movs	r3, #0
 800d186:	9309      	str	r3, [sp, #36]	@ 0x24
 800d188:	2320      	movs	r3, #32
 800d18a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d18e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d192:	2330      	movs	r3, #48	@ 0x30
 800d194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d344 <_vfiprintf_r+0x21c>
 800d198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d19c:	f04f 0901 	mov.w	r9, #1
 800d1a0:	4623      	mov	r3, r4
 800d1a2:	469a      	mov	sl, r3
 800d1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a8:	b10a      	cbz	r2, 800d1ae <_vfiprintf_r+0x86>
 800d1aa:	2a25      	cmp	r2, #37	@ 0x25
 800d1ac:	d1f9      	bne.n	800d1a2 <_vfiprintf_r+0x7a>
 800d1ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d1b2:	d00b      	beq.n	800d1cc <_vfiprintf_r+0xa4>
 800d1b4:	465b      	mov	r3, fp
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7ff ffa1 	bl	800d102 <__sfputs_r>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	f000 80a7 	beq.w	800d314 <_vfiprintf_r+0x1ec>
 800d1c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1c8:	445a      	add	r2, fp
 800d1ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 809f 	beq.w	800d314 <_vfiprintf_r+0x1ec>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1e0:	f10a 0a01 	add.w	sl, sl, #1
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	9307      	str	r3, [sp, #28]
 800d1e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1ee:	4654      	mov	r4, sl
 800d1f0:	2205      	movs	r2, #5
 800d1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f6:	4853      	ldr	r0, [pc, #332]	@ (800d344 <_vfiprintf_r+0x21c>)
 800d1f8:	f7f3 f80a 	bl	8000210 <memchr>
 800d1fc:	9a04      	ldr	r2, [sp, #16]
 800d1fe:	b9d8      	cbnz	r0, 800d238 <_vfiprintf_r+0x110>
 800d200:	06d1      	lsls	r1, r2, #27
 800d202:	bf44      	itt	mi
 800d204:	2320      	movmi	r3, #32
 800d206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d20a:	0713      	lsls	r3, r2, #28
 800d20c:	bf44      	itt	mi
 800d20e:	232b      	movmi	r3, #43	@ 0x2b
 800d210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d214:	f89a 3000 	ldrb.w	r3, [sl]
 800d218:	2b2a      	cmp	r3, #42	@ 0x2a
 800d21a:	d015      	beq.n	800d248 <_vfiprintf_r+0x120>
 800d21c:	9a07      	ldr	r2, [sp, #28]
 800d21e:	4654      	mov	r4, sl
 800d220:	2000      	movs	r0, #0
 800d222:	f04f 0c0a 	mov.w	ip, #10
 800d226:	4621      	mov	r1, r4
 800d228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d22c:	3b30      	subs	r3, #48	@ 0x30
 800d22e:	2b09      	cmp	r3, #9
 800d230:	d94b      	bls.n	800d2ca <_vfiprintf_r+0x1a2>
 800d232:	b1b0      	cbz	r0, 800d262 <_vfiprintf_r+0x13a>
 800d234:	9207      	str	r2, [sp, #28]
 800d236:	e014      	b.n	800d262 <_vfiprintf_r+0x13a>
 800d238:	eba0 0308 	sub.w	r3, r0, r8
 800d23c:	fa09 f303 	lsl.w	r3, r9, r3
 800d240:	4313      	orrs	r3, r2
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	46a2      	mov	sl, r4
 800d246:	e7d2      	b.n	800d1ee <_vfiprintf_r+0xc6>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	1d19      	adds	r1, r3, #4
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	9103      	str	r1, [sp, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	bfbb      	ittet	lt
 800d254:	425b      	neglt	r3, r3
 800d256:	f042 0202 	orrlt.w	r2, r2, #2
 800d25a:	9307      	strge	r3, [sp, #28]
 800d25c:	9307      	strlt	r3, [sp, #28]
 800d25e:	bfb8      	it	lt
 800d260:	9204      	strlt	r2, [sp, #16]
 800d262:	7823      	ldrb	r3, [r4, #0]
 800d264:	2b2e      	cmp	r3, #46	@ 0x2e
 800d266:	d10a      	bne.n	800d27e <_vfiprintf_r+0x156>
 800d268:	7863      	ldrb	r3, [r4, #1]
 800d26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d26c:	d132      	bne.n	800d2d4 <_vfiprintf_r+0x1ac>
 800d26e:	9b03      	ldr	r3, [sp, #12]
 800d270:	1d1a      	adds	r2, r3, #4
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	9203      	str	r2, [sp, #12]
 800d276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d27a:	3402      	adds	r4, #2
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d354 <_vfiprintf_r+0x22c>
 800d282:	7821      	ldrb	r1, [r4, #0]
 800d284:	2203      	movs	r2, #3
 800d286:	4650      	mov	r0, sl
 800d288:	f7f2 ffc2 	bl	8000210 <memchr>
 800d28c:	b138      	cbz	r0, 800d29e <_vfiprintf_r+0x176>
 800d28e:	9b04      	ldr	r3, [sp, #16]
 800d290:	eba0 000a 	sub.w	r0, r0, sl
 800d294:	2240      	movs	r2, #64	@ 0x40
 800d296:	4082      	lsls	r2, r0
 800d298:	4313      	orrs	r3, r2
 800d29a:	3401      	adds	r4, #1
 800d29c:	9304      	str	r3, [sp, #16]
 800d29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a2:	4829      	ldr	r0, [pc, #164]	@ (800d348 <_vfiprintf_r+0x220>)
 800d2a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2a8:	2206      	movs	r2, #6
 800d2aa:	f7f2 ffb1 	bl	8000210 <memchr>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d03f      	beq.n	800d332 <_vfiprintf_r+0x20a>
 800d2b2:	4b26      	ldr	r3, [pc, #152]	@ (800d34c <_vfiprintf_r+0x224>)
 800d2b4:	bb1b      	cbnz	r3, 800d2fe <_vfiprintf_r+0x1d6>
 800d2b6:	9b03      	ldr	r3, [sp, #12]
 800d2b8:	3307      	adds	r3, #7
 800d2ba:	f023 0307 	bic.w	r3, r3, #7
 800d2be:	3308      	adds	r3, #8
 800d2c0:	9303      	str	r3, [sp, #12]
 800d2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c4:	443b      	add	r3, r7
 800d2c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c8:	e76a      	b.n	800d1a0 <_vfiprintf_r+0x78>
 800d2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ce:	460c      	mov	r4, r1
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	e7a8      	b.n	800d226 <_vfiprintf_r+0xfe>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f04f 0c0a 	mov.w	ip, #10
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e6:	3a30      	subs	r2, #48	@ 0x30
 800d2e8:	2a09      	cmp	r2, #9
 800d2ea:	d903      	bls.n	800d2f4 <_vfiprintf_r+0x1cc>
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0c6      	beq.n	800d27e <_vfiprintf_r+0x156>
 800d2f0:	9105      	str	r1, [sp, #20]
 800d2f2:	e7c4      	b.n	800d27e <_vfiprintf_r+0x156>
 800d2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e7f0      	b.n	800d2e0 <_vfiprintf_r+0x1b8>
 800d2fe:	ab03      	add	r3, sp, #12
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	462a      	mov	r2, r5
 800d304:	4b12      	ldr	r3, [pc, #72]	@ (800d350 <_vfiprintf_r+0x228>)
 800d306:	a904      	add	r1, sp, #16
 800d308:	4630      	mov	r0, r6
 800d30a:	f3af 8000 	nop.w
 800d30e:	4607      	mov	r7, r0
 800d310:	1c78      	adds	r0, r7, #1
 800d312:	d1d6      	bne.n	800d2c2 <_vfiprintf_r+0x19a>
 800d314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d316:	07d9      	lsls	r1, r3, #31
 800d318:	d405      	bmi.n	800d326 <_vfiprintf_r+0x1fe>
 800d31a:	89ab      	ldrh	r3, [r5, #12]
 800d31c:	059a      	lsls	r2, r3, #22
 800d31e:	d402      	bmi.n	800d326 <_vfiprintf_r+0x1fe>
 800d320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d322:	f7ff fc51 	bl	800cbc8 <__retarget_lock_release_recursive>
 800d326:	89ab      	ldrh	r3, [r5, #12]
 800d328:	065b      	lsls	r3, r3, #25
 800d32a:	f53f af1f 	bmi.w	800d16c <_vfiprintf_r+0x44>
 800d32e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d330:	e71e      	b.n	800d170 <_vfiprintf_r+0x48>
 800d332:	ab03      	add	r3, sp, #12
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	462a      	mov	r2, r5
 800d338:	4b05      	ldr	r3, [pc, #20]	@ (800d350 <_vfiprintf_r+0x228>)
 800d33a:	a904      	add	r1, sp, #16
 800d33c:	4630      	mov	r0, r6
 800d33e:	f000 f879 	bl	800d434 <_printf_i>
 800d342:	e7e4      	b.n	800d30e <_vfiprintf_r+0x1e6>
 800d344:	0800ee66 	.word	0x0800ee66
 800d348:	0800ee70 	.word	0x0800ee70
 800d34c:	00000000 	.word	0x00000000
 800d350:	0800d103 	.word	0x0800d103
 800d354:	0800ee6c 	.word	0x0800ee6c

0800d358 <_printf_common>:
 800d358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d35c:	4616      	mov	r6, r2
 800d35e:	4698      	mov	r8, r3
 800d360:	688a      	ldr	r2, [r1, #8]
 800d362:	690b      	ldr	r3, [r1, #16]
 800d364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d368:	4293      	cmp	r3, r2
 800d36a:	bfb8      	it	lt
 800d36c:	4613      	movlt	r3, r2
 800d36e:	6033      	str	r3, [r6, #0]
 800d370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d374:	4607      	mov	r7, r0
 800d376:	460c      	mov	r4, r1
 800d378:	b10a      	cbz	r2, 800d37e <_printf_common+0x26>
 800d37a:	3301      	adds	r3, #1
 800d37c:	6033      	str	r3, [r6, #0]
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	0699      	lsls	r1, r3, #26
 800d382:	bf42      	ittt	mi
 800d384:	6833      	ldrmi	r3, [r6, #0]
 800d386:	3302      	addmi	r3, #2
 800d388:	6033      	strmi	r3, [r6, #0]
 800d38a:	6825      	ldr	r5, [r4, #0]
 800d38c:	f015 0506 	ands.w	r5, r5, #6
 800d390:	d106      	bne.n	800d3a0 <_printf_common+0x48>
 800d392:	f104 0a19 	add.w	sl, r4, #25
 800d396:	68e3      	ldr	r3, [r4, #12]
 800d398:	6832      	ldr	r2, [r6, #0]
 800d39a:	1a9b      	subs	r3, r3, r2
 800d39c:	42ab      	cmp	r3, r5
 800d39e:	dc26      	bgt.n	800d3ee <_printf_common+0x96>
 800d3a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	3b00      	subs	r3, #0
 800d3a8:	bf18      	it	ne
 800d3aa:	2301      	movne	r3, #1
 800d3ac:	0692      	lsls	r2, r2, #26
 800d3ae:	d42b      	bmi.n	800d408 <_printf_common+0xb0>
 800d3b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3b4:	4641      	mov	r1, r8
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	47c8      	blx	r9
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	d01e      	beq.n	800d3fc <_printf_common+0xa4>
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	6922      	ldr	r2, [r4, #16]
 800d3c2:	f003 0306 	and.w	r3, r3, #6
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	bf02      	ittt	eq
 800d3ca:	68e5      	ldreq	r5, [r4, #12]
 800d3cc:	6833      	ldreq	r3, [r6, #0]
 800d3ce:	1aed      	subeq	r5, r5, r3
 800d3d0:	68a3      	ldr	r3, [r4, #8]
 800d3d2:	bf0c      	ite	eq
 800d3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3d8:	2500      	movne	r5, #0
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	bfc4      	itt	gt
 800d3de:	1a9b      	subgt	r3, r3, r2
 800d3e0:	18ed      	addgt	r5, r5, r3
 800d3e2:	2600      	movs	r6, #0
 800d3e4:	341a      	adds	r4, #26
 800d3e6:	42b5      	cmp	r5, r6
 800d3e8:	d11a      	bne.n	800d420 <_printf_common+0xc8>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	e008      	b.n	800d400 <_printf_common+0xa8>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	4652      	mov	r2, sl
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	4638      	mov	r0, r7
 800d3f6:	47c8      	blx	r9
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d103      	bne.n	800d404 <_printf_common+0xac>
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d404:	3501      	adds	r5, #1
 800d406:	e7c6      	b.n	800d396 <_printf_common+0x3e>
 800d408:	18e1      	adds	r1, r4, r3
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	2030      	movs	r0, #48	@ 0x30
 800d40e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d412:	4422      	add	r2, r4
 800d414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d41c:	3302      	adds	r3, #2
 800d41e:	e7c7      	b.n	800d3b0 <_printf_common+0x58>
 800d420:	2301      	movs	r3, #1
 800d422:	4622      	mov	r2, r4
 800d424:	4641      	mov	r1, r8
 800d426:	4638      	mov	r0, r7
 800d428:	47c8      	blx	r9
 800d42a:	3001      	adds	r0, #1
 800d42c:	d0e6      	beq.n	800d3fc <_printf_common+0xa4>
 800d42e:	3601      	adds	r6, #1
 800d430:	e7d9      	b.n	800d3e6 <_printf_common+0x8e>
	...

0800d434 <_printf_i>:
 800d434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	7e0f      	ldrb	r7, [r1, #24]
 800d43a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d43c:	2f78      	cmp	r7, #120	@ 0x78
 800d43e:	4691      	mov	r9, r2
 800d440:	4680      	mov	r8, r0
 800d442:	460c      	mov	r4, r1
 800d444:	469a      	mov	sl, r3
 800d446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d44a:	d807      	bhi.n	800d45c <_printf_i+0x28>
 800d44c:	2f62      	cmp	r7, #98	@ 0x62
 800d44e:	d80a      	bhi.n	800d466 <_printf_i+0x32>
 800d450:	2f00      	cmp	r7, #0
 800d452:	f000 80d1 	beq.w	800d5f8 <_printf_i+0x1c4>
 800d456:	2f58      	cmp	r7, #88	@ 0x58
 800d458:	f000 80b8 	beq.w	800d5cc <_printf_i+0x198>
 800d45c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d464:	e03a      	b.n	800d4dc <_printf_i+0xa8>
 800d466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d46a:	2b15      	cmp	r3, #21
 800d46c:	d8f6      	bhi.n	800d45c <_printf_i+0x28>
 800d46e:	a101      	add	r1, pc, #4	@ (adr r1, 800d474 <_printf_i+0x40>)
 800d470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d474:	0800d4cd 	.word	0x0800d4cd
 800d478:	0800d4e1 	.word	0x0800d4e1
 800d47c:	0800d45d 	.word	0x0800d45d
 800d480:	0800d45d 	.word	0x0800d45d
 800d484:	0800d45d 	.word	0x0800d45d
 800d488:	0800d45d 	.word	0x0800d45d
 800d48c:	0800d4e1 	.word	0x0800d4e1
 800d490:	0800d45d 	.word	0x0800d45d
 800d494:	0800d45d 	.word	0x0800d45d
 800d498:	0800d45d 	.word	0x0800d45d
 800d49c:	0800d45d 	.word	0x0800d45d
 800d4a0:	0800d5df 	.word	0x0800d5df
 800d4a4:	0800d50b 	.word	0x0800d50b
 800d4a8:	0800d599 	.word	0x0800d599
 800d4ac:	0800d45d 	.word	0x0800d45d
 800d4b0:	0800d45d 	.word	0x0800d45d
 800d4b4:	0800d601 	.word	0x0800d601
 800d4b8:	0800d45d 	.word	0x0800d45d
 800d4bc:	0800d50b 	.word	0x0800d50b
 800d4c0:	0800d45d 	.word	0x0800d45d
 800d4c4:	0800d45d 	.word	0x0800d45d
 800d4c8:	0800d5a1 	.word	0x0800d5a1
 800d4cc:	6833      	ldr	r3, [r6, #0]
 800d4ce:	1d1a      	adds	r2, r3, #4
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6032      	str	r2, [r6, #0]
 800d4d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e09c      	b.n	800d61a <_printf_i+0x1e6>
 800d4e0:	6833      	ldr	r3, [r6, #0]
 800d4e2:	6820      	ldr	r0, [r4, #0]
 800d4e4:	1d19      	adds	r1, r3, #4
 800d4e6:	6031      	str	r1, [r6, #0]
 800d4e8:	0606      	lsls	r6, r0, #24
 800d4ea:	d501      	bpl.n	800d4f0 <_printf_i+0xbc>
 800d4ec:	681d      	ldr	r5, [r3, #0]
 800d4ee:	e003      	b.n	800d4f8 <_printf_i+0xc4>
 800d4f0:	0645      	lsls	r5, r0, #25
 800d4f2:	d5fb      	bpl.n	800d4ec <_printf_i+0xb8>
 800d4f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d4f8:	2d00      	cmp	r5, #0
 800d4fa:	da03      	bge.n	800d504 <_printf_i+0xd0>
 800d4fc:	232d      	movs	r3, #45	@ 0x2d
 800d4fe:	426d      	negs	r5, r5
 800d500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d504:	4858      	ldr	r0, [pc, #352]	@ (800d668 <_printf_i+0x234>)
 800d506:	230a      	movs	r3, #10
 800d508:	e011      	b.n	800d52e <_printf_i+0xfa>
 800d50a:	6821      	ldr	r1, [r4, #0]
 800d50c:	6833      	ldr	r3, [r6, #0]
 800d50e:	0608      	lsls	r0, r1, #24
 800d510:	f853 5b04 	ldr.w	r5, [r3], #4
 800d514:	d402      	bmi.n	800d51c <_printf_i+0xe8>
 800d516:	0649      	lsls	r1, r1, #25
 800d518:	bf48      	it	mi
 800d51a:	b2ad      	uxthmi	r5, r5
 800d51c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d51e:	4852      	ldr	r0, [pc, #328]	@ (800d668 <_printf_i+0x234>)
 800d520:	6033      	str	r3, [r6, #0]
 800d522:	bf14      	ite	ne
 800d524:	230a      	movne	r3, #10
 800d526:	2308      	moveq	r3, #8
 800d528:	2100      	movs	r1, #0
 800d52a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d52e:	6866      	ldr	r6, [r4, #4]
 800d530:	60a6      	str	r6, [r4, #8]
 800d532:	2e00      	cmp	r6, #0
 800d534:	db05      	blt.n	800d542 <_printf_i+0x10e>
 800d536:	6821      	ldr	r1, [r4, #0]
 800d538:	432e      	orrs	r6, r5
 800d53a:	f021 0104 	bic.w	r1, r1, #4
 800d53e:	6021      	str	r1, [r4, #0]
 800d540:	d04b      	beq.n	800d5da <_printf_i+0x1a6>
 800d542:	4616      	mov	r6, r2
 800d544:	fbb5 f1f3 	udiv	r1, r5, r3
 800d548:	fb03 5711 	mls	r7, r3, r1, r5
 800d54c:	5dc7      	ldrb	r7, [r0, r7]
 800d54e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d552:	462f      	mov	r7, r5
 800d554:	42bb      	cmp	r3, r7
 800d556:	460d      	mov	r5, r1
 800d558:	d9f4      	bls.n	800d544 <_printf_i+0x110>
 800d55a:	2b08      	cmp	r3, #8
 800d55c:	d10b      	bne.n	800d576 <_printf_i+0x142>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	07df      	lsls	r7, r3, #31
 800d562:	d508      	bpl.n	800d576 <_printf_i+0x142>
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	6861      	ldr	r1, [r4, #4]
 800d568:	4299      	cmp	r1, r3
 800d56a:	bfde      	ittt	le
 800d56c:	2330      	movle	r3, #48	@ 0x30
 800d56e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d572:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d576:	1b92      	subs	r2, r2, r6
 800d578:	6122      	str	r2, [r4, #16]
 800d57a:	f8cd a000 	str.w	sl, [sp]
 800d57e:	464b      	mov	r3, r9
 800d580:	aa03      	add	r2, sp, #12
 800d582:	4621      	mov	r1, r4
 800d584:	4640      	mov	r0, r8
 800d586:	f7ff fee7 	bl	800d358 <_printf_common>
 800d58a:	3001      	adds	r0, #1
 800d58c:	d14a      	bne.n	800d624 <_printf_i+0x1f0>
 800d58e:	f04f 30ff 	mov.w	r0, #4294967295
 800d592:	b004      	add	sp, #16
 800d594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	f043 0320 	orr.w	r3, r3, #32
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	4832      	ldr	r0, [pc, #200]	@ (800d66c <_printf_i+0x238>)
 800d5a2:	2778      	movs	r7, #120	@ 0x78
 800d5a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	6831      	ldr	r1, [r6, #0]
 800d5ac:	061f      	lsls	r7, r3, #24
 800d5ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5b2:	d402      	bmi.n	800d5ba <_printf_i+0x186>
 800d5b4:	065f      	lsls	r7, r3, #25
 800d5b6:	bf48      	it	mi
 800d5b8:	b2ad      	uxthmi	r5, r5
 800d5ba:	6031      	str	r1, [r6, #0]
 800d5bc:	07d9      	lsls	r1, r3, #31
 800d5be:	bf44      	itt	mi
 800d5c0:	f043 0320 	orrmi.w	r3, r3, #32
 800d5c4:	6023      	strmi	r3, [r4, #0]
 800d5c6:	b11d      	cbz	r5, 800d5d0 <_printf_i+0x19c>
 800d5c8:	2310      	movs	r3, #16
 800d5ca:	e7ad      	b.n	800d528 <_printf_i+0xf4>
 800d5cc:	4826      	ldr	r0, [pc, #152]	@ (800d668 <_printf_i+0x234>)
 800d5ce:	e7e9      	b.n	800d5a4 <_printf_i+0x170>
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	f023 0320 	bic.w	r3, r3, #32
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	e7f6      	b.n	800d5c8 <_printf_i+0x194>
 800d5da:	4616      	mov	r6, r2
 800d5dc:	e7bd      	b.n	800d55a <_printf_i+0x126>
 800d5de:	6833      	ldr	r3, [r6, #0]
 800d5e0:	6825      	ldr	r5, [r4, #0]
 800d5e2:	6961      	ldr	r1, [r4, #20]
 800d5e4:	1d18      	adds	r0, r3, #4
 800d5e6:	6030      	str	r0, [r6, #0]
 800d5e8:	062e      	lsls	r6, r5, #24
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	d501      	bpl.n	800d5f2 <_printf_i+0x1be>
 800d5ee:	6019      	str	r1, [r3, #0]
 800d5f0:	e002      	b.n	800d5f8 <_printf_i+0x1c4>
 800d5f2:	0668      	lsls	r0, r5, #25
 800d5f4:	d5fb      	bpl.n	800d5ee <_printf_i+0x1ba>
 800d5f6:	8019      	strh	r1, [r3, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	4616      	mov	r6, r2
 800d5fe:	e7bc      	b.n	800d57a <_printf_i+0x146>
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	6032      	str	r2, [r6, #0]
 800d606:	681e      	ldr	r6, [r3, #0]
 800d608:	6862      	ldr	r2, [r4, #4]
 800d60a:	2100      	movs	r1, #0
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7f2 fdff 	bl	8000210 <memchr>
 800d612:	b108      	cbz	r0, 800d618 <_printf_i+0x1e4>
 800d614:	1b80      	subs	r0, r0, r6
 800d616:	6060      	str	r0, [r4, #4]
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	6123      	str	r3, [r4, #16]
 800d61c:	2300      	movs	r3, #0
 800d61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d622:	e7aa      	b.n	800d57a <_printf_i+0x146>
 800d624:	6923      	ldr	r3, [r4, #16]
 800d626:	4632      	mov	r2, r6
 800d628:	4649      	mov	r1, r9
 800d62a:	4640      	mov	r0, r8
 800d62c:	47d0      	blx	sl
 800d62e:	3001      	adds	r0, #1
 800d630:	d0ad      	beq.n	800d58e <_printf_i+0x15a>
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	079b      	lsls	r3, r3, #30
 800d636:	d413      	bmi.n	800d660 <_printf_i+0x22c>
 800d638:	68e0      	ldr	r0, [r4, #12]
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	4298      	cmp	r0, r3
 800d63e:	bfb8      	it	lt
 800d640:	4618      	movlt	r0, r3
 800d642:	e7a6      	b.n	800d592 <_printf_i+0x15e>
 800d644:	2301      	movs	r3, #1
 800d646:	4632      	mov	r2, r6
 800d648:	4649      	mov	r1, r9
 800d64a:	4640      	mov	r0, r8
 800d64c:	47d0      	blx	sl
 800d64e:	3001      	adds	r0, #1
 800d650:	d09d      	beq.n	800d58e <_printf_i+0x15a>
 800d652:	3501      	adds	r5, #1
 800d654:	68e3      	ldr	r3, [r4, #12]
 800d656:	9903      	ldr	r1, [sp, #12]
 800d658:	1a5b      	subs	r3, r3, r1
 800d65a:	42ab      	cmp	r3, r5
 800d65c:	dcf2      	bgt.n	800d644 <_printf_i+0x210>
 800d65e:	e7eb      	b.n	800d638 <_printf_i+0x204>
 800d660:	2500      	movs	r5, #0
 800d662:	f104 0619 	add.w	r6, r4, #25
 800d666:	e7f5      	b.n	800d654 <_printf_i+0x220>
 800d668:	0800ee77 	.word	0x0800ee77
 800d66c:	0800ee88 	.word	0x0800ee88

0800d670 <__sflush_r>:
 800d670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d678:	0716      	lsls	r6, r2, #28
 800d67a:	4605      	mov	r5, r0
 800d67c:	460c      	mov	r4, r1
 800d67e:	d454      	bmi.n	800d72a <__sflush_r+0xba>
 800d680:	684b      	ldr	r3, [r1, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	dc02      	bgt.n	800d68c <__sflush_r+0x1c>
 800d686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dd48      	ble.n	800d71e <__sflush_r+0xae>
 800d68c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d68e:	2e00      	cmp	r6, #0
 800d690:	d045      	beq.n	800d71e <__sflush_r+0xae>
 800d692:	2300      	movs	r3, #0
 800d694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d698:	682f      	ldr	r7, [r5, #0]
 800d69a:	6a21      	ldr	r1, [r4, #32]
 800d69c:	602b      	str	r3, [r5, #0]
 800d69e:	d030      	beq.n	800d702 <__sflush_r+0x92>
 800d6a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	0759      	lsls	r1, r3, #29
 800d6a6:	d505      	bpl.n	800d6b4 <__sflush_r+0x44>
 800d6a8:	6863      	ldr	r3, [r4, #4]
 800d6aa:	1ad2      	subs	r2, r2, r3
 800d6ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6ae:	b10b      	cbz	r3, 800d6b4 <__sflush_r+0x44>
 800d6b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6b2:	1ad2      	subs	r2, r2, r3
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6b8:	6a21      	ldr	r1, [r4, #32]
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	47b0      	blx	r6
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	d106      	bne.n	800d6d2 <__sflush_r+0x62>
 800d6c4:	6829      	ldr	r1, [r5, #0]
 800d6c6:	291d      	cmp	r1, #29
 800d6c8:	d82b      	bhi.n	800d722 <__sflush_r+0xb2>
 800d6ca:	4a2a      	ldr	r2, [pc, #168]	@ (800d774 <__sflush_r+0x104>)
 800d6cc:	40ca      	lsrs	r2, r1
 800d6ce:	07d6      	lsls	r6, r2, #31
 800d6d0:	d527      	bpl.n	800d722 <__sflush_r+0xb2>
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	6062      	str	r2, [r4, #4]
 800d6d6:	04d9      	lsls	r1, r3, #19
 800d6d8:	6922      	ldr	r2, [r4, #16]
 800d6da:	6022      	str	r2, [r4, #0]
 800d6dc:	d504      	bpl.n	800d6e8 <__sflush_r+0x78>
 800d6de:	1c42      	adds	r2, r0, #1
 800d6e0:	d101      	bne.n	800d6e6 <__sflush_r+0x76>
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	b903      	cbnz	r3, 800d6e8 <__sflush_r+0x78>
 800d6e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6ea:	602f      	str	r7, [r5, #0]
 800d6ec:	b1b9      	cbz	r1, 800d71e <__sflush_r+0xae>
 800d6ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6f2:	4299      	cmp	r1, r3
 800d6f4:	d002      	beq.n	800d6fc <__sflush_r+0x8c>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7ff fa94 	bl	800cc24 <_free_r>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800d700:	e00d      	b.n	800d71e <__sflush_r+0xae>
 800d702:	2301      	movs	r3, #1
 800d704:	4628      	mov	r0, r5
 800d706:	47b0      	blx	r6
 800d708:	4602      	mov	r2, r0
 800d70a:	1c50      	adds	r0, r2, #1
 800d70c:	d1c9      	bne.n	800d6a2 <__sflush_r+0x32>
 800d70e:	682b      	ldr	r3, [r5, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0c6      	beq.n	800d6a2 <__sflush_r+0x32>
 800d714:	2b1d      	cmp	r3, #29
 800d716:	d001      	beq.n	800d71c <__sflush_r+0xac>
 800d718:	2b16      	cmp	r3, #22
 800d71a:	d11e      	bne.n	800d75a <__sflush_r+0xea>
 800d71c:	602f      	str	r7, [r5, #0]
 800d71e:	2000      	movs	r0, #0
 800d720:	e022      	b.n	800d768 <__sflush_r+0xf8>
 800d722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d726:	b21b      	sxth	r3, r3
 800d728:	e01b      	b.n	800d762 <__sflush_r+0xf2>
 800d72a:	690f      	ldr	r7, [r1, #16]
 800d72c:	2f00      	cmp	r7, #0
 800d72e:	d0f6      	beq.n	800d71e <__sflush_r+0xae>
 800d730:	0793      	lsls	r3, r2, #30
 800d732:	680e      	ldr	r6, [r1, #0]
 800d734:	bf08      	it	eq
 800d736:	694b      	ldreq	r3, [r1, #20]
 800d738:	600f      	str	r7, [r1, #0]
 800d73a:	bf18      	it	ne
 800d73c:	2300      	movne	r3, #0
 800d73e:	eba6 0807 	sub.w	r8, r6, r7
 800d742:	608b      	str	r3, [r1, #8]
 800d744:	f1b8 0f00 	cmp.w	r8, #0
 800d748:	dde9      	ble.n	800d71e <__sflush_r+0xae>
 800d74a:	6a21      	ldr	r1, [r4, #32]
 800d74c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d74e:	4643      	mov	r3, r8
 800d750:	463a      	mov	r2, r7
 800d752:	4628      	mov	r0, r5
 800d754:	47b0      	blx	r6
 800d756:	2800      	cmp	r0, #0
 800d758:	dc08      	bgt.n	800d76c <__sflush_r+0xfc>
 800d75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d762:	81a3      	strh	r3, [r4, #12]
 800d764:	f04f 30ff 	mov.w	r0, #4294967295
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	4407      	add	r7, r0
 800d76e:	eba8 0800 	sub.w	r8, r8, r0
 800d772:	e7e7      	b.n	800d744 <__sflush_r+0xd4>
 800d774:	20400001 	.word	0x20400001

0800d778 <_fflush_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	690b      	ldr	r3, [r1, #16]
 800d77c:	4605      	mov	r5, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	b913      	cbnz	r3, 800d788 <_fflush_r+0x10>
 800d782:	2500      	movs	r5, #0
 800d784:	4628      	mov	r0, r5
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	b118      	cbz	r0, 800d792 <_fflush_r+0x1a>
 800d78a:	6a03      	ldr	r3, [r0, #32]
 800d78c:	b90b      	cbnz	r3, 800d792 <_fflush_r+0x1a>
 800d78e:	f7ff f873 	bl	800c878 <__sinit>
 800d792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0f3      	beq.n	800d782 <_fflush_r+0xa>
 800d79a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d79c:	07d0      	lsls	r0, r2, #31
 800d79e:	d404      	bmi.n	800d7aa <_fflush_r+0x32>
 800d7a0:	0599      	lsls	r1, r3, #22
 800d7a2:	d402      	bmi.n	800d7aa <_fflush_r+0x32>
 800d7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7a6:	f7ff fa0e 	bl	800cbc6 <__retarget_lock_acquire_recursive>
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f7ff ff5f 	bl	800d670 <__sflush_r>
 800d7b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7b4:	07da      	lsls	r2, r3, #31
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	d4e4      	bmi.n	800d784 <_fflush_r+0xc>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	059b      	lsls	r3, r3, #22
 800d7be:	d4e1      	bmi.n	800d784 <_fflush_r+0xc>
 800d7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7c2:	f7ff fa01 	bl	800cbc8 <__retarget_lock_release_recursive>
 800d7c6:	e7dd      	b.n	800d784 <_fflush_r+0xc>

0800d7c8 <fiprintf>:
 800d7c8:	b40e      	push	{r1, r2, r3}
 800d7ca:	b503      	push	{r0, r1, lr}
 800d7cc:	4601      	mov	r1, r0
 800d7ce:	ab03      	add	r3, sp, #12
 800d7d0:	4805      	ldr	r0, [pc, #20]	@ (800d7e8 <fiprintf+0x20>)
 800d7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d6:	6800      	ldr	r0, [r0, #0]
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	f7ff fca5 	bl	800d128 <_vfiprintf_r>
 800d7de:	b002      	add	sp, #8
 800d7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e4:	b003      	add	sp, #12
 800d7e6:	4770      	bx	lr
 800d7e8:	20000150 	.word	0x20000150

0800d7ec <__swbuf_r>:
 800d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ee:	460e      	mov	r6, r1
 800d7f0:	4614      	mov	r4, r2
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	b118      	cbz	r0, 800d7fe <__swbuf_r+0x12>
 800d7f6:	6a03      	ldr	r3, [r0, #32]
 800d7f8:	b90b      	cbnz	r3, 800d7fe <__swbuf_r+0x12>
 800d7fa:	f7ff f83d 	bl	800c878 <__sinit>
 800d7fe:	69a3      	ldr	r3, [r4, #24]
 800d800:	60a3      	str	r3, [r4, #8]
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	071a      	lsls	r2, r3, #28
 800d806:	d501      	bpl.n	800d80c <__swbuf_r+0x20>
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	b943      	cbnz	r3, 800d81e <__swbuf_r+0x32>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4628      	mov	r0, r5
 800d810:	f000 f82a 	bl	800d868 <__swsetup_r>
 800d814:	b118      	cbz	r0, 800d81e <__swbuf_r+0x32>
 800d816:	f04f 37ff 	mov.w	r7, #4294967295
 800d81a:	4638      	mov	r0, r7
 800d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	1a98      	subs	r0, r3, r2
 800d824:	6963      	ldr	r3, [r4, #20]
 800d826:	b2f6      	uxtb	r6, r6
 800d828:	4283      	cmp	r3, r0
 800d82a:	4637      	mov	r7, r6
 800d82c:	dc05      	bgt.n	800d83a <__swbuf_r+0x4e>
 800d82e:	4621      	mov	r1, r4
 800d830:	4628      	mov	r0, r5
 800d832:	f7ff ffa1 	bl	800d778 <_fflush_r>
 800d836:	2800      	cmp	r0, #0
 800d838:	d1ed      	bne.n	800d816 <__swbuf_r+0x2a>
 800d83a:	68a3      	ldr	r3, [r4, #8]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	60a3      	str	r3, [r4, #8]
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	1c5a      	adds	r2, r3, #1
 800d844:	6022      	str	r2, [r4, #0]
 800d846:	701e      	strb	r6, [r3, #0]
 800d848:	6962      	ldr	r2, [r4, #20]
 800d84a:	1c43      	adds	r3, r0, #1
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d004      	beq.n	800d85a <__swbuf_r+0x6e>
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	07db      	lsls	r3, r3, #31
 800d854:	d5e1      	bpl.n	800d81a <__swbuf_r+0x2e>
 800d856:	2e0a      	cmp	r6, #10
 800d858:	d1df      	bne.n	800d81a <__swbuf_r+0x2e>
 800d85a:	4621      	mov	r1, r4
 800d85c:	4628      	mov	r0, r5
 800d85e:	f7ff ff8b 	bl	800d778 <_fflush_r>
 800d862:	2800      	cmp	r0, #0
 800d864:	d0d9      	beq.n	800d81a <__swbuf_r+0x2e>
 800d866:	e7d6      	b.n	800d816 <__swbuf_r+0x2a>

0800d868 <__swsetup_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4b29      	ldr	r3, [pc, #164]	@ (800d910 <__swsetup_r+0xa8>)
 800d86c:	4605      	mov	r5, r0
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	460c      	mov	r4, r1
 800d872:	b118      	cbz	r0, 800d87c <__swsetup_r+0x14>
 800d874:	6a03      	ldr	r3, [r0, #32]
 800d876:	b90b      	cbnz	r3, 800d87c <__swsetup_r+0x14>
 800d878:	f7fe fffe 	bl	800c878 <__sinit>
 800d87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d880:	0719      	lsls	r1, r3, #28
 800d882:	d422      	bmi.n	800d8ca <__swsetup_r+0x62>
 800d884:	06da      	lsls	r2, r3, #27
 800d886:	d407      	bmi.n	800d898 <__swsetup_r+0x30>
 800d888:	2209      	movs	r2, #9
 800d88a:	602a      	str	r2, [r5, #0]
 800d88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	f04f 30ff 	mov.w	r0, #4294967295
 800d896:	e033      	b.n	800d900 <__swsetup_r+0x98>
 800d898:	0758      	lsls	r0, r3, #29
 800d89a:	d512      	bpl.n	800d8c2 <__swsetup_r+0x5a>
 800d89c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d89e:	b141      	cbz	r1, 800d8b2 <__swsetup_r+0x4a>
 800d8a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8a4:	4299      	cmp	r1, r3
 800d8a6:	d002      	beq.n	800d8ae <__swsetup_r+0x46>
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f7ff f9bb 	bl	800cc24 <_free_r>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8b8:	81a3      	strh	r3, [r4, #12]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	6063      	str	r3, [r4, #4]
 800d8be:	6923      	ldr	r3, [r4, #16]
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	f043 0308 	orr.w	r3, r3, #8
 800d8c8:	81a3      	strh	r3, [r4, #12]
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	b94b      	cbnz	r3, 800d8e2 <__swsetup_r+0x7a>
 800d8ce:	89a3      	ldrh	r3, [r4, #12]
 800d8d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8d8:	d003      	beq.n	800d8e2 <__swsetup_r+0x7a>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4628      	mov	r0, r5
 800d8de:	f000 f89e 	bl	800da1e <__smakebuf_r>
 800d8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e6:	f013 0201 	ands.w	r2, r3, #1
 800d8ea:	d00a      	beq.n	800d902 <__swsetup_r+0x9a>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	60a2      	str	r2, [r4, #8]
 800d8f0:	6962      	ldr	r2, [r4, #20]
 800d8f2:	4252      	negs	r2, r2
 800d8f4:	61a2      	str	r2, [r4, #24]
 800d8f6:	6922      	ldr	r2, [r4, #16]
 800d8f8:	b942      	cbnz	r2, 800d90c <__swsetup_r+0xa4>
 800d8fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8fe:	d1c5      	bne.n	800d88c <__swsetup_r+0x24>
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	0799      	lsls	r1, r3, #30
 800d904:	bf58      	it	pl
 800d906:	6962      	ldrpl	r2, [r4, #20]
 800d908:	60a2      	str	r2, [r4, #8]
 800d90a:	e7f4      	b.n	800d8f6 <__swsetup_r+0x8e>
 800d90c:	2000      	movs	r0, #0
 800d90e:	e7f7      	b.n	800d900 <__swsetup_r+0x98>
 800d910:	20000150 	.word	0x20000150

0800d914 <memmove>:
 800d914:	4288      	cmp	r0, r1
 800d916:	b510      	push	{r4, lr}
 800d918:	eb01 0402 	add.w	r4, r1, r2
 800d91c:	d902      	bls.n	800d924 <memmove+0x10>
 800d91e:	4284      	cmp	r4, r0
 800d920:	4623      	mov	r3, r4
 800d922:	d807      	bhi.n	800d934 <memmove+0x20>
 800d924:	1e43      	subs	r3, r0, #1
 800d926:	42a1      	cmp	r1, r4
 800d928:	d008      	beq.n	800d93c <memmove+0x28>
 800d92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d932:	e7f8      	b.n	800d926 <memmove+0x12>
 800d934:	4402      	add	r2, r0
 800d936:	4601      	mov	r1, r0
 800d938:	428a      	cmp	r2, r1
 800d93a:	d100      	bne.n	800d93e <memmove+0x2a>
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d946:	e7f7      	b.n	800d938 <memmove+0x24>

0800d948 <_sbrk_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	4d06      	ldr	r5, [pc, #24]	@ (800d964 <_sbrk_r+0x1c>)
 800d94c:	2300      	movs	r3, #0
 800d94e:	4604      	mov	r4, r0
 800d950:	4608      	mov	r0, r1
 800d952:	602b      	str	r3, [r5, #0]
 800d954:	f7f5 ff58 	bl	8003808 <_sbrk>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_sbrk_r+0x1a>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_sbrk_r+0x1a>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	20001410 	.word	0x20001410

0800d968 <abort>:
 800d968:	b508      	push	{r3, lr}
 800d96a:	2006      	movs	r0, #6
 800d96c:	f000 f8bc 	bl	800dae8 <raise>
 800d970:	2001      	movs	r0, #1
 800d972:	f7f5 fed0 	bl	8003716 <_exit>

0800d976 <_realloc_r>:
 800d976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d97a:	4607      	mov	r7, r0
 800d97c:	4614      	mov	r4, r2
 800d97e:	460d      	mov	r5, r1
 800d980:	b921      	cbnz	r1, 800d98c <_realloc_r+0x16>
 800d982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d986:	4611      	mov	r1, r2
 800d988:	f7ff b9c0 	b.w	800cd0c <_malloc_r>
 800d98c:	b92a      	cbnz	r2, 800d99a <_realloc_r+0x24>
 800d98e:	f7ff f949 	bl	800cc24 <_free_r>
 800d992:	4625      	mov	r5, r4
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99a:	f000 f8e3 	bl	800db64 <_malloc_usable_size_r>
 800d99e:	4284      	cmp	r4, r0
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	d802      	bhi.n	800d9aa <_realloc_r+0x34>
 800d9a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9a8:	d8f4      	bhi.n	800d994 <_realloc_r+0x1e>
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f7ff f9ad 	bl	800cd0c <_malloc_r>
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	b908      	cbnz	r0, 800d9ba <_realloc_r+0x44>
 800d9b6:	4645      	mov	r5, r8
 800d9b8:	e7ec      	b.n	800d994 <_realloc_r+0x1e>
 800d9ba:	42b4      	cmp	r4, r6
 800d9bc:	4622      	mov	r2, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	bf28      	it	cs
 800d9c2:	4632      	movcs	r2, r6
 800d9c4:	f7ff f901 	bl	800cbca <memcpy>
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	f7ff f92a 	bl	800cc24 <_free_r>
 800d9d0:	e7f1      	b.n	800d9b6 <_realloc_r+0x40>

0800d9d2 <__swhatbuf_r>:
 800d9d2:	b570      	push	{r4, r5, r6, lr}
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	b096      	sub	sp, #88	@ 0x58
 800d9de:	4615      	mov	r5, r2
 800d9e0:	461e      	mov	r6, r3
 800d9e2:	da0d      	bge.n	800da00 <__swhatbuf_r+0x2e>
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9ea:	f04f 0100 	mov.w	r1, #0
 800d9ee:	bf14      	ite	ne
 800d9f0:	2340      	movne	r3, #64	@ 0x40
 800d9f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	6031      	str	r1, [r6, #0]
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	b016      	add	sp, #88	@ 0x58
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	466a      	mov	r2, sp
 800da02:	f000 f879 	bl	800daf8 <_fstat_r>
 800da06:	2800      	cmp	r0, #0
 800da08:	dbec      	blt.n	800d9e4 <__swhatbuf_r+0x12>
 800da0a:	9901      	ldr	r1, [sp, #4]
 800da0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da14:	4259      	negs	r1, r3
 800da16:	4159      	adcs	r1, r3
 800da18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da1c:	e7eb      	b.n	800d9f6 <__swhatbuf_r+0x24>

0800da1e <__smakebuf_r>:
 800da1e:	898b      	ldrh	r3, [r1, #12]
 800da20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da22:	079d      	lsls	r5, r3, #30
 800da24:	4606      	mov	r6, r0
 800da26:	460c      	mov	r4, r1
 800da28:	d507      	bpl.n	800da3a <__smakebuf_r+0x1c>
 800da2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	2301      	movs	r3, #1
 800da34:	6163      	str	r3, [r4, #20]
 800da36:	b003      	add	sp, #12
 800da38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da3a:	ab01      	add	r3, sp, #4
 800da3c:	466a      	mov	r2, sp
 800da3e:	f7ff ffc8 	bl	800d9d2 <__swhatbuf_r>
 800da42:	9f00      	ldr	r7, [sp, #0]
 800da44:	4605      	mov	r5, r0
 800da46:	4639      	mov	r1, r7
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff f95f 	bl	800cd0c <_malloc_r>
 800da4e:	b948      	cbnz	r0, 800da64 <__smakebuf_r+0x46>
 800da50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da54:	059a      	lsls	r2, r3, #22
 800da56:	d4ee      	bmi.n	800da36 <__smakebuf_r+0x18>
 800da58:	f023 0303 	bic.w	r3, r3, #3
 800da5c:	f043 0302 	orr.w	r3, r3, #2
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	e7e2      	b.n	800da2a <__smakebuf_r+0xc>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	6020      	str	r0, [r4, #0]
 800da68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da6c:	81a3      	strh	r3, [r4, #12]
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da74:	b15b      	cbz	r3, 800da8e <__smakebuf_r+0x70>
 800da76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da7a:	4630      	mov	r0, r6
 800da7c:	f000 f84e 	bl	800db1c <_isatty_r>
 800da80:	b128      	cbz	r0, 800da8e <__smakebuf_r+0x70>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	f023 0303 	bic.w	r3, r3, #3
 800da88:	f043 0301 	orr.w	r3, r3, #1
 800da8c:	81a3      	strh	r3, [r4, #12]
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	431d      	orrs	r5, r3
 800da92:	81a5      	strh	r5, [r4, #12]
 800da94:	e7cf      	b.n	800da36 <__smakebuf_r+0x18>

0800da96 <_raise_r>:
 800da96:	291f      	cmp	r1, #31
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4605      	mov	r5, r0
 800da9c:	460c      	mov	r4, r1
 800da9e:	d904      	bls.n	800daaa <_raise_r+0x14>
 800daa0:	2316      	movs	r3, #22
 800daa2:	6003      	str	r3, [r0, #0]
 800daa4:	f04f 30ff 	mov.w	r0, #4294967295
 800daa8:	bd38      	pop	{r3, r4, r5, pc}
 800daaa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800daac:	b112      	cbz	r2, 800dab4 <_raise_r+0x1e>
 800daae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dab2:	b94b      	cbnz	r3, 800dac8 <_raise_r+0x32>
 800dab4:	4628      	mov	r0, r5
 800dab6:	f000 f853 	bl	800db60 <_getpid_r>
 800daba:	4622      	mov	r2, r4
 800dabc:	4601      	mov	r1, r0
 800dabe:	4628      	mov	r0, r5
 800dac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dac4:	f000 b83a 	b.w	800db3c <_kill_r>
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d00a      	beq.n	800dae2 <_raise_r+0x4c>
 800dacc:	1c59      	adds	r1, r3, #1
 800dace:	d103      	bne.n	800dad8 <_raise_r+0x42>
 800dad0:	2316      	movs	r3, #22
 800dad2:	6003      	str	r3, [r0, #0]
 800dad4:	2001      	movs	r0, #1
 800dad6:	e7e7      	b.n	800daa8 <_raise_r+0x12>
 800dad8:	2100      	movs	r1, #0
 800dada:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dade:	4620      	mov	r0, r4
 800dae0:	4798      	blx	r3
 800dae2:	2000      	movs	r0, #0
 800dae4:	e7e0      	b.n	800daa8 <_raise_r+0x12>
	...

0800dae8 <raise>:
 800dae8:	4b02      	ldr	r3, [pc, #8]	@ (800daf4 <raise+0xc>)
 800daea:	4601      	mov	r1, r0
 800daec:	6818      	ldr	r0, [r3, #0]
 800daee:	f7ff bfd2 	b.w	800da96 <_raise_r>
 800daf2:	bf00      	nop
 800daf4:	20000150 	.word	0x20000150

0800daf8 <_fstat_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d07      	ldr	r5, [pc, #28]	@ (800db18 <_fstat_r+0x20>)
 800dafc:	2300      	movs	r3, #0
 800dafe:	4604      	mov	r4, r0
 800db00:	4608      	mov	r0, r1
 800db02:	4611      	mov	r1, r2
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	f7f5 fe56 	bl	80037b6 <_fstat>
 800db0a:	1c43      	adds	r3, r0, #1
 800db0c:	d102      	bne.n	800db14 <_fstat_r+0x1c>
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	b103      	cbz	r3, 800db14 <_fstat_r+0x1c>
 800db12:	6023      	str	r3, [r4, #0]
 800db14:	bd38      	pop	{r3, r4, r5, pc}
 800db16:	bf00      	nop
 800db18:	20001410 	.word	0x20001410

0800db1c <_isatty_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d06      	ldr	r5, [pc, #24]	@ (800db38 <_isatty_r+0x1c>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	602b      	str	r3, [r5, #0]
 800db28:	f7f5 fe55 	bl	80037d6 <_isatty>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_isatty_r+0x1a>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_isatty_r+0x1a>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	20001410 	.word	0x20001410

0800db3c <_kill_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d07      	ldr	r5, [pc, #28]	@ (800db5c <_kill_r+0x20>)
 800db40:	2300      	movs	r3, #0
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	602b      	str	r3, [r5, #0]
 800db4a:	f7f5 fdd4 	bl	80036f6 <_kill>
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	d102      	bne.n	800db58 <_kill_r+0x1c>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	b103      	cbz	r3, 800db58 <_kill_r+0x1c>
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	bd38      	pop	{r3, r4, r5, pc}
 800db5a:	bf00      	nop
 800db5c:	20001410 	.word	0x20001410

0800db60 <_getpid_r>:
 800db60:	f7f5 bdc1 	b.w	80036e6 <_getpid>

0800db64 <_malloc_usable_size_r>:
 800db64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db68:	1f18      	subs	r0, r3, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bfbc      	itt	lt
 800db6e:	580b      	ldrlt	r3, [r1, r0]
 800db70:	18c0      	addlt	r0, r0, r3
 800db72:	4770      	bx	lr

0800db74 <_init>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	bf00      	nop
 800db78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db7a:	bc08      	pop	{r3}
 800db7c:	469e      	mov	lr, r3
 800db7e:	4770      	bx	lr

0800db80 <_fini>:
 800db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db82:	bf00      	nop
 800db84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db86:	bc08      	pop	{r3}
 800db88:	469e      	mov	lr, r3
 800db8a:	4770      	bx	lr
