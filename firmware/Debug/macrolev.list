
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000e0d0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b98c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000094c  0800bb2c  0800bb2c  0000cb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c478  0800c478  0000e0d0  2**0
                  CONTENTS
  5 .ARM          00000008  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c480  0800c480  0000e0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c480  0800c480  0000d480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d0  20000000  0800c488  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000012c8  200000d0  0800c558  0000e0d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001398  0800c558  0000e398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d209  00000000  00000000  0000e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f7c  00000000  00000000  0002b309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f309  00000000  00000000  000317f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d421  00000000  00000000  00050af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b700e  00000000  00000000  0006df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124f28  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000010e4  00000000  00000000  00124f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005da4  00000000  00000000  00126050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0012bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb14 	.word	0x0800bb14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800bb14 	.word	0x0800bb14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <hid_init>:
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

CFG_TUSB_MEM_SECTION CFG_TUSB_MEM_ALIGN static uint8_t usb_vendor_control_buffer[400];

void hid_init() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 80005c6:	2301      	movs	r3, #1
 80005c8:	713b      	strb	r3, [r7, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fcfd 	bl	8006fd4 <tud_rhport_init>
  tud_init(BOARD_TUD_RHPORT);
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <hid_task>:

void hid_task() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80005ea:	2100      	movs	r1, #0
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f006 fe2c 	bl	800724c <tud_task_ext>
}
 80005f4:	bf00      	nop
  tud_task();

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <hid_task+0x98>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <hid_task+0x22>
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <hid_task+0x9c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d035      	beq.n	8000672 <hid_task+0x8e>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f004 ff14 	bl	8005434 <tud_hid_n_ready>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d02f      	beq.n	8000672 <hid_task+0x8e>
    if (tud_suspended()) {
 8000612:	f006 fc95 	bl	8006f40 <tud_suspended>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <hid_task+0x3e>
      tud_remote_wakeup();
 800061c:	f006 fca4 	bl	8006f68 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000620:	e027      	b.n	8000672 <hid_task+0x8e>
      if (should_send_consumer_report) {
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <hid_task+0x98>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00f      	beq.n	800064a <hid_task+0x66>
        should_send_consumer_report = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <hid_task+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <hid_task+0xa0>)
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	2302      	movs	r3, #2
 800063a:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	7bf9      	ldrb	r1, [r7, #15]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	2000      	movs	r0, #0
 8000644:	f004 ff38 	bl	80054b8 <tud_hid_n_report>
 8000648:	e013      	b.n	8000672 <hid_task+0x8e>
      } else if (should_send_keyboard_report) {
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <hid_task+0x9c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00f      	beq.n	8000672 <hid_task+0x8e>
        should_send_keyboard_report = 0;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <hid_task+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <hid_task+0xa4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2201      	movs	r2, #1
 800065e:	717a      	strb	r2, [r7, #5]
 8000660:	713b      	strb	r3, [r7, #4]
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <hid_task+0xa8>)
 8000664:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000666:	793a      	ldrb	r2, [r7, #4]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2000      	movs	r0, #0
 800066e:	f004 ffa9 	bl	80055c4 <tud_hid_n_keyboard_report>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ec 	.word	0x200000ec
 8000680:	200000ed 	.word	0x200000ed
 8000684:	200000f6 	.word	0x200000f6
 8000688:	200000ee 	.word	0x200000ee
 800068c:	200000f0 	.word	0x200000f0

08000690 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 800069c:	78fa      	ldrb	r2, [r7, #3]
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	3305      	adds	r3, #5
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d038      	beq.n	8000722 <hid_press_key+0x92>
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	dc45      	bgt.n	8000740 <hid_press_key+0xb0>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d014      	beq.n	80006e2 <hid_press_key+0x52>
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d141      	bne.n	8000740 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 80006bc:	78fa      	ldrb	r2, [r7, #3]
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	88db      	ldrh	r3, [r3, #6]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <hid_press_key+0xc0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <hid_press_key+0xc0>)
 80006d8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <hid_press_key+0xc4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
    break;
 80006e0:	e02f      	b.n	8000742 <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e018      	b.n	800071a <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <hid_press_key+0xc8>)
 80006ec:	5cd3      	ldrb	r3, [r2, r3]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d110      	bne.n	8000714 <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 80006f2:	78fa      	ldrb	r2, [r7, #3]
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	88db      	ldrh	r3, [r3, #6]
 8000700:	b29a      	uxth	r2, r3
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	b2d1      	uxtb	r1, r2
 8000706:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <hid_press_key+0xc8>)
 8000708:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <hid_press_key+0xc4>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
        break;
 8000710:	bf00      	nop
      }
    }
    break;
 8000712:	e016      	b.n	8000742 <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b05      	cmp	r3, #5
 800071e:	d9e3      	bls.n	80006e8 <hid_press_key+0x58>
    break;
 8000720:	e00f      	b.n	8000742 <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	440b      	add	r3, r1
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <hid_press_key+0xcc>)
 8000736:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <hid_press_key+0xd0>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
    break;
 800073e:	e000      	b.n	8000742 <hid_press_key+0xb2>

  default:
    break;
 8000740:	bf00      	nop
  }
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000ee 	.word	0x200000ee
 8000754:	200000ed 	.word	0x200000ed
 8000758:	200000f0 	.word	0x200000f0
 800075c:	200000f6 	.word	0x200000f6
 8000760:	200000ec 	.word	0x200000ec

08000764 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	440b      	add	r3, r1
 800077c:	3305      	adds	r3, #5
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d03d      	beq.n	8000800 <hid_release_key+0x9c>
 8000784:	2b03      	cmp	r3, #3
 8000786:	dc42      	bgt.n	800080e <hid_release_key+0xaa>
 8000788:	2b01      	cmp	r3, #1
 800078a:	d018      	beq.n	80007be <hid_release_key+0x5a>
 800078c:	2b02      	cmp	r3, #2
 800078e:	d13e      	bne.n	800080e <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	440b      	add	r3, r1
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <hid_release_key+0xb8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <hid_release_key+0xb8>)
 80007b4:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <hid_release_key+0xbc>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
    break;
 80007bc:	e028      	b.n	8000810 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e019      	b.n	80007f8 <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <hid_release_key+0xc0>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	4618      	mov	r0, r3
 80007cc:	78fa      	ldrb	r2, [r7, #3]
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	88db      	ldrh	r3, [r3, #6]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4298      	cmp	r0, r3
 80007de:	d108      	bne.n	80007f2 <hid_release_key+0x8e>
        keycodes[i] = 0;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <hid_release_key+0xc0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <hid_release_key+0xbc>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
        break;
 80007ee:	bf00      	nop
      }
    }
    break;
 80007f0:	e00e      	b.n	8000810 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d9e2      	bls.n	80007c4 <hid_release_key+0x60>
    break;
 80007fe:	e007      	b.n	8000810 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <hid_release_key+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <hid_release_key+0xc8>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    break;
 800080c:	e000      	b.n	8000810 <hid_release_key+0xac>

  default:
    break;
 800080e:	bf00      	nop
  }
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200000ee 	.word	0x200000ee
 8000820:	200000ed 	.word	0x200000ed
 8000824:	200000f0 	.word	0x200000f0
 8000828:	200000f6 	.word	0x200000f6
 800082c:	200000ec 	.word	0x200000ec

08000830 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)report;
  (void)len;
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	460b      	mov	r3, r1
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	717b      	strb	r3, [r7, #5]
  (void)report_id;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	460b      	mov	r3, r1
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]
  // if (instance == 1 && report_id == 0) {
  //   keyboard_write_config(buffer, bufsize);

  //   keyboard_init_keys();
  // }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <tud_vendor_control_xfer_cb>:
// }

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	603a      	str	r2, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	460b      	mov	r3, r1
 80008ba:	71bb      	strb	r3, [r7, #6]
  switch (request->bmRequestType_bit.type) {
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f000 811b 	beq.w	8000b02 <tud_vendor_control_xfer_cb+0x256>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	f040 8128 	bne.w	8000b22 <tud_vendor_control_xfer_cb+0x276>
  case TUSB_REQ_TYPE_VENDOR: {
    switch (request->bRequest) {
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	2bff      	cmp	r3, #255	@ 0xff
 80008d8:	f300 810a 	bgt.w	8000af0 <tud_vendor_control_xfer_cb+0x244>
 80008dc:	2bfb      	cmp	r3, #251	@ 0xfb
 80008de:	da06      	bge.n	80008ee <tud_vendor_control_xfer_cb+0x42>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	f000 80e5 	beq.w	8000ab0 <tud_vendor_control_xfer_cb+0x204>
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	f000 80ec 	beq.w	8000ac4 <tud_vendor_control_xfer_cb+0x218>

      break;
    }

    default:
      break;
 80008ec:	e100      	b.n	8000af0 <tud_vendor_control_xfer_cb+0x244>
    switch (request->bRequest) {
 80008ee:	3bfb      	subs	r3, #251	@ 0xfb
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	f200 80fd 	bhi.w	8000af0 <tud_vendor_control_xfer_cb+0x244>
 80008f6:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <tud_vendor_control_xfer_cb+0x50>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000a61 	.word	0x08000a61
 8000900:	080009f1 	.word	0x080009f1
 8000904:	080009b5 	.word	0x080009b5
 8000908:	08000a0f 	.word	0x08000a0f
 800090c:	08000911 	.word	0x08000911
      switch (request->wValue) {
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	b29b      	uxth	r3, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d023      	beq.n	8000962 <tud_vendor_control_xfer_cb+0xb6>
 800091a:	2b02      	cmp	r3, #2
 800091c:	dc43      	bgt.n	80009a6 <tud_vendor_control_xfer_cb+0xfa>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <tud_vendor_control_xfer_cb+0x7c>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d010      	beq.n	8000948 <tud_vendor_control_xfer_cb+0x9c>
        break;
 8000926:	e03e      	b.n	80009a6 <tud_vendor_control_xfer_cb+0xfa>
        if (stage == CONTROL_STAGE_SETUP) {
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d13d      	bne.n	80009aa <tud_vendor_control_xfer_cb+0xfe>
          uint16_t size = sizeof(keyboard_user_config);
 800092e:	2348      	movs	r3, #72	@ 0x48
 8000930:	81fb      	strh	r3, [r7, #14]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	88db      	ldrh	r3, [r3, #6]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f107 020e 	add.w	r2, r7, #14
 800093c:	79f8      	ldrb	r0, [r7, #7]
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	f008 f838 	bl	80089b4 <tud_control_xfer>
 8000944:	4603      	mov	r3, r0
 8000946:	e0f5      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d12f      	bne.n	80009ae <tud_vendor_control_xfer_cb+0x102>
          return tud_control_xfer(rhport, request, &keyboard_user_config, request->wLength);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	b29b      	uxth	r3, r3
 8000954:	79f8      	ldrb	r0, [r7, #7]
 8000956:	4a79      	ldr	r2, [pc, #484]	@ (8000b3c <tud_vendor_control_xfer_cb+0x290>)
 8000958:	6839      	ldr	r1, [r7, #0]
 800095a:	f008 f82b 	bl	80089b4 <tud_control_xfer>
 800095e:	4603      	mov	r3, r0
 8000960:	e0e8      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d109      	bne.n	800097c <tud_vendor_control_xfer_cb+0xd0>
          return tud_control_xfer(rhport, request, usb_vendor_control_buffer, request->wLength);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	b29b      	uxth	r3, r3
 800096e:	79f8      	ldrb	r0, [r7, #7]
 8000970:	4a73      	ldr	r2, [pc, #460]	@ (8000b40 <tud_vendor_control_xfer_cb+0x294>)
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	f008 f81e 	bl	80089b4 <tud_control_xfer>
 8000978:	4603      	mov	r3, r0
 800097a:	e0db      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        } else if (stage == CONTROL_STAGE_DATA) {
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d117      	bne.n	80009b2 <tud_vendor_control_xfer_cb+0x106>
          if (!keyboard_write_config(&usb_vendor_control_buffer, 0, request->wLength)) {
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	88db      	ldrh	r3, [r3, #6]
 8000986:	b29b      	uxth	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	486c      	ldr	r0, [pc, #432]	@ (8000b40 <tud_vendor_control_xfer_cb+0x294>)
 800098e:	f001 f8cb 	bl	8001b28 <keyboard_write_config>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <tud_vendor_control_xfer_cb+0xf0>
            return false;
 8000998:	2300      	movs	r3, #0
 800099a:	e0cb      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 800099c:	f001 f8b4 	bl	8001b08 <keyboard_read_config>
          keyboard_init_keys();
 80009a0:	f000 fc48 	bl	8001234 <keyboard_init_keys>
        break;
 80009a4:	e005      	b.n	80009b2 <tud_vendor_control_xfer_cb+0x106>
        break;
 80009a6:	bf00      	nop
 80009a8:	e004      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009aa:	bf00      	nop
 80009ac:	e002      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009ae:	bf00      	nop
 80009b0:	e000      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009b2:	bf00      	nop
      if (request->wValue == VENDOR_VALUE_SET) {
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d118      	bne.n	80009f0 <tud_vendor_control_xfer_cb+0x144>
        if (stage == CONTROL_STAGE_SETUP) {
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f040 8097 	bne.w	8000af4 <tud_vendor_control_xfer_cb+0x248>
          if (!keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config)) {
 80009c6:	2248      	movs	r2, #72	@ 0x48
 80009c8:	2100      	movs	r1, #0
 80009ca:	485e      	ldr	r0, [pc, #376]	@ (8000b44 <tud_vendor_control_xfer_cb+0x298>)
 80009cc:	f001 f8ac 	bl	8001b28 <keyboard_write_config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <tud_vendor_control_xfer_cb+0x12e>
            return false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e0ac      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 80009da:	f001 f895 	bl	8001b08 <keyboard_read_config>
          keyboard_init_keys();
 80009de:	f000 fc29 	bl	8001234 <keyboard_init_keys>
          return tud_control_status(rhport, request);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f007 ff72 	bl	80088d0 <tud_control_status>
 80009ec:	4603      	mov	r3, r0
 80009ee:	e0a1      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      if (request->wValue == VENDOR_VALUE_SET) {
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	885b      	ldrh	r3, [r3, #2]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d109      	bne.n	8000a0e <tud_vendor_control_xfer_cb+0x162>
        if (stage == CONTROL_STAGE_SETUP) {
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d17b      	bne.n	8000af8 <tud_vendor_control_xfer_cb+0x24c>
          return tud_control_status(rhport, request);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	6839      	ldr	r1, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 ff63 	bl	80088d0 <tud_control_status>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e092      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      switch (request->wValue) {
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	885b      	ldrh	r3, [r3, #2]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <tud_vendor_control_xfer_cb+0x172>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d011      	beq.n	8000a40 <tud_vendor_control_xfer_cb+0x194>
        break;
 8000a1c:	e020      	b.n	8000a60 <tud_vendor_control_xfer_cb+0x1b4>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d11a      	bne.n	8000a5a <tud_vendor_control_xfer_cb+0x1ae>
          uint16_t size = sizeof(keyboard_keys);
 8000a24:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000a28:	81bb      	strh	r3, [r7, #12]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	79f8      	ldrb	r0, [r7, #7]
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	f007 ffbc 	bl	80089b4 <tud_control_xfer>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	e079      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10b      	bne.n	8000a5e <tud_vendor_control_xfer_cb+0x1b2>
          return tud_control_xfer(rhport, request, &keyboard_keys, request->wLength);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	88db      	ldrh	r3, [r3, #6]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	79f8      	ldrb	r0, [r7, #7]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b48 <tud_vendor_control_xfer_cb+0x29c>)
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	f007 ffaf 	bl	80089b4 <tud_control_xfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	e06c      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        break;
 8000a5a:	bf00      	nop
 8000a5c:	e000      	b.n	8000a60 <tud_vendor_control_xfer_cb+0x1b4>
        break;
 8000a5e:	bf00      	nop
      switch (request->wValue) {
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <tud_vendor_control_xfer_cb+0x1c4>
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d010      	beq.n	8000a90 <tud_vendor_control_xfer_cb+0x1e4>
        break;
 8000a6e:	e01f      	b.n	8000ab0 <tud_vendor_control_xfer_cb+0x204>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d119      	bne.n	8000aaa <tud_vendor_control_xfer_cb+0x1fe>
          uint16_t size = sizeof(keyboard_last_cycle_duration);
 8000a76:	2304      	movs	r3, #4
 8000a78:	817b      	strh	r3, [r7, #10]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	88db      	ldrh	r3, [r3, #6]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f107 020a 	add.w	r2, r7, #10
 8000a84:	79f8      	ldrb	r0, [r7, #7]
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	f007 ff94 	bl	80089b4 <tud_control_xfer>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	e051      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d10b      	bne.n	8000aae <tud_vendor_control_xfer_cb+0x202>
          return tud_control_xfer(rhport, request, &keyboard_last_cycle_duration, request->wLength);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	88db      	ldrh	r3, [r3, #6]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	79f8      	ldrb	r0, [r7, #7]
 8000a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <tud_vendor_control_xfer_cb+0x2a0>)
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	f007 ff87 	bl	80089b4 <tud_control_xfer>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e044      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        break;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <tud_vendor_control_xfer_cb+0x204>
        break;
 8000aae:	bf00      	nop
      if (stage == CONTROL_STAGE_SETUP) {
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d122      	bne.n	8000afc <tud_vendor_control_xfer_cb+0x250>
        return tud_control_status(rhport, request);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 ff08 	bl	80088d0 <tud_control_status>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	e037      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      if (stage == CONTROL_STAGE_SETUP) {
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d11a      	bne.n	8000b00 <tud_vendor_control_xfer_cb+0x254>
        if (request->wIndex == 7) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d10b      	bne.n	8000aec <tud_vendor_control_xfer_cb+0x240>
          memcpy(&total_len, desc_ms_os_20 + 8, 2);
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <tud_vendor_control_xfer_cb+0x2a4>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	813b      	strh	r3, [r7, #8]
          return tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_ms_os_20, total_len);
 8000adc:	893b      	ldrh	r3, [r7, #8]
 8000ade:	79f8      	ldrb	r0, [r7, #7]
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <tud_vendor_control_xfer_cb+0x2a8>)
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	f007 ff66 	bl	80089b4 <tud_control_xfer>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	e023      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        return false;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e021      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      break;
 8000af0:	bf00      	nop
 8000af2:	e006      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
        break;
 8000af4:	bf00      	nop
 8000af6:	e004      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
        break;
 8000af8:	bf00      	nop
 8000afa:	e002      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
      break;
 8000afc:	bf00      	nop
 8000afe:	e000      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
      break;
 8000b00:	bf00      	nop
    }
  }

  case TUSB_REQ_TYPE_CLASS: {
    if (stage == CONTROL_STAGE_SETUP) {
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10e      	bne.n	8000b26 <tud_vendor_control_xfer_cb+0x27a>
      if (request->bRequest == 0x22) {
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b22      	cmp	r3, #34	@ 0x22
 8000b0e:	d106      	bne.n	8000b1e <tud_vendor_control_xfer_cb+0x272>
        // response with status OK
        return tud_control_status(rhport, request);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fedb 	bl	80088d0 <tud_control_status>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e00a      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      }

      return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e008      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>

    break;
  }

  default:
    break;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <tud_vendor_control_xfer_cb+0x27c>
    break;
 8000b26:	bf00      	nop
  }

  if (stage != CONTROL_STAGE_SETUP) {
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d001      	beq.n	8000b32 <tud_vendor_control_xfer_cb+0x286>
    return true;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
  }
  return false;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200000f8 	.word	0x200000f8
 8000b44:	0800bbb8 	.word	0x0800bbb8
 8000b48:	20000288 	.word	0x20000288
 8000b4c:	200004f8 	.word	0x200004f8
 8000b50:	0800c334 	.word	0x0800c334
 8000b54:	0800c32c 	.word	0x0800c32c

08000b58 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	3be0      	subs	r3, #224	@ 0xe0
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d822      	bhi.n	8000bb0 <get_bitmask_for_modifier+0x58>
 8000b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <get_bitmask_for_modifier+0x18>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000b95 	.word	0x08000b95
 8000b78:	08000b99 	.word	0x08000b99
 8000b7c:	08000b9d 	.word	0x08000b9d
 8000b80:	08000ba1 	.word	0x08000ba1
 8000b84:	08000ba5 	.word	0x08000ba5
 8000b88:	08000ba9 	.word	0x08000ba9
 8000b8c:	08000bad 	.word	0x08000bad
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e00e      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e00c      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e00a      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	e008      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	e006      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	e004      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	e002      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	e000      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8000bb0:	2300      	movs	r3, #0
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2bff      	cmp	r3, #255	@ 0xff
 8000bce:	d904      	bls.n	8000bda <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	e000      	b.n	8000bdc <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8000bda:	2300      	movs	r3, #0
  }
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	717b      	strb	r3, [r7, #5]
 8000c02:	4613      	mov	r3, r2
 8000c04:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8000c06:	79f9      	ldrb	r1, [r7, #7]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a61      	ldr	r2, [pc, #388]	@ (8000da4 <init_key+0x1bc>)
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	797a      	ldrb	r2, [r7, #5]
 8000c34:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	793a      	ldrb	r2, [r7, #4]
 8000c3a:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	72da      	strb	r2, [r3, #11]
 8000c42:	2200      	movs	r2, #0
 8000c44:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f042 0208 	orr.w	r2, r2, #8
 8000c4e:	735a      	strb	r2, [r3, #13]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f042 0207 	orr.w	r2, r2, #7
 8000c56:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f062 020b 	orn	r2, r2, #11
 8000c60:	73da      	strb	r2, [r3, #15]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f042 0201 	orr.w	r2, r2, #1
 8000c68:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8000c70:	4b4d      	ldr	r3, [pc, #308]	@ (8000da8 <init_key+0x1c0>)
 8000c72:	785a      	ldrb	r2, [r3, #1]
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000da8 <init_key+0x1c0>)
 8000c7c:	785a      	ldrb	r2, [r3, #1]
 8000c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000da8 <init_key+0x1c0>)
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	@ (8000da8 <init_key+0x1c0>)
 8000c8c:	78da      	ldrb	r2, [r3, #3]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
 8000ca0:	e078      	b.n	8000d94 <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 8000ca2:	7df9      	ldrb	r1, [r7, #23]
 8000ca4:	797a      	ldrb	r2, [r7, #5]
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	483f      	ldr	r0, [pc, #252]	@ (8000da8 <init_key+0x1c0>)
 8000caa:	0089      	lsls	r1, r1, #2
 8000cac:	440a      	add	r2, r1
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d068      	beq.n	8000d8e <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000cbc:	7df9      	ldrb	r1, [r7, #23]
 8000cbe:	797a      	ldrb	r2, [r7, #5]
 8000cc0:	793b      	ldrb	r3, [r7, #4]
 8000cc2:	4839      	ldr	r0, [pc, #228]	@ (8000da8 <init_key+0x1c0>)
 8000cc4:	0089      	lsls	r1, r1, #2
 8000cc6:	440a      	add	r2, r1
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	3304      	adds	r3, #4
 8000cce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff74 	bl	8000bc0 <get_usage_consumer_control>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d011      	beq.n	8000d06 <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	3305      	adds	r3, #5
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 8000cf4:	7dfa      	ldrb	r2, [r7, #23]
 8000cf6:	6939      	ldr	r1, [r7, #16]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	89fa      	ldrh	r2, [r7, #14]
 8000d02:	80da      	strh	r2, [r3, #6]
 8000d04:	e043      	b.n	8000d8e <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 8000d06:	7df9      	ldrb	r1, [r7, #23]
 8000d08:	797a      	ldrb	r2, [r7, #5]
 8000d0a:	793b      	ldrb	r3, [r7, #4]
 8000d0c:	4826      	ldr	r0, [pc, #152]	@ (8000da8 <init_key+0x1c0>)
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	440a      	add	r2, r1
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3304      	adds	r3, #4
 8000d18:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff1a 	bl	8000b58 <get_bitmask_for_modifier>
 8000d24:	4603      	mov	r3, r0
 8000d26:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d013      	beq.n	8000d56 <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 8000d2e:	7dfa      	ldrb	r2, [r7, #23]
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3305      	adds	r3, #5
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 8000d40:	7dfa      	ldrb	r2, [r7, #23]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	b298      	uxth	r0, r3
 8000d46:	6939      	ldr	r1, [r7, #16]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	4602      	mov	r2, r0
 8000d52:	80da      	strh	r2, [r3, #6]
 8000d54:	e01b      	b.n	8000d8e <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 8000d56:	7dfa      	ldrb	r2, [r7, #23]
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	3305      	adds	r3, #5
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000d68:	7df8      	ldrb	r0, [r7, #23]
 8000d6a:	7979      	ldrb	r1, [r7, #5]
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	7dfa      	ldrb	r2, [r7, #23]
 8000d70:	4c0d      	ldr	r4, [pc, #52]	@ (8000da8 <init_key+0x1c0>)
 8000d72:	0080      	lsls	r0, r0, #2
 8000d74:	4401      	add	r1, r0
 8000d76:	0089      	lsls	r1, r1, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	3301      	adds	r3, #1
 8000d92:	75fb      	strb	r3, [r7, #23]
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d983      	bls.n	8000ca2 <init_key+0xba>
        }
      }
    }
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	20000288 	.word	0x20000288
 8000da8:	20000000 	.word	0x20000000

08000dac <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000db4:	4ba5      	ldr	r3, [pc, #660]	@ (800104c <update_key_state+0x2a0>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <update_key_state+0x20>
 8000dbc:	f000 ff3a 	bl	8001c34 <keyboard_read_adc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000dc6:	330f      	adds	r3, #15
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	e002      	b.n	8000dd2 <update_key_state+0x26>
 8000dcc:	f000 ff32 	bl	8001c34 <keyboard_read_adc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b13      	cmp	r3, #19
 8000dde:	d82f      	bhi.n	8000e40 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000de0:	4b9b      	ldr	r3, [pc, #620]	@ (8001050 <update_key_state+0x2a4>)
 8000de2:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df0:	893b      	ldrh	r3, [r7, #8]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1e:	ee17 3a90 	vmov	r3, s15
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e101      	b.n	8001044 <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000e40:	893a      	ldrh	r2, [r7, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d929      	bls.n	8000ea2 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000e4e:	4b81      	ldr	r3, [pc, #516]	@ (8001054 <update_key_state+0x2a8>)
 8000e50:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e5e:	893b      	ldrh	r3, [r7, #8]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d117      	bne.n	8000ede <update_key_state+0x132>
 8000eae:	893b      	ldrh	r3, [r7, #8]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3b0a      	subs	r3, #10
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	db0e      	blt.n	8000ede <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	2b0e      	cmp	r3, #14
 8000ec6:	d904      	bls.n	8000ed2 <update_key_state+0x126>
      key->is_idle = 1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	711a      	strb	r2, [r3, #4]
      return 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e0b8      	b.n	8001044 <update_key_state+0x298>
    }
    key->idle_counter++;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	78db      	ldrb	r3, [r3, #3]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000ede:	893b      	ldrh	r3, [r7, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b0a      	subs	r3, #10
 8000eec:	429a      	cmp	r2, r3
 8000eee:	db05      	blt.n	8000efc <update_key_state+0x150>
    state.distance = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	775a      	strb	r2, [r3, #29]
 8000efa:	e00f      	b.n	8000f1c <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b0a      	subs	r3, #10
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d903      	bls.n	8000f32 <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000f2a:	897a      	ldrh	r2, [r7, #10]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b3c      	subs	r3, #60	@ 0x3c
 8000f40:	429a      	cmp	r2, r3
 8000f42:	db04      	blt.n	8000f4e <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000f4e:	897b      	ldrh	r3, [r7, #10]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <update_key_state+0x2a8>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000f6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f90:	ee06 3a90 	vmov	s13, r3
 8000f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000fa4:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb0:	edc7 7a00 	vstr	s15, [r7]
 8000fb4:	783b      	ldrb	r3, [r7, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000fba:	7cba      	ldrb	r2, [r7, #18]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7edb      	ldrb	r3, [r3, #27]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd13      	ble.n	8000ffa <update_key_state+0x24e>
 8000fd2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dd0f      	ble.n	8000ffa <update_key_state+0x24e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7f1b      	ldrb	r3, [r3, #28]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d00b      	beq.n	8000ffa <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7f5b      	ldrb	r3, [r3, #29]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01c      	beq.n	800102a <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7eda      	ldrb	r2, [r3, #27]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000ff8:	e017      	b.n	800102a <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da12      	bge.n	800102a <update_key_state+0x27e>
 8001004:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001008:	2b00      	cmp	r3, #0
 800100a:	da0e      	bge.n	800102a <update_key_state+0x27e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7f5b      	ldrb	r3, [r3, #29]
 800101e:	2bff      	cmp	r3, #255	@ 0xff
 8001020:	d003      	beq.n	800102a <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7eda      	ldrb	r2, [r3, #27]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 0211 	add.w	r2, r3, #17
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	cb03      	ldmia	r3!, {r0, r1}
 8001036:	6010      	str	r0, [r2, #0]
 8001038:	6051      	str	r1, [r2, #4]
 800103a:	8819      	ldrh	r1, [r3, #0]
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	8111      	strh	r1, [r2, #8]
 8001040:	7293      	strb	r3, [r2, #10]
  return 1;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	3f19999a 	.word	0x3f19999a
 8001054:	3f4ccccd 	.word	0x3f4ccccd

08001058 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001060:	f000 fdfe 	bl	8001c60 <keyboard_get_time>
 8001064:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7d5a      	ldrb	r2, [r3, #21]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	bf8c      	ite	hi
 8001074:	2301      	movhi	r3, #1
 8001076:	2300      	movls	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7d5a      	ldrb	r2, [r3, #21]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7fdb      	ldrb	r3, [r3, #31]
 8001084:	429a      	cmp	r2, r3
 8001086:	bf34      	ite	cc
 8001088:	2301      	movcc	r3, #1
 800108a:	2300      	movcs	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7d5b      	ldrb	r3, [r3, #21]
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7f5b      	ldrb	r3, [r3, #29]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a54      	ldr	r2, [pc, #336]	@ (8001208 <update_key_actuation+0x1b0>)
 80010b8:	7892      	ldrb	r2, [r2, #2]
 80010ba:	4413      	add	r3, r2
 80010bc:	4299      	cmp	r1, r3
 80010be:	bfcc      	ite	gt
 80010c0:	2301      	movgt	r3, #1
 80010c2:	2300      	movle	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7d5b      	ldrb	r3, [r3, #21]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7f5b      	ldrb	r3, [r3, #29]
 80010d2:	4619      	mov	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010da:	1acb      	subs	r3, r1, r3
 80010dc:	429a      	cmp	r2, r3
 80010de:	bfb4      	ite	lt
 80010e0:	2301      	movlt	r3, #1
 80010e2:	2300      	movge	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7f9b      	ldrb	r3, [r3, #30]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d87f      	bhi.n	80011f2 <update_key_actuation+0x19a>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <update_key_actuation+0xa0>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	080011a9 	.word	0x080011a9
 80010fc:	080011b9 	.word	0x080011b9
 8001100:	08001109 	.word	0x08001109
 8001104:	08001141 	.word	0x08001141

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001108:	7cfb      	ldrb	r3, [r7, #19]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d073      	beq.n	80011f6 <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001114:	b29b      	uxth	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	779a      	strb	r2, [r3, #30]
 8001120:	e009      	b.n	8001136 <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <update_key_actuation+0x1b4>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff faad 	bl	8000690 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 800113e:	e05a      	b.n	80011f6 <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001140:	7c7b      	ldrb	r3, [r7, #17]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	779a      	strb	r2, [r3, #30]
      break;
 800114c:	e058      	b.n	8001200 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d022      	beq.n	800119a <update_key_actuation+0x142>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7f1b      	ldrb	r3, [r3, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11e      	bne.n	800119a <update_key_actuation+0x142>
 800115c:	7c3b      	ldrb	r3, [r7, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01b      	beq.n	800119a <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <update_key_actuation+0x1b4>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e009      	b.n	8001190 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2202      	movs	r2, #2
 8001180:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <update_key_actuation+0x1b4>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa80 	bl	8000690 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001198:	e02f      	b.n	80011fa <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 800119a:	7cbb      	ldrb	r3, [r7, #18]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d02c      	beq.n	80011fa <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	779a      	strb	r2, [r3, #30]
    break;
 80011a6:	e028      	b.n	80011fa <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 80011ae:	2101      	movs	r1, #1
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fad7 	bl	8000764 <hid_release_key>
    break;
 80011b6:	e023      	b.n	8001200 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2203      	movs	r2, #3
 80011c2:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff facc 	bl	8000764 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 80011cc:	e017      	b.n	80011fe <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80011ce:	7c7b      	ldrb	r3, [r7, #17]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d014      	beq.n	80011fe <update_key_actuation+0x1a6>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d110      	bne.n	80011fe <update_key_actuation+0x1a6>
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00d      	beq.n	80011fe <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff faba 	bl	8000764 <hid_release_key>
    break;
 80011f0:	e005      	b.n	80011fe <update_key_actuation+0x1a6>

  default:
    break;
 80011f2:	bf00      	nop
 80011f4:	e004      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011f6:	bf00      	nop
 80011f8:	e002      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011fe:	bf00      	nop
  }
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	200004fc 	.word	0x200004fc

08001210 <update_key>:

void update_key(struct key *key) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fdc7 	bl	8000dac <update_key_state>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff17 	bl	8001058 <update_key_actuation>
 800122a:	e000      	b.n	800122e <update_key+0x1e>
    return;
 800122c:	bf00      	nop
}
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <keyboard_init_keys>:

void keyboard_init_keys() {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e027      	b.n	8001290 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001240:	2300      	movs	r3, #0
 8001242:	71bb      	strb	r3, [r7, #6]
 8001244:	e01e      	b.n	8001284 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	4915      	ldr	r1, [pc, #84]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4413      	add	r3, r2
 8001250:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001254:	2bff      	cmp	r3, #255	@ 0xff
 8001256:	d012      	beq.n	800127e <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	4910      	ldr	r1, [pc, #64]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	440b      	add	r3, r1
 8001274:	7859      	ldrb	r1, [r3, #1]
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	f7ff fcb5 	bl	8000be8 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d9dd      	bls.n	8001246 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3301      	adds	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d9d4      	bls.n	8001240 <keyboard_init_keys+0xc>
      }
    }
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800bc00 	.word	0x0800bc00

080012a4 <keyboard_task>:

void keyboard_task() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80012aa:	f000 fcd9 	bl	8001c60 <keyboard_get_time>
 80012ae:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80012b0:	4b64      	ldr	r3, [pc, #400]	@ (8001444 <keyboard_task+0x1a0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e039      	b.n	8001330 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fc74 	bl	8001bac <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	e02c      	b.n	8001324 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80012ca:	7bb9      	ldrb	r1, [r7, #14]
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	485e      	ldr	r0, [pc, #376]	@ (8001448 <keyboard_task+0x1a4>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012de:	fb01 f202 	mul.w	r2, r1, r2
 80012e2:	4413      	add	r3, r2
 80012e4:	4403      	add	r3, r0
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d017      	beq.n	800131c <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fc84 	bl	8001bfc <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80012f4:	7bb9      	ldrb	r1, [r7, #14]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001306:	fb01 f202 	mul.w	r2, r1, r2
 800130a:	4413      	add	r3, r2
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <keyboard_task+0x1a4>)
 800130e:	4413      	add	r3, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff7d 	bl	8001210 <update_key>

      keyboard_close_adc();
 8001316:	f000 fc99 	bl	8001c4c <keyboard_close_adc>
 800131a:	e000      	b.n	800131e <keyboard_task+0x7a>
        continue;
 800131c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	3301      	adds	r3, #1
 8001322:	73bb      	strb	r3, [r7, #14]
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0cf      	beq.n	80012ca <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d9c2      	bls.n	80012bc <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001336:	2300      	movs	r3, #0
 8001338:	737b      	strb	r3, [r7, #13]
 800133a:	e074      	b.n	8001426 <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800133c:	2300      	movs	r3, #0
 800133e:	733b      	strb	r3, [r7, #12]
 8001340:	e06b      	b.n	800141a <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8001342:	7b39      	ldrb	r1, [r7, #12]
 8001344:	7b7a      	ldrb	r2, [r7, #13]
 8001346:	4840      	ldr	r0, [pc, #256]	@ (8001448 <keyboard_task+0x1a4>)
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001356:	fb01 f202 	mul.w	r2, r1, r2
 800135a:	4413      	add	r3, r2
 800135c:	4403      	add	r3, r0
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d056      	beq.n	8001412 <keyboard_task+0x16e>
 8001364:	7b39      	ldrb	r1, [r7, #12]
 8001366:	7b7a      	ldrb	r2, [r7, #13]
 8001368:	4837      	ldr	r0, [pc, #220]	@ (8001448 <keyboard_task+0x1a4>)
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001378:	fb01 f202 	mul.w	r2, r1, r2
 800137c:	4413      	add	r3, r2
 800137e:	4403      	add	r3, r0
 8001380:	331e      	adds	r3, #30
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d144      	bne.n	8001412 <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001388:	7b39      	ldrb	r1, [r7, #12]
 800138a:	7b7a      	ldrb	r2, [r7, #13]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800139a:	fb01 f202 	mul.w	r2, r1, r2
 800139e:	4413      	add	r3, r2
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <keyboard_task+0x1a4>)
 80013a2:	4413      	add	r3, r2
 80013a4:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7d5a      	ldrb	r2, [r3, #21]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7fdb      	ldrb	r3, [r3, #31]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf34      	ite	cc
 80013b2:	2301      	movcc	r3, #1
 80013b4:	2300      	movcs	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80013ba:	f000 fc51 	bl	8001c60 <keyboard_get_time>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a20      	ldr	r2, [pc, #128]	@ (800144c <keyboard_task+0x1a8>)
 80013ca:	88d2      	ldrh	r2, [r2, #6]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bf94      	ite	ls
 80013d0:	2301      	movls	r3, #1
 80013d2:	2300      	movhi	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <keyboard_task+0x150>
 80013de:	78bb      	ldrb	r3, [r7, #2]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 80013ea:	2101      	movs	r1, #1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff f94f 	bl	8000690 <hid_press_key>
 80013f2:	e00f      	b.n	8001414 <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <keyboard_task+0x15e>
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <keyboard_task+0x1a0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2202      	movs	r2, #2
 8001406:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f940 	bl	8000690 <hid_press_key>
 8001410:	e000      	b.n	8001414 <keyboard_task+0x170>
        continue;
 8001412:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	733b      	strb	r3, [r7, #12]
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d090      	beq.n	8001342 <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001420:	7b7b      	ldrb	r3, [r7, #13]
 8001422:	3301      	adds	r3, #1
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d987      	bls.n	800133c <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800142c:	f000 fc18 	bl	8001c60 <keyboard_get_time>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <keyboard_task+0x1ac>)
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200004fc 	.word	0x200004fc
 8001448:	20000288 	.word	0x20000288
 800144c:	20000000 	.word	0x20000000
 8001450:	200004f8 	.word	0x200004f8

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0a2      	sub	sp, #136	@ 0x88
 8001458:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f001 f985 	bl	8002768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f9e9 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 faff 	bl	8001a64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001466:	f000 fa4f 	bl	8001908 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800146a:	f000 facd 	bl	8001a08 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800146e:	f000 fa9d 	bl	80019ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001472:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <main+0x27c>)
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001478:	4b95      	ldr	r3, [pc, #596]	@ (80016d0 <main+0x27c>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 800147e:	f7ff fed9 	bl	8001234 <keyboard_init_keys>

  ssd1306_Init();
 8001482:	f000 fc33 	bl	8001cec <ssd1306_Init>

  hid_init();
 8001486:	f7ff f899 	bl	80005bc <hid_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
    keyboard_task();
 800148a:	f7ff ff0b 	bl	80012a4 <keyboard_task>

    ssd1306_Fill(White);
 800148e:	2001      	movs	r0, #1
 8001490:	f000 fc96 	bl	8001dc0 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8001494:	2101      	movs	r1, #1
 8001496:	2001      	movs	r0, #1
 8001498:	f000 feca 	bl	8002230 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	233f      	movs	r3, #63	@ 0x3f
 80014a2:	227f      	movs	r2, #127	@ 0x7f
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 fe5a 	bl	8002160 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2320      	movs	r3, #32
 80014b2:	227f      	movs	r2, #127	@ 0x7f
 80014b4:	2120      	movs	r1, #32
 80014b6:	2026      	movs	r0, #38	@ 0x26
 80014b8:	f000 fde6 	bl	8002088 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 80014bc:	2300      	movs	r3, #0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	233f      	movs	r3, #63	@ 0x3f
 80014c2:	2226      	movs	r2, #38	@ 0x26
 80014c4:	2100      	movs	r1, #0
 80014c6:	2026      	movs	r0, #38	@ 0x26
 80014c8:	f000 fdde 	bl	8002088 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80014cc:	2301      	movs	r3, #1
 80014ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014d0:	e013      	b.n	80014fa <main+0xa6>
        int x = MOD_WIDTH + i * KEY_WIDTH;
 80014d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014d4:	4613      	mov	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3326      	adds	r3, #38	@ 0x26
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
        ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 80014e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e2:	b2d8      	uxtb	r0, r3
 80014e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	233f      	movs	r3, #63	@ 0x3f
 80014ee:	2100      	movs	r1, #0
 80014f0:	f000 fdca 	bl	8002088 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80014f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014f6:	3301      	adds	r3, #1
 80014f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	dde8      	ble.n	80014d2 <main+0x7e>
    }

    int mod_y = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	67bb      	str	r3, [r7, #120]	@ 0x78
    const int mod_line_height = 10;
 8001504:	230a      	movs	r3, #10
 8001506:	65fb      	str	r3, [r7, #92]	@ 0x5c

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8001508:	2300      	movs	r3, #0
 800150a:	677b      	str	r3, [r7, #116]	@ 0x74
 800150c:	e065      	b.n	80015da <main+0x186>
        struct key* k = &keyboard_keys[0][amux];
 800150e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <main+0x280>)
 800151c:	4413      	add	r3, r2
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if (k->state.distance_8bits > 20 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8001520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001522:	7d5b      	ldrb	r3, [r3, #21]
 8001524:	2b14      	cmp	r3, #20
 8001526:	d955      	bls.n	80015d4 <main+0x180>
 8001528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152a:	795b      	ldrb	r3, [r3, #5]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d151      	bne.n	80015d4 <main+0x180>
            uint8_t bitmask = k->layers[_BASE_LAYER].value;
 8001530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001532:	88db      	ldrh	r3, [r3, #6]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const char* label = NULL;
 800153a:	2300      	movs	r3, #0
 800153c:	673b      	str	r3, [r7, #112]	@ 0x70

            if (bitmask == 0b00000001) label = "LCtrl";
 800153e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <main+0xf8>
 8001546:	4b64      	ldr	r3, [pc, #400]	@ (80016d8 <main+0x284>)
 8001548:	673b      	str	r3, [r7, #112]	@ 0x70
 800154a:	e02f      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b00000010) label = "LShift";
 800154c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001550:	2b02      	cmp	r3, #2
 8001552:	d102      	bne.n	800155a <main+0x106>
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <main+0x288>)
 8001556:	673b      	str	r3, [r7, #112]	@ 0x70
 8001558:	e028      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b00000100) label = "LAlt";
 800155a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800155e:	2b04      	cmp	r3, #4
 8001560:	d102      	bne.n	8001568 <main+0x114>
 8001562:	4b5f      	ldr	r3, [pc, #380]	@ (80016e0 <main+0x28c>)
 8001564:	673b      	str	r3, [r7, #112]	@ 0x70
 8001566:	e021      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b00001000) label = "LGUI";
 8001568:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800156c:	2b08      	cmp	r3, #8
 800156e:	d102      	bne.n	8001576 <main+0x122>
 8001570:	4b5c      	ldr	r3, [pc, #368]	@ (80016e4 <main+0x290>)
 8001572:	673b      	str	r3, [r7, #112]	@ 0x70
 8001574:	e01a      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b00010000) label = "RCtrl";
 8001576:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800157a:	2b10      	cmp	r3, #16
 800157c:	d102      	bne.n	8001584 <main+0x130>
 800157e:	4b5a      	ldr	r3, [pc, #360]	@ (80016e8 <main+0x294>)
 8001580:	673b      	str	r3, [r7, #112]	@ 0x70
 8001582:	e013      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b00100000) label = "RShift";
 8001584:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001588:	2b20      	cmp	r3, #32
 800158a:	d102      	bne.n	8001592 <main+0x13e>
 800158c:	4b57      	ldr	r3, [pc, #348]	@ (80016ec <main+0x298>)
 800158e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001590:	e00c      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b01000000) label = "RAlt";
 8001592:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001596:	2b40      	cmp	r3, #64	@ 0x40
 8001598:	d102      	bne.n	80015a0 <main+0x14c>
 800159a:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <main+0x29c>)
 800159c:	673b      	str	r3, [r7, #112]	@ 0x70
 800159e:	e005      	b.n	80015ac <main+0x158>
            else if (bitmask == 0b10000000) label = "RGUI";
 80015a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80015a4:	2b80      	cmp	r3, #128	@ 0x80
 80015a6:	d101      	bne.n	80015ac <main+0x158>
 80015a8:	4b52      	ldr	r3, [pc, #328]	@ (80016f4 <main+0x2a0>)
 80015aa:	673b      	str	r3, [r7, #112]	@ 0x70

            if (label) {
 80015ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <main+0x180>
                ssd1306_SetCursor(2, mod_y);
 80015b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	2002      	movs	r0, #2
 80015ba:	f000 fd4d 	bl	8002058 <ssd1306_SetCursor>
                ssd1306_WriteString(label, Font_6x8, Black);
 80015be:	4b4e      	ldr	r3, [pc, #312]	@ (80016f8 <main+0x2a4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80015c8:	f000 fd20 	bl	800200c <ssd1306_WriteString>
                mod_y += mod_line_height;
 80015cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80015ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d0:	4413      	add	r3, r2
 80015d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80015d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015d6:	3301      	adds	r3, #1
 80015d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80015da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	dd96      	ble.n	800150e <main+0xba>
            }
        }
    }

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 80015e0:	2322      	movs	r3, #34	@ 0x22
 80015e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 80015e4:	2336      	movs	r3, #54	@ 0x36
 80015e6:	657b      	str	r3, [r7, #84]	@ 0x54

    int label_row_top = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	653b      	str	r3, [r7, #80]	@ 0x50
    int percent_row_top = label_row_bot - 11;
 80015ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015ee:	3b0b      	subs	r3, #11
 80015f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char keycodes[6][4] = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	66fb      	str	r3, [r7, #108]	@ 0x6c

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8001612:	2300      	movs	r3, #0
 8001614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001616:	e054      	b.n	80016c2 <main+0x26e>
    	struct key* k = &keyboard_keys[0][amux];
 8001618:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	4a2b      	ldr	r2, [pc, #172]	@ (80016d4 <main+0x280>)
 8001626:	4413      	add	r3, r2
 8001628:	643b      	str	r3, [r7, #64]	@ 0x40

        if (k->state.distance_8bits > 20 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 800162a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800162c:	7d5b      	ldrb	r3, [r3, #21]
 800162e:	2b14      	cmp	r3, #20
 8001630:	d944      	bls.n	80016bc <main+0x268>
 8001632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001634:	2b05      	cmp	r3, #5
 8001636:	dc41      	bgt.n	80016bc <main+0x268>
 8001638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800163a:	795b      	ldrb	r3, [r3, #5]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d13d      	bne.n	80016bc <main+0x268>
        	keycodes[tracker][0] = '0';
 8001640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	3380      	adds	r3, #128	@ 0x80
 8001646:	443b      	add	r3, r7
 8001648:	2230      	movs	r2, #48	@ 0x30
 800164a:	f803 2c64 	strb.w	r2, [r3, #-100]
        	keycodes[tracker][1] = 'x';
 800164e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	3380      	adds	r3, #128	@ 0x80
 8001654:	443b      	add	r3, r7
 8001656:	2278      	movs	r2, #120	@ 0x78
 8001658:	f803 2c63 	strb.w	r2, [r3, #-99]
        	keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 800165c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800165e:	2b09      	cmp	r3, #9
 8001660:	dc04      	bgt.n	800166c <main+0x218>
 8001662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3330      	adds	r3, #48	@ 0x30
 8001668:	b2da      	uxtb	r2, r3
 800166a:	e003      	b.n	8001674 <main+0x220>
 800166c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3337      	adds	r3, #55	@ 0x37
 8001672:	b2da      	uxtb	r2, r3
 8001674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	3380      	adds	r3, #128	@ 0x80
 800167a:	443b      	add	r3, r7
 800167c:	f803 2c62 	strb.w	r2, [r3, #-98]
        	keycodes[tracker][3] = '\0';
 8001680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3380      	adds	r3, #128	@ 0x80
 8001686:	443b      	add	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	f803 2c61 	strb.w	r2, [r3, #-97]

            key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 800168e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001690:	7d5b      	ldrb	r3, [r3, #21]
 8001692:	461a      	mov	r2, r3
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <main+0x2a8>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	441a      	add	r2, r3
 80016a2:	11d2      	asrs	r2, r2, #7
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	f107 0214 	add.w	r2, r7, #20
 80016ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b0:	4413      	add	r3, r2
 80016b2:	460a      	mov	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
            tracker++;
 80016b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b8:	3301      	adds	r3, #1
 80016ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80016bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016be:	3301      	adds	r3, #1
 80016c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	dda7      	ble.n	8001618 <main+0x1c4>
        }
    }

    for (int i = 1; i <= 3; i++) {
 80016c8:	2301      	movs	r3, #1
 80016ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80016cc:	e05d      	b.n	800178a <main+0x336>
 80016ce:	bf00      	nop
 80016d0:	20000a80 	.word	0x20000a80
 80016d4:	20000288 	.word	0x20000288
 80016d8:	0800bb2c 	.word	0x0800bb2c
 80016dc:	0800bb34 	.word	0x0800bb34
 80016e0:	0800bb3c 	.word	0x0800bb3c
 80016e4:	0800bb44 	.word	0x0800bb44
 80016e8:	0800bb4c 	.word	0x0800bb4c
 80016ec:	0800bb54 	.word	0x0800bb54
 80016f0:	0800bb5c 	.word	0x0800bb5c
 80016f4:	0800bb64 	.word	0x0800bb64
 80016f8:	0800c220 	.word	0x0800c220
 80016fc:	80808081 	.word	0x80808081
    	if (keycodes[i - 1][0] != '\0') {
 8001700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001702:	3b01      	subs	r3, #1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	3380      	adds	r3, #128	@ 0x80
 8001708:	443b      	add	r3, r7
 800170a:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d038      	beq.n	8001784 <main+0x330>
    		int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8001712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	332a      	adds	r3, #42	@ 0x2a
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
    		ssd1306_SetCursor(x, label_row_top);
 8001722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001724:	b2db      	uxtb	r3, r3
 8001726:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fc93 	bl	8002058 <ssd1306_SetCursor>
         	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 8001732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001734:	3b01      	subs	r3, #1
 8001736:	f107 021c 	add.w	r2, r7, #28
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	18d0      	adds	r0, r2, r3
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <main+0x3d8>)
 8001740:	2200      	movs	r2, #0
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001746:	f000 fc61 	bl	800200c <ssd1306_WriteString>

    		char buf[6];
         	sprintf(buf, "%d%%", key_percents[i - 1]);
 800174a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800174c:	3b01      	subs	r3, #1
 800174e:	3380      	adds	r3, #128	@ 0x80
 8001750:	443b      	add	r3, r7
 8001752:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8001756:	461a      	mov	r2, r3
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4934      	ldr	r1, [pc, #208]	@ (8001830 <main+0x3dc>)
 800175e:	4618      	mov	r0, r3
 8001760:	f009 fd38 	bl	800b1d4 <siprintf>
         	ssd1306_SetCursor(x, percent_row_top);
 8001764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001766:	b2db      	uxtb	r3, r3
 8001768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fc72 	bl	8002058 <ssd1306_SetCursor>
    		ssd1306_WriteString(buf, Font_6x8, Black);
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <main+0x3d8>)
 8001776:	f107 000c 	add.w	r0, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001780:	f000 fc44 	bl	800200c <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8001784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001786:	3301      	adds	r3, #1
 8001788:	667b      	str	r3, [r7, #100]	@ 0x64
 800178a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800178c:	2b03      	cmp	r3, #3
 800178e:	ddb7      	ble.n	8001700 <main+0x2ac>
    	}
    }

    for (int i = 4; i <= 6; i++) {
 8001790:	2304      	movs	r3, #4
 8001792:	663b      	str	r3, [r7, #96]	@ 0x60
 8001794:	e042      	b.n	800181c <main+0x3c8>
    	if (keycodes[i - 1][0] != '\0') {
 8001796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001798:	3b01      	subs	r3, #1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3380      	adds	r3, #128	@ 0x80
 800179e:	443b      	add	r3, r7
 80017a0:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d036      	beq.n	8001816 <main+0x3c2>
        	int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 80017a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017aa:	1f1a      	subs	r2, r3, #4
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	332a      	adds	r3, #42	@ 0x2a
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
            ssd1306_SetCursor(x, label_row_bot);
 80017b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fc48 	bl	8002058 <ssd1306_SetCursor>
           	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 80017c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f107 021c 	add.w	r2, r7, #28
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	18d0      	adds	r0, r2, r3
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <main+0x3d8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017dc:	f000 fc16 	bl	800200c <ssd1306_WriteString>

        	char buf[6];
           	sprintf(buf, "%d%%", key_percents[i - 1]);
 80017e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017e2:	3b01      	subs	r3, #1
 80017e4:	3380      	adds	r3, #128	@ 0x80
 80017e6:	443b      	add	r3, r7
 80017e8:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80017ec:	461a      	mov	r2, r3
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	490f      	ldr	r1, [pc, #60]	@ (8001830 <main+0x3dc>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f009 fcee 	bl	800b1d4 <siprintf>
           	ssd1306_SetCursor(x, percent_row_bot);
 80017f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fc28 	bl	8002058 <ssd1306_SetCursor>
           	ssd1306_WriteString(buf, Font_6x8, Black);
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <main+0x3d8>)
 800180a:	1d38      	adds	r0, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001812:	f000 fbfb 	bl	800200c <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8001816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001818:	3301      	adds	r3, #1
 800181a:	663b      	str	r3, [r7, #96]	@ 0x60
 800181c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800181e:	2b06      	cmp	r3, #6
 8001820:	ddb9      	ble.n	8001796 <main+0x342>
    	}
    }

    ssd1306_UpdateScreen();
 8001822:	f000 fae5 	bl	8001df0 <ssd1306_UpdateScreen>

    hid_task();
 8001826:	f7fe fedd 	bl	80005e4 <hid_task>
  while (1) {
 800182a:	e62e      	b.n	800148a <main+0x36>
 800182c:	0800c220 	.word	0x0800c220
 8001830:	0800bb6c 	.word	0x0800bb6c

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	@ 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	@ 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f009 fce8 	bl	800b218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <SystemClock_Config+0xcc>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <SystemClock_Config+0xcc>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	@ 0x40
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <SystemClock_Config+0xd0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <SystemClock_Config+0xd0>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018a4:	2319      	movs	r3, #25
 80018a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ae:	2304      	movs	r3, #4
 80018b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018b2:	2307      	movs	r3, #7
 80018b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fe56 	bl	800456c <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018c6:	f000 f9d2 	bl	8001c6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2302      	movs	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2102      	movs	r1, #2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f8b8 	bl	8004a5c <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018f2:	f000 f9bc 	bl	8001c6e <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800191c:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <MX_ADC1_Init+0x9c>)
 800191e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001922:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001926:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <MX_ADC1_Init+0xa0>)
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001956:	2201      	movs	r2, #1
 8001958:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_ADC1_Init+0x98>)
 8001964:	2201      	movs	r2, #1
 8001966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001968:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800196a:	f000 ff93 	bl	8002894 <HAL_ADC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001974:	f000 f97b 	bl	8001c6e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001978:	2309      	movs	r3, #9
 800197a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800197c:	2301      	movs	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_ADC1_Init+0x98>)
 800198a:	f001 f947 	bl	8002c1c <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001994:	f000 f96b 	bl	8001c6e <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000500 	.word	0x20000500
 80019a4:	40012000 	.word	0x40012000
 80019a8:	0f000001 	.word	0x0f000001

080019ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <MX_I2C1_Init+0x54>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019b8:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <MX_I2C1_Init+0x58>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <MX_I2C1_Init+0x50>)
 80019ea:	f002 f803 	bl	80039f4 <HAL_I2C_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f4:	f000 f93b 	bl	8001c6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000548 	.word	0x20000548
 8001a00:	40005400 	.word	0x40005400
 8001a04:	000186a0 	.word	0x000186a0

08001a08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a16:	2204      	movs	r2, #4
 8001a18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4c:	f002 fc7f 	bl	800434e <HAL_PCD_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a56:	f000 f90a 	bl	8001c6e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000059c 	.word	0x2000059c

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <MX_GPIO_Init+0x9c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <MX_GPIO_Init+0xa0>)
 8001ad6:	f001 ff73 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ada:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <MX_GPIO_Init+0xa0>)
 8001af4:	f001 fde0 	bl	80036b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af8:	bf00      	nop
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020400 	.word	0x40020400

08001b08 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <keyboard_read_config+0x18>)
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <keyboard_read_config+0x1c>)
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	2348      	movs	r3, #72	@ 0x48
 8001b16:	461a      	mov	r2, r3
 8001b18:	f009 fbb2 	bl	800b280 <memcpy>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	08040000 	.word	0x08040000

08001b28 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	2b47      	cmp	r3, #71	@ 0x47
 8001b3c:	d901      	bls.n	8001b42 <keyboard_write_config+0x1a>
    return 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e02d      	b.n	8001b9e <keyboard_write_config+0x76>
  }

  HAL_FLASH_Unlock();
 8001b42:	f001 fbff 	bl	8003344 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <keyboard_write_config+0x80>)
 8001b48:	22b3      	movs	r2, #179	@ 0xb3
 8001b4a:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	2006      	movs	r0, #6
 8001b50:	f001 fd6a 	bl	8003628 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	81fb      	strh	r3, [r7, #14]
 8001b58:	e01a      	b.n	8001b90 <keyboard_write_config+0x68>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001b60:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8001b64:	4619      	mov	r1, r3
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	461c      	mov	r4, r3
 8001b74:	4615      	mov	r5, r2
 8001b76:	4622      	mov	r2, r4
 8001b78:	462b      	mov	r3, r5
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f001 fb8e 	bl	800329c <HAL_FLASH_Program>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <keyboard_write_config+0x62>
      HAL_FLASH_Lock();
 8001b86:	f001 fbff 	bl	8003388 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8001b8a:	89fb      	ldrh	r3, [r7, #14]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	81fb      	strh	r3, [r7, #14]
 8001b90:	89fa      	ldrh	r2, [r7, #14]
 8001b92:	883b      	ldrh	r3, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3e0      	bcc.n	8001b5a <keyboard_write_config+0x32>
    };
  }
  HAL_FLASH_Lock();
 8001b98:	f001 fbf6 	bl	8003388 <HAL_FLASH_Lock>
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e013      	b.n	8001be4 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <keyboard_select_amux+0x48>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	fa42 f303 	asr.w	r3, r2, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <keyboard_select_amux+0x4c>)
 8001bda:	f001 fef1 	bl	80039c0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d9e8      	bls.n	8001bbc <keyboard_select_amux+0x10>
  }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800bc20 	.word	0x0800bc20
 8001bf8:	40020400 	.word	0x40020400

08001bfc <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8001c06:	2209      	movs	r2, #9
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <keyboard_select_adc+0x30>)
 8001c0a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8001c0c:	4907      	ldr	r1, [pc, #28]	@ (8001c2c <keyboard_select_adc+0x30>)
 8001c0e:	4808      	ldr	r0, [pc, #32]	@ (8001c30 <keyboard_select_adc+0x34>)
 8001c10:	f001 f804 	bl	8002c1c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001c14:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <keyboard_select_adc+0x34>)
 8001c16:	f000 fe81 	bl	800291c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <keyboard_select_adc+0x34>)
 8001c1e:	f000 ff64 	bl	8002aea <HAL_ADC_PollForConversion>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000a80 	.word	0x20000a80
 8001c30:	20000500 	.word	0x20000500

08001c34 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <keyboard_read_adc+0x14>)
 8001c3a:	f000 ffe1 	bl	8002c00 <HAL_ADC_GetValue>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b29b      	uxth	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000500 	.word	0x20000500

08001c4c <keyboard_close_adc>:

void keyboard_close_adc() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <keyboard_close_adc+0x10>)
 8001c52:	f000 ff17 	bl	8002a84 <HAL_ADC_Stop>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000500 	.word	0x20000500

08001c60 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c64:	f000 fde6 	bl	8002834 <HAL_GetTick>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c72:	b672      	cpsid	i
}
 8001c74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001c76:	bf00      	nop
 8001c78:	e7fd      	b.n	8001c76 <Error_Handler+0x8>

08001c7a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2178      	movs	r1, #120	@ 0x78
 8001ca6:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <ssd1306_WriteCommand+0x2c>)
 8001ca8:	f001 ffe8 	bl	8003c7c <HAL_I2C_Mem_Write>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000548 	.word	0x20000548

08001cb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	9202      	str	r2, [sp, #8]
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	2178      	movs	r1, #120	@ 0x78
 8001cd8:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <ssd1306_WriteData+0x30>)
 8001cda:	f001 ffcf 	bl	8003c7c <HAL_I2C_Mem_Write>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000548 	.word	0x20000548

08001cec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001cf0:	f7ff ffc3 	bl	8001c7a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cf4:	2064      	movs	r0, #100	@ 0x64
 8001cf6:	f000 fda9 	bl	800284c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 fa7a 	bl	80021f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d00:	2020      	movs	r0, #32
 8001d02:	f7ff ffc1 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ffbe 	bl	8001c88 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d0c:	20b0      	movs	r0, #176	@ 0xb0
 8001d0e:	f7ff ffbb 	bl	8001c88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001d12:	20c0      	movs	r0, #192	@ 0xc0
 8001d14:	f7ff ffb8 	bl	8001c88 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ffb5 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff ffb2 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d24:	2040      	movs	r0, #64	@ 0x40
 8001d26:	f7ff ffaf 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d2a:	20ff      	movs	r0, #255	@ 0xff
 8001d2c:	f000 fa4f 	bl	80021ce <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001d30:	20a0      	movs	r0, #160	@ 0xa0
 8001d32:	f7ff ffa9 	bl	8001c88 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 8001d36:	20a7      	movs	r0, #167	@ 0xa7
 8001d38:	f7ff ffa6 	bl	8001c88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d3c:	20a8      	movs	r0, #168	@ 0xa8
 8001d3e:	f7ff ffa3 	bl	8001c88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d42:	203f      	movs	r0, #63	@ 0x3f
 8001d44:	f7ff ffa0 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d48:	20a4      	movs	r0, #164	@ 0xa4
 8001d4a:	f7ff ff9d 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d4e:	20d3      	movs	r0, #211	@ 0xd3
 8001d50:	f7ff ff9a 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff ff97 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d5a:	20d5      	movs	r0, #213	@ 0xd5
 8001d5c:	f7ff ff94 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d60:	20f0      	movs	r0, #240	@ 0xf0
 8001d62:	f7ff ff91 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d66:	20d9      	movs	r0, #217	@ 0xd9
 8001d68:	f7ff ff8e 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d6c:	2022      	movs	r0, #34	@ 0x22
 8001d6e:	f7ff ff8b 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d72:	20da      	movs	r0, #218	@ 0xda
 8001d74:	f7ff ff88 	bl	8001c88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d78:	2012      	movs	r0, #18
 8001d7a:	f7ff ff85 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d7e:	20db      	movs	r0, #219	@ 0xdb
 8001d80:	f7ff ff82 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff ff7f 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d8a:	208d      	movs	r0, #141	@ 0x8d
 8001d8c:	f7ff ff7c 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d90:	2014      	movs	r0, #20
 8001d92:	f7ff ff79 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 fa2c 	bl	80021f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f000 f80f 	bl	8001dc0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001da2:	f000 f825 	bl	8001df0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001db2:	4b02      	ldr	r3, [pc, #8]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	711a      	strb	r2, [r3, #4]
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000e90 	.word	0x20000e90

08001dc0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <ssd1306_Fill+0x14>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <ssd1306_Fill+0x16>
 8001dd4:	23ff      	movs	r3, #255	@ 0xff
 8001dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <ssd1306_Fill+0x2c>)
 8001dde:	f009 fa1b 	bl	800b218 <memset>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000a90 	.word	0x20000a90

08001df0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e016      	b.n	8001e2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	3b50      	subs	r3, #80	@ 0x50
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff40 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ff3d 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e0e:	2010      	movs	r0, #16
 8001e10:	f7ff ff3a 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <ssd1306_UpdateScreen+0x4c>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff4a 	bl	8001cb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3301      	adds	r3, #1
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d9e5      	bls.n	8001dfc <ssd1306_UpdateScreen+0xc>
    }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000a90 	.word	0x20000a90

08001e40 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db3d      	blt.n	8001ed6 <ssd1306_DrawPixel+0x96>
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e5e:	d83a      	bhi.n	8001ed6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11a      	bne.n	8001e9c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e66:	79fa      	ldrb	r2, [r7, #7]
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	b2d8      	uxtb	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	4413      	add	r3, r2
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <ssd1306_DrawPixel+0xa4>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b259      	sxtb	r1, r3
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	01db      	lsls	r3, r3, #7
 8001e92:	4413      	add	r3, r2
 8001e94:	b2c9      	uxtb	r1, r1
 8001e96:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <ssd1306_DrawPixel+0xa4>)
 8001e98:	54d1      	strb	r1, [r2, r3]
 8001e9a:	e01d      	b.n	8001ed8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	b2d8      	uxtb	r0, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <ssd1306_DrawPixel+0xa4>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b259      	sxtb	r1, r3
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2c9      	uxtb	r1, r1
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <ssd1306_DrawPixel+0xa4>)
 8001ed2:	54d1      	strb	r1, [r2, r3]
 8001ed4:	e000      	b.n	8001ed8 <ssd1306_DrawPixel+0x98>
        return;
 8001ed6:	bf00      	nop
    }
}
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000a90 	.word	0x20000a90

08001ee8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b1f      	cmp	r3, #31
 8001efe:	d902      	bls.n	8001f06 <ssd1306_WriteChar+0x1e>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f04:	d901      	bls.n	8001f0a <ssd1306_WriteChar+0x22>
        return 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e079      	b.n	8001ffe <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <ssd1306_WriteChar+0x34>
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3b20      	subs	r3, #32
 8001f16:	4413      	add	r3, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	e000      	b.n	8001f1e <ssd1306_WriteChar+0x36>
 8001f1c:	783b      	ldrb	r3, [r7, #0]
 8001f1e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f20:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	4413      	add	r3, r2
 8001f2a:	2b80      	cmp	r3, #128	@ 0x80
 8001f2c:	dc06      	bgt.n	8001f3c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001f30:	885b      	ldrh	r3, [r3, #2]
 8001f32:	461a      	mov	r2, r3
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f38:	2b40      	cmp	r3, #64	@ 0x40
 8001f3a:	dd01      	ble.n	8001f40 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e05e      	b.n	8001ffe <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e04d      	b.n	8001fe2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3b20      	subs	r3, #32
 8001f4c:	7879      	ldrb	r1, [r7, #1]
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	440b      	add	r3, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	e036      	b.n	8001fd4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d013      	beq.n	8001f9e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b2d8      	uxtb	r0, r3
 8001f84:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7ff ff52 	bl	8001e40 <ssd1306_DrawPixel>
 8001f9c:	e017      	b.n	8001fce <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2d8      	uxtb	r0, r3
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001fae:	885b      	ldrh	r3, [r3, #2]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2d9      	uxtb	r1, r3
 8001fba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f7ff ff39 	bl	8001e40 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3c4      	bcc.n	8001f66 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	787b      	ldrb	r3, [r7, #1]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d3ac      	bcc.n	8001f46 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001fee:	881a      	ldrh	r2, [r3, #0]
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <ssd1306_WriteChar+0x120>)
 8001ffa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	20000e90 	.word	0x20000e90

0800200c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	4638      	mov	r0, r7
 8002016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800201a:	e013      	b.n	8002044 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	7818      	ldrb	r0, [r3, #0]
 8002020:	7e3b      	ldrb	r3, [r7, #24]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	463b      	mov	r3, r7
 8002026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002028:	f7ff ff5e 	bl	8001ee8 <ssd1306_WriteChar>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d002      	beq.n	800203e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	e008      	b.n	8002050 <ssd1306_WriteString+0x44>
        }
        str++;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e7      	bne.n	800201c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	781b      	ldrb	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	460a      	mov	r2, r1
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	4613      	mov	r3, r2
 8002066:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <ssd1306_SetCursor+0x2c>)
 800206e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <ssd1306_SetCursor+0x2c>)
 8002076:	805a      	strh	r2, [r3, #2]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	20000e90 	.word	0x20000e90

08002088 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	4603      	mov	r3, r0
 800209c:	71bb      	strb	r3, [r7, #6]
 800209e:	460b      	mov	r3, r1
 80020a0:	717b      	strb	r3, [r7, #5]
 80020a2:	4613      	mov	r3, r2
 80020a4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80020a6:	797a      	ldrb	r2, [r7, #5]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bfb8      	it	lt
 80020b0:	425b      	neglt	r3, r3
 80020b2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80020b4:	793a      	ldrb	r2, [r7, #4]
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bfb8      	it	lt
 80020be:	425b      	neglt	r3, r3
 80020c0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d201      	bcs.n	80020ce <ssd1306_Line+0x46>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e001      	b.n	80020d2 <ssd1306_Line+0x4a>
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80020d4:	79ba      	ldrb	r2, [r7, #6]
 80020d6:	793b      	ldrb	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d201      	bcs.n	80020e0 <ssd1306_Line+0x58>
 80020dc:	2301      	movs	r3, #1
 80020de:	e001      	b.n	80020e4 <ssd1306_Line+0x5c>
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80020ee:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80020f2:	7939      	ldrb	r1, [r7, #4]
 80020f4:	797b      	ldrb	r3, [r7, #5]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fea2 	bl	8001e40 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80020fc:	e024      	b.n	8002148 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80020fe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002102:	79b9      	ldrb	r1, [r7, #6]
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe9a 	bl	8001e40 <ssd1306_DrawPixel>
        error2 = error * 2;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	425b      	negs	r3, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	dd08      	ble.n	800212e <ssd1306_Line+0xa6>
            error -= deltaY;
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4413      	add	r3, r2
 800212c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	da08      	bge.n	8002148 <ssd1306_Line+0xc0>
            error += deltaX;
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4413      	add	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	4413      	add	r3, r2
 8002146:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	797b      	ldrb	r3, [r7, #5]
 800214c:	429a      	cmp	r2, r3
 800214e:	d1d6      	bne.n	80020fe <ssd1306_Line+0x76>
 8002150:	79ba      	ldrb	r2, [r7, #6]
 8002152:	793b      	ldrb	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d1d2      	bne.n	80020fe <ssd1306_Line+0x76>
        }
    }
    return;
 8002158:	bf00      	nop
}
 800215a:	3724      	adds	r7, #36	@ 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b085      	sub	sp, #20
 8002164:	af02      	add	r7, sp, #8
 8002166:	4604      	mov	r4, r0
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	4603      	mov	r3, r0
 8002174:	71bb      	strb	r3, [r7, #6]
 8002176:	460b      	mov	r3, r1
 8002178:	717b      	strb	r3, [r7, #5]
 800217a:	4613      	mov	r3, r2
 800217c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800217e:	79bc      	ldrb	r4, [r7, #6]
 8002180:	797a      	ldrb	r2, [r7, #5]
 8002182:	79b9      	ldrb	r1, [r7, #6]
 8002184:	79f8      	ldrb	r0, [r7, #7]
 8002186:	7e3b      	ldrb	r3, [r7, #24]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4623      	mov	r3, r4
 800218c:	f7ff ff7c 	bl	8002088 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002190:	793c      	ldrb	r4, [r7, #4]
 8002192:	797a      	ldrb	r2, [r7, #5]
 8002194:	79b9      	ldrb	r1, [r7, #6]
 8002196:	7978      	ldrb	r0, [r7, #5]
 8002198:	7e3b      	ldrb	r3, [r7, #24]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4623      	mov	r3, r4
 800219e:	f7ff ff73 	bl	8002088 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80021a2:	793c      	ldrb	r4, [r7, #4]
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	7939      	ldrb	r1, [r7, #4]
 80021a8:	7978      	ldrb	r0, [r7, #5]
 80021aa:	7e3b      	ldrb	r3, [r7, #24]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4623      	mov	r3, r4
 80021b0:	f7ff ff6a 	bl	8002088 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80021b4:	79bc      	ldrb	r4, [r7, #6]
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	7939      	ldrb	r1, [r7, #4]
 80021ba:	79f8      	ldrb	r0, [r7, #7]
 80021bc:	7e3b      	ldrb	r3, [r7, #24]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4623      	mov	r3, r4
 80021c2:	f7ff ff61 	bl	8002088 <ssd1306_Line>

    return;
 80021c6:	bf00      	nop
}
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}

080021ce <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021d8:	2381      	movs	r3, #129	@ 0x81
 80021da:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fd52 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fd4e 	bl	8001c88 <ssd1306_WriteCommand>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002204:	23af      	movs	r3, #175	@ 0xaf
 8002206:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <ssd1306_SetDisplayOn+0x38>)
 800220a:	2201      	movs	r2, #1
 800220c:	715a      	strb	r2, [r3, #5]
 800220e:	e004      	b.n	800221a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002210:	23ae      	movs	r3, #174	@ 0xae
 8002212:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <ssd1306_SetDisplayOn+0x38>)
 8002216:	2200      	movs	r2, #0
 8002218:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fd33 	bl	8001c88 <ssd1306_WriteCommand>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000e90 	.word	0x20000e90

08002230 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 8002246:	20a1      	movs	r0, #161	@ 0xa1
 8002248:	f7ff fd1e 	bl	8001c88 <ssd1306_WriteCommand>
 800224c:	e002      	b.n	8002254 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 800224e:	20a0      	movs	r0, #160	@ 0xa0
 8002250:	f7ff fd1a 	bl	8001c88 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 800225a:	20c8      	movs	r0, #200	@ 0xc8
 800225c:	f7ff fd14 	bl	8001c88 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 8002260:	e002      	b.n	8002268 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 8002262:	20c0      	movs	r0, #192	@ 0xc0
 8002264:	f7ff fd10 	bl	8001c88 <ssd1306_WriteCommand>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <HAL_MspInit+0x4c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_MspInit+0x4c>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_ADC_MspInit+0x7c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d127      	bne.n	8002332 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <HAL_ADC_MspInit+0x80>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800231a:	2302      	movs	r3, #2
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231e:	2303      	movs	r3, #3
 8002320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	@ (8002344 <HAL_ADC_MspInit+0x84>)
 800232e:	f001 f9c3 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012000 	.word	0x40012000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020400 	.word	0x40020400

08002348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_I2C_MspInit+0x84>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12b      	bne.n	80023c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800238a:	2312      	movs	r3, #18
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002396:	2304      	movs	r3, #4
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <HAL_I2C_MspInit+0x8c>)
 80023a2:	f001 f989 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 80023b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_I2C_MspInit+0x88>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40005400 	.word	0x40005400
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020400 	.word	0x40020400

080023d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f8:	d13a      	bne.n	8002470 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a1d      	ldr	r2, [pc, #116]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002416:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002428:	230a      	movs	r3, #10
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4812      	ldr	r0, [pc, #72]	@ (800247c <HAL_PCD_MspInit+0xa4>)
 8002434:	f001 f940 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002438:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243c:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 800243e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002442:	6353      	str	r3, [r2, #52]	@ 0x34
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002452:	6453      	str	r3, [r2, #68]	@ 0x44
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_PCD_MspInit+0xa0>)
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2043      	movs	r0, #67	@ 0x43
 8002466:	f000 fee2 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800246a:	2043      	movs	r0, #67	@ 0x43
 800246c:	f000 fefb 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	@ 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <NMI_Handler+0x4>

08002488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 800248c:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <HardFault_Handler+0x6>

08002492 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002496:	bf00      	nop
 8002498:	e7fd      	b.n	8002496 <MemManage_Handler+0x4>

0800249a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249e:	bf00      	nop
 80024a0:	e7fd      	b.n	800249e <BusFault_Handler+0x4>

080024a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a6:	bf00      	nop
 80024a8:	e7fd      	b.n	80024a6 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f998 	bl	800280c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <SysTick_Handler+0x18>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	4a02      	ldr	r2, [pc, #8]	@ (80024ec <SysTick_Handler+0x18>)
 80024e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000e98 	.word	0x20000e98

080024f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f007 feff 	bl	800a2f8 <dcd_int_handler>
	return;
 80024fa:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f008 fe7a 	bl	800b228 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20020000 	.word	0x20020000
 8002560:	00000400 	.word	0x00000400
 8002564:	20000e9c 	.word	0x20000e9c
 8002568:	20001398 	.word	0x20001398

0800256c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	@ (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <tud_descriptor_device_cb>:
        .bNumConfigurations = 0x01,
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return (uint8_t const *)&desc_device;
 8002594:	4b02      	ldr	r3, [pc, #8]	@ (80025a0 <tud_descriptor_device_cb+0x10>)
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	0800c244 	.word	0x0800c244

080025a4 <tud_hid_descriptor_report_cb>:
};

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_hid_descriptor_report_cb(uint8_t instance) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if (instance == ITF_NUM_KEYBOARD) {
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <tud_hid_descriptor_report_cb+0x14>
    return desc_hid_keyboard_report;
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <tud_hid_descriptor_report_cb+0x24>)
 80025b6:	e000      	b.n	80025ba <tud_hid_descriptor_report_cb+0x16>
  }

  return NULL;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	0800c258 	.word	0x0800c258

080025cc <tud_descriptor_configuration_cb>:
};

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  (void)index; // for multiple configurations
  return desc_configuration;
 80025d6:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <tud_descriptor_configuration_cb+0x18>)
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	0800c2b4 	.word	0x0800c2b4

080025e8 <tud_descriptor_bos_cb>:
        TUD_BOS_WEBUSB_DESCRIPTOR(VENDOR_REQUEST_WEBUSB, 1),

        // Microsoft OS 2.0 descriptor
        TUD_BOS_MS_OS_20_DESCRIPTOR(MS_OS_20_DESC_LEN, VENDOR_REQUEST_MICROSOFT)};

uint8_t const *tud_descriptor_bos_cb(void) {
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return desc_bos;
 80025ec:	4b02      	ldr	r3, [pc, #8]	@ (80025f8 <tud_descriptor_bos_cb+0x10>)
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	0800c2f0 	.word	0x0800c2f0

080025fc <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	460a      	mov	r2, r1
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	4613      	mov	r3, r2
 800260a:	80bb      	strh	r3, [r7, #4]
  (void)langid;
  size_t chr_count;

  if (index == 0) {
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <tud_descriptor_string_cb+0x28>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002612:	4b3e      	ldr	r3, [pc, #248]	@ (800270c <tud_descriptor_string_cb+0x110>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <tud_descriptor_string_cb+0x114>)
 800261c:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e026      	b.n	8002672 <tud_descriptor_string_cb+0x76>
  } else {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d901      	bls.n	800262e <tud_descriptor_string_cb+0x32>
      return NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	e06a      	b.n	8002704 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a36      	ldr	r2, [pc, #216]	@ (800270c <tud_descriptor_string_cb+0x110>)
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	613b      	str	r3, [r7, #16]

    // Cap at max char
    chr_count = strlen(str);
 8002638:	6938      	ldr	r0, [r7, #16]
 800263a:	f7fd fdd1 	bl	80001e0 <strlen>
 800263e:	61f8      	str	r0, [r7, #28]
    if (chr_count > 31)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b1f      	cmp	r3, #31
 8002644:	d901      	bls.n	800264a <tud_descriptor_string_cb+0x4e>
      chr_count = 31;
 8002646:	231f      	movs	r3, #31
 8002648:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (uint8_t i = 0; i < chr_count; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	76fb      	strb	r3, [r7, #27]
 800264e:	e00c      	b.n	800266a <tud_descriptor_string_cb+0x6e>
      _desc_str[1 + i] = str[i];
 8002650:	7efb      	ldrb	r3, [r7, #27]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	7efb      	ldrb	r3, [r7, #27]
 800265a:	3301      	adds	r3, #1
 800265c:	4611      	mov	r1, r2
 800265e:	4a2c      	ldr	r2, [pc, #176]	@ (8002710 <tud_descriptor_string_cb+0x114>)
 8002660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++) {
 8002664:	7efb      	ldrb	r3, [r7, #27]
 8002666:	3301      	adds	r3, #1
 8002668:	76fb      	strb	r3, [r7, #27]
 800266a:	7efb      	ldrb	r3, [r7, #27]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	429a      	cmp	r2, r3
 8002670:	d8ee      	bhi.n	8002650 <tud_descriptor_string_cb+0x54>
    }
  }

  switch (index) {
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <tud_descriptor_string_cb+0x82>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d009      	beq.n	8002690 <tud_descriptor_string_cb+0x94>
 800267c:	e00b      	b.n	8002696 <tud_descriptor_string_cb+0x9a>
  case STRID_LANGID:
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800267e:	4b23      	ldr	r3, [pc, #140]	@ (800270c <tud_descriptor_string_cb+0x110>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <tud_descriptor_string_cb+0x114>)
 8002688:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    break;
 800268e:	e02d      	b.n	80026ec <tud_descriptor_string_cb+0xf0>

  case STRID_SERIAL:
    chr_count = 10;
 8002690:	230a      	movs	r3, #10
 8002692:	61fb      	str	r3, [r7, #28]
    break;
 8002694:	e02a      	b.n	80026ec <tud_descriptor_string_cb+0xf0>

  default:
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d901      	bls.n	80026a0 <tud_descriptor_string_cb+0xa4>
      return NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	e031      	b.n	8002704 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <tud_descriptor_string_cb+0x110>)
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	60fb      	str	r3, [r7, #12]

    // Cap at max char
    chr_count = strlen(str);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7fd fd98 	bl	80001e0 <strlen>
 80026b0:	61f8      	str	r0, [r7, #28]
    size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 80026b2:	2320      	movs	r3, #32
 80026b4:	60bb      	str	r3, [r7, #8]
    if (chr_count > max_count)
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d901      	bls.n	80026c2 <tud_descriptor_string_cb+0xc6>
      chr_count = max_count;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (size_t i = 0; i < chr_count; i++) {
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e00c      	b.n	80026e2 <tud_descriptor_string_cb+0xe6>
      _desc_str[1 + i] = str[i];
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4413      	add	r3, r2
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4611      	mov	r1, r2
 80026d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002710 <tud_descriptor_string_cb+0x114>)
 80026d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < chr_count; i++) {
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3ee      	bcc.n	80026c8 <tud_descriptor_string_cb+0xcc>
    }
    break;
 80026ea:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <tud_descriptor_string_cb+0x114>)
 8002700:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8002702:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <tud_descriptor_string_cb+0x114>)
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000004c 	.word	0x2000004c
 8002710:	20000ea0 	.word	0x20000ea0

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800274c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002718:	f7ff ff28 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800271c:	480c      	ldr	r0, [pc, #48]	@ (8002750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800271e:	490d      	ldr	r1, [pc, #52]	@ (8002754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002734:	4c0a      	ldr	r4, [pc, #40]	@ (8002760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002742:	f008 fd77 	bl	800b234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002746:	f7fe fe85 	bl	8001454 <main>
  bx  lr    
 800274a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800274c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002758:	0800c488 	.word	0x0800c488
  ldr r2, =_sbss
 800275c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002760:	20001398 	.word	0x20001398

08002764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800276c:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0d      	ldr	r2, [pc, #52]	@ (80027a8 <HAL_Init+0x40>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <HAL_Init+0x40>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <HAL_Init+0x40>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002790:	2003      	movs	r0, #3
 8002792:	f000 fd41 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002796:	200f      	movs	r0, #15
 8002798:	f000 f808 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800279c:	f7ff fd68 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b4:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <HAL_InitTick+0x54>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_InitTick+0x58>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fd59 	bl	8003282 <HAL_SYSTICK_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00e      	b.n	80027f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d80a      	bhi.n	80027f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f000 fd21 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ec:	4a06      	ldr	r2, [pc, #24]	@ (8002808 <HAL_InitTick+0x5c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000048 	.word	0x20000048
 8002804:	20000068 	.word	0x20000068
 8002808:	20000064 	.word	0x20000064

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000068 	.word	0x20000068
 8002830:	20000ee4 	.word	0x20000ee4

08002834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <HAL_GetTick+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000ee4 	.word	0x20000ee4

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ffee 	bl	8002834 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_Delay+0x44>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffde 	bl	8002834 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000068 	.word	0x20000068

08002894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e033      	b.n	8002912 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fd04 	bl	80022c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028da:	f023 0302 	bic.w	r3, r3, #2
 80028de:	f043 0202 	orr.w	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 faca 	bl	8002e80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
 8002902:	e001      	b.n	8002908 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Start+0x1a>
 8002932:	2302      	movs	r3, #2
 8002934:	e097      	b.n	8002a66 <HAL_ADC_Start+0x14a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d018      	beq.n	800297e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800295c:	4b45      	ldr	r3, [pc, #276]	@ (8002a74 <HAL_ADC_Start+0x158>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a45      	ldr	r2, [pc, #276]	@ (8002a78 <HAL_ADC_Start+0x15c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9a      	lsrs	r2, r3, #18
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002970:	e002      	b.n	8002978 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3b01      	subs	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f9      	bne.n	8002972 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d15f      	bne.n	8002a4c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	d106      	bne.n	80029da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d0:	f023 0206 	bic.w	r2, r3, #6
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80029d8:	e002      	b.n	80029e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_ADC_Start+0x160>)
 80029ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d129      	bne.n	8002a64 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e020      	b.n	8002a64 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_ADC_Start+0x164>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d11b      	bne.n	8002a64 <HAL_ADC_Start+0x148>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d114      	bne.n	8002a64 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	e00b      	b.n	8002a64 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f043 0210 	orr.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000048 	.word	0x20000048
 8002a78:	431bde83 	.word	0x431bde83
 8002a7c:	40012300 	.word	0x40012300
 8002a80:	40012000 	.word	0x40012000

08002a84 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Stop+0x16>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e021      	b.n	8002ade <HAL_ADC_Stop+0x5a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d113      	bne.n	8002b30 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e063      	b.n	8002bf8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b30:	f7ff fe80 	bl	8002834 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b36:	e021      	b.n	8002b7c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d01d      	beq.n	8002b7c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x6c>
 8002b46:	f7ff fe75 	bl	8002834 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d212      	bcs.n	8002b7c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d00b      	beq.n	8002b7c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e03d      	b.n	8002bf8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d1d6      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0212 	mvn.w	r2, #18
 8002b92:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d123      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11f      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d111      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e113      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x244>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d925      	bls.n	8002c94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68d9      	ldr	r1, [r3, #12]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b1e      	subs	r3, #30
 8002c5e:	2207      	movs	r2, #7
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43da      	mvns	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4403      	add	r3, r0
 8002c86:	3b1e      	subs	r3, #30
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e022      	b.n	8002cda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	2207      	movs	r2, #7
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4403      	add	r3, r0
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d824      	bhi.n	8002d2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b05      	subs	r3, #5
 8002cf4:	221f      	movs	r2, #31
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	400a      	ands	r2, r1
 8002d02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b05      	subs	r3, #5
 8002d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d2a:	e04c      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d824      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	3b23      	subs	r3, #35	@ 0x23
 8002d46:	221f      	movs	r2, #31
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	400a      	ands	r2, r1
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b23      	subs	r3, #35	@ 0x23
 8002d70:	fa00 f203 	lsl.w	r2, r0, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d7c:	e023      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b41      	subs	r3, #65	@ 0x41
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b41      	subs	r3, #65	@ 0x41
 8002dba:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc6:	4b29      	ldr	r3, [pc, #164]	@ (8002e6c <HAL_ADC_ConfigChannel+0x250>)
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	@ (8002e70 <HAL_ADC_ConfigChannel+0x254>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10f      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1d8>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b12      	cmp	r3, #18
 8002dda:	d10b      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e70 <HAL_ADC_ConfigChannel+0x254>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d12b      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x23a>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	@ (8002e74 <HAL_ADC_ConfigChannel+0x258>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <HAL_ADC_ConfigChannel+0x1f4>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b11      	cmp	r3, #17
 8002e0e:	d122      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_ADC_ConfigChannel+0x258>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d111      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_ADC_ConfigChannel+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a11      	ldr	r2, [pc, #68]	@ (8002e7c <HAL_ADC_ConfigChannel+0x260>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9a      	lsrs	r2, r3, #18
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	40012000 	.word	0x40012000
 8002e74:	10000012 	.word	0x10000012
 8002e78:	20000048 	.word	0x20000048
 8002e7c:	431bde83 	.word	0x431bde83

08002e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e88:	4b79      	ldr	r3, [pc, #484]	@ (8003070 <ADC_Init+0x1f0>)
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <ADC_Init+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e00f      	b.n	8002f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0202 	bic.w	r2, r2, #2
 8002f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6899      	ldr	r1, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
 8002f98:	005a      	lsls	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	035a      	lsls	r2, r3, #13
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	e007      	b.n	8002ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	3b01      	subs	r3, #1
 8003010:	051a      	lsls	r2, r3, #20
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003036:	025a      	lsls	r2, r3, #9
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	029a      	lsls	r2, r3, #10
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40012300 	.word	0x40012300
 8003074:	0f000001 	.word	0x0f000001

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4907      	ldr	r1, [pc, #28]	@ (8003114 <__NVIC_EnableIRQ+0x38>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43d9      	mvns	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	4313      	orrs	r3, r2
         );
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	@ 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff8e 	bl	8003118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff29 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff3e 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff8e 	bl	800316c <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5d 	bl	8003118 <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff31 	bl	80030dc <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <SysTick_Config>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032ae:	4b23      	ldr	r3, [pc, #140]	@ (800333c <HAL_FLASH_Program+0xa0>)
 80032b0:	7e1b      	ldrb	r3, [r3, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_FLASH_Program+0x1e>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e03b      	b.n	8003332 <HAL_FLASH_Program+0x96>
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_FLASH_Program+0xa0>)
 80032bc:	2201      	movs	r2, #1
 80032be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80032c4:	f000 f870 	bl	80033a8 <FLASH_WaitForLastOperation>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d12b      	bne.n	800332a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80032d8:	783b      	ldrb	r3, [r7, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f000 f91b 	bl	8003518 <FLASH_Program_Byte>
 80032e2:	e016      	b.n	8003312 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d105      	bne.n	80032f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80032ea:	883b      	ldrh	r3, [r7, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	68b8      	ldr	r0, [r7, #8]
 80032f0:	f000 f8ee 	bl	80034d0 <FLASH_Program_HalfWord>
 80032f4:	e00d      	b.n	8003312 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d105      	bne.n	8003308 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f000 f8c3 	bl	800348c <FLASH_Program_Word>
 8003306:	e004      	b.n	8003312 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f000 f88b 	bl	8003428 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003312:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003316:	f000 f847 	bl	80033a8 <FLASH_WaitForLastOperation>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800331e:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <HAL_FLASH_Program+0xa4>)
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_FLASH_Program+0xa4>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <HAL_FLASH_Program+0xa0>)
 800332c:	2200      	movs	r2, #0
 800332e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000ee8 	.word	0x20000ee8
 8003340:	40023c00 	.word	0x40023c00

08003344 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_FLASH_Unlock+0x38>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	da0b      	bge.n	800336e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_FLASH_Unlock+0x38>)
 8003358:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_FLASH_Unlock+0x3c>)
 800335a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800335c:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_FLASH_Unlock+0x38>)
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_FLASH_Unlock+0x40>)
 8003360:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_FLASH_Unlock+0x38>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da01      	bge.n	800336e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800336e:	79fb      	ldrb	r3, [r7, #7]
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40023c00 	.word	0x40023c00
 8003380:	45670123 	.word	0x45670123
 8003384:	cdef89ab 	.word	0xcdef89ab

08003388 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_FLASH_Lock+0x1c>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <HAL_FLASH_Lock+0x1c>)
 8003392:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003396:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40023c00 	.word	0x40023c00

080033a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <FLASH_WaitForLastOperation+0x78>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80033ba:	f7ff fa3b 	bl	8002834 <HAL_GetTick>
 80033be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80033c0:	e010      	b.n	80033e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d00c      	beq.n	80033e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <FLASH_WaitForLastOperation+0x38>
 80033d0:	f7ff fa30 	bl	8002834 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d201      	bcs.n	80033e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e019      	b.n	8003418 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <FLASH_WaitForLastOperation+0x7c>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e8      	bne.n	80033c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80033f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <FLASH_WaitForLastOperation+0x7c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <FLASH_WaitForLastOperation+0x7c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <FLASH_WaitForLastOperation+0x7c>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800340e:	f000 f8a5 	bl	800355c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
  
}  
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000ee8 	.word	0x20000ee8
 8003424:	40023c00 	.word	0x40023c00

08003428 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	4a13      	ldr	r2, [pc, #76]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 800343a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 8003446:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800344a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800344c:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <FLASH_Program_DoubleWord+0x60>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800345e:	f3bf 8f6f 	isb	sy
}
 8003462:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	000a      	movs	r2, r1
 8003472:	2300      	movs	r3, #0
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	3104      	adds	r1, #4
 8003478:	4613      	mov	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40023c00 	.word	0x40023c00

0800348c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003496:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <FLASH_Program_Word+0x40>)
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <FLASH_Program_Word+0x40>)
 800349c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <FLASH_Program_Word+0x40>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <FLASH_Program_Word+0x40>)
 80034a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034ae:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <FLASH_Program_Word+0x40>)
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <FLASH_Program_Word+0x40>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40023c00 	.word	0x40023c00

080034d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034f4:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <FLASH_Program_HalfWord+0x44>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	801a      	strh	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00

08003518 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003524:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <FLASH_Program_Byte+0x40>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	4a0b      	ldr	r2, [pc, #44]	@ (8003558 <FLASH_Program_Byte+0x40>)
 800352a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <FLASH_Program_Byte+0x40>)
 8003532:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <FLASH_Program_Byte+0x40>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003538:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <FLASH_Program_Byte+0x40>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	4a06      	ldr	r2, [pc, #24]	@ (8003558 <FLASH_Program_Byte+0x40>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	701a      	strb	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00

0800355c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003560:	4b2f      	ldr	r3, [pc, #188]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800356c:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f043 0310 	orr.w	r3, r3, #16
 8003574:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 8003576:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003578:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 800357a:	2210      	movs	r2, #16
 800357c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800357e:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 8003594:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003596:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 8003598:	2220      	movs	r2, #32
 800359a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80035b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80035ba:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80035d2:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035d4:	2280      	movs	r2, #128	@ 0x80
 80035d6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 80035ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003604:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <FLASH_SetErrorCode+0xc8>)
 800360e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003610:	4b03      	ldr	r3, [pc, #12]	@ (8003620 <FLASH_SetErrorCode+0xc4>)
 8003612:	2202      	movs	r2, #2
 8003614:	60da      	str	r2, [r3, #12]
  }
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40023c00 	.word	0x40023c00
 8003624:	20000ee8 	.word	0x20000ee8

08003628 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e010      	b.n	8003666 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d103      	bne.n	8003652 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800364a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e009      	b.n	8003666 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d103      	bne.n	8003660 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003658:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e002      	b.n	8003666 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003660:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003664:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003666:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4a12      	ldr	r2, [pc, #72]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 800366c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800367e:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003684:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003688:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4313      	orrs	r3, r2
 8003694:	4a07      	ldr	r2, [pc, #28]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800369c:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <FLASH_Erase_Sector+0x8c>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a6:	6113      	str	r3, [r2, #16]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e159      	b.n	8003988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 8148 	bne.w	8003982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d005      	beq.n	800370a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003706:	2b02      	cmp	r3, #2
 8003708:	d130      	bne.n	800376c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0201 	and.w	r2, r3, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d017      	beq.n	80037a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d123      	bne.n	80037fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a2 	beq.w	8003982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	4a56      	ldr	r2, [pc, #344]	@ (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800384c:	6453      	str	r3, [r2, #68]	@ 0x44
 800384e:	4b54      	ldr	r3, [pc, #336]	@ (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385a:	4a52      	ldr	r2, [pc, #328]	@ (80039a4 <HAL_GPIO_Init+0x2ec>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a49      	ldr	r2, [pc, #292]	@ (80039a8 <HAL_GPIO_Init+0x2f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_GPIO_Init+0x202>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a48      	ldr	r2, [pc, #288]	@ (80039ac <HAL_GPIO_Init+0x2f4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_GPIO_Init+0x1fe>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a47      	ldr	r2, [pc, #284]	@ (80039b0 <HAL_GPIO_Init+0x2f8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00d      	beq.n	80038b2 <HAL_GPIO_Init+0x1fa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a46      	ldr	r2, [pc, #280]	@ (80039b4 <HAL_GPIO_Init+0x2fc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x1f6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a45      	ldr	r2, [pc, #276]	@ (80039b8 <HAL_GPIO_Init+0x300>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_GPIO_Init+0x1f2>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e008      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038aa:	2307      	movs	r3, #7
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e004      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038ba:	2300      	movs	r3, #0
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f002 0203 	and.w	r2, r2, #3
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	4093      	lsls	r3, r2
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038cc:	4935      	ldr	r1, [pc, #212]	@ (80039a4 <HAL_GPIO_Init+0x2ec>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	3302      	adds	r3, #2
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038da:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_GPIO_Init+0x304>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fe:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003928:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <HAL_GPIO_Init+0x304>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003952:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003958:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <HAL_GPIO_Init+0x304>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800397c:	4a0f      	ldr	r2, [pc, #60]	@ (80039bc <HAL_GPIO_Init+0x304>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	f67f aea2 	bls.w	80036d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3724      	adds	r7, #36	@ 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039dc:	e003      	b.n	80039e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e12b      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fc94 	bl	8002348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a58:	f001 f9b8 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a81      	ldr	r2, [pc, #516]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d807      	bhi.n	8003a78 <HAL_I2C_Init+0x84>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a80      	ldr	r2, [pc, #512]	@ (8003c6c <HAL_I2C_Init+0x278>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	bf94      	ite	ls
 8003a70:	2301      	movls	r3, #1
 8003a72:	2300      	movhi	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e006      	b.n	8003a86 <HAL_I2C_Init+0x92>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c70 <HAL_I2C_Init+0x27c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0e7      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a78      	ldr	r2, [pc, #480]	@ (8003c74 <HAL_I2C_Init+0x280>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a6a      	ldr	r2, [pc, #424]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_I2C_Init+0xd4>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e009      	b.n	8003adc <HAL_I2C_Init+0xe8>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	4a69      	ldr	r2, [pc, #420]	@ (8003c78 <HAL_I2C_Init+0x284>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	3301      	adds	r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	495c      	ldr	r1, [pc, #368]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d819      	bhi.n	8003b30 <HAL_I2C_Init+0x13c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e59      	subs	r1, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b10:	400b      	ands	r3, r1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_I2C_Init+0x138>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e59      	subs	r1, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	e051      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e04f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <HAL_I2C_Init+0x168>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e012      	b.n	8003b82 <HAL_I2C_Init+0x18e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	0099      	lsls	r1, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x196>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e022      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_I2C_Init+0x1bc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e58      	subs	r0, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bae:	e00f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6809      	ldr	r1, [r1, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6911      	ldr	r1, [r2, #16]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68d2      	ldr	r2, [r2, #12]
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	000186a0 	.word	0x000186a0
 8003c6c:	001e847f 	.word	0x001e847f
 8003c70:	003d08ff 	.word	0x003d08ff
 8003c74:	431bde83 	.word	0x431bde83
 8003c78:	10624dd3 	.word	0x10624dd3

08003c7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c96:	f7fe fdcd 	bl	8002834 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	f040 80d9 	bne.w	8003e5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2319      	movs	r3, #25
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	496d      	ldr	r1, [pc, #436]	@ (8003e68 <HAL_I2C_Mem_Write+0x1ec>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f971 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0cc      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Mem_Write+0x56>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0c5      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d007      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2221      	movs	r2, #33	@ 0x21
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2240      	movs	r2, #64	@ 0x40
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a4d      	ldr	r2, [pc, #308]	@ (8003e6c <HAL_I2C_Mem_Write+0x1f0>)
 8003d38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d3a:	88f8      	ldrh	r0, [r7, #6]
 8003d3c:	893a      	ldrh	r2, [r7, #8]
 8003d3e:	8979      	ldrh	r1, [r7, #10]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	4603      	mov	r3, r0
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f890 	bl	8003e70 <I2C_RequestMemoryWrite>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d052      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e081      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa36 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d107      	bne.n	8003d82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d11b      	bne.n	8003dfc <HAL_I2C_Mem_Write+0x180>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d017      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1aa      	bne.n	8003d5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fa29 	bl	8004260 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e016      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	00100002 	.word	0x00100002
 8003e6c:	ffff0000 	.word	0xffff0000

08003e70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	460b      	mov	r3, r1
 8003e84:	813b      	strh	r3, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f878 	bl	8003f9c <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec0:	d103      	bne.n	8003eca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e05f      	b.n	8003f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <I2C_RequestMemoryWrite+0x128>)
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f8d3 	bl	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04c      	b.n	8003f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	6a39      	ldr	r1, [r7, #32]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f95e 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d107      	bne.n	8003f32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e02b      	b.n	8003f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3c:	893b      	ldrh	r3, [r7, #8]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	e021      	b.n	8003f8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f48:	893b      	ldrh	r3, [r7, #8]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f938 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d107      	bne.n	8003f7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e005      	b.n	8003f8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f82:	893b      	ldrh	r3, [r7, #8]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	00010002 	.word	0x00010002

08003f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fac:	e048      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d044      	beq.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fe fc3d 	bl	8002834 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d139      	bne.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10d      	bne.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	e00c      	b.n	800400c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d116      	bne.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e023      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10d      	bne.n	8004066 <I2C_WaitOnFlagUntilTimeout+0xca>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	43da      	mvns	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	e00c      	b.n	8004080 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	d093      	beq.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409e:	e071      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d123      	bne.n	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e067      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d041      	beq.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004100:	f7fe fb98 	bl	8002834 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d136      	bne.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10c      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	43da      	mvns	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e00b      	b.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e021      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10c      	bne.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e00b      	b.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f af6d 	bne.w	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041dc:	e034      	b.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f886 	bl	80042f0 <I2C_IsAcknowledgeFailed>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e034      	b.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d028      	beq.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fb1d 	bl	8002834 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11d      	bne.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004216:	2b80      	cmp	r3, #128	@ 0x80
 8004218:	d016      	beq.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e007      	b.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004252:	2b80      	cmp	r3, #128	@ 0x80
 8004254:	d1c3      	bne.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800426c:	e034      	b.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f83e 	bl	80042f0 <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e034      	b.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d028      	beq.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fe fad5 	bl	8002834 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d016      	beq.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e007      	b.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d1c3      	bne.n	800426e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d11b      	bne.n	8004340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	f043 0204 	orr.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af02      	add	r7, sp, #8
 8004354:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e101      	b.n	8004564 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fe f82c 	bl	80023d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2203      	movs	r2, #3
 8004384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438e:	d102      	bne.n	8004396 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fd8e 	bl	8004ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7c1a      	ldrb	r2, [r3, #16]
 80043a8:	f88d 2000 	strb.w	r2, [sp]
 80043ac:	3304      	adds	r3, #4
 80043ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b0:	f000 fd20 	bl	8004df4 <USB_CoreInit>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0ce      	b.n	8004564 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fd86 	bl	8004ede <USB_SetCurrentMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0bf      	b.n	8004564 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e04a      	b.n	8004480 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3315      	adds	r3, #21
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3314      	adds	r3, #20
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	b298      	uxth	r0, r3
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	332e      	adds	r3, #46	@ 0x2e
 8004426:	4602      	mov	r2, r0
 8004428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3318      	adds	r3, #24
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	331c      	adds	r3, #28
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	3320      	adds	r3, #32
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3324      	adds	r3, #36	@ 0x24
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	3301      	adds	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	791b      	ldrb	r3, [r3, #4]
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3af      	bcc.n	80043ea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e044      	b.n	800451a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	3301      	adds	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	791b      	ldrb	r3, [r3, #4]
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3b5      	bcc.n	8004490 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7c1a      	ldrb	r2, [r3, #16]
 800452c:	f88d 2000 	strb.w	r2, [sp]
 8004530:	3304      	adds	r3, #4
 8004532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004534:	f000 fd20 	bl	8004f78 <USB_DevInit>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00c      	b.n	8004564 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fee8 	bl	8005332 <USB_DevDisconnect>

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e267      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d075      	beq.n	8004676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	4b88      	ldr	r3, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00c      	beq.n	80045b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d112      	bne.n	80045c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a2:	4b82      	ldr	r3, [pc, #520]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	4b7e      	ldr	r3, [pc, #504]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05b      	beq.n	8004674 <HAL_RCC_OscConfig+0x108>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d157      	bne.n	8004674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e242      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_OscConfig+0x74>
 80045d2:	4b76      	ldr	r3, [pc, #472]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a75      	ldr	r2, [pc, #468]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e01d      	b.n	800461c <HAL_RCC_OscConfig+0xb0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x98>
 80045ea:	4b70      	ldr	r3, [pc, #448]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6f      	ldr	r2, [pc, #444]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b6d      	ldr	r3, [pc, #436]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6c      	ldr	r2, [pc, #432]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0xb0>
 8004604:	4b69      	ldr	r3, [pc, #420]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a68      	ldr	r2, [pc, #416]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 800460a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b66      	ldr	r3, [pc, #408]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a65      	ldr	r2, [pc, #404]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800461a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe f906 	bl	8002834 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fe f902 	bl	8002834 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	@ 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e207      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0xc0>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fe f8f2 	bl	8002834 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004654:	f7fe f8ee 	bl	8002834 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	@ 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1f3      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004666:	4b51      	ldr	r3, [pc, #324]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0xe8>
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d063      	beq.n	800474a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004696:	2b08      	cmp	r3, #8
 8004698:	d11c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469a:	4b44      	ldr	r3, [pc, #272]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_RCC_OscConfig+0x152>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e1c7      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4937      	ldr	r1, [pc, #220]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	e03a      	b.n	800474a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046dc:	4b34      	ldr	r3, [pc, #208]	@ (80047b0 <HAL_RCC_OscConfig+0x244>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe f8a7 	bl	8002834 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ea:	f7fe f8a3 	bl	8002834 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e1a8      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4b28      	ldr	r3, [pc, #160]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4925      	ldr	r1, [pc, #148]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]
 800471c:	e015      	b.n	800474a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471e:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_RCC_OscConfig+0x244>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fe f886 	bl	8002834 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472c:	f7fe f882 	bl	8002834 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e187      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d036      	beq.n	80047c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_RCC_OscConfig+0x248>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fe f866 	bl	8002834 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476c:	f7fe f862 	bl	8002834 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e167      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_OscConfig+0x240>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x200>
 800478a:	e01b      	b.n	80047c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <HAL_RCC_OscConfig+0x248>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fe f84f 	bl	8002834 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	e00e      	b.n	80047b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479a:	f7fe f84b 	bl	8002834 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d907      	bls.n	80047b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e150      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	42470000 	.word	0x42470000
 80047b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b8:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1ea      	bne.n	800479a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8097 	beq.w	8004900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d6:	4b81      	ldr	r3, [pc, #516]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	4b7d      	ldr	r3, [pc, #500]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	4a7c      	ldr	r2, [pc, #496]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047f2:	4b7a      	ldr	r3, [pc, #488]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	4b77      	ldr	r3, [pc, #476]	@ (80049e0 <HAL_RCC_OscConfig+0x474>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d118      	bne.n	8004840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800480e:	4b74      	ldr	r3, [pc, #464]	@ (80049e0 <HAL_RCC_OscConfig+0x474>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_RCC_OscConfig+0x474>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481a:	f7fe f80b 	bl	8002834 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fe f807 	bl	8002834 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e10c      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	4b6a      	ldr	r3, [pc, #424]	@ (80049e0 <HAL_RCC_OscConfig+0x474>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x2ea>
 8004848:	4b64      	ldr	r3, [pc, #400]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a63      	ldr	r2, [pc, #396]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
 8004854:	e01c      	b.n	8004890 <HAL_RCC_OscConfig+0x324>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x30c>
 800485e:	4b5f      	ldr	r3, [pc, #380]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	4a5e      	ldr	r2, [pc, #376]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	6713      	str	r3, [r2, #112]	@ 0x70
 800486a:	4b5c      	ldr	r3, [pc, #368]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486e:	4a5b      	ldr	r2, [pc, #364]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	6713      	str	r3, [r2, #112]	@ 0x70
 8004876:	e00b      	b.n	8004890 <HAL_RCC_OscConfig+0x324>
 8004878:	4b58      	ldr	r3, [pc, #352]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487c:	4a57      	ldr	r2, [pc, #348]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	6713      	str	r3, [r2, #112]	@ 0x70
 8004884:	4b55      	ldr	r3, [pc, #340]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004888:	4a54      	ldr	r2, [pc, #336]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800488a:	f023 0304 	bic.w	r3, r3, #4
 800488e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd ffcc 	bl	8002834 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fd ffc8 	bl	8002834 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e0cb      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	4b49      	ldr	r3, [pc, #292]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ee      	beq.n	80048a0 <HAL_RCC_OscConfig+0x334>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c4:	f7fd ffb6 	bl	8002834 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fd ffb2 	bl	8002834 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0b5      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	4b3e      	ldr	r3, [pc, #248]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ee      	bne.n	80048cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	4a38      	ldr	r2, [pc, #224]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a1 	beq.w	8004a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490a:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b08      	cmp	r3, #8
 8004914:	d05c      	beq.n	80049d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d141      	bne.n	80049a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <HAL_RCC_OscConfig+0x478>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd ff86 	bl	8002834 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd ff82 	bl	8002834 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e087      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	019b      	lsls	r3, r3, #6
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	3b01      	subs	r3, #1
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	491b      	ldr	r1, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_RCC_OscConfig+0x478>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fd ff5b 	bl	8002834 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004982:	f7fd ff57 	bl	8002834 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e05c      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x416>
 80049a0:	e054      	b.n	8004a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <HAL_RCC_OscConfig+0x478>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fd ff44 	bl	8002834 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fd ff40 	bl	8002834 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e045      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCC_OscConfig+0x470>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x444>
 80049ce:	e03d      	b.n	8004a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e038      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40007000 	.word	0x40007000
 80049e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <HAL_RCC_OscConfig+0x4ec>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d028      	beq.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d121      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d11a      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d111      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0cc      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b68      	ldr	r3, [pc, #416]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d90c      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b65      	ldr	r3, [pc, #404]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a52      	ldr	r2, [pc, #328]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d044      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d003      	beq.n	8004b1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e067      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4934      	ldr	r1, [pc, #208]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fe72 	bl	8002834 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fe6e 	bl	8002834 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e04f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b25      	ldr	r3, [pc, #148]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d20c      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	@ (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bce:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	@ (8004c1c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd fdd2 	bl	80027ac <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	0800c22c 	.word	0x0800c22c
 8004c20:	20000048 	.word	0x20000048
 8004c24:	20000064 	.word	0x20000064

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c2c:	b090      	sub	sp, #64	@ 0x40
 8004c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c34:	2300      	movs	r3, #0
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c38:	2300      	movs	r3, #0
 8004c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c40:	4b59      	ldr	r3, [pc, #356]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d00d      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x40>
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	f200 80a1 	bhi.w	8004d94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x34>
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d003      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c5a:	e09b      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c5c:	4b53      	ldr	r3, [pc, #332]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x184>)
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c60:	e09b      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c62:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c66:	e098      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c68:	4b4f      	ldr	r3, [pc, #316]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c72:	4b4d      	ldr	r3, [pc, #308]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d028      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	099b      	lsrs	r3, r3, #6
 8004c84:	2200      	movs	r2, #0
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c90:	2100      	movs	r1, #0
 8004c92:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c94:	fb03 f201 	mul.w	r2, r3, r1
 8004c98:	2300      	movs	r3, #0
 8004c9a:	fb00 f303 	mul.w	r3, r0, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4a43      	ldr	r2, [pc, #268]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ca2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	460a      	mov	r2, r1
 8004caa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cae:	4413      	add	r3, r2
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	61fa      	str	r2, [r7, #28]
 8004cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cc2:	f7fb fae5 	bl	8000290 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cce:	e053      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd0:	4b35      	ldr	r3, [pc, #212]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	617a      	str	r2, [r7, #20]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ce2:	f04f 0b00 	mov.w	fp, #0
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	465b      	mov	r3, fp
 8004cea:	f04f 0000 	mov.w	r0, #0
 8004cee:	f04f 0100 	mov.w	r1, #0
 8004cf2:	0159      	lsls	r1, r3, #5
 8004cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf8:	0150      	lsls	r0, r2, #5
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004d02:	eb63 090b 	sbc.w	r9, r3, fp
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004d1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	00eb      	lsls	r3, r5, #3
 8004d2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d30:	00e2      	lsls	r2, r4, #3
 8004d32:	4614      	mov	r4, r2
 8004d34:	461d      	mov	r5, r3
 8004d36:	eb14 030a 	adds.w	r3, r4, sl
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	eb45 030b 	adc.w	r3, r5, fp
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	028b      	lsls	r3, r1, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d58:	4621      	mov	r1, r4
 8004d5a:	028a      	lsls	r2, r1, #10
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	2200      	movs	r2, #0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	60fa      	str	r2, [r7, #12]
 8004d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d6c:	f7fb fa90 	bl	8000290 <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4613      	mov	r3, r2
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	3301      	adds	r3, #1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x184>)
 8004d96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3740      	adds	r7, #64	@ 0x40
 8004da0:	46bd      	mov	sp, r7
 8004da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	017d7840 	.word	0x017d7840

08004db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b03      	ldr	r3, [pc, #12]	@ (8004dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000048 	.word	0x20000048

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dd0:	f7ff fff0 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0a9b      	lsrs	r3, r3, #10
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	@ (8004df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800c23c 	.word	0x0800c23c

08004df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df4:	b084      	sub	sp, #16
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	f107 001c 	add.w	r0, r7, #28
 8004e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d123      	bne.n	8004e56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 faa0 	bl	8005390 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e01b      	b.n	8004e8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa94 	bl	8005390 <USB_CoreReset>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e80:	e005      	b.n	8004e8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e8e:	7fbb      	ldrb	r3, [r7, #30]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10b      	bne.n	8004eac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f043 0206 	orr.w	r2, r3, #6
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b004      	add	sp, #16
 8004eba:	4770      	bx	lr

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d115      	bne.n	8004f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f7fd fc9d 	bl	800284c <HAL_Delay>
      ms += 10U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	330a      	adds	r3, #10
 8004f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa2b 	bl	8005374 <USB_GetMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d01e      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f28:	d9f0      	bls.n	8004f0c <USB_SetCurrentMode+0x2e>
 8004f2a:	e01a      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f3e:	200a      	movs	r0, #10
 8004f40:	f7fd fc84 	bl	800284c <HAL_Delay>
      ms += 10U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	330a      	adds	r3, #10
 8004f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa12 	bl	8005374 <USB_GetMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f5a:	d9f0      	bls.n	8004f3e <USB_SetCurrentMode+0x60>
 8004f5c:	e001      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f66:	d101      	bne.n	8004f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e009      	b.n	8004fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	d9f2      	bls.n	8004f98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11c      	bne.n	8004ff4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ff2:	e00b      	b.n	800500c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005018:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10d      	bne.n	800503c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005028:	2100      	movs	r1, #0
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f968 	bl	8005300 <USB_SetDevSpeed>
 8005030:	e008      	b.n	8005044 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005032:	2101      	movs	r1, #1
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f963 	bl	8005300 <USB_SetDevSpeed>
 800503a:	e003      	b.n	8005044 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800503c:	2103      	movs	r1, #3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f95e 	bl	8005300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005044:	2110      	movs	r1, #16
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8fa 	bl	8005240 <USB_FlushTxFifo>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f924 	bl	80052a4 <USB_FlushRxFifo>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	461a      	mov	r2, r3
 8005086:	2300      	movs	r3, #0
 8005088:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e043      	b.n	8005118 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050a6:	d118      	bne.n	80050da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e013      	b.n	80050ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	e008      	b.n	80050ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800511c:	461a      	mov	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4293      	cmp	r3, r2
 8005122:	d3b5      	bcc.n	8005090 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e043      	b.n	80051b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800513c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005140:	d118      	bne.n	8005174 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e013      	b.n	8005186 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e008      	b.n	8005186 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3301      	adds	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051b6:	461a      	mov	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d3b5      	bcc.n	800512a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f043 0210 	orr.w	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	4b10      	ldr	r3, [pc, #64]	@ (800523c <USB_DevInit+0x2c4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005200:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f043 0208 	orr.w	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005214:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005218:	2b01      	cmp	r3, #1
 800521a:	d107      	bne.n	800522c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005238:	b004      	add	sp, #16
 800523a:	4770      	bx	lr
 800523c:	803c3800 	.word	0x803c3800

08005240 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800525a:	d901      	bls.n	8005260 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e01b      	b.n	8005298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	daf2      	bge.n	800524e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	019b      	lsls	r3, r3, #6
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005284:	d901      	bls.n	800528a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e006      	b.n	8005298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d0f0      	beq.n	8005278 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052bc:	d901      	bls.n	80052c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e018      	b.n	80052f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	daf2      	bge.n	80052b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2210      	movs	r2, #16
 80052d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e0:	d901      	bls.n	80052e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e006      	b.n	80052f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d0f0      	beq.n	80052d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005320:	4313      	orrs	r3, r2
 8005322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800534c:	f023 0303 	bic.w	r3, r3, #3
 8005350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0301 	and.w	r3, r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053a8:	d901      	bls.n	80053ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e01b      	b.n	80053e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	daf2      	bge.n	800539c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d2:	d901      	bls.n	80053d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d0f0      	beq.n	80053c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	460a      	mov	r2, r1
 80053fc:	71fb      	strb	r3, [r7, #7]
 80053fe:	4613      	mov	r3, r2
 8005400:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8005402:	2301      	movs	r3, #1
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	603a      	str	r2, [r7, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	460b      	mov	r3, r1
 8005420:	71bb      	strb	r3, [r7, #6]
 8005422:	4613      	mov	r3, r2
 8005424:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8005442:	79fa      	ldrb	r2, [r7, #7]
 8005444:	491b      	ldr	r1, [pc, #108]	@ (80054b4 <tud_hid_n_ready+0x80>)
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	3301      	adds	r3, #1
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005456:	f001 fd61 	bl	8006f1c <tud_mounted>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <tud_hid_n_ready+0x40>
 8005460:	f001 fd6e 	bl	8006f40 <tud_suspended>
 8005464:	4603      	mov	r3, r0
 8005466:	f083 0301 	eor.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <tud_hid_n_ready+0x40>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <tud_hid_n_ready+0x42>
 8005474:	2300      	movs	r3, #0
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <tud_hid_n_ready+0x6e>
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <tud_hid_n_ready+0x6e>
 8005486:	7bba      	ldrb	r2, [r7, #14]
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f003 f91f 	bl	80086d0 <usbd_edpt_busy>
 8005492:	4603      	mov	r3, r0
 8005494:	f083 0301 	eor.w	r3, r3, #1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <tud_hid_n_ready+0x6e>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <tud_hid_n_ready+0x70>
 80054a2:	2300      	movs	r3, #0
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000f08 	.word	0x20000f08

080054b8 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	@ 0x38
 80054bc:	af00      	add	r7, sp, #0
 80054be:	603a      	str	r2, [r7, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	460b      	mov	r3, r1
 80054c8:	71bb      	strb	r3, [r7, #6]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <tud_hid_n_report+0x20>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e06d      	b.n	80055b4 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80054de:	79fa      	ldrb	r2, [r7, #7]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a34      	ldr	r2, [pc, #208]	@ (80055bc <tud_hid_n_report+0x104>)
 80054ea:	4413      	add	r3, r2
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80054ee:	79fa      	ldrb	r2, [r7, #7]
 80054f0:	4613      	mov	r3, r2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	4413      	add	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <tud_hid_n_report+0x108>)
 80054fa:	4413      	add	r3, r2
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	785a      	ldrb	r2, [r3, #1]
 8005502:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f003 f81b 	bl	8008544 <usbd_edpt_claim>
 800550e:	4603      	mov	r3, r0
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <tud_hid_n_report+0x66>
 800551a:	2300      	movs	r3, #0
 800551c:	e04a      	b.n	80055b4 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d021      	beq.n	8005568 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	79ba      	ldrb	r2, [r7, #6]
 8005528:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 800552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552c:	3310      	adds	r3, #16
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	88bb      	ldrh	r3, [r7, #4]
 8005532:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005534:	220f      	movs	r2, #15
 8005536:	627a      	str	r2, [r7, #36]	@ 0x24
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	623a      	str	r2, [r7, #32]
 800553c:	61fb      	str	r3, [r7, #28]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 800553e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	d202      	bcs.n	800554c <tud_hid_n_report+0x94>
    return -1;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	e005      	b.n	8005558 <tud_hid_n_report+0xa0>
  }
  memcpy(dest, src, count);
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	6a39      	ldr	r1, [r7, #32]
 8005550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005552:	f005 fe95 	bl	800b280 <memcpy>
  return 0;
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <tud_hid_n_report+0xa8>
 800555c:	2300      	movs	r3, #0
 800555e:	e029      	b.n	80055b4 <tud_hid_n_report+0xfc>
    len++;
 8005560:	88bb      	ldrh	r3, [r7, #4]
 8005562:	3301      	adds	r3, #1
 8005564:	80bb      	strh	r3, [r7, #4]
 8005566:	e01a      	b.n	800559e <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	f103 0210 	add.w	r2, r3, #16
 800556e:	88bb      	ldrh	r3, [r7, #4]
 8005570:	61ba      	str	r2, [r7, #24]
 8005572:	2210      	movs	r2, #16
 8005574:	617a      	str	r2, [r7, #20]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	613a      	str	r2, [r7, #16]
 800557a:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	429a      	cmp	r2, r3
 8005582:	d202      	bcs.n	800558a <tud_hid_n_report+0xd2>
    return -1;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	e005      	b.n	8005596 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	6939      	ldr	r1, [r7, #16]
 800558e:	69b8      	ldr	r0, [r7, #24]
 8005590:	f005 fe76 	bl	800b280 <memcpy>
  return 0;
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <tud_hid_n_report+0xe6>
 800559a:	2300      	movs	r3, #0
 800559c:	e00a      	b.n	80055b4 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	7859      	ldrb	r1, [r3, #1]
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	f103 0210 	add.w	r2, r3, #16
 80055a8:	88bb      	ldrh	r3, [r7, #4]
 80055aa:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80055ae:	f003 f819 	bl	80085e4 <usbd_edpt_xfer>
 80055b2:	4603      	mov	r3, r0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3738      	adds	r7, #56	@ 0x38
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000f08 	.word	0x20000f08
 80055c0:	20000f14 	.word	0x20000f14

080055c4 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
 80055d0:	460b      	mov	r3, r1
 80055d2:	71bb      	strb	r3, [r7, #6]
 80055d4:	4613      	mov	r3, r2
 80055d6:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80055d8:	797b      	ldrb	r3, [r7, #5]
 80055da:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	f107 030a 	add.w	r3, r7, #10
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	6019      	str	r1, [r3, #0]
 80055f0:	8892      	ldrh	r2, [r2, #4]
 80055f2:	809a      	strh	r2, [r3, #4]
 80055f4:	e007      	b.n	8005606 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	3302      	adds	r3, #2
 80055fc:	2206      	movs	r2, #6
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f005 fe09 	bl	800b218 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005606:	f107 0208 	add.w	r2, r7, #8
 800560a:	79b9      	ldrb	r1, [r7, #6]
 800560c:	79f8      	ldrb	r0, [r7, #7]
 800560e:	2308      	movs	r3, #8
 8005610:	f7ff ff52 	bl	80054b8 <tud_hid_n_report>
 8005614:	4603      	mov	r3, r0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 800561e:	b580      	push	{r7, lr}
 8005620:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8005622:	2000      	movs	r0, #0
 8005624:	f000 f80a 	bl	800563c <hidd_reset>
}
 8005628:	bf00      	nop
 800562a:	bd80      	pop	{r7, pc}

0800562c <hidd_deinit>:

bool hidd_deinit(void) {
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return true;
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8005646:	220c      	movs	r2, #12
 8005648:	2100      	movs	r1, #0
 800564a:	4803      	ldr	r0, [pc, #12]	@ (8005658 <hidd_reset+0x1c>)
 800564c:	f005 fde4 	bl	800b218 <memset>
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000f08 	.word	0x20000f08

0800565c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b094      	sub	sp, #80	@ 0x50
 8005660:	af02      	add	r7, sp, #8
 8005662:	4603      	mov	r3, r0
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	4613      	mov	r3, r2
 800566a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	795b      	ldrb	r3, [r3, #5]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d001      	beq.n	8005678 <hidd_open+0x1c>
 8005674:	2300      	movs	r3, #0
 8005676:	e0ce      	b.n	8005816 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	791b      	ldrb	r3, [r3, #4]
 800567c:	461a      	mov	r2, r3
 800567e:	00d2      	lsls	r2, r2, #3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8005684:	3312      	adds	r3, #18
 8005686:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800568a:	88ba      	ldrh	r2, [r7, #4]
 800568c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005690:	429a      	cmp	r2, r3
 8005692:	d20a      	bcs.n	80056aa <hidd_open+0x4e>
 8005694:	4b62      	ldr	r3, [pc, #392]	@ (8005820 <hidd_open+0x1c4>)
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d000      	beq.n	80056a6 <hidd_open+0x4a>
 80056a4:	be00      	bkpt	0x0000
 80056a6:	2300      	movs	r3, #0
 80056a8:	e0b5      	b.n	8005816 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b0:	e011      	b.n	80056d6 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 80056b2:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4a59      	ldr	r2, [pc, #356]	@ (8005824 <hidd_open+0x1c8>)
 80056c0:	4413      	add	r3, r2
 80056c2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 80056c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80056cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056d0:	3301      	adds	r3, #1
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0e9      	beq.n	80056b2 <hidd_open+0x56>
 80056de:	e000      	b.n	80056e2 <hidd_open+0x86>
      break;
 80056e0:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80056e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <hidd_open+0xa4>
 80056ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005820 <hidd_open+0x1c4>)
 80056ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d000      	beq.n	80056fc <hidd_open+0xa0>
 80056fa:	be00      	bkpt	0x0000
 80056fc:	2300      	movs	r3, #0
 80056fe:	e08a      	b.n	8005816 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8005700:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	4a46      	ldr	r2, [pc, #280]	@ (8005828 <hidd_open+0x1cc>)
 800570e:	4413      	add	r3, r2
 8005710:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	61fb      	str	r3, [r7, #28]
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	3301      	adds	r3, #1
 8005732:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8005734:	2b21      	cmp	r3, #33	@ 0x21
 8005736:	d00a      	beq.n	800574e <hidd_open+0xf2>
 8005738:	4b39      	ldr	r3, [pc, #228]	@ (8005820 <hidd_open+0x1c4>)
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d000      	beq.n	800574a <hidd_open+0xee>
 8005748:	be00      	bkpt	0x0000
 800574a:	2300      	movs	r3, #0
 800574c:	e063      	b.n	8005816 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 800574e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	7919      	ldrb	r1, [r3, #4]
 800576c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576e:	3302      	adds	r3, #2
 8005770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005772:	3201      	adds	r2, #1
 8005774:	79f8      	ldrb	r0, [r7, #7]
 8005776:	9201      	str	r2, [sp, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2303      	movs	r3, #3
 800577c:	460a      	mov	r2, r1
 800577e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005780:	f002 fe32 	bl	80083e8 <usbd_open_edpt_pair>
 8005784:	4603      	mov	r3, r0
 8005786:	f083 0301 	eor.w	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <hidd_open+0x14a>
 8005790:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <hidd_open+0x1c4>)
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d000      	beq.n	80057a2 <hidd_open+0x146>
 80057a0:	be00      	bkpt	0x0000
 80057a2:	2300      	movs	r3, #0
 80057a4:	e037      	b.n	8005816 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	799b      	ldrb	r3, [r3, #6]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d103      	bne.n	80057b6 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	79da      	ldrb	r2, [r3, #7]
 80057b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b4:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80057b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b8:	2201      	movs	r2, #1
 80057ba:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	789a      	ldrb	r2, [r3, #2]
 80057c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c2:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80057c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	3307      	adds	r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d6:	789b      	ldrb	r3, [r3, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	7899      	ldrb	r1, [r3, #2]
 80057e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e2:	f103 0220 	add.w	r2, r3, #32
 80057e6:	79f8      	ldrb	r0, [r7, #7]
 80057e8:	2310      	movs	r3, #16
 80057ea:	f002 fefb 	bl	80085e4 <usbd_edpt_xfer>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f083 0301 	eor.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <hidd_open+0x1b6>
 80057fa:	4b09      	ldr	r3, [pc, #36]	@ (8005820 <hidd_open+0x1c4>)
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d000      	beq.n	800580c <hidd_open+0x1b0>
 800580a:	be00      	bkpt	0x0000
 800580c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005810:	e001      	b.n	8005816 <hidd_open+0x1ba>
  }

  return drv_len;
 8005812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8005816:	4618      	mov	r0, r3
 8005818:	3748      	adds	r7, #72	@ 0x48
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	e000edf0 	.word	0xe000edf0
 8005824:	20000f08 	.word	0x20000f08
 8005828:	20000f14 	.word	0x20000f14

0800582c <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b094      	sub	sp, #80	@ 0x50
 8005830:	af02      	add	r7, sp, #8
 8005832:	4603      	mov	r3, r0
 8005834:	603a      	str	r2, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
 8005838:	460b      	mov	r3, r1
 800583a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <hidd_control_xfer_cb+0x22>
 800584a:	2300      	movs	r3, #0
 800584c:	e1d6      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	889b      	ldrh	r3, [r3, #4]
 8005852:	b29b      	uxth	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005858:	2300      	movs	r3, #0
 800585a:	77bb      	strb	r3, [r7, #30]
 800585c:	e00f      	b.n	800587e <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 800585e:	7fba      	ldrb	r2, [r7, #30]
 8005860:	498f      	ldr	r1, [pc, #572]	@ (8005aa0 <hidd_control_xfer_cb+0x274>)
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	7ffa      	ldrb	r2, [r7, #31]
 8005870:	429a      	cmp	r2, r3
 8005872:	d101      	bne.n	8005878 <hidd_control_xfer_cb+0x4c>
      return i;
 8005874:	7fbb      	ldrb	r3, [r7, #30]
 8005876:	e006      	b.n	8005886 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005878:	7fbb      	ldrb	r3, [r7, #30]
 800587a:	3301      	adds	r3, #1
 800587c:	77bb      	strb	r3, [r7, #30]
 800587e:	7fbb      	ldrb	r3, [r7, #30]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ec      	beq.n	800585e <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8005884:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8005886:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 800588a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <hidd_control_xfer_cb+0x6a>
 8005892:	2300      	movs	r3, #0
 8005894:	e1b2      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8005896:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800589a:	4613      	mov	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a7f      	ldr	r2, [pc, #508]	@ (8005aa0 <hidd_control_xfer_cb+0x274>)
 80058a4:	4413      	add	r3, r2
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 80058a8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	4a7b      	ldr	r2, [pc, #492]	@ (8005aa4 <hidd_control_xfer_cb+0x278>)
 80058b6:	4413      	add	r3, r2
 80058b8:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d145      	bne.n	8005954 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 80058c8:	79bb      	ldrb	r3, [r7, #6]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	f040 8195 	bne.w	8005bfa <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	885b      	ldrh	r3, [r3, #2]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80058d8:	8bbb      	ldrh	r3, [r7, #28]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d11b      	bne.n	8005924 <hidd_control_xfer_cb+0xf8>
 80058ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f0:	2b21      	cmp	r3, #33	@ 0x21
 80058f2:	d117      	bne.n	8005924 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <hidd_control_xfer_cb+0xd4>
 80058fc:	2300      	movs	r3, #0
 80058fe:	e17d      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	79f8      	ldrb	r0, [r7, #7]
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	f003 f851 	bl	80089b4 <tud_control_xfer>
 8005912:	4603      	mov	r3, r0
 8005914:	f083 0301 	eor.w	r3, r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 816d 	beq.w	8005bfa <hidd_control_xfer_cb+0x3ce>
 8005920:	2300      	movs	r3, #0
 8005922:	e16b      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d111      	bne.n	8005950 <hidd_control_xfer_cb+0x124>
 800592c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005930:	2b22      	cmp	r3, #34	@ 0x22
 8005932:	d10d      	bne.n	8005950 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8005934:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005938:	4618      	mov	r0, r3
 800593a:	f7fc fe33 	bl	80025a4 <tud_hid_descriptor_report_cb>
 800593e:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	889b      	ldrh	r3, [r3, #4]
 8005944:	79f8      	ldrb	r0, [r7, #7]
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	f003 f833 	bl	80089b4 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800594e:	e154      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8005950:	2300      	movs	r3, #0
 8005952:	e153      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	f040 813e 	bne.w	8005be0 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	3b01      	subs	r3, #1
 800596a:	2b0a      	cmp	r3, #10
 800596c:	f200 8136 	bhi.w	8005bdc <hidd_control_xfer_cb+0x3b0>
 8005970:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <hidd_control_xfer_cb+0x14c>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059a5 	.word	0x080059a5
 800597c:	08005b7b 	.word	0x08005b7b
 8005980:	08005b91 	.word	0x08005b91
 8005984:	08005bdd 	.word	0x08005bdd
 8005988:	08005bdd 	.word	0x08005bdd
 800598c:	08005bdd 	.word	0x08005bdd
 8005990:	08005bdd 	.word	0x08005bdd
 8005994:	08005bdd 	.word	0x08005bdd
 8005998:	08005a7b 	.word	0x08005a7b
 800599c:	08005b35 	.word	0x08005b35
 80059a0:	08005ba7 	.word	0x08005ba7
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 80059a4:	79bb      	ldrb	r3, [r7, #6]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	f040 811c 	bne.w	8005be4 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	885b      	ldrh	r3, [r3, #2]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	82bb      	strh	r3, [r7, #20]
 80059b4:	8abb      	ldrh	r3, [r7, #20]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	885b      	ldrh	r3, [r3, #2]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80059c8:	8afb      	ldrh	r3, [r7, #22]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	88db      	ldrh	r3, [r3, #6]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	837b      	strh	r3, [r7, #26]
 80059dc:	2310      	movs	r3, #16
 80059de:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80059e0:	8b7a      	ldrh	r2, [r7, #26]
 80059e2:	8b3b      	ldrh	r3, [r7, #24]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bf28      	it	cs
 80059e8:	4613      	movcs	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80059f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d013      	beq.n	8005a26 <hidd_control_xfer_cb+0x1fa>
 80059fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d90f      	bls.n	8005a26 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8005a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a0c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005a10:	701a      	strb	r2, [r3, #0]
            req_len--;
 8005a12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a16:	3b01      	subs	r3, #1
 8005a18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8005a1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8005a26:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005a2a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005a2e:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a3a:	f7fa ff15 	bl	8000868 <tud_hid_get_report_cb>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a46:	4413      	add	r3, r2
 8005a48:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <hidd_control_xfer_cb+0x23e>
 8005a54:	4b14      	ldr	r3, [pc, #80]	@ (8005aa8 <hidd_control_xfer_cb+0x27c>)
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d000      	beq.n	8005a66 <hidd_control_xfer_cb+0x23a>
 8005a64:	be00      	bkpt	0x0000
 8005a66:	2300      	movs	r3, #0
 8005a68:	e0c8      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a70:	79f8      	ldrb	r0, [r7, #7]
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	f002 ff9e 	bl	80089b4 <tud_control_xfer>
        }
        break;
 8005a78:	e0b4      	b.n	8005be4 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a7a:	79bb      	ldrb	r3, [r7, #6]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d115      	bne.n	8005aac <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	88db      	ldrh	r3, [r3, #6]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d901      	bls.n	8005a8e <hidd_control_xfer_cb+0x262>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e0b6      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	88db      	ldrh	r3, [r3, #6]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	79f8      	ldrb	r0, [r7, #7]
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	f002 ff8b 	bl	80089b4 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8005a9e:	e0a3      	b.n	8005be8 <hidd_control_xfer_cb+0x3bc>
 8005aa0:	20000f08 	.word	0x20000f08
 8005aa4:	20000f14 	.word	0x20000f14
 8005aa8:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8005aac:	79bb      	ldrb	r3, [r7, #6]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	f040 809a 	bne.w	8005be8 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005abc:	89bb      	ldrh	r3, [r7, #12]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	885b      	ldrh	r3, [r3, #2]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005ad0:	89fb      	ldrh	r3, [r7, #14]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	88db      	ldrh	r3, [r3, #6]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	827b      	strh	r3, [r7, #18]
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005ae8:	8a7a      	ldrh	r2, [r7, #18]
 8005aea:	8a3b      	ldrh	r3, [r7, #16]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bf28      	it	cs
 8005af0:	4613      	movcs	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8005af6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00e      	beq.n	8005b1c <hidd_control_xfer_cb+0x2f0>
 8005afe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d90b      	bls.n	8005b1c <hidd_control_xfer_cb+0x2f0>
 8005b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d105      	bne.n	8005b1c <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8005b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b12:	3301      	adds	r3, #1
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8005b16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8005b1c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005b20:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005b24:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005b28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2e:	f7fa feac 	bl	800088a <tud_hid_set_report_cb>
        break;
 8005b32:	e059      	b.n	8005be8 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005b34:	79bb      	ldrb	r3, [r7, #6]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d158      	bne.n	8005bec <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	885b      	ldrh	r3, [r3, #2]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4c:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b50:	79da      	ldrb	r2, [r3, #7]
 8005b52:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fc4a 	bl	80053f2 <tud_hid_set_idle_cb>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f083 0301 	eor.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <hidd_control_xfer_cb+0x342>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e046      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 feac 	bl	80088d0 <tud_control_status>
        }
        break;
 8005b78:	e038      	b.n	8005bec <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005b7a:	79bb      	ldrb	r3, [r7, #6]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d137      	bne.n	8005bf0 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	1dda      	adds	r2, r3, #7
 8005b84:	79f8      	ldrb	r0, [r7, #7]
 8005b86:	2301      	movs	r3, #1
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	f002 ff13 	bl	80089b4 <tud_control_xfer>
        }
        break;
 8005b8e:	e02f      	b.n	8005bf0 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005b90:	79bb      	ldrb	r3, [r7, #6]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d12e      	bne.n	8005bf4 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b98:	1d9a      	adds	r2, r3, #6
 8005b9a:	79f8      	ldrb	r0, [r7, #7]
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	f002 ff08 	bl	80089b4 <tud_control_xfer>
        }
        break;
 8005ba4:	e026      	b.n	8005bf4 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005ba6:	79bb      	ldrb	r3, [r7, #6]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d105      	bne.n	8005bb8 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f002 fe8d 	bl	80088d0 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005bb6:	e01f      	b.n	8005bf8 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005bb8:	79bb      	ldrb	r3, [r7, #6]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d11c      	bne.n	8005bf8 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc8:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	799a      	ldrb	r2, [r3, #6]
 8005bce:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fa fe2b 	bl	8000830 <tud_hid_set_protocol_cb>
        break;
 8005bda:	e00d      	b.n	8005bf8 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e00d      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8005be0:	2300      	movs	r3, #0
 8005be2:	e00b      	b.n	8005bfc <hidd_control_xfer_cb+0x3d0>
        break;
 8005be4:	bf00      	nop
 8005be6:	e008      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
        break;
 8005be8:	bf00      	nop
 8005bea:	e006      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
        break;
 8005bec:	bf00      	nop
 8005bee:	e004      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
        break;
 8005bf0:	bf00      	nop
 8005bf2:	e002      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <hidd_control_xfer_cb+0x3ce>
        break;
 8005bf8:	bf00      	nop
  }

  return true;
 8005bfa:	2301      	movs	r3, #1
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3748      	adds	r7, #72	@ 0x48
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	71fb      	strb	r3, [r7, #7]
 8005c10:	460b      	mov	r3, r1
 8005c12:	71bb      	strb	r3, [r7, #6]
 8005c14:	4613      	mov	r3, r2
 8005c16:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005c18:	2300      	movs	r3, #0
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e014      	b.n	8005c48 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8005c1e:	7ffa      	ldrb	r2, [r7, #31]
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a3e      	ldr	r2, [pc, #248]	@ (8005d24 <hidd_xfer_cb+0x120>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	789b      	ldrb	r3, [r3, #2]
 8005c32:	79ba      	ldrb	r2, [r7, #6]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d00a      	beq.n	8005c4e <hidd_xfer_cb+0x4a>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	79ba      	ldrb	r2, [r7, #6]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d005      	beq.n	8005c4e <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005c42:	7ffb      	ldrb	r3, [r7, #31]
 8005c44:	3301      	adds	r3, #1
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0e7      	beq.n	8005c1e <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8005c4e:	7ffb      	ldrb	r3, [r7, #31]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <hidd_xfer_cb+0x66>
 8005c54:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <hidd_xfer_cb+0x124>)
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d000      	beq.n	8005c66 <hidd_xfer_cb+0x62>
 8005c64:	be00      	bkpt	0x0000
 8005c66:	2300      	movs	r3, #0
 8005c68:	e057      	b.n	8005d1a <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005c6a:	7ffa      	ldrb	r2, [r7, #31]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <hidd_xfer_cb+0x128>)
 8005c76:	4413      	add	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	79ba      	ldrb	r2, [r7, #6]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d116      	bne.n	8005cb2 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005c84:	797b      	ldrb	r3, [r7, #5]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f103 0110 	add.w	r1, r3, #16
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	7ffb      	ldrb	r3, [r7, #31]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fdd8 	bl	800084c <tud_hid_report_complete_cb>
 8005c9c:	e03c      	b.n	8005d18 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f103 0210 	add.w	r2, r3, #16
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	7ff8      	ldrb	r0, [r7, #31]
 8005caa:	2101      	movs	r1, #1
 8005cac:	f7ff fbb0 	bl	8005410 <tud_hid_report_failed_cb>
 8005cb0:	e032      	b.n	8005d18 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8005cb2:	797b      	ldrb	r3, [r7, #5]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10c      	bne.n	8005cd2 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f103 0220 	add.w	r2, r3, #32
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	7ff8      	ldrb	r0, [r7, #31]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	2202      	movs	r2, #2
 8005cca:	2100      	movs	r1, #0
 8005ccc:	f7fa fddd 	bl	800088a <tud_hid_set_report_cb>
 8005cd0:	e008      	b.n	8005ce4 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f103 0220 	add.w	r2, r3, #32
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	7ff8      	ldrb	r0, [r7, #31]
 8005cde:	2102      	movs	r1, #2
 8005ce0:	f7ff fb96 	bl	8005410 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	7899      	ldrb	r1, [r3, #2]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f103 0220 	add.w	r2, r3, #32
 8005cee:	79f8      	ldrb	r0, [r7, #7]
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f002 fc77 	bl	80085e4 <usbd_edpt_xfer>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f083 0301 	eor.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <hidd_xfer_cb+0x114>
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <hidd_xfer_cb+0x124>)
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d000      	beq.n	8005d14 <hidd_xfer_cb+0x110>
 8005d12:	be00      	bkpt	0x0000
 8005d14:	2300      	movs	r3, #0
 8005d16:	e000      	b.n	8005d1a <hidd_xfer_cb+0x116>
  }

  return true;
 8005d18:	2301      	movs	r3, #1
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000f08 	.word	0x20000f08
 8005d28:	e000edf0 	.word	0xe000edf0
 8005d2c:	20000f14 	.word	0x20000f14

08005d30 <tud_vendor_n_mounted>:

//--------------------------------------------------------------------
// Application API
//--------------------------------------------------------------------

bool tud_vendor_n_mounted(uint8_t itf) {
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <tud_vendor_n_mounted+0x14>
 8005d40:	2300      	movs	r3, #0
 8005d42:	e015      	b.n	8005d70 <tud_vendor_n_mounted+0x40>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	22ac      	movs	r2, #172	@ 0xac
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d7c <tud_vendor_n_mounted+0x4c>)
 8005d4e:	4413      	add	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  return p_itf->rx.stream.ep_addr || p_itf->tx.stream.ep_addr;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <tud_vendor_n_mounted+0x34>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	795b      	ldrb	r3, [r3, #5]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <tud_vendor_n_mounted+0x38>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <tud_vendor_n_mounted+0x3a>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000f44 	.word	0x20000f44

08005d80 <tud_vendor_n_write_flush>:
  const uint8_t rhport = 0;

  return tu_edpt_stream_write(rhport, &p_itf->tx.stream, buffer, (uint16_t) bufsize);
}

uint32_t tud_vendor_n_write_flush (uint8_t itf) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR, 0);
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <tud_vendor_n_write_flush+0x14>
 8005d90:	2300      	movs	r3, #0
 8005d92:	e010      	b.n	8005db6 <tud_vendor_n_write_flush+0x36>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	22ac      	movs	r2, #172	@ 0xac
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	4a08      	ldr	r2, [pc, #32]	@ (8005dc0 <tud_vendor_n_write_flush+0x40>)
 8005d9e:	4413      	add	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  const uint8_t rhport = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	72fb      	strb	r3, [r7, #11]

  return tu_edpt_stream_write_xfer(rhport, &p_itf->tx.stream);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f005 f87c 	bl	800aeac <tu_edpt_stream_write_xfer>
 8005db4:	4603      	mov	r3, r0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000f44 	.word	0x20000f44

08005dc4 <vendord_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af04      	add	r7, sp, #16
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
 8005dca:	22ac      	movs	r2, #172	@ 0xac
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4821      	ldr	r0, [pc, #132]	@ (8005e54 <vendord_init+0x90>)
 8005dd0:	f005 fa22 	bl	800b218 <memset>

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	75fb      	strb	r3, [r7, #23]
 8005dd8:	e034      	b.n	8005e44 <vendord_init+0x80>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	22ac      	movs	r2, #172	@ 0xac
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e54 <vendord_init+0x90>)
 8005de4:	4413      	add	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
    vendord_epbuf_t* p_epbuf = &_vendord_epbuf[i];
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	01db      	lsls	r3, r3, #7
 8005dec:	4a1a      	ldr	r2, [pc, #104]	@ (8005e58 <vendord_init+0x94>)
 8005dee:	4413      	add	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

    uint8_t* rx_ff_buf =
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	336c      	adds	r3, #108	@ 0x6c
 8005df6:	60bb      	str	r3, [r7, #8]
                          p_itf->rx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                        rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE,
                        p_epbuf->epout, CFG_TUD_VENDOR_EPSIZE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8005e00:	2240      	movs	r2, #64	@ 0x40
 8005e02:	9203      	str	r2, [sp, #12]
 8005e04:	9302      	str	r3, [sp, #8]
 8005e06:	2340      	movs	r3, #64	@ 0x40
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	f004 ff9d 	bl	800ad52 <tu_edpt_stream_init>

    uint8_t* tx_ff_buf =
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3318      	adds	r3, #24
 8005e1c:	607b      	str	r3, [r7, #4]
                          p_itf->tx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1d18      	adds	r0, r3, #4
                        tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE,
                        p_epbuf->epin, CFG_TUD_VENDOR_EPSIZE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3340      	adds	r3, #64	@ 0x40
    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	9203      	str	r2, [sp, #12]
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	2340      	movs	r3, #64	@ 0x40
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	2201      	movs	r2, #1
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f004 ff8a 	bl	800ad52 <tu_edpt_stream_init>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	3301      	adds	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0c7      	beq.n	8005dda <vendord_init+0x16>
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000f44 	.word	0x20000f44
 8005e58:	20000ff0 	.word	0x20000ff0

08005e5c <vendord_deinit>:

bool vendord_deinit(void) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005e62:	2300      	movs	r3, #0
 8005e64:	71fb      	strb	r3, [r7, #7]
 8005e66:	e013      	b.n	8005e90 <vendord_deinit+0x34>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	22ac      	movs	r2, #172	@ 0xac
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea0 <vendord_deinit+0x44>)
 8005e72:	4413      	add	r3, r2
 8005e74:	603b      	str	r3, [r7, #0]
    tu_edpt_stream_deinit(&p_itf->rx.stream);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3358      	adds	r3, #88	@ 0x58
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f004 ff91 	bl	800ada2 <tu_edpt_stream_deinit>
    tu_edpt_stream_deinit(&p_itf->tx.stream);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f004 ff8c 	bl	800ada2 <tu_edpt_stream_deinit>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	71fb      	strb	r3, [r7, #7]
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0e8      	beq.n	8005e68 <vendord_deinit+0xc>
  }
  return true;
 8005e96:	2301      	movs	r3, #1
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000f44 	.word	0x20000f44

08005ea4 <vendord_reset>:

void vendord_reset(uint8_t rhport) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005eae:	2300      	movs	r3, #0
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e02c      	b.n	8005f0e <vendord_reset+0x6a>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005eb4:	7ffb      	ldrb	r3, [r7, #31]
 8005eb6:	22ac      	movs	r2, #172	@ 0xac
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <vendord_reset+0x7c>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	69b8      	ldr	r0, [r7, #24]
 8005ec8:	f005 f9a6 	bl	800b218 <memset>
    tu_edpt_stream_clear(&p_itf->rx.stream);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	3358      	adds	r3, #88	@ 0x58
 8005ed0:	60bb      	str	r3, [r7, #8]
}

// Clear fifo
TU_ATTR_ALWAYS_INLINE static inline
bool tu_edpt_stream_clear(tu_edpt_stream_t* s) {
  return tu_fifo_clear(&s->ff);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 ffb7 	bl	8006e4a <tu_fifo_clear>
    tu_edpt_stream_clear(&p_itf->tx.stream);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 ffaf 	bl	8006e4a <tu_fifo_clear>
    tu_edpt_stream_close(&p_itf->rx.stream);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	3358      	adds	r3, #88	@ 0x58
 8005ef0:	613b      	str	r3, [r7, #16]
  s->ep_addr = 0;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	705a      	strb	r2, [r3, #1]
}
 8005ef8:	bf00      	nop
    tu_edpt_stream_close(&p_itf->tx.stream);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3304      	adds	r3, #4
 8005efe:	617b      	str	r3, [r7, #20]
  s->ep_addr = 0;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	705a      	strb	r2, [r3, #1]
}
 8005f06:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	7ffb      	ldrb	r3, [r7, #31]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0cf      	beq.n	8005eb4 <vendord_reset+0x10>
  }
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000f44 	.word	0x20000f44

08005f24 <vendord_open>:

uint16_t vendord_open(uint8_t rhport, const tusb_desc_interface_t* desc_itf, uint16_t max_len) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b09c      	sub	sp, #112	@ 0x70
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	6039      	str	r1, [r7, #0]
 8005f2e:	71fb      	strb	r3, [r7, #7]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	795b      	ldrb	r3, [r3, #5]
 8005f38:	2bff      	cmp	r3, #255	@ 0xff
 8005f3a:	d001      	beq.n	8005f40 <vendord_open+0x1c>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e114      	b.n	800616a <vendord_open+0x246>
  const uint8_t* desc_end = (const uint8_t*)desc_itf + max_len;
 8005f40:	88bb      	ldrh	r3, [r7, #4]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f58:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(desc_itf);
 8005f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  // Find available interface
  vendord_interface_t* p_vendor = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005f66:	e018      	b.n	8005f9a <vendord_open+0x76>
    if (!tud_vendor_n_mounted(i)) {
 8005f68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fedf 	bl	8005d30 <tud_vendor_n_mounted>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f083 0301 	eor.w	r3, r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <vendord_open+0x6c>
      p_vendor = &_vendord_itf[i];
 8005f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005f82:	22ac      	movs	r2, #172	@ 0xac
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	4a7a      	ldr	r2, [pc, #488]	@ (8006174 <vendord_open+0x250>)
 8005f8a:	4413      	add	r3, r2
 8005f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
      break;
 8005f8e:	e008      	b.n	8005fa2 <vendord_open+0x7e>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005f90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005f94:	3301      	adds	r3, #1
 8005f96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005f9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0e2      	beq.n	8005f68 <vendord_open+0x44>
    }
  }
  TU_VERIFY(p_vendor, 0);
 8005fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <vendord_open+0x88>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e0de      	b.n	800616a <vendord_open+0x246>

  p_vendor->itf_num = desc_itf->bInterfaceNumber;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	789a      	ldrb	r2, [r3, #2]
 8005fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb2:	701a      	strb	r2, [r3, #0]
  while (tu_desc_is_valid(p_desc, desc_end)) {
 8005fb4:	e0b8      	b.n	8006128 <vendord_open+0x204>
 8005fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	781b      	ldrb	r3, [r3, #0]
    const uint8_t desc_type = tu_desc_type(p_desc);
 8005fc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (desc_type == TUSB_DESC_INTERFACE || desc_type == TUSB_DESC_INTERFACE_ASSOCIATION) {
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	f000 80ca 	beq.w	8006162 <vendord_open+0x23e>
 8005fce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fd2:	2b0b      	cmp	r3, #11
 8005fd4:	f000 80c5 	beq.w	8006162 <vendord_open+0x23e>
      break; // end of this interface
    } else if (desc_type == TUSB_DESC_ENDPOINT) {
 8005fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	f040 8099 	bne.w	8006114 <vendord_open+0x1f0>
      const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8005fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
      TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 fa64 	bl	80084b8 <usbd_edpt_open>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f083 0301 	eor.w	r3, r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <vendord_open+0xee>
 8005ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8006178 <vendord_open+0x254>)
 8005ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d000      	beq.n	800600e <vendord_open+0xea>
 800600c:	be00      	bkpt	0x0000
 800600e:	2300      	movs	r3, #0
 8006010:	e0ab      	b.n	800616a <vendord_open+0x246>

      // open endpoint stream, skip if already opened
      if (tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN) {
 8006012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800601a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d139      	bne.n	800609a <vendord_open+0x176>
        if (p_vendor->tx.stream.ep_addr == 0) {
 8006026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006028:	795b      	ldrb	r3, [r3, #5]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d172      	bne.n	8006114 <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->tx.stream, desc_ep);
 800602e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006030:	3304      	adds	r3, #4
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006036:	63bb      	str	r3, [r7, #56]	@ 0x38
  tu_fifo_clear(&s->ff);
 8006038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603a:	3308      	adds	r3, #8
 800603c:	4618      	mov	r0, r3
 800603e:	f000 ff04 	bl	8006e4a <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	789a      	ldrb	r2, [r3, #2]
 8006046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006048:	705a      	strb	r2, [r3, #1]
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800604e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006050:	889b      	ldrh	r3, [r3, #4]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006058:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 800605a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2d9      	uxtb	r1, r3
 8006066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006068:	7813      	ldrb	r3, [r2, #0]
 800606a:	f361 0341 	bfi	r3, r1, #1, #1
 800606e:	7013      	strb	r3, [r2, #0]
}
 8006070:	bf00      	nop
          tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
 8006072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006074:	4a3f      	ldr	r2, [pc, #252]	@ (8006174 <vendord_open+0x250>)
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	1099      	asrs	r1, r3, #2
 800607a:	460a      	mov	r2, r1
 800607c:	0052      	lsls	r2, r2, #1
 800607e:	440a      	add	r2, r1
 8006080:	01d3      	lsls	r3, r2, #7
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	039a      	lsls	r2, r3, #14
 8006086:	4413      	add	r3, r2
 8006088:	019b      	lsls	r3, r3, #6
 800608a:	440b      	add	r3, r1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	440b      	add	r3, r1
 8006090:	b2db      	uxtb	r3, r3
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fe74 	bl	8005d80 <tud_vendor_n_write_flush>
 8006098:	e03c      	b.n	8006114 <vendord_open+0x1f0>
        }
      } else {
        if (p_vendor->rx.stream.ep_addr == 0) {
 800609a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800609c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d137      	bne.n	8006114 <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->rx.stream, desc_ep);
 80060a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060a6:	3358      	adds	r3, #88	@ 0x58
 80060a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tu_fifo_clear(&s->ff);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	3308      	adds	r3, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fec9 	bl	8006e4a <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	789a      	ldrb	r2, [r3, #2]
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	705a      	strb	r2, [r3, #1]
 80060c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	889b      	ldrh	r3, [r3, #4]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ce:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d4:	bf0c      	ite	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	2300      	movne	r3, #0
 80060da:	b2d9      	uxtb	r1, r3
 80060dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060de:	7813      	ldrb	r3, [r2, #0]
 80060e0:	f361 0341 	bfi	r3, r1, #1, #1
 80060e4:	7013      	strb	r3, [r2, #0]
}
 80060e6:	bf00      	nop
          TU_ASSERT(tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream) > 0, 0); // prepare for incoming data
 80060e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ea:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f004 ff60 	bl	800afb8 <tu_edpt_stream_read_xfer>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <vendord_open+0x1f0>
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <vendord_open+0x254>)
 8006100:	657b      	str	r3, [r7, #84]	@ 0x54
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d000      	beq.n	8006110 <vendord_open+0x1ec>
 800610e:	be00      	bkpt	0x0000
 8006110:	2300      	movs	r3, #0
 8006112:	e02a      	b.n	800616a <vendord_open+0x246>
 8006114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	4413      	add	r3, r2
        }
      }
    }

    p_desc = tu_desc_next(p_desc);
 8006126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800612e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_subtype(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_SUBTYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_is_valid(void const* desc, uint8_t const* desc_end) {
  const uint8_t* desc8 = (uint8_t const*) desc;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	617b      	str	r3, [r7, #20]
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	429a      	cmp	r2, r3
 800613a:	d90d      	bls.n	8006158 <vendord_open+0x234>
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d301      	bcc.n	8006158 <vendord_open+0x234>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <vendord_open+0x236>
 8006158:	2300      	movs	r3, #0
 800615a:	b2db      	uxtb	r3, r3
  while (tu_desc_is_valid(p_desc, desc_end)) {
 800615c:	2b00      	cmp	r3, #0
 800615e:	f47f af2a 	bne.w	8005fb6 <vendord_open+0x92>
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
 8006162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
}
 800616a:	4618      	mov	r0, r3
 800616c:	3770      	adds	r7, #112	@ 0x70
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000f44 	.word	0x20000f44
 8006178:	e000edf0 	.word	0xe000edf0

0800617c <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	71fb      	strb	r3, [r7, #7]
 8006188:	460b      	mov	r3, r1
 800618a:	71bb      	strb	r3, [r7, #6]
 800618c:	4613      	mov	r3, r2
 800618e:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf;
  vendord_interface_t* p_vendor;

  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 8006190:	2300      	movs	r3, #0
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e014      	b.n	80061c0 <vendord_xfer_cb+0x44>
    p_vendor = &_vendord_itf[itf];
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	22ac      	movs	r2, #172	@ 0xac
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	4a3a      	ldr	r2, [pc, #232]	@ (8006288 <vendord_xfer_cb+0x10c>)
 80061a0:	4413      	add	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_vendor->rx.stream.ep_addr) || (ep_addr == p_vendor->tx.stream.ep_addr)) {
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061aa:	79ba      	ldrb	r2, [r7, #6]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d00a      	beq.n	80061c6 <vendord_xfer_cb+0x4a>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	795b      	ldrb	r3, [r3, #5]
 80061b4:	79ba      	ldrb	r2, [r7, #6]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d005      	beq.n	80061c6 <vendord_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 80061ba:	7ffb      	ldrb	r3, [r7, #31]
 80061bc:	3301      	adds	r3, #1
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0e7      	beq.n	8006196 <vendord_xfer_cb+0x1a>
      break;
    }
  }
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <vendord_xfer_cb+0x54>
 80061cc:	2300      	movs	r3, #0
 80061ce:	e056      	b.n	800627e <vendord_xfer_cb+0x102>
  vendord_epbuf_t* p_epbuf = &_vendord_epbuf[itf];
 80061d0:	7ffb      	ldrb	r3, [r7, #31]
 80061d2:	01db      	lsls	r3, r3, #7
 80061d4:	4a2d      	ldr	r2, [pc, #180]	@ (800628c <vendord_xfer_cb+0x110>)
 80061d6:	4413      	add	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  if ( ep_addr == p_vendor->rx.stream.ep_addr ) {
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061e0:	79ba      	ldrb	r2, [r7, #6]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d129      	bne.n	800623a <vendord_xfer_cb+0xbe>
    // Received new data: put into stream's fifo
    tu_edpt_stream_read_xfer_complete(&p_vendor->rx.stream, xferred_bytes);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3358      	adds	r3, #88	@ 0x58
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s);

// Complete read transfer by writing EP -> FIFO. Must be called in the transfer complete callback
TU_ATTR_ALWAYS_INLINE static inline
void tu_edpt_stream_read_xfer_complete(tu_edpt_stream_t* s, uint32_t xferred_bytes) {
  if (tu_fifo_depth(&s->ff)) {
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3308      	adds	r3, #8
 80061f4:	60bb      	str	r3, [r7, #8]
bool     tu_fifo_overflowed             (tu_fifo_t* f);
void     tu_fifo_correct_read_pointer   (tu_fifo_t* f);

TU_ATTR_ALWAYS_INLINE static inline
uint16_t tu_fifo_depth(tu_fifo_t* f) {
  return f->depth;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	889b      	ldrh	r3, [r3, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d009      	beq.n	8006212 <vendord_xfer_cb+0x96>
    tu_fifo_write_n(&s->ff, s->ep_buf, (uint16_t) xferred_bytes);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f103 0008 	add.w	r0, r3, #8
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	b292      	uxth	r2, r2
 800620c:	4619      	mov	r1, r3
 800620e:	f000 fdf8 	bl	8006e02 <tu_fifo_write_n>
  }
}
 8006212:	bf00      	nop

    // Invoked callback if any
    if (tud_vendor_rx_cb) {
 8006214:	4b1e      	ldr	r3, [pc, #120]	@ (8006290 <vendord_xfer_cb+0x114>)
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <vendord_xfer_cb+0xac>
      tud_vendor_rx_cb(itf, p_epbuf->epout, (uint16_t) xferred_bytes);
 800621a:	6979      	ldr	r1, [r7, #20]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	b29a      	uxth	r2, r3
 8006220:	7ffb      	ldrb	r3, [r7, #31]
 8006222:	4618      	mov	r0, r3
 8006224:	f3af 8000 	nop.w
    }

    tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f004 fec0 	bl	800afb8 <tu_edpt_stream_read_xfer>
 8006238:	e020      	b.n	800627c <vendord_xfer_cb+0x100>
  } else if ( ep_addr == p_vendor->tx.stream.ep_addr ) {
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	795b      	ldrb	r3, [r3, #5]
 800623e:	79ba      	ldrb	r2, [r7, #6]
 8006240:	429a      	cmp	r2, r3
 8006242:	d11b      	bne.n	800627c <vendord_xfer_cb+0x100>
    // Send complete
    if (tud_vendor_tx_cb) {
 8006244:	4b13      	ldr	r3, [pc, #76]	@ (8006294 <vendord_xfer_cb+0x118>)
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <vendord_xfer_cb+0xde>
      tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f3af 8000 	nop.w
    }

    #if CFG_TUD_VENDOR_TX_BUFSIZE > 0
    // try to send more if possible
    if ( 0 == tu_edpt_stream_write_xfer(rhport, &p_vendor->tx.stream) ) {
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f004 fe22 	bl	800aeac <tu_edpt_stream_write_xfer>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <vendord_xfer_cb+0x100>
      // If there is no data left, a ZLP should be sent if xferred_bytes is multiple of EP Packet size and not zero
      tu_edpt_stream_write_zlp_if_needed(rhport, &p_vendor->tx.stream, xferred_bytes);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f004 fd9e 	bl	800adb8 <tu_edpt_stream_write_zlp_if_needed>
    }
    #endif
  }

  return true;
 800627c:	2301      	movs	r3, #1
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000f44 	.word	0x20000f44
 800628c:	20000ff0 	.word	0x20000ff0
	...

08006298 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	460b      	mov	r3, r1
 80062a8:	80fb      	strh	r3, [r7, #6]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b4:	d901      	bls.n	80062ba <tu_fifo_config+0x22>
 80062b6:	2300      	movs	r3, #0
 80062b8:	e01b      	b.n	80062f2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80062c6:	88bb      	ldrh	r3, [r7, #4]
 80062c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80062cc:	b299      	uxth	r1, r3
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	88d3      	ldrh	r3, [r2, #6]
 80062d2:	f361 030e 	bfi	r3, r1, #0, #15
 80062d6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	79d3      	ldrb	r3, [r2, #7]
 80062dc:	7e39      	ldrb	r1, [r7, #24]
 80062de:	f361 13c7 	bfi	r3, r1, #7, #1
 80062e2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80062f0:	2301      	movs	r3, #1
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b08a      	sub	sp, #40	@ 0x28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	4613      	mov	r3, r2
 800630a:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8006316:	e00b      	b.n	8006330 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	61ba      	str	r2, [r7, #24]
 8006320:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	601a      	str	r2, [r3, #0]
}
 8006328:	bf00      	nop
    ff_buf += 4;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3304      	adds	r3, #4
 800632e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ee      	bne.n	8006318 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006344:	7ffb      	ldrb	r3, [r7, #31]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8006350:	7ffa      	ldrb	r2, [r7, #31]
 8006352:	f107 0310 	add.w	r3, r7, #16
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f004 ff91 	bl	800b280 <memcpy>
  }
}
 800635e:	bf00      	nop
 8006360:	3728      	adds	r7, #40	@ 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	@ 0x28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	4613      	mov	r3, r2
 8006372:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800637e:	e008      	b.n	8006392 <_ff_pull_const_addr+0x2c>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3304      	adds	r3, #4
 8006390:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8006392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f1      	bne.n	8006380 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80063b0:	7ffa      	ldrb	r2, [r7, #31]
 80063b2:	f107 0314 	add.w	r3, r7, #20
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f004 ff61 	bl	800b280 <memcpy>

    *reg_tx = tmp32;
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	601a      	str	r2, [r3, #0]
  }
}
 80063c4:	bf00      	nop
 80063c6:	3728      	adds	r7, #40	@ 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	88c9      	ldrh	r1, [r1, #6]
 80063e4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80063e8:	b289      	uxth	r1, r1
 80063ea:	fb01 f202 	mul.w	r2, r1, r2
 80063ee:	1898      	adds	r0, r3, r2
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88db      	ldrh	r3, [r3, #6]
 80063f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	f004 ff3f 	bl	800b280 <memcpy>
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b08e      	sub	sp, #56	@ 0x38
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	4611      	mov	r1, r2
 8006416:	461a      	mov	r2, r3
 8006418:	460b      	mov	r3, r1
 800641a:	80fb      	strh	r3, [r7, #6]
 800641c:	4613      	mov	r3, r2
 800641e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	889a      	ldrh	r2, [r3, #4]
 8006424:	88bb      	ldrh	r3, [r7, #4]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88db      	ldrh	r3, [r3, #6]
 8006436:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006440:	fb13 f302 	smulbb	r3, r3, r2
 8006444:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88db      	ldrh	r3, [r3, #6]
 800644a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006454:	fb13 f302 	smulbb	r3, r3, r2
 8006458:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	88ba      	ldrh	r2, [r7, #4]
 8006460:	68f9      	ldr	r1, [r7, #12]
 8006462:	88c9      	ldrh	r1, [r1, #6]
 8006464:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006468:	b289      	uxth	r1, r1
 800646a:	fb01 f202 	mul.w	r2, r1, r2
 800646e:	4413      	add	r3, r2
 8006470:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006472:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <_ff_push_n+0x76>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d022      	beq.n	80064c4 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 800647e:	e09e      	b.n	80065be <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006484:	429a      	cmp	r2, r3
 8006486:	d80d      	bhi.n	80064a4 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006488:	88fb      	ldrh	r3, [r7, #6]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	88d2      	ldrh	r2, [r2, #6]
 800648e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006492:	b292      	uxth	r2, r2
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	461a      	mov	r2, r3
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800649e:	f004 feef 	bl	800b280 <memcpy>
      break;
 80064a2:	e08c      	b.n	80065be <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80064a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064a6:	461a      	mov	r2, r3
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ac:	f004 fee8 	bl	800b280 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064bc:	4619      	mov	r1, r3
 80064be:	f004 fedf 	bl	800b280 <memcpy>
      break;
 80064c2:	e07c      	b.n	80065be <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80064c4:	88fa      	ldrh	r2, [r7, #6]
 80064c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d80f      	bhi.n	80064ec <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88db      	ldrh	r3, [r3, #6]
 80064d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	fb13 f302 	smulbb	r3, r3, r2
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e6:	f7ff ff0a 	bl	80062fe <_ff_push_const_addr>
      break;
 80064ea:	e067      	b.n	80065bc <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80064ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80064f4:	8c3b      	ldrh	r3, [r7, #32]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064fc:	f7ff feff 	bl	80062fe <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006500:	8c3b      	ldrh	r3, [r7, #32]
 8006502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006504:	4413      	add	r3, r2
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006508:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006518:	2b00      	cmp	r3, #0
 800651a:	d043      	beq.n	80065a4 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006520:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006524:	b29b      	uxth	r3, r3
 8006526:	f1c3 0304 	rsb	r3, r3, #4
 800652a:	b29a      	uxth	r2, r3
 800652c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800652e:	837b      	strh	r3, [r7, #26]
 8006530:	4613      	mov	r3, r2
 8006532:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006534:	8b7a      	ldrh	r2, [r7, #26]
 8006536:	8b3b      	ldrh	r3, [r7, #24]
 8006538:	4293      	cmp	r3, r2
 800653a:	bf28      	it	cs
 800653c:	4613      	movcs	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006544:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006548:	b29b      	uxth	r3, r3
 800654a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800655c:	e007      	b.n	800656e <_ff_push_n+0x164>
 800655e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006560:	1c53      	adds	r3, r2, #1
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	1c59      	adds	r1, r3, #1
 8006568:	6339      	str	r1, [r7, #48]	@ 0x30
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006572:	1e5a      	subs	r2, r3, #1
 8006574:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8006582:	e007      	b.n	8006594 <_ff_push_n+0x18a>
 8006584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006586:	1c53      	adds	r3, r2, #1
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6339      	str	r1, [r7, #48]	@ 0x30
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <_ff_push_n+0x17a>
 80065a2:	e002      	b.n	80065aa <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80065aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <_ff_push_n+0x1b2>
 80065b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065b2:	461a      	mov	r2, r3
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065b8:	f7ff fea1 	bl	80062fe <_ff_push_const_addr>
      break;
 80065bc:	bf00      	nop
  }
}
 80065be:	bf00      	nop
 80065c0:	3738      	adds	r7, #56	@ 0x38
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	4613      	mov	r3, r2
 80065d2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	88fa      	ldrh	r2, [r7, #6]
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	88c9      	ldrh	r1, [r1, #6]
 80065de:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80065e2:	b289      	uxth	r1, r1
 80065e4:	fb01 f202 	mul.w	r2, r1, r2
 80065e8:	1899      	adds	r1, r3, r2
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	68b8      	ldr	r0, [r7, #8]
 80065f8:	f004 fe42 	bl	800b280 <memcpy>
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	@ 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4611      	mov	r1, r2
 8006610:	461a      	mov	r2, r3
 8006612:	460b      	mov	r3, r1
 8006614:	80fb      	strh	r3, [r7, #6]
 8006616:	4613      	mov	r3, r2
 8006618:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	889a      	ldrh	r2, [r3, #4]
 800661e:	88bb      	ldrh	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	88db      	ldrh	r3, [r3, #6]
 8006630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006634:	b29b      	uxth	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800663a:	fb13 f302 	smulbb	r3, r3, r2
 800663e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88db      	ldrh	r3, [r3, #6]
 8006644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800664e:	fb13 f302 	smulbb	r3, r3, r2
 8006652:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	88ba      	ldrh	r2, [r7, #4]
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	88c9      	ldrh	r1, [r1, #6]
 800665e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006662:	b289      	uxth	r1, r1
 8006664:	fb01 f202 	mul.w	r2, r1, r2
 8006668:	4413      	add	r3, r2
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800666c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <_ff_pull_n+0x76>
 8006674:	2b01      	cmp	r3, #1
 8006676:	d022      	beq.n	80066be <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8006678:	e0a0      	b.n	80067bc <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800667e:	429a      	cmp	r2, r3
 8006680:	d80d      	bhi.n	800669e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	88d2      	ldrh	r2, [r2, #6]
 8006688:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800668c:	b292      	uxth	r2, r2
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	461a      	mov	r2, r3
 8006694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	f004 fdf2 	bl	800b280 <memcpy>
    break;
 800669c:	e08e      	b.n	80067bc <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800669e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066a0:	461a      	mov	r2, r3
 80066a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066a4:	68b8      	ldr	r0, [r7, #8]
 80066a6:	f004 fdeb 	bl	800b280 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80066aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	18d0      	adds	r0, r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066b6:	4619      	mov	r1, r3
 80066b8:	f004 fde2 	bl	800b280 <memcpy>
    break;
 80066bc:	e07e      	b.n	80067bc <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d80f      	bhi.n	80066e6 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	88db      	ldrh	r3, [r3, #6]
 80066ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	fb13 f302 	smulbb	r3, r3, r2
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066de:	68b8      	ldr	r0, [r7, #8]
 80066e0:	f7ff fe41 	bl	8006366 <_ff_pull_const_addr>
    break;
 80066e4:	e069      	b.n	80067ba <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80066e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80066ee:	8c3b      	ldrh	r3, [r7, #32]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066f4:	68b8      	ldr	r0, [r7, #8]
 80066f6:	f7ff fe36 	bl	8006366 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80066fa:	8c3b      	ldrh	r3, [r7, #32]
 80066fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fe:	4413      	add	r3, r2
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006702:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800670e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006712:	2b00      	cmp	r3, #0
 8006714:	d045      	beq.n	80067a2 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800671a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800671e:	b29b      	uxth	r3, r3
 8006720:	f1c3 0304 	rsb	r3, r3, #4
 8006724:	b29a      	uxth	r2, r3
 8006726:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006728:	837b      	strh	r3, [r7, #26]
 800672a:	4613      	mov	r3, r2
 800672c:	833b      	strh	r3, [r7, #24]
 800672e:	8b7a      	ldrh	r2, [r7, #26]
 8006730:	8b3b      	ldrh	r3, [r7, #24]
 8006732:	4293      	cmp	r3, r2
 8006734:	bf28      	it	cs
 8006736:	4613      	movcs	r3, r2
 8006738:	b29b      	uxth	r3, r3
 800673a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800673e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006742:	b29b      	uxth	r3, r3
 8006744:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006754:	e007      	b.n	8006766 <_ff_pull_n+0x162>
 8006756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006758:	1c53      	adds	r3, r2, #1
 800675a:	633b      	str	r3, [r7, #48]	@ 0x30
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800676a:	1e5a      	subs	r2, r3, #1
 800676c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800677a:	e007      	b.n	800678c <_ff_pull_n+0x188>
 800677c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800677e:	1c53      	adds	r3, r2, #1
 8006780:	633b      	str	r3, [r7, #48]	@ 0x30
 8006782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006784:	1c59      	adds	r1, r3, #1
 8006786:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006790:	1e5a      	subs	r2, r3, #1
 8006792:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e002      	b.n	80067a8 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80067a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <_ff_pull_n+0x1b6>
 80067ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067b0:	461a      	mov	r2, r3
 80067b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f7ff fdd6 	bl	8006366 <_ff_pull_const_addr>
    break;
 80067ba:	bf00      	nop
  }
}
 80067bc:	bf00      	nop
 80067be:	3738      	adds	r7, #56	@ 0x38
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	80fb      	strh	r3, [r7, #6]
 80067ce:	460b      	mov	r3, r1
 80067d0:	80bb      	strh	r3, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80067d6:	88ba      	ldrh	r2, [r7, #4]
 80067d8:	887b      	ldrh	r3, [r7, #2]
 80067da:	4413      	add	r3, r2
 80067dc:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80067de:	88ba      	ldrh	r2, [r7, #4]
 80067e0:	89fb      	ldrh	r3, [r7, #14]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d804      	bhi.n	80067f0 <advance_index+0x2c>
 80067e6:	89fa      	ldrh	r2, [r7, #14]
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	429a      	cmp	r2, r3
 80067ee:	db08      	blt.n	8006802 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	425b      	negs	r3, r3
 80067f8:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80067fa:	89fa      	ldrh	r2, [r7, #14]
 80067fc:	89bb      	ldrh	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8006802:	89fb      	ldrh	r3, [r7, #14]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	460b      	mov	r3, r1
 8006820:	80fb      	strh	r3, [r7, #6]
 8006822:	4613      	mov	r3, r2
 8006824:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	889b      	ldrh	r3, [r3, #4]
 800682a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	843b      	strh	r3, [r7, #32]
 8006830:	88bb      	ldrh	r3, [r7, #4]
 8006832:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006834:	8c3a      	ldrh	r2, [r7, #32]
 8006836:	8bfb      	ldrh	r3, [r7, #30]
 8006838:	429a      	cmp	r2, r3
 800683a:	d304      	bcc.n	8006846 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800683c:	8c3a      	ldrh	r2, [r7, #32]
 800683e:	8bfb      	ldrh	r3, [r7, #30]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	b29b      	uxth	r3, r3
 8006844:	e008      	b.n	8006858 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006846:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	8c39      	ldrh	r1, [r7, #32]
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	1acb      	subs	r3, r1, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	4413      	add	r3, r2
 8006856:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006858:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800685a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <_tu_fifo_peek+0x54>
 8006860:	2300      	movs	r3, #0
 8006862:	e037      	b.n	80068d4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	889b      	ldrh	r3, [r3, #4]
 8006868:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800686a:	429a      	cmp	r2, r3
 800686c:	d91b      	bls.n	80068a6 <_tu_fifo_peek+0x96>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	8afa      	ldrh	r2, [r7, #22]
 800687c:	429a      	cmp	r2, r3
 800687e:	d305      	bcc.n	800688c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	889b      	ldrh	r3, [r3, #4]
 8006884:	8afa      	ldrh	r2, [r7, #22]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	82bb      	strh	r3, [r7, #20]
 800688a:	e004      	b.n	8006896 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	889a      	ldrh	r2, [r3, #4]
 8006890:	8afb      	ldrh	r3, [r7, #22]
 8006892:	4413      	add	r3, r2
 8006894:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	8aba      	ldrh	r2, [r7, #20]
 800689a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800689c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800689e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	889b      	ldrh	r3, [r3, #4]
 80068a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	889b      	ldrh	r3, [r3, #4]
 80068aa:	827b      	strh	r3, [r7, #18]
 80068ac:	88bb      	ldrh	r3, [r7, #4]
 80068ae:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80068b0:	e003      	b.n	80068ba <_tu_fifo_peek+0xaa>
 80068b2:	8a3a      	ldrh	r2, [r7, #16]
 80068b4:	8a7b      	ldrh	r3, [r7, #18]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	823b      	strh	r3, [r7, #16]
 80068ba:	8a7a      	ldrh	r2, [r7, #18]
 80068bc:	8a3b      	ldrh	r3, [r7, #16]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d9f7      	bls.n	80068b2 <_tu_fifo_peek+0xa2>
  return idx;
 80068c2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80068c4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80068c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068c8:	461a      	mov	r2, r3
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff fe7a 	bl	80065c6 <_ff_pull>

  return true;
 80068d2:	2301      	movs	r3, #1
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3728      	adds	r7, #40	@ 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	@ 0x30
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	460b      	mov	r3, r1
 80068ec:	80fb      	strh	r3, [r7, #6]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80068f8:	88bb      	ldrh	r3, [r7, #4]
 80068fa:	843b      	strh	r3, [r7, #32]
 80068fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068fe:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006900:	8c3a      	ldrh	r2, [r7, #32]
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	429a      	cmp	r2, r3
 8006906:	d304      	bcc.n	8006912 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006908:	8c3a      	ldrh	r2, [r7, #32]
 800690a:	8bfb      	ldrh	r3, [r7, #30]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	b29b      	uxth	r3, r3
 8006910:	e008      	b.n	8006924 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	8c39      	ldrh	r1, [r7, #32]
 800691a:	8bfb      	ldrh	r3, [r7, #30]
 800691c:	1acb      	subs	r3, r1, r3
 800691e:	b29b      	uxth	r3, r3
 8006920:	4413      	add	r3, r2
 8006922:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006924:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8006926:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <_tu_fifo_peek_n+0x54>
 800692c:	2300      	movs	r3, #0
 800692e:	e041      	b.n	80069b4 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	889b      	ldrh	r3, [r3, #4]
 8006934:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006936:	429a      	cmp	r2, r3
 8006938:	d91b      	bls.n	8006972 <_tu_fifo_peek_n+0x96>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	88bb      	ldrh	r3, [r7, #4]
 8006940:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	889b      	ldrh	r3, [r3, #4]
 8006946:	8afa      	ldrh	r2, [r7, #22]
 8006948:	429a      	cmp	r2, r3
 800694a:	d305      	bcc.n	8006958 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	889b      	ldrh	r3, [r3, #4]
 8006950:	8afa      	ldrh	r2, [r7, #22]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	82bb      	strh	r3, [r7, #20]
 8006956:	e004      	b.n	8006962 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	889a      	ldrh	r2, [r3, #4]
 800695c:	8afb      	ldrh	r3, [r7, #22]
 800695e:	4413      	add	r3, r2
 8006960:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	8aba      	ldrh	r2, [r7, #20]
 8006966:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006968:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800696a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	889b      	ldrh	r3, [r3, #4]
 8006970:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006972:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	429a      	cmp	r2, r3
 8006978:	d201      	bcs.n	800697e <_tu_fifo_peek_n+0xa2>
 800697a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800697c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	889b      	ldrh	r3, [r3, #4]
 8006982:	827b      	strh	r3, [r7, #18]
 8006984:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006986:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006988:	e003      	b.n	8006992 <_tu_fifo_peek_n+0xb6>
 800698a:	8a3a      	ldrh	r2, [r7, #16]
 800698c:	8a7b      	ldrh	r3, [r7, #18]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	823b      	strh	r3, [r7, #16]
 8006992:	8a7a      	ldrh	r2, [r7, #18]
 8006994:	8a3b      	ldrh	r3, [r7, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d9f7      	bls.n	800698a <_tu_fifo_peek_n+0xae>
  return idx;
 800699a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800699c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800699e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	460b      	mov	r3, r1
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fe29 	bl	8006604 <_ff_pull_n>

  return n;
 80069b2:	88fb      	ldrh	r3, [r7, #6]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3728      	adds	r7, #40	@ 0x28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b092      	sub	sp, #72	@ 0x48
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4611      	mov	r1, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	460b      	mov	r3, r1
 80069cc:	80fb      	strh	r3, [r7, #6]
 80069ce:	4613      	mov	r3, r2
 80069d0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <_tu_fifo_write_n+0x20>
 80069d8:	2300      	movs	r3, #0
 80069da:	e0bc      	b.n	8006b56 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	891b      	ldrh	r3, [r3, #8]
 80069e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	895b      	ldrh	r3, [r3, #10]
 80069e6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	79db      	ldrb	r3, [r3, #7]
 80069f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f083 0301 	eor.w	r3, r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d036      	beq.n	8006a6e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	889b      	ldrh	r3, [r3, #4]
 8006a04:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a08:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006a0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a10:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a14:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006a16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a18:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8006a1a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006a1c:	8c3b      	ldrh	r3, [r7, #32]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d304      	bcc.n	8006a2c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8006a22:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006a24:	8c3b      	ldrh	r3, [r7, #32]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	e008      	b.n	8006a3e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006a34:	8c3b      	ldrh	r3, [r7, #32]
 8006a36:	1acb      	subs	r3, r1, r3
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006a3e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006a40:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006a42:	8bfb      	ldrh	r3, [r7, #30]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d904      	bls.n	8006a52 <_tu_fifo_write_n+0x96>
 8006a48:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006a4a:	8bfb      	ldrh	r3, [r7, #30]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	e000      	b.n	8006a54 <_tu_fifo_write_n+0x98>
 8006a52:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006a54:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006a5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a62:	4293      	cmp	r3, r2
 8006a64:	bf28      	it	cs
 8006a66:	4613      	movcs	r3, r2
 8006a68:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8006a6a:	80fb      	strh	r3, [r7, #6]
 8006a6c:	e04b      	b.n	8006b06 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	889b      	ldrh	r3, [r3, #4]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d317      	bcc.n	8006aa8 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006a78:	797b      	ldrb	r3, [r7, #5]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10e      	bne.n	8006a9c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	8892      	ldrh	r2, [r2, #4]
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	88d2      	ldrh	r2, [r2, #6]
 8006a8a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a98:	4413      	add	r3, r2
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	889b      	ldrh	r3, [r3, #4]
 8006aa0:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006aa2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006aa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006aa6:	e02e      	b.n	8006b06 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	889b      	ldrh	r3, [r3, #4]
 8006aac:	83bb      	strh	r3, [r7, #28]
 8006aae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ab0:	837b      	strh	r3, [r7, #26]
 8006ab2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ab4:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006ab6:	8b7a      	ldrh	r2, [r7, #26]
 8006ab8:	8b3b      	ldrh	r3, [r7, #24]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d304      	bcc.n	8006ac8 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8006abe:	8b7a      	ldrh	r2, [r7, #26]
 8006ac0:	8b3b      	ldrh	r3, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	e008      	b.n	8006ada <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006ac8:	8bbb      	ldrh	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	8b79      	ldrh	r1, [r7, #26]
 8006ad0:	8b3b      	ldrh	r3, [r7, #24]
 8006ad2:	1acb      	subs	r3, r1, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006ada:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8006adc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db0c      	blt.n	8006b06 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8898      	ldrh	r0, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	889a      	ldrh	r2, [r3, #4]
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006afc:	4619      	mov	r1, r3
 8006afe:	f7ff fe61 	bl	80067c4 <advance_index>
 8006b02:	4603      	mov	r3, r0
 8006b04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d023      	beq.n	8006b54 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	889b      	ldrh	r3, [r3, #4]
 8006b10:	82fb      	strh	r3, [r7, #22]
 8006b12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b14:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006b16:	e003      	b.n	8006b20 <_tu_fifo_write_n+0x164>
 8006b18:	8aba      	ldrh	r2, [r7, #20]
 8006b1a:	8afb      	ldrh	r3, [r7, #22]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	82bb      	strh	r3, [r7, #20]
 8006b20:	8afa      	ldrh	r2, [r7, #22]
 8006b22:	8abb      	ldrh	r3, [r7, #20]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d9f7      	bls.n	8006b18 <_tu_fifo_write_n+0x15c>
  return idx;
 8006b28:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006b2a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8006b2c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006b2e:	88fa      	ldrh	r2, [r7, #6]
 8006b30:	797b      	ldrb	r3, [r7, #5]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	460b      	mov	r3, r1
 8006b36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fc66 	bl	800640a <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	889b      	ldrh	r3, [r3, #4]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fe3c 	bl	80067c4 <advance_index>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006b54:	88fb      	ldrh	r3, [r7, #6]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3740      	adds	r7, #64	@ 0x40
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af02      	add	r7, sp, #8
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	80fb      	strh	r3, [r7, #6]
 8006b70:	4613      	mov	r3, r2
 8006b72:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	891b      	ldrh	r3, [r3, #8]
 8006b78:	b298      	uxth	r0, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	88f9      	ldrh	r1, [r7, #6]
 8006b82:	797a      	ldrb	r2, [r7, #5]
 8006b84:	9201      	str	r2, [sp, #4]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fea4 	bl	80068dc <_tu_fifo_peek_n>
 8006b94:	4603      	mov	r3, r0
 8006b96:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8898      	ldrh	r0, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	895b      	ldrh	r3, [r3, #10]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7ff fe0d 	bl	80067c4 <advance_index>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8899      	ldrh	r1, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	891b      	ldrh	r3, [r3, #8]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	895b      	ldrh	r3, [r3, #10]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8279      	strh	r1, [r7, #18]
 8006bd6:	823a      	strh	r2, [r7, #16]
 8006bd8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8006bda:	8a3a      	ldrh	r2, [r7, #16]
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d304      	bcc.n	8006bec <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006be2:	8a3a      	ldrh	r2, [r7, #16]
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	e008      	b.n	8006bfe <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006bec:	8a7b      	ldrh	r3, [r7, #18]
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	8a39      	ldrh	r1, [r7, #16]
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	1acb      	subs	r3, r1, r3
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	8892      	ldrh	r2, [r2, #4]
 8006c02:	82fb      	strh	r3, [r7, #22]
 8006c04:	4613      	mov	r3, r2
 8006c06:	82bb      	strh	r3, [r7, #20]
 8006c08:	8afa      	ldrh	r2, [r7, #22]
 8006c0a:	8abb      	ldrh	r3, [r7, #20]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf28      	it	cs
 8006c10:	4613      	movcs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8899      	ldrh	r1, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	891b      	ldrh	r3, [r3, #8]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	895b      	ldrh	r3, [r3, #10]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	81f9      	strh	r1, [r7, #14]
 8006c3a:	81ba      	strh	r2, [r7, #12]
 8006c3c:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006c3e:	89ba      	ldrh	r2, [r7, #12]
 8006c40:	897b      	ldrh	r3, [r7, #10]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d304      	bcc.n	8006c50 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006c46:	89ba      	ldrh	r2, [r7, #12]
 8006c48:	897b      	ldrh	r3, [r7, #10]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	e008      	b.n	8006c62 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006c50:	89fb      	ldrh	r3, [r7, #14]
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	89b9      	ldrh	r1, [r7, #12]
 8006c58:	897b      	ldrh	r3, [r7, #10]
 8006c5a:	1acb      	subs	r3, r1, r3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	8892      	ldrh	r2, [r2, #4]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	bf2c      	ite	cs
 8006c6a:	2301      	movcs	r3, #1
 8006c6c:	2300      	movcc	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8899      	ldrh	r1, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	891b      	ldrh	r3, [r3, #8]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	895b      	ldrh	r3, [r3, #10]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	82f9      	strh	r1, [r7, #22]
 8006c96:	82ba      	strh	r2, [r7, #20]
 8006c98:	827b      	strh	r3, [r7, #18]
 8006c9a:	8afb      	ldrh	r3, [r7, #22]
 8006c9c:	823b      	strh	r3, [r7, #16]
 8006c9e:	8abb      	ldrh	r3, [r7, #20]
 8006ca0:	81fb      	strh	r3, [r7, #14]
 8006ca2:	8a7b      	ldrh	r3, [r7, #18]
 8006ca4:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8006ca6:	89fa      	ldrh	r2, [r7, #14]
 8006ca8:	89bb      	ldrh	r3, [r7, #12]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d304      	bcc.n	8006cb8 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006cae:	89fa      	ldrh	r2, [r7, #14]
 8006cb0:	89bb      	ldrh	r3, [r7, #12]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	e008      	b.n	8006cca <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006cb8:	8a3b      	ldrh	r3, [r7, #16]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	89f9      	ldrh	r1, [r7, #14]
 8006cc0:	89bb      	ldrh	r3, [r7, #12]
 8006cc2:	1acb      	subs	r3, r1, r3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006cca:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8006ccc:	8afa      	ldrh	r2, [r7, #22]
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d904      	bls.n	8006cde <tu_fifo_remaining+0x62>
 8006cd4:	8afa      	ldrh	r2, [r7, #22]
 8006cd6:	897b      	ldrh	r3, [r7, #10]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	e000      	b.n	8006ce0 <tu_fifo_remaining+0x64>
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	891b      	ldrh	r3, [r3, #8]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	895b      	ldrh	r3, [r3, #10]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff fd83 	bl	8006810 <_tu_fifo_peek>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	8898      	ldrh	r0, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	895b      	ldrh	r3, [r3, #10]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	7bfa      	ldrb	r2, [r7, #15]
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f7ff fd51 	bl	80067c4 <advance_index>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	2300      	movs	r3, #0
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff ff08 	bl	8006b5e <_tu_fifo_read_n>
 8006d4e:	4603      	mov	r3, r0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fef6 	bl	8006b5e <_tu_fifo_read_n>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	891b      	ldrh	r3, [r3, #8]
 8006d8a:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ff47 	bl	8006c20 <tu_fifo_full>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <tu_fifo_write+0x36>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	79db      	ldrb	r3, [r3, #7]
 8006d9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f083 0301 	eor.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <tu_fifo_write+0x36>
  {
    ret = false;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
 8006db0:	e022      	b.n	8006df8 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	889b      	ldrh	r3, [r3, #4]
 8006db6:	823b      	strh	r3, [r7, #16]
 8006db8:	8abb      	ldrh	r3, [r7, #20]
 8006dba:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8006dbc:	e003      	b.n	8006dc6 <tu_fifo_write+0x4a>
 8006dbe:	89fa      	ldrh	r2, [r7, #14]
 8006dc0:	8a3b      	ldrh	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	81fb      	strh	r3, [r7, #14]
 8006dc6:	8a3a      	ldrh	r2, [r7, #16]
 8006dc8:	89fb      	ldrh	r3, [r7, #14]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d9f7      	bls.n	8006dbe <tu_fifo_write+0x42>
  return idx;
 8006dce:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006dd0:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006dd2:	8a7b      	ldrh	r3, [r7, #18]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff faf7 	bl	80063cc <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	889b      	ldrh	r3, [r3, #4]
 8006de2:	8ab9      	ldrh	r1, [r7, #20]
 8006de4:	2201      	movs	r2, #1
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fcec 	bl	80067c4 <advance_index>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	2300      	movs	r3, #0
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fdd0 	bl	80069bc <_tu_fifo_write_n>
 8006e1c:	4603      	mov	r3, r0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	4613      	mov	r3, r2
 8006e32:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	2301      	movs	r3, #1
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fdbe 	bl	80069bc <_tu_fifo_write_n>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8006e5e:	2301      	movs	r3, #1
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
  return NULL;
}

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  return NULL;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8006ed2:	b480      	push	{r7}
 8006ed4:	af00      	add	r7, sp, #0
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
}
 8006efa:	bf00      	nop
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8006f0e:	2301      	movs	r3, #1
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006f20:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <tud_mounted+0x20>)
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bf14      	ite	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	2300      	moveq	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20001070 	.word	0x20001070

08006f40 <tud_suspended>:

bool tud_suspended(void) {
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006f44:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <tud_suspended+0x24>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20001070 	.word	0x20001070

08006f68 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <tud_remote_wakeup+0x44>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <tud_remote_wakeup+0x2e>
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <tud_remote_wakeup+0x44>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d006      	beq.n	8006f96 <tud_remote_wakeup+0x2e>
 8006f88:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <tud_remote_wakeup+0x44>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <tud_remote_wakeup+0x32>
 8006f96:	2300      	movs	r3, #0
 8006f98:	e005      	b.n	8006fa6 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8006f9a:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <tud_remote_wakeup+0x48>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 fb96 	bl	80096d0 <dcd_remote_wakeup>
  return true;
 8006fa4:	2301      	movs	r3, #1
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20001070 	.word	0x20001070
 8006fb0:	20000069 	.word	0x20000069

08006fb4 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <tud_inited+0x1c>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2bff      	cmp	r3, #255	@ 0xff
 8006fbe:	bf14      	ite	ne
 8006fc0:	2301      	movne	r3, #1
 8006fc2:	2300      	moveq	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	20000069 	.word	0x20000069

08006fd4 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08c      	sub	sp, #48	@ 0x30
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006fe0:	f7ff ffe8 	bl	8006fb4 <tud_inited>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006fea:	2301      	movs	r3, #1
 8006fec:	e09e      	b.n	800712c <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <tud_rhport_init+0x36>
 8006ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8007134 <tud_rhport_init+0x160>)
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d000      	beq.n	8007006 <tud_rhport_init+0x32>
 8007004:	be00      	bkpt	0x0000
 8007006:	2300      	movs	r3, #0
 8007008:	e090      	b.n	800712c <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 800700a:	222c      	movs	r2, #44	@ 0x2c
 800700c:	2100      	movs	r1, #0
 800700e:	484a      	ldr	r0, [pc, #296]	@ (8007138 <tud_rhport_init+0x164>)
 8007010:	f004 f902 	bl	800b218 <memset>
  _usbd_queued_setup = 0;
 8007014:	4b49      	ldr	r3, [pc, #292]	@ (800713c <tud_rhport_init+0x168>)
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	4b49      	ldr	r3, [pc, #292]	@ (8007140 <tud_rhport_init+0x16c>)
 800701c:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 800701e:	bf00      	nop
 8007020:	4b48      	ldr	r3, [pc, #288]	@ (8007144 <tud_rhport_init+0x170>)
 8007022:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff0e 	bl	8006e4a <tu_fifo_clear>
  return (osal_queue_t) qdef;
 800702e:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8007030:	4a45      	ldr	r2, [pc, #276]	@ (8007148 <tud_rhport_init+0x174>)
 8007032:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8007034:	4b44      	ldr	r3, [pc, #272]	@ (8007148 <tud_rhport_init+0x174>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <tud_rhport_init+0x7e>
 800703c:	4b3d      	ldr	r3, [pc, #244]	@ (8007134 <tud_rhport_init+0x160>)
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d000      	beq.n	800704e <tud_rhport_init+0x7a>
 800704c:	be00      	bkpt	0x0000
 800704e:	2300      	movs	r3, #0
 8007050:	e06c      	b.n	800712c <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8007052:	4b3e      	ldr	r3, [pc, #248]	@ (800714c <tud_rhport_init+0x178>)
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8007058:	483d      	ldr	r0, [pc, #244]	@ (8007150 <tud_rhport_init+0x17c>)
 800705a:	f3af 8000 	nop.w
 800705e:	4603      	mov	r3, r0
 8007060:	4a3c      	ldr	r2, [pc, #240]	@ (8007154 <tud_rhport_init+0x180>)
 8007062:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007064:	2300      	movs	r3, #0
 8007066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800706a:	e03a      	b.n	80070e2 <tud_rhport_init+0x10e>
 800706c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007070:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007076:	4b36      	ldr	r3, [pc, #216]	@ (8007150 <tud_rhport_init+0x17c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	429a      	cmp	r2, r3
 800707e:	d206      	bcs.n	800708e <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8007080:	4b34      	ldr	r3, [pc, #208]	@ (8007154 <tud_rhport_init+0x180>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	015b      	lsls	r3, r3, #5
 8007088:	4413      	add	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	e00d      	b.n	80070aa <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800708e:	4b30      	ldr	r3, [pc, #192]	@ (8007150 <tud_rhport_init+0x17c>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	429a      	cmp	r2, r3
 8007098:	db07      	blt.n	80070aa <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	4a2c      	ldr	r2, [pc, #176]	@ (8007150 <tud_rhport_init+0x17c>)
 800709e:	7812      	ldrb	r2, [r2, #0]
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	015b      	lsls	r3, r3, #5
 80070a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007158 <tud_rhport_init+0x184>)
 80070a6:	4413      	add	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]
  return driver;
 80070aa:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <tud_rhport_init+0xe8>
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <tud_rhport_init+0xfe>
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <tud_rhport_init+0x160>)
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d000      	beq.n	80070ce <tud_rhport_init+0xfa>
 80070cc:	be00      	bkpt	0x0000
 80070ce:	2300      	movs	r3, #0
 80070d0:	e02c      	b.n	800712c <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80070d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070dc:	3301      	adds	r3, #1
 80070de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <tud_rhport_init+0x17c>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070ec:	429a      	cmp	r2, r3
 80070ee:	dabd      	bge.n	800706c <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 80070f0:	4a1a      	ldr	r2, [pc, #104]	@ (800715c <tud_rhport_init+0x188>)
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 f9be 	bl	800947c <dcd_init>
 8007100:	4603      	mov	r3, r0
 8007102:	f083 0301 	eor.w	r3, r3, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <tud_rhport_init+0x14e>
 800710c:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <tud_rhport_init+0x160>)
 800710e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d000      	beq.n	800711e <tud_rhport_init+0x14a>
 800711c:	be00      	bkpt	0x0000
 800711e:	2300      	movs	r3, #0
 8007120:	e004      	b.n	800712c <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	4618      	mov	r0, r3
 8007126:	f002 fa47 	bl	80095b8 <dcd_int_enable>

  return true;
 800712a:	2301      	movs	r3, #1
}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	@ 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	e000edf0 	.word	0xe000edf0
 8007138:	20001070 	.word	0x20001070
 800713c:	2000109c 	.word	0x2000109c
 8007140:	2000006c 	.word	0x2000006c
 8007144:	20000070 	.word	0x20000070
 8007148:	20001168 	.word	0x20001168
 800714c:	00000000 	.word	0x00000000
 8007150:	200010a4 	.word	0x200010a4
 8007154:	200010a0 	.word	0x200010a0
 8007158:	0800c3e4 	.word	0x0800c3e4
 800715c:	20000069 	.word	0x20000069

08007160 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800716a:	2300      	movs	r3, #0
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e034      	b.n	80071da <configuration_reset+0x7a>
 8007170:	7ffb      	ldrb	r3, [r7, #31]
 8007172:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8007178:	4b25      	ldr	r3, [pc, #148]	@ (8007210 <configuration_reset+0xb0>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	7cfa      	ldrb	r2, [r7, #19]
 800717e:	429a      	cmp	r2, r3
 8007180:	d206      	bcs.n	8007190 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8007182:	4b24      	ldr	r3, [pc, #144]	@ (8007214 <configuration_reset+0xb4>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	015b      	lsls	r3, r3, #5
 800718a:	4413      	add	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e00d      	b.n	80071ac <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007190:	4b1f      	ldr	r3, [pc, #124]	@ (8007210 <configuration_reset+0xb0>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	7cfb      	ldrb	r3, [r7, #19]
 8007198:	429a      	cmp	r2, r3
 800719a:	db07      	blt.n	80071ac <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800719c:	7cfb      	ldrb	r3, [r7, #19]
 800719e:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <configuration_reset+0xb0>)
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	015b      	lsls	r3, r3, #5
 80071a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <configuration_reset+0xb8>)
 80071a8:	4413      	add	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  return driver;
 80071ac:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80071ae:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <configuration_reset+0x6a>
 80071b6:	4b19      	ldr	r3, [pc, #100]	@ (800721c <configuration_reset+0xbc>)
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01f      	beq.n	8007206 <configuration_reset+0xa6>
 80071c6:	be00      	bkpt	0x0000
 80071c8:	e01d      	b.n	8007206 <configuration_reset+0xa6>
    driver->reset(rhport);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	79fa      	ldrb	r2, [r7, #7]
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80071d4:	7ffb      	ldrb	r3, [r7, #31]
 80071d6:	3301      	adds	r3, #1
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <configuration_reset+0xb0>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	7ffb      	ldrb	r3, [r7, #31]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	dac4      	bge.n	8007170 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80071e6:	222c      	movs	r2, #44	@ 0x2c
 80071e8:	2100      	movs	r1, #0
 80071ea:	480d      	ldr	r0, [pc, #52]	@ (8007220 <configuration_reset+0xc0>)
 80071ec:	f004 f814 	bl	800b218 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80071f0:	2210      	movs	r2, #16
 80071f2:	21ff      	movs	r1, #255	@ 0xff
 80071f4:	480b      	ldr	r0, [pc, #44]	@ (8007224 <configuration_reset+0xc4>)
 80071f6:	f004 f80f 	bl	800b218 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80071fa:	220c      	movs	r2, #12
 80071fc:	21ff      	movs	r1, #255	@ 0xff
 80071fe:	480a      	ldr	r0, [pc, #40]	@ (8007228 <configuration_reset+0xc8>)
 8007200:	f004 f80a 	bl	800b218 <memset>
 8007204:	e000      	b.n	8007208 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8007206:	bf00      	nop
}
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200010a4 	.word	0x200010a4
 8007214:	200010a0 	.word	0x200010a0
 8007218:	0800c3e4 	.word	0x0800c3e4
 800721c:	e000edf0 	.word	0xe000edf0
 8007220:	20001070 	.word	0x20001070
 8007224:	20001074 	.word	0x20001074
 8007228:	20001084 	.word	0x20001084

0800722c <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff ff91 	bl	8007160 <configuration_reset>
  usbd_control_reset();
 800723e:	f001 fc29 	bl	8008a94 <usbd_control_reset>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b093      	sub	sp, #76	@ 0x4c
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8007258:	f7ff feac 	bl	8006fb4 <tud_inited>
 800725c:	4603      	mov	r3, r0
 800725e:	f083 0301 	eor.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8189 	bne.w	800757c <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800726a:	4bb1      	ldr	r3, [pc, #708]	@ (8007530 <tud_task_ext+0x2e4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007270:	f107 030c 	add.w	r3, r7, #12
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2000      	movs	r0, #0
 8007280:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	3304      	adds	r3, #4
 8007286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fd2f 	bl	8006cec <tu_fifo_read>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2001      	movs	r0, #1
 800729a:	4798      	blx	r3

  return success;
 800729c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a0:	f083 0301 	eor.w	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 816a 	bne.w	8007580 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80072ac:	7b7b      	ldrb	r3, [r7, #13]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b07      	cmp	r3, #7
 80072b2:	f200 814b 	bhi.w	800754c <tud_task_ext+0x300>
 80072b6:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <tud_task_ext+0x70>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072dd 	.word	0x080072dd
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007501 	.word	0x08007501
 80072c8:	080074b3 	.word	0x080074b3
 80072cc:	080074dd 	.word	0x080074dd
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	080073ab 	.word	0x080073ab
 80072d8:	080074f1 	.word	0x080074f1
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80072dc:	7b3b      	ldrb	r3, [r7, #12]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff ffa4 	bl	800722c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80072e4:	7c3a      	ldrb	r2, [r7, #16]
 80072e6:	4b93      	ldr	r3, [pc, #588]	@ (8007534 <tud_task_ext+0x2e8>)
 80072e8:	709a      	strb	r2, [r3, #2]
        break;
 80072ea:	e146      	b.n	800757a <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80072ec:	7b3b      	ldrb	r3, [r7, #12]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ff9c 	bl	800722c <usbd_reset>
        tud_umount_cb();
 80072f4:	f7ff fded 	bl	8006ed2 <tud_umount_cb>
        break;
 80072f8:	e13f      	b.n	800757a <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80072fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007538 <tud_task_ext+0x2ec>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <tud_task_ext+0xce>
 8007304:	4b8d      	ldr	r3, [pc, #564]	@ (800753c <tud_task_ext+0x2f0>)
 8007306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8137 	beq.w	8007584 <tud_task_ext+0x338>
 8007316:	be00      	bkpt	0x0000
 8007318:	e134      	b.n	8007584 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 800731a:	4b87      	ldr	r3, [pc, #540]	@ (8007538 <tud_task_ext+0x2ec>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	4b84      	ldr	r3, [pc, #528]	@ (8007538 <tud_task_ext+0x2ec>)
 8007326:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8007328:	4b83      	ldr	r3, [pc, #524]	@ (8007538 <tud_task_ext+0x2ec>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 8116 	bne.w	8007560 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8007334:	4a7f      	ldr	r2, [pc, #508]	@ (8007534 <tud_task_ext+0x2e8>)
 8007336:	7813      	ldrb	r3, [r2, #0]
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800733e:	4a7d      	ldr	r2, [pc, #500]	@ (8007534 <tud_task_ext+0x2e8>)
 8007340:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800734c:	4a79      	ldr	r2, [pc, #484]	@ (8007534 <tud_task_ext+0x2e8>)
 800734e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007352:	f023 0304 	bic.w	r3, r3, #4
 8007356:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800735a:	4a76      	ldr	r2, [pc, #472]	@ (8007534 <tud_task_ext+0x2e8>)
 800735c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8007368:	4a72      	ldr	r2, [pc, #456]	@ (8007534 <tud_task_ext+0x2e8>)
 800736a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800736e:	f023 0304 	bic.w	r3, r3, #4
 8007372:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8007376:	7b3a      	ldrb	r2, [r7, #12]
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f000 f91f 	bl	80075c4 <process_control_request>
 8007386:	4603      	mov	r3, r0
 8007388:	f083 0301 	eor.w	r3, r3, #1
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80e8 	beq.w	8007564 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007394:	7b3b      	ldrb	r3, [r7, #12]
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f002 fb6d 	bl	8009a78 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800739e:	7b3b      	ldrb	r3, [r7, #12]
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	4618      	mov	r0, r3
 80073a4:	f002 fb68 	bl	8009a78 <dcd_edpt_stall>
        }
        break;
 80073a8:	e0dc      	b.n	8007564 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80073aa:	7c3b      	ldrb	r3, [r7, #16]
 80073ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80073b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c0:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80073c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80073c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80073ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073d2:	09db      	lsrs	r3, r3, #7
 80073d4:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80073d6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80073da:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80073de:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80073e2:	4954      	ldr	r1, [pc, #336]	@ (8007534 <tud_task_ext+0x2e8>)
 80073e4:	0052      	lsls	r2, r2, #1
 80073e6:	440a      	add	r2, r1
 80073e8:	4413      	add	r3, r2
 80073ea:	f103 0220 	add.w	r2, r3, #32
 80073ee:	7813      	ldrb	r3, [r2, #0]
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80073f6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80073fa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80073fe:	494d      	ldr	r1, [pc, #308]	@ (8007534 <tud_task_ext+0x2e8>)
 8007400:	0052      	lsls	r2, r2, #1
 8007402:	440a      	add	r2, r1
 8007404:	4413      	add	r3, r2
 8007406:	f103 0220 	add.w	r2, r3, #32
 800740a:	7813      	ldrb	r3, [r2, #0]
 800740c:	f023 0304 	bic.w	r3, r3, #4
 8007410:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8007412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007416:	2b00      	cmp	r3, #0
 8007418:	d107      	bne.n	800742a <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800741a:	7b38      	ldrb	r0, [r7, #12]
 800741c:	7c7a      	ldrb	r2, [r7, #17]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007424:	f001 fb6c 	bl	8008b00 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8007428:	e0a7      	b.n	800757a <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800742a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800742e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007432:	4940      	ldr	r1, [pc, #256]	@ (8007534 <tud_task_ext+0x2e8>)
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	440a      	add	r2, r1
 8007438:	4413      	add	r3, r2
 800743a:	3314      	adds	r3, #20
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007446:	4b3e      	ldr	r3, [pc, #248]	@ (8007540 <tud_task_ext+0x2f4>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800744e:	429a      	cmp	r2, r3
 8007450:	d207      	bcs.n	8007462 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8007452:	4b3c      	ldr	r3, [pc, #240]	@ (8007544 <tud_task_ext+0x2f8>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800745a:	015b      	lsls	r3, r3, #5
 800745c:	4413      	add	r3, r2
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	e00f      	b.n	8007482 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007462:	4b37      	ldr	r3, [pc, #220]	@ (8007540 <tud_task_ext+0x2f4>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800746c:	429a      	cmp	r2, r3
 800746e:	db08      	blt.n	8007482 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007474:	4a32      	ldr	r2, [pc, #200]	@ (8007540 <tud_task_ext+0x2f4>)
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	015b      	lsls	r3, r3, #5
 800747c:	4a32      	ldr	r2, [pc, #200]	@ (8007548 <tud_task_ext+0x2fc>)
 800747e:	4413      	add	r3, r2
 8007480:	623b      	str	r3, [r7, #32]
  return driver;
 8007482:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007484:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8007486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d109      	bne.n	80074a0 <tud_task_ext+0x254>
 800748c:	4b2b      	ldr	r3, [pc, #172]	@ (800753c <tud_task_ext+0x2f0>)
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d075      	beq.n	8007588 <tud_task_ext+0x33c>
 800749c:	be00      	bkpt	0x0000
 800749e:	e073      	b.n	8007588 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80074a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a2:	699c      	ldr	r4, [r3, #24]
 80074a4:	7b38      	ldrb	r0, [r7, #12]
 80074a6:	7c7a      	ldrb	r2, [r7, #17]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80074ae:	47a0      	blx	r4
        break;
 80074b0:	e063      	b.n	800757a <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80074b2:	4b20      	ldr	r3, [pc, #128]	@ (8007534 <tud_task_ext+0x2e8>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d053      	beq.n	8007568 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80074c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007534 <tud_task_ext+0x2e8>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fd03 	bl	8006ee0 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80074da:	e045      	b.n	8007568 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80074dc:	4b15      	ldr	r3, [pc, #84]	@ (8007534 <tud_task_ext+0x2e8>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d040      	beq.n	800756c <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80074ea:	f7ff fd04 	bl	8006ef6 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80074ee:	e03d      	b.n	800756c <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d03c      	beq.n	8007570 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4610      	mov	r0, r2
 80074fc:	4798      	blx	r3
        }
        break;
 80074fe:	e037      	b.n	8007570 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007500:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <tud_task_ext+0x2e8>)
 8007502:	78db      	ldrb	r3, [r3, #3]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	2300      	movs	r3, #0
 800750a:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800750c:	7efb      	ldrb	r3, [r7, #27]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	fa22 f303 	lsr.w	r3, r2, r3
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	bf14      	ite	ne
 800751c:	2301      	movne	r3, #1
 800751e:	2300      	moveq	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d026      	beq.n	8007574 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fcad 	bl	8006e88 <tud_sof_cb>
        }
      break;
 800752e:	e021      	b.n	8007574 <tud_task_ext+0x328>
 8007530:	20001168 	.word	0x20001168
 8007534:	20001070 	.word	0x20001070
 8007538:	2000109c 	.word	0x2000109c
 800753c:	e000edf0 	.word	0xe000edf0
 8007540:	200010a4 	.word	0x200010a4
 8007544:	200010a0 	.word	0x200010a0
 8007548:	0800c3e4 	.word	0x0800c3e4

      default:
        TU_BREAKPOINT();
 800754c:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <tud_task_ext+0x344>)
 800754e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <tud_task_ext+0x32c>
 800755c:	be00      	bkpt	0x0000
        break;
 800755e:	e00b      	b.n	8007578 <tud_task_ext+0x32c>
          break;
 8007560:	bf00      	nop
 8007562:	e682      	b.n	800726a <tud_task_ext+0x1e>
        break;
 8007564:	bf00      	nop
 8007566:	e680      	b.n	800726a <tud_task_ext+0x1e>
        break;
 8007568:	bf00      	nop
 800756a:	e67e      	b.n	800726a <tud_task_ext+0x1e>
        break;
 800756c:	bf00      	nop
 800756e:	e67c      	b.n	800726a <tud_task_ext+0x1e>
        break;
 8007570:	bf00      	nop
 8007572:	e67a      	b.n	800726a <tud_task_ext+0x1e>
      break;
 8007574:	bf00      	nop
 8007576:	e678      	b.n	800726a <tud_task_ext+0x1e>
        break;
 8007578:	bf00      	nop
  while (1) {
 800757a:	e676      	b.n	800726a <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800757c:	bf00      	nop
 800757e:	e004      	b.n	800758a <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007580:	bf00      	nop
 8007582:	e002      	b.n	800758a <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8007588:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800758a:	374c      	adds	r7, #76	@ 0x4c
 800758c:	46bd      	mov	sp, r7
 800758e:	bd90      	pop	{r4, r7, pc}
 8007590:	e000edf0 	.word	0xe000edf0

08007594 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fa80 	bl	8008aac <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	7bf8      	ldrb	r0, [r7, #15]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	2101      	movs	r1, #1
 80075b6:	4798      	blx	r3
 80075b8:	4603      	mov	r3, r0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b09a      	sub	sp, #104	@ 0x68
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80075d0:	2000      	movs	r0, #0
 80075d2:	f001 fa6b 	bl	8008aac <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b60      	cmp	r3, #96	@ 0x60
 80075e2:	d10a      	bne.n	80075fa <process_control_request+0x36>
 80075e4:	4ba5      	ldr	r3, [pc, #660]	@ (800787c <process_control_request+0x2b8>)
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d000      	beq.n	80075f6 <process_control_request+0x32>
 80075f4:	be00      	bkpt	0x0000
 80075f6:	2300      	movs	r3, #0
 80075f8:	e2bb      	b.n	8007b72 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	d10a      	bne.n	800761e <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8007608:	489d      	ldr	r0, [pc, #628]	@ (8007880 <process_control_request+0x2bc>)
 800760a:	f001 fa4f 	bl	8008aac <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	2101      	movs	r1, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f7f9 f949 	bl	80008ac <tud_vendor_control_xfer_cb>
 800761a:	4603      	mov	r3, r0
 800761c:	e2a9      	b.n	8007b72 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	f000 81ca 	beq.w	80079c2 <process_control_request+0x3fe>
 800762e:	2b02      	cmp	r3, #2
 8007630:	f300 8292 	bgt.w	8007b58 <process_control_request+0x594>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <process_control_request+0x7c>
 8007638:	2b01      	cmp	r3, #1
 800763a:	f000 8151 	beq.w	80078e0 <process_control_request+0x31c>
 800763e:	e28b      	b.n	8007b58 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b20      	cmp	r3, #32
 800764c:	d143      	bne.n	80076d6 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	889b      	ldrh	r3, [r3, #4]
 8007652:	b29b      	uxth	r3, r3
 8007654:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007656:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800765e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007662:	2b0f      	cmp	r3, #15
 8007664:	d901      	bls.n	800766a <process_control_request+0xa6>
 8007666:	2300      	movs	r3, #0
 8007668:	e283      	b.n	8007b72 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800766a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800766e:	4a85      	ldr	r2, [pc, #532]	@ (8007884 <process_control_request+0x2c0>)
 8007670:	4413      	add	r3, r2
 8007672:	791b      	ldrb	r3, [r3, #4]
 8007674:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 800767c:	4b82      	ldr	r3, [pc, #520]	@ (8007888 <process_control_request+0x2c4>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007684:	429a      	cmp	r2, r3
 8007686:	d207      	bcs.n	8007698 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8007688:	4b80      	ldr	r3, [pc, #512]	@ (800788c <process_control_request+0x2c8>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007690:	015b      	lsls	r3, r3, #5
 8007692:	4413      	add	r3, r2
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007696:	e00f      	b.n	80076b8 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007698:	4b7b      	ldr	r3, [pc, #492]	@ (8007888 <process_control_request+0x2c4>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80076a2:	429a      	cmp	r2, r3
 80076a4:	db08      	blt.n	80076b8 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80076a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80076aa:	4a77      	ldr	r2, [pc, #476]	@ (8007888 <process_control_request+0x2c4>)
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	015b      	lsls	r3, r3, #5
 80076b2:	4a77      	ldr	r2, [pc, #476]	@ (8007890 <process_control_request+0x2cc>)
 80076b4:	4413      	add	r3, r2
 80076b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80076b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <process_control_request+0x102>
 80076c2:	2300      	movs	r3, #0
 80076c4:	e255      	b.n	8007b72 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff ff61 	bl	8007594 <invoke_class_control>
 80076d2:	4603      	mov	r3, r0
 80076d4:	e24d      	b.n	8007b72 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80076e4:	4b65      	ldr	r3, [pc, #404]	@ (800787c <process_control_request+0x2b8>)
 80076e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d000      	beq.n	80076f6 <process_control_request+0x132>
 80076f4:	be00      	bkpt	0x0000
        return false;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e23b      	b.n	8007b72 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	f200 80e1 	bhi.w	80078c6 <process_control_request+0x302>
 8007704:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <process_control_request+0x148>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007895 	.word	0x08007895
 8007710:	08007859 	.word	0x08007859
 8007714:	080078c7 	.word	0x080078c7
 8007718:	08007833 	.word	0x08007833
 800771c:	080078c7 	.word	0x080078c7
 8007720:	08007735 	.word	0x08007735
 8007724:	08007819 	.word	0x08007819
 8007728:	080078c7 	.word	0x080078c7
 800772c:	08007759 	.word	0x08007759
 8007730:	08007771 	.word	0x08007771
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007734:	6838      	ldr	r0, [r7, #0]
 8007736:	f001 f9c9 	bl	8008acc <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	b29b      	uxth	r3, r3
 8007740:	b2da      	uxtb	r2, r3
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 ff86 	bl	8009658 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 800774c:	4a4d      	ldr	r2, [pc, #308]	@ (8007884 <process_control_request+0x2c0>)
 800774e:	7813      	ldrb	r3, [r2, #0]
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	7013      	strb	r3, [r2, #0]
        break;
 8007756:	e0c2      	b.n	80078de <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007758:	4b4a      	ldr	r3, [pc, #296]	@ (8007884 <process_control_request+0x2c0>)
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007760:	f107 0213 	add.w	r2, r7, #19
 8007764:	79f8      	ldrb	r0, [r7, #7]
 8007766:	2301      	movs	r3, #1
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	f001 f923 	bl	80089b4 <tud_control_xfer>
        }
        break;
 800776e:	e0b6      	b.n	80078de <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800777a:	4b42      	ldr	r3, [pc, #264]	@ (8007884 <process_control_request+0x2c0>)
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007784:	429a      	cmp	r2, r3
 8007786:	d041      	beq.n	800780c <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8007788:	4b3e      	ldr	r3, [pc, #248]	@ (8007884 <process_control_request+0x2c0>)
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d014      	beq.n	80077bc <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f002 f824 	bl	80097e4 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 f888 	bl	80098b4 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80077a4:	4b37      	ldr	r3, [pc, #220]	@ (8007884 <process_control_request+0x2c0>)
 80077a6:	789b      	ldrb	r3, [r3, #2]
 80077a8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fcd6 	bl	8007160 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80077b4:	4a33      	ldr	r2, [pc, #204]	@ (8007884 <process_control_request+0x2c0>)
 80077b6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80077ba:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80077bc:	4a31      	ldr	r2, [pc, #196]	@ (8007884 <process_control_request+0x2c0>)
 80077be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80077c2:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80077c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01d      	beq.n	8007808 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80077cc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f9d5 	bl	8007b84 <process_set_config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f083 0301 	eor.w	r3, r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80077e6:	4b25      	ldr	r3, [pc, #148]	@ (800787c <process_control_request+0x2b8>)
 80077e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d000      	beq.n	80077f8 <process_control_request+0x234>
 80077f6:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80077f8:	4b22      	ldr	r3, [pc, #136]	@ (8007884 <process_control_request+0x2c0>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	705a      	strb	r2, [r3, #1]
                return false;
 80077fe:	2300      	movs	r3, #0
 8007800:	e1b7      	b.n	8007b72 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8007802:	f7ff fb5f 	bl	8006ec4 <tud_mount_cb>
 8007806:	e001      	b.n	800780c <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8007808:	f7ff fb63 	bl	8006ed2 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f85d 	bl	80088d0 <tud_control_status>
        }
        break;
 8007816:	e062      	b.n	80078de <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fad7 	bl	8007dd0 <process_get_descriptor>
 8007822:	4603      	mov	r3, r0
 8007824:	f083 0301 	eor.w	r3, r3, #1
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d056      	beq.n	80078dc <process_control_request+0x318>
 800782e:	2300      	movs	r3, #0
 8007830:	e19f      	b.n	8007b72 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b01      	cmp	r3, #1
 800783a:	d10b      	bne.n	8007854 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 800783c:	4a11      	ldr	r2, [pc, #68]	@ (8007884 <process_control_request+0x2c0>)
 800783e:	7813      	ldrb	r3, [r2, #0]
 8007840:	f043 0308 	orr.w	r3, r3, #8
 8007844:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f840 	bl	80088d0 <tud_control_status>
            break;
 8007850:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8007852:	e044      	b.n	80078de <process_control_request+0x31a>
            default: return false;
 8007854:	2300      	movs	r3, #0
 8007856:	e18c      	b.n	8007b72 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d001      	beq.n	8007866 <process_control_request+0x2a2>
 8007862:	2300      	movs	r3, #0
 8007864:	e185      	b.n	8007b72 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007866:	4a07      	ldr	r2, [pc, #28]	@ (8007884 <process_control_request+0x2c0>)
 8007868:	7813      	ldrb	r3, [r2, #0]
 800786a:	f023 0308 	bic.w	r3, r3, #8
 800786e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f82b 	bl	80088d0 <tud_control_status>
        break;
 800787a:	e030      	b.n	80078de <process_control_request+0x31a>
 800787c:	e000edf0 	.word	0xe000edf0
 8007880:	080008ad 	.word	0x080008ad
 8007884:	20001070 	.word	0x20001070
 8007888:	200010a4 	.word	0x200010a4
 800788c:	200010a0 	.word	0x200010a0
 8007890:	0800c3e4 	.word	0x0800c3e4

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007894:	4b94      	ldr	r3, [pc, #592]	@ (8007ae8 <process_control_request+0x524>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	4b91      	ldr	r3, [pc, #580]	@ (8007ae8 <process_control_request+0x524>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	089b      	lsrs	r3, r3, #2
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80078b6:	f107 0210 	add.w	r2, r7, #16
 80078ba:	79f8      	ldrb	r0, [r7, #7]
 80078bc:	2302      	movs	r3, #2
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	f001 f878 	bl	80089b4 <tud_control_xfer>
          break;
 80078c4:	e00b      	b.n	80078de <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80078c6:	4b89      	ldr	r3, [pc, #548]	@ (8007aec <process_control_request+0x528>)
 80078c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d000      	beq.n	80078d8 <process_control_request+0x314>
 80078d6:	be00      	bkpt	0x0000
 80078d8:	2300      	movs	r3, #0
 80078da:	e14a      	b.n	8007b72 <process_control_request+0x5ae>
        break;
 80078dc:	bf00      	nop
      }
    break;
 80078de:	e147      	b.n	8007b70 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	889b      	ldrh	r3, [r3, #4]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80078e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80078f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078f4:	2b0f      	cmp	r3, #15
 80078f6:	d901      	bls.n	80078fc <process_control_request+0x338>
 80078f8:	2300      	movs	r3, #0
 80078fa:	e13a      	b.n	8007b72 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80078fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007900:	4a79      	ldr	r2, [pc, #484]	@ (8007ae8 <process_control_request+0x524>)
 8007902:	4413      	add	r3, r2
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800790e:	4b78      	ldr	r3, [pc, #480]	@ (8007af0 <process_control_request+0x52c>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007916:	429a      	cmp	r2, r3
 8007918:	d207      	bcs.n	800792a <process_control_request+0x366>
    driver = &_app_driver[drvid];
 800791a:	4b76      	ldr	r3, [pc, #472]	@ (8007af4 <process_control_request+0x530>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007922:	015b      	lsls	r3, r3, #5
 8007924:	4413      	add	r3, r2
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	e00f      	b.n	800794a <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800792a:	4b71      	ldr	r3, [pc, #452]	@ (8007af0 <process_control_request+0x52c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007934:	429a      	cmp	r2, r3
 8007936:	db08      	blt.n	800794a <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007938:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800793c:	4a6c      	ldr	r2, [pc, #432]	@ (8007af0 <process_control_request+0x52c>)
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	015b      	lsls	r3, r3, #5
 8007944:	4a6c      	ldr	r2, [pc, #432]	@ (8007af8 <process_control_request+0x534>)
 8007946:	4413      	add	r3, r2
 8007948:	623b      	str	r3, [r7, #32]
  return driver;
 800794a:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800794c:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800794e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <process_control_request+0x394>
 8007954:	2300      	movs	r3, #0
 8007956:	e10c      	b.n	8007b72 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fe18 	bl	8007594 <invoke_class_control>
 8007964:	4603      	mov	r3, r0
 8007966:	f083 0301 	eor.w	r3, r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80fe 	beq.w	8007b6e <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <process_control_request+0x3c0>
 8007980:	2300      	movs	r3, #0
 8007982:	e0f6      	b.n	8007b72 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	3b0a      	subs	r3, #10
 800798a:	2b01      	cmp	r3, #1
 800798c:	d816      	bhi.n	80079bc <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800798e:	2000      	movs	r0, #0
 8007990:	f001 f88c 	bl	8008aac <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b0a      	cmp	r3, #10
 800799a:	d109      	bne.n	80079b0 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80079a0:	f107 020f 	add.w	r2, r7, #15
 80079a4:	79f8      	ldrb	r0, [r7, #7]
 80079a6:	2301      	movs	r3, #1
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	f001 f803 	bl	80089b4 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80079ae:	e007      	b.n	80079c0 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 ff8b 	bl	80088d0 <tud_control_status>
          break;
 80079ba:	e001      	b.n	80079c0 <process_control_request+0x3fc>

          default: return false;
 80079bc:	2300      	movs	r3, #0
 80079be:	e0d8      	b.n	8007b72 <process_control_request+0x5ae>
        }
      }
      break;
 80079c0:	e0d5      	b.n	8007b6e <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	83bb      	strh	r3, [r7, #28]
 80079ca:	8bbb      	ldrh	r3, [r7, #28]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80079d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079d6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80079d8:	7fbb      	ldrb	r3, [r7, #30]
 80079da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079de:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80079e0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80079e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079e8:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	09db      	lsrs	r3, r3, #7
 80079ee:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80079f0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80079f4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80079f8:	2b05      	cmp	r3, #5
 80079fa:	d90a      	bls.n	8007a12 <process_control_request+0x44e>
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <process_control_request+0x528>)
 80079fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d000      	beq.n	8007a0e <process_control_request+0x44a>
 8007a0c:	be00      	bkpt	0x0000
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e0af      	b.n	8007b72 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007a12:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8007a16:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007a1a:	4933      	ldr	r1, [pc, #204]	@ (8007ae8 <process_control_request+0x524>)
 8007a1c:	0052      	lsls	r2, r2, #1
 8007a1e:	440a      	add	r2, r1
 8007a20:	4413      	add	r3, r2
 8007a22:	3314      	adds	r3, #20
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8007a2c:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <process_control_request+0x52c>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	7efa      	ldrb	r2, [r7, #27]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d206      	bcs.n	8007a44 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8007a36:	4b2f      	ldr	r3, [pc, #188]	@ (8007af4 <process_control_request+0x530>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	7efb      	ldrb	r3, [r7, #27]
 8007a3c:	015b      	lsls	r3, r3, #5
 8007a3e:	4413      	add	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e00d      	b.n	8007a60 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007a44:	4b2a      	ldr	r3, [pc, #168]	@ (8007af0 <process_control_request+0x52c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	7efb      	ldrb	r3, [r7, #27]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	db07      	blt.n	8007a60 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007a50:	7efb      	ldrb	r3, [r7, #27]
 8007a52:	4a27      	ldr	r2, [pc, #156]	@ (8007af0 <process_control_request+0x52c>)
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	015b      	lsls	r3, r3, #5
 8007a5a:	4a27      	ldr	r2, [pc, #156]	@ (8007af8 <process_control_request+0x534>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
  return driver;
 8007a60:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007a62:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00c      	beq.n	8007a8c <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <process_control_request+0x4b8>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e07a      	b.n	8007b72 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fd86 	bl	8007594 <invoke_class_control>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	e072      	b.n	8007b72 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d017      	beq.n	8007ac4 <process_control_request+0x500>
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	dc52      	bgt.n	8007b3e <process_control_request+0x57a>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <process_control_request+0x4de>
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d011      	beq.n	8007ac4 <process_control_request+0x500>
 8007aa0:	e04d      	b.n	8007b3e <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007aa2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 feba 	bl	8008824 <usbd_edpt_stalled>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007ab4:	f107 020c 	add.w	r2, r7, #12
 8007ab8:	79f8      	ldrb	r0, [r7, #7]
 8007aba:	2302      	movs	r3, #2
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	f000 ff79 	bl	80089b4 <tud_control_xfer>
          }
          break;
 8007ac2:	e048      	b.n	8007b56 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	885b      	ldrh	r3, [r3, #2]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d11d      	bne.n	8007b0a <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d112      	bne.n	8007afc <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8007ad6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fe62 	bl	80087a8 <usbd_edpt_clear_stall>
 8007ae4:	e011      	b.n	8007b0a <process_control_request+0x546>
 8007ae6:	bf00      	nop
 8007ae8:	20001070 	.word	0x20001070
 8007aec:	e000edf0 	.word	0xe000edf0
 8007af0:	200010a4 	.word	0x200010a4
 8007af4:	200010a0 	.word	0x200010a0
 8007af8:	0800c3e4 	.word	0x0800c3e4
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8007afc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fe11 	bl	800872c <usbd_edpt_stall>
              }
            }

            if (driver) {
 8007b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d021      	beq.n	8007b54 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fd3c 	bl	8007594 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f000 ffc5 	bl	8008aac <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007b22:	4b16      	ldr	r3, [pc, #88]	@ (8007b7c <process_control_request+0x5b8>)
 8007b24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d110      	bne.n	8007b54 <process_control_request+0x590>
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 feca 	bl	80088d0 <tud_control_status>
            }
          }
          break;
 8007b3c:	e00a      	b.n	8007b54 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8007b3e:	4b10      	ldr	r3, [pc, #64]	@ (8007b80 <process_control_request+0x5bc>)
 8007b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d000      	beq.n	8007b50 <process_control_request+0x58c>
 8007b4e:	be00      	bkpt	0x0000
            return false;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e00e      	b.n	8007b72 <process_control_request+0x5ae>
          break;
 8007b54:	bf00      	nop
        }
      }
    }
    break;
 8007b56:	e00b      	b.n	8007b70 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <process_control_request+0x5bc>)
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d000      	beq.n	8007b6a <process_control_request+0x5a6>
 8007b68:	be00      	bkpt	0x0000
      return false;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e001      	b.n	8007b72 <process_control_request+0x5ae>
      break;
 8007b6e:	bf00      	nop
  }

  return true;
 8007b70:	2301      	movs	r3, #1
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3768      	adds	r7, #104	@ 0x68
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20001070 	.word	0x20001070
 8007b80:	e000edf0 	.word	0xe000edf0

08007b84 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b096      	sub	sp, #88	@ 0x58
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	460a      	mov	r2, r1
 8007b8e:	71fb      	strb	r3, [r7, #7]
 8007b90:	4613      	mov	r3, r2
 8007b92:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007b94:	79bb      	ldrb	r3, [r7, #6]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fa fd16 	bl	80025cc <tud_descriptor_configuration_cb>
 8007ba0:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <process_set_config+0x2c>
 8007ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d00a      	beq.n	8007bc6 <process_set_config+0x42>
 8007bb0:	4b81      	ldr	r3, [pc, #516]	@ (8007db8 <process_set_config+0x234>)
 8007bb2:	623b      	str	r3, [r7, #32]
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d000      	beq.n	8007bc2 <process_set_config+0x3e>
 8007bc0:	be00      	bkpt	0x0000
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e0f4      	b.n	8007db0 <process_set_config+0x22c>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc8:	79db      	ldrb	r3, [r3, #7]
 8007bca:	115b      	asrs	r3, r3, #5
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	4a7a      	ldr	r2, [pc, #488]	@ (8007dbc <process_set_config+0x238>)
 8007bd4:	7813      	ldrb	r3, [r2, #0]
 8007bd6:	f361 1304 	bfi	r3, r1, #4, #1
 8007bda:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bde:	79db      	ldrb	r3, [r3, #7]
 8007be0:	119b      	asrs	r3, r3, #6
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	b2d9      	uxtb	r1, r3
 8007be8:	4a74      	ldr	r2, [pc, #464]	@ (8007dbc <process_set_config+0x238>)
 8007bea:	7813      	ldrb	r3, [r2, #0]
 8007bec:	f361 1345 	bfi	r3, r1, #5, #1
 8007bf0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf4:	3309      	adds	r3, #9
 8007bf6:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c02:	4413      	add	r3, r2
 8007c04:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8007c06:	e0cd      	b.n	8007da4 <process_set_config+0x220>
  {
    uint8_t assoc_itf_count = 1;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c10:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3301      	adds	r3, #1
 8007c16:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007c18:	2b0b      	cmp	r3, #11
 8007c1a:	d10f      	bne.n	8007c3c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1e:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c22:	78db      	ldrb	r3, [r3, #3]
 8007c24:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007c3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3301      	adds	r3, #1
 8007c44:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d00a      	beq.n	8007c60 <process_set_config+0xdc>
 8007c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007db8 <process_set_config+0x234>)
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d000      	beq.n	8007c5c <process_set_config+0xd8>
 8007c5a:	be00      	bkpt	0x0000
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e0a7      	b.n	8007db0 <process_set_config+0x22c>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c62:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007c72:	e07d      	b.n	8007d70 <process_set_config+0x1ec>
 8007c74:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c78:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007c7e:	4b50      	ldr	r3, [pc, #320]	@ (8007dc0 <process_set_config+0x23c>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	7bfa      	ldrb	r2, [r7, #15]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d206      	bcs.n	8007c96 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8007c88:	4b4e      	ldr	r3, [pc, #312]	@ (8007dc4 <process_set_config+0x240>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	015b      	lsls	r3, r3, #5
 8007c90:	4413      	add	r3, r2
 8007c92:	60bb      	str	r3, [r7, #8]
 8007c94:	e00d      	b.n	8007cb2 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007c96:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <process_set_config+0x23c>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	db07      	blt.n	8007cb2 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	4a46      	ldr	r2, [pc, #280]	@ (8007dc0 <process_set_config+0x23c>)
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	015b      	lsls	r3, r3, #5
 8007cac:	4a46      	ldr	r2, [pc, #280]	@ (8007dc8 <process_set_config+0x244>)
 8007cae:	4413      	add	r3, r2
 8007cb0:	60bb      	str	r3, [r7, #8]
  return driver;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <process_set_config+0x14e>
 8007cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8007db8 <process_set_config+0x234>)
 8007cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d000      	beq.n	8007cce <process_set_config+0x14a>
 8007ccc:	be00      	bkpt	0x0000
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e06e      	b.n	8007db0 <process_set_config+0x22c>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007cd8:	79f8      	ldrb	r0, [r7, #7]
 8007cda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007ce2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d93e      	bls.n	8007d66 <process_set_config+0x1e2>
 8007ce8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d83a      	bhi.n	8007d66 <process_set_config+0x1e2>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007cf6:	e024      	b.n	8007d42 <process_set_config+0x1be>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfa:	789a      	ldrb	r2, [r3, #2]
 8007cfc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007d00:	4413      	add	r3, r2
 8007d02:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8007d06:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dbc <process_set_config+0x238>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	791b      	ldrb	r3, [r3, #4]
 8007d10:	2bff      	cmp	r3, #255	@ 0xff
 8007d12:	d00a      	beq.n	8007d2a <process_set_config+0x1a6>
 8007d14:	4b28      	ldr	r3, [pc, #160]	@ (8007db8 <process_set_config+0x234>)
 8007d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d000      	beq.n	8007d26 <process_set_config+0x1a2>
 8007d24:	be00      	bkpt	0x0000
 8007d26:	2300      	movs	r3, #0
 8007d28:	e042      	b.n	8007db0 <process_set_config+0x22c>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8007d2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007d2e:	4a23      	ldr	r2, [pc, #140]	@ (8007dbc <process_set_config+0x238>)
 8007d30:	4413      	add	r3, r2
 8007d32:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8007d36:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007d38:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007d42:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8007d46:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3d4      	bcc.n	8007cf8 <process_set_config+0x174>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8007d4e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007d52:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d56:	481d      	ldr	r0, [pc, #116]	@ (8007dcc <process_set_config+0x248>)
 8007d58:	f002 ffb6 	bl	800acc8 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8007d5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d60:	4413      	add	r3, r2
 8007d62:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8007d64:	e00c      	b.n	8007d80 <process_set_config+0x1fc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007d66:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007d70:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <process_set_config+0x23c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	f6bf af7a 	bge.w	8007c74 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007d80:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc0 <process_set_config+0x23c>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	da0a      	bge.n	8007da4 <process_set_config+0x220>
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <process_set_config+0x234>)
 8007d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d000      	beq.n	8007da0 <process_set_config+0x21c>
 8007d9e:	be00      	bkpt	0x0000
 8007da0:	2300      	movs	r3, #0
 8007da2:	e005      	b.n	8007db0 <process_set_config+0x22c>
  while( p_desc < desc_end )
 8007da4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f4ff af2d 	bcc.w	8007c08 <process_set_config+0x84>
  }

  return true;
 8007dae:	2301      	movs	r3, #1
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3758      	adds	r7, #88	@ 0x58
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000edf0 	.word	0xe000edf0
 8007dbc:	20001070 	.word	0x20001070
 8007dc0:	200010a4 	.word	0x200010a4
 8007dc4:	200010a0 	.word	0x200010a0
 8007dc8:	0800c3e4 	.word	0x0800c3e4
 8007dcc:	20001084 	.word	0x20001084

08007dd0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b094      	sub	sp, #80	@ 0x50
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	885b      	ldrh	r3, [r3, #2]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	885b      	ldrh	r3, [r3, #2]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007df8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8007e00:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007e04:	3b01      	subs	r3, #1
 8007e06:	2b0e      	cmp	r3, #14
 8007e08:	f200 80b4 	bhi.w	8007f74 <process_get_descriptor+0x1a4>
 8007e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <process_get_descriptor+0x44>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007eb5 	.word	0x08007eb5
 8007e1c:	08007f1b 	.word	0x08007f1b
 8007e20:	08007f75 	.word	0x08007f75
 8007e24:	08007f75 	.word	0x08007f75
 8007e28:	08007f4f 	.word	0x08007f4f
 8007e2c:	08007eb5 	.word	0x08007eb5
 8007e30:	08007f75 	.word	0x08007f75
 8007e34:	08007f75 	.word	0x08007f75
 8007e38:	08007f75 	.word	0x08007f75
 8007e3c:	08007f75 	.word	0x08007f75
 8007e40:	08007f75 	.word	0x08007f75
 8007e44:	08007f75 	.word	0x08007f75
 8007e48:	08007f75 	.word	0x08007f75
 8007e4c:	08007e83 	.word	0x08007e83
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007e50:	f7fa fb9e 	bl	8002590 <tud_descriptor_device_cb>
 8007e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8007e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <process_get_descriptor+0xa2>
 8007e5c:	4b48      	ldr	r3, [pc, #288]	@ (8007f80 <process_get_descriptor+0x1b0>)
 8007e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d000      	beq.n	8007e6e <process_get_descriptor+0x9e>
 8007e6c:	be00      	bkpt	0x0000
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e081      	b.n	8007f76 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007e72:	79f8      	ldrb	r0, [r7, #7]
 8007e74:	2312      	movs	r3, #18
 8007e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	f000 fd9b 	bl	80089b4 <tud_control_xfer>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	e079      	b.n	8007f76 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007e82:	f7fa fbb1 	bl	80025e8 <tud_descriptor_bos_cb>
 8007e86:	4603      	mov	r3, r0
 8007e88:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8007e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <process_get_descriptor+0xc4>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e070      	b.n	8007f76 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e96:	3302      	adds	r3, #2
 8007e98:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007ea8:	79f8      	ldrb	r0, [r7, #7]
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	f000 fd82 	bl	80089b4 <tud_control_xfer>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	e060      	b.n	8007f76 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007eb4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d114      	bne.n	8007ee6 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007ebc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fa fb83 	bl	80025cc <tud_descriptor_configuration_cb>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8007eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d116      	bne.n	8007efe <process_get_descriptor+0x12e>
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f80 <process_get_descriptor+0x1b0>)
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d000      	beq.n	8007ee2 <process_get_descriptor+0x112>
 8007ee0:	be00      	bkpt	0x0000
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e047      	b.n	8007f76 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007ee6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe ffde 	bl	8006eac <tud_descriptor_other_speed_configuration_cb>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <process_get_descriptor+0x12e>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e03b      	b.n	8007f76 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f00:	3302      	adds	r3, #2
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007f0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f0c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007f0e:	79f8      	ldrb	r0, [r7, #7]
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	f000 fd4f 	bl	80089b4 <tud_control_xfer>
 8007f16:	4603      	mov	r3, r0
 8007f18:	e02d      	b.n	8007f76 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	889b      	ldrh	r3, [r3, #4]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fa fb68 	bl	80025fc <tud_descriptor_string_cb>
 8007f2c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <process_get_descriptor+0x168>
 8007f34:	2300      	movs	r3, #0
 8007f36:	e01e      	b.n	8007f76 <process_get_descriptor+0x1a6>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007f40:	79f8      	ldrb	r0, [r7, #7]
 8007f42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	f000 fd35 	bl	80089b4 <tud_control_xfer>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	e013      	b.n	8007f76 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007f4e:	f7fe ffa5 	bl	8006e9c <tud_descriptor_device_qualifier_cb>
 8007f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <process_get_descriptor+0x18e>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e00b      	b.n	8007f76 <process_get_descriptor+0x1a6>
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007f66:	79f8      	ldrb	r0, [r7, #7]
 8007f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	f000 fd22 	bl	80089b4 <tud_control_xfer>
 8007f70:	4603      	mov	r3, r0
 8007f72:	e000      	b.n	8007f76 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8007f74:	2300      	movs	r3, #0
  }
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3750      	adds	r7, #80	@ 0x50
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	e000edf0 	.word	0xe000edf0

08007f84 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b0a0      	sub	sp, #128	@ 0x80
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	3b02      	subs	r3, #2
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	f200 8175 	bhi.w	800828c <dcd_event_handler+0x308>
 8007fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <dcd_event_handler+0x24>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	0800802d 	.word	0x0800802d
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	0800800b 	.word	0x0800800b
 8007fb8:	08008259 	.word	0x08008259
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007fbc:	4aac      	ldr	r2, [pc, #688]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007fbe:	7813      	ldrb	r3, [r2, #0]
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007fc6:	4aaa      	ldr	r2, [pc, #680]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007fc8:	7813      	ldrb	r3, [r2, #0]
 8007fca:	f023 0302 	bic.w	r3, r3, #2
 8007fce:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007fd0:	4ba7      	ldr	r3, [pc, #668]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007fd6:	4aa6      	ldr	r2, [pc, #664]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007fd8:	7813      	ldrb	r3, [r2, #0]
 8007fda:	f023 0304 	bic.w	r3, r3, #4
 8007fde:	7013      	strb	r3, [r2, #0]
      send = true;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007fe6:	e15a      	b.n	800829e <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 814e 	beq.w	8008294 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8007ff8:	4a9d      	ldr	r2, [pc, #628]	@ (8008270 <dcd_event_handler+0x2ec>)
 8007ffa:	7813      	ldrb	r3, [r2, #0]
 8007ffc:	f043 0304 	orr.w	r3, r3, #4
 8008000:	7013      	strb	r3, [r2, #0]
        send = true;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008008:	e144      	b.n	8008294 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 800800a:	4b99      	ldr	r3, [pc, #612]	@ (8008270 <dcd_event_handler+0x2ec>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 813f 	beq.w	8008298 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 800801a:	4a95      	ldr	r2, [pc, #596]	@ (8008270 <dcd_event_handler+0x2ec>)
 800801c:	7813      	ldrb	r3, [r2, #0]
 800801e:	f023 0304 	bic.w	r3, r3, #4
 8008022:	7013      	strb	r3, [r2, #0]
        send = true;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800802a:	e135      	b.n	8008298 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800802c:	2300      	movs	r3, #0
 800802e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008032:	e039      	b.n	80080a8 <dcd_event_handler+0x124>
 8008034:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008038:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8008040:	4b8c      	ldr	r3, [pc, #560]	@ (8008274 <dcd_event_handler+0x2f0>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8008048:	429a      	cmp	r2, r3
 800804a:	d207      	bcs.n	800805c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 800804c:	4b8a      	ldr	r3, [pc, #552]	@ (8008278 <dcd_event_handler+0x2f4>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008054:	015b      	lsls	r3, r3, #5
 8008056:	4413      	add	r3, r2
 8008058:	673b      	str	r3, [r7, #112]	@ 0x70
 800805a:	e00f      	b.n	800807c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800805c:	4b85      	ldr	r3, [pc, #532]	@ (8008274 <dcd_event_handler+0x2f0>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008066:	429a      	cmp	r2, r3
 8008068:	db08      	blt.n	800807c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800806a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800806e:	4a81      	ldr	r2, [pc, #516]	@ (8008274 <dcd_event_handler+0x2f0>)
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	015b      	lsls	r3, r3, #5
 8008076:	4a81      	ldr	r2, [pc, #516]	@ (800827c <dcd_event_handler+0x2f8>)
 8008078:	4413      	add	r3, r2
 800807a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 800807c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 800807e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8008080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <dcd_event_handler+0x11a>
 8008086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 800808e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	7810      	ldrb	r0, [r2, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6852      	ldr	r2, [r2, #4]
 800809a:	4611      	mov	r1, r2
 800809c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800809e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80080a2:	3301      	adds	r3, #1
 80080a4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80080a8:	4b72      	ldr	r3, [pc, #456]	@ (8008274 <dcd_event_handler+0x2f0>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80080b2:	429a      	cmp	r2, r3
 80080b4:	dabe      	bge.n	8008034 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 80080b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008270 <dcd_event_handler+0x2ec>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d05a      	beq.n	800817a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 80080c4:	4a6a      	ldr	r2, [pc, #424]	@ (8008270 <dcd_event_handler+0x2ec>)
 80080c6:	7813      	ldrb	r3, [r2, #0]
 80080c8:	f023 0304 	bic.w	r3, r3, #4
 80080cc:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80080ce:	f107 0314 	add.w	r3, r7, #20
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	609a      	str	r2, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	753b      	strb	r3, [r7, #20]
 80080e0:	2305      	movs	r3, #5
 80080e2:	757b      	strb	r3, [r7, #21]
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80080f0:	4b63      	ldr	r3, [pc, #396]	@ (8008280 <dcd_event_handler+0x2fc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80080f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80080fa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80080fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8008102:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008106:	f083 0301 	eor.w	r3, r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2000      	movs	r0, #0
 8008116:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800811a:	3304      	adds	r3, #4
 800811c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fe2c 	bl	8006d7c <tu_fifo_write>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800812a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800812e:	f083 0301 	eor.w	r3, r3, #1
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8008138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2001      	movs	r0, #1
 800813e:	4798      	blx	r3
  }

  return success;
 8008140:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008144:	f083 0301 	eor.w	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <dcd_event_handler+0x1de>
 800814e:	4b4d      	ldr	r3, [pc, #308]	@ (8008284 <dcd_event_handler+0x300>)
 8008150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <dcd_event_handler+0x1f4>
 800815e:	be00      	bkpt	0x0000
 8008160:	e00a      	b.n	8008178 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008164:	7818      	ldrb	r0, [r3, #0]
 8008166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	4619      	mov	r1, r3
 800816c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008170:	461a      	mov	r2, r3
 8008172:	f7fe fe7b 	bl	8006e6c <tud_event_hook_cb>
  return true;
 8008176:	e000      	b.n	800817a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008178:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800817a:	4b3d      	ldr	r3, [pc, #244]	@ (8008270 <dcd_event_handler+0x2ec>)
 800817c:	78db      	ldrb	r3, [r3, #3]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	657b      	str	r3, [r7, #84]	@ 0x54
 8008182:	2300      	movs	r3, #0
 8008184:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008188:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800818c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d07b      	beq.n	800829c <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	609a      	str	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	723b      	strb	r3, [r7, #8]
 80081b6:	2303      	movs	r3, #3
 80081b8:	727b      	strb	r3, [r7, #9]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	f107 0308 	add.w	r3, r7, #8
 80081c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80081cc:	4b2c      	ldr	r3, [pc, #176]	@ (8008280 <dcd_event_handler+0x2fc>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80081da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 80081de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081e2:	f083 0301 	eor.w	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 80081ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80081f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081f6:	3304      	adds	r3, #4
 80081f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fdbe 	bl	8006d7c <tu_fifo_write>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8008206:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800820a:	f083 0301 	eor.w	r3, r3, #1
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8008214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2001      	movs	r0, #1
 800821a:	4798      	blx	r3
  return success;
 800821c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008220:	f083 0301 	eor.w	r3, r3, #1
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <dcd_event_handler+0x2ba>
 800822a:	4b16      	ldr	r3, [pc, #88]	@ (8008284 <dcd_event_handler+0x300>)
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00c      	beq.n	8008254 <dcd_event_handler+0x2d0>
 800823a:	be00      	bkpt	0x0000
 800823c:	e00a      	b.n	8008254 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800823e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008240:	7818      	ldrb	r0, [r3, #0]
 8008242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	4619      	mov	r1, r3
 8008248:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800824c:	461a      	mov	r2, r3
 800824e:	f7fe fe0d 	bl	8006e6c <tud_event_hook_cb>
  return true;
 8008252:	e000      	b.n	8008256 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008254:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8008256:	e021      	b.n	800829c <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8008258:	4b0b      	ldr	r3, [pc, #44]	@ (8008288 <dcd_event_handler+0x304>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	3301      	adds	r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <dcd_event_handler+0x304>)
 8008264:	701a      	strb	r2, [r3, #0]
      send = true;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800826c:	e017      	b.n	800829e <dcd_event_handler+0x31a>
 800826e:	bf00      	nop
 8008270:	20001070 	.word	0x20001070
 8008274:	200010a4 	.word	0x200010a4
 8008278:	200010a0 	.word	0x200010a0
 800827c:	0800c3e4 	.word	0x0800c3e4
 8008280:	20001168 	.word	0x20001168
 8008284:	e000edf0 	.word	0xe000edf0
 8008288:	2000109c 	.word	0x2000109c

    default:
      send = true;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008292:	e004      	b.n	800829e <dcd_event_handler+0x31a>
      break;
 8008294:	bf00      	nop
 8008296:	e002      	b.n	800829e <dcd_event_handler+0x31a>
      break;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <dcd_event_handler+0x31a>
      break;
 800829c:	bf00      	nop
  }

  if (send) {
 800829e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d049      	beq.n	800833a <dcd_event_handler+0x3b6>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <dcd_event_handler+0x3c0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80082be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80082c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082c6:	f083 0301 	eor.w	r3, r3, #1
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80082d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2000      	movs	r0, #0
 80082d6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80082d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082da:	3304      	adds	r3, #4
 80082dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd4c 	bl	8006d7c <tu_fifo_write>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 80082ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082ee:	f083 0301 	eor.w	r3, r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 80082f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2001      	movs	r0, #1
 80082fe:	4798      	blx	r3
  return success;
 8008300:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008304:	f083 0301 	eor.w	r3, r3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d009      	beq.n	8008322 <dcd_event_handler+0x39e>
 800830e:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <dcd_event_handler+0x3c4>)
 8008310:	623b      	str	r3, [r7, #32]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <dcd_event_handler+0x3b4>
 800831e:	be00      	bkpt	0x0000
 8008320:	e00a      	b.n	8008338 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008324:	7818      	ldrb	r0, [r3, #0]
 8008326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	4619      	mov	r1, r3
 800832c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008330:	461a      	mov	r2, r3
 8008332:	f7fe fd9b 	bl	8006e6c <tud_event_hook_cb>
  return true;
 8008336:	e000      	b.n	800833a <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008338:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800833a:	bf00      	nop
 800833c:	3780      	adds	r7, #128	@ 0x80
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20001168 	.word	0x20001168
 8008348:	e000edf0 	.word	0xe000edf0

0800834c <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <usbd_int_set+0x30>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f001 f929 	bl	80095b8 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8008366:	e004      	b.n	8008372 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8008368:	4b04      	ldr	r3, [pc, #16]	@ (800837c <usbd_int_set+0x30>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f94b 	bl	8009608 <dcd_int_disable>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000069 	.word	0x20000069

08008380 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
 800838a:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <usbd_spin_lock+0x30>)
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f083 0301 	eor.w	r3, r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2000      	movs	r0, #0
 80083a4:	4798      	blx	r3
}
 80083a6:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 80083a8:	bf00      	nop
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	2000006c 	.word	0x2000006c

080083b4 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
 80083be:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <usbd_spin_unlock+0x30>)
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	f083 0301 	eor.w	r3, r3, #1
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2001      	movs	r0, #1
 80083d8:	4798      	blx	r3
}
 80083da:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	2000006c 	.word	0x2000006c

080083e8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	@ 0x28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6039      	str	r1, [r7, #0]
 80083f0:	4611      	mov	r1, r2
 80083f2:	461a      	mov	r2, r3
 80083f4:	4603      	mov	r3, r0
 80083f6:	71fb      	strb	r3, [r7, #7]
 80083f8:	460b      	mov	r3, r1
 80083fa:	71bb      	strb	r3, [r7, #6]
 80083fc:	4613      	mov	r3, r2
 80083fe:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
 8008404:	e04d      	b.n	80084a2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b05      	cmp	r3, #5
 8008410:	d108      	bne.n	8008424 <usbd_open_edpt_pair+0x3c>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	78db      	ldrb	r3, [r3, #3]
 8008416:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800841a:	b2db      	uxtb	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	797b      	ldrb	r3, [r7, #5]
 8008420:	4293      	cmp	r3, r2
 8008422:	d00a      	beq.n	800843a <usbd_open_edpt_pair+0x52>
 8008424:	4b23      	ldr	r3, [pc, #140]	@ (80084b4 <usbd_open_edpt_pair+0xcc>)
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d000      	beq.n	8008436 <usbd_open_edpt_pair+0x4e>
 8008434:	be00      	bkpt	0x0000
 8008436:	2300      	movs	r3, #0
 8008438:	e038      	b.n	80084ac <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	6a39      	ldr	r1, [r7, #32]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f83a 	bl	80084b8 <usbd_edpt_open>
 8008444:	4603      	mov	r3, r0
 8008446:	f083 0301 	eor.w	r3, r3, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <usbd_open_edpt_pair+0x7e>
 8008450:	4b18      	ldr	r3, [pc, #96]	@ (80084b4 <usbd_open_edpt_pair+0xcc>)
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d000      	beq.n	8008462 <usbd_open_edpt_pair+0x7a>
 8008460:	be00      	bkpt	0x0000
 8008462:	2300      	movs	r3, #0
 8008464:	e022      	b.n	80084ac <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	789b      	ldrb	r3, [r3, #2]
 800846a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	09db      	lsrs	r3, r3, #7
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d104      	bne.n	8008480 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	789a      	ldrb	r2, [r3, #2]
 800847a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e003      	b.n	8008488 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	789a      	ldrb	r2, [r3, #2]
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800849a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	3301      	adds	r3, #1
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a2:	79bb      	ldrb	r3, [r7, #6]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	429a      	cmp	r2, r3
 80084a8:	dbad      	blt.n	8008406 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80084aa:	2301      	movs	r3, #1
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3728      	adds	r7, #40	@ 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000edf0 	.word	0xe000edf0

080084b8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80084c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008538 <usbd_edpt_open+0x80>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	789b      	ldrb	r3, [r3, #2]
 80084ce:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d90a      	bls.n	80084f2 <usbd_edpt_open+0x3a>
 80084dc:	4b17      	ldr	r3, [pc, #92]	@ (800853c <usbd_edpt_open+0x84>)
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d000      	beq.n	80084ee <usbd_edpt_open+0x36>
 80084ec:	be00      	bkpt	0x0000
 80084ee:	2300      	movs	r3, #0
 80084f0:	e01d      	b.n	800852e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 80084f2:	4b13      	ldr	r3, [pc, #76]	@ (8008540 <usbd_edpt_open+0x88>)
 80084f4:	789b      	ldrb	r3, [r3, #2]
 80084f6:	2200      	movs	r2, #0
 80084f8:	4619      	mov	r1, r3
 80084fa:	6838      	ldr	r0, [r7, #0]
 80084fc:	f002 fb4a 	bl	800ab94 <tu_edpt_validate>
 8008500:	4603      	mov	r3, r0
 8008502:	f083 0301 	eor.w	r3, r3, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <usbd_edpt_open+0x6a>
 800850c:	4b0b      	ldr	r3, [pc, #44]	@ (800853c <usbd_edpt_open+0x84>)
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d000      	beq.n	800851e <usbd_edpt_open+0x66>
 800851c:	be00      	bkpt	0x0000
 800851e:	2300      	movs	r3, #0
 8008520:	e005      	b.n	800852e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f001 f992 	bl	8009850 <dcd_edpt_open>
 800852c:	4603      	mov	r3, r0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000069 	.word	0x20000069
 800853c:	e000edf0 	.word	0xe000edf0
 8008540:	20001070 	.word	0x20001070

08008544 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	460a      	mov	r2, r1
 800854e:	71fb      	strb	r3, [r7, #7]
 8008550:	4613      	mov	r3, r2
 8008552:	71bb      	strb	r3, [r7, #6]
 8008554:	79bb      	ldrb	r3, [r7, #6]
 8008556:	73bb      	strb	r3, [r7, #14]
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008560:	75fb      	strb	r3, [r7, #23]
 8008562:	79bb      	ldrb	r3, [r7, #6]
 8008564:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	09db      	lsrs	r3, r3, #7
 800856a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800856c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800856e:	7dfa      	ldrb	r2, [r7, #23]
 8008570:	7dbb      	ldrb	r3, [r7, #22]
 8008572:	0052      	lsls	r2, r2, #1
 8008574:	4413      	add	r3, r2
 8008576:	3320      	adds	r3, #32
 8008578:	4a05      	ldr	r2, [pc, #20]	@ (8008590 <usbd_edpt_claim+0x4c>)
 800857a:	4413      	add	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800857e:	2100      	movs	r1, #0
 8008580:	6938      	ldr	r0, [r7, #16]
 8008582:	f002 faa2 	bl	800aaca <tu_edpt_claim>
 8008586:	4603      	mov	r3, r0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20001070 	.word	0x20001070

08008594 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	460a      	mov	r2, r1
 800859e:	71fb      	strb	r3, [r7, #7]
 80085a0:	4613      	mov	r3, r2
 80085a2:	71bb      	strb	r3, [r7, #6]
 80085a4:	79bb      	ldrb	r3, [r7, #6]
 80085a6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ae:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80085b0:	75fb      	strb	r3, [r7, #23]
 80085b2:	79bb      	ldrb	r3, [r7, #6]
 80085b4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	09db      	lsrs	r3, r3, #7
 80085ba:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80085bc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80085be:	7dfa      	ldrb	r2, [r7, #23]
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
 80085c2:	0052      	lsls	r2, r2, #1
 80085c4:	4413      	add	r3, r2
 80085c6:	3320      	adds	r3, #32
 80085c8:	4a05      	ldr	r2, [pc, #20]	@ (80085e0 <usbd_edpt_release+0x4c>)
 80085ca:	4413      	add	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80085ce:	2100      	movs	r1, #0
 80085d0:	6938      	ldr	r0, [r7, #16]
 80085d2:	f002 fab4 	bl	800ab3e <tu_edpt_release>
 80085d6:	4603      	mov	r3, r0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20001070 	.word	0x20001070

080085e4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	603a      	str	r2, [r7, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
 80085f2:	460b      	mov	r3, r1
 80085f4:	71bb      	strb	r3, [r7, #6]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80085fa:	4b32      	ldr	r3, [pc, #200]	@ (80086c4 <usbd_edpt_xfer+0xe0>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	79bb      	ldrb	r3, [r7, #6]
 8008602:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008604:	7abb      	ldrb	r3, [r7, #10]
 8008606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800860a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800860c:	75fb      	strb	r3, [r7, #23]
 800860e:	79bb      	ldrb	r3, [r7, #6]
 8008610:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008612:	7afb      	ldrb	r3, [r7, #11]
 8008614:	09db      	lsrs	r3, r3, #7
 8008616:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008618:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800861a:	7dfa      	ldrb	r2, [r7, #23]
 800861c:	7dbb      	ldrb	r3, [r7, #22]
 800861e:	492a      	ldr	r1, [pc, #168]	@ (80086c8 <usbd_edpt_xfer+0xe4>)
 8008620:	0052      	lsls	r2, r2, #1
 8008622:	440a      	add	r2, r1
 8008624:	4413      	add	r3, r2
 8008626:	3320      	adds	r3, #32
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <usbd_edpt_xfer+0x66>
 8008634:	4b25      	ldr	r3, [pc, #148]	@ (80086cc <usbd_edpt_xfer+0xe8>)
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d000      	beq.n	8008646 <usbd_edpt_xfer+0x62>
 8008644:	be00      	bkpt	0x0000
 8008646:	2300      	movs	r3, #0
 8008648:	e038      	b.n	80086bc <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800864a:	7dfa      	ldrb	r2, [r7, #23]
 800864c:	7dbb      	ldrb	r3, [r7, #22]
 800864e:	491e      	ldr	r1, [pc, #120]	@ (80086c8 <usbd_edpt_xfer+0xe4>)
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	440a      	add	r2, r1
 8008654:	4413      	add	r3, r2
 8008656:	f103 0220 	add.w	r2, r3, #32
 800865a:	7813      	ldrb	r3, [r2, #0]
 800865c:	f043 0301 	orr.w	r3, r3, #1
 8008660:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8008662:	88bb      	ldrh	r3, [r7, #4]
 8008664:	79b9      	ldrb	r1, [r7, #6]
 8008666:	79f8      	ldrb	r0, [r7, #7]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	f001 f9b5 	bl	80099d8 <dcd_edpt_xfer>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <usbd_edpt_xfer+0x94>
    return true;
 8008674:	2301      	movs	r3, #1
 8008676:	e021      	b.n	80086bc <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008678:	7dfa      	ldrb	r2, [r7, #23]
 800867a:	7dbb      	ldrb	r3, [r7, #22]
 800867c:	4912      	ldr	r1, [pc, #72]	@ (80086c8 <usbd_edpt_xfer+0xe4>)
 800867e:	0052      	lsls	r2, r2, #1
 8008680:	440a      	add	r2, r1
 8008682:	4413      	add	r3, r2
 8008684:	f103 0220 	add.w	r2, r3, #32
 8008688:	7813      	ldrb	r3, [r2, #0]
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008690:	7dfa      	ldrb	r2, [r7, #23]
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	490c      	ldr	r1, [pc, #48]	@ (80086c8 <usbd_edpt_xfer+0xe4>)
 8008696:	0052      	lsls	r2, r2, #1
 8008698:	440a      	add	r2, r1
 800869a:	4413      	add	r3, r2
 800869c:	f103 0220 	add.w	r2, r3, #32
 80086a0:	7813      	ldrb	r3, [r2, #0]
 80086a2:	f023 0304 	bic.w	r3, r3, #4
 80086a6:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80086a8:	4b08      	ldr	r3, [pc, #32]	@ (80086cc <usbd_edpt_xfer+0xe8>)
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d000      	beq.n	80086ba <usbd_edpt_xfer+0xd6>
 80086b8:	be00      	bkpt	0x0000
    return false;
 80086ba:	2300      	movs	r3, #0
  }
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000069 	.word	0x20000069
 80086c8:	20001070 	.word	0x20001070
 80086cc:	e000edf0 	.word	0xe000edf0

080086d0 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	460a      	mov	r2, r1
 80086da:	71fb      	strb	r3, [r7, #7]
 80086dc:	4613      	mov	r3, r2
 80086de:	71bb      	strb	r3, [r7, #6]
 80086e0:	79bb      	ldrb	r3, [r7, #6]
 80086e2:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80086e4:	7b3b      	ldrb	r3, [r7, #12]
 80086e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ea:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80086ec:	73fb      	strb	r3, [r7, #15]
 80086ee:	79bb      	ldrb	r3, [r7, #6]
 80086f0:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086f2:	7b7b      	ldrb	r3, [r7, #13]
 80086f4:	09db      	lsrs	r3, r3, #7
 80086f6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80086f8:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80086fa:	7bfa      	ldrb	r2, [r7, #15]
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	490a      	ldr	r1, [pc, #40]	@ (8008728 <usbd_edpt_busy+0x58>)
 8008700:	0052      	lsls	r2, r2, #1
 8008702:	440a      	add	r2, r1
 8008704:	4413      	add	r3, r2
 8008706:	3320      	adds	r3, #32
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf14      	ite	ne
 8008714:	2301      	movne	r3, #1
 8008716:	2300      	moveq	r3, #0
 8008718:	b2db      	uxtb	r3, r3
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20001070 	.word	0x20001070

0800872c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	460a      	mov	r2, r1
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	4613      	mov	r3, r2
 800873a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800873c:	4b18      	ldr	r3, [pc, #96]	@ (80087a0 <usbd_edpt_stall+0x74>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	71fb      	strb	r3, [r7, #7]
 8008742:	79bb      	ldrb	r3, [r7, #6]
 8008744:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008746:	7b3b      	ldrb	r3, [r7, #12]
 8008748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800874e:	73fb      	strb	r3, [r7, #15]
 8008750:	79bb      	ldrb	r3, [r7, #6]
 8008752:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008754:	7b7b      	ldrb	r3, [r7, #13]
 8008756:	09db      	lsrs	r3, r3, #7
 8008758:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800875a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800875c:	79ba      	ldrb	r2, [r7, #6]
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f001 f988 	bl	8009a78 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008768:	7bfa      	ldrb	r2, [r7, #15]
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	490d      	ldr	r1, [pc, #52]	@ (80087a4 <usbd_edpt_stall+0x78>)
 800876e:	0052      	lsls	r2, r2, #1
 8008770:	440a      	add	r2, r1
 8008772:	4413      	add	r3, r2
 8008774:	f103 0220 	add.w	r2, r3, #32
 8008778:	7813      	ldrb	r3, [r2, #0]
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	4907      	ldr	r1, [pc, #28]	@ (80087a4 <usbd_edpt_stall+0x78>)
 8008786:	0052      	lsls	r2, r2, #1
 8008788:	440a      	add	r2, r1
 800878a:	4413      	add	r3, r2
 800878c:	f103 0220 	add.w	r2, r3, #32
 8008790:	7813      	ldrb	r3, [r2, #0]
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	7013      	strb	r3, [r2, #0]
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000069 	.word	0x20000069
 80087a4:	20001070 	.word	0x20001070

080087a8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	460a      	mov	r2, r1
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80087b8:	4b18      	ldr	r3, [pc, #96]	@ (800881c <usbd_edpt_clear_stall+0x74>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	71fb      	strb	r3, [r7, #7]
 80087be:	79bb      	ldrb	r3, [r7, #6]
 80087c0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80087c2:	7b3b      	ldrb	r3, [r7, #12]
 80087c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	79bb      	ldrb	r3, [r7, #6]
 80087ce:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087d0:	7b7b      	ldrb	r3, [r7, #13]
 80087d2:	09db      	lsrs	r3, r3, #7
 80087d4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80087d6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80087d8:	79ba      	ldrb	r2, [r7, #6]
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f980 	bl	8009ae4 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80087e4:	7bfa      	ldrb	r2, [r7, #15]
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	490d      	ldr	r1, [pc, #52]	@ (8008820 <usbd_edpt_clear_stall+0x78>)
 80087ea:	0052      	lsls	r2, r2, #1
 80087ec:	440a      	add	r2, r1
 80087ee:	4413      	add	r3, r2
 80087f0:	f103 0220 	add.w	r2, r3, #32
 80087f4:	7813      	ldrb	r3, [r2, #0]
 80087f6:	f023 0302 	bic.w	r3, r3, #2
 80087fa:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80087fc:	7bfa      	ldrb	r2, [r7, #15]
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	4907      	ldr	r1, [pc, #28]	@ (8008820 <usbd_edpt_clear_stall+0x78>)
 8008802:	0052      	lsls	r2, r2, #1
 8008804:	440a      	add	r2, r1
 8008806:	4413      	add	r3, r2
 8008808:	f103 0220 	add.w	r2, r3, #32
 800880c:	7813      	ldrb	r3, [r2, #0]
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	7013      	strb	r3, [r2, #0]
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000069 	.word	0x20000069
 8008820:	20001070 	.word	0x20001070

08008824 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	460a      	mov	r2, r1
 800882e:	71fb      	strb	r3, [r7, #7]
 8008830:	4613      	mov	r3, r2
 8008832:	71bb      	strb	r3, [r7, #6]
 8008834:	79bb      	ldrb	r3, [r7, #6]
 8008836:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008838:	7b3b      	ldrb	r3, [r7, #12]
 800883a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800883e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	79bb      	ldrb	r3, [r7, #6]
 8008844:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008846:	7b7b      	ldrb	r3, [r7, #13]
 8008848:	09db      	lsrs	r3, r3, #7
 800884a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800884c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800884e:	7bfa      	ldrb	r2, [r7, #15]
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	490a      	ldr	r1, [pc, #40]	@ (800887c <usbd_edpt_stalled+0x58>)
 8008854:	0052      	lsls	r2, r2, #1
 8008856:	440a      	add	r2, r1
 8008858:	4413      	add	r3, r2
 800885a:	3320      	adds	r3, #32
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	2301      	movne	r3, #1
 800886a:	2300      	moveq	r3, #0
 800886c:	b2db      	uxtb	r3, r3
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20001070 	.word	0x20001070

08008880 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <status_stage_xact+0x1e>
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <status_stage_xact+0x20>
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80088ba:	7bf9      	ldrb	r1, [r7, #15]
 80088bc:	79f8      	ldrb	r0, [r7, #7]
 80088be:	2300      	movs	r3, #0
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7ff fe8f 	bl	80085e4 <usbd_edpt_xfer>
 80088c6:	4603      	mov	r3, r0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80088dc:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <tud_control_status+0x3c>)
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	6810      	ldr	r0, [r2, #0]
 80088e2:	6851      	ldr	r1, [r2, #4]
 80088e4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80088e6:	4b09      	ldr	r3, [pc, #36]	@ (800890c <tud_control_status+0x3c>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80088ec:	4b07      	ldr	r3, [pc, #28]	@ (800890c <tud_control_status+0x3c>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80088f2:	4b06      	ldr	r3, [pc, #24]	@ (800890c <tud_control_status+0x3c>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff ffcb 	bl	8008898 <status_stage_xact>
 8008902:	4603      	mov	r3, r0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	2000116c 	.word	0x2000116c

08008910 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800891a:	4b24      	ldr	r3, [pc, #144]	@ (80089ac <data_stage_xact+0x9c>)
 800891c:	899a      	ldrh	r2, [r3, #12]
 800891e:	4b23      	ldr	r3, [pc, #140]	@ (80089ac <data_stage_xact+0x9c>)
 8008920:	89db      	ldrh	r3, [r3, #14]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	b29b      	uxth	r3, r3
 8008926:	837b      	strh	r3, [r7, #26]
 8008928:	2340      	movs	r3, #64	@ 0x40
 800892a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800892c:	8b7a      	ldrh	r2, [r7, #26]
 800892e:	8b3b      	ldrh	r3, [r7, #24]
 8008930:	4293      	cmp	r3, r2
 8008932:	bf28      	it	cs
 8008934:	4613      	movcs	r3, r2
 8008936:	b29b      	uxth	r3, r3
 8008938:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800893a:	2300      	movs	r3, #0
 800893c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800893e:	4b1b      	ldr	r3, [pc, #108]	@ (80089ac <data_stage_xact+0x9c>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01e      	beq.n	800898a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800894c:	2380      	movs	r3, #128	@ 0x80
 800894e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8008950:	8bbb      	ldrh	r3, [r7, #28]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d019      	beq.n	800898a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008956:	4b15      	ldr	r3, [pc, #84]	@ (80089ac <data_stage_xact+0x9c>)
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	8bbb      	ldrh	r3, [r7, #28]
 800895c:	4914      	ldr	r1, [pc, #80]	@ (80089b0 <data_stage_xact+0xa0>)
 800895e:	6179      	str	r1, [r7, #20]
 8008960:	2140      	movs	r1, #64	@ 0x40
 8008962:	6139      	str	r1, [r7, #16]
 8008964:	60fa      	str	r2, [r7, #12]
 8008966:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	429a      	cmp	r2, r3
 800896e:	d202      	bcs.n	8008976 <data_stage_xact+0x66>
    return -1;
 8008970:	f04f 33ff 	mov.w	r3, #4294967295
 8008974:	e005      	b.n	8008982 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	68f9      	ldr	r1, [r7, #12]
 800897a:	6978      	ldr	r0, [r7, #20]
 800897c:	f002 fc80 	bl	800b280 <memcpy>
  return 0;
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <data_stage_xact+0x7a>
 8008986:	2300      	movs	r3, #0
 8008988:	e00b      	b.n	80089a2 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800898a:	8bbb      	ldrh	r3, [r7, #28]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <data_stage_xact+0x84>
 8008990:	4a07      	ldr	r2, [pc, #28]	@ (80089b0 <data_stage_xact+0xa0>)
 8008992:	e000      	b.n	8008996 <data_stage_xact+0x86>
 8008994:	2200      	movs	r2, #0
 8008996:	8bbb      	ldrh	r3, [r7, #28]
 8008998:	7ff9      	ldrb	r1, [r7, #31]
 800899a:	79f8      	ldrb	r0, [r7, #7]
 800899c:	f7ff fe22 	bl	80085e4 <usbd_edpt_xfer>
 80089a0:	4603      	mov	r3, r0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	2000116c 	.word	0x2000116c
 80089b0:	20001180 	.word	0x20001180

080089b4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	461a      	mov	r2, r3
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	4613      	mov	r3, r2
 80089c6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80089c8:	4b30      	ldr	r3, [pc, #192]	@ (8008a8c <tud_control_xfer+0xd8>)
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	6810      	ldr	r0, [r2, #0]
 80089ce:	6851      	ldr	r1, [r2, #4]
 80089d0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80089d2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a8c <tud_control_xfer+0xd8>)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80089d8:	4b2c      	ldr	r3, [pc, #176]	@ (8008a8c <tud_control_xfer+0xd8>)
 80089da:	2200      	movs	r2, #0
 80089dc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	89bb      	ldrh	r3, [r7, #12]
 80089e6:	827b      	strh	r3, [r7, #18]
 80089e8:	4613      	mov	r3, r2
 80089ea:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80089ec:	8a7a      	ldrh	r2, [r7, #18]
 80089ee:	8a3b      	ldrh	r3, [r7, #16]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	bf28      	it	cs
 80089f4:	4613      	movcs	r3, r2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	4b24      	ldr	r3, [pc, #144]	@ (8008a8c <tud_control_xfer+0xd8>)
 80089fa:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	88db      	ldrh	r3, [r3, #6]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d026      	beq.n	8008a54 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8008a06:	4b21      	ldr	r3, [pc, #132]	@ (8008a8c <tud_control_xfer+0xd8>)
 8008a08:	899b      	ldrh	r3, [r3, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00d      	beq.n	8008a2a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <tud_control_xfer+0x76>
 8008a14:	4b1e      	ldr	r3, [pc, #120]	@ (8008a90 <tud_control_xfer+0xdc>)
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d000      	beq.n	8008a26 <tud_control_xfer+0x72>
 8008a24:	be00      	bkpt	0x0000
 8008a26:	2300      	movs	r3, #0
 8008a28:	e02b      	b.n	8008a82 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff ff6f 	bl	8008910 <data_stage_xact>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f083 0301 	eor.w	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d020      	beq.n	8008a80 <tud_control_xfer+0xcc>
 8008a3e:	4b14      	ldr	r3, [pc, #80]	@ (8008a90 <tud_control_xfer+0xdc>)
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d000      	beq.n	8008a50 <tud_control_xfer+0x9c>
 8008a4e:	be00      	bkpt	0x0000
 8008a50:	2300      	movs	r3, #0
 8008a52:	e016      	b.n	8008a82 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff ff1d 	bl	8008898 <status_stage_xact>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f083 0301 	eor.w	r3, r3, #1
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <tud_control_xfer+0xcc>
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <tud_control_xfer+0xdc>)
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d000      	beq.n	8008a7c <tud_control_xfer+0xc8>
 8008a7a:	be00      	bkpt	0x0000
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e000      	b.n	8008a82 <tud_control_xfer+0xce>
  }

  return true;
 8008a80:	2301      	movs	r3, #1
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000116c 	.word	0x2000116c
 8008a90:	e000edf0 	.word	0xe000edf0

08008a94 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008a98:	2214      	movs	r2, #20
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4802      	ldr	r0, [pc, #8]	@ (8008aa8 <usbd_control_reset+0x14>)
 8008a9e:	f002 fbbb 	bl	800b218 <memset>
}
 8008aa2:	bf00      	nop
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000116c 	.word	0x2000116c

08008aac <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008ab4:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <usbd_control_set_complete_callback+0x1c>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6113      	str	r3, [r2, #16]
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	2000116c 	.word	0x2000116c

08008acc <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008ad4:	4b09      	ldr	r3, [pc, #36]	@ (8008afc <usbd_control_set_request+0x30>)
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6810      	ldr	r0, [r2, #0]
 8008ada:	6851      	ldr	r1, [r2, #4]
 8008adc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008ade:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <usbd_control_set_request+0x30>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <usbd_control_set_request+0x30>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008aea:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <usbd_control_set_request+0x30>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	819a      	strh	r2, [r3, #12]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	2000116c 	.word	0x2000116c

08008b00 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	4603      	mov	r3, r0
 8008b0a:	71fb      	strb	r3, [r7, #7]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	71bb      	strb	r3, [r7, #6]
 8008b10:	4613      	mov	r3, r2
 8008b12:	717b      	strb	r3, [r7, #5]
 8008b14:	79bb      	ldrb	r3, [r7, #6]
 8008b16:	73fb      	strb	r3, [r7, #15]
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	09db      	lsrs	r3, r3, #7
 8008b1c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008b1e:	4a4f      	ldr	r2, [pc, #316]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d01e      	beq.n	8008b6a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <usbd_control_xfer_cb+0x48>
 8008b32:	4b4b      	ldr	r3, [pc, #300]	@ (8008c60 <usbd_control_xfer_cb+0x160>)
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d000      	beq.n	8008b44 <usbd_control_xfer_cb+0x44>
 8008b42:	be00      	bkpt	0x0000
 8008b44:	2300      	movs	r3, #0
 8008b46:	e084      	b.n	8008c52 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	4944      	ldr	r1, [pc, #272]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff fe97 	bl	8008880 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008b52:	4b42      	ldr	r3, [pc, #264]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008b5a:	4b40      	ldr	r3, [pc, #256]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	79f8      	ldrb	r0, [r7, #7]
 8008b60:	4a3e      	ldr	r2, [pc, #248]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b62:	2103      	movs	r1, #3
 8008b64:	4798      	blx	r3
    }

    return true;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e073      	b.n	8008c52 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8008b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10c      	bne.n	8008b92 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008b78:	4b38      	ldr	r3, [pc, #224]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <usbd_control_xfer_cb+0x84>
 8008b80:	2300      	movs	r3, #0
 8008b82:	e066      	b.n	8008c52 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008b84:	4b35      	ldr	r3, [pc, #212]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	4936      	ldr	r1, [pc, #216]	@ (8008c64 <usbd_control_xfer_cb+0x164>)
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f002 fb77 	bl	800b280 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008b92:	4b32      	ldr	r3, [pc, #200]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008b94:	89da      	ldrh	r2, [r3, #14]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008ba0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	4413      	add	r3, r2
 8008baa:	4a2c      	ldr	r2, [pc, #176]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bac:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8008bae:	4b2b      	ldr	r3, [pc, #172]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bb0:	88da      	ldrh	r2, [r3, #6]
 8008bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bb4:	89db      	ldrh	r3, [r3, #14]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d002      	beq.n	8008bc0 <usbd_control_xfer_cb+0xc0>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8008bbe:	d831      	bhi.n	8008c24 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008bc4:	4b25      	ldr	r3, [pc, #148]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d007      	beq.n	8008bdc <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8008bcc:	4b23      	ldr	r3, [pc, #140]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	79f8      	ldrb	r0, [r7, #7]
 8008bd2:	4a22      	ldr	r2, [pc, #136]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4798      	blx	r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8008bdc:	7ffb      	ldrb	r3, [r7, #31]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d015      	beq.n	8008c0e <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	491d      	ldr	r1, [pc, #116]	@ (8008c5c <usbd_control_xfer_cb+0x15c>)
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fe56 	bl	8008898 <status_stage_xact>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f083 0301 	eor.w	r3, r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d02a      	beq.n	8008c4e <usbd_control_xfer_cb+0x14e>
 8008bf8:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <usbd_control_xfer_cb+0x160>)
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d000      	beq.n	8008c0a <usbd_control_xfer_cb+0x10a>
 8008c08:	be00      	bkpt	0x0000
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e021      	b.n	8008c52 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 ff30 	bl	8009a78 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	2180      	movs	r1, #128	@ 0x80
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 ff2b 	bl	8009a78 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008c22:	e014      	b.n	8008c4e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff fe72 	bl	8008910 <data_stage_xact>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f083 0301 	eor.w	r3, r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <usbd_control_xfer_cb+0x150>
 8008c38:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <usbd_control_xfer_cb+0x160>)
 8008c3a:	61bb      	str	r3, [r7, #24]
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d000      	beq.n	8008c4a <usbd_control_xfer_cb+0x14a>
 8008c48:	be00      	bkpt	0x0000
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e001      	b.n	8008c52 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008c4e:	bf00      	nop
  }

  return true;
 8008c50:	2301      	movs	r3, #1
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2000116c 	.word	0x2000116c
 8008c60:	e000edf0 	.word	0xe000edf0
 8008c64:	20001180 	.word	0x20001180

08008c68 <__NVIC_EnableIRQ>:
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	db0b      	blt.n	8008c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	f003 021f 	and.w	r2, r3, #31
 8008c80:	4907      	ldr	r1, [pc, #28]	@ (8008ca0 <__NVIC_EnableIRQ+0x38>)
 8008c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	2001      	movs	r0, #1
 8008c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	e000e100 	.word	0xe000e100

08008ca4 <__NVIC_DisableIRQ>:
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	db12      	blt.n	8008cdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	f003 021f 	and.w	r2, r3, #31
 8008cbc:	490a      	ldr	r1, [pc, #40]	@ (8008ce8 <__NVIC_DisableIRQ+0x44>)
 8008cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8008cca:	3320      	adds	r3, #32
 8008ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cd0:	f3bf 8f4f 	dsb	sy
}
 8008cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cd6:	f3bf 8f6f 	isb	sy
}
 8008cda:	bf00      	nop
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	e000e100 	.word	0xe000e100

08008cec <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	71fb      	strb	r3, [r7, #7]
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	4a13      	ldr	r2, [pc, #76]	@ (8008d54 <dma_setup_prepare+0x68>)
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008d0e:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d14:	4a10      	ldr	r2, [pc, #64]	@ (8008d58 <dma_setup_prepare+0x6c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d904      	bls.n	8008d24 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	db10      	blt.n	8008d46 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a0d      	ldr	r2, [pc, #52]	@ (8008d5c <dma_setup_prepare+0x70>)
 8008d28:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8008d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8008d60 <dma_setup_prepare+0x74>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008d3a:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8008d44:	e000      	b.n	8008d48 <dma_setup_prepare+0x5c>
      return;
 8008d46:	bf00      	nop
}
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	0800c424 	.word	0x0800c424
 8008d58:	4f543009 	.word	0x4f543009
 8008d5c:	20080008 	.word	0x20080008
 8008d60:	20001248 	.word	0x20001248

08008d64 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8008d64:	b480      	push	{r7}
 8008d66:	b091      	sub	sp, #68	@ 0x44
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	71fb      	strb	r3, [r7, #7]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	71bb      	strb	r3, [r7, #6]
 8008d72:	4613      	mov	r3, r2
 8008d74:	80bb      	strh	r3, [r7, #4]
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008d7a:	7e7b      	ldrb	r3, [r7, #25]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <dfifo_alloc+0x20>
    rhport = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008d84:	7e7b      	ldrb	r3, [r7, #25]
 8008d86:	4a65      	ldr	r2, [pc, #404]	@ (8008f1c <dfifo_alloc+0x1b8>)
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	4413      	add	r3, r2
 8008d8c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	4a61      	ldr	r2, [pc, #388]	@ (8008f1c <dfifo_alloc+0x1b8>)
 8008d96:	4413      	add	r3, r2
 8008d98:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9c:	7a1b      	ldrb	r3, [r3, #8]
 8008d9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008da2:	79bb      	ldrb	r3, [r7, #6]
 8008da4:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008da6:	7ebb      	ldrb	r3, [r7, #26]
 8008da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dac:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8008dae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8008db2:	79bb      	ldrb	r3, [r7, #6]
 8008db4:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008db6:	7efb      	ldrb	r3, [r7, #27]
 8008db8:	09db      	lsrs	r3, r3, #7
 8008dba:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8008dbc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8008dc0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8008dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d30a      	bcc.n	8008de2 <dfifo_alloc+0x7e>
 8008dcc:	4b54      	ldr	r3, [pc, #336]	@ (8008f20 <dfifo_alloc+0x1bc>)
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d000      	beq.n	8008dde <dfifo_alloc+0x7a>
 8008ddc:	be00      	bkpt	0x0000
 8008dde:	2300      	movs	r3, #0
 8008de0:	e095      	b.n	8008f0e <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8008de2:	88bb      	ldrh	r3, [r7, #4]
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	2304      	movs	r3, #4
 8008de8:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	4413      	add	r3, r2
 8008df0:	1e5a      	subs	r2, r3, #1
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8008dfa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d12a      	bne.n	8008e58 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008e02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	81fb      	strh	r3, [r7, #14]
 8008e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e0e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	089b      	lsrs	r3, r3, #2
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f103 0208 	add.w	r2, r3, #8
 8008e1a:	7b7b      	ldrb	r3, [r7, #13]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008e24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d26d      	bcs.n	8008f0c <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8008e30:	4b3c      	ldr	r3, [pc, #240]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008e32:	889b      	ldrh	r3, [r3, #4]
 8008e34:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d90a      	bls.n	8008e50 <dfifo_alloc+0xec>
 8008e3a:	4b39      	ldr	r3, [pc, #228]	@ (8008f20 <dfifo_alloc+0x1bc>)
 8008e3c:	623b      	str	r3, [r7, #32]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d000      	beq.n	8008e4c <dfifo_alloc+0xe8>
 8008e4a:	be00      	bkpt	0x0000
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e05e      	b.n	8008f0e <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8008e50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e54:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e56:	e059      	b.n	8008f0c <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8008e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5a:	7a5b      	ldrb	r3, [r3, #9]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d016      	beq.n	8008e8e <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8008e60:	4b30      	ldr	r3, [pc, #192]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008e62:	799a      	ldrb	r2, [r3, #6]
 8008e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e66:	7a5b      	ldrb	r3, [r3, #9]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d30a      	bcc.n	8008e82 <dfifo_alloc+0x11e>
 8008e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8008f20 <dfifo_alloc+0x1bc>)
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d000      	beq.n	8008e7e <dfifo_alloc+0x11a>
 8008e7c:	be00      	bkpt	0x0000
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e045      	b.n	8008f0e <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8008e82:	4b28      	ldr	r3, [pc, #160]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008e84:	799b      	ldrb	r3, [r3, #6]
 8008e86:	3301      	adds	r3, #1
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	4b26      	ldr	r3, [pc, #152]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008e8c:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8008e9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8008ea0:	4b20      	ldr	r3, [pc, #128]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008ea2:	889b      	ldrh	r3, [r3, #4]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	4413      	add	r3, r2
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d20a      	bcs.n	8008ec8 <dfifo_alloc+0x164>
 8008eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f20 <dfifo_alloc+0x1bc>)
 8008eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d000      	beq.n	8008ec4 <dfifo_alloc+0x160>
 8008ec2:	be00      	bkpt	0x0000
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e022      	b.n	8008f0e <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8008ec8:	4b16      	ldr	r3, [pc, #88]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008eca:	889a      	ldrh	r2, [r3, #4]
 8008ecc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008ed4:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8008ed6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d108      	bne.n	8008ef0 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8008ede:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	4a10      	ldr	r2, [pc, #64]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008ee4:	8892      	ldrh	r2, [r2, #4]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	629a      	str	r2, [r3, #40]	@ 0x28
 8008eee:	e00d      	b.n	8008f0c <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8008ef0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f24 <dfifo_alloc+0x1c0>)
 8008ef6:	8892      	ldrh	r2, [r2, #4]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008efe:	3b01      	subs	r3, #1
 8008f00:	4611      	mov	r1, r2
 8008f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f04:	3340      	adds	r3, #64	@ 0x40
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8008f0c:	2301      	movs	r3, #1
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3744      	adds	r7, #68	@ 0x44
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	0800c424 	.word	0x0800c424
 8008f20:	e000edf0 	.word	0xe000edf0
 8008f24:	20001240 	.word	0x20001240

08008f28 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	4a27      	ldr	r2, [pc, #156]	@ (8008fd4 <dfifo_device_init+0xac>)
 8008f38:	4413      	add	r3, r2
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008f40:	7b3b      	ldrb	r3, [r7, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <dfifo_device_init+0x22>
    rhport = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008f4a:	7b3b      	ldrb	r3, [r7, #12]
 8008f4c:	4a21      	ldr	r2, [pc, #132]	@ (8008fd4 <dfifo_device_init+0xac>)
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	4413      	add	r3, r2
 8008f52:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008f54:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	7a1b      	ldrb	r3, [r3, #8]
 8008f5a:	2240      	movs	r2, #64	@ 0x40
 8008f5c:	81fa      	strh	r2, [r7, #14]
 8008f5e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008f60:	89fb      	ldrh	r3, [r7, #14]
 8008f62:	089b      	lsrs	r3, r3, #2
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f103 0208 	add.w	r2, r3, #8
 8008f6a:	7b7b      	ldrb	r3, [r7, #13]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008f74:	461a      	mov	r2, r3
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f82:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008f84:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8008f86:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	089b      	lsrs	r3, r3, #2
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	4b11      	ldr	r3, [pc, #68]	@ (8008fd8 <dfifo_device_init+0xb0>)
 8008f92:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8008f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd8 <dfifo_device_init+0xb0>)
 8008f9c:	889a      	ldrh	r2, [r3, #4]
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	7a1b      	ldrb	r3, [r3, #8]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd8 <dfifo_device_init+0xb0>)
 8008fac:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8008fae:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <dfifo_device_init+0xb0>)
 8008fb0:	889b      	ldrh	r3, [r3, #4]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	041b      	lsls	r3, r3, #16
 8008fb8:	441a      	add	r2, r3
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	2240      	movs	r2, #64	@ 0x40
 8008fc2:	2180      	movs	r1, #128	@ 0x80
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff fecd 	bl	8008d64 <dfifo_alloc>
}
 8008fca:	bf00      	nop
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0800c424 	.word	0x0800c424
 8008fd8:	20001240 	.word	0x20001240

08008fdc <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8008fdc:	b480      	push	{r7}
 8008fde:	b08b      	sub	sp, #44	@ 0x2c
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	71fb      	strb	r3, [r7, #7]
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008fec:	7c7b      	ldrb	r3, [r7, #17]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <edpt_activate+0x1a>
    rhport = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008ff6:	7c7b      	ldrb	r3, [r7, #17]
 8008ff8:	4a45      	ldr	r2, [pc, #276]	@ (8009110 <edpt_activate+0x134>)
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	4413      	add	r3, r2
 8008ffe:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009000:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009008:	7cbb      	ldrb	r3, [r7, #18]
 800900a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800901a:	7cfb      	ldrb	r3, [r7, #19]
 800901c:	09db      	lsrs	r3, r3, #7
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009024:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009028:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800902c:	0052      	lsls	r2, r2, #1
 800902e:	4413      	add	r3, r2
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	4a38      	ldr	r2, [pc, #224]	@ (8009114 <edpt_activate+0x138>)
 8009034:	4413      	add	r3, r2
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	889b      	ldrh	r3, [r3, #4]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009046:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	799a      	ldrb	r2, [r3, #6]
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	895b      	ldrh	r3, [r3, #10]
 800905c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009060:	b29a      	uxth	r2, r3
 8009062:	89bb      	ldrh	r3, [r7, #12]
 8009064:	f362 030a 	bfi	r3, r2, #0, #11
 8009068:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800906a:	7b7b      	ldrb	r3, [r7, #13]
 800906c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009070:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	78db      	ldrb	r3, [r3, #3]
 8009076:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800907a:	b2da      	uxtb	r2, r3
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	f362 0383 	bfi	r3, r2, #2, #2
 8009082:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	78db      	ldrb	r3, [r3, #3]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b01      	cmp	r3, #1
 8009090:	d003      	beq.n	800909a <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	f043 0310 	orr.w	r3, r3, #16
 8009098:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800909a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d108      	bne.n	80090b4 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 80090a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	89fb      	ldrh	r3, [r7, #14]
 80090ae:	f362 1389 	bfi	r3, r2, #6, #4
 80090b2:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80090b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	bf14      	ite	ne
 80090bc:	2301      	movne	r3, #1
 80090be:	2300      	moveq	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090c8:	0112      	lsls	r2, r2, #4
 80090ca:	4413      	add	r3, r2
 80090cc:	3348      	adds	r3, #72	@ 0x48
 80090ce:	015b      	lsls	r3, r3, #5
 80090d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d2:	4413      	add	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 80090e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090e6:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80090ea:	2901      	cmp	r1, #1
 80090ec:	d101      	bne.n	80090f2 <edpt_activate+0x116>
 80090ee:	2100      	movs	r1, #0
 80090f0:	e000      	b.n	80090f4 <edpt_activate+0x118>
 80090f2:	2110      	movs	r1, #16
 80090f4:	440b      	add	r3, r1
 80090f6:	2101      	movs	r1, #1
 80090f8:	fa01 f303 	lsl.w	r3, r1, r3
 80090fc:	431a      	orrs	r2, r3
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8009104:	bf00      	nop
 8009106:	372c      	adds	r7, #44	@ 0x2c
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	0800c424 	.word	0x0800c424
 8009114:	200011c0 	.word	0x200011c0

08009118 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8009118:	b480      	push	{r7}
 800911a:	b089      	sub	sp, #36	@ 0x24
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
 8009122:	460b      	mov	r3, r1
 8009124:	71bb      	strb	r3, [r7, #6]
 8009126:	4613      	mov	r3, r2
 8009128:	717b      	strb	r3, [r7, #5]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800912e:	7c7b      	ldrb	r3, [r7, #17]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <edpt_disable+0x20>
    rhport = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009138:	7c7b      	ldrb	r3, [r7, #17]
 800913a:	4a5b      	ldr	r2, [pc, #364]	@ (80092a8 <edpt_disable+0x190>)
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	4413      	add	r3, r2
 8009140:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009142:	61fb      	str	r3, [r7, #28]
 8009144:	79bb      	ldrb	r3, [r7, #6]
 8009146:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009148:	7cbb      	ldrb	r3, [r7, #18]
 800914a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914e:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009150:	76fb      	strb	r3, [r7, #27]
 8009152:	79bb      	ldrb	r3, [r7, #6]
 8009154:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009156:	7cfb      	ldrb	r3, [r7, #19]
 8009158:	09db      	lsrs	r3, r3, #7
 800915a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800915c:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800915e:	7ebb      	ldrb	r3, [r7, #26]
 8009160:	2b01      	cmp	r3, #1
 8009162:	bf14      	ite	ne
 8009164:	2301      	movne	r3, #1
 8009166:	2300      	moveq	r3, #0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	7efb      	ldrb	r3, [r7, #27]
 800916e:	0112      	lsls	r2, r2, #4
 8009170:	4413      	add	r3, r2
 8009172:	3348      	adds	r3, #72	@ 0x48
 8009174:	015b      	lsls	r3, r3, #5
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	4413      	add	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800917c:	7ebb      	ldrb	r3, [r7, #26]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d149      	bne.n	8009216 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8009182:	7efb      	ldrb	r3, [r7, #27]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <edpt_disable+0x78>
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	db0d      	blt.n	80091ac <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	797a      	ldrb	r2, [r7, #5]
 8009196:	2a00      	cmp	r2, #0
 8009198:	d002      	beq.n	80091a0 <edpt_disable+0x88>
 800919a:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800919e:	e001      	b.n	80091a4 <edpt_disable+0x8c>
 80091a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80091a4:	431a      	orrs	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	e022      	b.n	80091f2 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 80091b8:	bf00      	nop
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f9      	beq.n	80091ba <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	797a      	ldrb	r2, [r7, #5]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d001      	beq.n	80091d4 <edpt_disable+0xbc>
 80091d0:	4a36      	ldr	r2, [pc, #216]	@ (80092ac <edpt_disable+0x194>)
 80091d2:	e001      	b.n	80091d8 <edpt_disable+0xc0>
 80091d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80091d8:	431a      	orrs	r2, r3
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 80091de:	bf00      	nop
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f9      	beq.n	80091e0 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2202      	movs	r2, #2
 80091f0:	609a      	str	r2, [r3, #8]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	7efb      	ldrb	r3, [r7, #27]
 80091f8:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	019b      	lsls	r3, r3, #6
 80091fe:	f043 0220 	orr.w	r2, r3, #32
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009206:	bf00      	nop
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f9      	bne.n	8009208 <edpt_disable+0xf0>
}
 8009214:	e041      	b.n	800929a <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8009216:	7efb      	ldrb	r3, [r7, #27]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <edpt_disable+0x10c>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	db0c      	blt.n	800923e <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	797a      	ldrb	r2, [r7, #5]
 800922a:	2a00      	cmp	r2, #0
 800922c:	d002      	beq.n	8009234 <edpt_disable+0x11c>
 800922e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009232:	e000      	b.n	8009236 <edpt_disable+0x11e>
 8009234:	2200      	movs	r2, #0
 8009236:	431a      	orrs	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	e02d      	b.n	800929a <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800924e:	bf00      	nop
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0f9      	beq.n	8009250 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	797a      	ldrb	r2, [r7, #5]
 8009262:	2a00      	cmp	r2, #0
 8009264:	d001      	beq.n	800926a <edpt_disable+0x152>
 8009266:	4a11      	ldr	r2, [pc, #68]	@ (80092ac <edpt_disable+0x194>)
 8009268:	e001      	b.n	800926e <edpt_disable+0x156>
 800926a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800926e:	431a      	orrs	r2, r3
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009274:	bf00      	nop
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0f9      	beq.n	8009276 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2202      	movs	r2, #2
 8009286:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800928e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	3724      	adds	r7, #36	@ 0x24
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	0800c424 	.word	0x0800c424
 80092ac:	40200000 	.word	0x40200000

080092b0 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b090      	sub	sp, #64	@ 0x40
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
 80092ba:	460b      	mov	r3, r1
 80092bc:	71bb      	strb	r3, [r7, #6]
 80092be:	4613      	mov	r3, r2
 80092c0:	717b      	strb	r3, [r7, #5]
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80092c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <edpt_schedule_packets+0x26>
    rhport = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80092d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80092da:	4a65      	ldr	r2, [pc, #404]	@ (8009470 <edpt_schedule_packets+0x1c0>)
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4413      	add	r3, r2
 80092e0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80092e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80092e4:	79ba      	ldrb	r2, [r7, #6]
 80092e6:	797b      	ldrb	r3, [r7, #5]
 80092e8:	0052      	lsls	r2, r2, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	4a61      	ldr	r2, [pc, #388]	@ (8009474 <edpt_schedule_packets+0x1c4>)
 80092f0:	4413      	add	r3, r2
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80092f4:	797b      	ldrb	r3, [r7, #5]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	79bb      	ldrb	r3, [r7, #6]
 8009304:	0112      	lsls	r2, r2, #4
 8009306:	4413      	add	r3, r2
 8009308:	3348      	adds	r3, #72	@ 0x48
 800930a:	015b      	lsls	r3, r3, #5
 800930c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800930e:	4413      	add	r3, r2
 8009310:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8009312:	79bb      	ldrb	r3, [r7, #6]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11c      	bne.n	8009352 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8009318:	797b      	ldrb	r3, [r7, #5]
 800931a:	4a57      	ldr	r2, [pc, #348]	@ (8009478 <edpt_schedule_packets+0x1c8>)
 800931c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009322:	895b      	ldrh	r3, [r3, #10]
 8009324:	853a      	strh	r2, [r7, #40]	@ 0x28
 8009326:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009328:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800932a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800932c:	4293      	cmp	r3, r2
 800932e:	bf28      	it	cs
 8009330:	4613      	movcs	r3, r2
 8009332:	b29b      	uxth	r3, r3
 8009334:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8009336:	797b      	ldrb	r3, [r7, #5]
 8009338:	4a4f      	ldr	r2, [pc, #316]	@ (8009478 <edpt_schedule_packets+0x1c8>)
 800933a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800933e:	797b      	ldrb	r3, [r7, #5]
 8009340:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009342:	1a8a      	subs	r2, r1, r2
 8009344:	b291      	uxth	r1, r2
 8009346:	4a4c      	ldr	r2, [pc, #304]	@ (8009478 <edpt_schedule_packets+0x1c8>)
 8009348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800934c:	2301      	movs	r3, #1
 800934e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009350:	e014      	b.n	800937c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8009352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009354:	891b      	ldrh	r3, [r3, #8]
 8009356:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8009358:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800935a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800935c:	8952      	ldrh	r2, [r2, #10]
 800935e:	623b      	str	r3, [r7, #32]
 8009360:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009362:	6a3a      	ldr	r2, [r7, #32]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009370:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8009372:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8009378:	2301      	movs	r3, #1
 800937a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8009380:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009382:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f362 0312 	bfi	r3, r2, #0, #19
 800938c:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800938e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009394:	b29a      	uxth	r2, r3
 8009396:	8afb      	ldrh	r3, [r7, #22]
 8009398:	f362 03cc 	bfi	r3, r2, #3, #10
 800939c:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 80093aa:	7cfb      	ldrb	r3, [r7, #19]
 80093ac:	f043 0304 	orr.w	r3, r3, #4
 80093b0:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 80093b2:	7cfb      	ldrb	r3, [r7, #19]
 80093b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b8:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80093ba:	7cbb      	ldrb	r3, [r7, #18]
 80093bc:	f003 030c 	and.w	r3, r3, #12
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d11a      	bne.n	80093fc <edpt_schedule_packets+0x14c>
 80093c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c8:	7b1b      	ldrb	r3, [r3, #12]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d116      	bne.n	80093fc <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80093d4:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 80093ea:	7cfb      	ldrb	r3, [r7, #19]
 80093ec:	f043 0310 	orr.w	r3, r3, #16
 80093f0:	74fb      	strb	r3, [r7, #19]
 80093f2:	e003      	b.n	80093fc <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 80093f4:	7cfb      	ldrb	r3, [r7, #19]
 80093f6:	f043 0320 	orr.w	r3, r3, #32
 80093fa:	74fb      	strb	r3, [r7, #19]
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009404:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009406:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8009408:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800940c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009410:	2b00      	cmp	r3, #0
 8009412:	d015      	beq.n	8009440 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009414:	797b      	ldrb	r3, [r7, #5]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d109      	bne.n	800942e <edpt_schedule_packets+0x17e>
 800941a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d006      	beq.n	800942e <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8009420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7fd fd6b 	bl	8006f04 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800943e:	e013      	b.n	8009468 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009446:	797b      	ldrb	r3, [r7, #5]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d10d      	bne.n	8009468 <edpt_schedule_packets+0x1b8>
 800944c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009458:	79ba      	ldrb	r2, [r7, #6]
 800945a:	2101      	movs	r1, #1
 800945c:	fa01 f202 	lsl.w	r2, r1, r2
 8009460:	431a      	orrs	r2, r3
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8009468:	bf00      	nop
 800946a:	3740      	adds	r7, #64	@ 0x40
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0800c424 	.word	0x0800c424
 8009474:	200011c0 	.word	0x200011c0
 8009478:	20001240 	.word	0x20001240

0800947c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b08c      	sub	sp, #48	@ 0x30
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	71fb      	strb	r3, [r7, #7]
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <dcd_init+0x1a>
    rhport = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	4a43      	ldr	r2, [pc, #268]	@ (80095a8 <dcd_init+0x12c>)
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	4413      	add	r3, r2
 800949e:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80094a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80094a2:	2208      	movs	r2, #8
 80094a4:	2100      	movs	r1, #0
 80094a6:	4841      	ldr	r0, [pc, #260]	@ (80095ac <dcd_init+0x130>)
 80094a8:	f001 feb6 	bl	800b218 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80094ac:	2101      	movs	r1, #1
 80094ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094b0:	f001 f9c6 	bl	800a840 <dwc2_core_is_highspeed>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094c2:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80094c4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80094c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80094ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094ce:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f9d1 	bl	800a87c <dwc2_core_init>
 80094da:	4603      	mov	r3, r0
 80094dc:	f083 0301 	eor.w	r3, r3, #1
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <dcd_init+0x80>
 80094e6:	4b32      	ldr	r3, [pc, #200]	@ (80095b0 <dcd_init+0x134>)
 80094e8:	61fb      	str	r3, [r7, #28]
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d000      	beq.n	80094f8 <dcd_init+0x7c>
 80094f6:	be00      	bkpt	0x0000
 80094f8:	2300      	movs	r3, #0
 80094fa:	e050      	b.n	800959e <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 8009508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00d      	beq.n	800952c <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009514:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8009516:	7b3b      	ldrb	r3, [r7, #12]
 8009518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d108      	bne.n	8009534 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800952a:	e003      	b.n	8009534 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	f043 0303 	orr.w	r3, r3, #3
 8009532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8009534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009536:	f043 0304 	orr.w	r3, r3, #4
 800953a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009540:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f92a 	bl	80097a0 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009554:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8009564:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8009568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	699a      	ldr	r2, [r3, #24]
 8009570:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <dcd_init+0x138>)
 8009572:	4313      	orrs	r3, r2
 8009574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009576:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009584:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f043 0301 	orr.w	r3, r3, #1
 800958c:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	6a3a      	ldr	r2, [r7, #32]
 8009592:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f8e0 	bl	800975c <dcd_connect>
  return true;
 800959c:	2301      	movs	r3, #1
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3730      	adds	r7, #48	@ 0x30
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	0800c424 	.word	0x0800c424
 80095ac:	20001240 	.word	0x20001240
 80095b0:	e000edf0 	.word	0xe000edf0
 80095b4:	80003804 	.word	0x80003804

080095b8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	71fb      	strb	r3, [r7, #7]
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	73fb      	strb	r3, [r7, #15]
 80095c6:	2301      	movs	r3, #1
 80095c8:	73bb      	strb	r3, [r7, #14]
 80095ca:	2301      	movs	r3, #1
 80095cc:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009604 <dcd_int_enable+0x4c>)
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	4413      	add	r3, r2
 80095d6:	3304      	adds	r3, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80095dc:	7b7b      	ldrb	r3, [r7, #13]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 80095e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff fb3e 	bl	8008c68 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 80095ec:	e004      	b.n	80095f8 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 80095ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fb56 	bl	8008ca4 <__NVIC_DisableIRQ>
}
 80095f8:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	0800c424 	.word	0x0800c424

08009608 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	71fb      	strb	r3, [r7, #7]
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	73fb      	strb	r3, [r7, #15]
 8009616:	2301      	movs	r3, #1
 8009618:	73bb      	strb	r3, [r7, #14]
 800961a:	2300      	movs	r3, #0
 800961c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	4a0c      	ldr	r2, [pc, #48]	@ (8009654 <dcd_int_disable+0x4c>)
 8009622:	011b      	lsls	r3, r3, #4
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800962c:	7b7b      	ldrb	r3, [r7, #13]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d005      	beq.n	800963e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8009632:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fb16 	bl	8008c68 <__NVIC_EnableIRQ>
}
 800963c:	e004      	b.n	8009648 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800963e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fb2e 	bl	8008ca4 <__NVIC_DisableIRQ>
}
 8009648:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	0800c424 	.word	0x0800c424

08009658 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	460a      	mov	r2, r1
 8009662:	71fb      	strb	r3, [r7, #7]
 8009664:	4613      	mov	r3, r2
 8009666:	71bb      	strb	r3, [r7, #6]
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800966c:	7a7b      	ldrb	r3, [r7, #9]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <dcd_set_address+0x1e>
    rhport = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009676:	7a7b      	ldrb	r3, [r7, #9]
 8009678:	4a14      	ldr	r2, [pc, #80]	@ (80096cc <dcd_set_address+0x74>)
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	4413      	add	r3, r2
 800967e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009680:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009688:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800968c:	79bb      	ldrb	r3, [r7, #6]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	431a      	orrs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8009698:	2300      	movs	r3, #0
 800969a:	72fb      	strb	r3, [r7, #11]
 800969c:	2301      	movs	r3, #1
 800969e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80096a0:	7abb      	ldrb	r3, [r7, #10]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <dcd_set_address+0x54>
 80096a6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80096aa:	e000      	b.n	80096ae <dcd_set_address+0x56>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b25b      	sxtb	r3, r3
 80096b6:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80096b8:	79f8      	ldrb	r0, [r7, #7]
 80096ba:	2300      	movs	r3, #0
 80096bc:	2200      	movs	r2, #0
 80096be:	f000 f98b 	bl	80099d8 <dcd_edpt_xfer>
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	0800c424 	.word	0x0800c424

080096d0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <dcd_remote_wakeup+0x18>
    rhport = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4a19      	ldr	r2, [pc, #100]	@ (8009750 <dcd_remote_wakeup+0x80>)
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	4413      	add	r3, r2
 80096f0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80096f2:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80096fa:	f043 0201 	orr.w	r2, r3, #1
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2208      	movs	r2, #8
 8009708:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f043 0208 	orr.w	r2, r3, #8
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 8009716:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <dcd_remote_wakeup+0x84>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a0f      	ldr	r2, [pc, #60]	@ (8009758 <dcd_remote_wakeup+0x88>)
 800971c:	fba2 2303 	umull	r2, r3, r2, r3
 8009720:	099b      	lsrs	r3, r3, #6
 8009722:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 8009724:	e000      	b.n	8009728 <dcd_remote_wakeup+0x58>
 8009726:	bf00      	nop
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	1e5a      	subs	r2, r3, #1
 800972c:	613a      	str	r2, [r7, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f9      	bne.n	8009726 <dcd_remote_wakeup+0x56>
}
 8009732:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800973a:	f023 0201 	bic.w	r2, r3, #1
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	0800c424 	.word	0x0800c424
 8009754:	20000048 	.word	0x20000048
 8009758:	10624dd3 	.word	0x10624dd3

0800975c <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <dcd_connect+0x18>
    rhport = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	4a09      	ldr	r2, [pc, #36]	@ (800979c <dcd_connect+0x40>)
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	4413      	add	r3, r2
 800977c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800977e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009786:	f023 0202 	bic.w	r2, r3, #2
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	0800c424 	.word	0x0800c424

080097a0 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <dcd_disconnect+0x18>
    rhport = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	4a09      	ldr	r2, [pc, #36]	@ (80097e0 <dcd_disconnect+0x40>)
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	4413      	add	r3, r2
 80097c0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80097c2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80097ca:	f043 0202 	orr.w	r2, r3, #2
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	0800c424 	.word	0x0800c424

080097e4 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	460a      	mov	r2, r1
 80097ee:	71fb      	strb	r3, [r7, #7]
 80097f0:	4613      	mov	r3, r2
 80097f2:	71bb      	strb	r3, [r7, #6]
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <dcd_sof_enable+0x1e>
    rhport = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	4a10      	ldr	r2, [pc, #64]	@ (8009848 <dcd_sof_enable+0x64>)
 8009806:	011b      	lsls	r3, r3, #4
 8009808:	4413      	add	r3, r2
 800980a:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800980c:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800980e:	4a0f      	ldr	r2, [pc, #60]	@ (800984c <dcd_sof_enable+0x68>)
 8009810:	79bb      	ldrb	r3, [r7, #6]
 8009812:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8009814:	79bb      	ldrb	r3, [r7, #6]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2208      	movs	r2, #8
 800981e:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f043 0208 	orr.w	r2, r3, #8
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800982c:	e005      	b.n	800983a <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f023 0208 	bic.w	r2, r3, #8
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	619a      	str	r2, [r3, #24]
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	0800c424 	.word	0x0800c424
 800984c:	20001240 	.word	0x20001240

08009850 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	7899      	ldrb	r1, [r3, #2]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	889b      	ldrh	r3, [r3, #4]
 8009868:	b29b      	uxth	r3, r3
 800986a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800986e:	b29a      	uxth	r2, r3
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff fa76 	bl	8008d64 <dfifo_alloc>
 8009878:	4603      	mov	r3, r0
 800987a:	f083 0301 	eor.w	r3, r3, #1
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <dcd_edpt_open+0x4a>
 8009884:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <dcd_edpt_open+0x60>)
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d000      	beq.n	8009896 <dcd_edpt_open+0x46>
 8009894:	be00      	bkpt	0x0000
 8009896:	2300      	movs	r3, #0
 8009898:	e005      	b.n	80098a6 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fb9c 	bl	8008fdc <edpt_activate>
  return true;
 80098a4:	2301      	movs	r3, #1
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	e000edf0 	.word	0xe000edf0

080098b4 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	@ 0x28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <dcd_edpt_close_all+0x18>
    rhport = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	4a3f      	ldr	r2, [pc, #252]	@ (80099cc <dcd_edpt_close_all+0x118>)
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	4413      	add	r3, r2
 80098d4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80098d6:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	4a3c      	ldr	r2, [pc, #240]	@ (80099cc <dcd_edpt_close_all+0x118>)
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	4413      	add	r3, r2
 80098e0:	3308      	adds	r3, #8
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7fe fd4a 	bl	8008380 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 80098ec:	4b38      	ldr	r3, [pc, #224]	@ (80099d0 <dcd_edpt_close_all+0x11c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80098f8:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009902:	e034      	b.n	800996e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800990a:	e027      	b.n	800995c <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800990c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009914:	0112      	lsls	r2, r2, #4
 8009916:	4413      	add	r3, r2
 8009918:	3348      	adds	r3, #72	@ 0x48
 800991a:	015b      	lsls	r3, r3, #5
 800991c:	6a3a      	ldr	r2, [r7, #32]
 800991e:	4413      	add	r3, r2
 8009920:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	da05      	bge.n	8009936 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 8009936:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800993a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800993e:	f1c3 0301 	rsb	r3, r3, #1
 8009942:	4924      	ldr	r1, [pc, #144]	@ (80099d4 <dcd_edpt_close_all+0x120>)
 8009944:	0052      	lsls	r2, r2, #1
 8009946:	4413      	add	r3, r2
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	440b      	add	r3, r1
 800994c:	330a      	adds	r3, #10
 800994e:	2200      	movs	r2, #0
 8009950:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8009952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009956:	3301      	adds	r3, #1
 8009958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800995c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009960:	2b01      	cmp	r3, #1
 8009962:	d9d3      	bls.n	800990c <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009968:	3301      	adds	r3, #1
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800996e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009972:	7ffb      	ldrb	r3, [r7, #31]
 8009974:	429a      	cmp	r2, r3
 8009976:	d3c5      	bcc.n	8009904 <dcd_edpt_close_all+0x50>
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	2310      	movs	r3, #16
 800997e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	019b      	lsls	r3, r3, #6
 8009984:	f043 0220 	orr.w	r2, r3, #32
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800998c:	bf00      	nop
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f9      	bne.n	800998e <dcd_edpt_close_all+0xda>
}
 800999a:	bf00      	nop
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2210      	movs	r2, #16
 80099a4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80099a6:	bf00      	nop
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f003 0310 	and.w	r3, r3, #16
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f9      	bne.n	80099a8 <dcd_edpt_close_all+0xf4>
}
 80099b4:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fab5 	bl	8008f28 <dfifo_device_init>

  usbd_spin_unlock(false);
 80099be:	2000      	movs	r0, #0
 80099c0:	f7fe fcf8 	bl	80083b4 <usbd_spin_unlock>
}
 80099c4:	bf00      	nop
 80099c6:	3728      	adds	r7, #40	@ 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	0800c424 	.word	0x0800c424
 80099d0:	20001240 	.word	0x20001240
 80099d4:	200011c0 	.word	0x200011c0

080099d8 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	603a      	str	r2, [r7, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
 80099e6:	460b      	mov	r3, r1
 80099e8:	71bb      	strb	r3, [r7, #6]
 80099ea:	4613      	mov	r3, r2
 80099ec:	80bb      	strh	r3, [r7, #4]
 80099ee:	79bb      	ldrb	r3, [r7, #6]
 80099f0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80099fa:	75bb      	strb	r3, [r7, #22]
 80099fc:	79bb      	ldrb	r3, [r7, #6]
 80099fe:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	09db      	lsrs	r3, r3, #7
 8009a04:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009a06:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009a08:	7dba      	ldrb	r2, [r7, #22]
 8009a0a:	7d7b      	ldrb	r3, [r7, #21]
 8009a0c:	0052      	lsls	r2, r2, #1
 8009a0e:	4413      	add	r3, r2
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	4a17      	ldr	r2, [pc, #92]	@ (8009a70 <dcd_edpt_xfer+0x98>)
 8009a14:	4413      	add	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f7fe fcb1 	bl	8008380 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	895b      	ldrh	r3, [r3, #10]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e018      	b.n	8009a5e <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	88ba      	ldrh	r2, [r7, #4]
 8009a3c:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 8009a3e:	7dbb      	ldrb	r3, [r7, #22]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8009a44:	7d7b      	ldrb	r3, [r7, #21]
 8009a46:	490b      	ldr	r1, [pc, #44]	@ (8009a74 <dcd_edpt_xfer+0x9c>)
 8009a48:	88ba      	ldrh	r2, [r7, #4]
 8009a4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 8009a4e:	7d7a      	ldrb	r2, [r7, #21]
 8009a50:	7db9      	ldrb	r1, [r7, #22]
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff fc2b 	bl	80092b0 <edpt_schedule_packets>
    ret = true;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7fe fca8 	bl	80083b4 <usbd_spin_unlock>

  return ret;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	200011c0 	.word	0x200011c0
 8009a74:	20001240 	.word	0x20001240

08009a78 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	460a      	mov	r2, r1
 8009a82:	71fb      	strb	r3, [r7, #7]
 8009a84:	4613      	mov	r3, r2
 8009a86:	71bb      	strb	r3, [r7, #6]
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009a8c:	7cbb      	ldrb	r3, [r7, #18]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <dcd_edpt_stall+0x1e>
    rhport = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a96:	7cbb      	ldrb	r3, [r7, #18]
 8009a98:	4a11      	ldr	r2, [pc, #68]	@ (8009ae0 <dcd_edpt_stall+0x68>)
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	4413      	add	r3, r2
 8009a9e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009aa0:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8009aa2:	79b9      	ldrb	r1, [r7, #6]
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fb35 	bl	8009118 <edpt_disable>
 8009aae:	79bb      	ldrb	r3, [r7, #6]
 8009ab0:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ab2:	7cfb      	ldrb	r3, [r7, #19]
 8009ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab8:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10b      	bne.n	8009ad6 <dcd_edpt_stall+0x5e>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ac6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009ac8:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff f90b 	bl	8008cec <dma_setup_prepare>
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800c424 	.word	0x0800c424

08009ae4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	460a      	mov	r2, r1
 8009aee:	71fb      	strb	r3, [r7, #7]
 8009af0:	4613      	mov	r3, r2
 8009af2:	71bb      	strb	r3, [r7, #6]
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009af8:	7a7b      	ldrb	r3, [r7, #9]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009b02:	7a7b      	ldrb	r3, [r7, #9]
 8009b04:	4a19      	ldr	r2, [pc, #100]	@ (8009b6c <dcd_edpt_clear_stall+0x88>)
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	4413      	add	r3, r2
 8009b0a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	79bb      	ldrb	r3, [r7, #6]
 8009b10:	72bb      	strb	r3, [r7, #10]
 8009b12:	7abb      	ldrb	r3, [r7, #10]
 8009b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b18:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009b1a:	74fb      	strb	r3, [r7, #19]
 8009b1c:	79bb      	ldrb	r3, [r7, #6]
 8009b1e:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	09db      	lsrs	r3, r3, #7
 8009b24:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009b26:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009b28:	7cbb      	ldrb	r3, [r7, #18]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	bf14      	ite	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	2300      	moveq	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	0112      	lsls	r2, r2, #4
 8009b3a:	4413      	add	r3, r2
 8009b3c:	3348      	adds	r3, #72	@ 0x48
 8009b3e:	015b      	lsls	r3, r3, #5
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4413      	add	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	371c      	adds	r7, #28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	0800c424 	.word	0x0800c424

08009b70 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	@ 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <handle_bus_reset+0x1e>
    rhport = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b92:	4a6a      	ldr	r2, [pc, #424]	@ (8009d3c <handle_bus_reset+0x1cc>)
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	4413      	add	r3, r2
 8009b98:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009b9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba4:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8009ba6:	7a7b      	ldrb	r3, [r7, #9]
 8009ba8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	3301      	adds	r3, #1
 8009bb0:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8009bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8009bb6:	2280      	movs	r2, #128	@ 0x80
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4861      	ldr	r0, [pc, #388]	@ (8009d40 <handle_bus_reset+0x1d0>)
 8009bbc:	f001 fb2c 	bl	800b218 <memset>

  _dcd_data.sof_en = false;
 8009bc0:	4b60      	ldr	r3, [pc, #384]	@ (8009d44 <handle_bus_reset+0x1d4>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8009bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8009d44 <handle_bus_reset+0x1d4>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009bd2:	e014      	b.n	8009bfe <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8009bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bda:	3358      	adds	r3, #88	@ 0x58
 8009bdc:	015b      	lsls	r3, r3, #5
 8009bde:	4413      	add	r3, r2
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009be6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bec:	3358      	adds	r3, #88	@ 0x58
 8009bee:	015b      	lsls	r3, r3, #5
 8009bf0:	440b      	add	r3, r1
 8009bf2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009bfe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d3e4      	bcc.n	8009bd4 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009c10:	e01d      	b.n	8009c4e <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8009c12:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c18:	3348      	adds	r3, #72	@ 0x48
 8009c1a:	015b      	lsls	r3, r3, #5
 8009c1c:	4413      	add	r3, r2
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da0f      	bge.n	8009c44 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8009c24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2a:	3348      	adds	r3, #72	@ 0x48
 8009c2c:	015b      	lsls	r3, r3, #5
 8009c2e:	4413      	add	r3, r2
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c36:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8009c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c3c:	3348      	adds	r3, #72	@ 0x48
 8009c3e:	015b      	lsls	r3, r3, #5
 8009c40:	440b      	add	r3, r1
 8009c42:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009c44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c48:	3301      	adds	r3, #1
 8009c4a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009c4e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8009c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d3db      	bcc.n	8009c12 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009c60:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	2209      	movs	r2, #9
 8009c68:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	2209      	movs	r2, #9
 8009c70:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	2310      	movs	r3, #16
 8009c7a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	019b      	lsls	r3, r3, #6
 8009c80:	f043 0220 	orr.w	r2, r3, #32
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009c88:	bf00      	nop
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1f9      	bne.n	8009c8a <handle_bus_reset+0x11a>
}
 8009c96:	bf00      	nop
 8009c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9a:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	2210      	movs	r2, #16
 8009ca0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009ca2:	bf00      	nop
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f9      	bne.n	8009ca4 <handle_bus_reset+0x134>
}
 8009cb0:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff f937 	bl	8008f28 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009cc0:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8009cc2:	8a3b      	ldrh	r3, [r7, #16]
 8009cc4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009cc8:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cce:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8009cd8:	f023 0203 	bic.w	r2, r3, #3
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009ce8:	f023 0203 	bic.w	r2, r3, #3
 8009cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cee:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8009cf2:	4b13      	ldr	r3, [pc, #76]	@ (8009d40 <handle_bus_reset+0x1d0>)
 8009cf4:	2240      	movs	r2, #64	@ 0x40
 8009cf6:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8009cf8:	4b11      	ldr	r3, [pc, #68]	@ (8009d40 <handle_bus_reset+0x1d0>)
 8009cfa:	2240      	movs	r2, #64	@ 0x40
 8009cfc:	835a      	strh	r2, [r3, #26]
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d06:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009d08:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe ffeb 	bl	8008cec <dma_setup_prepare>
 8009d16:	e007      	b.n	8009d28 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8009d1e:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8009d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d32:	619a      	str	r2, [r3, #24]
}
 8009d34:	bf00      	nop
 8009d36:	3738      	adds	r7, #56	@ 0x38
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	0800c424 	.word	0x0800c424
 8009d40:	200011c0 	.word	0x200011c0
 8009d44:	20001240 	.word	0x20001240

08009d48 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	@ 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	71fb      	strb	r3, [r7, #7]
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009d56:	7ffb      	ldrb	r3, [r7, #31]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <handle_enum_done+0x18>
    rhport = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
 8009d62:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd0 <handle_enum_done+0x88>)
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	4413      	add	r3, r2
 8009d68:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009d6a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009d72:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8009d74:	7e3b      	ldrb	r3, [r7, #24]
 8009d76:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <handle_enum_done+0x3e>
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d004      	beq.n	8009d8e <handle_enum_done+0x46>
 8009d84:	e007      	b.n	8009d96 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8009d86:	2302      	movs	r3, #2
 8009d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009d8c:	e007      	b.n	8009d9e <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009d94:	e003      	b.n	8009d9e <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009d9c:	bf00      	nop
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	77bb      	strb	r3, [r7, #30]
 8009da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da6:	777b      	strb	r3, [r7, #29]
 8009da8:	2301      	movs	r3, #1
 8009daa:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009dac:	7fbb      	ldrb	r3, [r7, #30]
 8009dae:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009db0:	2301      	movs	r3, #1
 8009db2:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8009db4:	7f7b      	ldrb	r3, [r7, #29]
 8009db6:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8009db8:	7f3a      	ldrb	r2, [r7, #28]
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe f8df 	bl	8007f84 <dcd_event_handler>
}
 8009dc6:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8009dc8:	bf00      	nop
 8009dca:	3728      	adds	r7, #40	@ 0x28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	0800c424 	.word	0x0800c424

08009dd4 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08c      	sub	sp, #48	@ 0x30
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009de2:	7cfb      	ldrb	r3, [r7, #19]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <handle_rxflvl_irq+0x18>
    rhport = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009dec:	7cfb      	ldrb	r3, [r7, #19]
 8009dee:	4a49      	ldr	r2, [pc, #292]	@ (8009f14 <handle_rxflvl_irq+0x140>)
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	4413      	add	r3, r2
 8009df4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8009e06:	7b3b      	ldrb	r3, [r7, #12]
 8009e08:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8009e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e16:	3358      	adds	r3, #88	@ 0x58
 8009e18:	015b      	lsls	r3, r3, #5
 8009e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e1c:	4413      	add	r3, r2
 8009e1e:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d86a      	bhi.n	8009f04 <handle_rxflvl_irq+0x130>
 8009e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <handle_rxflvl_irq+0x60>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009f05 	.word	0x08009f05
 8009e38:	08009e73 	.word	0x08009e73
 8009e3c:	08009f05 	.word	0x08009f05
 8009e40:	08009e65 	.word	0x08009e65
 8009e44:	08009f05 	.word	0x08009f05
 8009e48:	08009e4d 	.word	0x08009e4d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8009e4c:	4b32      	ldr	r3, [pc, #200]	@ (8009f18 <handle_rxflvl_irq+0x144>)
 8009e4e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8009e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	601a      	str	r2, [r3, #0]
      break;
 8009e62:	e052      	b.n	8009f0a <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	611a      	str	r2, [r3, #16]
      break;
 8009e70:	e04b      	b.n	8009f0a <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8009e72:	89bb      	ldrh	r3, [r7, #12]
 8009e74:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e80:	015b      	lsls	r3, r3, #5
 8009e82:	4a26      	ldr	r2, [pc, #152]	@ (8009f1c <handle_rxflvl_irq+0x148>)
 8009e84:	4413      	add	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8009e88:	8b7b      	ldrh	r3, [r7, #26]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d03c      	beq.n	8009f08 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	8b7a      	ldrh	r2, [r7, #26]
 8009e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fc ffc1 	bl	8006e26 <tu_fifo_write_n_const_addr_full_words>
 8009ea4:	e00c      	b.n	8009ec0 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	8b7a      	ldrh	r2, [r7, #26]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009eb0:	f000 fd70 	bl	800a994 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	8b7b      	ldrh	r3, [r7, #26]
 8009eba:	441a      	add	r2, r3
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	895b      	ldrh	r3, [r3, #10]
 8009ec4:	8b7a      	ldrh	r2, [r7, #26]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d21e      	bcs.n	8009f08 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	891a      	ldrh	r2, [r3, #8]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10d      	bne.n	8009f08 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	891a      	ldrh	r2, [r3, #8]
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f20 <handle_rxflvl_irq+0x14c>)
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8009efc:	4b08      	ldr	r3, [pc, #32]	@ (8009f20 <handle_rxflvl_irq+0x14c>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8009f02:	e001      	b.n	8009f08 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8009f04:	bf00      	nop
 8009f06:	e000      	b.n	8009f0a <handle_rxflvl_irq+0x136>
      break;
 8009f08:	bf00      	nop
  }
}
 8009f0a:	bf00      	nop
 8009f0c:	3730      	adds	r7, #48	@ 0x30
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	0800c424 	.word	0x0800c424
 8009f18:	20001248 	.word	0x20001248
 8009f1c:	200011c0 	.word	0x200011c0
 8009f20:	20001240 	.word	0x20001240

08009f24 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08e      	sub	sp, #56	@ 0x38
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	603a      	str	r2, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
 8009f30:	460b      	mov	r3, r1
 8009f32:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8009f34:	783b      	ldrb	r3, [r7, #0]
 8009f36:	f003 0308 	and.w	r3, r3, #8
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01c      	beq.n	8009f7a <handle_epout_slave+0x56>
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009f46:	4b34      	ldr	r3, [pc, #208]	@ (800a018 <handle_epout_slave+0xf4>)
 8009f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f54:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8009f56:	2306      	movs	r3, #6
 8009f58:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8009f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f5c:	f107 0318 	add.w	r3, r7, #24
 8009f60:	6810      	ldr	r0, [r2, #0]
 8009f62:	6851      	ldr	r1, [r2, #4]
 8009f64:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8009f66:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009f6a:	f107 0314 	add.w	r3, r7, #20
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe f807 	bl	8007f84 <dcd_event_handler>
}
 8009f76:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8009f78:	e04a      	b.n	800a010 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8009f7a:	783b      	ldrb	r3, [r7, #0]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d044      	beq.n	800a010 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8009f86:	783b      	ldrb	r3, [r7, #0]
 8009f88:	f003 0320 	and.w	r3, r3, #32
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d13e      	bne.n	800a010 <handle_epout_slave+0xec>
 8009f92:	787b      	ldrb	r3, [r7, #1]
 8009f94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d138      	bne.n	800a010 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009f9e:	79bb      	ldrb	r3, [r7, #6]
 8009fa0:	015b      	lsls	r3, r3, #5
 8009fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800a01c <handle_epout_slave+0xf8>)
 8009fa4:	4413      	add	r3, r2
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8009fa8:	79bb      	ldrb	r3, [r7, #6]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <handle_epout_slave+0xa0>
 8009fae:	4b1c      	ldr	r3, [pc, #112]	@ (800a020 <handle_epout_slave+0xfc>)
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8009fb6:	79b9      	ldrb	r1, [r7, #6]
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff f977 	bl	80092b0 <edpt_schedule_packets>
 8009fc2:	e025      	b.n	800a010 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc6:	891b      	ldrh	r3, [r3, #8]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fd0:	79bb      	ldrb	r3, [r7, #6]
 8009fd2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8009fd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009fe4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fe8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009fea:	2307      	movs	r3, #7
 8009fec:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8009fee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ff2:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8009ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ffc:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8009ffe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800a002:	f107 0308 	add.w	r3, r7, #8
 800a006:	4611      	mov	r1, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd ffbb 	bl	8007f84 <dcd_event_handler>
}
 800a00e:	bf00      	nop
      }
    }
  }
}
 800a010:	3738      	adds	r7, #56	@ 0x38
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20001248 	.word	0x20001248
 800a01c:	200011c0 	.word	0x200011c0
 800a020:	20001240 	.word	0x20001240

0800a024 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b092      	sub	sp, #72	@ 0x48
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	603a      	str	r2, [r7, #0]
 800a02e:	71fb      	strb	r3, [r7, #7]
 800a030:	460b      	mov	r3, r1
 800a032:	71bb      	strb	r3, [r7, #6]
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a03a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <handle_epin_slave+0x24>
    rhport = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a048:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a04c:	4a64      	ldr	r2, [pc, #400]	@ (800a1e0 <handle_epin_slave+0x1bc>)
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	4413      	add	r3, r2
 800a052:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a054:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	3348      	adds	r3, #72	@ 0x48
 800a05a:	015b      	lsls	r3, r3, #5
 800a05c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a05e:	4413      	add	r3, r2
 800a060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800a062:	79bb      	ldrb	r3, [r7, #6]
 800a064:	015b      	lsls	r3, r3, #5
 800a066:	3310      	adds	r3, #16
 800a068:	4a5e      	ldr	r2, [pc, #376]	@ (800a1e4 <handle_epin_slave+0x1c0>)
 800a06a:	4413      	add	r3, r2
 800a06c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800a06e:	783b      	ldrb	r3, [r7, #0]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d037      	beq.n	800a0ea <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800a07a:	79bb      	ldrb	r3, [r7, #6]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <handle_epin_slave+0x72>
 800a080:	4b59      	ldr	r3, [pc, #356]	@ (800a1e8 <handle_epin_slave+0x1c4>)
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d006      	beq.n	800a096 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800a088:	79b9      	ldrb	r1, [r7, #6]
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2201      	movs	r2, #1
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff f90e 	bl	80092b0 <edpt_schedule_packets>
 800a094:	e029      	b.n	800a0ea <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a096:	79bb      	ldrb	r3, [r7, #6]
 800a098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a09c:	b2d9      	uxtb	r1, r3
 800a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a0:	891b      	ldrh	r3, [r3, #8]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800a0b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800a0be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a0c2:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800a0c4:	2307      	movs	r3, #7
 800a0c6:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800a0c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a0cc:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800a0d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a0d6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a0d8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800a0dc:	f107 0310 	add.w	r3, r7, #16
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fd ff4e 	bl	8007f84 <dcd_event_handler>
}
 800a0e8:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800a0ea:	783b      	ldrb	r3, [r7, #0]
 800a0ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d070      	beq.n	800a1d8 <handle_epin_slave+0x1b4>
 800a0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0f8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a0fc:	79ba      	ldrb	r2, [r7, #6]
 800a0fe:	2101      	movs	r1, #1
 800a100:	fa01 f202 	lsl.w	r2, r1, r2
 800a104:	4013      	ands	r3, r2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d066      	beq.n	800a1d8 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800a10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800a110:	89fb      	ldrh	r3, [r7, #14]
 800a112:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a116:	b29b      	uxth	r3, r3
 800a118:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a11a:	2300      	movs	r3, #0
 800a11c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a120:	e03f      	b.n	800a1a2 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800a122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a12e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	895a      	ldrh	r2, [r3, #10]
 800a134:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a136:	843b      	strh	r3, [r7, #32]
 800a138:	4613      	mov	r3, r2
 800a13a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a13c:	8c3a      	ldrh	r2, [r7, #32]
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	4293      	cmp	r3, r2
 800a142:	bf28      	it	cs
 800a144:	4613      	movcs	r3, r2
 800a146:	b29b      	uxth	r3, r3
 800a148:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800a14a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	0099      	lsls	r1, r3, #2
 800a152:	4b26      	ldr	r3, [pc, #152]	@ (800a1ec <handle_epin_slave+0x1c8>)
 800a154:	400b      	ands	r3, r1
 800a156:	429a      	cmp	r2, r3
 800a158:	d829      	bhi.n	800a1ae <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800a15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00d      	beq.n	800a17e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800a162:	79bb      	ldrb	r3, [r7, #6]
 800a164:	3301      	adds	r3, #1
 800a166:	031b      	lsls	r3, r3, #12
 800a168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a16a:	4413      	add	r3, r2
 800a16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800a16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a176:	4618      	mov	r0, r3
 800a178:	f7fc fdee 	bl	8006d58 <tu_fifo_read_n_const_addr_full_words>
 800a17c:	e00c      	b.n	800a198 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a184:	79b9      	ldrb	r1, [r7, #6]
 800a186:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a188:	f000 fc55 	bl	800aa36 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a192:	441a      	add	r2, r3
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a198:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a19c:	3301      	adds	r3, #1
 800a19e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a1a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a1a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d3ba      	bcc.n	800a122 <handle_epin_slave+0xfe>
 800a1ac:	e000      	b.n	800a1b0 <handle_epin_slave+0x18c>
        break;
 800a1ae:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a1c6:	79ba      	ldrb	r2, [r7, #6]
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	fa01 f202 	lsl.w	r2, r1, r2
 800a1ce:	43d2      	mvns	r2, r2
 800a1d0:	401a      	ands	r2, r3
 800a1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1d4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800a1d8:	bf00      	nop
 800a1da:	3748      	adds	r7, #72	@ 0x48
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	0800c424 	.word	0x0800c424
 800a1e4:	200011c0 	.word	0x200011c0
 800a1e8:	20001240 	.word	0x20001240
 800a1ec:	0003fffc 	.word	0x0003fffc

0800a1f0 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	@ 0x38
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460a      	mov	r2, r1
 800a1fa:	71fb      	strb	r3, [r7, #7]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	71bb      	strb	r3, [r7, #6]
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a204:	7efb      	ldrb	r3, [r7, #27]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <handle_ep_irq+0x1e>
    rhport = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a20e:	7efb      	ldrb	r3, [r7, #27]
 800a210:	4a38      	ldr	r2, [pc, #224]	@ (800a2f4 <handle_ep_irq+0x104>)
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	4413      	add	r3, r2
 800a216:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a222:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a224:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a232:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800a234:	7c7b      	ldrb	r3, [r7, #17]
 800a236:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	3301      	adds	r3, #1
 800a23e:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800a240:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800a244:	79bb      	ldrb	r3, [r7, #6]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <handle_ep_irq+0x5e>
 800a24a:	2300      	movs	r3, #0
 800a24c:	e000      	b.n	800a250 <handle_ep_irq+0x60>
 800a24e:	2310      	movs	r3, #16
 800a250:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800a254:	79bb      	ldrb	r3, [r7, #6]
 800a256:	2b01      	cmp	r3, #1
 800a258:	bf14      	ite	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	2300      	moveq	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	025b      	lsls	r3, r3, #9
 800a262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a268:	4413      	add	r3, r2
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a272:	e034      	b.n	800a2de <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800a27a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800a27e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a282:	440b      	add	r3, r1
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d021      	beq.n	800a2d4 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800a290:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a294:	015b      	lsls	r3, r3, #5
 800a296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a298:	4413      	add	r3, r2
 800a29a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800a2a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d111      	bne.n	800a2d4 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800a2b0:	79bb      	ldrb	r3, [r7, #6]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d107      	bne.n	800a2c6 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800a2b6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff feb0 	bl	800a024 <handle_epin_slave>
 800a2c4:	e006      	b.n	800a2d4 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800a2c6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fe28 	bl	8009f24 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a2e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d3c4      	bcc.n	800a274 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	3738      	adds	r7, #56	@ 0x38
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	0800c424 	.word	0x0800c424

0800a2f8 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b098      	sub	sp, #96	@ 0x60
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
 800a302:	79fb      	ldrb	r3, [r7, #7]
 800a304:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a308:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <dcd_int_handler+0x1e>
    rhport = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a316:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a31a:	4a80      	ldr	r2, [pc, #512]	@ (800a51c <dcd_int_handler+0x224>)
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	4413      	add	r3, r2
 800a320:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800a324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800a32a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a330:	4013      	ands	r3, r2
 800a332:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800a334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00d      	beq.n	800a35a <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800a33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a344:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800a346:	2001      	movs	r0, #1
 800a348:	f7fe f81a 	bl	8008380 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff fc0e 	bl	8009b70 <handle_bus_reset>
    usbd_spin_unlock(true);
 800a354:	2001      	movs	r0, #1
 800a356:	f7fe f82d 	bl	80083b4 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800a35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a35c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a36a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fcea 	bl	8009d48 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800a374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01d      	beq.n	800a3ba <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a37e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a384:	615a      	str	r2, [r3, #20]
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800a398:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a39c:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800a3a0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a3a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800a3a8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a3ac:	f107 0320 	add.w	r3, r7, #32
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fd fde6 	bl	8007f84 <dcd_event_handler>
}
 800a3b8:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800a3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da1d      	bge.n	800a3fc <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a3c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a3c6:	615a      	str	r2, [r3, #20]
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3ce:	2305      	movs	r3, #5
 800a3d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800a3da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800a3e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a3e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800a3ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fd fdc5 	bl	8007f84 <dcd_event_handler>
}
 800a3fa:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800a3fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d022      	beq.n	800a44c <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800a406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800a40c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	d017      	beq.n	800a446 <dcd_int_handler+0x14e>
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a41c:	2302      	movs	r3, #2
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	2301      	movs	r3, #1
 800a424:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800a428:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a42c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800a42e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a432:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a434:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fd fda0 	bl	8007f84 <dcd_event_handler>
}
 800a444:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a448:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a44a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800a44c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d02e      	beq.n	800a4b4 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800a456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a458:	2208      	movs	r2, #8
 800a45a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800a45c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a45e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a468:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800a46a:	4b2d      	ldr	r3, [pc, #180]	@ (800a520 <dcd_int_handler+0x228>)
 800a46c:	79db      	ldrb	r3, [r3, #7]
 800a46e:	f083 0301 	eor.w	r3, r3, #1
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	f023 0208 	bic.w	r2, r3, #8
 800a480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a482:	619a      	str	r2, [r3, #24]
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800a48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a48e:	2301      	movs	r3, #1
 800a490:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a494:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a498:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800a49a:	2303      	movs	r3, #3
 800a49c:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a0:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a4a2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fd fd69 	bl	8007f84 <dcd_event_handler>
}
 800a4b2:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800a4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b6:	f003 0310 	and.w	r3, r3, #16
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d015      	beq.n	800a4ea <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800a4be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	f023 0210 	bic.w	r2, r3, #16
 800a4c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4c8:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fc81 	bl	8009dd4 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800a4d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1f5      	bne.n	800a4ca <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800a4de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f043 0210 	orr.w	r2, r3, #16
 800a4e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4e8:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800a4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fe79 	bl	800a1f0 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800a4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d004      	beq.n	800a512 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	2101      	movs	r1, #1
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fe6f 	bl	800a1f0 <handle_ep_irq>
  }
}
 800a512:	bf00      	nop
 800a514:	3760      	adds	r7, #96	@ 0x60
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800c424 	.word	0x0800c424
 800a520:	20001240 	.word	0x20001240

0800a524 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800a542:	e005      	b.n	800a550 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a548:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d152      	bne.n	800a614 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800a56e:	4b2c      	ldr	r3, [pc, #176]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a2c      	ldr	r2, [pc, #176]	@ (800a624 <dwc2_phy_update+0xc8>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d302      	bcc.n	800a57e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800a578:	2306      	movs	r3, #6
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e041      	b.n	800a602 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800a57e:	4b28      	ldr	r3, [pc, #160]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a29      	ldr	r2, [pc, #164]	@ (800a628 <dwc2_phy_update+0xcc>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d902      	bls.n	800a58e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800a588:	2307      	movs	r3, #7
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	e039      	b.n	800a602 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800a58e:	4b24      	ldr	r3, [pc, #144]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a26      	ldr	r2, [pc, #152]	@ (800a62c <dwc2_phy_update+0xd0>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d302      	bcc.n	800a59e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800a598:	2308      	movs	r3, #8
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e031      	b.n	800a602 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800a59e:	4b20      	ldr	r3, [pc, #128]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a23      	ldr	r2, [pc, #140]	@ (800a630 <dwc2_phy_update+0xd4>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d902      	bls.n	800a5ae <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800a5a8:	2309      	movs	r3, #9
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e029      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800a5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a20      	ldr	r2, [pc, #128]	@ (800a634 <dwc2_phy_update+0xd8>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d902      	bls.n	800a5be <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800a5b8:	230a      	movs	r3, #10
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e021      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800a5be:	4b18      	ldr	r3, [pc, #96]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1d      	ldr	r2, [pc, #116]	@ (800a638 <dwc2_phy_update+0xdc>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d902      	bls.n	800a5ce <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800a5c8:	230b      	movs	r3, #11
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	e019      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a63c <dwc2_phy_update+0xe0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d302      	bcc.n	800a5de <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800a5d8:	230c      	movs	r3, #12
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e011      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800a5de:	4b10      	ldr	r3, [pc, #64]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a17      	ldr	r2, [pc, #92]	@ (800a640 <dwc2_phy_update+0xe4>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d302      	bcc.n	800a5ee <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800a5e8:	230d      	movs	r3, #13
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e009      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <dwc2_phy_update+0xc4>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a14      	ldr	r2, [pc, #80]	@ (800a644 <dwc2_phy_update+0xe8>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d302      	bcc.n	800a5fe <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800a5f8:	230e      	movs	r3, #14
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e001      	b.n	800a602 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800a5fe:	230f      	movs	r3, #15
 800a600:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	029b      	lsls	r3, r3, #10
 800a60e:	431a      	orrs	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
  }
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20000048 	.word	0x20000048
 800a624:	01e84800 	.word	0x01e84800
 800a628:	01a39ddf 	.word	0x01a39ddf
 800a62c:	016e3600 	.word	0x016e3600
 800a630:	014ca43f 	.word	0x014ca43f
 800a634:	01312cff 	.word	0x01312cff
 800a638:	011a499f 	.word	0x011a499f
 800a63c:	01067380 	.word	0x01067380
 800a640:	00f42400 	.word	0x00f42400
 800a644:	00e4e1c0 	.word	0x00e4e1c0

0800a648 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f043 0201 	orr.w	r2, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a660:	b29b      	uxth	r3, r3
 800a662:	f244 2209 	movw	r2, #16905	@ 0x4209
 800a666:	4293      	cmp	r3, r2
 800a668:	d807      	bhi.n	800a67a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800a66a:	bf00      	nop
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f9      	bne.n	800a66c <reset_core+0x24>
 800a678:	e010      	b.n	800a69c <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800a67a:	bf00      	nop
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0f9      	beq.n	800a67c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800a69c:	bf00      	nop
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dafb      	bge.n	800a69e <reset_core+0x56>
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6c8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff26 	bl	800a524 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ffb5 	bl	800a648 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a6e4:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800a6ec:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff ff30 	bl	800a55c <dwc2_phy_update>
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a716:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a724:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a726:	7c3b      	ldrb	r3, [r7, #16]
 800a728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b80      	cmp	r3, #128	@ 0x80
 800a730:	d114      	bne.n	800a75c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f043 0310 	orr.w	r3, r3, #16
 800a738:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f023 0308 	bic.w	r3, r3, #8
 800a740:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a748:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a750:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e012      	b.n	800a782 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f023 0310 	bic.w	r3, r3, #16
 800a762:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800a764:	7b7b      	ldrb	r3, [r7, #13]
 800a766:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d004      	beq.n	800a77a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f043 0308 	orr.w	r3, r3, #8
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	e003      	b.n	800a782 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f023 0308 	bic.w	r3, r3, #8
 800a780:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800a788:	7c3b      	ldrb	r3, [r7, #16]
 800a78a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fec6 	bl	800a524 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff55 	bl	800a648 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a7a4:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800a7a6:	7b7b      	ldrb	r3, [r7, #13]
 800a7a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <phy_hs_init+0xb4>
 800a7b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800a7b6:	e001      	b.n	800a7bc <phy_hs_init+0xb8>
 800a7b8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800a7c8:	7c3b      	ldrb	r3, [r7, #16]
 800a7ca:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fec2 	bl	800a55c <dwc2_phy_update>
}
 800a7d8:	bf00      	nop
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a830 <check_dwc2+0x50>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d012      	beq.n	800a820 <check_dwc2+0x40>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4a0d      	ldr	r2, [pc, #52]	@ (800a834 <check_dwc2+0x54>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00e      	beq.n	800a820 <check_dwc2+0x40>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4a0c      	ldr	r2, [pc, #48]	@ (800a838 <check_dwc2+0x58>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00a      	beq.n	800a820 <check_dwc2+0x40>
 800a80a:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <check_dwc2+0x5c>)
 800a80c:	60bb      	str	r3, [r7, #8]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d000      	beq.n	800a81c <check_dwc2+0x3c>
 800a81a:	be00      	bkpt	0x0000
 800a81c:	2300      	movs	r3, #0
 800a81e:	e000      	b.n	800a822 <check_dwc2+0x42>
#endif

  return true;
 800a820:	2301      	movs	r3, #1
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	4f540000 	.word	0x4f540000
 800a834:	55310000 	.word	0x55310000
 800a838:	55320000 	.word	0x55320000
 800a83c:	e000edf0 	.word	0xe000edf0

0800a840 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <dwc2_core_is_highspeed+0x16>
    return false;
 800a852:	2300      	movs	r3, #0
 800a854:	e00b      	b.n	800a86e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a85a:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800a85c:	7b3b      	ldrb	r3, [r7, #12]
 800a85e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	bf14      	ite	ne
 800a868:	2301      	movne	r3, #1
 800a86a:	2300      	moveq	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
	...

0800a87c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	71fb      	strb	r3, [r7, #7]
 800a886:	460b      	mov	r3, r1
 800a888:	71bb      	strb	r3, [r7, #6]
 800a88a:	4613      	mov	r3, r2
 800a88c:	717b      	strb	r3, [r7, #5]
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <dwc2_core_init+0x20>
    rhport = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	4a3b      	ldr	r2, [pc, #236]	@ (800a98c <dwc2_core_init+0x110>)
 800a8a0:	011b      	lsls	r3, r3, #4
 800a8a2:	4413      	add	r3, r2
 800a8a4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a8a6:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800a8a8:	69f8      	ldr	r0, [r7, #28]
 800a8aa:	f7ff ff99 	bl	800a7e0 <check_dwc2>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f083 0301 	eor.w	r3, r3, #1
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <dwc2_core_init+0x54>
 800a8ba:	4b35      	ldr	r3, [pc, #212]	@ (800a990 <dwc2_core_init+0x114>)
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d000      	beq.n	800a8cc <dwc2_core_init+0x50>
 800a8ca:	be00      	bkpt	0x0000
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e058      	b.n	800a982 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f023 0201 	bic.w	r2, r3, #1
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800a8dc:	79bb      	ldrb	r3, [r7, #6]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800a8e2:	69f8      	ldr	r0, [r7, #28]
 800a8e4:	f7ff ff0e 	bl	800a704 <phy_hs_init>
 800a8e8:	e002      	b.n	800a8f0 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800a8ea:	69f8      	ldr	r0, [r7, #28]
 800a8ec:	f7ff fee2 	bl	800a6b4 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f043 0207 	orr.w	r2, r3, #7
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800a902:	f023 020f 	bic.w	r2, r3, #15
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	2310      	movs	r3, #16
 800a912:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	019b      	lsls	r3, r3, #6
 800a918:	f043 0220 	orr.w	r2, r3, #32
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a920:	bf00      	nop
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f003 0320 	and.w	r3, r3, #32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f9      	bne.n	800a922 <dwc2_core_init+0xa6>
}
 800a92e:	bf00      	nop
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2210      	movs	r2, #16
 800a938:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a93a:	bf00      	nop
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1f9      	bne.n	800a93c <dwc2_core_init+0xc0>
}
 800a948:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295
 800a950:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	2200      	movs	r2, #0
 800a95e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800a960:	797b      	ldrb	r3, [r7, #5]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d006      	beq.n	800a974 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	609a      	str	r2, [r3, #8]
 800a972:	e005      	b.n	800a980 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	f043 0210 	orr.w	r2, r3, #16
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800a980:	2301      	movs	r3, #1
}
 800a982:	4618      	mov	r0, r3
 800a984:	3720      	adds	r7, #32
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	0800c434 	.word	0x0800c434
 800a990:	e000edf0 	.word	0xe000edf0

0800a994 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800a994:	b480      	push	{r7}
 800a996:	b08f      	sub	sp, #60	@ 0x3c
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9a8:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	089b      	lsrs	r3, r3, #2
 800a9ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800a9b0:	e00b      	b.n	800a9ca <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9ba:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9be:	6a3a      	ldr	r2, [r7, #32]
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
    dst += 4;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800a9ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1ee      	bne.n	800a9b2 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800a9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d020      	beq.n	800aa2a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800a9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d907      	bls.n	800aa12 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	3301      	adds	r3, #1
 800aa06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa08:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	0a12      	lsrs	r2, r2, #8
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800aa12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d907      	bls.n	800aa2a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa20:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	0c12      	lsrs	r2, r2, #16
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800aa2a:	bf00      	nop
 800aa2c:	373c      	adds	r7, #60	@ 0x3c
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800aa36:	b480      	push	{r7}
 800aa38:	b08b      	sub	sp, #44	@ 0x2c
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	461a      	mov	r2, r3
 800aa42:	460b      	mov	r3, r1
 800aa44:	72fb      	strb	r3, [r7, #11]
 800aa46:	4613      	mov	r3, r2
 800aa48:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	031b      	lsls	r3, r3, #12
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800aa56:	893b      	ldrh	r3, [r7, #8]
 800aa58:	089b      	lsrs	r3, r3, #2
 800aa5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800aa5c:	e008      	b.n	800aa70 <dfifo_write_packet+0x3a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	601a      	str	r2, [r3, #0]
    src += 4;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800aa70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa72:	1e5a      	subs	r2, r3, #1
 800aa74:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1f1      	bne.n	800aa5e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800aa7a:	893b      	ldrh	r3, [r7, #8]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800aa84:	7efb      	ldrb	r3, [r7, #27]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d019      	beq.n	800aabe <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800aa90:	7efb      	ldrb	r3, [r7, #27]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d906      	bls.n	800aaa4 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	6a3a      	ldr	r2, [r7, #32]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800aaa4:	7efb      	ldrb	r3, [r7, #27]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d906      	bls.n	800aab8 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3302      	adds	r3, #2
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	041b      	lsls	r3, r3, #16
 800aab2:	6a3a      	ldr	r2, [r7, #32]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	6a3a      	ldr	r2, [r7, #32]
 800aabc:	601a      	str	r2, [r3, #0]
  }
}
 800aabe:	bf00      	nop
 800aac0:	372c      	adds	r7, #44	@ 0x2c
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800aaca:	b480      	push	{r7}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <tu_edpt_claim+0x26>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <tu_edpt_claim+0x2a>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e01e      	b.n	800ab32 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d108      	bne.n	800ab14 <tu_edpt_claim+0x4a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d101      	bne.n	800ab14 <tu_edpt_claim+0x4a>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <tu_edpt_claim+0x4c>
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d004      	beq.n	800ab30 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	7813      	ldrb	r3, [r2, #0]
 800ab2a:	f043 0304 	orr.w	r3, r3, #4
 800ab2e:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800ab3e:	b480      	push	{r7}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d108      	bne.n	800ab68 <tu_edpt_release+0x2a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <tu_edpt_release+0x2a>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <tu_edpt_release+0x2c>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d004      	beq.n	800ab84 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	7813      	ldrb	r3, [r2, #0]
 800ab7e:	f023 0304 	bic.w	r3, r3, #4
 800ab82:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800ab94:	b480      	push	{r7}
 800ab96:	b08b      	sub	sp, #44	@ 0x2c
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
 800aba0:	4613      	mov	r3, r2
 800aba2:	70bb      	strb	r3, [r7, #2]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	889b      	ldrh	r3, [r3, #4]
 800abac:	b29b      	uxth	r3, r3
 800abae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abb2:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800abb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	78db      	ldrb	r3, [r3, #3]
 800abba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d059      	beq.n	800ac78 <tu_edpt_validate+0xe4>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	dc6e      	bgt.n	800aca6 <tu_edpt_validate+0x112>
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d002      	beq.n	800abd2 <tu_edpt_validate+0x3e>
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d018      	beq.n	800ac02 <tu_edpt_validate+0x6e>
 800abd0:	e069      	b.n	800aca6 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d102      	bne.n	800abde <tu_edpt_validate+0x4a>
 800abd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abdc:	e001      	b.n	800abe2 <tu_edpt_validate+0x4e>
 800abde:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800abe2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800abe4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800abe6:	8a7b      	ldrh	r3, [r7, #18]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d95e      	bls.n	800acaa <tu_edpt_validate+0x116>
 800abec:	4b35      	ldr	r3, [pc, #212]	@ (800acc4 <tu_edpt_validate+0x130>)
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d000      	beq.n	800abfe <tu_edpt_validate+0x6a>
 800abfc:	be00      	bkpt	0x0000
 800abfe:	2300      	movs	r3, #0
 800ac00:	e059      	b.n	800acb6 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d10e      	bne.n	800ac26 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800ac08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac0e:	d04e      	beq.n	800acae <tu_edpt_validate+0x11a>
 800ac10:	4b2c      	ldr	r3, [pc, #176]	@ (800acc4 <tu_edpt_validate+0x130>)
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d000      	beq.n	800ac22 <tu_edpt_validate+0x8e>
 800ac20:	be00      	bkpt	0x0000
 800ac22:	2300      	movs	r3, #0
 800ac24:	e047      	b.n	800acb6 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800ac26:	78bb      	ldrb	r3, [r7, #2]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00e      	beq.n	800ac4a <tu_edpt_validate+0xb6>
 800ac2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac32:	d10a      	bne.n	800ac4a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac40:	711a      	strb	r2, [r3, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800ac46:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800ac48:	e031      	b.n	800acae <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800ac4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d02e      	beq.n	800acae <tu_edpt_validate+0x11a>
 800ac50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac52:	2b10      	cmp	r3, #16
 800ac54:	d02b      	beq.n	800acae <tu_edpt_validate+0x11a>
 800ac56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d028      	beq.n	800acae <tu_edpt_validate+0x11a>
 800ac5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac5e:	2b40      	cmp	r3, #64	@ 0x40
 800ac60:	d025      	beq.n	800acae <tu_edpt_validate+0x11a>
 800ac62:	4b18      	ldr	r3, [pc, #96]	@ (800acc4 <tu_edpt_validate+0x130>)
 800ac64:	61bb      	str	r3, [r7, #24]
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d000      	beq.n	800ac74 <tu_edpt_validate+0xe0>
 800ac72:	be00      	bkpt	0x0000
 800ac74:	2300      	movs	r3, #0
 800ac76:	e01e      	b.n	800acb6 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d102      	bne.n	800ac84 <tu_edpt_validate+0xf0>
 800ac7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac82:	e000      	b.n	800ac86 <tu_edpt_validate+0xf2>
 800ac84:	2340      	movs	r3, #64	@ 0x40
 800ac86:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ac88:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ac8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d910      	bls.n	800acb2 <tu_edpt_validate+0x11e>
 800ac90:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <tu_edpt_validate+0x130>)
 800ac92:	623b      	str	r3, [r7, #32]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d000      	beq.n	800aca2 <tu_edpt_validate+0x10e>
 800aca0:	be00      	bkpt	0x0000
 800aca2:	2300      	movs	r3, #0
 800aca4:	e007      	b.n	800acb6 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800aca6:	2300      	movs	r3, #0
 800aca8:	e005      	b.n	800acb6 <tu_edpt_validate+0x122>
      break;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <tu_edpt_validate+0x120>
      break;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <tu_edpt_validate+0x120>
      break;
 800acb2:	bf00      	nop
  }

  return true;
 800acb4:	2301      	movs	r3, #1
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	372c      	adds	r7, #44	@ 0x2c
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	e000edf0 	.word	0xe000edf0

0800acc8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800acc8:	b480      	push	{r7}
 800acca:	b08d      	sub	sp, #52	@ 0x34
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4611      	mov	r1, r2
 800acd4:	461a      	mov	r2, r3
 800acd6:	460b      	mov	r3, r1
 800acd8:	80fb      	strh	r3, [r7, #6]
 800acda:	4613      	mov	r3, r2
 800acdc:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace6:	4413      	add	r3, r2
 800ace8:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800acea:	e027      	b.n	800ad3c <tu_edpt_bind_driver+0x74>
 800acec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acee:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	3301      	adds	r3, #1
 800acf4:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	d116      	bne.n	800ad28 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800acfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfc:	789b      	ldrb	r3, [r3, #2]
 800acfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad06:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ad08:	7fbb      	ldrb	r3, [r7, #30]
 800ad0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad0e:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ad1a:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ad1c:	7ffa      	ldrb	r2, [r7, #31]
 800ad1e:	09d2      	lsrs	r2, r2, #7
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	4611      	mov	r1, r2
 800ad24:	797a      	ldrb	r2, [r7, #5]
 800ad26:	545a      	strb	r2, [r3, r1]
 800ad28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800ad3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800ad3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d3d3      	bcc.n	800acec <tu_edpt_bind_driver+0x24>
  }
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	3734      	adds	r7, #52	@ 0x34
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <tu_edpt_stream_init>:
//--------------------------------------------------------------------+
// Endpoint Stream Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_stream_init(tu_edpt_stream_t* s, bool is_host, bool is_tx, bool overwritable,
                         void* ff_buf, uint16_t ff_bufsize, uint8_t* ep_buf, uint16_t ep_bufsize) {
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af02      	add	r7, sp, #8
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	461a      	mov	r2, r3
 800ad60:	4603      	mov	r3, r0
 800ad62:	70fb      	strb	r3, [r7, #3]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70bb      	strb	r3, [r7, #2]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	707b      	strb	r3, [r7, #1]
  (void) is_tx;

  s->is_host = is_host;
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7813      	ldrb	r3, [r2, #0]
 800ad70:	78f9      	ldrb	r1, [r7, #3]
 800ad72:	f361 0300 	bfi	r3, r1, #0, #1
 800ad76:	7013      	strb	r3, [r2, #0]
  tu_fifo_config(&s->ff, ff_buf, ff_bufsize, 1, overwritable);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f103 0008 	add.w	r0, r3, #8
 800ad7e:	8aba      	ldrh	r2, [r7, #20]
 800ad80:	787b      	ldrb	r3, [r7, #1]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	2301      	movs	r3, #1
 800ad86:	6939      	ldr	r1, [r7, #16]
 800ad88:	f7fb fa86 	bl	8006298 <tu_fifo_config>
    osal_mutex_t new_mutex = osal_mutex_create(&s->ff_mutexdef);
    tu_fifo_config_mutex(&s->ff, is_tx ? new_mutex : NULL, is_tx ? NULL : new_mutex);
  }
  #endif

  s->ep_buf = ep_buf;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	605a      	str	r2, [r3, #4]
  s->ep_bufsize = ep_bufsize;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	8bba      	ldrh	r2, [r7, #28]
 800ad96:	805a      	strh	r2, [r3, #2]

  return true;
 800ad98:	2301      	movs	r3, #1
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <tu_edpt_stream_deinit>:

bool tu_edpt_stream_deinit(tu_edpt_stream_t* s) {
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  (void) s;
  #if OSAL_MUTEX_REQUIRED
  if (s->ff.mutex_wr) osal_mutex_delete(s->ff.mutex_wr);
  if (s->ff.mutex_rd) osal_mutex_delete(s->ff.mutex_rd);
  #endif
  return true;
 800adaa:	2301      	movs	r3, #1
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <tu_edpt_stream_write_zlp_if_needed>:
}

//--------------------------------------------------------------------+
// Stream Write
//--------------------------------------------------------------------+
bool tu_edpt_stream_write_zlp_if_needed(uint8_t hwid, tu_edpt_stream_t* s, uint32_t last_xferred_bytes) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	@ 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	73fb      	strb	r3, [r7, #15]
  // ZLP condition: no pending data, last transferred bytes is multiple of packet size
  const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <tu_edpt_stream_write_zlp_if_needed+0x22>
 800add4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800add8:	e000      	b.n	800addc <tu_edpt_stream_write_zlp_if_needed+0x24>
 800adda:	2340      	movs	r3, #64	@ 0x40
 800addc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  TU_VERIFY(!tu_fifo_count(&s->ff) && last_xferred_bytes && (0 == (last_xferred_bytes & (mps - 1))));
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	3308      	adds	r3, #8
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fb feea 	bl	8006bbc <tu_fifo_count>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <tu_edpt_stream_write_zlp_if_needed+0x4a>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <tu_edpt_stream_write_zlp_if_needed+0x4a>
 800adf4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adf6:	3b01      	subs	r3, #1
 800adf8:	461a      	mov	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4013      	ands	r3, r2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <tu_edpt_stream_write_zlp_if_needed+0x4e>
 800ae02:	2300      	movs	r3, #0
 800ae04:	e04b      	b.n	800ae9e <tu_edpt_stream_write_zlp_if_needed+0xe6>
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	623b      	str	r3, [r7, #32]
  if (s->is_host) {
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d109      	bne.n	800ae32 <tu_edpt_stream_write_zlp_if_needed+0x7a>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	785a      	ldrb	r2, [r3, #1]
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fd fb8b 	bl	8008544 <usbd_edpt_claim>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	e000      	b.n	800ae34 <tu_edpt_stream_write_zlp_if_needed+0x7c>
  return false;
 800ae32:	2300      	movs	r3, #0
  TU_VERIFY(stream_claim(hwid, s));
 800ae34:	f083 0301 	eor.w	r3, r3, #1
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <tu_edpt_stream_write_zlp_if_needed+0x8a>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e02d      	b.n	800ae9e <tu_edpt_stream_write_zlp_if_needed+0xe6>
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	82fb      	strh	r3, [r7, #22]
  if (s->is_host) {
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10e      	bne.n	800ae7a <tu_edpt_stream_write_zlp_if_needed+0xc2>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	7859      	ldrb	r1, [r3, #1]
 800ae60:	8afb      	ldrh	r3, [r7, #22]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <tu_edpt_stream_write_zlp_if_needed+0xb4>
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	e000      	b.n	800ae6e <tu_edpt_stream_write_zlp_if_needed+0xb6>
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	8afb      	ldrh	r3, [r7, #22]
 800ae70:	7ff8      	ldrb	r0, [r7, #31]
 800ae72:	f7fd fbb7 	bl	80085e4 <usbd_edpt_xfer>
 800ae76:	4603      	mov	r3, r0
 800ae78:	e000      	b.n	800ae7c <tu_edpt_stream_write_zlp_if_needed+0xc4>
  return false;
 800ae7a:	2300      	movs	r3, #0
  TU_ASSERT(stream_xfer(hwid, s, 0));
 800ae7c:	f083 0301 	eor.w	r3, r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <tu_edpt_stream_write_zlp_if_needed+0xe4>
 800ae86:	4b08      	ldr	r3, [pc, #32]	@ (800aea8 <tu_edpt_stream_write_zlp_if_needed+0xf0>)
 800ae88:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d000      	beq.n	800ae98 <tu_edpt_stream_write_zlp_if_needed+0xe0>
 800ae96:	be00      	bkpt	0x0000
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e000      	b.n	800ae9e <tu_edpt_stream_write_zlp_if_needed+0xe6>
  return true;
 800ae9c:	2301      	movs	r3, #1
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3730      	adds	r7, #48	@ 0x30
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	e000edf0 	.word	0xe000edf0

0800aeac <tu_edpt_stream_write_xfer>:

uint32_t tu_edpt_stream_write_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	@ 0x28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
  // skip if no data
  TU_VERIFY(tu_fifo_count(&s->ff), 0);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fb fe7d 	bl	8006bbc <tu_fifo_count>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <tu_edpt_stream_write_xfer+0x20>
 800aec8:	2300      	movs	r3, #0
 800aeca:	e06e      	b.n	800afaa <tu_edpt_stream_write_xfer+0xfe>
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	77fb      	strb	r3, [r7, #31]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	61bb      	str	r3, [r7, #24]
  if (s->is_host) {
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d108      	bne.n	800aef4 <tu_edpt_stream_write_xfer+0x48>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	785a      	ldrb	r2, [r3, #1]
 800aee6:	7ffb      	ldrb	r3, [r7, #31]
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd fb2a 	bl	8008544 <usbd_edpt_claim>
 800aef0:	4603      	mov	r3, r0
 800aef2:	e000      	b.n	800aef6 <tu_edpt_stream_write_xfer+0x4a>
  return false;
 800aef4:	2300      	movs	r3, #0

  TU_VERIFY(stream_claim(hwid, s), 0);
 800aef6:	f083 0301 	eor.w	r3, r3, #1
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <tu_edpt_stream_write_xfer+0x58>
 800af00:	2300      	movs	r3, #0
 800af02:	e052      	b.n	800afaa <tu_edpt_stream_write_xfer+0xfe>

  // Pull data from FIFO -> EP buf
  uint16_t const count = tu_fifo_read_n(&s->ff, s->ep_buf, s->ep_bufsize);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	f103 0008 	add.w	r0, r3, #8
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	885b      	ldrh	r3, [r3, #2]
 800af12:	461a      	mov	r2, r3
 800af14:	f7fb ff0e 	bl	8006d34 <tu_fifo_read_n>
 800af18:	4603      	mov	r3, r0
 800af1a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  if (count) {
 800af1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02e      	beq.n	800af80 <tu_edpt_stream_write_xfer+0xd4>
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	75fb      	strb	r3, [r7, #23]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	613b      	str	r3, [r7, #16]
 800af2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af2c:	81fb      	strh	r3, [r7, #14]
  if (s->is_host) {
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10e      	bne.n	800af5a <tu_edpt_stream_write_xfer+0xae>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	7859      	ldrb	r1, [r3, #1]
 800af40:	89fb      	ldrh	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <tu_edpt_stream_write_xfer+0xa0>
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	e000      	b.n	800af4e <tu_edpt_stream_write_xfer+0xa2>
 800af4c:	2200      	movs	r2, #0
 800af4e:	89fb      	ldrh	r3, [r7, #14]
 800af50:	7df8      	ldrb	r0, [r7, #23]
 800af52:	f7fd fb47 	bl	80085e4 <usbd_edpt_xfer>
 800af56:	4603      	mov	r3, r0
 800af58:	e000      	b.n	800af5c <tu_edpt_stream_write_xfer+0xb0>
  return false;
 800af5a:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, count), 0);
 800af5c:	f083 0301 	eor.w	r3, r3, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <tu_edpt_stream_write_xfer+0xd0>
 800af66:	4b13      	ldr	r3, [pc, #76]	@ (800afb4 <tu_edpt_stream_write_xfer+0x108>)
 800af68:	623b      	str	r3, [r7, #32]
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d000      	beq.n	800af78 <tu_edpt_stream_write_xfer+0xcc>
 800af76:	be00      	bkpt	0x0000
 800af78:	2300      	movs	r3, #0
 800af7a:	e016      	b.n	800afaa <tu_edpt_stream_write_xfer+0xfe>
    return count;
 800af7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af7e:	e014      	b.n	800afaa <tu_edpt_stream_write_xfer+0xfe>
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	737b      	strb	r3, [r7, #13]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d107      	bne.n	800afa6 <tu_edpt_stream_write_xfer+0xfa>
    return usbd_edpt_release(hwid, s->ep_addr);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	785a      	ldrb	r2, [r3, #1]
 800af9a:	7b7b      	ldrb	r3, [r7, #13]
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fd faf8 	bl	8008594 <usbd_edpt_release>
 800afa4:	e000      	b.n	800afa8 <tu_edpt_stream_write_xfer+0xfc>
  return false;
 800afa6:	bf00      	nop
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    stream_release(hwid, s);
    return 0;
 800afa8:	2300      	movs	r3, #0
  }
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	@ 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	e000edf0 	.word	0xe000edf0

0800afb8 <tu_edpt_stream_read_xfer>:
}

//--------------------------------------------------------------------+
// Stream Read
//--------------------------------------------------------------------+
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 800afb8:	b580      	push	{r7, lr}
 800afba:	b092      	sub	sp, #72	@ 0x48
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	6039      	str	r1, [r7, #0]
 800afc2:	71fb      	strb	r3, [r7, #7]
  if (0 == tu_fifo_depth(&s->ff)) {
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afcc:	889b      	ldrh	r3, [r3, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d151      	bne.n	800b076 <tu_edpt_stream_read_xfer+0xbe>
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (s->is_host) {
 800afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <tu_edpt_stream_read_xfer+0x46>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800afea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afec:	785a      	ldrb	r2, [r3, #1]
 800afee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fd faa5 	bl	8008544 <usbd_edpt_claim>
 800affa:	4603      	mov	r3, r0
 800affc:	e000      	b.n	800b000 <tu_edpt_stream_read_xfer+0x48>
  return false;
 800affe:	2300      	movs	r3, #0
    // no fifo for buffered
    TU_VERIFY(stream_claim(hwid, s), 0);
 800b000:	f083 0301 	eor.w	r3, r3, #1
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <tu_edpt_stream_read_xfer+0x56>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e0dc      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885a      	ldrh	r2, [r3, #2]
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b01c:	4613      	mov	r3, r2
 800b01e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (s->is_host) {
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10f      	bne.n	800b04e <tu_edpt_stream_read_xfer+0x96>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800b02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b030:	7859      	ldrb	r1, [r3, #1]
 800b032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <tu_edpt_stream_read_xfer+0x86>
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	e000      	b.n	800b040 <tu_edpt_stream_read_xfer+0x88>
 800b03e:	2200      	movs	r2, #0
 800b040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b042:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800b046:	f7fd facd 	bl	80085e4 <usbd_edpt_xfer>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e000      	b.n	800b050 <tu_edpt_stream_read_xfer+0x98>
  return false;
 800b04e:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 800b050:	f083 0301 	eor.w	r3, r3, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <tu_edpt_stream_read_xfer+0xb8>
 800b05a:	4b5d      	ldr	r3, [pc, #372]	@ (800b1d0 <tu_edpt_stream_read_xfer+0x218>)
 800b05c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d000      	beq.n	800b06c <tu_edpt_stream_read_xfer+0xb4>
 800b06a:	be00      	bkpt	0x0000
 800b06c:	2300      	movs	r3, #0
 800b06e:	e0ab      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
    return s->ep_bufsize;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	885b      	ldrh	r3, [r3, #2]
 800b074:	e0a8      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
  } else {
    const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <tu_edpt_stream_read_xfer+0xd2>
 800b084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b088:	e000      	b.n	800b08c <tu_edpt_stream_read_xfer+0xd4>
 800b08a:	2340      	movs	r3, #64	@ 0x40
 800b08c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t available = tu_fifo_remaining(&s->ff);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	4618      	mov	r0, r3
 800b096:	f7fb fdf1 	bl	8006c7c <tu_fifo_remaining>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    // Prepare for incoming data but only allow what we can store in the ring buffer.
    // TODO Actually we can still carry out the transfer, keeping count of received bytes
    // and slowly move it to the FIFO when read().
    // This pre-check reduces endpoint claiming
    TU_VERIFY(available >= mps);
 800b0a0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b0a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d201      	bcs.n	800b0b0 <tu_edpt_stream_read_xfer+0xf8>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e08b      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	61fb      	str	r3, [r7, #28]
  if (s->is_host) {
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d109      	bne.n	800b0dc <tu_edpt_stream_read_xfer+0x124>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	785a      	ldrb	r2, [r3, #1]
 800b0cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fd fa36 	bl	8008544 <usbd_edpt_claim>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	e000      	b.n	800b0de <tu_edpt_stream_read_xfer+0x126>
  return false;
 800b0dc:	2300      	movs	r3, #0

    TU_VERIFY(stream_claim(hwid, s), 0);
 800b0de:	f083 0301 	eor.w	r3, r3, #1
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <tu_edpt_stream_read_xfer+0x134>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e06d      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>

    // get available again since fifo can be changed before endpoint is claimed
    available = tu_fifo_remaining(&s->ff);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fb fdc3 	bl	8006c7c <tu_fifo_remaining>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (available >= mps) {
 800b0fc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b100:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b104:	429a      	cmp	r2, r3
 800b106:	d34a      	bcc.n	800b19e <tu_edpt_stream_read_xfer+0x1e6>
      // multiple of packet size limit by ep bufsize
      uint16_t count = (uint16_t) (available & ~(mps - 1));
 800b108:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b10c:	425b      	negs	r3, r3
 800b10e:	b29b      	uxth	r3, r3
 800b110:	b21a      	sxth	r2, r3
 800b112:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800b116:	4013      	ands	r3, r2
 800b118:	b21b      	sxth	r3, r3
 800b11a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      count = tu_min16(count, s->ep_bufsize);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885a      	ldrh	r2, [r3, #2]
 800b122:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b126:	823b      	strh	r3, [r7, #16]
 800b128:	4613      	mov	r3, r2
 800b12a:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b12c:	8a3a      	ldrh	r2, [r7, #16]
 800b12e:	89fb      	ldrh	r3, [r7, #14]
 800b130:	4293      	cmp	r3, r2
 800b132:	bf28      	it	cs
 800b134:	4613      	movcs	r3, r2
 800b136:	b29b      	uxth	r3, r3
 800b138:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	76fb      	strb	r3, [r7, #27]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b148:	827b      	strh	r3, [r7, #18]
  if (s->is_host) {
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10e      	bne.n	800b176 <tu_edpt_stream_read_xfer+0x1be>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	7859      	ldrb	r1, [r3, #1]
 800b15c:	8a7b      	ldrh	r3, [r7, #18]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <tu_edpt_stream_read_xfer+0x1b0>
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	e000      	b.n	800b16a <tu_edpt_stream_read_xfer+0x1b2>
 800b168:	2200      	movs	r2, #0
 800b16a:	8a7b      	ldrh	r3, [r7, #18]
 800b16c:	7ef8      	ldrb	r0, [r7, #27]
 800b16e:	f7fd fa39 	bl	80085e4 <usbd_edpt_xfer>
 800b172:	4603      	mov	r3, r0
 800b174:	e000      	b.n	800b178 <tu_edpt_stream_read_xfer+0x1c0>
  return false;
 800b176:	2300      	movs	r3, #0
      TU_ASSERT(stream_xfer(hwid, s, count), 0);
 800b178:	f083 0301 	eor.w	r3, r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <tu_edpt_stream_read_xfer+0x1e0>
 800b182:	4b13      	ldr	r3, [pc, #76]	@ (800b1d0 <tu_edpt_stream_read_xfer+0x218>)
 800b184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d000      	beq.n	800b194 <tu_edpt_stream_read_xfer+0x1dc>
 800b192:	be00      	bkpt	0x0000
 800b194:	2300      	movs	r3, #0
 800b196:	e017      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
      return count;
 800b198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b19c:	e014      	b.n	800b1c8 <tu_edpt_stream_read_xfer+0x210>
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	737b      	strb	r3, [r7, #13]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d107      	bne.n	800b1c4 <tu_edpt_stream_read_xfer+0x20c>
    return usbd_edpt_release(hwid, s->ep_addr);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	785a      	ldrb	r2, [r3, #1]
 800b1b8:	7b7b      	ldrb	r3, [r7, #13]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fd f9e9 	bl	8008594 <usbd_edpt_release>
 800b1c2:	e000      	b.n	800b1c6 <tu_edpt_stream_read_xfer+0x20e>
  return false;
 800b1c4:	bf00      	nop
    } else {
      // Release endpoint since we don't make any transfer
      stream_release(hwid, s);
      return 0;
 800b1c6:	2300      	movs	r3, #0
    }
  }
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3748      	adds	r7, #72	@ 0x48
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	e000edf0 	.word	0xe000edf0

0800b1d4 <siprintf>:
 800b1d4:	b40e      	push	{r1, r2, r3}
 800b1d6:	b510      	push	{r4, lr}
 800b1d8:	b09d      	sub	sp, #116	@ 0x74
 800b1da:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b1dc:	9002      	str	r0, [sp, #8]
 800b1de:	9006      	str	r0, [sp, #24]
 800b1e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b1e4:	480a      	ldr	r0, [pc, #40]	@ (800b210 <siprintf+0x3c>)
 800b1e6:	9107      	str	r1, [sp, #28]
 800b1e8:	9104      	str	r1, [sp, #16]
 800b1ea:	490a      	ldr	r1, [pc, #40]	@ (800b214 <siprintf+0x40>)
 800b1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f0:	9105      	str	r1, [sp, #20]
 800b1f2:	2400      	movs	r4, #0
 800b1f4:	a902      	add	r1, sp, #8
 800b1f6:	6800      	ldr	r0, [r0, #0]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b1fc:	f000 f9a2 	bl	800b544 <_svfiprintf_r>
 800b200:	9b02      	ldr	r3, [sp, #8]
 800b202:	701c      	strb	r4, [r3, #0]
 800b204:	b01d      	add	sp, #116	@ 0x74
 800b206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20a:	b003      	add	sp, #12
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20000080 	.word	0x20000080
 800b214:	ffff0208 	.word	0xffff0208

0800b218 <memset>:
 800b218:	4402      	add	r2, r0
 800b21a:	4603      	mov	r3, r0
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d100      	bne.n	800b222 <memset+0xa>
 800b220:	4770      	bx	lr
 800b222:	f803 1b01 	strb.w	r1, [r3], #1
 800b226:	e7f9      	b.n	800b21c <memset+0x4>

0800b228 <__errno>:
 800b228:	4b01      	ldr	r3, [pc, #4]	@ (800b230 <__errno+0x8>)
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	20000080 	.word	0x20000080

0800b234 <__libc_init_array>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4d0d      	ldr	r5, [pc, #52]	@ (800b26c <__libc_init_array+0x38>)
 800b238:	4c0d      	ldr	r4, [pc, #52]	@ (800b270 <__libc_init_array+0x3c>)
 800b23a:	1b64      	subs	r4, r4, r5
 800b23c:	10a4      	asrs	r4, r4, #2
 800b23e:	2600      	movs	r6, #0
 800b240:	42a6      	cmp	r6, r4
 800b242:	d109      	bne.n	800b258 <__libc_init_array+0x24>
 800b244:	4d0b      	ldr	r5, [pc, #44]	@ (800b274 <__libc_init_array+0x40>)
 800b246:	4c0c      	ldr	r4, [pc, #48]	@ (800b278 <__libc_init_array+0x44>)
 800b248:	f000 fc64 	bl	800bb14 <_init>
 800b24c:	1b64      	subs	r4, r4, r5
 800b24e:	10a4      	asrs	r4, r4, #2
 800b250:	2600      	movs	r6, #0
 800b252:	42a6      	cmp	r6, r4
 800b254:	d105      	bne.n	800b262 <__libc_init_array+0x2e>
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	f855 3b04 	ldr.w	r3, [r5], #4
 800b25c:	4798      	blx	r3
 800b25e:	3601      	adds	r6, #1
 800b260:	e7ee      	b.n	800b240 <__libc_init_array+0xc>
 800b262:	f855 3b04 	ldr.w	r3, [r5], #4
 800b266:	4798      	blx	r3
 800b268:	3601      	adds	r6, #1
 800b26a:	e7f2      	b.n	800b252 <__libc_init_array+0x1e>
 800b26c:	0800c480 	.word	0x0800c480
 800b270:	0800c480 	.word	0x0800c480
 800b274:	0800c480 	.word	0x0800c480
 800b278:	0800c484 	.word	0x0800c484

0800b27c <__retarget_lock_acquire_recursive>:
 800b27c:	4770      	bx	lr

0800b27e <__retarget_lock_release_recursive>:
 800b27e:	4770      	bx	lr

0800b280 <memcpy>:
 800b280:	440a      	add	r2, r1
 800b282:	4291      	cmp	r1, r2
 800b284:	f100 33ff 	add.w	r3, r0, #4294967295
 800b288:	d100      	bne.n	800b28c <memcpy+0xc>
 800b28a:	4770      	bx	lr
 800b28c:	b510      	push	{r4, lr}
 800b28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b296:	4291      	cmp	r1, r2
 800b298:	d1f9      	bne.n	800b28e <memcpy+0xe>
 800b29a:	bd10      	pop	{r4, pc}

0800b29c <_free_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4605      	mov	r5, r0
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	d041      	beq.n	800b328 <_free_r+0x8c>
 800b2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a8:	1f0c      	subs	r4, r1, #4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	bfb8      	it	lt
 800b2ae:	18e4      	addlt	r4, r4, r3
 800b2b0:	f000 f8e0 	bl	800b474 <__malloc_lock>
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b32c <_free_r+0x90>)
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	b933      	cbnz	r3, 800b2c8 <_free_r+0x2c>
 800b2ba:	6063      	str	r3, [r4, #4]
 800b2bc:	6014      	str	r4, [r2, #0]
 800b2be:	4628      	mov	r0, r5
 800b2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2c4:	f000 b8dc 	b.w	800b480 <__malloc_unlock>
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d908      	bls.n	800b2de <_free_r+0x42>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	1821      	adds	r1, r4, r0
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	bf01      	itttt	eq
 800b2d4:	6819      	ldreq	r1, [r3, #0]
 800b2d6:	685b      	ldreq	r3, [r3, #4]
 800b2d8:	1809      	addeq	r1, r1, r0
 800b2da:	6021      	streq	r1, [r4, #0]
 800b2dc:	e7ed      	b.n	800b2ba <_free_r+0x1e>
 800b2de:	461a      	mov	r2, r3
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	b10b      	cbz	r3, 800b2e8 <_free_r+0x4c>
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	d9fa      	bls.n	800b2de <_free_r+0x42>
 800b2e8:	6811      	ldr	r1, [r2, #0]
 800b2ea:	1850      	adds	r0, r2, r1
 800b2ec:	42a0      	cmp	r0, r4
 800b2ee:	d10b      	bne.n	800b308 <_free_r+0x6c>
 800b2f0:	6820      	ldr	r0, [r4, #0]
 800b2f2:	4401      	add	r1, r0
 800b2f4:	1850      	adds	r0, r2, r1
 800b2f6:	4283      	cmp	r3, r0
 800b2f8:	6011      	str	r1, [r2, #0]
 800b2fa:	d1e0      	bne.n	800b2be <_free_r+0x22>
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	6053      	str	r3, [r2, #4]
 800b302:	4408      	add	r0, r1
 800b304:	6010      	str	r0, [r2, #0]
 800b306:	e7da      	b.n	800b2be <_free_r+0x22>
 800b308:	d902      	bls.n	800b310 <_free_r+0x74>
 800b30a:	230c      	movs	r3, #12
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	e7d6      	b.n	800b2be <_free_r+0x22>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	1821      	adds	r1, r4, r0
 800b314:	428b      	cmp	r3, r1
 800b316:	bf04      	itt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	6063      	str	r3, [r4, #4]
 800b31e:	bf04      	itt	eq
 800b320:	1809      	addeq	r1, r1, r0
 800b322:	6021      	streq	r1, [r4, #0]
 800b324:	6054      	str	r4, [r2, #4]
 800b326:	e7ca      	b.n	800b2be <_free_r+0x22>
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	bf00      	nop
 800b32c:	20001394 	.word	0x20001394

0800b330 <sbrk_aligned>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4e0f      	ldr	r6, [pc, #60]	@ (800b370 <sbrk_aligned+0x40>)
 800b334:	460c      	mov	r4, r1
 800b336:	6831      	ldr	r1, [r6, #0]
 800b338:	4605      	mov	r5, r0
 800b33a:	b911      	cbnz	r1, 800b342 <sbrk_aligned+0x12>
 800b33c:	f000 fba4 	bl	800ba88 <_sbrk_r>
 800b340:	6030      	str	r0, [r6, #0]
 800b342:	4621      	mov	r1, r4
 800b344:	4628      	mov	r0, r5
 800b346:	f000 fb9f 	bl	800ba88 <_sbrk_r>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	d103      	bne.n	800b356 <sbrk_aligned+0x26>
 800b34e:	f04f 34ff 	mov.w	r4, #4294967295
 800b352:	4620      	mov	r0, r4
 800b354:	bd70      	pop	{r4, r5, r6, pc}
 800b356:	1cc4      	adds	r4, r0, #3
 800b358:	f024 0403 	bic.w	r4, r4, #3
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	d0f8      	beq.n	800b352 <sbrk_aligned+0x22>
 800b360:	1a21      	subs	r1, r4, r0
 800b362:	4628      	mov	r0, r5
 800b364:	f000 fb90 	bl	800ba88 <_sbrk_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	d1f2      	bne.n	800b352 <sbrk_aligned+0x22>
 800b36c:	e7ef      	b.n	800b34e <sbrk_aligned+0x1e>
 800b36e:	bf00      	nop
 800b370:	20001390 	.word	0x20001390

0800b374 <_malloc_r>:
 800b374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b378:	1ccd      	adds	r5, r1, #3
 800b37a:	f025 0503 	bic.w	r5, r5, #3
 800b37e:	3508      	adds	r5, #8
 800b380:	2d0c      	cmp	r5, #12
 800b382:	bf38      	it	cc
 800b384:	250c      	movcc	r5, #12
 800b386:	2d00      	cmp	r5, #0
 800b388:	4606      	mov	r6, r0
 800b38a:	db01      	blt.n	800b390 <_malloc_r+0x1c>
 800b38c:	42a9      	cmp	r1, r5
 800b38e:	d904      	bls.n	800b39a <_malloc_r+0x26>
 800b390:	230c      	movs	r3, #12
 800b392:	6033      	str	r3, [r6, #0]
 800b394:	2000      	movs	r0, #0
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b470 <_malloc_r+0xfc>
 800b39e:	f000 f869 	bl	800b474 <__malloc_lock>
 800b3a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a6:	461c      	mov	r4, r3
 800b3a8:	bb44      	cbnz	r4, 800b3fc <_malloc_r+0x88>
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff ffbf 	bl	800b330 <sbrk_aligned>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	d158      	bne.n	800b46a <_malloc_r+0xf6>
 800b3b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b3bc:	4627      	mov	r7, r4
 800b3be:	2f00      	cmp	r7, #0
 800b3c0:	d143      	bne.n	800b44a <_malloc_r+0xd6>
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d04b      	beq.n	800b45e <_malloc_r+0xea>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	eb04 0903 	add.w	r9, r4, r3
 800b3d0:	f000 fb5a 	bl	800ba88 <_sbrk_r>
 800b3d4:	4581      	cmp	r9, r0
 800b3d6:	d142      	bne.n	800b45e <_malloc_r+0xea>
 800b3d8:	6821      	ldr	r1, [r4, #0]
 800b3da:	1a6d      	subs	r5, r5, r1
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ffa6 	bl	800b330 <sbrk_aligned>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d03a      	beq.n	800b45e <_malloc_r+0xea>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	442b      	add	r3, r5
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	bb62      	cbnz	r2, 800b450 <_malloc_r+0xdc>
 800b3f6:	f8c8 7000 	str.w	r7, [r8]
 800b3fa:	e00f      	b.n	800b41c <_malloc_r+0xa8>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	1b52      	subs	r2, r2, r5
 800b400:	d420      	bmi.n	800b444 <_malloc_r+0xd0>
 800b402:	2a0b      	cmp	r2, #11
 800b404:	d917      	bls.n	800b436 <_malloc_r+0xc2>
 800b406:	1961      	adds	r1, r4, r5
 800b408:	42a3      	cmp	r3, r4
 800b40a:	6025      	str	r5, [r4, #0]
 800b40c:	bf18      	it	ne
 800b40e:	6059      	strne	r1, [r3, #4]
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	bf08      	it	eq
 800b414:	f8c8 1000 	streq.w	r1, [r8]
 800b418:	5162      	str	r2, [r4, r5]
 800b41a:	604b      	str	r3, [r1, #4]
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 f82f 	bl	800b480 <__malloc_unlock>
 800b422:	f104 000b 	add.w	r0, r4, #11
 800b426:	1d23      	adds	r3, r4, #4
 800b428:	f020 0007 	bic.w	r0, r0, #7
 800b42c:	1ac2      	subs	r2, r0, r3
 800b42e:	bf1c      	itt	ne
 800b430:	1a1b      	subne	r3, r3, r0
 800b432:	50a3      	strne	r3, [r4, r2]
 800b434:	e7af      	b.n	800b396 <_malloc_r+0x22>
 800b436:	6862      	ldr	r2, [r4, #4]
 800b438:	42a3      	cmp	r3, r4
 800b43a:	bf0c      	ite	eq
 800b43c:	f8c8 2000 	streq.w	r2, [r8]
 800b440:	605a      	strne	r2, [r3, #4]
 800b442:	e7eb      	b.n	800b41c <_malloc_r+0xa8>
 800b444:	4623      	mov	r3, r4
 800b446:	6864      	ldr	r4, [r4, #4]
 800b448:	e7ae      	b.n	800b3a8 <_malloc_r+0x34>
 800b44a:	463c      	mov	r4, r7
 800b44c:	687f      	ldr	r7, [r7, #4]
 800b44e:	e7b6      	b.n	800b3be <_malloc_r+0x4a>
 800b450:	461a      	mov	r2, r3
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	42a3      	cmp	r3, r4
 800b456:	d1fb      	bne.n	800b450 <_malloc_r+0xdc>
 800b458:	2300      	movs	r3, #0
 800b45a:	6053      	str	r3, [r2, #4]
 800b45c:	e7de      	b.n	800b41c <_malloc_r+0xa8>
 800b45e:	230c      	movs	r3, #12
 800b460:	6033      	str	r3, [r6, #0]
 800b462:	4630      	mov	r0, r6
 800b464:	f000 f80c 	bl	800b480 <__malloc_unlock>
 800b468:	e794      	b.n	800b394 <_malloc_r+0x20>
 800b46a:	6005      	str	r5, [r0, #0]
 800b46c:	e7d6      	b.n	800b41c <_malloc_r+0xa8>
 800b46e:	bf00      	nop
 800b470:	20001394 	.word	0x20001394

0800b474 <__malloc_lock>:
 800b474:	4801      	ldr	r0, [pc, #4]	@ (800b47c <__malloc_lock+0x8>)
 800b476:	f7ff bf01 	b.w	800b27c <__retarget_lock_acquire_recursive>
 800b47a:	bf00      	nop
 800b47c:	2000138c 	.word	0x2000138c

0800b480 <__malloc_unlock>:
 800b480:	4801      	ldr	r0, [pc, #4]	@ (800b488 <__malloc_unlock+0x8>)
 800b482:	f7ff befc 	b.w	800b27e <__retarget_lock_release_recursive>
 800b486:	bf00      	nop
 800b488:	2000138c 	.word	0x2000138c

0800b48c <__ssputs_r>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	688e      	ldr	r6, [r1, #8]
 800b492:	461f      	mov	r7, r3
 800b494:	42be      	cmp	r6, r7
 800b496:	680b      	ldr	r3, [r1, #0]
 800b498:	4682      	mov	sl, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4690      	mov	r8, r2
 800b49e:	d82d      	bhi.n	800b4fc <__ssputs_r+0x70>
 800b4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4a8:	d026      	beq.n	800b4f8 <__ssputs_r+0x6c>
 800b4aa:	6965      	ldr	r5, [r4, #20]
 800b4ac:	6909      	ldr	r1, [r1, #16]
 800b4ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4b2:	eba3 0901 	sub.w	r9, r3, r1
 800b4b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ba:	1c7b      	adds	r3, r7, #1
 800b4bc:	444b      	add	r3, r9
 800b4be:	106d      	asrs	r5, r5, #1
 800b4c0:	429d      	cmp	r5, r3
 800b4c2:	bf38      	it	cc
 800b4c4:	461d      	movcc	r5, r3
 800b4c6:	0553      	lsls	r3, r2, #21
 800b4c8:	d527      	bpl.n	800b51a <__ssputs_r+0x8e>
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	f7ff ff52 	bl	800b374 <_malloc_r>
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	b360      	cbz	r0, 800b52e <__ssputs_r+0xa2>
 800b4d4:	6921      	ldr	r1, [r4, #16]
 800b4d6:	464a      	mov	r2, r9
 800b4d8:	f7ff fed2 	bl	800b280 <memcpy>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	6126      	str	r6, [r4, #16]
 800b4ea:	6165      	str	r5, [r4, #20]
 800b4ec:	444e      	add	r6, r9
 800b4ee:	eba5 0509 	sub.w	r5, r5, r9
 800b4f2:	6026      	str	r6, [r4, #0]
 800b4f4:	60a5      	str	r5, [r4, #8]
 800b4f6:	463e      	mov	r6, r7
 800b4f8:	42be      	cmp	r6, r7
 800b4fa:	d900      	bls.n	800b4fe <__ssputs_r+0x72>
 800b4fc:	463e      	mov	r6, r7
 800b4fe:	6820      	ldr	r0, [r4, #0]
 800b500:	4632      	mov	r2, r6
 800b502:	4641      	mov	r1, r8
 800b504:	f000 faa6 	bl	800ba54 <memmove>
 800b508:	68a3      	ldr	r3, [r4, #8]
 800b50a:	1b9b      	subs	r3, r3, r6
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	4433      	add	r3, r6
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	2000      	movs	r0, #0
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	462a      	mov	r2, r5
 800b51c:	f000 fac4 	bl	800baa8 <_realloc_r>
 800b520:	4606      	mov	r6, r0
 800b522:	2800      	cmp	r0, #0
 800b524:	d1e0      	bne.n	800b4e8 <__ssputs_r+0x5c>
 800b526:	6921      	ldr	r1, [r4, #16]
 800b528:	4650      	mov	r0, sl
 800b52a:	f7ff feb7 	bl	800b29c <_free_r>
 800b52e:	230c      	movs	r3, #12
 800b530:	f8ca 3000 	str.w	r3, [sl]
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	e7e9      	b.n	800b516 <__ssputs_r+0x8a>
	...

0800b544 <_svfiprintf_r>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	4698      	mov	r8, r3
 800b54a:	898b      	ldrh	r3, [r1, #12]
 800b54c:	061b      	lsls	r3, r3, #24
 800b54e:	b09d      	sub	sp, #116	@ 0x74
 800b550:	4607      	mov	r7, r0
 800b552:	460d      	mov	r5, r1
 800b554:	4614      	mov	r4, r2
 800b556:	d510      	bpl.n	800b57a <_svfiprintf_r+0x36>
 800b558:	690b      	ldr	r3, [r1, #16]
 800b55a:	b973      	cbnz	r3, 800b57a <_svfiprintf_r+0x36>
 800b55c:	2140      	movs	r1, #64	@ 0x40
 800b55e:	f7ff ff09 	bl	800b374 <_malloc_r>
 800b562:	6028      	str	r0, [r5, #0]
 800b564:	6128      	str	r0, [r5, #16]
 800b566:	b930      	cbnz	r0, 800b576 <_svfiprintf_r+0x32>
 800b568:	230c      	movs	r3, #12
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	b01d      	add	sp, #116	@ 0x74
 800b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b576:	2340      	movs	r3, #64	@ 0x40
 800b578:	616b      	str	r3, [r5, #20]
 800b57a:	2300      	movs	r3, #0
 800b57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b57e:	2320      	movs	r3, #32
 800b580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b584:	f8cd 800c 	str.w	r8, [sp, #12]
 800b588:	2330      	movs	r3, #48	@ 0x30
 800b58a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b728 <_svfiprintf_r+0x1e4>
 800b58e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b592:	f04f 0901 	mov.w	r9, #1
 800b596:	4623      	mov	r3, r4
 800b598:	469a      	mov	sl, r3
 800b59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b59e:	b10a      	cbz	r2, 800b5a4 <_svfiprintf_r+0x60>
 800b5a0:	2a25      	cmp	r2, #37	@ 0x25
 800b5a2:	d1f9      	bne.n	800b598 <_svfiprintf_r+0x54>
 800b5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a8:	d00b      	beq.n	800b5c2 <_svfiprintf_r+0x7e>
 800b5aa:	465b      	mov	r3, fp
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ff6b 	bl	800b48c <__ssputs_r>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f000 80a7 	beq.w	800b70a <_svfiprintf_r+0x1c6>
 800b5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5be:	445a      	add	r2, fp
 800b5c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 809f 	beq.w	800b70a <_svfiprintf_r+0x1c6>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d6:	f10a 0a01 	add.w	sl, sl, #1
 800b5da:	9304      	str	r3, [sp, #16]
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5e4:	4654      	mov	r4, sl
 800b5e6:	2205      	movs	r2, #5
 800b5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ec:	484e      	ldr	r0, [pc, #312]	@ (800b728 <_svfiprintf_r+0x1e4>)
 800b5ee:	f7f4 fdff 	bl	80001f0 <memchr>
 800b5f2:	9a04      	ldr	r2, [sp, #16]
 800b5f4:	b9d8      	cbnz	r0, 800b62e <_svfiprintf_r+0xea>
 800b5f6:	06d0      	lsls	r0, r2, #27
 800b5f8:	bf44      	itt	mi
 800b5fa:	2320      	movmi	r3, #32
 800b5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b600:	0711      	lsls	r1, r2, #28
 800b602:	bf44      	itt	mi
 800b604:	232b      	movmi	r3, #43	@ 0x2b
 800b606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b60a:	f89a 3000 	ldrb.w	r3, [sl]
 800b60e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b610:	d015      	beq.n	800b63e <_svfiprintf_r+0xfa>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	4654      	mov	r4, sl
 800b616:	2000      	movs	r0, #0
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	4621      	mov	r1, r4
 800b61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b622:	3b30      	subs	r3, #48	@ 0x30
 800b624:	2b09      	cmp	r3, #9
 800b626:	d94b      	bls.n	800b6c0 <_svfiprintf_r+0x17c>
 800b628:	b1b0      	cbz	r0, 800b658 <_svfiprintf_r+0x114>
 800b62a:	9207      	str	r2, [sp, #28]
 800b62c:	e014      	b.n	800b658 <_svfiprintf_r+0x114>
 800b62e:	eba0 0308 	sub.w	r3, r0, r8
 800b632:	fa09 f303 	lsl.w	r3, r9, r3
 800b636:	4313      	orrs	r3, r2
 800b638:	9304      	str	r3, [sp, #16]
 800b63a:	46a2      	mov	sl, r4
 800b63c:	e7d2      	b.n	800b5e4 <_svfiprintf_r+0xa0>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	1d19      	adds	r1, r3, #4
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	9103      	str	r1, [sp, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	bfbb      	ittet	lt
 800b64a:	425b      	neglt	r3, r3
 800b64c:	f042 0202 	orrlt.w	r2, r2, #2
 800b650:	9307      	strge	r3, [sp, #28]
 800b652:	9307      	strlt	r3, [sp, #28]
 800b654:	bfb8      	it	lt
 800b656:	9204      	strlt	r2, [sp, #16]
 800b658:	7823      	ldrb	r3, [r4, #0]
 800b65a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b65c:	d10a      	bne.n	800b674 <_svfiprintf_r+0x130>
 800b65e:	7863      	ldrb	r3, [r4, #1]
 800b660:	2b2a      	cmp	r3, #42	@ 0x2a
 800b662:	d132      	bne.n	800b6ca <_svfiprintf_r+0x186>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	1d1a      	adds	r2, r3, #4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	9203      	str	r2, [sp, #12]
 800b66c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b670:	3402      	adds	r4, #2
 800b672:	9305      	str	r3, [sp, #20]
 800b674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b738 <_svfiprintf_r+0x1f4>
 800b678:	7821      	ldrb	r1, [r4, #0]
 800b67a:	2203      	movs	r2, #3
 800b67c:	4650      	mov	r0, sl
 800b67e:	f7f4 fdb7 	bl	80001f0 <memchr>
 800b682:	b138      	cbz	r0, 800b694 <_svfiprintf_r+0x150>
 800b684:	9b04      	ldr	r3, [sp, #16]
 800b686:	eba0 000a 	sub.w	r0, r0, sl
 800b68a:	2240      	movs	r2, #64	@ 0x40
 800b68c:	4082      	lsls	r2, r0
 800b68e:	4313      	orrs	r3, r2
 800b690:	3401      	adds	r4, #1
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	4824      	ldr	r0, [pc, #144]	@ (800b72c <_svfiprintf_r+0x1e8>)
 800b69a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b69e:	2206      	movs	r2, #6
 800b6a0:	f7f4 fda6 	bl	80001f0 <memchr>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d036      	beq.n	800b716 <_svfiprintf_r+0x1d2>
 800b6a8:	4b21      	ldr	r3, [pc, #132]	@ (800b730 <_svfiprintf_r+0x1ec>)
 800b6aa:	bb1b      	cbnz	r3, 800b6f4 <_svfiprintf_r+0x1b0>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	3307      	adds	r3, #7
 800b6b0:	f023 0307 	bic.w	r3, r3, #7
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ba:	4433      	add	r3, r6
 800b6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6be:	e76a      	b.n	800b596 <_svfiprintf_r+0x52>
 800b6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	e7a8      	b.n	800b61c <_svfiprintf_r+0xd8>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	3401      	adds	r4, #1
 800b6ce:	9305      	str	r3, [sp, #20]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f04f 0c0a 	mov.w	ip, #10
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6dc:	3a30      	subs	r2, #48	@ 0x30
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d903      	bls.n	800b6ea <_svfiprintf_r+0x1a6>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0c6      	beq.n	800b674 <_svfiprintf_r+0x130>
 800b6e6:	9105      	str	r1, [sp, #20]
 800b6e8:	e7c4      	b.n	800b674 <_svfiprintf_r+0x130>
 800b6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e7f0      	b.n	800b6d6 <_svfiprintf_r+0x192>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b734 <_svfiprintf_r+0x1f0>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4638      	mov	r0, r7
 800b700:	f3af 8000 	nop.w
 800b704:	1c42      	adds	r2, r0, #1
 800b706:	4606      	mov	r6, r0
 800b708:	d1d6      	bne.n	800b6b8 <_svfiprintf_r+0x174>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	065b      	lsls	r3, r3, #25
 800b70e:	f53f af2d 	bmi.w	800b56c <_svfiprintf_r+0x28>
 800b712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b714:	e72c      	b.n	800b570 <_svfiprintf_r+0x2c>
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <_svfiprintf_r+0x1f0>)
 800b71e:	a904      	add	r1, sp, #16
 800b720:	4638      	mov	r0, r7
 800b722:	f000 f879 	bl	800b818 <_printf_i>
 800b726:	e7ed      	b.n	800b704 <_svfiprintf_r+0x1c0>
 800b728:	0800c444 	.word	0x0800c444
 800b72c:	0800c44e 	.word	0x0800c44e
 800b730:	00000000 	.word	0x00000000
 800b734:	0800b48d 	.word	0x0800b48d
 800b738:	0800c44a 	.word	0x0800c44a

0800b73c <_printf_common>:
 800b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b740:	4616      	mov	r6, r2
 800b742:	4698      	mov	r8, r3
 800b744:	688a      	ldr	r2, [r1, #8]
 800b746:	690b      	ldr	r3, [r1, #16]
 800b748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	bfb8      	it	lt
 800b750:	4613      	movlt	r3, r2
 800b752:	6033      	str	r3, [r6, #0]
 800b754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b758:	4607      	mov	r7, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	b10a      	cbz	r2, 800b762 <_printf_common+0x26>
 800b75e:	3301      	adds	r3, #1
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	0699      	lsls	r1, r3, #26
 800b766:	bf42      	ittt	mi
 800b768:	6833      	ldrmi	r3, [r6, #0]
 800b76a:	3302      	addmi	r3, #2
 800b76c:	6033      	strmi	r3, [r6, #0]
 800b76e:	6825      	ldr	r5, [r4, #0]
 800b770:	f015 0506 	ands.w	r5, r5, #6
 800b774:	d106      	bne.n	800b784 <_printf_common+0x48>
 800b776:	f104 0a19 	add.w	sl, r4, #25
 800b77a:	68e3      	ldr	r3, [r4, #12]
 800b77c:	6832      	ldr	r2, [r6, #0]
 800b77e:	1a9b      	subs	r3, r3, r2
 800b780:	42ab      	cmp	r3, r5
 800b782:	dc26      	bgt.n	800b7d2 <_printf_common+0x96>
 800b784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b788:	6822      	ldr	r2, [r4, #0]
 800b78a:	3b00      	subs	r3, #0
 800b78c:	bf18      	it	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	0692      	lsls	r2, r2, #26
 800b792:	d42b      	bmi.n	800b7ec <_printf_common+0xb0>
 800b794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b798:	4641      	mov	r1, r8
 800b79a:	4638      	mov	r0, r7
 800b79c:	47c8      	blx	r9
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d01e      	beq.n	800b7e0 <_printf_common+0xa4>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	f003 0306 	and.w	r3, r3, #6
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	bf02      	ittt	eq
 800b7ae:	68e5      	ldreq	r5, [r4, #12]
 800b7b0:	6833      	ldreq	r3, [r6, #0]
 800b7b2:	1aed      	subeq	r5, r5, r3
 800b7b4:	68a3      	ldr	r3, [r4, #8]
 800b7b6:	bf0c      	ite	eq
 800b7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7bc:	2500      	movne	r5, #0
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bfc4      	itt	gt
 800b7c2:	1a9b      	subgt	r3, r3, r2
 800b7c4:	18ed      	addgt	r5, r5, r3
 800b7c6:	2600      	movs	r6, #0
 800b7c8:	341a      	adds	r4, #26
 800b7ca:	42b5      	cmp	r5, r6
 800b7cc:	d11a      	bne.n	800b804 <_printf_common+0xc8>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e008      	b.n	800b7e4 <_printf_common+0xa8>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4652      	mov	r2, sl
 800b7d6:	4641      	mov	r1, r8
 800b7d8:	4638      	mov	r0, r7
 800b7da:	47c8      	blx	r9
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d103      	bne.n	800b7e8 <_printf_common+0xac>
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	e7c6      	b.n	800b77a <_printf_common+0x3e>
 800b7ec:	18e1      	adds	r1, r4, r3
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	2030      	movs	r0, #48	@ 0x30
 800b7f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7f6:	4422      	add	r2, r4
 800b7f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b800:	3302      	adds	r3, #2
 800b802:	e7c7      	b.n	800b794 <_printf_common+0x58>
 800b804:	2301      	movs	r3, #1
 800b806:	4622      	mov	r2, r4
 800b808:	4641      	mov	r1, r8
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c8      	blx	r9
 800b80e:	3001      	adds	r0, #1
 800b810:	d0e6      	beq.n	800b7e0 <_printf_common+0xa4>
 800b812:	3601      	adds	r6, #1
 800b814:	e7d9      	b.n	800b7ca <_printf_common+0x8e>
	...

0800b818 <_printf_i>:
 800b818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	7e0f      	ldrb	r7, [r1, #24]
 800b81e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b820:	2f78      	cmp	r7, #120	@ 0x78
 800b822:	4691      	mov	r9, r2
 800b824:	4680      	mov	r8, r0
 800b826:	460c      	mov	r4, r1
 800b828:	469a      	mov	sl, r3
 800b82a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b82e:	d807      	bhi.n	800b840 <_printf_i+0x28>
 800b830:	2f62      	cmp	r7, #98	@ 0x62
 800b832:	d80a      	bhi.n	800b84a <_printf_i+0x32>
 800b834:	2f00      	cmp	r7, #0
 800b836:	f000 80d1 	beq.w	800b9dc <_printf_i+0x1c4>
 800b83a:	2f58      	cmp	r7, #88	@ 0x58
 800b83c:	f000 80b8 	beq.w	800b9b0 <_printf_i+0x198>
 800b840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b848:	e03a      	b.n	800b8c0 <_printf_i+0xa8>
 800b84a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b84e:	2b15      	cmp	r3, #21
 800b850:	d8f6      	bhi.n	800b840 <_printf_i+0x28>
 800b852:	a101      	add	r1, pc, #4	@ (adr r1, 800b858 <_printf_i+0x40>)
 800b854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b858:	0800b8b1 	.word	0x0800b8b1
 800b85c:	0800b8c5 	.word	0x0800b8c5
 800b860:	0800b841 	.word	0x0800b841
 800b864:	0800b841 	.word	0x0800b841
 800b868:	0800b841 	.word	0x0800b841
 800b86c:	0800b841 	.word	0x0800b841
 800b870:	0800b8c5 	.word	0x0800b8c5
 800b874:	0800b841 	.word	0x0800b841
 800b878:	0800b841 	.word	0x0800b841
 800b87c:	0800b841 	.word	0x0800b841
 800b880:	0800b841 	.word	0x0800b841
 800b884:	0800b9c3 	.word	0x0800b9c3
 800b888:	0800b8ef 	.word	0x0800b8ef
 800b88c:	0800b97d 	.word	0x0800b97d
 800b890:	0800b841 	.word	0x0800b841
 800b894:	0800b841 	.word	0x0800b841
 800b898:	0800b9e5 	.word	0x0800b9e5
 800b89c:	0800b841 	.word	0x0800b841
 800b8a0:	0800b8ef 	.word	0x0800b8ef
 800b8a4:	0800b841 	.word	0x0800b841
 800b8a8:	0800b841 	.word	0x0800b841
 800b8ac:	0800b985 	.word	0x0800b985
 800b8b0:	6833      	ldr	r3, [r6, #0]
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6032      	str	r2, [r6, #0]
 800b8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e09c      	b.n	800b9fe <_printf_i+0x1e6>
 800b8c4:	6833      	ldr	r3, [r6, #0]
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	1d19      	adds	r1, r3, #4
 800b8ca:	6031      	str	r1, [r6, #0]
 800b8cc:	0606      	lsls	r6, r0, #24
 800b8ce:	d501      	bpl.n	800b8d4 <_printf_i+0xbc>
 800b8d0:	681d      	ldr	r5, [r3, #0]
 800b8d2:	e003      	b.n	800b8dc <_printf_i+0xc4>
 800b8d4:	0645      	lsls	r5, r0, #25
 800b8d6:	d5fb      	bpl.n	800b8d0 <_printf_i+0xb8>
 800b8d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	da03      	bge.n	800b8e8 <_printf_i+0xd0>
 800b8e0:	232d      	movs	r3, #45	@ 0x2d
 800b8e2:	426d      	negs	r5, r5
 800b8e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e8:	4858      	ldr	r0, [pc, #352]	@ (800ba4c <_printf_i+0x234>)
 800b8ea:	230a      	movs	r3, #10
 800b8ec:	e011      	b.n	800b912 <_printf_i+0xfa>
 800b8ee:	6821      	ldr	r1, [r4, #0]
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	0608      	lsls	r0, r1, #24
 800b8f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8f8:	d402      	bmi.n	800b900 <_printf_i+0xe8>
 800b8fa:	0649      	lsls	r1, r1, #25
 800b8fc:	bf48      	it	mi
 800b8fe:	b2ad      	uxthmi	r5, r5
 800b900:	2f6f      	cmp	r7, #111	@ 0x6f
 800b902:	4852      	ldr	r0, [pc, #328]	@ (800ba4c <_printf_i+0x234>)
 800b904:	6033      	str	r3, [r6, #0]
 800b906:	bf14      	ite	ne
 800b908:	230a      	movne	r3, #10
 800b90a:	2308      	moveq	r3, #8
 800b90c:	2100      	movs	r1, #0
 800b90e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b912:	6866      	ldr	r6, [r4, #4]
 800b914:	60a6      	str	r6, [r4, #8]
 800b916:	2e00      	cmp	r6, #0
 800b918:	db05      	blt.n	800b926 <_printf_i+0x10e>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	432e      	orrs	r6, r5
 800b91e:	f021 0104 	bic.w	r1, r1, #4
 800b922:	6021      	str	r1, [r4, #0]
 800b924:	d04b      	beq.n	800b9be <_printf_i+0x1a6>
 800b926:	4616      	mov	r6, r2
 800b928:	fbb5 f1f3 	udiv	r1, r5, r3
 800b92c:	fb03 5711 	mls	r7, r3, r1, r5
 800b930:	5dc7      	ldrb	r7, [r0, r7]
 800b932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b936:	462f      	mov	r7, r5
 800b938:	42bb      	cmp	r3, r7
 800b93a:	460d      	mov	r5, r1
 800b93c:	d9f4      	bls.n	800b928 <_printf_i+0x110>
 800b93e:	2b08      	cmp	r3, #8
 800b940:	d10b      	bne.n	800b95a <_printf_i+0x142>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	07df      	lsls	r7, r3, #31
 800b946:	d508      	bpl.n	800b95a <_printf_i+0x142>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	6861      	ldr	r1, [r4, #4]
 800b94c:	4299      	cmp	r1, r3
 800b94e:	bfde      	ittt	le
 800b950:	2330      	movle	r3, #48	@ 0x30
 800b952:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b95a:	1b92      	subs	r2, r2, r6
 800b95c:	6122      	str	r2, [r4, #16]
 800b95e:	f8cd a000 	str.w	sl, [sp]
 800b962:	464b      	mov	r3, r9
 800b964:	aa03      	add	r2, sp, #12
 800b966:	4621      	mov	r1, r4
 800b968:	4640      	mov	r0, r8
 800b96a:	f7ff fee7 	bl	800b73c <_printf_common>
 800b96e:	3001      	adds	r0, #1
 800b970:	d14a      	bne.n	800ba08 <_printf_i+0x1f0>
 800b972:	f04f 30ff 	mov.w	r0, #4294967295
 800b976:	b004      	add	sp, #16
 800b978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	f043 0320 	orr.w	r3, r3, #32
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	4832      	ldr	r0, [pc, #200]	@ (800ba50 <_printf_i+0x238>)
 800b986:	2778      	movs	r7, #120	@ 0x78
 800b988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	6831      	ldr	r1, [r6, #0]
 800b990:	061f      	lsls	r7, r3, #24
 800b992:	f851 5b04 	ldr.w	r5, [r1], #4
 800b996:	d402      	bmi.n	800b99e <_printf_i+0x186>
 800b998:	065f      	lsls	r7, r3, #25
 800b99a:	bf48      	it	mi
 800b99c:	b2ad      	uxthmi	r5, r5
 800b99e:	6031      	str	r1, [r6, #0]
 800b9a0:	07d9      	lsls	r1, r3, #31
 800b9a2:	bf44      	itt	mi
 800b9a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b9a8:	6023      	strmi	r3, [r4, #0]
 800b9aa:	b11d      	cbz	r5, 800b9b4 <_printf_i+0x19c>
 800b9ac:	2310      	movs	r3, #16
 800b9ae:	e7ad      	b.n	800b90c <_printf_i+0xf4>
 800b9b0:	4826      	ldr	r0, [pc, #152]	@ (800ba4c <_printf_i+0x234>)
 800b9b2:	e7e9      	b.n	800b988 <_printf_i+0x170>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	f023 0320 	bic.w	r3, r3, #32
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	e7f6      	b.n	800b9ac <_printf_i+0x194>
 800b9be:	4616      	mov	r6, r2
 800b9c0:	e7bd      	b.n	800b93e <_printf_i+0x126>
 800b9c2:	6833      	ldr	r3, [r6, #0]
 800b9c4:	6825      	ldr	r5, [r4, #0]
 800b9c6:	6961      	ldr	r1, [r4, #20]
 800b9c8:	1d18      	adds	r0, r3, #4
 800b9ca:	6030      	str	r0, [r6, #0]
 800b9cc:	062e      	lsls	r6, r5, #24
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	d501      	bpl.n	800b9d6 <_printf_i+0x1be>
 800b9d2:	6019      	str	r1, [r3, #0]
 800b9d4:	e002      	b.n	800b9dc <_printf_i+0x1c4>
 800b9d6:	0668      	lsls	r0, r5, #25
 800b9d8:	d5fb      	bpl.n	800b9d2 <_printf_i+0x1ba>
 800b9da:	8019      	strh	r1, [r3, #0]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	6123      	str	r3, [r4, #16]
 800b9e0:	4616      	mov	r6, r2
 800b9e2:	e7bc      	b.n	800b95e <_printf_i+0x146>
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	1d1a      	adds	r2, r3, #4
 800b9e8:	6032      	str	r2, [r6, #0]
 800b9ea:	681e      	ldr	r6, [r3, #0]
 800b9ec:	6862      	ldr	r2, [r4, #4]
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7f4 fbfd 	bl	80001f0 <memchr>
 800b9f6:	b108      	cbz	r0, 800b9fc <_printf_i+0x1e4>
 800b9f8:	1b80      	subs	r0, r0, r6
 800b9fa:	6060      	str	r0, [r4, #4]
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	2300      	movs	r3, #0
 800ba02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba06:	e7aa      	b.n	800b95e <_printf_i+0x146>
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	4640      	mov	r0, r8
 800ba10:	47d0      	blx	sl
 800ba12:	3001      	adds	r0, #1
 800ba14:	d0ad      	beq.n	800b972 <_printf_i+0x15a>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	079b      	lsls	r3, r3, #30
 800ba1a:	d413      	bmi.n	800ba44 <_printf_i+0x22c>
 800ba1c:	68e0      	ldr	r0, [r4, #12]
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	4298      	cmp	r0, r3
 800ba22:	bfb8      	it	lt
 800ba24:	4618      	movlt	r0, r3
 800ba26:	e7a6      	b.n	800b976 <_printf_i+0x15e>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	4649      	mov	r1, r9
 800ba2e:	4640      	mov	r0, r8
 800ba30:	47d0      	blx	sl
 800ba32:	3001      	adds	r0, #1
 800ba34:	d09d      	beq.n	800b972 <_printf_i+0x15a>
 800ba36:	3501      	adds	r5, #1
 800ba38:	68e3      	ldr	r3, [r4, #12]
 800ba3a:	9903      	ldr	r1, [sp, #12]
 800ba3c:	1a5b      	subs	r3, r3, r1
 800ba3e:	42ab      	cmp	r3, r5
 800ba40:	dcf2      	bgt.n	800ba28 <_printf_i+0x210>
 800ba42:	e7eb      	b.n	800ba1c <_printf_i+0x204>
 800ba44:	2500      	movs	r5, #0
 800ba46:	f104 0619 	add.w	r6, r4, #25
 800ba4a:	e7f5      	b.n	800ba38 <_printf_i+0x220>
 800ba4c:	0800c455 	.word	0x0800c455
 800ba50:	0800c466 	.word	0x0800c466

0800ba54 <memmove>:
 800ba54:	4288      	cmp	r0, r1
 800ba56:	b510      	push	{r4, lr}
 800ba58:	eb01 0402 	add.w	r4, r1, r2
 800ba5c:	d902      	bls.n	800ba64 <memmove+0x10>
 800ba5e:	4284      	cmp	r4, r0
 800ba60:	4623      	mov	r3, r4
 800ba62:	d807      	bhi.n	800ba74 <memmove+0x20>
 800ba64:	1e43      	subs	r3, r0, #1
 800ba66:	42a1      	cmp	r1, r4
 800ba68:	d008      	beq.n	800ba7c <memmove+0x28>
 800ba6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba72:	e7f8      	b.n	800ba66 <memmove+0x12>
 800ba74:	4402      	add	r2, r0
 800ba76:	4601      	mov	r1, r0
 800ba78:	428a      	cmp	r2, r1
 800ba7a:	d100      	bne.n	800ba7e <memmove+0x2a>
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba86:	e7f7      	b.n	800ba78 <memmove+0x24>

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	@ (800baa4 <_sbrk_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 fd34 	bl	8002500 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	20001388 	.word	0x20001388

0800baa8 <_realloc_r>:
 800baa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baac:	4607      	mov	r7, r0
 800baae:	4614      	mov	r4, r2
 800bab0:	460d      	mov	r5, r1
 800bab2:	b921      	cbnz	r1, 800babe <_realloc_r+0x16>
 800bab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	4611      	mov	r1, r2
 800baba:	f7ff bc5b 	b.w	800b374 <_malloc_r>
 800babe:	b92a      	cbnz	r2, 800bacc <_realloc_r+0x24>
 800bac0:	f7ff fbec 	bl	800b29c <_free_r>
 800bac4:	4625      	mov	r5, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bacc:	f000 f81a 	bl	800bb04 <_malloc_usable_size_r>
 800bad0:	4284      	cmp	r4, r0
 800bad2:	4606      	mov	r6, r0
 800bad4:	d802      	bhi.n	800badc <_realloc_r+0x34>
 800bad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bada:	d8f4      	bhi.n	800bac6 <_realloc_r+0x1e>
 800badc:	4621      	mov	r1, r4
 800bade:	4638      	mov	r0, r7
 800bae0:	f7ff fc48 	bl	800b374 <_malloc_r>
 800bae4:	4680      	mov	r8, r0
 800bae6:	b908      	cbnz	r0, 800baec <_realloc_r+0x44>
 800bae8:	4645      	mov	r5, r8
 800baea:	e7ec      	b.n	800bac6 <_realloc_r+0x1e>
 800baec:	42b4      	cmp	r4, r6
 800baee:	4622      	mov	r2, r4
 800baf0:	4629      	mov	r1, r5
 800baf2:	bf28      	it	cs
 800baf4:	4632      	movcs	r2, r6
 800baf6:	f7ff fbc3 	bl	800b280 <memcpy>
 800bafa:	4629      	mov	r1, r5
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7ff fbcd 	bl	800b29c <_free_r>
 800bb02:	e7f1      	b.n	800bae8 <_realloc_r+0x40>

0800bb04 <_malloc_usable_size_r>:
 800bb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb08:	1f18      	subs	r0, r3, #4
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfbc      	itt	lt
 800bb0e:	580b      	ldrlt	r3, [r1, r0]
 800bb10:	18c0      	addlt	r0, r0, r3
 800bb12:	4770      	bx	lr

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
